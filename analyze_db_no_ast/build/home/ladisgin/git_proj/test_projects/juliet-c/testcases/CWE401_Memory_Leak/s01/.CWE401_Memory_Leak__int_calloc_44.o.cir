!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE401_Memory_Leak__int_calloc_44.c":24:21)
#loc4 = loc("CWE401_Memory_Leak__int_calloc_44.c":24:27)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_44.c":51:25)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_44.c":51:31)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_44.c":71:25)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_44.c":71:31)
#loc119 = loc(fused[#loc3, #loc4])
#loc138 = loc(fused[#loc53, #loc54])
#loc147 = loc(fused[#loc80, #loc81])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func internal private  @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc5)
    cir.return loc(#loc2)
  } loc(#loc118)
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc120)
  cir.func private  @exit(!s32i) extra(#fn_attr1) loc(#loc121)
  cir.func private  @printIntLine(!s32i) loc(#loc122)
  cir.func no_proto  @CWE401_Memory_Leak__int_calloc_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc125)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc18)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    %4 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc20)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc21)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc127)
    %8 = cir.call @calloc(%6, %7) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc20)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc128)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.scope {
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
      %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
      %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc30)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc34)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr1) loc(#loc32)
      } loc(#loc132)
    } loc(#loc130)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc37)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc38)
    cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc42)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc43)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    cir.call %18(%19) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc43)
    cir.return loc(#loc13)
  } loc(#loc123)
  cir.func no_proto  @CWE401_Memory_Leak__int_calloc_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc134)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc53, #loc54])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc55)
    cir.return loc(#loc52)
  } loc(#loc137)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc61)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc141)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc62)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc142)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc64)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc64)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc64)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc64)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc143)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc66)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc69)
    cir.store %11, %14 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc72)
    %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc73)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc74)
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
    cir.call %19(%20) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc74)
    cir.return loc(#loc57)
  } loc(#loc139)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc145)
  cir.func internal private  @goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc147)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    %1 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc83)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc84)
    cir.call @free(%3) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc83)
    cir.return loc(#loc79)
  } loc(#loc146)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc90)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>> loc(#loc150)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc91)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    %4 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc93)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc94)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc94)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc152)
    %8 = cir.call @calloc(%6, %7) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc93)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc153)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    cir.scope {
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc101)
      %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc102)
      %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc103)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc107)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr1) loc(#loc105)
      } loc(#loc157)
    } loc(#loc155)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc108)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %13 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc111)
    cir.store %10, %13 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc114)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc115)
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>> loc(#loc116)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    cir.call %18(%19) : (!cir.ptr<!cir.func<!void (!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc116)
    cir.return loc(#loc86)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_44.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__int_calloc_44.c":24:1)
#loc2 = loc("CWE401_Memory_Leak__int_calloc_44.c":28:1)
#loc5 = loc("CWE401_Memory_Leak__int_calloc_44.c":25:1)
#loc6 = loc("/usr/include/stdlib.h":675:1)
#loc7 = loc("/usr/include/stdlib.h":676:14)
#loc8 = loc("/usr/include/stdlib.h":756:1)
#loc9 = loc("/usr/include/stdlib.h":756:70)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_44.c":30:1)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_44.c":44:1)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_44.c":32:5)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_44.c":32:11)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_44.c":34:5)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_44.c":34:31)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_44.c":35:12)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_44.c":35:5)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:19)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:26)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:31)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:41)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:42)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_44.c":37:5)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:5)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:33)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:9)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:17)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:14)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:23)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:24)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:30)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_44.c":38:29)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_44.c":40:15)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_44.c":40:5)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_44.c":40:10)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_44.c":40:11)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_44.c":41:18)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_44.c":41:23)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_44.c":41:24)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_44.c":41:5)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_44.c":43:5)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_44.c":43:13)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_44.c":91:1)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_44.c":95:1)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_44.c":93:5)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_44.c":93:13)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_44.c":94:5)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_44.c":94:13)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_44.c":51:1)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_44.c":55:1)
#loc55 = loc("CWE401_Memory_Leak__int_calloc_44.c":52:1)
#loc56 = loc("CWE401_Memory_Leak__int_calloc_44.c":57:1)
#loc57 = loc("CWE401_Memory_Leak__int_calloc_44.c":68:1)
#loc58 = loc("CWE401_Memory_Leak__int_calloc_44.c":59:5)
#loc59 = loc("CWE401_Memory_Leak__int_calloc_44.c":59:11)
#loc60 = loc("CWE401_Memory_Leak__int_calloc_44.c":60:5)
#loc61 = loc("CWE401_Memory_Leak__int_calloc_44.c":60:31)
#loc62 = loc("CWE401_Memory_Leak__int_calloc_44.c":61:12)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_44.c":61:5)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_44.c":63:19)
#loc65 = loc("CWE401_Memory_Leak__int_calloc_44.c":63:5)
#loc66 = loc("CWE401_Memory_Leak__int_calloc_44.c":65:15)
#loc67 = loc("CWE401_Memory_Leak__int_calloc_44.c":65:5)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_44.c":65:10)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_44.c":65:11)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_44.c":66:18)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_44.c":66:23)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_44.c":66:24)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_44.c":66:5)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_44.c":67:5)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_44.c":67:13)
#loc76 = loc("/usr/include/stdlib.h":687:1)
#loc77 = loc("/usr/include/stdlib.h":687:32)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_44.c":71:1)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_44.c":75:1)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_44.c":72:1)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_44.c":74:5)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_44.c":74:10)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_44.c":77:1)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_44.c":89:1)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_44.c":79:5)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_44.c":79:11)
#loc89 = loc("CWE401_Memory_Leak__int_calloc_44.c":80:5)
#loc90 = loc("CWE401_Memory_Leak__int_calloc_44.c":80:31)
#loc91 = loc("CWE401_Memory_Leak__int_calloc_44.c":81:12)
#loc92 = loc("CWE401_Memory_Leak__int_calloc_44.c":81:5)
#loc93 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:19)
#loc94 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:26)
#loc95 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:31)
#loc96 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:41)
#loc97 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:42)
#loc98 = loc("CWE401_Memory_Leak__int_calloc_44.c":83:5)
#loc99 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:5)
#loc100 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:33)
#loc101 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:9)
#loc102 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:17)
#loc103 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:14)
#loc104 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:23)
#loc105 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:24)
#loc106 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:30)
#loc107 = loc("CWE401_Memory_Leak__int_calloc_44.c":84:29)
#loc108 = loc("CWE401_Memory_Leak__int_calloc_44.c":86:15)
#loc109 = loc("CWE401_Memory_Leak__int_calloc_44.c":86:5)
#loc110 = loc("CWE401_Memory_Leak__int_calloc_44.c":86:10)
#loc111 = loc("CWE401_Memory_Leak__int_calloc_44.c":86:11)
#loc112 = loc("CWE401_Memory_Leak__int_calloc_44.c":87:18)
#loc113 = loc("CWE401_Memory_Leak__int_calloc_44.c":87:23)
#loc114 = loc("CWE401_Memory_Leak__int_calloc_44.c":87:24)
#loc115 = loc("CWE401_Memory_Leak__int_calloc_44.c":87:5)
#loc116 = loc("CWE401_Memory_Leak__int_calloc_44.c":88:5)
#loc117 = loc("CWE401_Memory_Leak__int_calloc_44.c":88:13)
#loc118 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc6, #loc7])
#loc121 = loc(fused[#loc8, #loc9])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc14, #loc15])
#loc125 = loc(fused[#loc16, #loc17])
#loc126 = loc(fused[#loc19, #loc18])
#loc127 = loc(fused[#loc22, #loc23])
#loc128 = loc(fused[#loc20, #loc24])
#loc129 = loc(fused[#loc25, #loc24])
#loc130 = loc(fused[#loc26, #loc27])
#loc131 = loc(fused[#loc28, #loc29])
#loc132 = loc(fused[#loc31, #loc27])
#loc133 = loc(fused[#loc36, #loc35])
#loc134 = loc(fused[#loc45, #loc46])
#loc135 = loc(fused[#loc47, #loc48])
#loc136 = loc(fused[#loc49, #loc50])
#loc137 = loc(fused[#loc51, #loc52])
#loc139 = loc(fused[#loc56, #loc57])
#loc140 = loc(fused[#loc58, #loc59])
#loc141 = loc(fused[#loc60, #loc61])
#loc142 = loc(fused[#loc63, #loc62])
#loc143 = loc(fused[#loc65, #loc64])
#loc144 = loc(fused[#loc67, #loc66])
#loc145 = loc(fused[#loc76, #loc77])
#loc146 = loc(fused[#loc78, #loc79])
#loc148 = loc(fused[#loc85, #loc86])
#loc149 = loc(fused[#loc87, #loc88])
#loc150 = loc(fused[#loc89, #loc90])
#loc151 = loc(fused[#loc92, #loc91])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc93, #loc97])
#loc154 = loc(fused[#loc98, #loc97])
#loc155 = loc(fused[#loc99, #loc100])
#loc156 = loc(fused[#loc101, #loc102])
#loc157 = loc(fused[#loc104, #loc100])
#loc158 = loc(fused[#loc109, #loc108])
