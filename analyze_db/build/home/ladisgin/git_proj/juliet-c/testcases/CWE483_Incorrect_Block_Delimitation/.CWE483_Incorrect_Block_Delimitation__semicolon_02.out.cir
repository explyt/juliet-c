!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":109:10)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":109:14)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":109:20)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":109:32)
#loc152 = loc(fused[#loc51, #loc52])
#loc153 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_02_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc11)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc137)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc138)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc20)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc139)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc137)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc18)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc138)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc141)
            cir.if %10 {
            } loc(#loc22)
          } loc(#loc140)
          cir.scope {
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc27)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc28)
            cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc143)
          } loc(#loc142)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc32)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc34)
            } loc(#loc145)
          } loc(#loc144)
        } loc(#loc136)
      } loc(#loc135)
    } loc(#loc134)
    cir.return loc(#loc8)
  } loc(#loc133)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc146)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc152)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc153)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE483_Incorrect_Block_Delimitation__semicolon_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call @CWE483_Incorrect_Block_Delimitation__semicolon_02_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE483_Incorrect_Block_Delimitation__semicolon_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE483_Incorrect_Block_Delimitation__semicolon_02_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.return %17 : !s32i loc(#loc156)
  } loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc74)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc74)
      cir.if %1 {
        %2 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc161)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc162)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc86)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc163)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc84)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc162)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc90)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc165)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc92)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc92)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc94)
              cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc167)
            } loc(#loc166)
          } loc(#loc164)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc98)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc98)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc100)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc100)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc101)
            } loc(#loc169)
          } loc(#loc168)
        } loc(#loc160)
      } loc(#loc159)
    } loc(#loc158)
    cir.return loc(#loc71)
  } loc(#loc157)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc106)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc106)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc174)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc175)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc114)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc115)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc176)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc113)
          cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc175)
          cir.scope {
            %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc119)
            %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc178)
            cir.if %10 {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc121)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc121)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc122)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc123)
              cir.store %13, %3 : !s32i, !cir.ptr<!s32i> loc(#loc180)
            } loc(#loc179)
          } loc(#loc177)
          cir.scope {
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc127)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc127)
            cir.if %9 {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc129)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc129)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc130)
            } loc(#loc182)
          } loc(#loc181)
        } loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.return loc(#loc103)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":30:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":35:27)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":20:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":39:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":22:5)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":38:5)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":22:8)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":23:5)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":24:9)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":37:9)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:13)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:32)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":26:13)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":26:21)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:22)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":25:31)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:13)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:24)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:17)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":28:22)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":29:13)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":32:13)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":30:17)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":31:21)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":31:17)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":33:13)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":36:13)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":33:17)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":34:13)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":35:17)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":94:1)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":98:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":96:5)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":96:11)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":97:5)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":97:11)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":114:15)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":116:15)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":119:15)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":121:15)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":109:1)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":124:1)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":110:1)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":112:27)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":112:22)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":112:5)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":114:5)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":115:5)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":115:60)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":116:5)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":119:5)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":120:5)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":120:59)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":121:5)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":123:12)
#loc68 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":123:5)
#loc69 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":51:19)
#loc70 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":46:1)
#loc71 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":70:1)
#loc72 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":48:5)
#loc73 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":69:5)
#loc74 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":48:8)
#loc75 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":49:5)
#loc76 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":52:5)
#loc77 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":54:5)
#loc78 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":51:9)
#loc79 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":55:9)
#loc80 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":68:9)
#loc81 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:13)
#loc82 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:32)
#loc83 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":57:13)
#loc84 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":57:21)
#loc85 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:22)
#loc86 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":56:31)
#loc87 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:13)
#loc88 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":63:13)
#loc89 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:17)
#loc90 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":59:22)
#loc91 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":60:13)
#loc92 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":61:27)
#loc93 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":61:17)
#loc94 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":62:21)
#loc95 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":62:17)
#loc96 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":64:13)
#loc97 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":67:13)
#loc98 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":64:17)
#loc99 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":65:13)
#loc100 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":66:27)
#loc101 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":66:17)
#loc102 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":73:1)
#loc103 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":92:1)
#loc104 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":75:5)
#loc105 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":91:5)
#loc106 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":75:8)
#loc107 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":76:5)
#loc108 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":77:9)
#loc109 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":90:9)
#loc110 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:13)
#loc111 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:32)
#loc112 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":79:13)
#loc113 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":79:21)
#loc114 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:22)
#loc115 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":78:31)
#loc116 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:13)
#loc117 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":85:13)
#loc118 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:17)
#loc119 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":81:22)
#loc120 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":82:13)
#loc121 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":83:27)
#loc122 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":83:17)
#loc123 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":84:21)
#loc124 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":84:17)
#loc125 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":86:13)
#loc126 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":89:13)
#loc127 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":86:17)
#loc128 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":87:13)
#loc129 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":88:27)
#loc130 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_02.c":88:17)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc7, #loc8])
#loc134 = loc(fused[#loc9, #loc10])
#loc135 = loc(fused[#loc12, #loc10])
#loc136 = loc(fused[#loc13, #loc14])
#loc137 = loc(fused[#loc15, #loc16])
#loc138 = loc(fused[#loc17, #loc18])
#loc139 = loc(fused[#loc19, #loc20])
#loc140 = loc(fused[#loc21, #loc22])
#loc141 = loc(fused[#loc23, #loc24])
#loc142 = loc(fused[#loc25, #loc26])
#loc143 = loc(fused[#loc29, #loc28])
#loc144 = loc(fused[#loc30, #loc31])
#loc145 = loc(fused[#loc33, #loc31])
#loc146 = loc(fused[#loc35, #loc36])
#loc147 = loc(fused[#loc37, #loc38])
#loc148 = loc(fused[#loc39, #loc40])
#loc149 = loc(fused[#loc41, #loc42])
#loc150 = loc(fused[#loc43, #loc44])
#loc151 = loc(fused[#loc49, #loc50])
#loc154 = loc(fused[#loc60, #loc61])
#loc155 = loc(fused[#loc64, #loc65])
#loc156 = loc(fused[#loc68, #loc67])
#loc157 = loc(fused[#loc70, #loc71])
#loc158 = loc(fused[#loc72, #loc73])
#loc159 = loc(fused[#loc75, #loc76, #loc77, #loc73])
#loc160 = loc(fused[#loc79, #loc80])
#loc161 = loc(fused[#loc81, #loc82])
#loc162 = loc(fused[#loc83, #loc84])
#loc163 = loc(fused[#loc85, #loc86])
#loc164 = loc(fused[#loc87, #loc88])
#loc165 = loc(fused[#loc89, #loc90])
#loc166 = loc(fused[#loc91, #loc88])
#loc167 = loc(fused[#loc95, #loc94])
#loc168 = loc(fused[#loc96, #loc97])
#loc169 = loc(fused[#loc99, #loc97])
#loc170 = loc(fused[#loc102, #loc103])
#loc171 = loc(fused[#loc104, #loc105])
#loc172 = loc(fused[#loc107, #loc105])
#loc173 = loc(fused[#loc108, #loc109])
#loc174 = loc(fused[#loc110, #loc111])
#loc175 = loc(fused[#loc112, #loc113])
#loc176 = loc(fused[#loc114, #loc115])
#loc177 = loc(fused[#loc116, #loc117])
#loc178 = loc(fused[#loc118, #loc119])
#loc179 = loc(fused[#loc120, #loc117])
#loc180 = loc(fused[#loc124, #loc123])
#loc181 = loc(fused[#loc125, #loc126])
#loc182 = loc(fused[#loc128, #loc126])
