!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":104:10)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":104:14)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":104:20)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":104:32)
#loc181 = loc(fused[#loc58, #loc59])
#loc182 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc155)
  cir.func private @printIntLine(!s32i) loc(#loc156)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc159)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc160)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc13)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc164)
        cir.condition(%8) loc(#loc21)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc23)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc23)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            cir.yield %23 : !u32i loc(#loc23)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc23)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc23)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc23)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc23)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc23)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc23)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc23)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc23)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc23)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc23)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc23)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc23)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc23)
            cir.yield %27 : !u32i loc(#loc23)
          }) : (!cir.bool) -> !u32i loc(#loc23)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc23)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
        } loc(#loc165)
        cir.yield loc(#loc16)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc26)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc167)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc29)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc169)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc32)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc170)
        cir.condition(%8) loc(#loc33)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc35)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc36)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc172)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc37)
        } loc(#loc171)
        cir.yield loc(#loc28)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc38)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc39)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc168)
    cir.return loc(#loc6)
  } loc(#loc157)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc174)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc177)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc178)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_17_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_divide_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call @CWE369_Divide_by_Zero__int_rand_divide_17_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    cir.return %17 : !s32i loc(#loc185)
  } loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc85)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc89)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc193)
        cir.condition(%8) loc(#loc93)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc95)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
          %10 = cir.ternary(%9, true {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc95)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc95)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc95)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc95)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc95)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc95)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc95)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc95)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc95)
            cir.yield %23 : !u32i loc(#loc95)
          }, false {
            %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc95)
            %14 = cir.const #cir.int<30> : !s32i loc(#loc95)
            %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc95)
            %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc95)
            %18 = cir.const #cir.int<15> : !s32i loc(#loc95)
            %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc95)
            %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc95)
            %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
            %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc95)
            %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc95)
            %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc95)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc95)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc95)
            %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc95)
            cir.yield %27 : !u32i loc(#loc95)
          }) : (!cir.bool) -> !u32i loc(#loc95)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc95)
          cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
        } loc(#loc194)
        cir.yield loc(#loc88)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc98)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
        cir.yield loc(#loc191)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc101)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc104)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%8) loc(#loc105)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc202)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc114)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc204)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc116)
            } else {
              %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc76)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc76)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc117)
            } loc(#loc203)
          } loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc100)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc119)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc205)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.return loc(#loc78)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc128)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc132)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc213)
        cir.condition(%8) loc(#loc136)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc138)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc215)
        } loc(#loc214)
        cir.yield loc(#loc131)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc141)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
        cir.yield loc(#loc211)
      } loc(#loc211)
    } loc(#loc211)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc144)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc147)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc219)
        cir.condition(%8) loc(#loc148)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc150)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc221)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc152)
        } loc(#loc220)
        cir.yield loc(#loc143)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc154)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc222)
        cir.yield loc(#loc217)
      } loc(#loc217)
    } loc(#loc217)
    cir.return loc(#loc121)
  } loc(#loc206)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":38:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":24:11)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":25:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":25:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":27:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":32:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:20)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:18)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":29:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":31:16)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":31:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:24)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":28:23)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":37:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:16)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:20)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:18)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":34:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:22)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:28)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":36:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:24)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":33:23)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":89:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":93:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":91:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":91:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":92:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":92:13)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":109:15)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":111:15)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":114:15)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":116:15)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":104:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":119:1)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":105:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":107:27)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":107:22)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":107:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":109:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":110:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":110:52)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":111:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":114:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":115:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":115:51)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":116:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":118:12)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":118:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":65:23)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":45:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":68:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":47:11)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":48:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":48:9)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":50:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":55:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:16)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:20)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:18)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":52:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":54:16)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":54:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:24)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":51:23)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":67:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:13)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:16)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:20)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:18)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":57:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":66:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":59:21)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":60:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":62:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":64:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:26)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:32)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":61:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":65:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:24)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":56:23)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":71:1)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":87:1)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":73:11)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":74:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":74:9)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:12)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":76:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:5)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":81:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:16)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:20)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:18)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":78:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":80:16)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":80:9)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:24)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":77:23)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":86:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:13)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:16)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:20)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:18)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":83:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:22)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:28)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":85:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:24)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_17.c":82:23)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc7, #loc9])
#loc160 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc14, #loc12])
#loc162 = loc(fused[#loc15, #loc16])
#loc163 = loc(fused[#loc18, #loc17])
#loc164 = loc(fused[#loc19, #loc20])
#loc165 = loc(fused[#loc22, #loc16])
#loc166 = loc(fused[#loc24, #loc23])
#loc167 = loc(fused[#loc26, #loc25])
#loc168 = loc(fused[#loc27, #loc28])
#loc169 = loc(fused[#loc30, #loc29])
#loc170 = loc(fused[#loc31, #loc32])
#loc171 = loc(fused[#loc34, #loc28])
#loc172 = loc(fused[#loc35, #loc36])
#loc173 = loc(fused[#loc39, #loc38])
#loc174 = loc(fused[#loc40, #loc41])
#loc175 = loc(fused[#loc42, #loc43])
#loc176 = loc(fused[#loc44, #loc45])
#loc177 = loc(fused[#loc46, #loc47])
#loc178 = loc(fused[#loc48, #loc49])
#loc179 = loc(fused[#loc50, #loc51])
#loc180 = loc(fused[#loc56, #loc57])
#loc183 = loc(fused[#loc67, #loc68])
#loc184 = loc(fused[#loc71, #loc72])
#loc185 = loc(fused[#loc75, #loc74])
#loc186 = loc(fused[#loc77, #loc78])
#loc187 = loc(fused[#loc79, #loc80])
#loc188 = loc(fused[#loc79, #loc81])
#loc189 = loc(fused[#loc82, #loc83])
#loc190 = loc(fused[#loc86, #loc84])
#loc191 = loc(fused[#loc87, #loc88])
#loc192 = loc(fused[#loc90, #loc89])
#loc193 = loc(fused[#loc91, #loc92])
#loc194 = loc(fused[#loc94, #loc88])
#loc195 = loc(fused[#loc96, #loc95])
#loc196 = loc(fused[#loc98, #loc97])
#loc197 = loc(fused[#loc99, #loc100])
#loc198 = loc(fused[#loc102, #loc101])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc106, #loc100])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc109, #loc110])
#loc203 = loc(fused[#loc111, #loc112, #loc113, #loc108])
#loc204 = loc(fused[#loc114, #loc115])
#loc205 = loc(fused[#loc119, #loc118])
#loc206 = loc(fused[#loc120, #loc121])
#loc207 = loc(fused[#loc122, #loc123])
#loc208 = loc(fused[#loc122, #loc124])
#loc209 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc129, #loc127])
#loc211 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc133, #loc132])
#loc213 = loc(fused[#loc134, #loc135])
#loc214 = loc(fused[#loc137, #loc131])
#loc215 = loc(fused[#loc139, #loc138])
#loc216 = loc(fused[#loc141, #loc140])
#loc217 = loc(fused[#loc142, #loc143])
#loc218 = loc(fused[#loc145, #loc144])
#loc219 = loc(fused[#loc146, #loc147])
#loc220 = loc(fused[#loc149, #loc143])
#loc221 = loc(fused[#loc150, #loc151])
#loc222 = loc(fused[#loc154, #loc153])
