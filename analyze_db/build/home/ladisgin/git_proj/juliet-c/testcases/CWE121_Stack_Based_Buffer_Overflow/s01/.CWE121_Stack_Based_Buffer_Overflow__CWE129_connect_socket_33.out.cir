!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":275:10)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":275:14)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":275:20)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":275:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc483 = loc(fused[#loc337, #loc338])
#loc484 = loc(fused[#loc339, #loc340])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc353)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc354)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc355)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc356)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc357)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc358)
  cir.func private @close(!s32i) -> !s32i loc(#loc359)
  cir.func private @printIntLine(!s32i) loc(#loc360)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc361)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc20)
  cir.func @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc363)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc364)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc26)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc28)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc367)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc368)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc369)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc370)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc37)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc37)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc369)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc42)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc43)
          %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc43)
          %13 = cir.const #cir.int<6> : !u32i loc(#loc44)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc44)
          %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
          cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc372)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc51)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc51)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc374)
            cir.if %56 {
              cir.break loc(#loc53)
            } loc(#loc375)
          } loc(#loc373)
          %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc376)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc377)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc378)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc61)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc61)
          %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc379)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc64)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc380)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc69)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc70)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc381)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc383)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc384)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc384)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc81)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc82)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc82)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc385)
            cir.if %60 {
              cir.break loc(#loc84)
            } loc(#loc386)
          } loc(#loc382)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc86)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc86)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc87)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc87)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc87)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc87)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc87)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc87)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc87)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc88)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc88)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc387)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc90)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc90)
          cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc388)
          cir.scope {
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc96)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc390)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc97)
              cir.yield %58 : !cir.bool loc(#loc97)
            }, false {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc391)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc97)
                cir.yield %62 : !cir.bool loc(#loc97)
              }, false {
                %62 = cir.const #false loc(#loc97)
                cir.yield %62 : !cir.bool loc(#loc97)
              }) : (!cir.bool) -> !cir.bool loc(#loc97)
              cir.yield %61 : !cir.bool loc(#loc97)
            }) : (!cir.bool) -> !cir.bool loc(#loc97)
            cir.if %57 {
              cir.break loc(#loc101)
            } loc(#loc392)
          } loc(#loc389)
          %47 = cir.const #cir.int<0> : !s8i loc(#loc102)
          %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
          %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc104)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc104)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc393)
          %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc106)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc394)
          cir.yield loc(#loc41)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc109)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc109)
          cir.condition(%11) loc(#loc109)
        } loc(#loc371)
      } loc(#loc371)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc113)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc396)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc116)
        } loc(#loc397)
      } loc(#loc395)
    } loc(#loc366)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc399)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc399)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc401)
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc402)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc402)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc402)
        cir.scope {
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc404)
          cir.if %12 {
            %13 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc136)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc136)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc406)
            cir.scope {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc139)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc408)
              cir.for : cond {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                %19 = cir.const #cir.int<10> : !s32i loc(#loc142)
                %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc409)
                cir.condition(%20) loc(#loc409)
              } body {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc143)
                %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc144)
                %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc144)
                %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc144)
                cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc145)
                cir.yield loc(#loc138)
              } step {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc147)
                cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc410)
                cir.yield loc(#loc407)
              } loc(#loc407)
            } loc(#loc407)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc20)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc20)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc148)
          } loc(#loc405)
        } loc(#loc403)
      } loc(#loc400)
    } loc(#loc398)
    cir.return loc(#loc22)
  } loc(#loc362)
  cir.func internal private @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc412)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc413)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc156)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc158)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc415)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc417)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc417)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc419)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc420)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc420)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc420)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc173)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !cir.bool loc(#loc422)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc177)
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %16 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc179)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc179)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc424)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc182)
              cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc426)
              cir.for : cond {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc185)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc427)
                cir.condition(%21) loc(#loc427)
              } body {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                %20 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc187)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc187)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc188)
                cir.yield loc(#loc181)
              } step {
                %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc190)
                cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc428)
                cir.yield loc(#loc425)
              } loc(#loc425)
            } loc(#loc425)
          } else {
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc191)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc191)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc192)
          } loc(#loc423)
        } loc(#loc421)
      } loc(#loc418)
    } loc(#loc416)
    cir.return loc(#loc150)
  } loc(#loc411)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc193)
  cir.func internal private @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc430)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc431)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc199)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc200)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc201)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc434)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc435)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc436)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc437)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc210)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc210)
      cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc436)
      cir.scope {
        cir.do {
          %10 = cir.const #cir.int<2> : !s32i loc(#loc215)
          %11 = cir.const #cir.int<1> : !u32i loc(#loc216)
          %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc216)
          %13 = cir.const #cir.int<6> : !u32i loc(#loc217)
          %14 = cir.cast(integral, %13 : !u32i), !s32i loc(#loc217)
          %15 = cir.call @socket(%10, %12, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc218)
          cir.store %15, %6 : !s32i, !cir.ptr<!s32i> loc(#loc439)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc223)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc224)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc224)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc441)
            cir.if %56 {
              cir.break loc(#loc226)
            } loc(#loc442)
          } loc(#loc440)
          %16 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc443)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc229)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc444)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc445)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc234)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc234)
          %21 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc446)
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc236)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc236)
          %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc237)
          %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
          %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
          cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc447)
          %27 = cir.const #cir.int<27015> : !s32i loc(#loc240)
          %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc240)
          %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc241)
          %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc448)
          cir.scope {
            %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc246)
            %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc450)
            %55 = cir.const #cir.int<16> : !u64i loc(#loc451)
            %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc451)
            %57 = cir.call @connect(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc251)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc252)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc252)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc452)
            cir.if %60 {
              cir.break loc(#loc254)
            } loc(#loc453)
          } loc(#loc449)
          %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc255)
          %32 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc256)
          %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc256)
          %34 = cir.const #cir.int<3> : !s32i loc(#loc257)
          %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc257)
          %36 = cir.const #cir.int<4> : !u64i loc(#loc257)
          %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc257)
          %38 = cir.const #cir.int<2> : !s32i loc(#loc257)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc257)
          %40 = cir.binop(add, %37, %39) : !u64i loc(#loc257)
          %41 = cir.const #cir.int<1> : !s32i loc(#loc258)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc258)
          %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc454)
          %44 = cir.const #cir.int<0> : !s32i loc(#loc259)
          %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc260)
          %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc260)
          cir.store %46, %4 : !s32i, !cir.ptr<!s32i> loc(#loc455)
          cir.scope {
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %54 = cir.const #cir.int<1> : !s32i loc(#loc266)
            %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc266)
            %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc457)
            %57 = cir.ternary(%56, true {
              %58 = cir.const #true loc(#loc267)
              cir.yield %58 : !cir.bool loc(#loc267)
            }, false {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc269)
              %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc458)
              %61 = cir.ternary(%60, true {
                %62 = cir.const #true loc(#loc267)
                cir.yield %62 : !cir.bool loc(#loc267)
              }, false {
                %62 = cir.const #false loc(#loc267)
                cir.yield %62 : !cir.bool loc(#loc267)
              }) : (!cir.bool) -> !cir.bool loc(#loc267)
              cir.yield %61 : !cir.bool loc(#loc267)
            }) : (!cir.bool) -> !cir.bool loc(#loc267)
            cir.if %57 {
              cir.break loc(#loc271)
            } loc(#loc459)
          } loc(#loc456)
          %47 = cir.const #cir.int<0> : !s8i loc(#loc272)
          %48 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc273)
          %49 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc274)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc274)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc460)
          %51 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc275)
          %52 = cir.call @atoi(%51) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc276)
          cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc461)
          cir.yield loc(#loc214)
        } while {
          %10 = cir.const #cir.int<0> : !s32i loc(#loc279)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc279)
          cir.condition(%11) loc(#loc279)
        } loc(#loc438)
      } loc(#loc438)
      cir.scope {
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc283)
        %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc283)
        %13 = cir.cmp(ne, %10, %12) : !s32i, !cir.bool loc(#loc463)
        cir.if %13 {
          %14 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc285)
          %15 = cir.call @close(%14) : (!s32i) -> !s32i loc(#loc286)
        } loc(#loc464)
      } loc(#loc462)
    } loc(#loc433)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc466)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc290)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc290)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc466)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc468)
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc469)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc469)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc469)
        cir.scope {
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc299)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc300)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc471)
          %13 = cir.ternary(%12, true {
            %14 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc302)
            %15 = cir.const #cir.int<10> : !s32i loc(#loc303)
            %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc472)
            %17 = cir.ternary(%16, true {
              %18 = cir.const #true loc(#loc301)
              cir.yield %18 : !cir.bool loc(#loc301)
            }, false {
              %18 = cir.const #false loc(#loc301)
              cir.yield %18 : !cir.bool loc(#loc301)
            }) : (!cir.bool) -> !cir.bool loc(#loc301)
            cir.yield %17 : !cir.bool loc(#loc301)
          }, false {
            %14 = cir.const #false loc(#loc301)
            cir.yield %14 : !cir.bool loc(#loc301)
          }) : (!cir.bool) -> !cir.bool loc(#loc301)
          cir.if %13 {
            %14 = cir.const #cir.int<1> : !s32i loc(#loc308)
            %15 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc309)
            %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc310)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc310)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc474)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc313)
              cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc476)
              cir.for : cond {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc315)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc316)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc477)
                cir.condition(%21) loc(#loc477)
              } body {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc317)
                %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc318)
                %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc318)
                %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc318)
                cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc319)
                cir.yield loc(#loc312)
              } step {
                %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc321)
                cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc478)
                cir.yield loc(#loc475)
              } loc(#loc475)
            } loc(#loc475)
          } else {
            %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc193)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc322)
          } loc(#loc473)
        } loc(#loc470)
      } loc(#loc467)
    } loc(#loc465)
    cir.return loc(#loc195)
  } loc(#loc429)
  cir.func @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33L7goodG2BEv() : () -> () loc(#loc325)
    cir.call @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33L7goodB2GEv() : () -> () loc(#loc326)
    cir.return loc(#loc324)
  } loc(#loc479)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc480)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc481)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc331)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc332)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc333)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc334)
  cir.func @main(%arg0: !s32i loc(fused[#loc337, #loc338]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc339, #loc340])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc483)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc484)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc336)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc341)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc341)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc342)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc343)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc343)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc344)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc331)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc331)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc345)
    cir.call @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_334goodEv() : () -> () loc(#loc346)
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc332)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc332)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc347)
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc333)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc333)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc348)
    cir.call @_ZN60CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_333badEv() : () -> () loc(#loc349)
    %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc334)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc334)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc350)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc351)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc485)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc485)
    cir.return %15 : !s32i loc(#loc485)
  } loc(#loc482)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":79:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":127:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":47:1)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":131:1)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":49:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":49:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":50:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":50:20)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":52:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":52:12)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":52:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":53:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":108:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":58:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":58:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":59:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":59:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":60:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":60:32)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":61:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":61:41)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":62:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":97:17)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:36)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:45)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:58)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:29)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":72:69)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":73:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":76:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":73:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":73:34)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":74:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":75:17)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:20)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:21)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:33)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:47)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":77:48)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":78:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":78:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":79:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":79:13)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":79:59)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":80:38)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":80:32)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":80:13)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":80:46)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:13)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":84:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:25)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:58)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:59)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:68)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:82)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":81:88)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":82:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":83:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:31)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:46)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:59)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:77)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:80)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:26)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":87:81)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":91:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:44)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:47)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":88:61)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":89:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":90:17)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":93:39)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":93:25)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":93:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":95:25)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":95:20)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":95:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":95:36)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":97:16)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":98:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":101:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":98:13)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":98:30)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":99:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":100:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":100:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":109:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":130:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":110:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":110:20)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":111:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":129:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":112:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":112:17)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":113:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":113:34)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":116:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":128:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":116:17)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":116:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":117:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":124:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":126:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":118:32)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":118:24)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":118:17)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":123:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:25)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:21)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:28)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:32)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":122:41)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":122:34)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":122:21)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:37)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":120:36)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":127:17)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":138:1)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":169:1)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":140:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":140:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":141:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":141:20)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":143:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":143:12)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":143:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":146:12)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":146:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":147:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":168:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":148:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":148:20)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":149:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":167:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":150:13)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":150:17)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":151:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":151:34)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":154:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":166:13)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":154:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":154:25)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":155:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":162:13)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":164:13)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":156:32)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":156:24)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":156:17)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:17)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":161:17)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:25)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:21)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:28)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:32)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":160:41)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":160:34)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":160:21)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:37)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":158:36)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":165:27)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":165:17)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":251:27)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":172:1)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":255:1)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":174:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":174:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":175:5)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":175:20)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":177:13)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":177:12)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":177:5)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":178:5)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":233:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":183:9)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":183:13)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":184:9)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":184:28)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":185:9)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":185:32)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":186:9)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":186:41)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":187:9)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":222:17)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:36)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:45)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:58)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:29)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:13)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":197:69)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":198:13)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":201:13)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":198:17)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":198:34)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":199:13)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":200:17)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:20)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:21)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:30)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:33)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:47)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:13)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":202:48)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":203:34)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":203:13)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":204:49)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":204:39)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":204:13)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":204:59)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":205:38)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":205:32)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":205:13)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":205:46)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:13)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":209:13)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:25)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:58)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:59)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:68)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:82)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:17)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":206:88)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":207:13)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":208:17)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:31)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:46)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:59)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:77)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:80)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:26)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:13)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":212:81)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:13)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":216:13)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:17)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:31)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:44)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:47)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":213:61)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":214:13)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":215:17)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":218:39)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":218:25)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":218:13)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":220:25)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":220:20)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":220:13)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":220:36)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":222:16)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":223:9)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":226:9)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":223:13)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":223:30)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":224:9)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":225:26)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":225:13)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":234:5)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":254:5)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":235:9)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":235:20)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":236:9)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":253:9)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":237:13)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":237:17)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":238:13)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":238:34)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:13)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":252:13)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:17)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:25)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:27)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:30)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:38)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":240:40)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":241:13)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":248:13)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":250:13)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":242:32)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":242:24)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":242:17)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:17)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":247:17)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:25)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:21)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:28)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:32)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":246:41)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":246:34)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":246:21)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:37)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":244:36)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":251:17)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":257:1)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":261:1)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":259:5)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":260:5)
#loc327 = loc("/usr/include/stdlib.h":575:1)
#loc328 = loc("/usr/include/stdlib.h":575:41)
#loc329 = loc("/usr/include/time.h":76:1)
#loc330 = loc("/usr/include/time.h":76:38)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":280:15)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":282:15)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":285:15)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":287:15)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":275:1)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":290:1)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":276:1)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":278:27)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":278:22)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":278:5)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":280:5)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":281:5)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":282:5)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":285:5)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":286:5)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":287:5)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":289:12)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_33.cpp":289:5)
#loc353 = loc(fused[#loc1, #loc2])
#loc354 = loc(fused[#loc3, #loc4])
#loc355 = loc(fused[#loc6, #loc7])
#loc356 = loc(fused[#loc8, #loc9])
#loc357 = loc(fused[#loc10, #loc11])
#loc358 = loc(fused[#loc12, #loc13])
#loc359 = loc(fused[#loc14, #loc15])
#loc360 = loc(fused[#loc16, #loc17])
#loc361 = loc(fused[#loc18, #loc19])
#loc362 = loc(fused[#loc21, #loc22])
#loc363 = loc(fused[#loc23, #loc24])
#loc364 = loc(fused[#loc25, #loc26])
#loc365 = loc(fused[#loc29, #loc27])
#loc366 = loc(fused[#loc30, #loc31])
#loc367 = loc(fused[#loc32, #loc33])
#loc368 = loc(fused[#loc34, #loc35])
#loc369 = loc(fused[#loc36, #loc37])
#loc370 = loc(fused[#loc38, #loc39])
#loc371 = loc(fused[#loc40, #loc41])
#loc372 = loc(fused[#loc46, #loc47])
#loc373 = loc(fused[#loc48, #loc49])
#loc374 = loc(fused[#loc50, #loc51])
#loc375 = loc(fused[#loc52, #loc49])
#loc376 = loc(fused[#loc54, #loc55])
#loc377 = loc(fused[#loc57, #loc58])
#loc378 = loc(fused[#loc59, #loc60])
#loc379 = loc(fused[#loc63, #loc61])
#loc380 = loc(fused[#loc67, #loc68])
#loc381 = loc(fused[#loc72, #loc73])
#loc382 = loc(fused[#loc74, #loc75])
#loc383 = loc(fused[#loc77, #loc78])
#loc384 = loc(fused[#loc79, #loc80])
#loc385 = loc(fused[#loc81, #loc82])
#loc386 = loc(fused[#loc83, #loc75])
#loc387 = loc(fused[#loc87, #loc88])
#loc388 = loc(fused[#loc91, #loc92])
#loc389 = loc(fused[#loc93, #loc94])
#loc390 = loc(fused[#loc95, #loc96])
#loc391 = loc(fused[#loc98, #loc99])
#loc392 = loc(fused[#loc100, #loc94])
#loc393 = loc(fused[#loc104, #loc102])
#loc394 = loc(fused[#loc107, #loc108])
#loc395 = loc(fused[#loc110, #loc111])
#loc396 = loc(fused[#loc112, #loc113])
#loc397 = loc(fused[#loc114, #loc111])
#loc398 = loc(fused[#loc117, #loc118])
#loc399 = loc(fused[#loc119, #loc120])
#loc400 = loc(fused[#loc121, #loc122])
#loc401 = loc(fused[#loc123, #loc124])
#loc402 = loc(fused[#loc125, #loc126])
#loc403 = loc(fused[#loc127, #loc128])
#loc404 = loc(fused[#loc129, #loc130])
#loc405 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc406 = loc(fused[#loc136, #loc134])
#loc407 = loc(fused[#loc137, #loc138])
#loc408 = loc(fused[#loc140, #loc139])
#loc409 = loc(fused[#loc141, #loc142])
#loc410 = loc(fused[#loc147, #loc146])
#loc411 = loc(fused[#loc149, #loc150])
#loc412 = loc(fused[#loc151, #loc152])
#loc413 = loc(fused[#loc153, #loc154])
#loc414 = loc(fused[#loc157, #loc155])
#loc415 = loc(fused[#loc159, #loc158])
#loc416 = loc(fused[#loc160, #loc161])
#loc417 = loc(fused[#loc162, #loc163])
#loc418 = loc(fused[#loc164, #loc165])
#loc419 = loc(fused[#loc166, #loc167])
#loc420 = loc(fused[#loc168, #loc169])
#loc421 = loc(fused[#loc170, #loc171])
#loc422 = loc(fused[#loc172, #loc173])
#loc423 = loc(fused[#loc174, #loc175, #loc176, #loc171])
#loc424 = loc(fused[#loc179, #loc177])
#loc425 = loc(fused[#loc180, #loc181])
#loc426 = loc(fused[#loc183, #loc182])
#loc427 = loc(fused[#loc184, #loc185])
#loc428 = loc(fused[#loc190, #loc189])
#loc429 = loc(fused[#loc194, #loc195])
#loc430 = loc(fused[#loc196, #loc197])
#loc431 = loc(fused[#loc198, #loc199])
#loc432 = loc(fused[#loc202, #loc200])
#loc433 = loc(fused[#loc203, #loc204])
#loc434 = loc(fused[#loc205, #loc206])
#loc435 = loc(fused[#loc207, #loc208])
#loc436 = loc(fused[#loc209, #loc210])
#loc437 = loc(fused[#loc211, #loc212])
#loc438 = loc(fused[#loc213, #loc214])
#loc439 = loc(fused[#loc219, #loc220])
#loc440 = loc(fused[#loc221, #loc222])
#loc441 = loc(fused[#loc223, #loc224])
#loc442 = loc(fused[#loc225, #loc222])
#loc443 = loc(fused[#loc227, #loc228])
#loc444 = loc(fused[#loc230, #loc231])
#loc445 = loc(fused[#loc232, #loc233])
#loc446 = loc(fused[#loc235, #loc234])
#loc447 = loc(fused[#loc238, #loc239])
#loc448 = loc(fused[#loc242, #loc243])
#loc449 = loc(fused[#loc244, #loc245])
#loc450 = loc(fused[#loc247, #loc248])
#loc451 = loc(fused[#loc249, #loc250])
#loc452 = loc(fused[#loc251, #loc252])
#loc453 = loc(fused[#loc253, #loc245])
#loc454 = loc(fused[#loc257, #loc258])
#loc455 = loc(fused[#loc261, #loc262])
#loc456 = loc(fused[#loc263, #loc264])
#loc457 = loc(fused[#loc265, #loc266])
#loc458 = loc(fused[#loc268, #loc269])
#loc459 = loc(fused[#loc270, #loc264])
#loc460 = loc(fused[#loc274, #loc272])
#loc461 = loc(fused[#loc277, #loc278])
#loc462 = loc(fused[#loc280, #loc281])
#loc463 = loc(fused[#loc282, #loc283])
#loc464 = loc(fused[#loc284, #loc281])
#loc465 = loc(fused[#loc287, #loc288])
#loc466 = loc(fused[#loc289, #loc290])
#loc467 = loc(fused[#loc291, #loc292])
#loc468 = loc(fused[#loc293, #loc294])
#loc469 = loc(fused[#loc295, #loc296])
#loc470 = loc(fused[#loc297, #loc298])
#loc471 = loc(fused[#loc299, #loc300])
#loc472 = loc(fused[#loc302, #loc304])
#loc473 = loc(fused[#loc305, #loc306, #loc307, #loc298])
#loc474 = loc(fused[#loc310, #loc308])
#loc475 = loc(fused[#loc311, #loc312])
#loc476 = loc(fused[#loc314, #loc313])
#loc477 = loc(fused[#loc315, #loc316])
#loc478 = loc(fused[#loc321, #loc320])
#loc479 = loc(fused[#loc323, #loc324])
#loc480 = loc(fused[#loc327, #loc328])
#loc481 = loc(fused[#loc329, #loc330])
#loc482 = loc(fused[#loc335, #loc336])
#loc485 = loc(fused[#loc352, #loc351])
