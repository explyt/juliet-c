!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc43)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__zero_11.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__zero_11_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc47)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc47)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc10)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc5)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<0> : !s32i loc(#loc5)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc5)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
              %11 = cir.const #cir.int<27> : !s32i loc(#loc5)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc5)
              %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
            } loc(#loc5)
          } loc(#loc5)
        } loc(#loc5)
      } loc(#loc48)
    } loc(#loc46)
    cir.return loc(#loc7)
  } loc(#loc45)
  cir.func no_proto @CWE617_Reachable_Assertion__zero_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc50)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc51)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    cir.return loc(#loc14)
  } loc(#loc49)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc52)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc23)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void good1()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc56)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc56)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc29)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc29)
      cir.if %3 {
        %4 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc23)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc23)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc34)
      } else {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc24)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<1> : !s32i loc(#loc24)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc24)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc24)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc24)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc24)
              %11 = cir.const #cir.int<48> : !s32i loc(#loc24)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc24)
              %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc24)
            } loc(#loc24)
          } loc(#loc24)
        } loc(#loc24)
      } loc(#loc57)
    } loc(#loc55)
    cir.return loc(#loc26)
  } loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void good2()\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc60)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc60)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc40)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc40)
      cir.if %3 {
        %4 = cir.const #cir.int<4> : !u64i loc(#loc35)
        cir.scope {
          cir.scope {
            %5 = cir.const #cir.int<1> : !s32i loc(#loc35)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc35)
            cir.if %6 {
            } else {
              %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc35)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc35)
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc35)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc35)
              %11 = cir.const #cir.int<60> : !s32i loc(#loc35)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc35)
              %13 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc35)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc35)
              cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc35)
            } loc(#loc35)
          } loc(#loc35)
        } loc(#loc35)
      } loc(#loc61)
    } loc(#loc59)
    cir.return loc(#loc37)
  } loc(#loc58)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__zero_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/assert.h":69:1)
#loc4 = loc("/usr/include/assert.h":71:43)
#loc5 = loc("CWE617_Reachable_Assertion__zero_11.c":27:9)
#loc6 = loc("CWE617_Reachable_Assertion__zero_11.c":22:1)
#loc7 = loc("CWE617_Reachable_Assertion__zero_11.c":29:1)
#loc8 = loc("CWE617_Reachable_Assertion__zero_11.c":24:5)
#loc9 = loc("CWE617_Reachable_Assertion__zero_11.c":28:5)
#loc10 = loc("CWE617_Reachable_Assertion__zero_11.c":24:8)
#loc11 = loc("CWE617_Reachable_Assertion__zero_11.c":24:26)
#loc12 = loc("CWE617_Reachable_Assertion__zero_11.c":25:5)
#loc13 = loc("CWE617_Reachable_Assertion__zero_11.c":64:1)
#loc14 = loc("CWE617_Reachable_Assertion__zero_11.c":68:1)
#loc15 = loc("CWE617_Reachable_Assertion__zero_11.c":66:5)
#loc16 = loc("CWE617_Reachable_Assertion__zero_11.c":66:11)
#loc17 = loc("CWE617_Reachable_Assertion__zero_11.c":67:5)
#loc18 = loc("CWE617_Reachable_Assertion__zero_11.c":67:11)
#loc19 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc20 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc21 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE617_Reachable_Assertion__zero_11.c":41:19)
#loc24 = loc("CWE617_Reachable_Assertion__zero_11.c":48:9)
#loc25 = loc("CWE617_Reachable_Assertion__zero_11.c":36:1)
#loc26 = loc("CWE617_Reachable_Assertion__zero_11.c":50:1)
#loc27 = loc("CWE617_Reachable_Assertion__zero_11.c":38:5)
#loc28 = loc("CWE617_Reachable_Assertion__zero_11.c":49:5)
#loc29 = loc("CWE617_Reachable_Assertion__zero_11.c":38:8)
#loc30 = loc("CWE617_Reachable_Assertion__zero_11.c":38:27)
#loc31 = loc("CWE617_Reachable_Assertion__zero_11.c":39:5)
#loc32 = loc("CWE617_Reachable_Assertion__zero_11.c":42:5)
#loc33 = loc("CWE617_Reachable_Assertion__zero_11.c":44:5)
#loc34 = loc("CWE617_Reachable_Assertion__zero_11.c":41:9)
#loc35 = loc("CWE617_Reachable_Assertion__zero_11.c":60:9)
#loc36 = loc("CWE617_Reachable_Assertion__zero_11.c":53:1)
#loc37 = loc("CWE617_Reachable_Assertion__zero_11.c":62:1)
#loc38 = loc("CWE617_Reachable_Assertion__zero_11.c":55:5)
#loc39 = loc("CWE617_Reachable_Assertion__zero_11.c":61:5)
#loc40 = loc("CWE617_Reachable_Assertion__zero_11.c":55:8)
#loc41 = loc("CWE617_Reachable_Assertion__zero_11.c":55:26)
#loc42 = loc("CWE617_Reachable_Assertion__zero_11.c":56:5)
#loc43 = loc(fused[#loc1, #loc2])
#loc44 = loc(fused[#loc3, #loc4])
#loc45 = loc(fused[#loc6, #loc7])
#loc46 = loc(fused[#loc8, #loc9])
#loc47 = loc(fused[#loc10, #loc11])
#loc48 = loc(fused[#loc12, #loc9])
#loc49 = loc(fused[#loc13, #loc14])
#loc50 = loc(fused[#loc15, #loc16])
#loc51 = loc(fused[#loc17, #loc18])
#loc52 = loc(fused[#loc19, #loc20])
#loc53 = loc(fused[#loc21, #loc22])
#loc54 = loc(fused[#loc25, #loc26])
#loc55 = loc(fused[#loc27, #loc28])
#loc56 = loc(fused[#loc29, #loc30])
#loc57 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc58 = loc(fused[#loc36, #loc37])
#loc59 = loc(fused[#loc38, #loc39])
#loc60 = loc(fused[#loc40, #loc41])
#loc61 = loc(fused[#loc42, #loc39])
