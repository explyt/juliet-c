!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc43 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":104:10)
#loc44 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":104:14)
#loc45 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":104:20)
#loc46 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":104:32)
#loc135 = loc(fused[#loc43, #loc44])
#loc136 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printHexCharLine(!s8i) loc(#loc117)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc119)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc120)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc9)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    cir.br ^bb1 loc(#loc122)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<127> : !s32i loc(#loc13)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc13)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc13)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    cir.br ^bb2 loc(#loc124)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc125)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc19)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc19)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc126)
    cir.brcond %12 ^bb4, ^bb5 loc(#loc127)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc22)
    %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc22)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc6)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc22)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc22)
    cir.store %17, %0 : !s8i, !cir.ptr<!s8i> loc(#loc119)
    %18 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc23)
    cir.call @printHexCharLine(%18) : (!s8i) -> () loc(#loc24)
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc118)
  cir.func no_proto @CWE191_Integer_Underflow__char_min_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc128)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc132)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc136)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc50)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_min_multiply_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE191_Integer_Underflow__char_min_multiply_18_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_min_multiply_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call @CWE191_Integer_Underflow__char_min_multiply_18_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc139)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.return %17 : !s32i loc(#loc139)
  } loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc141)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc142)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc68)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc68)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc143)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<127> : !s32i loc(#loc72)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc72)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc72)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc72)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc145)
    cir.br ^bb2 loc(#loc146)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc147)
  ^bb3:  // pred: ^bb2
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc78)
    %10 = cir.cast(integral, %9 : !s8i), !s32i loc(#loc78)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc148)
    cir.brcond %12 ^bb4, ^bb10 loc(#loc149)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc150)
  ^bb5:  // pred: ^bb4
    %13 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc83)
    %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc83)
    %15 = cir.const #cir.int<127> : !s32i loc(#loc84)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc84)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc84)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc85)
    %20 = cir.binop(div, %18, %19) : !s32i loc(#loc151)
    %21 = cir.cmp(gt, %14, %20) : !s32i, !cir.bool loc(#loc152)
    cir.brcond %21 ^bb6, ^bb7 loc(#loc153)
  ^bb6:  // pred: ^bb5
    %22 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc90)
    %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc90)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc65)
    %25 = cir.binop(mul, %23, %24) nsw : !s32i loc(#loc90)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc90)
    cir.store %26, %0 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    %27 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc91)
    cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc92)
    cir.br ^bb8 loc(#loc88)
  ^bb7:  // pred: ^bb5
    %28 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc61)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc82)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // 2 preds: ^bb3, ^bb9
    cir.br ^bb11 loc(#loc77)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc63)
  } loc(#loc140)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc155)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc156)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc100)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc100)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc104)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc105)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc105)
    cir.store %6, %1 : !s8i, !cir.ptr<!s8i> loc(#loc159)
    cir.br ^bb2 loc(#loc160)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc161)
  ^bb3:  // pred: ^bb2
    %7 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc111)
    %8 = cir.cast(integral, %7 : !s8i), !s32i loc(#loc111)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc112)
    %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc114)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc114)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc97)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc114)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc114)
    cir.store %15, %0 : !s8i, !cir.ptr<!s8i> loc(#loc155)
    %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc115)
    cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc116)
    cir.br ^bb5 loc(#loc110)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc110)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc95)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_min_multiply_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":38:1)
#loc5 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":35:9)
#loc6 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":35:30)
#loc7 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":24:10)
#loc9 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":26:10)
#loc13 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":29:12)
#loc14 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":29:5)
#loc15 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":30:5)
#loc16 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":30:10)
#loc17 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":37:5)
#loc19 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":32:8)
#loc20 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":32:15)
#loc21 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":35:23)
#loc23 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":36:26)
#loc24 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":36:9)
#loc25 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":89:1)
#loc26 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":93:1)
#loc27 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":91:5)
#loc28 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":91:13)
#loc29 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":92:5)
#loc30 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":92:13)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":109:15)
#loc38 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":111:15)
#loc39 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":114:15)
#loc40 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":116:15)
#loc41 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":104:1)
#loc42 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":119:1)
#loc47 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":105:1)
#loc48 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":107:27)
#loc49 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":107:22)
#loc50 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":107:5)
#loc51 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":109:5)
#loc52 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":110:5)
#loc53 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":110:57)
#loc54 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":111:5)
#loc55 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":114:5)
#loc56 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":115:5)
#loc57 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":115:56)
#loc58 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":116:5)
#loc59 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":118:12)
#loc60 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":118:5)
#loc61 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":65:23)
#loc62 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":45:1)
#loc63 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":68:1)
#loc64 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":60:13)
#loc65 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":60:34)
#loc66 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":47:5)
#loc67 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":47:10)
#loc68 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":48:12)
#loc69 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":48:5)
#loc70 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":49:5)
#loc71 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":49:10)
#loc72 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":52:12)
#loc73 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":52:5)
#loc74 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":53:5)
#loc75 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":53:10)
#loc76 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":55:5)
#loc77 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":67:5)
#loc78 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":55:8)
#loc79 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":55:15)
#loc80 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":56:5)
#loc81 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":58:9)
#loc82 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":66:9)
#loc83 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":58:13)
#loc84 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":58:21)
#loc85 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":58:30)
#loc86 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":58:31)
#loc87 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":59:9)
#loc88 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":62:9)
#loc89 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":64:9)
#loc90 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":60:27)
#loc91 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":61:30)
#loc92 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":61:13)
#loc93 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":65:13)
#loc94 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":71:1)
#loc95 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":87:1)
#loc96 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":84:9)
#loc97 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":84:30)
#loc98 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":73:5)
#loc99 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":73:10)
#loc100 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":74:12)
#loc101 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":74:5)
#loc102 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":75:5)
#loc103 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":75:10)
#loc104 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":78:13)
#loc105 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":78:12)
#loc106 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":78:5)
#loc107 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":79:5)
#loc108 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":79:10)
#loc109 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":81:5)
#loc110 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":86:5)
#loc111 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":81:8)
#loc112 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":81:15)
#loc113 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":82:5)
#loc114 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":84:23)
#loc115 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":85:26)
#loc116 = loc("CWE191_Integer_Underflow__char_min_multiply_18.c":85:9)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc10, #loc9])
#loc122 = loc(fused[#loc11, #loc12])
#loc123 = loc(fused[#loc14, #loc13])
#loc124 = loc(fused[#loc15, #loc16])
#loc125 = loc(fused[#loc17, #loc18])
#loc126 = loc(fused[#loc19, #loc20])
#loc127 = loc(fused[#loc21, #loc18])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc31, #loc32])
#loc132 = loc(fused[#loc33, #loc34])
#loc133 = loc(fused[#loc35, #loc36])
#loc134 = loc(fused[#loc41, #loc42])
#loc137 = loc(fused[#loc52, #loc53])
#loc138 = loc(fused[#loc56, #loc57])
#loc139 = loc(fused[#loc60, #loc59])
#loc140 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc66, #loc67])
#loc143 = loc(fused[#loc69, #loc68])
#loc144 = loc(fused[#loc70, #loc71])
#loc145 = loc(fused[#loc73, #loc72])
#loc146 = loc(fused[#loc74, #loc75])
#loc147 = loc(fused[#loc76, #loc77])
#loc148 = loc(fused[#loc78, #loc79])
#loc149 = loc(fused[#loc80, #loc77])
#loc150 = loc(fused[#loc81, #loc82])
#loc151 = loc(fused[#loc84, #loc85])
#loc152 = loc(fused[#loc83, #loc86])
#loc153 = loc(fused[#loc87, #loc88, #loc89, #loc82])
#loc154 = loc(fused[#loc94, #loc95])
#loc155 = loc(fused[#loc96, #loc97])
#loc156 = loc(fused[#loc98, #loc99])
#loc157 = loc(fused[#loc101, #loc100])
#loc158 = loc(fused[#loc102, #loc103])
#loc159 = loc(fused[#loc106, #loc104])
#loc160 = loc(fused[#loc107, #loc108])
#loc161 = loc(fused[#loc109, #loc110])
#loc162 = loc(fused[#loc111, #loc112])
#loc163 = loc(fused[#loc113, #loc110])
