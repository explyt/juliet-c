!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":24:58)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":24:62)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":47:62)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":47:66)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":55:62)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":55:66)
#loc77 = loc(fused[#loc12, #loc13])
#loc86 = loc(fused[#loc38, #loc39])
#loc90 = loc(fused[#loc47, #loc48])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc72)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc73)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc74)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func @CWE190_Integer_Overflow__int_fgets_add_61b_badSource(%arg0: !s32i loc(fused[#loc12, #loc13])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc78)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc77)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc11)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    cir.br ^bb1 loc(#loc79)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc78)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc78)
    cir.br ^bb2 loc(#loc80)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc21)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc22)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc22)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc22)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc22)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc22)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc22)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc22)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc73)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc24)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc81)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc82)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc29)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc30)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.br ^bb5 loc(#loc27)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.return %24 : !s32i loc(#loc84)
  } loc(#loc76)
  cir.func @CWE190_Integer_Overflow__int_fgets_add_61b_goodG2BSource(%arg0: !s32i loc(fused[#loc38, #loc39])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc40)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.return %4 : !s32i loc(#loc88)
  } loc(#loc85)
  cir.func @CWE190_Integer_Overflow__int_fgets_add_61b_goodB2GSource(%arg0: !s32i loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc91)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc90)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.br ^bb1 loc(#loc92)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc91)
    cir.store %3, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc91)
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // pred: ^bb1
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc56)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc57)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc57)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc57)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc57)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc57)
    %11 = cir.binop(add, %8, %10) : !u64i loc(#loc57)
    %12 = cir.cast(integral, %11 : !u64i), !s32i loc(#loc57)
    %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc73)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc58)
    %15 = cir.call @fgets(%4, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc59)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc60)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc94)
    cir.brcond %18 ^bb3, ^bb4 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc64)
    %20 = cir.call @atoi(%19) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc65)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb5 loc(#loc62)
  ^bb4:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb5 loc(#loc55)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc55)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc53)
  ^bb7:  // pred: ^bb6
    %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.return %24 : !s32i loc(#loc97)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_61b.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":36:23)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":24:1)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":40:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":27:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":27:45)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":25:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:19)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:32)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:49)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":29:59)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":30:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":35:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":32:25)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":32:20)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":32:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":32:36)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":36:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":39:12)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":39:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":47:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":52:1)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":48:1)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":50:12)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":50:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":51:12)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":51:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":55:1)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":71:1)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":58:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":58:45)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":56:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":57:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":69:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":68:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:19)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:32)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:49)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":60:59)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":61:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":64:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":66:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":63:25)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":63:20)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":63:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":63:36)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":67:23)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":67:13)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":70:12)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_61b.c":70:5)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc10, #loc11])
#loc78 = loc(fused[#loc14, #loc15])
#loc79 = loc(fused[#loc17, #loc18])
#loc80 = loc(fused[#loc19, #loc20])
#loc81 = loc(fused[#loc24, #loc25])
#loc82 = loc(fused[#loc26, #loc27, #loc28, #loc20])
#loc83 = loc(fused[#loc31, #loc32])
#loc84 = loc(fused[#loc35, #loc34])
#loc85 = loc(fused[#loc36, #loc37])
#loc87 = loc(fused[#loc42, #loc41])
#loc88 = loc(fused[#loc44, #loc43])
#loc89 = loc(fused[#loc45, #loc46])
#loc91 = loc(fused[#loc49, #loc50])
#loc92 = loc(fused[#loc52, #loc53])
#loc93 = loc(fused[#loc54, #loc55])
#loc94 = loc(fused[#loc59, #loc60])
#loc95 = loc(fused[#loc61, #loc62, #loc63, #loc55])
#loc96 = loc(fused[#loc66, #loc67])
#loc97 = loc(fused[#loc71, #loc70])
