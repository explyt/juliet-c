!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc199 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":308:10)
#loc200 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":308:14)
#loc201 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":308:20)
#loc202 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":308:32)
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc502 = loc(fused[#loc199, #loc200])
#loc503 = loc(fused[#loc201, #loc202])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc423)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc424)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc425)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc426)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc427)
  cir.func private @getsockname(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc428)
  cir.func private @getnameinfo(!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc429)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc430)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"admin.google.com\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc17)
  cir.func private @send(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc431)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Welcome, admin!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc20)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Welcome!\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc21)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc432)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Send failed!\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc24)
  cir.func private @close(!s32i) -> !s32i loc(#loc433)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_04_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc31)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc438)
          %3 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["acceptService"] {alignment = 4 : i64} loc(#loc439)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptServiceLen", init] {alignment = 4 : i64} loc(#loc440)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc441)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc442)
          %7 = cir.alloca !cir.array<!s8i x 1025>, !cir.ptr<!cir.array<!s8i x 1025>>, ["hostname"] {alignment = 16 : i64} loc(#loc443)
          %8 = cir.alloca !cir.array<!s8i x 32>, !cir.ptr<!cir.array<!s8i x 32>>, ["servInfo"] {alignment = 16 : i64} loc(#loc444)
          %9 = cir.const #cir.int<16> : !u64i loc(#loc445)
          %10 = cir.cast(integral, %9 : !u64i), !s32i loc(#loc445)
          cir.store %10, %4 : !s32i, !cir.ptr<!s32i> loc(#loc440)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc41)
          cir.store %12, %5 : !s32i, !cir.ptr<!s32i> loc(#loc441)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc43)
          cir.store %14, %6 : !s32i, !cir.ptr<!s32i> loc(#loc442)
          cir.scope {
            cir.do {
              %15 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %17 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %18, %5 : !s32i, !cir.ptr<!s32i> loc(#loc447)
              cir.scope {
                %37 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc60)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc449)
                cir.if %40 {
                  cir.break loc(#loc62)
                } loc(#loc450)
              } loc(#loc448)
              %19 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc451)
              %20 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %21 = cir.const #cir.int<16> : !u64i loc(#loc452)
              cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc453)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc70)
              %24 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc454)
              %25 = cir.const #cir.int<0> : !s32i loc(#loc73)
              %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc73)
              %27 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc455)
              %29 = cir.const #cir.int<20000> : !s32i loc(#loc77)
              %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc77)
              %31 = cir.call @htons(%30) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
              %32 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc456)
              cir.scope {
                %37 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %38 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc458)
                %39 = cir.const #cir.int<16> : !u64i loc(#loc459)
                %40 = cir.cast(integral, %39 : !u64i), !u32i loc(#loc459)
                %41 = cir.call @bind(%37, %38, %40) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %42 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc90)
                %44 = cir.cmp(eq, %41, %43) : !s32i, !cir.bool loc(#loc460)
                cir.if %44 {
                  cir.break loc(#loc92)
                } loc(#loc461)
              } loc(#loc457)
              cir.scope {
                %37 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %38 = cir.const #cir.int<5> : !s32i loc(#loc96)
                %39 = cir.call @listen(%37, %38) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
                %40 = cir.const #cir.int<1> : !s32i loc(#loc98)
                %41 = cir.unary(minus, %40) : !s32i, !s32i loc(#loc98)
                %42 = cir.cmp(eq, %39, %41) : !s32i, !cir.bool loc(#loc463)
                cir.if %42 {
                  cir.break loc(#loc100)
                } loc(#loc464)
              } loc(#loc462)
              %33 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
              %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
              %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
              cir.store %36, %6 : !s32i, !cir.ptr<!s32i> loc(#loc465)
              cir.scope {
                %37 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc110)
                %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc467)
                cir.if %40 {
                  cir.break loc(#loc112)
                } loc(#loc468)
              } loc(#loc466)
              cir.scope {
                %37 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                %38 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc470)
                %39 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!u32i> loc(#loc471)
                %40 = cir.call @getsockname(%37, %38, %39) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i extra(#fn_attr) loc(#loc120)
                %41 = cir.const #cir.int<1> : !s32i loc(#loc121)
                %42 = cir.unary(minus, %41) : !s32i, !s32i loc(#loc122)
                %43 = cir.cmp(eq, %40, %42) : !s32i, !cir.bool loc(#loc472)
                cir.if %43 {
                  cir.break loc(#loc124)
                } loc(#loc473)
              } loc(#loc469)
              cir.scope {
                %37 = cir.cast(bitcast, %3 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc475)
                %38 = cir.const #cir.int<16> : !u64i loc(#loc476)
                %39 = cir.cast(integral, %38 : !u64i), !u32i loc(#loc476)
                %40 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc131)
                %41 = cir.const #cir.int<1025> : !s32i loc(#loc132)
                %42 = cir.cast(integral, %41 : !s32i), !u32i loc(#loc132)
                %43 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc133)
                %44 = cir.const #cir.int<32> : !s32i loc(#loc134)
                %45 = cir.cast(integral, %44 : !s32i), !u32i loc(#loc134)
                %46 = cir.const #cir.int<2> : !s32i loc(#loc135)
                %47 = cir.call @getnameinfo(%37, %39, %40, %42, %43, %45, %46) : (!cir.ptr<!ty_sockaddr>, !u32i, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>, !u32i, !s32i) -> !s32i loc(#loc136)
                %48 = cir.const #cir.int<0> : !s32i loc(#loc137)
                %49 = cir.cmp(ne, %47, %48) : !s32i, !cir.bool loc(#loc477)
                cir.if %49 {
                  cir.break loc(#loc139)
                } loc(#loc478)
              } loc(#loc474)
              cir.scope {
                %37 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc142)
                %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc17)
                %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc17)
                %40 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 1025>>), !cir.ptr<!s8i> loc(#loc143)
                %41 = cir.call @strcmp(%39, %40) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc142)
                %42 = cir.const #cir.int<0> : !s32i loc(#loc144)
                %43 = cir.cmp(eq, %41, %42) : !s32i, !cir.bool loc(#loc480)
                cir.if %43 {
                  cir.scope {
                    %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc150)
                    %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc20)
                    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc20)
                    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
                    %48 = cir.const #cir.int<15> : !u64i loc(#loc483)
                    %49 = cir.const #cir.int<0> : !s32i loc(#loc153)
                    %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc154)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc155)
                    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc155)
                    %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc155)
                    %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc484)
                    cir.if %54 {
                      cir.break loc(#loc157)
                    } loc(#loc485)
                  } loc(#loc482)
                } else {
                  cir.scope {
                    %44 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                    %45 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc21)
                    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc21)
                    %47 = cir.cast(bitcast, %46 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
                    %48 = cir.const #cir.int<8> : !u64i loc(#loc487)
                    %49 = cir.const #cir.int<0> : !s32i loc(#loc163)
                    %50 = cir.call @send(%44, %47, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc164)
                    %51 = cir.const #cir.int<1> : !s32i loc(#loc165)
                    %52 = cir.unary(minus, %51) : !s32i, !s32i loc(#loc165)
                    %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc165)
                    %54 = cir.cmp(eq, %50, %53) : !s64i, !cir.bool loc(#loc488)
                    cir.if %54 {
                      %55 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc24)
                      %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc24)
                      cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc167)
                    } loc(#loc489)
                  } loc(#loc486)
                } loc(#loc481)
              } loc(#loc479)
              cir.yield loc(#loc50)
            } while {
              %15 = cir.const #cir.int<0> : !s32i loc(#loc168)
              %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc168)
              cir.condition(%16) loc(#loc168)
            } loc(#loc446)
          } loc(#loc446)
          cir.scope {
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc171)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc172)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc172)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc491)
            cir.if %18 {
              %19 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc174)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc175)
            } loc(#loc492)
          } loc(#loc490)
          cir.scope {
            %15 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc179)
            %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc179)
            %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc494)
            cir.if %18 {
              %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc182)
            } loc(#loc495)
          } loc(#loc493)
        } loc(#loc437)
      } loc(#loc436)
    } loc(#loc435)
    cir.return loc(#loc28)
  } loc(#loc434)
  cir.func no_proto @CWE510_Trapdoor__hostname_based_logic_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc497)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc498)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc187)
    cir.return loc(#loc184)
  } loc(#loc496)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc499)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc500)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc196)
  cir.func @main(%arg0: !s32i loc(fused[#loc199, #loc200]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc201, #loc202])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc502)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc503)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc203)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc204)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc205)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc205)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc206)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc193)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %8 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc504)
    cir.call @CWE510_Trapdoor__hostname_based_logic_04_good() : () -> () loc(#loc208)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc194)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc195)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    %13 = cir.get_global @CWE510_Trapdoor__hostname_based_logic_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc505)
    cir.call @CWE510_Trapdoor__hostname_based_logic_04_bad() : () -> () loc(#loc212)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc196)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc506)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc506)
    cir.return %17 : !s32i loc(#loc506)
  } loc(#loc501)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc217)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc222)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc222)
      cir.if %1 {
        %2 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc217)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc217)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc226)
      } else {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc511)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc512)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc513)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc232)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc232)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc512)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc234)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc234)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc513)
          cir.scope {
            cir.do {
              %9 = cir.const #cir.int<2> : !s32i loc(#loc237)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc238)
              %11 = cir.const #cir.int<6> : !s32i loc(#loc239)
              %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc240)
              cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc515)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc245)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc246)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc246)
                %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc517)
                cir.if %34 {
                  cir.break loc(#loc248)
                } loc(#loc518)
              } loc(#loc516)
              %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc519)
              %14 = cir.const #cir.int<0> : !s32i loc(#loc251)
              %15 = cir.const #cir.int<16> : !u64i loc(#loc520)
              cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc521)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc256)
              %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc256)
              %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc522)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc258)
              %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc258)
              %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc523)
              %23 = cir.const #cir.int<20000> : !s32i loc(#loc260)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc260)
              %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc261)
              %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc524)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc266)
                %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc526)
                %33 = cir.const #cir.int<16> : !u64i loc(#loc527)
                %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc527)
                %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc271)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc272)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc272)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc528)
                cir.if %38 {
                  cir.break loc(#loc274)
                } loc(#loc529)
              } loc(#loc525)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc277)
                %32 = cir.const #cir.int<5> : !s32i loc(#loc278)
                %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc279)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc280)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc280)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc531)
                cir.if %36 {
                  cir.break loc(#loc282)
                } loc(#loc532)
              } loc(#loc530)
              %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc283)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc284)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc285)
              %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc286)
              cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc533)
              cir.scope {
                %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc291)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc292)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc292)
                %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc535)
                cir.if %34 {
                  cir.break loc(#loc294)
                } loc(#loc536)
              } loc(#loc534)
              cir.scope {
                %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc297)
                %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc298)
                %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc298)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc298)
                %35 = cir.const #cir.int<8> : !u64i loc(#loc538)
                %36 = cir.const #cir.int<0> : !s32i loc(#loc301)
                %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc302)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc303)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc303)
                %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc303)
                %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc539)
                cir.if %41 {
                  %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc305)
                  %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc305)
                  cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc306)
                } loc(#loc540)
              } loc(#loc537)
              cir.yield loc(#loc236)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc307)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc307)
              cir.condition(%10) loc(#loc307)
            } loc(#loc514)
          } loc(#loc514)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc310)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc311)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc311)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc542)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc314)
            } loc(#loc543)
          } loc(#loc541)
          cir.scope {
            %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc317)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc318)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc318)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc545)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc320)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc321)
            } loc(#loc546)
          } loc(#loc544)
        } loc(#loc510)
      } loc(#loc509)
    } loc(#loc508)
    cir.return loc(#loc219)
  } loc(#loc507)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc326)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc326)
      cir.if %1 {
        cir.scope {
          %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc551)
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc552)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc553)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc333)
          %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc333)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc552)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc335)
          %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc335)
          cir.store %8, %4 : !s32i, !cir.ptr<!s32i> loc(#loc553)
          cir.scope {
            cir.do {
              %9 = cir.const #cir.int<2> : !s32i loc(#loc338)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc339)
              %11 = cir.const #cir.int<6> : !s32i loc(#loc340)
              %12 = cir.call @socket(%9, %10, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc341)
              cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc346)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc347)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc347)
                %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc557)
                cir.if %34 {
                  cir.break loc(#loc349)
                } loc(#loc558)
              } loc(#loc556)
              %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc559)
              %14 = cir.const #cir.int<0> : !s32i loc(#loc352)
              %15 = cir.const #cir.int<16> : !u64i loc(#loc560)
              cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc561)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc357)
              %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc357)
              %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc562)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc359)
              %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc359)
              %21 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %22 = cir.get_member %21[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %20, %22 : !u32i, !cir.ptr<!u32i> loc(#loc563)
              %23 = cir.const #cir.int<20000> : !s32i loc(#loc361)
              %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc361)
              %25 = cir.call @htons(%24) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc362)
              %26 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc564)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                %32 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc566)
                %33 = cir.const #cir.int<16> : !u64i loc(#loc567)
                %34 = cir.cast(integral, %33 : !u64i), !u32i loc(#loc567)
                %35 = cir.call @bind(%31, %32, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc372)
                %36 = cir.const #cir.int<1> : !s32i loc(#loc373)
                %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc373)
                %38 = cir.cmp(eq, %35, %37) : !s32i, !cir.bool loc(#loc568)
                cir.if %38 {
                  cir.break loc(#loc375)
                } loc(#loc569)
              } loc(#loc565)
              cir.scope {
                %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc378)
                %32 = cir.const #cir.int<5> : !s32i loc(#loc379)
                %33 = cir.call @listen(%31, %32) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc380)
                %34 = cir.const #cir.int<1> : !s32i loc(#loc381)
                %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc381)
                %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc571)
                cir.if %36 {
                  cir.break loc(#loc383)
                } loc(#loc572)
              } loc(#loc570)
              %27 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc384)
              %28 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc385)
              %29 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc386)
              %30 = cir.call @accept(%27, %28, %29) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc387)
              cir.store %30, %4 : !s32i, !cir.ptr<!s32i> loc(#loc573)
              cir.scope {
                %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc392)
                %32 = cir.const #cir.int<1> : !s32i loc(#loc393)
                %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc393)
                %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc575)
                cir.if %34 {
                  cir.break loc(#loc395)
                } loc(#loc576)
              } loc(#loc574)
              cir.scope {
                %31 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc399)
                %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc399)
                %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc399)
                %35 = cir.const #cir.int<8> : !u64i loc(#loc578)
                %36 = cir.const #cir.int<0> : !s32i loc(#loc402)
                %37 = cir.call @send(%31, %34, %35, %36) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc403)
                %38 = cir.const #cir.int<1> : !s32i loc(#loc404)
                %39 = cir.unary(minus, %38) : !s32i, !s32i loc(#loc404)
                %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc404)
                %41 = cir.cmp(eq, %37, %40) : !s64i, !cir.bool loc(#loc579)
                cir.if %41 {
                  %42 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc406)
                  %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc406)
                  cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc407)
                } loc(#loc580)
              } loc(#loc577)
              cir.yield loc(#loc337)
            } while {
              %9 = cir.const #cir.int<0> : !s32i loc(#loc408)
              %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc408)
              cir.condition(%10) loc(#loc408)
            } loc(#loc554)
          } loc(#loc554)
          cir.scope {
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc411)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc412)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc412)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc582)
            cir.if %12 {
              %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc414)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc415)
            } loc(#loc583)
          } loc(#loc581)
          cir.scope {
            %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc418)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc419)
            %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc419)
            %12 = cir.cmp(ne, %9, %11) : !s32i, !cir.bool loc(#loc585)
            cir.if %12 {
              %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc421)
              %14 = cir.call @close(%13) : (!s32i) -> !s32i loc(#loc422)
            } loc(#loc586)
          } loc(#loc584)
        } loc(#loc550)
      } loc(#loc549)
    } loc(#loc548)
    cir.return loc(#loc323)
  } loc(#loc547)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__hostname_based_logic_04.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":116:1)
#loc12 = loc("/usr/include/sys/socket.h":117:33)
#loc13 = loc("/usr/include/netdb.h":675:1)
#loc14 = loc("/usr/include/netdb.h":678:36)
#loc15 = loc("/usr/include/string.h":156:1)
#loc16 = loc("/usr/include/string.h":157:33)
#loc17 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":111:28)
#loc18 = loc("/usr/include/sys/socket.h":138:1)
#loc19 = loc("/usr/include/sys/socket.h":138:74)
#loc20 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:44)
#loc21 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:44)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":123:35)
#loc25 = loc("/usr/include/unistd.h":358:1)
#loc26 = loc("/usr/include/unistd.h":358:27)
#loc27 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":53:1)
#loc28 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":144:1)
#loc29 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":55:5)
#loc30 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":143:5)
#loc31 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":55:8)
#loc32 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":56:5)
#loc33 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":57:9)
#loc34 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":142:9)
#loc35 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":62:13)
#loc36 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":62:32)
#loc37 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":62:41)
#loc38 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":63:13)
#loc39 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":63:56)
#loc40 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":64:13)
#loc41 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":64:35)
#loc42 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":65:13)
#loc43 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":65:35)
#loc44 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":66:13)
#loc45 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":66:37)
#loc46 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":67:13)
#loc47 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":67:37)
#loc48 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":63:36)
#loc49 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":68:13)
#loc50 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":127:21)
#loc51 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:39)
#loc52 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:48)
#loc53 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:61)
#loc54 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:32)
#loc55 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:17)
#loc56 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":77:72)
#loc57 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":78:17)
#loc58 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":81:17)
#loc59 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":78:21)
#loc60 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":78:37)
#loc61 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":79:17)
#loc62 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":80:21)
#loc63 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:24)
#loc64 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:25)
#loc65 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:34)
#loc66 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:37)
#loc67 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:51)
#loc68 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:17)
#loc69 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":82:52)
#loc70 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":83:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":83:17)
#loc73 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":84:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":84:17)
#loc77 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":85:42)
#loc78 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":85:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":85:17)
#loc81 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":85:47)
#loc82 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:17)
#loc83 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":89:17)
#loc84 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:26)
#loc85 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:58)
#loc86 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:59)
#loc87 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:68)
#loc88 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:82)
#loc89 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:21)
#loc90 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":86:88)
#loc91 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":87:17)
#loc92 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":88:21)
#loc93 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":90:17)
#loc94 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":93:17)
#loc95 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":90:28)
#loc96 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":90:42)
#loc97 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":90:21)
#loc98 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":90:48)
#loc99 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":91:17)
#loc100 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":92:21)
#loc101 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:39)
#loc102 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:53)
#loc103 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:59)
#loc104 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:32)
#loc105 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:17)
#loc106 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":94:63)
#loc107 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":95:17)
#loc108 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":98:17)
#loc109 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":95:21)
#loc110 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":95:37)
#loc111 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":96:17)
#loc112 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":97:21)
#loc113 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:17)
#loc114 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":102:17)
#loc115 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:33)
#loc116 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:66)
#loc117 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:67)
#loc118 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:82)
#loc119 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:83)
#loc120 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:21)
#loc121 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:105)
#loc122 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":99:104)
#loc123 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":100:17)
#loc124 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":101:21)
#loc125 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":103:17)
#loc126 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":109:17)
#loc127 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":103:52)
#loc128 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":103:53)
#loc129 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":104:33)
#loc130 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":104:55)
#loc131 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":105:33)
#loc132 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":106:33)
#loc133 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":106:45)
#loc134 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":106:55)
#loc135 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":106:67)
#loc136 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":103:21)
#loc137 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":106:86)
#loc138 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":107:17)
#loc139 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":108:21)
#loc140 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":111:17)
#loc141 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":125:17)
#loc142 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":111:21)
#loc143 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":111:48)
#loc144 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":111:61)
#loc145 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":112:17)
#loc146 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":118:17)
#loc147 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":120:17)
#loc148 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:21)
#loc149 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":117:21)
#loc150 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:30)
#loc151 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:59)
#loc152 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:79)
#loc153 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:82)
#loc154 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:25)
#loc155 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":113:89)
#loc156 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":114:21)
#loc157 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":116:25)
#loc158 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:21)
#loc159 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":124:21)
#loc160 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:30)
#loc161 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:61)
#loc162 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:83)
#loc163 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:86)
#loc164 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:25)
#loc165 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":121:92)
#loc166 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":122:21)
#loc167 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":123:25)
#loc168 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":127:20)
#loc169 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":128:13)
#loc170 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":131:13)
#loc171 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":128:17)
#loc172 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":128:33)
#loc173 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":129:13)
#loc174 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":130:30)
#loc175 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":130:17)
#loc176 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":132:13)
#loc177 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":135:13)
#loc178 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":132:17)
#loc179 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":132:33)
#loc180 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":133:13)
#loc181 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":134:30)
#loc182 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":134:17)
#loc183 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":293:1)
#loc184 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":297:1)
#loc185 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":295:5)
#loc186 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":295:11)
#loc187 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":296:5)
#loc188 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":296:11)
#loc189 = loc("/usr/include/stdlib.h":575:1)
#loc190 = loc("/usr/include/stdlib.h":575:41)
#loc191 = loc("/usr/include/time.h":76:1)
#loc192 = loc("/usr/include/time.h":76:38)
#loc193 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":313:15)
#loc194 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":315:15)
#loc195 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":318:15)
#loc196 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":320:15)
#loc197 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":308:1)
#loc198 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":323:1)
#loc203 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":309:1)
#loc204 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":311:27)
#loc205 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":311:22)
#loc206 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":311:5)
#loc207 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":313:5)
#loc208 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":314:5)
#loc209 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":314:51)
#loc210 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":315:5)
#loc211 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":318:5)
#loc212 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":319:5)
#loc213 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":319:50)
#loc214 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":320:5)
#loc215 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":322:12)
#loc216 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":322:5)
#loc217 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":156:19)
#loc218 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":151:1)
#loc219 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":222:1)
#loc220 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":153:5)
#loc221 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":221:5)
#loc222 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":153:8)
#loc223 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":154:5)
#loc224 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":157:5)
#loc225 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":159:5)
#loc226 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":156:9)
#loc227 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":160:9)
#loc228 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":220:9)
#loc229 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":165:13)
#loc230 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":165:32)
#loc231 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":166:13)
#loc232 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":166:35)
#loc233 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":167:13)
#loc234 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":167:35)
#loc235 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":168:13)
#loc236 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":205:21)
#loc237 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:39)
#loc238 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:48)
#loc239 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:61)
#loc240 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:32)
#loc241 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:17)
#loc242 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":177:72)
#loc243 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":178:17)
#loc244 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":181:17)
#loc245 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":178:21)
#loc246 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":178:37)
#loc247 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":179:17)
#loc248 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":180:21)
#loc249 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:24)
#loc250 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:25)
#loc251 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:34)
#loc252 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:37)
#loc253 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:51)
#loc254 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:17)
#loc255 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":182:52)
#loc256 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":183:38)
#loc257 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":183:17)
#loc258 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":184:43)
#loc259 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":184:17)
#loc260 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":185:42)
#loc261 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":185:36)
#loc262 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":185:17)
#loc263 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":185:47)
#loc264 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:17)
#loc265 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":189:17)
#loc266 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:26)
#loc267 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:58)
#loc268 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:59)
#loc269 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:68)
#loc270 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:82)
#loc271 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:21)
#loc272 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":186:88)
#loc273 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":187:17)
#loc274 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":188:21)
#loc275 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":190:17)
#loc276 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":193:17)
#loc277 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":190:28)
#loc278 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":190:42)
#loc279 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":190:21)
#loc280 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":190:48)
#loc281 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":191:17)
#loc282 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":192:21)
#loc283 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:39)
#loc284 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:53)
#loc285 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:59)
#loc286 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:32)
#loc287 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:17)
#loc288 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":194:63)
#loc289 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":195:17)
#loc290 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":198:17)
#loc291 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":195:21)
#loc292 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":195:37)
#loc293 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":196:17)
#loc294 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":197:21)
#loc295 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:17)
#loc296 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":203:17)
#loc297 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:26)
#loc298 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:40)
#loc299 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:57)
#loc300 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:79)
#loc301 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:82)
#loc302 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:21)
#loc303 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":200:88)
#loc304 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":201:17)
#loc305 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":202:31)
#loc306 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":202:21)
#loc307 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":205:20)
#loc308 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":206:13)
#loc309 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":209:13)
#loc310 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":206:17)
#loc311 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":206:33)
#loc312 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":207:13)
#loc313 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":208:30)
#loc314 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":208:17)
#loc315 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":210:13)
#loc316 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":213:13)
#loc317 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":210:17)
#loc318 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":210:33)
#loc319 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":211:13)
#loc320 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":212:30)
#loc321 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":212:17)
#loc322 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":225:1)
#loc323 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":291:1)
#loc324 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":227:5)
#loc325 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":290:5)
#loc326 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":227:8)
#loc327 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":228:5)
#loc328 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":229:9)
#loc329 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":289:9)
#loc330 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":234:13)
#loc331 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":234:32)
#loc332 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":235:13)
#loc333 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":235:35)
#loc334 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":236:13)
#loc335 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":236:35)
#loc336 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":237:13)
#loc337 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":274:21)
#loc338 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:39)
#loc339 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:48)
#loc340 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:61)
#loc341 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:32)
#loc342 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:17)
#loc343 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":246:72)
#loc344 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":247:17)
#loc345 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":250:17)
#loc346 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":247:21)
#loc347 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":247:37)
#loc348 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":248:17)
#loc349 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":249:21)
#loc350 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:24)
#loc351 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:25)
#loc352 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:34)
#loc353 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:37)
#loc354 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:51)
#loc355 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:17)
#loc356 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":251:52)
#loc357 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":252:38)
#loc358 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":252:17)
#loc359 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":253:43)
#loc360 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":253:17)
#loc361 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":254:42)
#loc362 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":254:36)
#loc363 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":254:17)
#loc364 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":254:47)
#loc365 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:17)
#loc366 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":258:17)
#loc367 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:26)
#loc368 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:58)
#loc369 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:59)
#loc370 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:68)
#loc371 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:82)
#loc372 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:21)
#loc373 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":255:88)
#loc374 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":256:17)
#loc375 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":257:21)
#loc376 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":259:17)
#loc377 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":262:17)
#loc378 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":259:28)
#loc379 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":259:42)
#loc380 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":259:21)
#loc381 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":259:48)
#loc382 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":260:17)
#loc383 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":261:21)
#loc384 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:39)
#loc385 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:53)
#loc386 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:59)
#loc387 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:32)
#loc388 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:17)
#loc389 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":263:63)
#loc390 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":264:17)
#loc391 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":267:17)
#loc392 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":264:21)
#loc393 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":264:37)
#loc394 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":265:17)
#loc395 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":266:21)
#loc396 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:17)
#loc397 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":272:17)
#loc398 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:26)
#loc399 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:40)
#loc400 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:57)
#loc401 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:79)
#loc402 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:82)
#loc403 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:21)
#loc404 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":269:88)
#loc405 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":270:17)
#loc406 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":271:31)
#loc407 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":271:21)
#loc408 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":274:20)
#loc409 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":275:13)
#loc410 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":278:13)
#loc411 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":275:17)
#loc412 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":275:33)
#loc413 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":276:13)
#loc414 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":277:30)
#loc415 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":277:17)
#loc416 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":279:13)
#loc417 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":282:13)
#loc418 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":279:17)
#loc419 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":279:33)
#loc420 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":280:13)
#loc421 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":281:30)
#loc422 = loc("CWE510_Trapdoor__hostname_based_logic_04.c":281:17)
#loc423 = loc(fused[#loc1, #loc2])
#loc424 = loc(fused[#loc3, #loc4])
#loc425 = loc(fused[#loc5, #loc6])
#loc426 = loc(fused[#loc7, #loc8])
#loc427 = loc(fused[#loc9, #loc10])
#loc428 = loc(fused[#loc11, #loc12])
#loc429 = loc(fused[#loc13, #loc14])
#loc430 = loc(fused[#loc15, #loc16])
#loc431 = loc(fused[#loc18, #loc19])
#loc432 = loc(fused[#loc22, #loc23])
#loc433 = loc(fused[#loc25, #loc26])
#loc434 = loc(fused[#loc27, #loc28])
#loc435 = loc(fused[#loc29, #loc30])
#loc436 = loc(fused[#loc32, #loc30])
#loc437 = loc(fused[#loc33, #loc34])
#loc438 = loc(fused[#loc35, #loc36])
#loc439 = loc(fused[#loc35, #loc37])
#loc440 = loc(fused[#loc38, #loc39])
#loc441 = loc(fused[#loc40, #loc41])
#loc442 = loc(fused[#loc42, #loc43])
#loc443 = loc(fused[#loc44, #loc45])
#loc444 = loc(fused[#loc46, #loc47])
#loc445 = loc(fused[#loc48, #loc39])
#loc446 = loc(fused[#loc49, #loc50])
#loc447 = loc(fused[#loc55, #loc56])
#loc448 = loc(fused[#loc57, #loc58])
#loc449 = loc(fused[#loc59, #loc60])
#loc450 = loc(fused[#loc61, #loc58])
#loc451 = loc(fused[#loc63, #loc64])
#loc452 = loc(fused[#loc66, #loc67])
#loc453 = loc(fused[#loc68, #loc69])
#loc454 = loc(fused[#loc72, #loc70])
#loc455 = loc(fused[#loc76, #loc73])
#loc456 = loc(fused[#loc80, #loc81])
#loc457 = loc(fused[#loc82, #loc83])
#loc458 = loc(fused[#loc85, #loc86])
#loc459 = loc(fused[#loc87, #loc88])
#loc460 = loc(fused[#loc89, #loc90])
#loc461 = loc(fused[#loc91, #loc83])
#loc462 = loc(fused[#loc93, #loc94])
#loc463 = loc(fused[#loc97, #loc98])
#loc464 = loc(fused[#loc99, #loc94])
#loc465 = loc(fused[#loc105, #loc106])
#loc466 = loc(fused[#loc107, #loc108])
#loc467 = loc(fused[#loc109, #loc110])
#loc468 = loc(fused[#loc111, #loc108])
#loc469 = loc(fused[#loc113, #loc114])
#loc470 = loc(fused[#loc116, #loc117])
#loc471 = loc(fused[#loc118, #loc119])
#loc472 = loc(fused[#loc120, #loc121])
#loc473 = loc(fused[#loc123, #loc114])
#loc474 = loc(fused[#loc125, #loc126])
#loc475 = loc(fused[#loc127, #loc128])
#loc476 = loc(fused[#loc129, #loc130])
#loc477 = loc(fused[#loc136, #loc137])
#loc478 = loc(fused[#loc138, #loc126])
#loc479 = loc(fused[#loc140, #loc141])
#loc480 = loc(fused[#loc142, #loc144])
#loc481 = loc(fused[#loc145, #loc146, #loc147, #loc141])
#loc482 = loc(fused[#loc148, #loc149])
#loc483 = loc(fused[#loc151, #loc152])
#loc484 = loc(fused[#loc154, #loc155])
#loc485 = loc(fused[#loc156, #loc149])
#loc486 = loc(fused[#loc158, #loc159])
#loc487 = loc(fused[#loc161, #loc162])
#loc488 = loc(fused[#loc164, #loc165])
#loc489 = loc(fused[#loc166, #loc159])
#loc490 = loc(fused[#loc169, #loc170])
#loc491 = loc(fused[#loc171, #loc172])
#loc492 = loc(fused[#loc173, #loc170])
#loc493 = loc(fused[#loc176, #loc177])
#loc494 = loc(fused[#loc178, #loc179])
#loc495 = loc(fused[#loc180, #loc177])
#loc496 = loc(fused[#loc183, #loc184])
#loc497 = loc(fused[#loc185, #loc186])
#loc498 = loc(fused[#loc187, #loc188])
#loc499 = loc(fused[#loc189, #loc190])
#loc500 = loc(fused[#loc191, #loc192])
#loc501 = loc(fused[#loc197, #loc198])
#loc504 = loc(fused[#loc208, #loc209])
#loc505 = loc(fused[#loc212, #loc213])
#loc506 = loc(fused[#loc216, #loc215])
#loc507 = loc(fused[#loc218, #loc219])
#loc508 = loc(fused[#loc220, #loc221])
#loc509 = loc(fused[#loc223, #loc224, #loc225, #loc221])
#loc510 = loc(fused[#loc227, #loc228])
#loc511 = loc(fused[#loc229, #loc230])
#loc512 = loc(fused[#loc231, #loc232])
#loc513 = loc(fused[#loc233, #loc234])
#loc514 = loc(fused[#loc235, #loc236])
#loc515 = loc(fused[#loc241, #loc242])
#loc516 = loc(fused[#loc243, #loc244])
#loc517 = loc(fused[#loc245, #loc246])
#loc518 = loc(fused[#loc247, #loc244])
#loc519 = loc(fused[#loc249, #loc250])
#loc520 = loc(fused[#loc252, #loc253])
#loc521 = loc(fused[#loc254, #loc255])
#loc522 = loc(fused[#loc257, #loc256])
#loc523 = loc(fused[#loc259, #loc258])
#loc524 = loc(fused[#loc262, #loc263])
#loc525 = loc(fused[#loc264, #loc265])
#loc526 = loc(fused[#loc267, #loc268])
#loc527 = loc(fused[#loc269, #loc270])
#loc528 = loc(fused[#loc271, #loc272])
#loc529 = loc(fused[#loc273, #loc265])
#loc530 = loc(fused[#loc275, #loc276])
#loc531 = loc(fused[#loc279, #loc280])
#loc532 = loc(fused[#loc281, #loc276])
#loc533 = loc(fused[#loc287, #loc288])
#loc534 = loc(fused[#loc289, #loc290])
#loc535 = loc(fused[#loc291, #loc292])
#loc536 = loc(fused[#loc293, #loc290])
#loc537 = loc(fused[#loc295, #loc296])
#loc538 = loc(fused[#loc299, #loc300])
#loc539 = loc(fused[#loc302, #loc303])
#loc540 = loc(fused[#loc304, #loc296])
#loc541 = loc(fused[#loc308, #loc309])
#loc542 = loc(fused[#loc310, #loc311])
#loc543 = loc(fused[#loc312, #loc309])
#loc544 = loc(fused[#loc315, #loc316])
#loc545 = loc(fused[#loc317, #loc318])
#loc546 = loc(fused[#loc319, #loc316])
#loc547 = loc(fused[#loc322, #loc323])
#loc548 = loc(fused[#loc324, #loc325])
#loc549 = loc(fused[#loc327, #loc325])
#loc550 = loc(fused[#loc328, #loc329])
#loc551 = loc(fused[#loc330, #loc331])
#loc552 = loc(fused[#loc332, #loc333])
#loc553 = loc(fused[#loc334, #loc335])
#loc554 = loc(fused[#loc336, #loc337])
#loc555 = loc(fused[#loc342, #loc343])
#loc556 = loc(fused[#loc344, #loc345])
#loc557 = loc(fused[#loc346, #loc347])
#loc558 = loc(fused[#loc348, #loc345])
#loc559 = loc(fused[#loc350, #loc351])
#loc560 = loc(fused[#loc353, #loc354])
#loc561 = loc(fused[#loc355, #loc356])
#loc562 = loc(fused[#loc358, #loc357])
#loc563 = loc(fused[#loc360, #loc359])
#loc564 = loc(fused[#loc363, #loc364])
#loc565 = loc(fused[#loc365, #loc366])
#loc566 = loc(fused[#loc368, #loc369])
#loc567 = loc(fused[#loc370, #loc371])
#loc568 = loc(fused[#loc372, #loc373])
#loc569 = loc(fused[#loc374, #loc366])
#loc570 = loc(fused[#loc376, #loc377])
#loc571 = loc(fused[#loc380, #loc381])
#loc572 = loc(fused[#loc382, #loc377])
#loc573 = loc(fused[#loc388, #loc389])
#loc574 = loc(fused[#loc390, #loc391])
#loc575 = loc(fused[#loc392, #loc393])
#loc576 = loc(fused[#loc394, #loc391])
#loc577 = loc(fused[#loc396, #loc397])
#loc578 = loc(fused[#loc400, #loc401])
#loc579 = loc(fused[#loc403, #loc404])
#loc580 = loc(fused[#loc405, #loc397])
#loc581 = loc(fused[#loc409, #loc410])
#loc582 = loc(fused[#loc411, #loc412])
#loc583 = loc(fused[#loc413, #loc410])
#loc584 = loc(fused[#loc416, #loc417])
#loc585 = loc(fused[#loc418, #loc419])
#loc586 = loc(fused[#loc420, #loc417])
