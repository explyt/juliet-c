!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc208)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc209)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc210)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc211)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc14)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc215)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc25)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %7 = cir.call %6() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc29)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc29)
    cir.brcond %8 ^bb2, ^bb10 loc(#loc222)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc223)
  ^bb3:  // pred: ^bb2
    %9 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc215)
    cir.store %9, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc215)
    cir.br ^bb4 loc(#loc224)
  ^bb4:  // pred: ^bb3
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
    %11 = cir.const #cir.int<3> : !s32i loc(#loc39)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc39)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc39)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc39)
    %15 = cir.const #cir.int<2> : !s32i loc(#loc39)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc39)
    %17 = cir.binop(add, %14, %16) : !u64i loc(#loc39)
    %18 = cir.cast(integral, %17 : !u64i), !s32i loc(#loc39)
    %19 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %20 = cir.load %19 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
    %21 = cir.call @fgets(%10, %18, %20) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    %24 = cir.cmp(ne, %21, %23) : !cir.ptr<!s8i>, !cir.bool loc(#loc225)
    cir.brcond %24 ^bb5, ^bb6 loc(#loc226)
  ^bb5:  // pred: ^bb4
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc46)
    %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc47)
    cir.store %26, %3 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb7 loc(#loc44)
  ^bb6:  // pred: ^bb4
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb7 loc(#loc37)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc37)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc35)
  ^bb9:  // pred: ^bb8
    cir.br ^bb11 loc(#loc32)
  ^bb10:  // pred: ^bb1
    %29 = cir.const #cir.int<2> : !s32i loc(#loc51)
    cir.store %29, %3 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc229)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc230)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc230)
    %32 = cir.call %31() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc55)
    %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %33 ^bb14, ^bb17 loc(#loc231)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc232)
  ^bb15:  // pred: ^bb14
    %34 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %36 = cir.binop(add, %34, %35) nsw : !s32i loc(#loc62)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc64)
    cir.br ^bb16 loc(#loc61)
  ^bb16:  // pred: ^bb15
    cir.br ^bb23 loc(#loc58)
  ^bb17:  // pred: ^bb13
    cir.br ^bb18 loc(#loc233)
  ^bb18:  // pred: ^bb17
    %38 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %39 = cir.const #cir.int<2147483647> : !s32i loc(#loc68)
    %40 = cir.cmp(lt, %38, %39) : !s32i, !cir.bool loc(#loc234)
    cir.brcond %40 ^bb19, ^bb20 loc(#loc235)
  ^bb19:  // pred: ^bb18
    %41 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %42 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %43 = cir.binop(add, %41, %42) nsw : !s32i loc(#loc72)
    cir.store %43, %2 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %44 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @printIntLine(%44) : (!s32i) -> () loc(#loc74)
    cir.br ^bb21 loc(#loc70)
  ^bb20:  // pred: ^bb18
    %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc14)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc14)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb21 loc(#loc66)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc66)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc54)
  ^bb23:  // 2 preds: ^bb16, ^bb22
    cir.br ^bb24 loc(#loc54)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc16)
  } loc(#loc214)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc78)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    cir.return loc(#loc77)
  } loc(#loc236)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc240)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc241)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc247)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc247)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %9 ^bb2, ^bb10 loc(#loc248)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc249)
  ^bb3:  // pred: ^bb2
    %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc240)
    cir.store %10, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc240)
    cir.br ^bb4 loc(#loc250)
  ^bb4:  // pred: ^bb3
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
    %12 = cir.const #cir.int<3> : !s32i loc(#loc108)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc108)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc108)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc108)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc108)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc108)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc108)
    %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc108)
    %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
    %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc110)
    %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc111)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc111)
    %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc251)
    cir.brcond %25 ^bb5, ^bb6 loc(#loc252)
  ^bb5:  // pred: ^bb4
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc115)
    %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc116)
    cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.br ^bb7 loc(#loc113)
  ^bb6:  // pred: ^bb4
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc119)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb7 loc(#loc106)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc104)
  ^bb9:  // pred: ^bb8
    cir.br ^bb18 loc(#loc101)
  ^bb10:  // pred: ^bb1
    cir.br ^bb11 loc(#loc254)
  ^bb11:  // pred: ^bb10
    %30 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc241)
    cir.store %30, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc241)
    cir.br ^bb12 loc(#loc255)
  ^bb12:  // pred: ^bb11
    %31 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
    %32 = cir.const #cir.int<3> : !s32i loc(#loc126)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc126)
    %34 = cir.const #cir.int<4> : !u64i loc(#loc126)
    %35 = cir.binop(mul, %33, %34) : !u64i loc(#loc126)
    %36 = cir.const #cir.int<2> : !s32i loc(#loc126)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc126)
    %38 = cir.binop(add, %35, %37) : !u64i loc(#loc126)
    %39 = cir.cast(integral, %38 : !u64i), !s32i loc(#loc126)
    %40 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc210)
    %41 = cir.load %40 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc127)
    %42 = cir.call @fgets(%31, %39, %41) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc128)
    %43 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc129)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
    %45 = cir.cmp(ne, %42, %44) : !cir.ptr<!s8i>, !cir.bool loc(#loc256)
    cir.brcond %45 ^bb13, ^bb14 loc(#loc257)
  ^bb13:  // pred: ^bb12
    %46 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
    %47 = cir.call @atoi(%46) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
    cir.store %47, %4 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb15 loc(#loc131)
  ^bb14:  // pred: ^bb12
    %48 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc137)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc137)
    cir.call @printLine(%49) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    cir.br ^bb15 loc(#loc124)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc124)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc122)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc97)
  ^bb18:  // 2 preds: ^bb9, ^bb17
    cir.br ^bb19 loc(#loc97)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc259)
  ^bb20:  // pred: ^bb19
    %50 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
    %52 = cir.call %51() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc141)
    %53 = cir.cast(int_to_bool, %52 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %53 ^bb21, ^bb27 loc(#loc261)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc262)
  ^bb22:  // pred: ^bb21
    %54 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %55 = cir.const #cir.int<2147483647> : !s32i loc(#loc149)
    %56 = cir.cmp(lt, %54, %55) : !s32i, !cir.bool loc(#loc263)
    cir.brcond %56 ^bb23, ^bb24 loc(#loc264)
  ^bb23:  // pred: ^bb22
    %57 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %59 = cir.binop(add, %57, %58) nsw : !s32i loc(#loc153)
    cir.store %59, %2 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %60 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.call @printIntLine(%60) : (!s32i) -> () loc(#loc155)
    cir.br ^bb25 loc(#loc151)
  ^bb24:  // pred: ^bb22
    %61 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc156)
    %62 = cir.cast(array_to_ptrdecay, %61 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%62) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    cir.br ^bb25 loc(#loc147)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc147)
  ^bb26:  // pred: ^bb25
    cir.br ^bb33 loc(#loc144)
  ^bb27:  // pred: ^bb20
    cir.br ^bb28 loc(#loc265)
  ^bb28:  // pred: ^bb27
    %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %64 = cir.const #cir.int<2147483647> : !s32i loc(#loc161)
    %65 = cir.cmp(lt, %63, %64) : !s32i, !cir.bool loc(#loc266)
    cir.brcond %65 ^bb29, ^bb30 loc(#loc267)
  ^bb29:  // pred: ^bb28
    %66 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %67 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %68 = cir.binop(add, %66, %67) nsw : !s32i loc(#loc165)
    cir.store %68, %3 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %69 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.call @printIntLine(%69) : (!s32i) -> () loc(#loc167)
    cir.br ^bb31 loc(#loc163)
  ^bb30:  // pred: ^bb28
    %70 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc168)
    %71 = cir.cast(array_to_ptrdecay, %70 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%71) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb31 loc(#loc159)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc159)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc140)
  ^bb33:  // 2 preds: ^bb26, ^bb32
    cir.br ^bb34 loc(#loc140)
  ^bb34:  // pred: ^bb33
    cir.return loc(#loc83)
  } loc(#loc239)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc270)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc178)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.br ^bb1 loc(#loc273)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc274)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc182)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc182)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc275)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc187)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.br ^bb4 loc(#loc185)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc189)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.br ^bb4 loc(#loc181)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc181)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc278)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc279)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc279)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc193)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc280)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc281)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc200)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc202)
    cir.br ^bb9 loc(#loc199)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc196)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc282)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %20 = cir.binop(add, %18, %19) nsw : !s32i loc(#loc205)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc207)
    cir.br ^bb12 loc(#loc204)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc192)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc192)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc171)
  } loc(#loc268)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":41:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":68:23)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":24:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":71:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":32:13)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":32:49)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":54:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":54:33)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":63:13)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":63:33)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":26:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":26:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":28:12)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":28:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":29:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":49:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":29:8)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":29:33)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":30:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":31:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":43:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":42:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:23)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:36)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:53)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":34:63)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":35:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":38:13)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":40:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":37:29)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":37:24)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":37:17)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":37:40)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":41:17)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":48:16)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":48:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":50:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":70:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":50:8)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":50:33)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":51:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":57:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":59:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":52:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":56:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":54:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":55:26)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":55:13)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":61:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":69:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":61:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":61:20)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":62:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":65:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":67:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":63:26)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":64:26)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":64:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":68:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":181:1)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":185:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":183:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":183:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":184:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":184:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":80:1)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":143:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":88:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":88:49)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":104:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":104:49)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":122:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":122:33)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":135:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":135:33)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":82:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":82:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":84:12)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":84:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":85:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":116:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":85:8)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":85:33)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":86:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":100:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":102:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":87:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":99:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":98:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:23)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:36)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:53)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:17)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":90:63)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":91:13)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":94:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":96:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":93:29)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":93:24)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":93:17)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":93:40)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":97:27)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":97:17)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":103:9)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":115:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":114:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:23)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:36)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:53)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":106:63)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":107:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":110:13)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":112:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":109:29)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":109:24)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":109:17)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":109:40)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":113:27)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":113:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":117:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":142:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":117:8)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":117:33)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":118:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":129:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":131:5)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":120:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":128:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":120:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":120:20)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":121:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":124:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":126:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":122:26)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":123:26)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":123:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":127:23)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":127:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":133:9)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":141:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":133:13)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":133:20)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":134:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":137:9)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":139:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":135:26)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":136:26)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":136:13)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":140:23)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":140:13)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":148:1)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":179:1)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":167:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":167:33)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":175:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":175:33)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":150:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":150:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":152:12)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":152:5)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":153:5)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":162:5)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":153:8)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":153:33)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":154:5)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":157:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":159:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":156:16)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":156:9)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":161:16)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":161:9)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":163:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":178:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":163:8)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":163:33)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":164:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":170:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":172:5)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":165:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":169:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":167:26)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":168:26)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":168:13)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":173:9)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":177:9)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":175:26)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":176:26)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_12.c":176:13)
#loc208 = loc(fused[#loc1, #loc2])
#loc209 = loc(fused[#loc3, #loc4])
#loc210 = loc(fused[#loc5, #loc6])
#loc211 = loc(fused[#loc7, #loc8])
#loc212 = loc(fused[#loc9, #loc10])
#loc213 = loc(fused[#loc12, #loc13])
#loc214 = loc(fused[#loc15, #loc16])
#loc215 = loc(fused[#loc17, #loc18])
#loc216 = loc(fused[#loc19, #loc20])
#loc217 = loc(fused[#loc21, #loc22])
#loc218 = loc(fused[#loc23, #loc24])
#loc219 = loc(fused[#loc26, #loc25])
#loc220 = loc(fused[#loc27, #loc28])
#loc221 = loc(fused[#loc29, #loc30])
#loc222 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc223 = loc(fused[#loc34, #loc35])
#loc224 = loc(fused[#loc36, #loc37])
#loc225 = loc(fused[#loc41, #loc42])
#loc226 = loc(fused[#loc43, #loc44, #loc45, #loc37])
#loc227 = loc(fused[#loc48, #loc49])
#loc228 = loc(fused[#loc52, #loc51])
#loc229 = loc(fused[#loc53, #loc54])
#loc230 = loc(fused[#loc55, #loc56])
#loc231 = loc(fused[#loc57, #loc58, #loc59, #loc54])
#loc232 = loc(fused[#loc60, #loc61])
#loc233 = loc(fused[#loc65, #loc66])
#loc234 = loc(fused[#loc67, #loc68])
#loc235 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc236 = loc(fused[#loc76, #loc77])
#loc237 = loc(fused[#loc78, #loc79])
#loc238 = loc(fused[#loc80, #loc81])
#loc239 = loc(fused[#loc82, #loc83])
#loc240 = loc(fused[#loc84, #loc85])
#loc241 = loc(fused[#loc86, #loc87])
#loc242 = loc(fused[#loc88, #loc89])
#loc243 = loc(fused[#loc90, #loc91])
#loc244 = loc(fused[#loc92, #loc93])
#loc245 = loc(fused[#loc95, #loc94])
#loc246 = loc(fused[#loc96, #loc97])
#loc247 = loc(fused[#loc98, #loc99])
#loc248 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc249 = loc(fused[#loc103, #loc104])
#loc250 = loc(fused[#loc105, #loc106])
#loc251 = loc(fused[#loc110, #loc111])
#loc252 = loc(fused[#loc112, #loc113, #loc114, #loc106])
#loc253 = loc(fused[#loc117, #loc118])
#loc254 = loc(fused[#loc121, #loc122])
#loc255 = loc(fused[#loc123, #loc124])
#loc256 = loc(fused[#loc128, #loc129])
#loc257 = loc(fused[#loc130, #loc131, #loc132, #loc124])
#loc258 = loc(fused[#loc135, #loc136])
#loc259 = loc(fused[#loc139, #loc140])
#loc260 = loc(fused[#loc141, #loc142])
#loc261 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc262 = loc(fused[#loc146, #loc147])
#loc263 = loc(fused[#loc148, #loc149])
#loc264 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc265 = loc(fused[#loc158, #loc159])
#loc266 = loc(fused[#loc160, #loc161])
#loc267 = loc(fused[#loc162, #loc163, #loc164, #loc159])
#loc268 = loc(fused[#loc170, #loc171])
#loc269 = loc(fused[#loc172, #loc173])
#loc270 = loc(fused[#loc174, #loc175])
#loc271 = loc(fused[#loc176, #loc177])
#loc272 = loc(fused[#loc179, #loc178])
#loc273 = loc(fused[#loc180, #loc181])
#loc274 = loc(fused[#loc182, #loc183])
#loc275 = loc(fused[#loc184, #loc185, #loc186, #loc181])
#loc276 = loc(fused[#loc188, #loc187])
#loc277 = loc(fused[#loc190, #loc189])
#loc278 = loc(fused[#loc191, #loc192])
#loc279 = loc(fused[#loc193, #loc194])
#loc280 = loc(fused[#loc195, #loc196, #loc197, #loc192])
#loc281 = loc(fused[#loc198, #loc199])
#loc282 = loc(fused[#loc203, #loc204])
