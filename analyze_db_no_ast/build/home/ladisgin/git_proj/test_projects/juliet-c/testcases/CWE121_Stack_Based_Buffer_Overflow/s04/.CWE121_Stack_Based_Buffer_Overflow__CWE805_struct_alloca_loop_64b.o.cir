!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":21:80)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":21:87)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":55:84)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":55:91)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc123 = loc(fused[#loc5, #loc6])
#loc145 = loc(fused[#loc65, #loc66])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc121)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc124)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc12)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc125)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc127)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc129)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
          cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc131)
          cir.for : cond {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc26)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc27)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc132)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc28)
            cir.condition(%15) loc(#loc28)
          } body {
            cir.scope {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %12 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc134)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc34)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc35)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
              %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %16, %20 : !s32i, !cir.ptr<!s32i> loc(#loc135)
            } loc(#loc133)
            cir.yield loc(#loc23)
          } step {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
            cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc136)
            cir.yield loc(#loc130)
          } loc(#loc130)
        } loc(#loc130)
      } loc(#loc128)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc138)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc46)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc46)
          cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc140)
          cir.for : cond {
            %14 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc48)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc49)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc49)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc141)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc50)
            cir.condition(%18) loc(#loc50)
          } body {
            cir.scope {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc52)
              %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc53)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc55)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
              cir.copy %19 to %16 : !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
            } loc(#loc142)
            cir.yield loc(#loc45)
          } step {
            %14 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc58)
            cir.store %15, %8 : !u64i, !cir.ptr<!u64i> loc(#loc143)
            cir.yield loc(#loc139)
          } loc(#loc139)
        } loc(#loc139)
        %9 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %10 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
        cir.call @printStructLine(%11) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc62)
      } loc(#loc137)
    } loc(#loc126)
    cir.return loc(#loc4)
  } loc(#loc122)
  cir.func  @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc65, #loc66])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dataVoidPtr", init] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc147)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc71)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc68)
    cir.store %4, %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>> loc(#loc146)
    %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!ty__twoIntsStruct>>>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc72)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
    cir.store %6, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc147)
    cir.scope {
      %7 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc149)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
        cir.scope {
          %9 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc84)
          cir.store %10, %8 : !u64i, !cir.ptr<!u64i> loc(#loc153)
          cir.for : cond {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc86)
            %12 = cir.const #cir.int<100> : !s32i loc(#loc87)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc87)
            %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc154)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc88)
            cir.condition(%15) loc(#loc88)
          } body {
            cir.scope {
              %11 = cir.const #cir.int<0> : !s32i loc(#loc90)
              %12 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc91)
              %13 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc92)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!ty__twoIntsStruct>, %12 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc92)
              %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %11, %15 : !s32i, !cir.ptr<!s32i> loc(#loc156)
              %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc94)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc95)
              %20 = cir.get_member %19[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc37)
              cir.store %16, %20 : !s32i, !cir.ptr<!s32i> loc(#loc157)
            } loc(#loc155)
            cir.yield loc(#loc83)
          } step {
            %11 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc96)
            %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc97)
            cir.store %12, %8 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.yield loc(#loc152)
          } loc(#loc152)
        } loc(#loc152)
      } loc(#loc150)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc160)
        cir.scope {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc104)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc104)
          cir.store %13, %8 : !u64i, !cir.ptr<!u64i> loc(#loc162)
          cir.for : cond {
            %14 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc106)
            %15 = cir.const #cir.int<100> : !s32i loc(#loc107)
            %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc107)
            %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc163)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc108)
            cir.condition(%18) loc(#loc108)
          } body {
            cir.scope {
              %14 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
              %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc111)
              %16 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
              %17 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc113)
              %18 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              %19 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %17 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
              cir.copy %19 to %16 : !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
            } loc(#loc164)
            cir.yield loc(#loc103)
          } step {
            %14 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc115)
            %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc116)
            cir.store %15, %8 : !u64i, !cir.ptr<!u64i> loc(#loc165)
            cir.yield loc(#loc161)
          } loc(#loc161)
        } loc(#loc161)
        %9 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!ty__twoIntsStruct>, %10 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
        cir.call @printStructLine(%11) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc120)
      } loc(#loc159)
    } loc(#loc148)
    cir.return loc(#loc64)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":48:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":24:52)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":26:37)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":22:1)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":26:30)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":26:29)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":27:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":47:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":28:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":28:33)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":29:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":37:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":30:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":30:20)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:13)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":36:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:22)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:18)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:29)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":33:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":34:36)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":34:24)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":34:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":35:36)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":35:24)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":35:17)
#loc37 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:35)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":32:34)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":38:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":46:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":39:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":39:20)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":44:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:22)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:18)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:25)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:29)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:27)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":42:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":43:17)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":43:22)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":43:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":43:34)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":43:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:35)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":41:34)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":45:30)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":45:35)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":45:36)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":45:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":55:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":82:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":58:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":58:52)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":60:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":60:37)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":56:1)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":60:30)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":60:29)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":61:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":81:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":62:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":62:33)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":63:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":71:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":64:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":64:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":70:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:22)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:18)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:25)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:29)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:27)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":67:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":68:36)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":68:24)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":68:17)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":69:36)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":69:24)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":69:17)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:35)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":66:34)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":72:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":80:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":73:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":73:20)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":78:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:22)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:18)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:29)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:27)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":76:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":77:17)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":77:22)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":77:23)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":77:34)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":77:27)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:35)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":75:34)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":79:30)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":79:35)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":79:36)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_64b.c":79:13)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc14, #loc15])
#loc127 = loc(fused[#loc16, #loc17])
#loc128 = loc(fused[#loc18, #loc19])
#loc129 = loc(fused[#loc20, #loc21])
#loc130 = loc(fused[#loc22, #loc23])
#loc131 = loc(fused[#loc25, #loc24])
#loc132 = loc(fused[#loc26, #loc27])
#loc133 = loc(fused[#loc29, #loc23])
#loc134 = loc(fused[#loc32, #loc30])
#loc135 = loc(fused[#loc36, #loc34])
#loc136 = loc(fused[#loc39, #loc38])
#loc137 = loc(fused[#loc40, #loc41])
#loc138 = loc(fused[#loc42, #loc43])
#loc139 = loc(fused[#loc44, #loc45])
#loc140 = loc(fused[#loc47, #loc46])
#loc141 = loc(fused[#loc48, #loc49])
#loc142 = loc(fused[#loc51, #loc45])
#loc143 = loc(fused[#loc58, #loc57])
#loc144 = loc(fused[#loc63, #loc64])
#loc146 = loc(fused[#loc67, #loc68])
#loc147 = loc(fused[#loc69, #loc70])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc76, #loc77])
#loc150 = loc(fused[#loc78, #loc79])
#loc151 = loc(fused[#loc80, #loc81])
#loc152 = loc(fused[#loc82, #loc83])
#loc153 = loc(fused[#loc85, #loc84])
#loc154 = loc(fused[#loc86, #loc87])
#loc155 = loc(fused[#loc89, #loc83])
#loc156 = loc(fused[#loc92, #loc90])
#loc157 = loc(fused[#loc95, #loc93])
#loc158 = loc(fused[#loc97, #loc96])
#loc159 = loc(fused[#loc98, #loc99])
#loc160 = loc(fused[#loc100, #loc101])
#loc161 = loc(fused[#loc102, #loc103])
#loc162 = loc(fused[#loc105, #loc104])
#loc163 = loc(fused[#loc106, #loc107])
#loc164 = loc(fused[#loc109, #loc103])
#loc165 = loc(fused[#loc116, #loc115])
