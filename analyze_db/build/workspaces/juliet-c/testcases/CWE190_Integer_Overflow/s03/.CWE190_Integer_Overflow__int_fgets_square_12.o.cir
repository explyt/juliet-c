!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc227)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc228)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc229)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc230)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc232)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc237)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc237)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc24)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc240)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc240)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc240)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc36)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc36)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc36)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc36)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc36)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc36)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc36)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc229)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc242)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc44)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc47)
            } loc(#loc243)
          } loc(#loc241)
        } loc(#loc239)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc48)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc247)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc247)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc52)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc61)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc63)
        } loc(#loc249)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc67)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc67)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc252)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %14 = cir.abs %13 poison : !s32i loc(#loc70)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc70)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc71)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc72)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc71)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc71)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc253)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc68)
              cir.yield %23 : !cir.bool loc(#loc68)
            }, false {
              %23 = cir.const #false loc(#loc68)
              cir.yield %23 : !cir.bool loc(#loc68)
            }) : (!cir.bool) -> !cir.bool loc(#loc68)
            cir.yield %22 : !cir.bool loc(#loc68)
          }, false {
            %13 = cir.const #false loc(#loc68)
            cir.yield %13 : !cir.bool loc(#loc68)
          }) : (!cir.bool) -> !cir.bool loc(#loc68)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc255)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc79)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc255)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc81)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc15)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc15)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc254)
        } loc(#loc251)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc17)
  } loc(#loc233)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc257)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc85)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc258)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc87)
    cir.return loc(#loc84)
  } loc(#loc256)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc263)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc263)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc97)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc97)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc266)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc266)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc266)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc109)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc109)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc109)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc109)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc109)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc109)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc109)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc109)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc229)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc111)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc268)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc270)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc120)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc120)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc121)
            } loc(#loc269)
          } loc(#loc267)
        } loc(#loc265)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc272)
          %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc272)
          cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc272)
          cir.scope {
            %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc128)
            %9 = cir.const #cir.int<3> : !s32i loc(#loc129)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc129)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc129)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc129)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc129)
            %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc129)
            %15 = cir.binop(add, %12, %14) : !u64i loc(#loc129)
            %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc129)
            %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc229)
            %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc130)
            %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc131)
            %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc132)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc132)
            %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc274)
            cir.if %22 {
              %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
              %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc137)
              cir.store %24, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
            } else {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc140)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc140)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc141)
            } loc(#loc275)
          } loc(#loc273)
        } loc(#loc271)
      } loc(#loc264)
    } loc(#loc262)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc278)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc278)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc152)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc152)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc152)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc281)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %14 = cir.abs %13 poison : !s32i loc(#loc155)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc155)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc156)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc157)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc157)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc156)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc156)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc282)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc153)
              cir.yield %23 : !cir.bool loc(#loc153)
            }, false {
              %23 = cir.const #false loc(#loc153)
              cir.yield %23 : !cir.bool loc(#loc153)
            }) : (!cir.bool) -> !cir.bool loc(#loc153)
            cir.yield %22 : !cir.bool loc(#loc153)
          }, false {
            %13 = cir.const #false loc(#loc153)
            cir.yield %13 : !cir.bool loc(#loc153)
          }) : (!cir.bool) -> !cir.bool loc(#loc153)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc284)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc164)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc166)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc167)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc167)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc168)
          } loc(#loc283)
        } loc(#loc280)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc172)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc172)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc172)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc172)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc286)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %14 = cir.abs %13 poison : !s32i loc(#loc175)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc175)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc176)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc177)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc177)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc176)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc176)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc287)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc173)
              cir.yield %23 : !cir.bool loc(#loc173)
            }, false {
              %23 = cir.const #false loc(#loc173)
              cir.yield %23 : !cir.bool loc(#loc173)
            }) : (!cir.bool) -> !cir.bool loc(#loc173)
            cir.yield %22 : !cir.bool loc(#loc173)
          }, false {
            %13 = cir.const #false loc(#loc173)
            cir.yield %13 : !cir.bool loc(#loc173)
          }) : (!cir.bool) -> !cir.bool loc(#loc173)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc289)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc184)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc289)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc186)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc187)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc187)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc188)
          } loc(#loc288)
        } loc(#loc285)
      } loc(#loc279)
    } loc(#loc277)
    cir.return loc(#loc90)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc291)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc193)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc292)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc294)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc294)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc197)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc197)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc202)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc204)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
      } loc(#loc295)
    } loc(#loc293)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc299)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc299)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc208)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc208)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc302)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc217)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc217)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc302)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc218)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc219)
        } loc(#loc301)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc304)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc224)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc223)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc224)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc304)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc226)
        } loc(#loc303)
      } loc(#loc300)
    } loc(#loc298)
    cir.return loc(#loc190)
  } loc(#loc290)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":43:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":70:23)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":26:1)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":73:1)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":28:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":51:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":31:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":31:33)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":46:5)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":48:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":33:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":45:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":34:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":34:49)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:13)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":44:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:23)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:36)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:53)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:17)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":36:63)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":37:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":40:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":42:13)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":39:29)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":39:24)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":39:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":39:40)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":43:17)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":50:16)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":50:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":52:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":72:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":52:8)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":52:33)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":53:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":54:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":58:9)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":56:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":56:33)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":56:26)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":57:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":57:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:9)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":71:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:20)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:28)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:35)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:31)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:49)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:62)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":63:69)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":64:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":67:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":69:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":65:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":65:33)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":65:26)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":66:26)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":66:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":70:13)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":183:1)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":187:1)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":185:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":185:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":186:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":186:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":82:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":145:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":84:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":84:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":86:12)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":86:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":87:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":118:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":87:8)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":87:33)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":88:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":102:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":104:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":89:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":101:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":90:49)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":100:13)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:23)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:36)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:53)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:17)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":92:63)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":93:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":96:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":98:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":95:29)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":95:24)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":95:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":95:40)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":99:27)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":99:17)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":105:9)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":117:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":106:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":106:49)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":116:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:23)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:36)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:53)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":108:63)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":109:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":112:13)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":114:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":111:29)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":111:24)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":111:17)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":111:40)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":115:27)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":115:17)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":119:5)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":144:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":119:8)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":119:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":120:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":131:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":133:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":130:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:20)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:28)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:35)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:31)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:49)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:62)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":122:69)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":123:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":126:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":128:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":124:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":124:33)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":124:26)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":125:26)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":125:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":129:23)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":129:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":143:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:20)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:28)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:35)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:31)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:49)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:62)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":135:69)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":136:9)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":139:9)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":141:9)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":137:13)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":137:33)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":137:26)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":138:26)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":138:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":142:23)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":142:13)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":150:1)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":181:1)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":152:5)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":152:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":154:12)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":154:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":155:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":164:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":155:8)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":155:33)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":156:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":159:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":161:5)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":158:16)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":158:9)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":163:16)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":163:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":165:5)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":180:5)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":165:8)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":165:33)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":166:5)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":172:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":174:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":167:9)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":171:9)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":169:13)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":169:33)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":169:26)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":170:26)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":170:13)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":175:9)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":179:9)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":177:13)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":177:33)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":177:26)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":178:26)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_square_12.c":178:13)
#loc227 = loc(fused[#loc1, #loc2])
#loc228 = loc(fused[#loc3, #loc4])
#loc229 = loc(fused[#loc5, #loc6])
#loc230 = loc(fused[#loc7, #loc8])
#loc231 = loc(fused[#loc9, #loc10])
#loc232 = loc(fused[#loc12, #loc13])
#loc233 = loc(fused[#loc16, #loc17])
#loc234 = loc(fused[#loc18, #loc19])
#loc235 = loc(fused[#loc21, #loc20])
#loc236 = loc(fused[#loc22, #loc23])
#loc237 = loc(fused[#loc24, #loc25])
#loc238 = loc(fused[#loc26, #loc27, #loc28, #loc23])
#loc239 = loc(fused[#loc29, #loc30])
#loc240 = loc(fused[#loc31, #loc32])
#loc241 = loc(fused[#loc33, #loc34])
#loc242 = loc(fused[#loc38, #loc39])
#loc243 = loc(fused[#loc40, #loc41, #loc42, #loc34])
#loc244 = loc(fused[#loc45, #loc46])
#loc245 = loc(fused[#loc49, #loc48])
#loc246 = loc(fused[#loc50, #loc51])
#loc247 = loc(fused[#loc52, #loc53])
#loc248 = loc(fused[#loc54, #loc55, #loc56, #loc51])
#loc249 = loc(fused[#loc57, #loc58])
#loc250 = loc(fused[#loc59, #loc60])
#loc251 = loc(fused[#loc64, #loc65])
#loc252 = loc(fused[#loc66, #loc67])
#loc253 = loc(fused[#loc70, #loc73])
#loc254 = loc(fused[#loc74, #loc75, #loc76, #loc65])
#loc255 = loc(fused[#loc77, #loc78])
#loc256 = loc(fused[#loc83, #loc84])
#loc257 = loc(fused[#loc85, #loc86])
#loc258 = loc(fused[#loc87, #loc88])
#loc259 = loc(fused[#loc89, #loc90])
#loc260 = loc(fused[#loc91, #loc92])
#loc261 = loc(fused[#loc94, #loc93])
#loc262 = loc(fused[#loc95, #loc96])
#loc263 = loc(fused[#loc97, #loc98])
#loc264 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc265 = loc(fused[#loc102, #loc103])
#loc266 = loc(fused[#loc104, #loc105])
#loc267 = loc(fused[#loc106, #loc107])
#loc268 = loc(fused[#loc111, #loc112])
#loc269 = loc(fused[#loc113, #loc114, #loc115, #loc107])
#loc270 = loc(fused[#loc118, #loc119])
#loc271 = loc(fused[#loc122, #loc123])
#loc272 = loc(fused[#loc124, #loc125])
#loc273 = loc(fused[#loc126, #loc127])
#loc274 = loc(fused[#loc131, #loc132])
#loc275 = loc(fused[#loc133, #loc134, #loc135, #loc127])
#loc276 = loc(fused[#loc138, #loc139])
#loc277 = loc(fused[#loc142, #loc143])
#loc278 = loc(fused[#loc144, #loc145])
#loc279 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc280 = loc(fused[#loc149, #loc150])
#loc281 = loc(fused[#loc151, #loc152])
#loc282 = loc(fused[#loc155, #loc158])
#loc283 = loc(fused[#loc159, #loc160, #loc161, #loc150])
#loc284 = loc(fused[#loc162, #loc163])
#loc285 = loc(fused[#loc169, #loc170])
#loc286 = loc(fused[#loc171, #loc172])
#loc287 = loc(fused[#loc175, #loc178])
#loc288 = loc(fused[#loc179, #loc180, #loc181, #loc170])
#loc289 = loc(fused[#loc182, #loc183])
#loc290 = loc(fused[#loc189, #loc190])
#loc291 = loc(fused[#loc191, #loc192])
#loc292 = loc(fused[#loc194, #loc193])
#loc293 = loc(fused[#loc195, #loc196])
#loc294 = loc(fused[#loc197, #loc198])
#loc295 = loc(fused[#loc199, #loc200, #loc201, #loc196])
#loc296 = loc(fused[#loc203, #loc202])
#loc297 = loc(fused[#loc205, #loc204])
#loc298 = loc(fused[#loc206, #loc207])
#loc299 = loc(fused[#loc208, #loc209])
#loc300 = loc(fused[#loc210, #loc211, #loc212, #loc207])
#loc301 = loc(fused[#loc213, #loc214])
#loc302 = loc(fused[#loc215, #loc216])
#loc303 = loc(fused[#loc220, #loc221])
#loc304 = loc(fused[#loc222, #loc223])
