!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":25:21)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":25:25)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":66:26)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":66:30)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":102:26)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":102:30)
#loc156 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":133:25)
#loc157 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":133:29)
#true = #cir.bool<true> : !cir.bool
#loc198 = loc(fused[#loc12, #loc13])
#loc217 = loc(fused[#loc62, #loc63])
#loc233 = loc(fused[#loc110, #loc111])
#loc249 = loc(fused[#loc156, #loc157])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private  @printIntLine(!s32i) loc(#loc195)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc196)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc9)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc194)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc202)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc202)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc202)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc26)
            %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc204)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc27)
            cir.if %9 {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
              %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc32)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc32)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc32)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc33)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc9)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc34)
            } loc(#loc205)
          } loc(#loc203)
        } loc(#loc201)
      } loc(#loc200)
    } loc(#loc199)
    cir.return loc(#loc11)
  } loc(#loc197)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_rand_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc40)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc42)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc42)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc42)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc42)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc42)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc42)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc42)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc42)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc42)
      cir.yield %23 : !u32i loc(#loc42)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc42)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc42)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc42)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc42)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc42)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc42)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc42)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc42)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc42)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc42)
      cir.yield %27 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc42)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %10 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc194)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    cir.call @badSink(%11) : (!s32i) -> () loc(#loc47)
    cir.return loc(#loc36)
  } loc(#loc206)
  cir.func no_proto  @CWE127_Buffer_Underread__CWE839_rand_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc49)
  } loc(#loc211)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc215)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc58)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc59)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc62, #loc63])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc217)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc215)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc67)
      cir.if %3 {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc58)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc58)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc71)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc221)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc221)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc221)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc79)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc223)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc80)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc83)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc224)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc85)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc81)
                cir.yield %16 : !cir.bool loc(#loc81)
              }, false {
                %16 = cir.const #false loc(#loc81)
                cir.yield %16 : !cir.bool loc(#loc81)
              }) : (!cir.bool) -> !cir.bool loc(#loc81)
              cir.yield %15 : !cir.bool loc(#loc81)
            }, false {
              %11 = cir.const #false loc(#loc81)
              cir.yield %11 : !cir.bool loc(#loc81)
            }) : (!cir.bool) -> !cir.bool loc(#loc81)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc90)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc90)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc91)
            } else {
              %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc59)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc59)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc92)
            } loc(#loc225)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc61)
  } loc(#loc216)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc98)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc100)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc100)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc100)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc100)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc100)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc100)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc100)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc100)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc100)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc100)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc100)
      cir.yield %23 : !u32i loc(#loc100)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc100)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc100)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc100)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc100)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc100)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc100)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc100)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc100)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc100)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc100)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc100)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc100)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc100)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc100)
      cir.yield %27 : !u32i loc(#loc100)
    }) : (!cir.bool) -> !u32i loc(#loc100)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc100)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %10 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc215)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.call @goodB2G1Sink(%11) : (!s32i) -> () loc(#loc105)
    cir.return loc(#loc94)
  } loc(#loc226)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc231)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc110, #loc111])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc233)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc231)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc115)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc237)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc237)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc237)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc124)
            %8 = cir.cmp(ge, %6, %7) : !s32i, !s32i loc(#loc239)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc125)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc127)
              %12 = cir.const #cir.int<10> : !s32i loc(#loc128)
              %13 = cir.cmp(lt, %11, %12) : !s32i, !s32i loc(#loc240)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc130)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc126)
                cir.yield %16 : !cir.bool loc(#loc126)
              }, false {
                %16 = cir.const #false loc(#loc126)
                cir.yield %16 : !cir.bool loc(#loc126)
              }) : (!cir.bool) -> !cir.bool loc(#loc126)
              cir.yield %15 : !cir.bool loc(#loc126)
            }, false {
              %11 = cir.const #false loc(#loc126)
              cir.yield %11 : !cir.bool loc(#loc126)
            }) : (!cir.bool) -> !cir.bool loc(#loc126)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
              %12 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc135)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc135)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc136)
            } else {
              %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc137)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc137)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc138)
            } loc(#loc241)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc234)
    cir.return loc(#loc109)
  } loc(#loc232)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc146)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc146)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc146)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc146)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc146)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc146)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc146)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc146)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc146)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc146)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc146)
      cir.yield %23 : !u32i loc(#loc146)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc146)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc146)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc146)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc146)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc146)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc146)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc146)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc146)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc146)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc146)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc146)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc146)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc146)
      cir.yield %27 : !u32i loc(#loc146)
    }) : (!cir.bool) -> !u32i loc(#loc146)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc146)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %10 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc231)
    cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.call @goodB2G2Sink(%11) : (!s32i) -> () loc(#loc151)
    cir.return loc(#loc140)
  } loc(#loc242)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc247)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc156, #loc157])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc249)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc247)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc161)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc161)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc253)
          %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc253)
          cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc253)
          cir.scope {
            %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
            %7 = cir.const #cir.int<10> : !s32i loc(#loc170)
            %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc255)
            %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc171)
            cir.if %9 {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc176)
              %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc176)
              %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc177)
            } else {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc178)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc178)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc179)
            } loc(#loc256)
          } loc(#loc254)
        } loc(#loc252)
      } loc(#loc251)
    } loc(#loc250)
    cir.return loc(#loc155)
  } loc(#loc248)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc184)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc185)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc187)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc247)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc192)
    cir.return loc(#loc181)
  } loc(#loc257)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":23:1)
#loc4 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":39:27)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":25:1)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":43:1)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":26:1)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":27:5)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":42:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":27:8)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":28:5)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":29:9)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":41:9)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":30:13)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":30:34)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":33:13)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":40:13)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":33:17)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":33:24)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":33:22)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":34:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":36:13)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":38:13)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":35:37)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":35:30)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":35:17)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":39:17)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":45:1)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":54:1)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":47:5)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":47:9)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":49:13)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":49:12)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":49:5)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":51:12)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":51:5)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":52:17)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":52:5)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":53:13)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":53:5)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":165:1)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":170:1)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":167:5)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":167:14)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":168:5)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":168:14)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":169:5)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":169:13)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":61:1)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":61:29)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":71:19)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":84:27)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":66:1)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":88:1)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":67:1)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":68:5)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":87:5)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":68:8)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":69:5)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":72:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":74:5)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":71:9)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":75:9)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":86:9)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":76:13)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":76:34)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:13)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":85:13)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:17)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:25)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:22)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:27)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:30)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:38)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:40)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":78:35)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":79:13)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":81:13)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":83:13)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":80:37)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":80:30)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":80:17)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":84:17)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":90:1)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":99:1)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":92:5)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":92:9)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":94:13)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":94:12)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":94:5)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":96:12)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":96:5)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":97:22)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":97:5)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":98:18)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":98:5)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":62:1)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":62:29)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":102:1)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":119:1)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":103:1)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":104:5)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":118:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":104:8)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":105:5)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":106:9)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":117:9)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":107:13)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":107:34)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:13)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":116:13)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:17)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:25)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:22)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:27)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:30)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:38)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:40)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":109:35)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":110:13)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":112:13)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":114:13)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":111:37)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":111:30)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":111:17)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":115:27)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":115:17)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":121:1)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":130:1)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":123:5)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":123:9)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":125:13)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":125:12)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":125:5)
#loc146 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":127:12)
#loc147 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":127:5)
#loc148 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":128:22)
#loc149 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":128:5)
#loc150 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":129:18)
#loc151 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":129:5)
#loc152 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":63:1)
#loc153 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":63:28)
#loc154 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":133:1)
#loc155 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":151:1)
#loc158 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":134:1)
#loc159 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":135:5)
#loc160 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":150:5)
#loc161 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":135:8)
#loc162 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":136:5)
#loc163 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":137:9)
#loc164 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":149:9)
#loc165 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":138:13)
#loc166 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":138:34)
#loc167 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":141:13)
#loc168 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":148:13)
#loc169 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":141:17)
#loc170 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":141:24)
#loc171 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":141:22)
#loc172 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":142:13)
#loc173 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":144:13)
#loc174 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":146:13)
#loc175 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":143:37)
#loc176 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":143:30)
#loc177 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":143:17)
#loc178 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":147:27)
#loc179 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":147:17)
#loc180 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":153:1)
#loc181 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":163:1)
#loc182 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":155:5)
#loc183 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":155:9)
#loc184 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":157:13)
#loc185 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":157:12)
#loc186 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":157:5)
#loc187 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":160:12)
#loc188 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":160:5)
#loc189 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":161:21)
#loc190 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":161:5)
#loc191 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":162:17)
#loc192 = loc("CWE127_Buffer_Underread__CWE839_rand_21.c":162:5)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc7, #loc8])
#loc197 = loc(fused[#loc10, #loc11])
#loc199 = loc(fused[#loc15, #loc16])
#loc200 = loc(fused[#loc18, #loc16])
#loc201 = loc(fused[#loc19, #loc20])
#loc202 = loc(fused[#loc21, #loc22])
#loc203 = loc(fused[#loc23, #loc24])
#loc204 = loc(fused[#loc25, #loc26])
#loc205 = loc(fused[#loc28, #loc29, #loc30, #loc24])
#loc206 = loc(fused[#loc35, #loc36])
#loc207 = loc(fused[#loc37, #loc38])
#loc208 = loc(fused[#loc41, #loc39])
#loc209 = loc(fused[#loc43, #loc42])
#loc210 = loc(fused[#loc45, #loc44])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc52, #loc53])
#loc214 = loc(fused[#loc54, #loc55])
#loc215 = loc(fused[#loc56, #loc57])
#loc216 = loc(fused[#loc60, #loc61])
#loc218 = loc(fused[#loc65, #loc66])
#loc219 = loc(fused[#loc68, #loc69, #loc70, #loc66])
#loc220 = loc(fused[#loc72, #loc73])
#loc221 = loc(fused[#loc74, #loc75])
#loc222 = loc(fused[#loc76, #loc77])
#loc223 = loc(fused[#loc78, #loc79])
#loc224 = loc(fused[#loc82, #loc84])
#loc225 = loc(fused[#loc86, #loc87, #loc88, #loc77])
#loc226 = loc(fused[#loc93, #loc94])
#loc227 = loc(fused[#loc95, #loc96])
#loc228 = loc(fused[#loc99, #loc97])
#loc229 = loc(fused[#loc101, #loc100])
#loc230 = loc(fused[#loc103, #loc102])
#loc231 = loc(fused[#loc106, #loc107])
#loc232 = loc(fused[#loc108, #loc109])
#loc234 = loc(fused[#loc113, #loc114])
#loc235 = loc(fused[#loc116, #loc114])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc121, #loc122])
#loc239 = loc(fused[#loc123, #loc124])
#loc240 = loc(fused[#loc127, #loc129])
#loc241 = loc(fused[#loc131, #loc132, #loc133, #loc122])
#loc242 = loc(fused[#loc139, #loc140])
#loc243 = loc(fused[#loc141, #loc142])
#loc244 = loc(fused[#loc145, #loc143])
#loc245 = loc(fused[#loc147, #loc146])
#loc246 = loc(fused[#loc149, #loc148])
#loc247 = loc(fused[#loc152, #loc153])
#loc248 = loc(fused[#loc154, #loc155])
#loc250 = loc(fused[#loc159, #loc160])
#loc251 = loc(fused[#loc162, #loc160])
#loc252 = loc(fused[#loc163, #loc164])
#loc253 = loc(fused[#loc165, #loc166])
#loc254 = loc(fused[#loc167, #loc168])
#loc255 = loc(fused[#loc169, #loc170])
#loc256 = loc(fused[#loc172, #loc173, #loc174, #loc168])
#loc257 = loc(fused[#loc180, #loc181])
#loc258 = loc(fused[#loc182, #loc183])
#loc259 = loc(fused[#loc186, #loc184])
#loc260 = loc(fused[#loc188, #loc187])
#loc261 = loc(fused[#loc190, #loc189])
