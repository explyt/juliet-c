!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65b_badSink(!s32i) loc(#loc38)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc39)
  cir.func no_proto  @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc42)
    %2 = cir.get_global @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65b_badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc43)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      cir.yield %24 : !u32i loc(#loc14)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc14)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc14)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc14)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc14)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc14)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc14)
      cir.yield %28 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc14)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc16)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc16)
    cir.return loc(#loc6)
  } loc(#loc40)
  cir.func no_proto  @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc46)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc45)
  cir.func private  @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65b_goodG2BSink(!s32i) loc(#loc47)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc50)
    %2 = cir.get_global @CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc50)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc31)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc33)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc33)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call %8(%9) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc36)
    cir.return loc(#loc25)
  } loc(#loc48)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE195_Signed_to_Unsigned_Conversion_Error/s02/CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":0:0)
#loc1 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":22:1)
#loc2 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":22:82)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":24:1)
#loc6 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":35:1)
#loc7 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":26:5)
#loc8 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":26:9)
#loc9 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":28:5)
#loc10 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":28:29)
#loc11 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":30:13)
#loc12 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":30:12)
#loc13 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":30:5)
#loc14 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":32:12)
#loc15 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":32:5)
#loc16 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":34:5)
#loc17 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":34:13)
#loc18 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":55:1)
#loc19 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":58:1)
#loc20 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":57:5)
#loc21 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":57:13)
#loc22 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":42:1)
#loc23 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":42:86)
#loc24 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":44:1)
#loc25 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":53:1)
#loc26 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":46:5)
#loc27 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":46:9)
#loc28 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":47:5)
#loc29 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":47:29)
#loc30 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":49:13)
#loc31 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":49:12)
#loc32 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":49:5)
#loc33 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":51:12)
#loc34 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":51:16)
#loc35 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":51:5)
#loc36 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":52:5)
#loc37 = loc("CWE195_Signed_to_Unsigned_Conversion_Error__rand_malloc_65a.c":52:13)
#loc38 = loc(fused[#loc1, #loc2])
#loc39 = loc(fused[#loc3, #loc4])
#loc40 = loc(fused[#loc5, #loc6])
#loc41 = loc(fused[#loc7, #loc8])
#loc42 = loc(fused[#loc9, #loc10])
#loc43 = loc(fused[#loc13, #loc11])
#loc44 = loc(fused[#loc15, #loc14])
#loc45 = loc(fused[#loc18, #loc19])
#loc46 = loc(fused[#loc20, #loc21])
#loc47 = loc(fused[#loc22, #loc23])
#loc48 = loc(fused[#loc24, #loc25])
#loc49 = loc(fused[#loc26, #loc27])
#loc50 = loc(fused[#loc28, #loc29])
#loc51 = loc(fused[#loc32, #loc30])
#loc52 = loc(fused[#loc35, #loc34])
