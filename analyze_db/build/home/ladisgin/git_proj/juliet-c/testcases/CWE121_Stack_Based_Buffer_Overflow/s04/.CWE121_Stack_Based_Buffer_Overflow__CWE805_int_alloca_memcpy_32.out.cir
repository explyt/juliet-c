!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":89:10)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":89:14)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":89:20)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":89:32)
#loc145 = loc(fused[#loc61, #loc62])
#loc146 = loc(fused[#loc63, #loc64])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc123)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc124)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc125)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc127)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc128)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc129)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc127)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc128)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc18)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc18)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc18)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc130)
    %13 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
    cir.store %14, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc20)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc20)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc20)
    %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
    cir.store %21, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    %22 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc6)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
    cir.store %23, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
    %24 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
    cir.store %24, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %26 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc27)
    cir.store %25, %26 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.br ^bb2 loc(#loc22)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc134)
  ^bb3:  // pred: ^bb2
    %27 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %28 = cir.load %27 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    cir.store %28, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc124)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // pred: ^bb3
    %29 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc125)
    cir.store %29, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc125)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc34)
    %32 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc35)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc36)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc36)
    %36 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc137)
    cir.libc.memcpy %37 bytes from %33 to %31 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc138)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc43)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc44)
    cir.br ^bb5 loc(#loc33)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc122)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc139)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc141)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc142)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc143)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc58)
  cir.func @main(%arg0: !s32i loc(fused[#loc61, #loc62]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc63, #loc64])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc65)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc66)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc67)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc67)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc68)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc55)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_good() : () -> () loc(#loc70)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32_bad() : () -> () loc(#loc74)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc58)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc77)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.return %17 : !s32i loc(#loc149)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc153)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc155)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc156)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc157)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc155)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc156)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc94)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc94)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc94)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc94)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc94)
    %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc158)
    %13 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc94)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc94)
    cir.store %14, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc96)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc96)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc96)
    %19 = cir.alloca !u8i, !cir.ptr<!u8i>, %18 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc96)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc96)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc96)
    cir.store %21, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %22 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
    %23 = cir.load %22 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
    cir.store %23, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    %24 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
    cir.store %24, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc160)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    %26 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    cir.store %25, %26 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc162)
  ^bb3:  // pred: ^bb2
    %27 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
    %28 = cir.load %27 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc107)
    cir.store %28, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.br ^bb4 loc(#loc163)
  ^bb4:  // pred: ^bb3
    %29 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc153)
    cir.store %29, %2 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc153)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
    %32 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc111)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc112)
    %36 = cir.const #cir.int<4> : !u64i loc(#loc164)
    %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc165)
    cir.libc.memcpy %37 bytes from %33 to %31 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc166)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %40 = cir.ptr_stride(%38 : !cir.ptr<!s32i>, %39 : !s32i), !cir.ptr<!s32i> loc(#loc119)
    %41 = cir.load %40 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc120)
    cir.br ^bb5 loc(#loc109)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc80)
  } loc(#loc150)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":44:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":29:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":29:23)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":36:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":36:23)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":38:13)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":38:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":23:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":23:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":24:24)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":25:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":25:24)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":26:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":26:34)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":27:35)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":28:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":34:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":29:22)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":32:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":32:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":33:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":33:10)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":33:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":35:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":43:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":36:22)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":37:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":42:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:20)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:26)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:34)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:38)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:48)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":40:49)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":41:26)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":41:31)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":41:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":41:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":75:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":78:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":77:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":77:13)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":94:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":96:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":99:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":101:15)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":89:1)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":104:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":90:1)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":92:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":92:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":92:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":94:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":95:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":95:74)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":96:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":99:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":100:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":100:73)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":101:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":103:12)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":103:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":51:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":73:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":59:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":59:23)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":65:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":65:23)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":67:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":67:33)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":53:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":53:11)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":54:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":54:24)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":55:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":55:24)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":56:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":56:34)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":57:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":57:35)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":58:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":63:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":59:22)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":61:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":61:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":62:21)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":62:10)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":62:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":64:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":72:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":65:22)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":66:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":71:9)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:26)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:34)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:38)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:48)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:13)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":69:49)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":70:26)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":70:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":70:32)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memcpy_32.c":70:13)
#loc121 = loc(fused[#loc1, #loc2])
#loc122 = loc(fused[#loc3, #loc4])
#loc123 = loc(fused[#loc5, #loc6])
#loc124 = loc(fused[#loc7, #loc8])
#loc125 = loc(fused[#loc9, #loc10])
#loc126 = loc(fused[#loc11, #loc12])
#loc127 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc15, #loc16])
#loc129 = loc(fused[#loc17, #loc18])
#loc130 = loc(fused[#loc19, #loc20])
#loc131 = loc(fused[#loc21, #loc22])
#loc132 = loc(fused[#loc25, #loc24])
#loc133 = loc(fused[#loc28, #loc26])
#loc134 = loc(fused[#loc29, #loc30])
#loc135 = loc(fused[#loc32, #loc33])
#loc136 = loc(fused[#loc37, #loc38])
#loc137 = loc(fused[#loc36, #loc38])
#loc138 = loc(fused[#loc39, #loc40])
#loc139 = loc(fused[#loc45, #loc46])
#loc140 = loc(fused[#loc47, #loc48])
#loc141 = loc(fused[#loc49, #loc50])
#loc142 = loc(fused[#loc51, #loc52])
#loc143 = loc(fused[#loc53, #loc54])
#loc144 = loc(fused[#loc59, #loc60])
#loc147 = loc(fused[#loc70, #loc71])
#loc148 = loc(fused[#loc74, #loc75])
#loc149 = loc(fused[#loc78, #loc77])
#loc150 = loc(fused[#loc79, #loc80])
#loc151 = loc(fused[#loc81, #loc82])
#loc152 = loc(fused[#loc83, #loc84])
#loc153 = loc(fused[#loc85, #loc86])
#loc154 = loc(fused[#loc87, #loc88])
#loc155 = loc(fused[#loc89, #loc90])
#loc156 = loc(fused[#loc91, #loc92])
#loc157 = loc(fused[#loc93, #loc94])
#loc158 = loc(fused[#loc95, #loc96])
#loc159 = loc(fused[#loc97, #loc98])
#loc160 = loc(fused[#loc101, #loc100])
#loc161 = loc(fused[#loc104, #loc102])
#loc162 = loc(fused[#loc105, #loc106])
#loc163 = loc(fused[#loc108, #loc109])
#loc164 = loc(fused[#loc113, #loc114])
#loc165 = loc(fused[#loc112, #loc114])
#loc166 = loc(fused[#loc115, #loc116])
