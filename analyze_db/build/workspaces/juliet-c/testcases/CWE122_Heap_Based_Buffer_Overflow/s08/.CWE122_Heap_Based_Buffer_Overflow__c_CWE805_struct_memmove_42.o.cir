!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":21:34)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":21:50)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":56:38)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":56:54)
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc154 = loc(fused[#loc7, #loc8])
#loc186 = loc(fused[#loc85, #loc86])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc151)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc152)
  cir.func internal private @badSource(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc7, #loc8])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc155)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc156)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc157)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc160)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc161)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc23)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc24)
    cir.store %16, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc162)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
    cir.return %17 : !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
  } loc(#loc153)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc163)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc164)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc166)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc167)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
    cir.store %3, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc169)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc41)
    cir.store %5, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc172)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc173)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc50)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc174)
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc52)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc53)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc175)
    cir.brcond %11 ^bb5, ^bb9 loc(#loc54)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc176)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %13 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
    cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc61)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %18 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
    %21 = cir.get_member %20[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
    cir.store %17, %21 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc49)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc65)
    cir.store %23, %1 : !u64i, !cir.ptr<!u64i> loc(#loc179)
    cir.br ^bb4 loc(#loc173)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc49)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc47)
  ^bb11:  // pred: ^bb10
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc66)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc67)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc68)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc68)
    %30 = cir.const #cir.int<8> : !u64i loc(#loc180)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc181)
    cir.libc.memmove %31 bytes from %27 to %25 : !cir.ptr<!void>, !u64i loc(#loc182)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!ty__twoIntsStruct>, %33 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
    cir.call @printStructLine(%34) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc76)
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc77)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb12 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc31)
  } loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    cir.return loc(#loc80)
  } loc(#loc183)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc85, #loc86])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc84)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc87)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc88)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc89)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc89)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc187)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc188)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc189)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc96)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc192)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc99)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc100)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc101)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
    cir.br ^bb3 loc(#loc95)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc95)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
    cir.store %16, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc194)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
    cir.return %17 : !cir.ptr<!ty__twoIntsStruct> loc(#loc194)
  } loc(#loc185)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc196)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
    cir.store %3, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc199)
    %4 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc114)
    %5 = cir.call @goodG2BSource(%4) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc115)
    cir.store %5, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc202)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc203)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc124)
    cir.store %7, %1 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb4 loc(#loc203)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc126)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc127)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc127)
    %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc205)
    cir.brcond %11 ^bb5, ^bb9 loc(#loc128)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc206)
  ^bb6:  // pred: ^bb5
    %12 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %13 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc131)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!ty__twoIntsStruct>, %13 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc132)
    %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc59)
    cir.store %12, %16 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc134)
    %19 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %18 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc135)
    %21 = cir.get_member %20[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc63)
    cir.store %17, %21 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.br ^bb7 loc(#loc123)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc123)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc136)
    %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc137)
    cir.store %23, %1 : !u64i, !cir.ptr<!u64i> loc(#loc209)
    cir.br ^bb4 loc(#loc203)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc123)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc121)
  ^bb11:  // pred: ^bb10
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc138)
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc139)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc139)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc140)
    %30 = cir.const #cir.int<8> : !u64i loc(#loc210)
    %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc211)
    cir.libc.memmove %31 bytes from %27 to %25 : !cir.ptr<!void>, !u64i loc(#loc212)
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!ty__twoIntsStruct>, %33 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
    cir.call @printStructLine(%34) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc148)
    %35 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc149)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc149)
    cir.call @free(%36) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc150)
    cir.br ^bb12 loc(#loc119)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc105)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":27:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:29)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:36)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:39)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:59)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:60)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":24:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":25:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":26:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":26:5)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc28 = loc("/usr/include/stdlib.h":687:1)
#loc29 = loc("/usr/include/stdlib.h":687:32)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":29:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":50:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":35:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":35:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":37:13)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":37:20)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":31:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":31:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":32:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":32:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":33:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":33:12)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":33:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":33:26)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":34:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":49:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":44:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":43:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:27)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":40:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":41:36)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":41:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":41:17)
#loc59 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":42:36)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":42:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":42:17)
#loc63 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":39:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:23)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:55)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":46:56)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":47:26)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":47:31)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":47:32)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":47:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":48:14)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":48:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":88:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":91:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":90:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":90:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":56:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":62:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":57:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:40)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:60)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:61)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":59:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:17)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:24)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:30)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":60:29)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":61:12)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":61:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":65:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":86:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":71:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":71:33)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":73:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":73:20)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":67:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":67:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":68:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":68:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":69:26)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":69:12)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":69:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":69:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":70:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":85:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":72:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":80:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":79:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:22)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:29)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:27)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":76:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":77:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":77:24)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":77:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":78:36)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":78:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":78:17)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:35)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":75:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:17)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:31)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:35)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:55)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":82:56)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":83:26)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":83:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":83:32)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":83:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":84:14)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_42.c":84:9)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc12, #loc13])
#loc156 = loc(fused[#loc11, #loc13])
#loc157 = loc(fused[#loc10, #loc14])
#loc158 = loc(fused[#loc15, #loc14])
#loc159 = loc(fused[#loc16, #loc17])
#loc160 = loc(fused[#loc18, #loc19])
#loc161 = loc(fused[#loc20, #loc17])
#loc162 = loc(fused[#loc25, #loc24])
#loc163 = loc(fused[#loc26, #loc27])
#loc164 = loc(fused[#loc28, #loc29])
#loc165 = loc(fused[#loc30, #loc31])
#loc166 = loc(fused[#loc32, #loc33])
#loc167 = loc(fused[#loc34, #loc35])
#loc168 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc39, #loc38])
#loc170 = loc(fused[#loc42, #loc43])
#loc171 = loc(fused[#loc44, #loc45])
#loc172 = loc(fused[#loc46, #loc47])
#loc173 = loc(fused[#loc48, #loc49])
#loc174 = loc(fused[#loc51, #loc50])
#loc175 = loc(fused[#loc52, #loc53])
#loc176 = loc(fused[#loc55, #loc49])
#loc177 = loc(fused[#loc58, #loc56])
#loc178 = loc(fused[#loc62, #loc60])
#loc179 = loc(fused[#loc65, #loc64])
#loc180 = loc(fused[#loc69, #loc70])
#loc181 = loc(fused[#loc68, #loc70])
#loc182 = loc(fused[#loc71, #loc72])
#loc183 = loc(fused[#loc79, #loc80])
#loc184 = loc(fused[#loc81, #loc82])
#loc185 = loc(fused[#loc83, #loc84])
#loc187 = loc(fused[#loc90, #loc91])
#loc188 = loc(fused[#loc89, #loc91])
#loc189 = loc(fused[#loc88, #loc92])
#loc190 = loc(fused[#loc93, #loc92])
#loc191 = loc(fused[#loc94, #loc95])
#loc192 = loc(fused[#loc96, #loc97])
#loc193 = loc(fused[#loc98, #loc95])
#loc194 = loc(fused[#loc103, #loc102])
#loc195 = loc(fused[#loc104, #loc105])
#loc196 = loc(fused[#loc106, #loc107])
#loc197 = loc(fused[#loc108, #loc109])
#loc198 = loc(fused[#loc110, #loc111])
#loc199 = loc(fused[#loc113, #loc112])
#loc200 = loc(fused[#loc116, #loc117])
#loc201 = loc(fused[#loc118, #loc119])
#loc202 = loc(fused[#loc120, #loc121])
#loc203 = loc(fused[#loc122, #loc123])
#loc204 = loc(fused[#loc125, #loc124])
#loc205 = loc(fused[#loc126, #loc127])
#loc206 = loc(fused[#loc129, #loc123])
#loc207 = loc(fused[#loc132, #loc130])
#loc208 = loc(fused[#loc135, #loc133])
#loc209 = loc(fused[#loc137, #loc136])
#loc210 = loc(fused[#loc141, #loc142])
#loc211 = loc(fused[#loc140, #loc142])
#loc212 = loc(fused[#loc143, #loc144])
