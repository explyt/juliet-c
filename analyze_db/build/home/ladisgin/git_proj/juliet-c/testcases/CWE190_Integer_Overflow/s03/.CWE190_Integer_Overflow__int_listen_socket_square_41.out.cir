!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":46:21)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":46:25)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":263:10)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":263:14)
#loc174 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":263:20)
#loc175 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":263:32)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":157:25)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":157:29)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":137:25)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":137:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc367 = loc(fused[#loc21, #loc22])
#loc423 = loc(fused[#loc172, #loc173])
#loc424 = loc(fused[#loc174, #loc175])
#loc429 = loc(fused[#loc194, #loc195])
#loc482 = loc(fused[#loc337, #loc338])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc357)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc358)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc359)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc360)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc361)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc362)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc363)
  cir.func private @close(!s32i) -> !s32i loc(#loc364)
  cir.func private @printIntLine(!s32i) loc(#loc365)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc367)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc369)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc28)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc369)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc30)
    } loc(#loc368)
    cir.return loc(#loc20)
  } loc(#loc366)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc371)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc372)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc374)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc375)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc376)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc377)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc378)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc44)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc44)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc376)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc46)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc46)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc377)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc51)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc53)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
          cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc380)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc60)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc60)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc382)
            cir.if %60 {
              cir.break loc(#loc62)
            } loc(#loc383)
          } loc(#loc381)
          %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc384)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc65)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc385)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc386)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc70)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc70)
          %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc387)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc73)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc73)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc388)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc77)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc77)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc78)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc389)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc391)
            %59 = cir.const #cir.int<16> : !u64i loc(#loc392)
            %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc392)
            %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc89)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc90)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc90)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc393)
            cir.if %64 {
              cir.break loc(#loc92)
            } loc(#loc394)
          } loc(#loc390)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            %58 = cir.const #cir.int<5> : !s32i loc(#loc96)
            %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc97)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc98)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc98)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc396)
            cir.if %62 {
              cir.break loc(#loc100)
            } loc(#loc397)
          } loc(#loc395)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc102)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc103)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc104)
          cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc398)
          cir.scope {
            %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc110)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc400)
            cir.if %60 {
              cir.break loc(#loc112)
            } loc(#loc401)
          } loc(#loc399)
          %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
          %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
          %37 = cir.const #cir.int<3> : !s32i loc(#loc115)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc115)
          %39 = cir.const #cir.int<4> : !u64i loc(#loc115)
          %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc115)
          %41 = cir.const #cir.int<2> : !s32i loc(#loc115)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc115)
          %43 = cir.binop(add, %40, %42) : !u64i loc(#loc115)
          %44 = cir.const #cir.int<1> : !s32i loc(#loc116)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc116)
          %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc402)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc117)
          %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc118)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc118)
          cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc403)
          cir.scope {
            %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc124)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc124)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc405)
            %61 = cir.ternary(%60, true {
              %62 = cir.const #true loc(#loc125)
              cir.yield %62 : !cir.bool loc(#loc125)
            }, false {
              %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
              %63 = cir.const #cir.int<0> : !s32i loc(#loc127)
              %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc406)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc125)
                cir.yield %66 : !cir.bool loc(#loc125)
              }, false {
                %66 = cir.const #false loc(#loc125)
                cir.yield %66 : !cir.bool loc(#loc125)
              }) : (!cir.bool) -> !cir.bool loc(#loc125)
              cir.yield %65 : !cir.bool loc(#loc125)
            }) : (!cir.bool) -> !cir.bool loc(#loc125)
            cir.if %61 {
              cir.break loc(#loc129)
            } loc(#loc407)
          } loc(#loc404)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc130)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc130)
          %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
          %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc132)
          cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc408)
          %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc133)
          %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc134)
          cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc409)
          cir.yield loc(#loc50)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc137)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc137)
          cir.condition(%13) loc(#loc137)
        } loc(#loc379)
      } loc(#loc379)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc141)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc411)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc144)
        } loc(#loc412)
      } loc(#loc410)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc148)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc148)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc414)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc151)
        } loc(#loc415)
      } loc(#loc413)
    } loc(#loc373)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.call @badSink(%2) : (!s32i) -> () loc(#loc153)
    cir.return loc(#loc32)
  } loc(#loc370)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_square_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc417)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc156)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc418)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc158)
    cir.return loc(#loc155)
  } loc(#loc416)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc419)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc420)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc421)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc169)
  cir.func @main(%arg0: !s32i loc(fused[#loc172, #loc173]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc174, #loc175])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc423)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc424)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc171)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc176)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc177)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc178)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc178)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc179)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc166)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc425)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_41_good() : () -> () loc(#loc181)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc167)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc183)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc168)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc184)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_listen_socket_square_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc426)
    cir.call @CWE190_Integer_Overflow__int_listen_socket_square_41_bad() : () -> () loc(#loc185)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc169)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc427)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc427)
    cir.return %17 : !s32i loc(#loc427)
  } loc(#loc422)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc191)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc194, #loc195])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc429)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc200)
      %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc200)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc200)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc200)
      %6 = cir.cmp(gt, %1, %5) : !s32i, !cir.bool loc(#loc431)
      %7 = cir.ternary(%6, true {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
        %9 = cir.abs %8 poison : !s32i loc(#loc203)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc203)
        %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc204)
        %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc205)
        %13 = cir.cast(int_to_float, %12 : !s32i), !cir.double loc(#loc205)
        %14 = cir.call @sqrt(%13) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc204)
        %15 = cir.cast(float_to_int, %14 : !cir.double), !s64i loc(#loc204)
        %16 = cir.cmp(lt, %10, %15) : !s64i, !cir.bool loc(#loc432)
        %17 = cir.ternary(%16, true {
          %18 = cir.const #true loc(#loc201)
          cir.yield %18 : !cir.bool loc(#loc201)
        }, false {
          %18 = cir.const #false loc(#loc201)
          cir.yield %18 : !cir.bool loc(#loc201)
        }) : (!cir.bool) -> !cir.bool loc(#loc201)
        cir.yield %17 : !cir.bool loc(#loc201)
      }, false {
        %8 = cir.const #false loc(#loc201)
        cir.yield %8 : !cir.bool loc(#loc201)
      }) : (!cir.bool) -> !cir.bool loc(#loc201)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc434)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc212)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc212)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc434)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc213)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc214)
      } else {
        %8 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc191)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc191)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc215)
      } loc(#loc433)
    } loc(#loc430)
    cir.return loc(#loc193)
  } loc(#loc428)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc436)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc220)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc437)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc439)
      %4 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc440)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc441)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc442)
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc443)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc229)
      %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc229)
      cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc441)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc231)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc231)
      cir.store %11, %6 : !s32i, !cir.ptr<!s32i> loc(#loc442)
      cir.scope {
        cir.do {
          %12 = cir.const #cir.int<2> : !s32i loc(#loc236)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc237)
          %14 = cir.const #cir.int<6> : !s32i loc(#loc238)
          %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc239)
          cir.store %15, %5 : !s32i, !cir.ptr<!s32i> loc(#loc445)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc244)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc245)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc245)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc447)
            cir.if %60 {
              cir.break loc(#loc247)
            } loc(#loc448)
          } loc(#loc446)
          %16 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc449)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc250)
          %18 = cir.const #cir.int<16> : !u64i loc(#loc450)
          cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc451)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc255)
          %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc255)
          %21 = cir.get_member %4[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
          cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc452)
          %22 = cir.const #cir.int<0> : !s32i loc(#loc257)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc257)
          %24 = cir.get_member %4[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
          %25 = cir.get_member %24[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
          cir.store %23, %25 : !u32i, !cir.ptr<!u32i> loc(#loc453)
          %26 = cir.const #cir.int<27015> : !s32i loc(#loc259)
          %27 = cir.cast(integral, %26 : !s32i), !u16i loc(#loc259)
          %28 = cir.call @htons(%27) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc260)
          %29 = cir.get_member %4[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
          cir.store %28, %29 : !u16i, !cir.ptr<!u16i> loc(#loc454)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %58 = cir.cast(bitcast, %4 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc456)
            %59 = cir.const #cir.int<16> : !u64i loc(#loc457)
            %60 = cir.cast(integral, %59 : !u64i), !u32i loc(#loc457)
            %61 = cir.call @bind(%57, %58, %60) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc270)
            %62 = cir.const #cir.int<1> : !s32i loc(#loc271)
            %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc271)
            %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc458)
            cir.if %64 {
              cir.break loc(#loc273)
            } loc(#loc459)
          } loc(#loc455)
          cir.scope {
            %57 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc276)
            %58 = cir.const #cir.int<5> : !s32i loc(#loc277)
            %59 = cir.call @listen(%57, %58) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc278)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc279)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc279)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc461)
            cir.if %62 {
              cir.break loc(#loc281)
            } loc(#loc462)
          } loc(#loc460)
          %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc282)
          %31 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc283)
          %32 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc284)
          %33 = cir.call @accept(%30, %31, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc285)
          cir.store %33, %6 : !s32i, !cir.ptr<!s32i> loc(#loc463)
          cir.scope {
            %57 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc290)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc291)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc291)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc465)
            cir.if %60 {
              cir.break loc(#loc293)
            } loc(#loc466)
          } loc(#loc464)
          %34 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc294)
          %35 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc295)
          %36 = cir.cast(bitcast, %35 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc295)
          %37 = cir.const #cir.int<3> : !s32i loc(#loc296)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc296)
          %39 = cir.const #cir.int<4> : !u64i loc(#loc296)
          %40 = cir.binop(mul, %38, %39) : !u64i loc(#loc296)
          %41 = cir.const #cir.int<2> : !s32i loc(#loc296)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc296)
          %43 = cir.binop(add, %40, %42) : !u64i loc(#loc296)
          %44 = cir.const #cir.int<1> : !s32i loc(#loc297)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc297)
          %46 = cir.binop(sub, %43, %45) : !u64i loc(#loc467)
          %47 = cir.const #cir.int<0> : !s32i loc(#loc298)
          %48 = cir.call @recv(%34, %36, %46, %47) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc299)
          %49 = cir.cast(integral, %48 : !s64i), !s32i loc(#loc299)
          cir.store %49, %3 : !s32i, !cir.ptr<!s32i> loc(#loc468)
          cir.scope {
            %57 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc304)
            %58 = cir.const #cir.int<1> : !s32i loc(#loc305)
            %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc305)
            %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc470)
            %61 = cir.ternary(%60, true {
              %62 = cir.const #true loc(#loc306)
              cir.yield %62 : !cir.bool loc(#loc306)
            }, false {
              %62 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc307)
              %63 = cir.const #cir.int<0> : !s32i loc(#loc308)
              %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc471)
              %65 = cir.ternary(%64, true {
                %66 = cir.const #true loc(#loc306)
                cir.yield %66 : !cir.bool loc(#loc306)
              }, false {
                %66 = cir.const #false loc(#loc306)
                cir.yield %66 : !cir.bool loc(#loc306)
              }) : (!cir.bool) -> !cir.bool loc(#loc306)
              cir.yield %65 : !cir.bool loc(#loc306)
            }) : (!cir.bool) -> !cir.bool loc(#loc306)
            cir.if %61 {
              cir.break loc(#loc310)
            } loc(#loc472)
          } loc(#loc469)
          %50 = cir.const #cir.int<0> : !s32i loc(#loc311)
          %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc311)
          %52 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc312)
          %53 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc313)
          %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc313)
          cir.store %51, %54 : !s8i, !cir.ptr<!s8i> loc(#loc473)
          %55 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc314)
          %56 = cir.call @atoi(%55) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc315)
          cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc474)
          cir.yield loc(#loc235)
        } while {
          %12 = cir.const #cir.int<0> : !s32i loc(#loc318)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc318)
          cir.condition(%13) loc(#loc318)
        } loc(#loc444)
      } loc(#loc444)
      cir.scope {
        %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc321)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc322)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc322)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc476)
        cir.if %15 {
          %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc324)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc325)
        } loc(#loc477)
      } loc(#loc475)
      cir.scope {
        %12 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc328)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc329)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc329)
        %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc479)
        cir.if %15 {
          %16 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc331)
          %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc332)
        } loc(#loc480)
      } loc(#loc478)
    } loc(#loc438)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc333)
    cir.call @goodB2GSink(%2) : (!s32i) -> () loc(#loc334)
    cir.return loc(#loc217)
  } loc(#loc435)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc337, #loc338])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc482)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc484)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc344)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc343)
      %4 = cir.binop(mul, %2, %3) nsw : !s32i loc(#loc344)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc484)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc345)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc346)
    } loc(#loc483)
    cir.return loc(#loc336)
  } loc(#loc481)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc486)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc351)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc487)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc353)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc488)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc355)
    cir.call @goodG2BSink(%3) : (!s32i) -> () loc(#loc356)
    cir.return loc(#loc348)
  } loc(#loc485)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_square_41.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":46:1)
#loc20 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":53:1)
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":47:1)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":48:5)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":52:5)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":50:9)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":50:29)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":50:22)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":51:22)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":51:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":55:1)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":130:1)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":57:5)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":57:9)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":59:12)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":59:5)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":60:5)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":128:5)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":65:9)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":65:13)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":66:9)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":66:28)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":67:9)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":67:31)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":68:9)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":68:31)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":69:9)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":69:41)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":70:9)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":113:17)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:35)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:44)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:57)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:28)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:13)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":80:68)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":81:13)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":84:13)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":81:17)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":81:33)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":82:13)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":83:17)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:20)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:21)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:30)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:33)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:47)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:13)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":85:48)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":86:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":86:13)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":87:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":87:13)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":88:38)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":88:32)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":88:13)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":88:46)
#loc82 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:13)
#loc83 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":92:13)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:22)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:54)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:55)
#loc87 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:64)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:78)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:17)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":89:84)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":90:13)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":91:17)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":93:13)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":96:13)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":93:24)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":93:38)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":93:17)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":93:57)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":94:13)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":95:17)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:35)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:49)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:55)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:28)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:13)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":97:59)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":98:13)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":101:13)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":98:17)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":98:33)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":99:13)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":100:17)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:31)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:45)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:58)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:76)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:79)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:26)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:13)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":103:80)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":107:13)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:17)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:31)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:44)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:47)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":104:61)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":105:13)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":106:17)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":109:39)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":109:25)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":109:13)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":111:25)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":111:20)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":111:13)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":111:36)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":113:16)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":114:9)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":117:9)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":114:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":114:29)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":115:9)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":116:26)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":116:13)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":118:9)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":121:9)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":118:13)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":118:29)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":119:9)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":120:26)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":120:13)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":129:13)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":129:5)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":248:1)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":252:1)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":250:5)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":250:13)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":251:5)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":251:13)
#loc160 = loc("/usr/include/stdlib.h":575:1)
#loc161 = loc("/usr/include/stdlib.h":575:41)
#loc162 = loc("/usr/include/time.h":76:1)
#loc163 = loc("/usr/include/time.h":76:38)
#loc164 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc165 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":268:15)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":270:15)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":273:15)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":275:15)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":263:1)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":278:1)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":264:1)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":266:27)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":266:22)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":266:5)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":268:5)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":269:5)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":269:63)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":270:5)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":273:5)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":274:5)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":274:62)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":275:5)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":277:12)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":277:5)
#loc190 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":167:19)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":157:1)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":169:1)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":158:1)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:5)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":168:5)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:9)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:16)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:24)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:31)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:27)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:45)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:58)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":160:65)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":161:5)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":164:5)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":166:5)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":162:9)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":162:29)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":162:22)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":163:22)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":163:9)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":167:9)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":171:1)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":246:1)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":173:5)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":173:9)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":175:12)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":175:5)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":176:5)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":244:5)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":181:9)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":181:13)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":182:9)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":182:28)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":183:9)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":183:31)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":184:9)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":184:31)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":185:9)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":185:41)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":186:9)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":229:17)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:35)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:44)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:57)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:28)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:13)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":196:68)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":197:13)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":200:13)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":197:17)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":197:33)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":198:13)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":199:17)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:20)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:21)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:30)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:33)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:47)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:13)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":201:48)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":202:34)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":202:13)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":203:39)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":203:13)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":204:38)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":204:32)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":204:13)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":204:46)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:13)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":208:13)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:22)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:54)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:55)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:64)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:78)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:17)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":205:84)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":206:13)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":207:17)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":209:13)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":212:13)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":209:24)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":209:38)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":209:17)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":209:57)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":210:13)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":211:17)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:35)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:49)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:55)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:28)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:13)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":213:59)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":214:13)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":217:13)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":214:17)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":214:33)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":215:13)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":216:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:31)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:45)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:58)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:76)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:79)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:26)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:13)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":219:80)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:13)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":223:13)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:17)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:31)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:44)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:47)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":220:61)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":221:13)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":222:17)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":225:39)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":225:25)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":225:13)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":227:25)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":227:20)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":227:13)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":227:36)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":229:16)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":230:9)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":233:9)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":230:13)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":230:29)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":231:9)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":232:26)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":232:13)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":234:9)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":237:9)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":234:13)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":234:29)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":235:9)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":236:26)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":236:13)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":245:17)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":245:5)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":137:1)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":144:1)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":138:1)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":139:5)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":143:5)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":141:9)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":141:29)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":141:22)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":142:22)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":142:9)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":146:1)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":154:1)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":148:5)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":148:9)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":150:12)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":150:5)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":152:12)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":152:5)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":153:17)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_square_41.c":153:5)
#loc357 = loc(fused[#loc1, #loc2])
#loc358 = loc(fused[#loc3, #loc4])
#loc359 = loc(fused[#loc5, #loc6])
#loc360 = loc(fused[#loc7, #loc8])
#loc361 = loc(fused[#loc9, #loc10])
#loc362 = loc(fused[#loc11, #loc12])
#loc363 = loc(fused[#loc13, #loc14])
#loc364 = loc(fused[#loc15, #loc16])
#loc365 = loc(fused[#loc17, #loc18])
#loc366 = loc(fused[#loc19, #loc20])
#loc368 = loc(fused[#loc24, #loc25])
#loc369 = loc(fused[#loc26, #loc27])
#loc370 = loc(fused[#loc31, #loc32])
#loc371 = loc(fused[#loc33, #loc34])
#loc372 = loc(fused[#loc36, #loc35])
#loc373 = loc(fused[#loc37, #loc38])
#loc374 = loc(fused[#loc39, #loc40])
#loc375 = loc(fused[#loc41, #loc42])
#loc376 = loc(fused[#loc43, #loc44])
#loc377 = loc(fused[#loc45, #loc46])
#loc378 = loc(fused[#loc47, #loc48])
#loc379 = loc(fused[#loc49, #loc50])
#loc380 = loc(fused[#loc55, #loc56])
#loc381 = loc(fused[#loc57, #loc58])
#loc382 = loc(fused[#loc59, #loc60])
#loc383 = loc(fused[#loc61, #loc58])
#loc384 = loc(fused[#loc63, #loc64])
#loc385 = loc(fused[#loc66, #loc67])
#loc386 = loc(fused[#loc68, #loc69])
#loc387 = loc(fused[#loc72, #loc70])
#loc388 = loc(fused[#loc76, #loc73])
#loc389 = loc(fused[#loc80, #loc81])
#loc390 = loc(fused[#loc82, #loc83])
#loc391 = loc(fused[#loc85, #loc86])
#loc392 = loc(fused[#loc87, #loc88])
#loc393 = loc(fused[#loc89, #loc90])
#loc394 = loc(fused[#loc91, #loc83])
#loc395 = loc(fused[#loc93, #loc94])
#loc396 = loc(fused[#loc97, #loc98])
#loc397 = loc(fused[#loc99, #loc94])
#loc398 = loc(fused[#loc105, #loc106])
#loc399 = loc(fused[#loc107, #loc108])
#loc400 = loc(fused[#loc109, #loc110])
#loc401 = loc(fused[#loc111, #loc108])
#loc402 = loc(fused[#loc115, #loc116])
#loc403 = loc(fused[#loc119, #loc120])
#loc404 = loc(fused[#loc121, #loc122])
#loc405 = loc(fused[#loc123, #loc124])
#loc406 = loc(fused[#loc126, #loc127])
#loc407 = loc(fused[#loc128, #loc122])
#loc408 = loc(fused[#loc132, #loc130])
#loc409 = loc(fused[#loc135, #loc136])
#loc410 = loc(fused[#loc138, #loc139])
#loc411 = loc(fused[#loc140, #loc141])
#loc412 = loc(fused[#loc142, #loc139])
#loc413 = loc(fused[#loc145, #loc146])
#loc414 = loc(fused[#loc147, #loc148])
#loc415 = loc(fused[#loc149, #loc146])
#loc416 = loc(fused[#loc154, #loc155])
#loc417 = loc(fused[#loc156, #loc157])
#loc418 = loc(fused[#loc158, #loc159])
#loc419 = loc(fused[#loc160, #loc161])
#loc420 = loc(fused[#loc162, #loc163])
#loc421 = loc(fused[#loc164, #loc165])
#loc422 = loc(fused[#loc170, #loc171])
#loc425 = loc(fused[#loc181, #loc182])
#loc426 = loc(fused[#loc185, #loc186])
#loc427 = loc(fused[#loc189, #loc188])
#loc428 = loc(fused[#loc192, #loc193])
#loc430 = loc(fused[#loc197, #loc198])
#loc431 = loc(fused[#loc199, #loc200])
#loc432 = loc(fused[#loc203, #loc206])
#loc433 = loc(fused[#loc207, #loc208, #loc209, #loc198])
#loc434 = loc(fused[#loc210, #loc211])
#loc435 = loc(fused[#loc216, #loc217])
#loc436 = loc(fused[#loc218, #loc219])
#loc437 = loc(fused[#loc221, #loc220])
#loc438 = loc(fused[#loc222, #loc223])
#loc439 = loc(fused[#loc224, #loc225])
#loc440 = loc(fused[#loc226, #loc227])
#loc441 = loc(fused[#loc228, #loc229])
#loc442 = loc(fused[#loc230, #loc231])
#loc443 = loc(fused[#loc232, #loc233])
#loc444 = loc(fused[#loc234, #loc235])
#loc445 = loc(fused[#loc240, #loc241])
#loc446 = loc(fused[#loc242, #loc243])
#loc447 = loc(fused[#loc244, #loc245])
#loc448 = loc(fused[#loc246, #loc243])
#loc449 = loc(fused[#loc248, #loc249])
#loc450 = loc(fused[#loc251, #loc252])
#loc451 = loc(fused[#loc253, #loc254])
#loc452 = loc(fused[#loc256, #loc255])
#loc453 = loc(fused[#loc258, #loc257])
#loc454 = loc(fused[#loc261, #loc262])
#loc455 = loc(fused[#loc263, #loc264])
#loc456 = loc(fused[#loc266, #loc267])
#loc457 = loc(fused[#loc268, #loc269])
#loc458 = loc(fused[#loc270, #loc271])
#loc459 = loc(fused[#loc272, #loc264])
#loc460 = loc(fused[#loc274, #loc275])
#loc461 = loc(fused[#loc278, #loc279])
#loc462 = loc(fused[#loc280, #loc275])
#loc463 = loc(fused[#loc286, #loc287])
#loc464 = loc(fused[#loc288, #loc289])
#loc465 = loc(fused[#loc290, #loc291])
#loc466 = loc(fused[#loc292, #loc289])
#loc467 = loc(fused[#loc296, #loc297])
#loc468 = loc(fused[#loc300, #loc301])
#loc469 = loc(fused[#loc302, #loc303])
#loc470 = loc(fused[#loc304, #loc305])
#loc471 = loc(fused[#loc307, #loc308])
#loc472 = loc(fused[#loc309, #loc303])
#loc473 = loc(fused[#loc313, #loc311])
#loc474 = loc(fused[#loc316, #loc317])
#loc475 = loc(fused[#loc319, #loc320])
#loc476 = loc(fused[#loc321, #loc322])
#loc477 = loc(fused[#loc323, #loc320])
#loc478 = loc(fused[#loc326, #loc327])
#loc479 = loc(fused[#loc328, #loc329])
#loc480 = loc(fused[#loc330, #loc327])
#loc481 = loc(fused[#loc335, #loc336])
#loc483 = loc(fused[#loc340, #loc341])
#loc484 = loc(fused[#loc342, #loc343])
#loc485 = loc(fused[#loc347, #loc348])
#loc486 = loc(fused[#loc349, #loc350])
#loc487 = loc(fused[#loc352, #loc351])
#loc488 = loc(fused[#loc354, #loc353])
