!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":22:22)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":22:26)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":62:26)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":62:30)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":44:26)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":44:30)
#loc93 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc70, #loc71])
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc91)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      cir.yield %21 : !u32i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc8)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc8)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc8)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc8)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc8)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc8)
      cir.yield %25 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc8)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.return %9 : !s32i loc(#loc95)
  } loc(#loc92)
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc19)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc22)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %7 = cir.binop(div, %5, %6) : !s32i loc(#loc101)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc27)
    cir.return loc(#loc15)
  } loc(#loc97)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc102)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc36, #loc37])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc35)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc39)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc39)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc39)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc39)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc39)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc39)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc39)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc39)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc39)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc39)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc39)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc39)
      cir.yield %21 : !u32i loc(#loc39)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc39)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc39)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc39)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc39)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc39)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc39)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc39)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc39)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc39)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc39)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc39)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc39)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc39)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc39)
      cir.yield %25 : !u32i loc(#loc39)
    }) : (!cir.bool) -> !u32i loc(#loc39)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc39)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.return %9 : !s32i loc(#loc108)
  } loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc54)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc115)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc64)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
        %10 = cir.binop(div, %8, %9) : !s32i loc(#loc117)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc66)
      } else {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc45)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } loc(#loc116)
    } loc(#loc114)
    cir.return loc(#loc47)
  } loc(#loc110)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc73)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.return %4 : !s32i loc(#loc121)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc82)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc85)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %7 = cir.binop(div, %5, %6) : !s32i loc(#loc126)
    cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc90)
    cir.return loc(#loc78)
  } loc(#loc122)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":27:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":23:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":25:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":25:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":26:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":29:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":37:1)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":31:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":31:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":33:13)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":33:12)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":33:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":34:22)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":34:12)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":34:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":34:26)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":36:18)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":36:24)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":36:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":86:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":90:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":88:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":88:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":89:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":89:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":62:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":67:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":63:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":65:12)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":65:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":66:12)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":66:5)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":82:19)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":69:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":84:1)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":71:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":71:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":73:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":73:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":73:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":74:26)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":74:12)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":74:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":74:30)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":76:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":83:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":76:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":76:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":77:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":79:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":81:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":78:22)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":78:28)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":78:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":82:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":44:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":49:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":45:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":47:12)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":47:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":48:12)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":48:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":51:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":59:1)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":53:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":53:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":55:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":55:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":55:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":56:26)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":56:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":56:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":56:30)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":58:18)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":58:24)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_42.c":58:5)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc9, #loc8])
#loc95 = loc(fused[#loc11, #loc10])
#loc96 = loc(fused[#loc12, #loc13])
#loc97 = loc(fused[#loc14, #loc15])
#loc98 = loc(fused[#loc16, #loc17])
#loc99 = loc(fused[#loc20, #loc18])
#loc100 = loc(fused[#loc23, #loc24])
#loc101 = loc(fused[#loc25, #loc26])
#loc102 = loc(fused[#loc28, #loc29])
#loc103 = loc(fused[#loc30, #loc31])
#loc104 = loc(fused[#loc32, #loc33])
#loc105 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc40, #loc39])
#loc108 = loc(fused[#loc42, #loc41])
#loc109 = loc(fused[#loc43, #loc44])
#loc110 = loc(fused[#loc46, #loc47])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc52, #loc50])
#loc113 = loc(fused[#loc55, #loc56])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc60])
#loc116 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc117 = loc(fused[#loc64, #loc65])
#loc118 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc74, #loc73])
#loc121 = loc(fused[#loc76, #loc75])
#loc122 = loc(fused[#loc77, #loc78])
#loc123 = loc(fused[#loc79, #loc80])
#loc124 = loc(fused[#loc83, #loc81])
#loc125 = loc(fused[#loc86, #loc87])
#loc126 = loc(fused[#loc88, #loc89])
