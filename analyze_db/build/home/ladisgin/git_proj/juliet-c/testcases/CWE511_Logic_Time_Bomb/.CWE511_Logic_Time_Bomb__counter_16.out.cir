!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_16.c":90:10)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_16.c":90:14)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_16.c":90:20)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_16.c":90:32)
#loc102 = loc(fused[#loc43, #loc44])
#loc103 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
        cir.condition(%1) loc(#loc8)
      } do {
        cir.scope {
          %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc89)
          %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
          cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
          cir.scope {
            cir.do {
              cir.scope {
                %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
                %5 = cir.const #cir.int<20000> : !s32i loc(#loc18)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc92)
                cir.if %6 {
                  %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc3)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc3)
                  %9 = cir.call @unlink(%8) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc20)
                } loc(#loc93)
              } loc(#loc91)
              %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
              %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc22)
              cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
              cir.yield loc(#loc14)
            } while {
              %2 = cir.const #cir.int<1> : !s32i loc(#loc23)
              %3 = cir.const #cir.int<1> : !s32i loc(#loc24)
              %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc95)
              cir.condition(%4) loc(#loc25)
            } loc(#loc90)
          } loc(#loc90)
        } loc(#loc88)
        cir.break loc(#loc26)
      } loc(#loc87)
    } loc(#loc87)
    cir.return loc(#loc5)
  } loc(#loc86)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc96)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc98)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call @CWE511_Logic_Time_Bomb__counter_16_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call @CWE511_Logic_Time_Bomb__counter_16_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    cir.return %17 : !s32i loc(#loc106)
  } loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc66)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc66)
        cir.condition(%1) loc(#loc66)
      } do {
        cir.scope {
          %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc110)
          %1 = cir.const #cir.int<0> : !s32i loc(#loc70)
          cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
          cir.scope {
            cir.do {
              cir.scope {
                %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
                %5 = cir.const #cir.int<20000> : !s32i loc(#loc76)
                %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc113)
                cir.if %6 {
                  %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
                  %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
                  cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc78)
                } loc(#loc114)
              } loc(#loc112)
              %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
              %3 = cir.unary(inc, %2) : !s32i, !s32i loc(#loc80)
              cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
              cir.yield loc(#loc72)
            } while {
              %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc116)
              cir.condition(%4) loc(#loc83)
            } loc(#loc111)
          } loc(#loc111)
        } loc(#loc109)
        cir.break loc(#loc84)
      } loc(#loc108)
    } loc(#loc108)
    cir.return loc(#loc63)
  } loc(#loc107)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_16.c":0:0)
#loc1 = loc("/usr/include/unistd.h":858:1)
#loc2 = loc("/usr/include/unistd.h":858:48)
#loc3 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:28)
#loc4 = loc("CWE511_Logic_Time_Bomb__counter_16.c":29:1)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_16.c":48:1)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:5)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_16.c":47:5)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_16.c":31:11)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_16.c":33:9)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_16.c":45:9)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:13)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_16.c":34:25)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_16.c":35:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:25)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:17)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_16.c":41:17)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:21)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_16.c":38:30)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_16.c":39:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_16.c":40:21)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:22)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_16.c":42:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:19)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:24)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_16.c":44:21)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_16.c":46:9)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_16.c":76:1)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_16.c":79:1)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:5)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_16.c":78:11)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_16.c":95:15)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_16.c":97:15)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_16.c":100:15)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_16.c":102:15)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_16.c":90:1)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_16.c":105:1)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_16.c":91:1)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_16.c":93:27)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_16.c":93:22)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_16.c":93:5)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_16.c":95:5)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_16.c":96:5)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_16.c":96:45)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_16.c":97:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_16.c":100:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_16.c":101:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_16.c":101:44)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_16.c":102:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_16.c":104:12)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_16.c":104:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:31)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_16.c":55:1)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_16.c":74:1)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:5)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_16.c":73:5)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_16.c":57:11)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_16.c":59:9)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_16.c":71:9)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:13)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_16.c":60:25)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_16.c":61:13)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:25)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:17)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_16.c":67:17)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:21)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_16.c":64:30)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_16.c":65:17)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_16.c":66:21)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:22)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_16.c":68:17)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:19)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:24)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_16.c":70:21)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_16.c":72:9)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc4, #loc5])
#loc87 = loc(fused[#loc6, #loc7])
#loc88 = loc(fused[#loc9, #loc10])
#loc89 = loc(fused[#loc11, #loc12])
#loc90 = loc(fused[#loc13, #loc14])
#loc91 = loc(fused[#loc15, #loc16])
#loc92 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc19, #loc16])
#loc94 = loc(fused[#loc22, #loc21])
#loc95 = loc(fused[#loc23, #loc24])
#loc96 = loc(fused[#loc27, #loc28])
#loc97 = loc(fused[#loc29, #loc30])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc33, #loc34])
#loc100 = loc(fused[#loc35, #loc36])
#loc101 = loc(fused[#loc41, #loc42])
#loc104 = loc(fused[#loc52, #loc53])
#loc105 = loc(fused[#loc56, #loc57])
#loc106 = loc(fused[#loc60, #loc59])
#loc107 = loc(fused[#loc62, #loc63])
#loc108 = loc(fused[#loc64, #loc65])
#loc109 = loc(fused[#loc67, #loc68])
#loc110 = loc(fused[#loc69, #loc70])
#loc111 = loc(fused[#loc71, #loc72])
#loc112 = loc(fused[#loc73, #loc74])
#loc113 = loc(fused[#loc75, #loc76])
#loc114 = loc(fused[#loc77, #loc74])
#loc115 = loc(fused[#loc80, #loc79])
#loc116 = loc(fused[#loc81, #loc82])
