!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc106)
  cir.func private @printIntLine(!s32i) loc(#loc107)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_163badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
        cir.condition(%4) loc(#loc14)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
          %4 = cir.const #cir.int<2> : !s32i loc(#loc17)
          %5 = cir.binop(div, %3, %4) : !s32i loc(#loc113)
          %6 = cir.const #cir.int<2> : !s32i loc(#loc18)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc113)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
          cir.break loc(#loc20)
        } loc(#loc112)
        cir.yield loc(#loc13)
      } loc(#loc111)
    } loc(#loc111)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc116)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc117)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc118)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc28)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc119)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc120)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc121)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc33)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc122)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc39)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc125)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc41)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc42)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc126)
          cir.condition(%24) loc(#loc126)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc44)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc47)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          } loc(#loc127)
          cir.yield loc(#loc38)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc48)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc49)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc129)
          cir.yield loc(#loc124)
        } loc(#loc124)
      } loc(#loc124)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc51)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc52)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc53)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      cir.delete.array %18 : <!s32i> loc(#loc54)
    } loc(#loc115)
    cir.return loc(#loc6)
  } loc(#loc108)
  cir.func internal private @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc64)
        cir.condition(%4) loc(#loc64)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<20> : !s32i loc(#loc66)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
          cir.break loc(#loc68)
        } loc(#loc134)
        cir.yield loc(#loc63)
      } loc(#loc133)
    } loc(#loc133)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc137)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc138)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc139)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc76)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc140)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc141)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc142)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc80)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc81)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc143)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc87)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc87)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc146)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc89)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc90)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc147)
          cir.condition(%24) loc(#loc147)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc92)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc94)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc95)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc149)
          } loc(#loc148)
          cir.yield loc(#loc86)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc96)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc97)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc150)
          cir.yield loc(#loc145)
        } loc(#loc145)
      } loc(#loc145)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc99)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc100)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc101)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
      cir.delete.array %18 : <!s32i> loc(#loc102)
    } loc(#loc136)
    cir.return loc(#loc56)
  } loc(#loc130)
  cir.func @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_164goodEv() extra(#fn_attr) {
    cir.call @_ZN56CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16L7goodG2BEv() : () -> () loc(#loc105)
    cir.return loc(#loc104)
  } loc(#loc151)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":0:0)
#loc1 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc2 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":50:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":26:5)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":26:9)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":28:13)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":28:12)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":28:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":29:5)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":36:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":29:11)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":30:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":32:16)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":32:26)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":32:30)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":32:9)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":35:9)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":37:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":49:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":38:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":38:16)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":38:26)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":39:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":39:14)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":41:21)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":41:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":41:38)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":41:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":42:37)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":24:6)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":42:28)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":42:46)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":42:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":46:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:18)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:14)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:21)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:33)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":44:9)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":45:29)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":45:13)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":45:24)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":45:25)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:40)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":43:39)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":47:22)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":47:33)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":47:34)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":47:9)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":48:19)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":57:1)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":81:1)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":59:5)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":59:9)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":61:13)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":61:12)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":61:5)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":62:5)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":67:5)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":62:11)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":63:5)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":65:16)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":65:9)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":66:9)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":68:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":80:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":69:9)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":69:16)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":69:26)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":70:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":70:14)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":72:21)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":72:28)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":72:38)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":72:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":73:37)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":57:13)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":73:28)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":73:46)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":73:9)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:9)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":77:9)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:18)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:14)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:21)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:33)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":75:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":76:29)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":76:13)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":76:24)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":76:25)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:40)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":74:39)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":78:22)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":78:33)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":78:34)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":78:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":79:19)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":83:1)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":86:1)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fixed_16.cpp":85:5)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc11, #loc9])
#loc111 = loc(fused[#loc12, #loc13])
#loc112 = loc(fused[#loc15, #loc13])
#loc113 = loc(fused[#loc16, #loc17])
#loc114 = loc(fused[#loc19, #loc18])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc23, #loc25])
#loc118 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc29, #loc30])
#loc120 = loc(fused[#loc28, #loc30])
#loc121 = loc(fused[#loc31, #loc30])
#loc122 = loc(fused[#loc34, #loc35])
#loc123 = loc(fused[#loc36, #loc35])
#loc124 = loc(fused[#loc37, #loc38])
#loc125 = loc(fused[#loc40, #loc39])
#loc126 = loc(fused[#loc41, #loc42])
#loc127 = loc(fused[#loc43, #loc38])
#loc128 = loc(fused[#loc45, #loc44])
#loc129 = loc(fused[#loc49, #loc48])
#loc130 = loc(fused[#loc55, #loc56])
#loc131 = loc(fused[#loc57, #loc58])
#loc132 = loc(fused[#loc61, #loc59])
#loc133 = loc(fused[#loc62, #loc63])
#loc134 = loc(fused[#loc65, #loc63])
#loc135 = loc(fused[#loc67, #loc66])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc71, #loc72])
#loc138 = loc(fused[#loc71, #loc73])
#loc139 = loc(fused[#loc74, #loc75])
#loc140 = loc(fused[#loc77, #loc78])
#loc141 = loc(fused[#loc76, #loc78])
#loc142 = loc(fused[#loc79, #loc78])
#loc143 = loc(fused[#loc82, #loc83])
#loc144 = loc(fused[#loc84, #loc83])
#loc145 = loc(fused[#loc85, #loc86])
#loc146 = loc(fused[#loc88, #loc87])
#loc147 = loc(fused[#loc89, #loc90])
#loc148 = loc(fused[#loc91, #loc86])
#loc149 = loc(fused[#loc93, #loc92])
#loc150 = loc(fused[#loc97, #loc96])
#loc151 = loc(fused[#loc103, #loc104])
