!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc195)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc11)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.scope {
      %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %11 = cir.call %10() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc15)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc15)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc18)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc19)
        %16 = cir.const #cir.int<100> : !s32i loc(#loc20)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc20)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc20)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc200)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc24)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
        %23 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc26)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc28)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc201)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc203)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc204)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc205)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc203)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc203)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc36)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc36)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc206)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc42)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc208)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc44)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc209)
          cir.condition(%29) loc(#loc46)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc48)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc51)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc52)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc211)
          } loc(#loc210)
          cir.yield loc(#loc41)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc54)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc212)
          cir.yield loc(#loc207)
        } loc(#loc207)
      } loc(#loc207)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc55)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc56)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc56)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc58)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc213)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    } loc(#loc202)
    cir.return loc(#loc6)
  } loc(#loc193)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc215)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc214)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc68)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    cir.return %2 : !s32i loc(#loc218)
  } loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc77)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc77)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc77)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc77)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc77)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc222)
    cir.scope {
      %10 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc224)
      %11 = cir.call %10() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc82)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc82)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc87)
      } else {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc89)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc90)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc91)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc90)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc90)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc226)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc94)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc94)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc96)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc96)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc98)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc227)
      } loc(#loc225)
    } loc(#loc223)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc229)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc230)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc231)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc229)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc229)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc106)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc106)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc232)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc112)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc112)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc234)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc114)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc115)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc235)
          cir.condition(%29) loc(#loc116)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc119)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc120)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc121)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc122)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc122)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc237)
          } loc(#loc236)
          cir.yield loc(#loc111)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc124)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc238)
          cir.yield loc(#loc233)
        } loc(#loc233)
      } loc(#loc233)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc125)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc125)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc126)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc126)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc128)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc128)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc239)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    } loc(#loc228)
    cir.return loc(#loc73)
  } loc(#loc219)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc133)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc241)
    cir.return %2 : !s32i loc(#loc241)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc140)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc140)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc140)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc140)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc140)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc245)
    cir.scope {
      %10 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc247)
      %11 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc145)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc145)
      cir.if %12 {
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc148)
        %15 = cir.const #cir.int<65> : !s32i loc(#loc149)
        %16 = cir.const #cir.int<50> : !s32i loc(#loc150)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc150)
        %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc150)
        cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc249)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc154)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc154)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
        %23 = cir.const #cir.int<50> : !s32i loc(#loc156)
        %24 = cir.const #cir.int<1> : !s32i loc(#loc157)
        %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc156)
        %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc158)
        cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc250)
      } loc(#loc248)
    } loc(#loc246)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc252)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc253)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc254)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc252)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc252)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc166)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc167)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc166)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc255)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc172)
        cir.store %26, %11 : !u64i, !cir.ptr<!u64i> loc(#loc257)
        cir.for : cond {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc174)
          %28 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc175)
          %29 = cir.cmp(lt, %27, %28) : !u64i, !cir.bool loc(#loc258)
          cir.condition(%29) loc(#loc176)
        } body {
          cir.scope {
            %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
            %28 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc179)
            %29 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %28 : !u64i), !cir.ptr<!s8i> loc(#loc180)
            %30 = cir.load %29 : !cir.ptr<!s8i>, !s8i loc(#loc178)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc181)
            %32 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc182)
            %33 = cir.ptr_stride(%32 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc182)
            cir.store %30, %33 : !s8i, !cir.ptr<!s8i> loc(#loc260)
          } loc(#loc259)
          cir.yield loc(#loc171)
        } step {
          %27 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc183)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc184)
          cir.store %28, %11 : !u64i, !cir.ptr<!u64i> loc(#loc261)
          cir.yield loc(#loc256)
        } loc(#loc256)
      } loc(#loc256)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc185)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc185)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc186)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc187)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc186)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc188)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc188)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc262)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    } loc(#loc251)
    cir.return loc(#loc136)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":37:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":60:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":39:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":39:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":40:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":40:33)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":41:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":41:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":42:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":47:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":42:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":42:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":43:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:22)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:27)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:31)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":45:32)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":46:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":46:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":46:14)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":46:18)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":46:19)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":48:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":59:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":49:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":49:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":50:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":50:16)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":50:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":51:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":51:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":51:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":51:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":56:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":54:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":55:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":55:28)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":55:29)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":55:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":55:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":53:34)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":57:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":57:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":57:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":57:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":58:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":58:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":123:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":127:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":125:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":125:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":126:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":126:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":25:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":28:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":27:12)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":27:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":75:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":67:1)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":95:1)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":69:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":69:12)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":70:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":70:33)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":71:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":71:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":72:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":82:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":72:8)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":72:27)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":73:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":76:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":78:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":75:9)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:16)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:22)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:27)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:30)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":80:31)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":81:22)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":81:9)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":81:14)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":81:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":81:18)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":83:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":94:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":84:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":84:25)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":85:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":85:16)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":85:19)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":86:19)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":86:26)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":86:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":86:30)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":91:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:14)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:21)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:25)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:23)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":89:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":90:23)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":90:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":90:29)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":90:18)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":90:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:35)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":88:34)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":92:22)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":92:14)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":92:17)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":92:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":93:19)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":93:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":30:1)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":33:1)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":32:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":32:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":98:1)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":121:1)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":100:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":100:12)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":101:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":101:33)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":102:12)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":102:5)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":103:5)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":108:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":103:8)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":103:26)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":104:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:16)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:22)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:27)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:30)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":106:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":107:22)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":107:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":107:14)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":107:17)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":107:18)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":109:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":120:5)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":110:9)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":110:25)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":111:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":111:16)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":111:19)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":112:19)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":112:26)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":112:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":112:30)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":117:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:18)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:14)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:21)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:25)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:23)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":115:9)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":116:23)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":116:28)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":116:29)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":116:18)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":116:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:35)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":114:34)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":118:22)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":118:14)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":118:17)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":118:9)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":119:19)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_08.c":119:9)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc12, #loc11])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc15, #loc16])
#loc199 = loc(fused[#loc17, #loc14])
#loc200 = loc(fused[#loc22, #loc23])
#loc201 = loc(fused[#loc25, #loc24])
#loc202 = loc(fused[#loc29, #loc30])
#loc203 = loc(fused[#loc31, #loc32])
#loc204 = loc(fused[#loc33, #loc34])
#loc205 = loc(fused[#loc33, #loc35])
#loc206 = loc(fused[#loc38, #loc39])
#loc207 = loc(fused[#loc40, #loc41])
#loc208 = loc(fused[#loc43, #loc42])
#loc209 = loc(fused[#loc44, #loc45])
#loc210 = loc(fused[#loc47, #loc41])
#loc211 = loc(fused[#loc52, #loc50])
#loc212 = loc(fused[#loc54, #loc53])
#loc213 = loc(fused[#loc58, #loc55])
#loc214 = loc(fused[#loc61, #loc62])
#loc215 = loc(fused[#loc63, #loc64])
#loc216 = loc(fused[#loc65, #loc66])
#loc217 = loc(fused[#loc67, #loc68])
#loc218 = loc(fused[#loc70, #loc69])
#loc219 = loc(fused[#loc72, #loc73])
#loc220 = loc(fused[#loc74, #loc75])
#loc221 = loc(fused[#loc76, #loc77])
#loc222 = loc(fused[#loc79, #loc78])
#loc223 = loc(fused[#loc80, #loc81])
#loc224 = loc(fused[#loc82, #loc83])
#loc225 = loc(fused[#loc84, #loc85, #loc86, #loc81])
#loc226 = loc(fused[#loc92, #loc93])
#loc227 = loc(fused[#loc95, #loc94])
#loc228 = loc(fused[#loc99, #loc100])
#loc229 = loc(fused[#loc101, #loc102])
#loc230 = loc(fused[#loc103, #loc104])
#loc231 = loc(fused[#loc103, #loc105])
#loc232 = loc(fused[#loc108, #loc109])
#loc233 = loc(fused[#loc110, #loc111])
#loc234 = loc(fused[#loc113, #loc112])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc117, #loc111])
#loc237 = loc(fused[#loc122, #loc120])
#loc238 = loc(fused[#loc124, #loc123])
#loc239 = loc(fused[#loc128, #loc125])
#loc240 = loc(fused[#loc131, #loc132])
#loc241 = loc(fused[#loc134, #loc133])
#loc242 = loc(fused[#loc135, #loc136])
#loc243 = loc(fused[#loc137, #loc138])
#loc244 = loc(fused[#loc139, #loc140])
#loc245 = loc(fused[#loc142, #loc141])
#loc246 = loc(fused[#loc143, #loc144])
#loc247 = loc(fused[#loc145, #loc146])
#loc248 = loc(fused[#loc147, #loc144])
#loc249 = loc(fused[#loc152, #loc153])
#loc250 = loc(fused[#loc155, #loc154])
#loc251 = loc(fused[#loc159, #loc160])
#loc252 = loc(fused[#loc161, #loc162])
#loc253 = loc(fused[#loc163, #loc164])
#loc254 = loc(fused[#loc163, #loc165])
#loc255 = loc(fused[#loc168, #loc169])
#loc256 = loc(fused[#loc170, #loc171])
#loc257 = loc(fused[#loc173, #loc172])
#loc258 = loc(fused[#loc174, #loc175])
#loc259 = loc(fused[#loc177, #loc171])
#loc260 = loc(fused[#loc182, #loc180])
#loc261 = loc(fused[#loc184, #loc183])
#loc262 = loc(fused[#loc188, #loc185])
