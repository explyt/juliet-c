!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc186)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc188)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc190)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc15)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc15)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc15)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc15)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc191)
    cir.br ^bb1 loc(#loc192)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc193)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc194)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc23)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc24)
    %19 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc25)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc25)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc195)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc29)
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
    %26 = cir.const #cir.int<100> : !s32i loc(#loc31)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc31)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc33)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc196)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc197)
  ^bb5:  // pred: ^bb4
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc186)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc186)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc36)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc36)
    cir.store %33, %2 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    cir.br ^bb6 loc(#loc199)
  ^bb6:  // pred: ^bb5
    %34 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc42)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc200)
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc45)
    %38 = cir.cmp(lt, %36, %37) : !u64i, !cir.bool loc(#loc201)
    cir.brcond %38 ^bb8, ^bb12 loc(#loc46)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // pred: ^bb8
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc50)
    %42 = cir.load %41 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc52)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc52)
    cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc203)
    cir.br ^bb10 loc(#loc41)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc41)
  ^bb11:  // pred: ^bb10
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %47 = cir.unary(inc, %46) : !u64i, !u64i loc(#loc54)
    cir.store %47, %1 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb7 loc(#loc199)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc41)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc55)
    %50 = cir.const #cir.int<50> : !s32i loc(#loc56)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc56)
    %53 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc58)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc58)
    cir.store %49, %54 : !s8i, !cir.ptr<!s8i> loc(#loc205)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb14 loc(#loc35)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc6)
  } loc(#loc185)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc210)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc212)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc213)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc214)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc78)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc78)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc78)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc78)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc78)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc78)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb4 loc(#loc86)
  ^bb3:  // pred: ^bb1
    %18 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc89)
    %20 = cir.const #cir.int<65> : !s32i loc(#loc90)
    %21 = cir.const #cir.int<50> : !s32i loc(#loc91)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc91)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc91)
    cir.libc.memset %24 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc219)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc95)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc95)
    %27 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %28 = cir.const #cir.int<50> : !s32i loc(#loc97)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc97)
    %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc99)
    cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc220)
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc82)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc221)
  ^bb6:  // pred: ^bb5
    %32 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc210)
    cir.store %32, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc210)
    %33 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc102)
    %34 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
    %35 = cir.call @strlen(%34) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc102)
    cir.store %35, %2 : !u64i, !cir.ptr<!u64i> loc(#loc222)
    cir.br ^bb7 loc(#loc223)
  ^bb7:  // pred: ^bb6
    %36 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %37 = cir.cast(integral, %36 : !s32i), !u64i loc(#loc108)
    cir.store %37, %1 : !u64i, !cir.ptr<!u64i> loc(#loc224)
    cir.br ^bb8 loc(#loc223)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %38 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc110)
    %39 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc111)
    %40 = cir.cmp(lt, %38, %39) : !u64i, !cir.bool loc(#loc225)
    cir.brcond %40 ^bb9, ^bb13 loc(#loc112)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc226)
  ^bb10:  // pred: ^bb9
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %42 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc115)
    %43 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %42 : !u64i), !cir.ptr<!s8i> loc(#loc116)
    %44 = cir.load %43 : !cir.ptr<!s8i>, !s8i loc(#loc114)
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc117)
    %46 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc118)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc118)
    cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc227)
    cir.br ^bb11 loc(#loc107)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc107)
  ^bb12:  // pred: ^bb11
    %48 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc119)
    %49 = cir.unary(inc, %48) : !u64i, !u64i loc(#loc120)
    cir.store %49, %1 : !u64i, !cir.ptr<!u64i> loc(#loc228)
    cir.br ^bb8 loc(#loc223)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc107)
  ^bb14:  // pred: ^bb13
    %50 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc121)
    %52 = cir.const #cir.int<50> : !s32i loc(#loc122)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc122)
    %55 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc124)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc124)
    cir.store %51, %56 : !s8i, !cir.ptr<!s8i> loc(#loc229)
    %57 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb15 loc(#loc101)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc69)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc231)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc233)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc235)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc137)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc137)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc137)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc137)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc137)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc137)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc137)
    cir.store %11, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    cir.br ^bb1 loc(#loc237)
  ^bb1:  // pred: ^bb0
    %13 = cir.const #cir.int<5> : !s32i loc(#loc142)
    %14 = cir.const #cir.int<5> : !s32i loc(#loc143)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc238)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc239)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc145)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc146)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc147)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc147)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc147)
    cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc240)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc151)
    %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc151)
    %25 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc153)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc153)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc155)
    cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc241)
    cir.br ^bb3 loc(#loc141)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc141)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc242)
  ^bb5:  // pred: ^bb4
    %30 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc231)
    cir.store %30, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc231)
    %31 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc158)
    %32 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
    %33 = cir.call @strlen(%32) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc158)
    cir.store %33, %2 : !u64i, !cir.ptr<!u64i> loc(#loc243)
    cir.br ^bb6 loc(#loc244)
  ^bb6:  // pred: ^bb5
    %34 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc164)
    cir.store %35, %1 : !u64i, !cir.ptr<!u64i> loc(#loc245)
    cir.br ^bb7 loc(#loc244)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %36 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc166)
    %37 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc167)
    %38 = cir.cmp(lt, %36, %37) : !u64i, !cir.bool loc(#loc246)
    cir.brcond %38 ^bb8, ^bb12 loc(#loc168)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc247)
  ^bb9:  // pred: ^bb8
    %39 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc171)
    %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc172)
    %42 = cir.load %41 : !cir.ptr<!s8i>, !s8i loc(#loc170)
    %43 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc173)
    %44 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc174)
    %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc174)
    cir.store %42, %45 : !s8i, !cir.ptr<!s8i> loc(#loc248)
    cir.br ^bb10 loc(#loc163)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc163)
  ^bb11:  // pred: ^bb10
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc175)
    %47 = cir.unary(inc, %46) : !u64i, !u64i loc(#loc176)
    cir.store %47, %1 : !u64i, !cir.ptr<!u64i> loc(#loc249)
    cir.br ^bb7 loc(#loc244)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc163)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<0> : !s32i loc(#loc177)
    %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc177)
    %50 = cir.const #cir.int<50> : !s32i loc(#loc178)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %52 = cir.binop(sub, %50, %51) nsw : !s32i loc(#loc178)
    %53 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc180)
    %54 = cir.ptr_stride(%53 : !cir.ptr<!s8i>, %52 : !s32i), !cir.ptr<!s8i> loc(#loc180)
    cir.store %49, %54 : !s8i, !cir.ptr<!s8i> loc(#loc250)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    cir.br ^bb14 loc(#loc157)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc128)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":46:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":35:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":35:25)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":36:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":36:16)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":36:19)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":25:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":25:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":26:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":26:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":27:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":28:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":33:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":28:8)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":28:11)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":29:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:22)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:27)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:31)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":31:32)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":32:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":32:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":32:14)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":32:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":32:19)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":34:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":45:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":37:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":37:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":37:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":37:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:9)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":42:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:21)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:25)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:23)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":40:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":41:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":41:28)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":41:29)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":41:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":41:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":39:34)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":43:22)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":43:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":43:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":43:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":44:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":44:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":109:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":113:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":111:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":111:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":112:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":112:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":61:19)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":53:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":81:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":70:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":70:25)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":71:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":71:16)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":71:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":55:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":55:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":56:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":56:33)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":57:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":57:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":58:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":68:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":58:8)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":58:11)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":59:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":62:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":64:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":61:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:16)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:22)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:27)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:30)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":66:31)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":67:22)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":67:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":67:14)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":67:17)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":67:18)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":69:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":80:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":72:19)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":72:26)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":72:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":72:30)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":77:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:18)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:21)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:25)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:23)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":75:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":76:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":76:28)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":76:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":76:18)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":76:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:35)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":74:34)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":78:22)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":78:14)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":78:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":78:9)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":79:19)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":79:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":84:1)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":107:1)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":96:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":96:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":97:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":97:16)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":97:19)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":86:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":86:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":87:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":87:33)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":88:12)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":88:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":89:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":94:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":89:8)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":89:11)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":90:5)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:16)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:22)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:27)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:30)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":92:31)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":93:22)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":93:9)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":93:14)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":93:17)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":93:18)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":95:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":106:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":98:19)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":98:26)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":98:9)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":98:30)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":103:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:18)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:14)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:21)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:25)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:23)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":101:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":102:23)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":102:28)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":102:29)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":102:18)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":102:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:35)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":100:34)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":104:22)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":104:14)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":104:17)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":104:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":105:19)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_03.c":105:9)
#loc183 = loc(fused[#loc1, #loc2])
#loc184 = loc(fused[#loc3, #loc4])
#loc185 = loc(fused[#loc5, #loc6])
#loc186 = loc(fused[#loc7, #loc8])
#loc187 = loc(fused[#loc9, #loc10])
#loc188 = loc(fused[#loc9, #loc11])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc14, #loc15])
#loc191 = loc(fused[#loc17, #loc16])
#loc192 = loc(fused[#loc18, #loc19])
#loc193 = loc(fused[#loc20, #loc21])
#loc194 = loc(fused[#loc22, #loc19])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc30, #loc29])
#loc197 = loc(fused[#loc34, #loc35])
#loc198 = loc(fused[#loc38, #loc39])
#loc199 = loc(fused[#loc40, #loc41])
#loc200 = loc(fused[#loc43, #loc42])
#loc201 = loc(fused[#loc44, #loc45])
#loc202 = loc(fused[#loc47, #loc41])
#loc203 = loc(fused[#loc52, #loc50])
#loc204 = loc(fused[#loc54, #loc53])
#loc205 = loc(fused[#loc58, #loc55])
#loc206 = loc(fused[#loc61, #loc62])
#loc207 = loc(fused[#loc63, #loc64])
#loc208 = loc(fused[#loc65, #loc66])
#loc209 = loc(fused[#loc68, #loc69])
#loc210 = loc(fused[#loc70, #loc71])
#loc211 = loc(fused[#loc72, #loc73])
#loc212 = loc(fused[#loc72, #loc74])
#loc213 = loc(fused[#loc75, #loc76])
#loc214 = loc(fused[#loc77, #loc78])
#loc215 = loc(fused[#loc80, #loc79])
#loc216 = loc(fused[#loc81, #loc82])
#loc217 = loc(fused[#loc83, #loc84])
#loc218 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc219 = loc(fused[#loc93, #loc94])
#loc220 = loc(fused[#loc96, #loc95])
#loc221 = loc(fused[#loc100, #loc101])
#loc222 = loc(fused[#loc104, #loc105])
#loc223 = loc(fused[#loc106, #loc107])
#loc224 = loc(fused[#loc109, #loc108])
#loc225 = loc(fused[#loc110, #loc111])
#loc226 = loc(fused[#loc113, #loc107])
#loc227 = loc(fused[#loc118, #loc116])
#loc228 = loc(fused[#loc120, #loc119])
#loc229 = loc(fused[#loc124, #loc121])
#loc230 = loc(fused[#loc127, #loc128])
#loc231 = loc(fused[#loc129, #loc130])
#loc232 = loc(fused[#loc131, #loc132])
#loc233 = loc(fused[#loc131, #loc133])
#loc234 = loc(fused[#loc134, #loc135])
#loc235 = loc(fused[#loc136, #loc137])
#loc236 = loc(fused[#loc139, #loc138])
#loc237 = loc(fused[#loc140, #loc141])
#loc238 = loc(fused[#loc142, #loc143])
#loc239 = loc(fused[#loc144, #loc141])
#loc240 = loc(fused[#loc149, #loc150])
#loc241 = loc(fused[#loc152, #loc151])
#loc242 = loc(fused[#loc156, #loc157])
#loc243 = loc(fused[#loc160, #loc161])
#loc244 = loc(fused[#loc162, #loc163])
#loc245 = loc(fused[#loc165, #loc164])
#loc246 = loc(fused[#loc166, #loc167])
#loc247 = loc(fused[#loc169, #loc163])
#loc248 = loc(fused[#loc174, #loc172])
#loc249 = loc(fused[#loc176, #loc175])
#loc250 = loc(fused[#loc180, #loc177])
