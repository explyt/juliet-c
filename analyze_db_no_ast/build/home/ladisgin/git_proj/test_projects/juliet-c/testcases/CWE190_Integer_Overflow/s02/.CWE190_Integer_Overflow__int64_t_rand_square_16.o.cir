!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private  @printLongLongLine(!s64i) loc(#loc97)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%3) loc(#loc13)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc14)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
          cir.yield %29 : !u64i loc(#loc14)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc14)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc14)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc14)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc14)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc14)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc14)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc14)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc14)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc14)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc14)
          %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc14)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc14)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc14)
          %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc14)
          cir.yield %33 : !u64i loc(#loc14)
        }) : (!cir.bool) -> !u64i loc(#loc14)
        %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc14)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc102)
        cir.break loc(#loc16)
      } loc(#loc101)
    } loc(#loc101)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%3) loc(#loc19)
      } do {
        cir.scope {
          %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc105)
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
          %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc24)
          cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc105)
          %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc26)
        } loc(#loc104)
        cir.break loc(#loc27)
      } loc(#loc103)
    } loc(#loc103)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc108)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc106)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc109)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc36)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc44)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc48)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc48)
        cir.condition(%3) loc(#loc48)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc49)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc49)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc49)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc49)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc49)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc49)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc49)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc49)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc49)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc49)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc49)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc49)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc49)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc49)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc49)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc49)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc49)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc49)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc49)
          cir.yield %29 : !u64i loc(#loc49)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc49)
          %10 = cir.const #cir.int<60> : !s32i loc(#loc49)
          %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc49)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc49)
          %14 = cir.const #cir.int<45> : !s32i loc(#loc49)
          %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc49)
          %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc49)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc49)
          %19 = cir.const #cir.int<30> : !s32i loc(#loc49)
          %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc49)
          %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc49)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc49)
          %24 = cir.const #cir.int<15> : !s32i loc(#loc49)
          %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc49)
          %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc49)
          %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc49)
          %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc49)
          %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc49)
          %31 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc49)
          %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc49)
          cir.yield %33 : !u64i loc(#loc49)
        }) : (!cir.bool) -> !u64i loc(#loc49)
        %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc49)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
        cir.break loc(#loc51)
      } loc(#loc114)
    } loc(#loc114)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc54)
        cir.condition(%3) loc(#loc54)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc57)
          %3 = cir.call @imaxabs(%2) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc58)
          %4 = cir.cast(int_to_float, %3 : !s64i), !cir.long_double<!cir.f80> loc(#loc58)
          %5 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc59)
          %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
          %7 = cir.cast(int_to_float, %6 : !s64i), !cir.long_double<!cir.f80> loc(#loc60)
          %8 = cir.call @sqrtl(%7) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc59)
          %9 = cir.cmp(le, %4, %8) : !cir.long_double<!cir.f80>, !s32i loc(#loc118)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc62)
          cir.if %10 {
            %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc120)
            %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc67)
            %14 = cir.binop(mul, %12, %13) nsw : !s64i loc(#loc68)
            cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc120)
            %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc69)
            cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc70)
          } else {
            %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc39)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc39)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          } loc(#loc119)
        } loc(#loc117)
        cir.break loc(#loc72)
      } loc(#loc116)
    } loc(#loc116)
    cir.return loc(#loc41)
  } loc(#loc111)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc77)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc81)
        cir.condition(%3) loc(#loc81)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc82)
        %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc82)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc125)
        cir.break loc(#loc84)
      } loc(#loc124)
    } loc(#loc124)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc87)
        cir.condition(%3) loc(#loc87)
      } do {
        cir.scope {
          %2 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc128)
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc92)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc91)
          %5 = cir.binop(mul, %3, %4) nsw : !s64i loc(#loc92)
          cir.store %5, %2 : !s64i, !cir.ptr<!s64i> loc(#loc128)
          %6 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc93)
          cir.call @printLongLongLine(%6) : (!s64i) -> () loc(#loc94)
        } loc(#loc127)
        cir.break loc(#loc95)
      } loc(#loc126)
    } loc(#loc126)
    cir.return loc(#loc74)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":44:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":29:11)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":32:25)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":33:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":35:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":43:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":35:11)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":41:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":39:13)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":39:37)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":39:30)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":40:31)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":40:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":42:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":99:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":103:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":101:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":101:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":102:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":102:13)
#loc34 = loc("/usr/include/inttypes.h":351:1)
#loc35 = loc("/usr/include/inttypes.h":351:74)
#loc36 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":71:23)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":51:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":75:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":53:13)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":54:12)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":54:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":55:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":60:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":55:11)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":58:25)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":58:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":59:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":61:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":74:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":61:11)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":72:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:31)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:40)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:46)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:55)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":64:37)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":68:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":70:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":66:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":66:37)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":66:30)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":67:31)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":67:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":71:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":78:1)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":97:1)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":80:5)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":80:13)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":81:12)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":81:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":82:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":87:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":82:11)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":85:16)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":85:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":86:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":88:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":96:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":88:11)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":90:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":94:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":92:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":92:37)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":92:30)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":93:31)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":93:13)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_16.c":95:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc9])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc15, #loc14])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc20, #loc21])
#loc105 = loc(fused[#loc22, #loc23])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc32, #loc33])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc40, #loc41])
#loc112 = loc(fused[#loc42, #loc43])
#loc113 = loc(fused[#loc45, #loc44])
#loc114 = loc(fused[#loc46, #loc47])
#loc115 = loc(fused[#loc50, #loc49])
#loc116 = loc(fused[#loc52, #loc53])
#loc117 = loc(fused[#loc55, #loc56])
#loc118 = loc(fused[#loc58, #loc61])
#loc119 = loc(fused[#loc63, #loc64, #loc65, #loc56])
#loc120 = loc(fused[#loc66, #loc67])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc75, #loc76])
#loc123 = loc(fused[#loc78, #loc77])
#loc124 = loc(fused[#loc79, #loc80])
#loc125 = loc(fused[#loc83, #loc82])
#loc126 = loc(fused[#loc85, #loc86])
#loc127 = loc(fused[#loc88, #loc89])
#loc128 = loc(fused[#loc90, #loc91])
