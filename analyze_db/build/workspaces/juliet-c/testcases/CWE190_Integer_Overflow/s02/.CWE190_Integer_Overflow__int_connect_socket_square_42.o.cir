!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":46:22)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":46:26)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:44)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":146:26)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":146:30)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:44)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:24)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":125:26)
#loc266 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":125:30)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc297 = loc(fused[#loc18, #loc19])
#loc343 = loc(fused[#loc139, #loc140])
#loc389 = loc(fused[#loc265, #loc266])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc289)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc290)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc291)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc292)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc293)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func private @close(!s32i) -> !s32i loc(#loc295)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc18, #loc19])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc299)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc300)
    %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc301)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc297)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc17)
    cir.store %arg0, %4 : !s32i, !cir.ptr<!s32i> loc(#loc28)
    cir.br ^bb1 loc(#loc302)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc25)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc300)
    cir.br ^bb2 loc(#loc303)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc303)
  ^bb3:  // pred: ^bb26
    %8 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc33)
    cir.brcond %9 ^bb4, ^bb27 loc(#loc33)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc304)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %12 = cir.const #cir.int<6> : !s32i loc(#loc38)
    %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc39)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.br ^bb6 loc(#loc306)
  ^bb6:  // pred: ^bb5
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc45)
    %17 = cir.cmp(eq, %14, %16) : !s32i, !cir.bool loc(#loc307)
    cir.brcond %17 ^bb7, ^bb8 loc(#loc308)
  ^bb7:  // pred: ^bb6
    cir.br ^bb27 loc(#loc47)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc43)
  ^bb9:  // pred: ^bb8
    %18 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc309)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %20 = cir.const #cir.int<16> : !u64i loc(#loc310)
    cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc311)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc55)
    %23 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
    cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc312)
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
    %26 = cir.call @inet_addr(%25) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc58)
    %27 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
    %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
    cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc313)
    %29 = cir.const #cir.int<27015> : !s32i loc(#loc63)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc63)
    %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc64)
    %32 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
    cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc314)
    cir.br ^bb10 loc(#loc315)
  ^bb10:  // pred: ^bb9
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %34 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc316)
    %35 = cir.const #cir.int<16> : !u64i loc(#loc317)
    %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc317)
    %37 = cir.call @connect(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc75)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc76)
    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc318)
    cir.brcond %40 ^bb11, ^bb12 loc(#loc319)
  ^bb11:  // pred: ^bb10
    cir.br ^bb27 loc(#loc78)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc69)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %42 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc80)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
    %44 = cir.const #cir.int<3> : !s32i loc(#loc81)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc81)
    %46 = cir.const #cir.int<4> : !u64i loc(#loc81)
    %47 = cir.binop(mul, %45, %46) : !u64i loc(#loc81)
    %48 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc81)
    %50 = cir.binop(add, %47, %49) : !u64i loc(#loc81)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc82)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc320)
    %54 = cir.const #cir.int<0> : !s32i loc(#loc83)
    %55 = cir.call @recv(%41, %43, %53, %54) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc84)
    %56 = cir.cast(integral, %55 : !s64i), !s32i loc(#loc84)
    cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc321)
    cir.br ^bb14 loc(#loc322)
  ^bb14:  // pred: ^bb13
    %57 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc90)
    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc323)
    cir.brcond %60 ^bb15, ^bb16 loc(#loc91)
  ^bb15:  // pred: ^bb14
    %61 = cir.const #true loc(#loc91)
    cir.br ^bb21(%61 : !cir.bool) loc(#loc91)
  ^bb16:  // pred: ^bb14
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc324)
    cir.brcond %64 ^bb17, ^bb18 loc(#loc91)
  ^bb17:  // pred: ^bb16
    %65 = cir.const #true loc(#loc91)
    cir.br ^bb19(%65 : !cir.bool) loc(#loc91)
  ^bb18:  // pred: ^bb16
    %66 = cir.const #false loc(#loc91)
    cir.br ^bb19(%66 : !cir.bool) loc(#loc91)
  ^bb19(%67: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:44)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc91)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21(%67 : !cir.bool) loc(#loc91)
  ^bb21(%68: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:44)):  // 2 preds: ^bb15, ^bb20
    cir.br ^bb22 loc(#loc91)
  ^bb22:  // pred: ^bb21
    cir.brcond %68 ^bb23, ^bb24 loc(#loc325)
  ^bb23:  // pred: ^bb22
    cir.br ^bb27 loc(#loc95)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc88)
  ^bb25:  // pred: ^bb24
    %69 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %70 = cir.cast(integral, %69 : !s32i), !s8i loc(#loc96)
    %71 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %72 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
    %73 = cir.ptr_stride(%72 : !cir.ptr<!s8i>, %71 : !s32i), !cir.ptr<!s8i> loc(#loc98)
    cir.store %70, %73 : !s8i, !cir.ptr<!s8i> loc(#loc326)
    %74 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
    %75 = cir.call @atoi(%74) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc100)
    cir.store %75, %4 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.br ^bb26 loc(#loc35)
  ^bb26:  // pred: ^bb25
    cir.br ^bb3 loc(#loc32)
  ^bb27:  // 4 preds: ^bb3, ^bb7, ^bb11, ^bb23
    cir.br ^bb28 loc(#loc32)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc328)
  ^bb29:  // pred: ^bb28
    %76 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc106)
    %79 = cir.cmp(ne, %76, %78) : !s32i, !cir.bool loc(#loc329)
    cir.brcond %79 ^bb30, ^bb31 loc(#loc330)
  ^bb30:  // pred: ^bb29
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    %81 = cir.call @close(%80) : (!s32i) -> !s32i loc(#loc109)
    cir.br ^bb31 loc(#loc104)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc104)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc30)
  ^bb33:  // pred: ^bb32
    %82 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    cir.store %82, %5 : !s32i, !cir.ptr<!s32i> loc(#loc331)
    %83 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc331)
    cir.return %83 : !s32i loc(#loc331)
  } loc(#loc296)
  cir.func private @printIntLine(!s32i) loc(#loc332)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc334)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc335)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc336)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc123)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc337)
    cir.br ^bb1 loc(#loc338)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc128)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc130)
    cir.br ^bb2 loc(#loc127)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc115)
  } loc(#loc333)
  cir.func no_proto @CWE190_Integer_Overflow__int_connect_socket_square_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc340)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc133)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc341)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc135)
    cir.return loc(#loc132)
  } loc(#loc339)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc139, #loc140])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc344)
    %1 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc345)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc346)
    %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc347)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc343)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc138)
    cir.store %arg0, %4 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb1 loc(#loc348)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc146)
    cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    cir.br ^bb2 loc(#loc349)
  ^bb2:  // pred: ^bb1
    cir.br ^bb4 loc(#loc349)
  ^bb3:  // pred: ^bb26
    %8 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc154)
    cir.brcond %9 ^bb4, ^bb27 loc(#loc154)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc350)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.int<2> : !s32i loc(#loc157)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %12 = cir.const #cir.int<6> : !s32i loc(#loc159)
    %13 = cir.call @socket(%10, %11, %12) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc160)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    cir.br ^bb6 loc(#loc352)
  ^bb6:  // pred: ^bb5
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc166)
    %17 = cir.cmp(eq, %14, %16) : !s32i, !cir.bool loc(#loc353)
    cir.brcond %17 ^bb7, ^bb8 loc(#loc354)
  ^bb7:  // pred: ^bb6
    cir.br ^bb27 loc(#loc168)
  ^bb8:  // pred: ^bb6
    cir.br ^bb9 loc(#loc164)
  ^bb9:  // pred: ^bb8
    %18 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc355)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc171)
    %20 = cir.const #cir.int<16> : !u64i loc(#loc356)
    cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc357)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc176)
    %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc176)
    %23 = cir.get_member %1[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc56)
    cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc358)
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc178)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc178)
    %26 = cir.call @inet_addr(%25) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc179)
    %27 = cir.get_member %1[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc59)
    %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc60)
    cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc359)
    %29 = cir.const #cir.int<27015> : !s32i loc(#loc182)
    %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc182)
    %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc183)
    %32 = cir.get_member %1[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc65)
    cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc360)
    cir.br ^bb10 loc(#loc361)
  ^bb10:  // pred: ^bb9
    %33 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    %34 = cir.cast(bitcast, %1 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc362)
    %35 = cir.const #cir.int<16> : !u64i loc(#loc363)
    %36 = cir.cast(integral, %35 : !u64i), !u32i loc(#loc363)
    %37 = cir.call @connect(%33, %34, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc193)
    %38 = cir.const #cir.int<1> : !s32i loc(#loc194)
    %39 = cir.unary(minus, %38) nsw : !s32i, !s32i loc(#loc194)
    %40 = cir.cmp(eq, %37, %39) : !s32i, !cir.bool loc(#loc364)
    cir.brcond %40 ^bb11, ^bb12 loc(#loc365)
  ^bb11:  // pred: ^bb10
    cir.br ^bb27 loc(#loc196)
  ^bb12:  // pred: ^bb10
    cir.br ^bb13 loc(#loc187)
  ^bb13:  // pred: ^bb12
    %41 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %42 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc198)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc198)
    %44 = cir.const #cir.int<3> : !s32i loc(#loc199)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc199)
    %46 = cir.const #cir.int<4> : !u64i loc(#loc199)
    %47 = cir.binop(mul, %45, %46) : !u64i loc(#loc199)
    %48 = cir.const #cir.int<2> : !s32i loc(#loc199)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc199)
    %50 = cir.binop(add, %47, %49) : !u64i loc(#loc199)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc200)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc200)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc366)
    %54 = cir.const #cir.int<0> : !s32i loc(#loc201)
    %55 = cir.call @recv(%41, %43, %53, %54) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc202)
    %56 = cir.cast(integral, %55 : !s64i), !s32i loc(#loc202)
    cir.store %56, %0 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    cir.br ^bb14 loc(#loc368)
  ^bb14:  // pred: ^bb13
    %57 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc208)
    %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc208)
    %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc369)
    cir.brcond %60 ^bb15, ^bb16 loc(#loc209)
  ^bb15:  // pred: ^bb14
    %61 = cir.const #true loc(#loc209)
    cir.br ^bb21(%61 : !cir.bool) loc(#loc209)
  ^bb16:  // pred: ^bb14
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    %63 = cir.const #cir.int<0> : !s32i loc(#loc211)
    %64 = cir.cmp(eq, %62, %63) : !s32i, !cir.bool loc(#loc370)
    cir.brcond %64 ^bb17, ^bb18 loc(#loc209)
  ^bb17:  // pred: ^bb16
    %65 = cir.const #true loc(#loc209)
    cir.br ^bb19(%65 : !cir.bool) loc(#loc209)
  ^bb18:  // pred: ^bb16
    %66 = cir.const #false loc(#loc209)
    cir.br ^bb19(%66 : !cir.bool) loc(#loc209)
  ^bb19(%67: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:44)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc209)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21(%67 : !cir.bool) loc(#loc209)
  ^bb21(%68: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:44)):  // 2 preds: ^bb15, ^bb20
    cir.br ^bb22 loc(#loc209)
  ^bb22:  // pred: ^bb21
    cir.brcond %68 ^bb23, ^bb24 loc(#loc371)
  ^bb23:  // pred: ^bb22
    cir.br ^bb27 loc(#loc213)
  ^bb24:  // pred: ^bb22
    cir.br ^bb25 loc(#loc206)
  ^bb25:  // pred: ^bb24
    %69 = cir.const #cir.int<0> : !s32i loc(#loc214)
    %70 = cir.cast(integral, %69 : !s32i), !s8i loc(#loc214)
    %71 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc215)
    %72 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc216)
    %73 = cir.ptr_stride(%72 : !cir.ptr<!s8i>, %71 : !s32i), !cir.ptr<!s8i> loc(#loc216)
    cir.store %70, %73 : !s8i, !cir.ptr<!s8i> loc(#loc372)
    %74 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc217)
    %75 = cir.call @atoi(%74) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc218)
    cir.store %75, %4 : !s32i, !cir.ptr<!s32i> loc(#loc373)
    cir.br ^bb26 loc(#loc156)
  ^bb26:  // pred: ^bb25
    cir.br ^bb3 loc(#loc153)
  ^bb27:  // 4 preds: ^bb3, ^bb7, ^bb11, ^bb23
    cir.br ^bb28 loc(#loc153)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc374)
  ^bb29:  // pred: ^bb28
    %76 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc223)
    %77 = cir.const #cir.int<1> : !s32i loc(#loc224)
    %78 = cir.unary(minus, %77) nsw : !s32i, !s32i loc(#loc224)
    %79 = cir.cmp(ne, %76, %78) : !s32i, !cir.bool loc(#loc375)
    cir.brcond %79 ^bb30, ^bb31 loc(#loc376)
  ^bb30:  // pred: ^bb29
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    %81 = cir.call @close(%80) : (!s32i) -> !s32i loc(#loc227)
    cir.br ^bb31 loc(#loc222)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc222)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc151)
  ^bb33:  // pred: ^bb32
    %82 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    cir.store %82, %5 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    %83 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc377)
    cir.return %83 : !s32i loc(#loc377)
  } loc(#loc342)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc230)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc378)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc233)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc380)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc381)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc240)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc382)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc242)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc243)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc383)
    cir.br ^bb1 loc(#loc384)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc249)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc249)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc249)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc249)
    %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc385)
    cir.brcond %10 ^bb2, ^bb7 loc(#loc250)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    %12 = cir.abs %11 poison : !s32i loc(#loc252)
    %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc252)
    %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc253)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc254)
    %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc254)
    %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc253)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc253)
    %19 = cir.cmp(lt, %13, %18) : !s64i, !cir.bool loc(#loc386)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc250)
  ^bb3:  // pred: ^bb2
    %20 = cir.const #true loc(#loc250)
    cir.br ^bb5(%20 : !cir.bool) loc(#loc250)
  ^bb4:  // pred: ^bb2
    %21 = cir.const #false loc(#loc250)
    cir.br ^bb5(%21 : !cir.bool) loc(#loc250)
  ^bb5(%22: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:24)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc250)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8(%22 : !cir.bool) loc(#loc250)
  ^bb7:  // pred: ^bb1
    %23 = cir.const #false loc(#loc250)
    cir.br ^bb8(%23 : !cir.bool) loc(#loc250)
  ^bb8(%24: !cir.bool loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:24)):  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc250)
  ^bb9:  // pred: ^bb8
    cir.brcond %24 ^bb10, ^bb11 loc(#loc387)
  ^bb10:  // pred: ^bb9
    %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc259)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    %27 = cir.binop(mul, %25, %26) nsw : !s32i loc(#loc259)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc261)
    cir.br ^bb12 loc(#loc257)
  ^bb11:  // pred: ^bb9
    %29 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc233)
    %30 = cir.cast(array_to_ptrdecay, %29 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc233)
    cir.call @printLine(%30) : (!cir.ptr<!s8i>) -> () loc(#loc262)
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc247)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc235)
  } loc(#loc379)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc265, #loc266])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc389)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc264)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc268)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc390)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc270)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc391)
    cir.return %4 : !s32i loc(#loc391)
  } loc(#loc388)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc393)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc394)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc278)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc395)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc280)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc281)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc396)
    cir.br ^bb1 loc(#loc397)
  ^bb1:  // pred: ^bb0
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc286)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc275)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc286)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc393)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc288)
    cir.br ^bb2 loc(#loc285)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc273)
  } loc(#loc392)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_42.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":74:49)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":46:1)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":105:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":53:9)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":53:13)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":54:9)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":54:28)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":55:9)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":55:32)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":56:9)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":56:41)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":47:1)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":48:5)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":103:5)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":57:9)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":92:17)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":92:16)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":58:9)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":91:9)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:36)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:45)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:58)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:29)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:13)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":67:69)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":68:13)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":71:13)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":68:17)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":68:34)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":69:13)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":70:17)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:20)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:21)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:30)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:33)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:47)
#loc53 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:13)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":72:48)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":73:34)
#loc56 = loc("/usr/include/netinet/in.h":249:5)
#loc57 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":73:13)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":74:39)
#loc59 = loc("/usr/include/netinet/in.h":251:20)
#loc60 = loc("/usr/include/netinet/in.h":33:15)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":74:13)
#loc62 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":74:59)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":75:38)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":75:32)
#loc65 = loc("/usr/include/netinet/in.h":250:15)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":75:13)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":75:46)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:13)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":79:13)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:25)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:58)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:59)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:68)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:82)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:17)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":76:88)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":77:13)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":78:17)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:31)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:46)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:59)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:77)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:80)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:26)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:13)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":82:81)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:13)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":86:13)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:17)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:31)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:47)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":83:61)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":84:13)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":85:17)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":88:39)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":88:25)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":88:13)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":90:25)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":90:20)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":90:13)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":90:36)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":93:9)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":96:9)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":93:13)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":93:30)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":94:9)
#loc108 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":95:26)
#loc109 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":95:13)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":104:12)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":104:5)
#loc112 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc113 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":107:1)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":118:1)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":115:9)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":115:29)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":109:5)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":109:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":111:12)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":111:5)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":112:22)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":112:12)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":112:5)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":112:26)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":113:5)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":117:5)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":115:22)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":116:22)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":116:9)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":225:1)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":229:1)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":227:5)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":227:13)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":228:5)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":228:13)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":146:1)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":205:1)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":153:9)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":153:13)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":154:9)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":154:28)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":155:9)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":155:32)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":156:9)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":156:41)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":147:1)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":148:5)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":203:5)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":157:9)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":192:17)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":192:16)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":158:9)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":191:9)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:36)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:45)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:58)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:29)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:13)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":167:69)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":168:13)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":171:13)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":168:17)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":168:34)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":169:13)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":170:17)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:20)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:21)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:30)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:33)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:47)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:13)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":172:48)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":173:34)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":173:13)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":174:49)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":174:39)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":174:13)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":174:59)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":175:38)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":175:32)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":175:13)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":175:46)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:13)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":179:13)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:25)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:58)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:59)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:68)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:82)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:17)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":176:88)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":177:13)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":178:17)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:31)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:46)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:59)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:77)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:80)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:26)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:13)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":182:81)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:13)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":186:13)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:17)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:31)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:47)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":183:61)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":184:13)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":185:17)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":188:39)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":188:25)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":188:13)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":190:25)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":190:20)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":190:13)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":190:36)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":193:9)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":196:9)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":193:13)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":193:30)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":194:9)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":195:26)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":195:13)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":204:12)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":204:5)
#loc230 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc231 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc232 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":221:19)
#loc234 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":207:1)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":223:1)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":216:9)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":216:29)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":209:5)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":209:9)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":211:12)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":211:5)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":212:26)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":212:12)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":212:5)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":212:30)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:5)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":222:5)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:9)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:16)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:31)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:27)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:45)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:58)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":214:65)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":215:5)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":218:5)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":220:5)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":216:22)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":217:22)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":217:9)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":221:9)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":125:1)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":130:1)
#loc267 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":126:1)
#loc268 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":128:12)
#loc269 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":128:5)
#loc270 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":129:12)
#loc271 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":129:5)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":132:1)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":143:1)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":140:9)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":140:29)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":134:5)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":134:9)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":136:12)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":136:5)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":137:26)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":137:12)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":137:5)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":137:30)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":138:5)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":142:5)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":140:22)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":141:22)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_42.c":141:9)
#loc289 = loc(fused[#loc1, #loc2])
#loc290 = loc(fused[#loc3, #loc4])
#loc291 = loc(fused[#loc6, #loc7])
#loc292 = loc(fused[#loc8, #loc9])
#loc293 = loc(fused[#loc10, #loc11])
#loc294 = loc(fused[#loc12, #loc13])
#loc295 = loc(fused[#loc14, #loc15])
#loc296 = loc(fused[#loc16, #loc17])
#loc298 = loc(fused[#loc20, #loc21])
#loc299 = loc(fused[#loc22, #loc23])
#loc300 = loc(fused[#loc24, #loc25])
#loc301 = loc(fused[#loc26, #loc27])
#loc302 = loc(fused[#loc29, #loc30])
#loc303 = loc(fused[#loc31, #loc32])
#loc304 = loc(fused[#loc34, #loc35])
#loc305 = loc(fused[#loc40, #loc41])
#loc306 = loc(fused[#loc42, #loc43])
#loc307 = loc(fused[#loc44, #loc45])
#loc308 = loc(fused[#loc46, #loc43])
#loc309 = loc(fused[#loc48, #loc49])
#loc310 = loc(fused[#loc51, #loc52])
#loc311 = loc(fused[#loc53, #loc54])
#loc312 = loc(fused[#loc57, #loc55])
#loc313 = loc(fused[#loc61, #loc62])
#loc314 = loc(fused[#loc66, #loc67])
#loc315 = loc(fused[#loc68, #loc69])
#loc316 = loc(fused[#loc71, #loc72])
#loc317 = loc(fused[#loc73, #loc74])
#loc318 = loc(fused[#loc75, #loc76])
#loc319 = loc(fused[#loc77, #loc69])
#loc320 = loc(fused[#loc81, #loc82])
#loc321 = loc(fused[#loc85, #loc86])
#loc322 = loc(fused[#loc87, #loc88])
#loc323 = loc(fused[#loc89, #loc90])
#loc324 = loc(fused[#loc92, #loc93])
#loc325 = loc(fused[#loc94, #loc88])
#loc326 = loc(fused[#loc98, #loc96])
#loc327 = loc(fused[#loc101, #loc102])
#loc328 = loc(fused[#loc103, #loc104])
#loc329 = loc(fused[#loc105, #loc106])
#loc330 = loc(fused[#loc107, #loc104])
#loc331 = loc(fused[#loc111, #loc110])
#loc332 = loc(fused[#loc112, #loc113])
#loc333 = loc(fused[#loc114, #loc115])
#loc334 = loc(fused[#loc116, #loc117])
#loc335 = loc(fused[#loc118, #loc119])
#loc336 = loc(fused[#loc121, #loc120])
#loc337 = loc(fused[#loc124, #loc125])
#loc338 = loc(fused[#loc126, #loc127])
#loc339 = loc(fused[#loc131, #loc132])
#loc340 = loc(fused[#loc133, #loc134])
#loc341 = loc(fused[#loc135, #loc136])
#loc342 = loc(fused[#loc137, #loc138])
#loc344 = loc(fused[#loc141, #loc142])
#loc345 = loc(fused[#loc143, #loc144])
#loc346 = loc(fused[#loc145, #loc146])
#loc347 = loc(fused[#loc147, #loc148])
#loc348 = loc(fused[#loc150, #loc151])
#loc349 = loc(fused[#loc152, #loc153])
#loc350 = loc(fused[#loc155, #loc156])
#loc351 = loc(fused[#loc161, #loc162])
#loc352 = loc(fused[#loc163, #loc164])
#loc353 = loc(fused[#loc165, #loc166])
#loc354 = loc(fused[#loc167, #loc164])
#loc355 = loc(fused[#loc169, #loc170])
#loc356 = loc(fused[#loc172, #loc173])
#loc357 = loc(fused[#loc174, #loc175])
#loc358 = loc(fused[#loc177, #loc176])
#loc359 = loc(fused[#loc180, #loc181])
#loc360 = loc(fused[#loc184, #loc185])
#loc361 = loc(fused[#loc186, #loc187])
#loc362 = loc(fused[#loc189, #loc190])
#loc363 = loc(fused[#loc191, #loc192])
#loc364 = loc(fused[#loc193, #loc194])
#loc365 = loc(fused[#loc195, #loc187])
#loc366 = loc(fused[#loc199, #loc200])
#loc367 = loc(fused[#loc203, #loc204])
#loc368 = loc(fused[#loc205, #loc206])
#loc369 = loc(fused[#loc207, #loc208])
#loc370 = loc(fused[#loc210, #loc211])
#loc371 = loc(fused[#loc212, #loc206])
#loc372 = loc(fused[#loc216, #loc214])
#loc373 = loc(fused[#loc219, #loc220])
#loc374 = loc(fused[#loc221, #loc222])
#loc375 = loc(fused[#loc223, #loc224])
#loc376 = loc(fused[#loc225, #loc222])
#loc377 = loc(fused[#loc229, #loc228])
#loc378 = loc(fused[#loc231, #loc232])
#loc379 = loc(fused[#loc234, #loc235])
#loc380 = loc(fused[#loc236, #loc237])
#loc381 = loc(fused[#loc238, #loc239])
#loc382 = loc(fused[#loc241, #loc240])
#loc383 = loc(fused[#loc244, #loc245])
#loc384 = loc(fused[#loc246, #loc247])
#loc385 = loc(fused[#loc248, #loc249])
#loc386 = loc(fused[#loc252, #loc255])
#loc387 = loc(fused[#loc256, #loc257, #loc258, #loc247])
#loc388 = loc(fused[#loc263, #loc264])
#loc390 = loc(fused[#loc269, #loc268])
#loc391 = loc(fused[#loc271, #loc270])
#loc392 = loc(fused[#loc272, #loc273])
#loc393 = loc(fused[#loc274, #loc275])
#loc394 = loc(fused[#loc276, #loc277])
#loc395 = loc(fused[#loc279, #loc278])
#loc396 = loc(fused[#loc282, #loc283])
#loc397 = loc(fused[#loc284, #loc285])
