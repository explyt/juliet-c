!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc85)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc86)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc87)
  cir.func  @_ZN42CWE190_Integer_Overflow__int_fscanf_add_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc90)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc16)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc86)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc17)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc16)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc93)
      cir.scope {
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %15 = cir.binop(add, %13, %14) nsw : !s32i loc(#loc26)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc95)
        %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc28)
      } loc(#loc94)
    } loc(#loc92)
    cir.return loc(#loc9)
  } loc(#loc88)
  cir.func internal private  @_ZN42CWE190_Integer_Overflow__int_fscanf_add_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc98)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc34)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc102)
      %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc102)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc47)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc104)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc48)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc49)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc30)
  } loc(#loc96)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc105)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func internal private  @_ZN42CWE190_Integer_Overflow__int_fscanf_add_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc108)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc58)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    %3 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc61)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc86)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc63)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc63)
    %8 = cir.call @__isoc23_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc61)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc111)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc67)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc111)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc70)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc71)
        %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc113)
        cir.if %14 {
          %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc115)
          %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %18 = cir.binop(add, %16, %17) nsw : !s32i loc(#loc77)
          cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc115)
          %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc79)
        } else {
          %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
          %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
          cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        } loc(#loc114)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc54)
  } loc(#loc106)
  cir.func  @_ZN42CWE190_Integer_Overflow__int_fscanf_add_334goodEv() extra(#fn_attr) {
    cir.call @_ZN42CWE190_Integer_Overflow__int_fscanf_add_33L7goodG2BEv() : () -> () loc(#loc83)
    cir.call @_ZN42CWE190_Integer_Overflow__int_fscanf_add_33L7goodB2GEv() : () -> () loc(#loc84)
    cir.return loc(#loc82)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_33.cpp":0:0)
#loc1 = loc("/usr/include/stdio.h":442:1)
#loc2 = loc("/usr/include/stdio.h":444:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":32:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":25:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":41:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":27:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":28:20)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":30:12)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":30:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":32:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":32:12)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":33:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":40:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":34:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":34:20)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":35:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":39:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":37:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":37:33)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":37:26)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":38:26)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":38:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":48:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":64:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":50:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":50:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":51:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":51:20)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":53:12)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":53:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":55:12)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":55:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":56:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":63:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":57:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":57:20)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":58:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":62:9)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":60:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":60:33)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":60:26)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":61:26)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":61:13)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":85:23)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":67:1)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":88:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":69:5)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":69:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":70:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":70:20)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":72:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":72:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":74:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":74:12)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":74:19)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":75:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":87:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":76:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":76:20)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":78:9)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":86:9)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":78:13)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":78:20)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":79:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":82:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":84:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":80:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":80:33)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":80:26)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":81:26)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":81:13)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":85:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":90:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":94:1)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":92:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_add_33.cpp":93:5)
#loc85 = loc(fused[#loc1, #loc2])
#loc86 = loc(fused[#loc3, #loc4])
#loc87 = loc(fused[#loc6, #loc7])
#loc88 = loc(fused[#loc8, #loc9])
#loc89 = loc(fused[#loc10, #loc11])
#loc90 = loc(fused[#loc12, #loc13])
#loc91 = loc(fused[#loc15, #loc14])
#loc92 = loc(fused[#loc18, #loc19])
#loc93 = loc(fused[#loc20, #loc21])
#loc94 = loc(fused[#loc22, #loc23])
#loc95 = loc(fused[#loc24, #loc25])
#loc96 = loc(fused[#loc29, #loc30])
#loc97 = loc(fused[#loc31, #loc32])
#loc98 = loc(fused[#loc33, #loc34])
#loc99 = loc(fused[#loc36, #loc35])
#loc100 = loc(fused[#loc38, #loc37])
#loc101 = loc(fused[#loc39, #loc40])
#loc102 = loc(fused[#loc41, #loc42])
#loc103 = loc(fused[#loc43, #loc44])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc50, #loc51])
#loc106 = loc(fused[#loc53, #loc54])
#loc107 = loc(fused[#loc55, #loc56])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc60, #loc59])
#loc110 = loc(fused[#loc64, #loc65])
#loc111 = loc(fused[#loc66, #loc67])
#loc112 = loc(fused[#loc68, #loc69])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc72, #loc73, #loc74, #loc69])
#loc115 = loc(fused[#loc75, #loc76])
#loc116 = loc(fused[#loc81, #loc82])
