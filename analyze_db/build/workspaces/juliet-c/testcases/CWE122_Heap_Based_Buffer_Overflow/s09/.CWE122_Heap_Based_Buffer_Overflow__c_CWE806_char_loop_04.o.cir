!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc222)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc223)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc226)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc228)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc230)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc20)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc21)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc21)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc232)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc233)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc234)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc237)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc238)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc33)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb3 loc(#loc27)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc239)
  ^bb5:  // pred: ^bb4
    %18 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc36)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc240)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc39)
    %23 = cir.const #cir.int<100> : !s32i loc(#loc40)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc40)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc40)
    cir.libc.memset %26 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc241)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc44)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc46)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc46)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc48)
    cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc242)
    cir.br ^bb7 loc(#loc35)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc35)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc243)
  ^bb9:  // pred: ^bb8
    %34 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc228)
    cir.store %34, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc228)
    %35 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
    %36 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
    %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
    cir.store %37, %2 : !u64i, !cir.ptr<!u64i> loc(#loc244)
    cir.br ^bb10 loc(#loc245)
  ^bb10:  // pred: ^bb9
    %38 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc57)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc246)
    cir.br ^bb11 loc(#loc245)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc59)
    %41 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %42 = cir.cmp(lt, %40, %41) : !u64i, !cir.bool loc(#loc247)
    cir.brcond %42 ^bb12, ^bb16 loc(#loc61)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc248)
  ^bb13:  // pred: ^bb12
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    %44 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc65)
    %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc63)
    %47 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc66)
    %48 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc67)
    %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc67)
    cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc249)
    cir.br ^bb14 loc(#loc56)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc56)
  ^bb15:  // pred: ^bb14
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc68)
    %51 = cir.unary(inc, %50) : !u64i, !u64i loc(#loc69)
    cir.store %51, %1 : !u64i, !cir.ptr<!u64i> loc(#loc250)
    cir.br ^bb11 loc(#loc245)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc56)
  ^bb17:  // pred: ^bb16
    %52 = cir.const #cir.int<0> : !s32i loc(#loc70)
    %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc70)
    %54 = cir.const #cir.int<50> : !s32i loc(#loc71)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %56 = cir.binop(sub, %54, %55) nsw : !s32i loc(#loc71)
    %57 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc73)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc73)
    cir.store %53, %58 : !s8i, !cir.ptr<!s8i> loc(#loc251)
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
    cir.call @free(%61) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    cir.br ^bb18 loc(#loc50)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc12)
  } loc(#loc227)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc253)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc80)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc254)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc82)
    cir.return loc(#loc79)
  } loc(#loc252)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc84)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc256)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc258)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc95)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc95)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc260)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc261)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc262)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.br ^bb1 loc(#loc264)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc265)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc266)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc105)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc107)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
    cir.br ^bb3 loc(#loc101)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc267)
  ^bb5:  // pred: ^bb4
    %18 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc110)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc268)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc84)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb8 loc(#loc112)
  ^bb7:  // pred: ^bb5
    %22 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
    %24 = cir.const #cir.int<65> : !s32i loc(#loc116)
    %25 = cir.const #cir.int<50> : !s32i loc(#loc117)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc117)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc117)
    cir.libc.memset %28 bytes from %23 set to %24 : !cir.ptr<!void>, !s32i, !u64i loc(#loc269)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %30 = cir.cast(integral, %29 : !s32i), !s8i loc(#loc121)
    %31 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc122)
    %32 = cir.const #cir.int<50> : !s32i loc(#loc123)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc123)
    %35 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %34 : !s32i), !cir.ptr<!s8i> loc(#loc125)
    cir.store %30, %35 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    cir.br ^bb8 loc(#loc109)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc271)
  ^bb10:  // pred: ^bb9
    %36 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc256)
    cir.store %36, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc256)
    %37 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc128)
    %38 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
    %39 = cir.call @strlen(%38) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc128)
    cir.store %39, %2 : !u64i, !cir.ptr<!u64i> loc(#loc272)
    cir.br ^bb11 loc(#loc273)
  ^bb11:  // pred: ^bb10
    %40 = cir.const #cir.int<0> : !s32i loc(#loc134)
    %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc134)
    cir.store %41, %1 : !u64i, !cir.ptr<!u64i> loc(#loc274)
    cir.br ^bb12 loc(#loc273)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %42 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc136)
    %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc137)
    %44 = cir.cmp(lt, %42, %43) : !u64i, !cir.bool loc(#loc275)
    cir.brcond %44 ^bb13, ^bb17 loc(#loc138)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc276)
  ^bb14:  // pred: ^bb13
    %45 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
    %46 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc141)
    %47 = cir.ptr_stride(%45 : !cir.ptr<!s8i>, %46 : !u64i), !cir.ptr<!s8i> loc(#loc142)
    %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc140)
    %49 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %50 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc144)
    %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !u64i), !cir.ptr<!s8i> loc(#loc144)
    cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc277)
    cir.br ^bb15 loc(#loc133)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc133)
  ^bb16:  // pred: ^bb15
    %52 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc145)
    %53 = cir.unary(inc, %52) : !u64i, !u64i loc(#loc146)
    cir.store %53, %1 : !u64i, !cir.ptr<!u64i> loc(#loc278)
    cir.br ^bb12 loc(#loc273)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc133)
  ^bb18:  // pred: ^bb17
    %54 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc147)
    %56 = cir.const #cir.int<50> : !s32i loc(#loc148)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %58 = cir.binop(sub, %56, %57) nsw : !s32i loc(#loc148)
    %59 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc150)
    %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc150)
    cir.store %55, %60 : !s8i, !cir.ptr<!s8i> loc(#loc279)
    %61 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    %62 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc153)
    %63 = cir.cast(bitcast, %62 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc153)
    cir.call @free(%63) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc154)
    cir.br ^bb19 loc(#loc127)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc86)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc281)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc282)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc283)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc164)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc165)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc165)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc285)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc286)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc287)
    cir.store %10, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc288)
    cir.br ^bb1 loc(#loc289)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc172)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc173)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc173)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc290)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc291)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc175)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc176)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc177)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc175)
    cir.br ^bb3 loc(#loc171)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc171)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc292)
  ^bb5:  // pred: ^bb4
    %18 = cir.const #cir.int<1> : !s32i loc(#loc180)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc180)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc293)
  ^bb6:  // pred: ^bb5
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc182)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc182)
    %22 = cir.const #cir.int<65> : !s32i loc(#loc183)
    %23 = cir.const #cir.int<50> : !s32i loc(#loc184)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc184)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc184)
    cir.libc.memset %26 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc294)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc188)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc188)
    %29 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
    %30 = cir.const #cir.int<50> : !s32i loc(#loc190)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc191)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc190)
    %33 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %32 : !s32i), !cir.ptr<!s8i> loc(#loc192)
    cir.store %28, %33 : !s8i, !cir.ptr<!s8i> loc(#loc295)
    cir.br ^bb7 loc(#loc179)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc179)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc296)
  ^bb9:  // pred: ^bb8
    %34 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc281)
    cir.store %34, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc281)
    %35 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc195)
    %36 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
    %37 = cir.call @strlen(%36) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc195)
    cir.store %37, %2 : !u64i, !cir.ptr<!u64i> loc(#loc297)
    cir.br ^bb10 loc(#loc298)
  ^bb10:  // pred: ^bb9
    %38 = cir.const #cir.int<0> : !s32i loc(#loc201)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc201)
    cir.store %39, %1 : !u64i, !cir.ptr<!u64i> loc(#loc299)
    cir.br ^bb11 loc(#loc298)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %40 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc203)
    %41 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc204)
    %42 = cir.cmp(lt, %40, %41) : !u64i, !cir.bool loc(#loc300)
    cir.brcond %42 ^bb12, ^bb16 loc(#loc205)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc301)
  ^bb13:  // pred: ^bb12
    %43 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc207)
    %44 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc208)
    %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc209)
    %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc207)
    %47 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc210)
    %48 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc211)
    %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc211)
    cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc302)
    cir.br ^bb14 loc(#loc200)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc200)
  ^bb15:  // pred: ^bb14
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc212)
    %51 = cir.unary(inc, %50) : !u64i, !u64i loc(#loc213)
    cir.store %51, %1 : !u64i, !cir.ptr<!u64i> loc(#loc303)
    cir.br ^bb11 loc(#loc298)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc200)
  ^bb17:  // pred: ^bb16
    %52 = cir.const #cir.int<0> : !s32i loc(#loc214)
    %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc214)
    %54 = cir.const #cir.int<50> : !s32i loc(#loc215)
    %55 = cir.const #cir.int<1> : !s32i loc(#loc216)
    %56 = cir.binop(sub, %54, %55) nsw : !s32i loc(#loc215)
    %57 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc217)
    %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc217)
    cir.store %53, %58 : !s8i, !cir.ptr<!s8i> loc(#loc304)
    %59 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc218)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc219)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc220)
    cir.call @free(%61) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc221)
    cir.br ^bb18 loc(#loc194)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc156)
  } loc(#loc280)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":30:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":54:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":42:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":42:25)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":43:19)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":32:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":32:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:31)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:42)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":33:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:33)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:23)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:30)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":34:29)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":35:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":40:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":35:8)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":36:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":38:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":39:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":41:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":53:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":44:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":49:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:21)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:23)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":47:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:23)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:29)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":48:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:35)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":46:34)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":50:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":51:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":51:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":52:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":52:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":119:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":123:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":121:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":121:14)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":122:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":122:14)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":69:19)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":61:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":90:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":78:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":78:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:16)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":79:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":63:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":63:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:20)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:27)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:31)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:42)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":64:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:33)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:17)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:23)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:24)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:30)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":65:29)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":66:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":76:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":66:8)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":67:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":70:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":72:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":69:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:16)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:22)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":74:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:17)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":75:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":77:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":89:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:19)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":80:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":85:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:18)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:14)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:25)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:23)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":83:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:29)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":84:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":82:34)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:22)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":86:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":87:19)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":87:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":88:14)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":88:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":93:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":117:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":105:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":105:25)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:16)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":106:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":95:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":95:12)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:42)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":96:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:17)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:24)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:30)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":97:29)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":98:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":103:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":98:8)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":99:5)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:16)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:22)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:27)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":101:31)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:22)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:14)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:17)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":102:18)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":104:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":116:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:19)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:26)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":107:30)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":112:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:18)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:14)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:21)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:23)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":110:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:28)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:29)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:18)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":111:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:35)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":109:34)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:22)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:14)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":113:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":114:19)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":114:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":115:14)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_04.c":115:9)
#loc222 = loc(fused[#loc1, #loc2])
#loc223 = loc(fused[#loc3, #loc4])
#loc224 = loc(fused[#loc5, #loc6])
#loc225 = loc(fused[#loc7, #loc8])
#loc226 = loc(fused[#loc9, #loc10])
#loc227 = loc(fused[#loc11, #loc12])
#loc228 = loc(fused[#loc13, #loc14])
#loc229 = loc(fused[#loc15, #loc16])
#loc230 = loc(fused[#loc15, #loc17])
#loc231 = loc(fused[#loc18, #loc19])
#loc232 = loc(fused[#loc22, #loc23])
#loc233 = loc(fused[#loc21, #loc23])
#loc234 = loc(fused[#loc20, #loc24])
#loc235 = loc(fused[#loc25, #loc24])
#loc236 = loc(fused[#loc26, #loc27])
#loc237 = loc(fused[#loc28, #loc29])
#loc238 = loc(fused[#loc30, #loc27])
#loc239 = loc(fused[#loc34, #loc35])
#loc240 = loc(fused[#loc37, #loc35])
#loc241 = loc(fused[#loc42, #loc43])
#loc242 = loc(fused[#loc45, #loc44])
#loc243 = loc(fused[#loc49, #loc50])
#loc244 = loc(fused[#loc53, #loc54])
#loc245 = loc(fused[#loc55, #loc56])
#loc246 = loc(fused[#loc58, #loc57])
#loc247 = loc(fused[#loc59, #loc60])
#loc248 = loc(fused[#loc62, #loc56])
#loc249 = loc(fused[#loc67, #loc65])
#loc250 = loc(fused[#loc69, #loc68])
#loc251 = loc(fused[#loc73, #loc70])
#loc252 = loc(fused[#loc78, #loc79])
#loc253 = loc(fused[#loc80, #loc81])
#loc254 = loc(fused[#loc82, #loc83])
#loc255 = loc(fused[#loc85, #loc86])
#loc256 = loc(fused[#loc87, #loc88])
#loc257 = loc(fused[#loc89, #loc90])
#loc258 = loc(fused[#loc89, #loc91])
#loc259 = loc(fused[#loc92, #loc93])
#loc260 = loc(fused[#loc96, #loc97])
#loc261 = loc(fused[#loc95, #loc97])
#loc262 = loc(fused[#loc94, #loc98])
#loc263 = loc(fused[#loc99, #loc98])
#loc264 = loc(fused[#loc100, #loc101])
#loc265 = loc(fused[#loc102, #loc103])
#loc266 = loc(fused[#loc104, #loc101])
#loc267 = loc(fused[#loc108, #loc109])
#loc268 = loc(fused[#loc111, #loc112, #loc113, #loc109])
#loc269 = loc(fused[#loc119, #loc120])
#loc270 = loc(fused[#loc122, #loc121])
#loc271 = loc(fused[#loc126, #loc127])
#loc272 = loc(fused[#loc130, #loc131])
#loc273 = loc(fused[#loc132, #loc133])
#loc274 = loc(fused[#loc135, #loc134])
#loc275 = loc(fused[#loc136, #loc137])
#loc276 = loc(fused[#loc139, #loc133])
#loc277 = loc(fused[#loc144, #loc142])
#loc278 = loc(fused[#loc146, #loc145])
#loc279 = loc(fused[#loc150, #loc147])
#loc280 = loc(fused[#loc155, #loc156])
#loc281 = loc(fused[#loc157, #loc158])
#loc282 = loc(fused[#loc159, #loc160])
#loc283 = loc(fused[#loc159, #loc161])
#loc284 = loc(fused[#loc162, #loc163])
#loc285 = loc(fused[#loc166, #loc167])
#loc286 = loc(fused[#loc165, #loc167])
#loc287 = loc(fused[#loc164, #loc168])
#loc288 = loc(fused[#loc169, #loc168])
#loc289 = loc(fused[#loc170, #loc171])
#loc290 = loc(fused[#loc172, #loc173])
#loc291 = loc(fused[#loc174, #loc171])
#loc292 = loc(fused[#loc178, #loc179])
#loc293 = loc(fused[#loc181, #loc179])
#loc294 = loc(fused[#loc186, #loc187])
#loc295 = loc(fused[#loc189, #loc188])
#loc296 = loc(fused[#loc193, #loc194])
#loc297 = loc(fused[#loc197, #loc198])
#loc298 = loc(fused[#loc199, #loc200])
#loc299 = loc(fused[#loc202, #loc201])
#loc300 = loc(fused[#loc203, #loc204])
#loc301 = loc(fused[#loc206, #loc200])
#loc302 = loc(fused[#loc211, #loc209])
#loc303 = loc(fused[#loc213, #loc212])
#loc304 = loc(fused[#loc217, #loc214])
