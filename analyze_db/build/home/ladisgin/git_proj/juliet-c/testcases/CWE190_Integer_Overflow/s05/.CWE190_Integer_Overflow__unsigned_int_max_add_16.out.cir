!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":111:10)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":111:14)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":111:20)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":111:32)
#loc132 = loc(fused[#loc44, #loc45])
#loc133 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc115)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc7)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
        cir.condition(%4) loc(#loc11)
      } do {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc12)
        %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc12)
        %5 = cir.const #cir.int<2> : !u32i loc(#loc12)
        %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc12)
        %7 = cir.const #cir.int<1> : !u32i loc(#loc12)
        %8 = cir.binop(add, %6, %7) : !u32i loc(#loc12)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc120)
        cir.break loc(#loc14)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%4) loc(#loc17)
      } do {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc22)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc21)
          %7 = cir.binop(add, %4, %6) : !u32i loc(#loc124)
          cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc123)
          %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc23)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc24)
        } loc(#loc122)
        cir.break loc(#loc25)
      } loc(#loc121)
    } loc(#loc121)
    cir.return loc(#loc4)
  } loc(#loc116)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc125)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc128)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc41)
  cir.func @main(%arg0: !s32i loc(fused[#loc44, #loc45]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc46, #loc47])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc43)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc48)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc50)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc50)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc38)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_16_good() : () -> () loc(#loc53)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc40)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_16_bad() : () -> () loc(#loc57)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc41)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.return %17 : !s32i loc(#loc136)
  } loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc62)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc67)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc139)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc71)
        cir.condition(%4) loc(#loc71)
      } do {
        %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
        %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc72)
        %5 = cir.const #cir.int<2> : !u32i loc(#loc72)
        %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc72)
        %7 = cir.const #cir.int<1> : !u32i loc(#loc72)
        %8 = cir.binop(add, %6, %7) : !u32i loc(#loc72)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc141)
        cir.break loc(#loc74)
      } loc(#loc140)
    } loc(#loc140)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc77)
        cir.condition(%4) loc(#loc77)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc80)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc81)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc81)
          %6 = cir.const #cir.int<2> : !u32i loc(#loc81)
          %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc81)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc81)
          %9 = cir.binop(add, %7, %8) : !u32i loc(#loc81)
          %10 = cir.cmp(lt, %3, %9) : !u32i, !cir.bool loc(#loc144)
          cir.if %10 {
            %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
            %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc87)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc86)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc86)
            %15 = cir.binop(add, %12, %14) : !u32i loc(#loc147)
            cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc146)
            %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc88)
            cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc89)
          } else {
            %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc62)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc62)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
          } loc(#loc145)
        } loc(#loc143)
        cir.break loc(#loc91)
      } loc(#loc142)
    } loc(#loc142)
    cir.return loc(#loc64)
  } loc(#loc137)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc96)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc100)
        cir.condition(%4) loc(#loc100)
      } do {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc101)
        %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc101)
        cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc152)
        cir.break loc(#loc103)
      } loc(#loc151)
    } loc(#loc151)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc106)
        cir.condition(%4) loc(#loc106)
      } do {
        cir.scope {
          %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc155)
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc110)
          %7 = cir.binop(add, %4, %6) : !u32i loc(#loc156)
          cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc155)
          %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc112)
          cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc113)
        } loc(#loc154)
        cir.break loc(#loc114)
      } loc(#loc153)
    } loc(#loc153)
    cir.return loc(#loc93)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":41:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":24:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":25:12)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":25:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":26:11)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":29:16)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":29:9)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":30:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":40:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":32:11)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":34:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":38:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":36:13)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":36:42)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":36:35)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":37:31)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":37:13)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":96:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":100:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":98:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":98:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":99:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":99:13)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":116:15)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":118:15)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":121:15)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":123:15)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":111:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":126:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":112:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":114:27)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":114:22)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":114:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":116:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":117:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":117:59)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":118:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":121:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":122:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":122:58)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":123:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":125:12)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":125:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":68:23)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":48:1)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":72:1)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":50:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":50:18)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":51:12)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":51:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":52:5)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":57:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":52:11)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":55:16)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":55:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":56:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":58:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":71:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":58:11)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":61:9)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":69:9)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":61:13)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":61:20)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":62:9)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":65:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":67:9)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":63:13)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":63:42)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":63:35)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":64:31)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":64:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":68:13)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":70:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":75:1)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":94:1)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":77:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":77:18)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":78:12)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":78:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":79:5)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":84:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":79:11)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":82:16)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":82:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":83:9)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":85:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":93:5)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":85:11)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":87:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":91:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":89:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":89:42)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":89:35)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":90:31)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":90:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_16.c":92:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc8, #loc7])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc13, #loc12])
#loc121 = loc(fused[#loc15, #loc16])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc22, #loc21])
#loc125 = loc(fused[#loc26, #loc27])
#loc126 = loc(fused[#loc28, #loc29])
#loc127 = loc(fused[#loc30, #loc31])
#loc128 = loc(fused[#loc32, #loc33])
#loc129 = loc(fused[#loc34, #loc35])
#loc130 = loc(fused[#loc36, #loc37])
#loc131 = loc(fused[#loc42, #loc43])
#loc134 = loc(fused[#loc53, #loc54])
#loc135 = loc(fused[#loc57, #loc58])
#loc136 = loc(fused[#loc61, #loc60])
#loc137 = loc(fused[#loc63, #loc64])
#loc138 = loc(fused[#loc65, #loc66])
#loc139 = loc(fused[#loc68, #loc67])
#loc140 = loc(fused[#loc69, #loc70])
#loc141 = loc(fused[#loc73, #loc72])
#loc142 = loc(fused[#loc75, #loc76])
#loc143 = loc(fused[#loc78, #loc79])
#loc144 = loc(fused[#loc80, #loc81])
#loc145 = loc(fused[#loc82, #loc83, #loc84, #loc79])
#loc146 = loc(fused[#loc85, #loc86])
#loc147 = loc(fused[#loc87, #loc86])
#loc148 = loc(fused[#loc92, #loc93])
#loc149 = loc(fused[#loc94, #loc95])
#loc150 = loc(fused[#loc97, #loc96])
#loc151 = loc(fused[#loc98, #loc99])
#loc152 = loc(fused[#loc102, #loc101])
#loc153 = loc(fused[#loc104, #loc105])
#loc154 = loc(fused[#loc107, #loc108])
#loc155 = loc(fused[#loc109, #loc110])
#loc156 = loc(fused[#loc111, #loc110])
