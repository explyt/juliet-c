!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_15.c":219:10)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_15.c":219:14)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_15.c":219:20)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_15.c":219:32)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:28)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:28)
#true = #cir.bool<true> : !cir.bool
#loc243 = loc(fused[#loc56, #loc57])
#loc244 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc226)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.br ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc233)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc25)
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc23)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc234)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc29)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc31)
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc32)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb15 loc(#loc35)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc24)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc7)
  } loc(#loc227)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc235)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc240)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc63)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE190_Integer_Overflow__int_max_square_15_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE190_Integer_Overflow__int_max_square_15_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc86)
    cir.br ^bb2 loc(#loc84)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc84)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc87)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.br ^bb6 loc(#loc90)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc91)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb6 loc(#loc93)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc85)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc254)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<8> : !s32i loc(#loc96)
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc94)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc97)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc98)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    cir.br ^bb26 loc(#loc100)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc255)
  ^bb13:  // pred: ^bb12
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc104)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc104)
    %15 = cir.cmp(gt, %10, %14) : !s32i, !cir.bool loc(#loc256)
    cir.brcond %15 ^bb14, ^bb19 loc(#loc105)
  ^bb14:  // pred: ^bb13
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %17 = cir.abs %16 poison : !s32i loc(#loc107)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc107)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc108)
    %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc109)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc109)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc108)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc108)
    %24 = cir.cmp(lt, %18, %23) : !s64i, !cir.bool loc(#loc257)
    cir.brcond %24 ^bb15, ^bb16 loc(#loc105)
  ^bb15:  // pred: ^bb14
    %25 = cir.const #true loc(#loc105)
    cir.br ^bb17(%25 : !cir.bool) loc(#loc105)
  ^bb16:  // pred: ^bb14
    %26 = cir.const #false loc(#loc105)
    cir.br ^bb17(%26 : !cir.bool) loc(#loc105)
  ^bb17(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_15.c":85:28)):  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc105)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20(%27 : !cir.bool) loc(#loc105)
  ^bb19:  // pred: ^bb13
    %28 = cir.const #false loc(#loc105)
    cir.br ^bb20(%28 : !cir.bool) loc(#loc105)
  ^bb20(%29: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_15.c":85:28)):  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc105)
  ^bb21:  // pred: ^bb20
    cir.brcond %29 ^bb22, ^bb23 loc(#loc258)
  ^bb22:  // pred: ^bb21
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc114)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc116)
    cir.br ^bb24 loc(#loc112)
  ^bb23:  // pred: ^bb21
    %34 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    cir.br ^bb24 loc(#loc102)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc102)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc118)
  ^bb26:  // 2 preds: ^bb11, ^bb25
    cir.br ^bb27 loc(#loc95)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc77)
  } loc(#loc248)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.br ^bb1 loc(#loc263)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc129)
    cir.br ^bb2 loc(#loc127)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc127)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc130)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc131)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.br ^bb6 loc(#loc133)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc135)
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc128)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc265)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc139)
    cir.br ^bb9 loc(#loc137)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb25 [
      7: ^bb11
    ] loc(#loc137)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc140)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc266)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc144)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc144)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc144)
    %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc144)
    %13 = cir.cmp(gt, %8, %12) : !s32i, !cir.bool loc(#loc267)
    cir.brcond %13 ^bb13, ^bb18 loc(#loc145)
  ^bb13:  // pred: ^bb12
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
    %15 = cir.abs %14 poison : !s32i loc(#loc147)
    %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc147)
    %17 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc148)
    %18 = cir.const #cir.int<2147483647> : !s32i loc(#loc149)
    %19 = cir.cast(int_to_float, %18 : !s32i), !cir.double loc(#loc149)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc148)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc148)
    %22 = cir.cmp(lt, %16, %21) : !s64i, !cir.bool loc(#loc268)
    cir.brcond %22 ^bb14, ^bb15 loc(#loc145)
  ^bb14:  // pred: ^bb13
    %23 = cir.const #true loc(#loc145)
    cir.br ^bb16(%23 : !cir.bool) loc(#loc145)
  ^bb15:  // pred: ^bb13
    %24 = cir.const #false loc(#loc145)
    cir.br ^bb16(%24 : !cir.bool) loc(#loc145)
  ^bb16(%25: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_15.c":119:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc145)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%25 : !cir.bool) loc(#loc145)
  ^bb18:  // pred: ^bb12
    %26 = cir.const #false loc(#loc145)
    cir.br ^bb19(%26 : !cir.bool) loc(#loc145)
  ^bb19(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_15.c":119:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc145)
  ^bb20:  // pred: ^bb19
    cir.brcond %27 ^bb21, ^bb22 loc(#loc269)
  ^bb21:  // pred: ^bb20
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc154)
    cir.store %30, %0 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %31 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc155)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc156)
    cir.br ^bb23 loc(#loc152)
  ^bb22:  // pred: ^bb20
    %32 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc157)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb23 loc(#loc142)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc142)
  ^bb24:  // pred: ^bb23
    cir.br ^bb26 loc(#loc159)
  ^bb25:  // pred: ^bb9
    %34 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb26 loc(#loc162)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc138)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc120)
  } loc(#loc259)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc272)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.br ^bb1 loc(#loc274)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc173)
    cir.br ^bb2 loc(#loc171)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc171)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc174)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc176)
    cir.br ^bb6 loc(#loc177)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc178)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.br ^bb6 loc(#loc180)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc172)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc276)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc183)
    cir.br ^bb9 loc(#loc181)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc181)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc184)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc277)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc187)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc189)
    cir.br ^bb13 loc(#loc186)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc190)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc191)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc191)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc192)
    cir.br ^bb15 loc(#loc193)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc182)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc164)
  } loc(#loc270)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc200)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb1 loc(#loc282)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc204)
    cir.br ^bb2 loc(#loc202)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc202)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc205)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2> : !s32i loc(#loc206)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.br ^bb6 loc(#loc208)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc209)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc209)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    cir.br ^bb6 loc(#loc211)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc203)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc284)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc214)
    cir.br ^bb9 loc(#loc212)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc212)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc215)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc285)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc218)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc218)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc220)
    cir.br ^bb13 loc(#loc217)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc221)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc222)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc222)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc223)
    cir.br ^bb15 loc(#loc224)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc213)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc195)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_15.c":37:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_15.c":24:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_15.c":54:1)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:29)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_15.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_15.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_15.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_15.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_15.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_15.c":39:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_15.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_15.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_15.c":33:16)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_15.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_15.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_15.c":37:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_15.c":38:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_15.c":40:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_15.c":53:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_15.c":40:12)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_15.c":42:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_15.c":43:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_15.c":47:5)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:22)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_15.c":46:22)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_15.c":46:9)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_15.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_15.c":51:19)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_15.c":51:9)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_15.c":52:9)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_15.c":202:1)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_15.c":208:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_15.c":204:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_15.c":204:14)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_15.c":205:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_15.c":205:14)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_15.c":206:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_15.c":206:14)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_15.c":207:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_15.c":207:14)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_15.c":224:15)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_15.c":226:15)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_15.c":229:15)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_15.c":231:15)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_15.c":219:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_15.c":234:1)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_15.c":220:1)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_15.c":222:27)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_15.c":222:22)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_15.c":222:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_15.c":224:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_15.c":225:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_15.c":225:53)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_15.c":226:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_15.c":229:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_15.c":230:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_15.c":230:52)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_15.c":231:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_15.c":233:12)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_15.c":233:5)
#loc74 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_15.c":92:23)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_15.c":61:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_15.c":96:1)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:33)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_15.c":63:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_15.c":63:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_15.c":65:12)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_15.c":65:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_15.c":66:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_15.c":76:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_15.c":66:12)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_15.c":68:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_15.c":70:16)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_15.c":70:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_15.c":71:9)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_15.c":74:19)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_15.c":74:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_15.c":75:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_15.c":77:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_15.c":95:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_15.c":77:12)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_15.c":79:5)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_15.c":81:19)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_15.c":81:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_15.c":82:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:9)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_15.c":93:9)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:13)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:20)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:35)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:31)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:49)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:62)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:69)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_15.c":86:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_15.c":89:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_15.c":91:9)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:26)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_15.c":88:26)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_15.c":88:13)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_15.c":92:13)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_15.c":94:9)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_15.c":99:1)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_15.c":134:1)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:13)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:33)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_15.c":101:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_15.c":101:9)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_15.c":103:12)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_15.c":103:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_15.c":104:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_15.c":114:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_15.c":104:12)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_15.c":106:5)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_15.c":108:16)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_15.c":108:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_15.c":109:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_15.c":112:19)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_15.c":112:9)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_15.c":113:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_15.c":115:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_15.c":133:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_15.c":115:12)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_15.c":117:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_15.c":127:9)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:13)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:20)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:35)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:31)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:49)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:62)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:69)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_15.c":120:9)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_15.c":123:9)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_15.c":125:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:26)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_15.c":122:26)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_15.c":122:13)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_15.c":126:23)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_15.c":126:13)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_15.c":128:9)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_15.c":131:19)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_15.c":131:9)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_15.c":132:9)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_15.c":137:1)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_15.c":167:1)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:9)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:29)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_15.c":139:5)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_15.c":139:9)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_15.c":141:12)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_15.c":141:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_15.c":142:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_15.c":152:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_15.c":142:12)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_15.c":144:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_15.c":146:19)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_15.c":146:9)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_15.c":147:9)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_15.c":150:16)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_15.c":150:9)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_15.c":151:9)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_15.c":153:5)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_15.c":166:5)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_15.c":153:12)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_15.c":155:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_15.c":156:5)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_15.c":160:5)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:22)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_15.c":159:22)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_15.c":159:9)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_15.c":161:5)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_15.c":164:19)
#loc192 = loc("CWE190_Integer_Overflow__int_max_square_15.c":164:9)
#loc193 = loc("CWE190_Integer_Overflow__int_max_square_15.c":165:9)
#loc194 = loc("CWE190_Integer_Overflow__int_max_square_15.c":170:1)
#loc195 = loc("CWE190_Integer_Overflow__int_max_square_15.c":200:1)
#loc196 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:9)
#loc197 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:29)
#loc198 = loc("CWE190_Integer_Overflow__int_max_square_15.c":172:5)
#loc199 = loc("CWE190_Integer_Overflow__int_max_square_15.c":172:9)
#loc200 = loc("CWE190_Integer_Overflow__int_max_square_15.c":174:12)
#loc201 = loc("CWE190_Integer_Overflow__int_max_square_15.c":174:5)
#loc202 = loc("CWE190_Integer_Overflow__int_max_square_15.c":175:5)
#loc203 = loc("CWE190_Integer_Overflow__int_max_square_15.c":185:5)
#loc204 = loc("CWE190_Integer_Overflow__int_max_square_15.c":175:12)
#loc205 = loc("CWE190_Integer_Overflow__int_max_square_15.c":177:5)
#loc206 = loc("CWE190_Integer_Overflow__int_max_square_15.c":179:16)
#loc207 = loc("CWE190_Integer_Overflow__int_max_square_15.c":179:9)
#loc208 = loc("CWE190_Integer_Overflow__int_max_square_15.c":180:9)
#loc209 = loc("CWE190_Integer_Overflow__int_max_square_15.c":183:19)
#loc210 = loc("CWE190_Integer_Overflow__int_max_square_15.c":183:9)
#loc211 = loc("CWE190_Integer_Overflow__int_max_square_15.c":184:9)
#loc212 = loc("CWE190_Integer_Overflow__int_max_square_15.c":186:5)
#loc213 = loc("CWE190_Integer_Overflow__int_max_square_15.c":199:5)
#loc214 = loc("CWE190_Integer_Overflow__int_max_square_15.c":186:12)
#loc215 = loc("CWE190_Integer_Overflow__int_max_square_15.c":188:5)
#loc216 = loc("CWE190_Integer_Overflow__int_max_square_15.c":189:5)
#loc217 = loc("CWE190_Integer_Overflow__int_max_square_15.c":193:5)
#loc218 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:22)
#loc219 = loc("CWE190_Integer_Overflow__int_max_square_15.c":192:22)
#loc220 = loc("CWE190_Integer_Overflow__int_max_square_15.c":192:9)
#loc221 = loc("CWE190_Integer_Overflow__int_max_square_15.c":194:5)
#loc222 = loc("CWE190_Integer_Overflow__int_max_square_15.c":197:19)
#loc223 = loc("CWE190_Integer_Overflow__int_max_square_15.c":197:9)
#loc224 = loc("CWE190_Integer_Overflow__int_max_square_15.c":198:9)
#loc225 = loc(fused[#loc1, #loc2])
#loc226 = loc(fused[#loc4, #loc5])
#loc227 = loc(fused[#loc6, #loc7])
#loc228 = loc(fused[#loc8, #loc9])
#loc229 = loc(fused[#loc10, #loc11])
#loc230 = loc(fused[#loc13, #loc12])
#loc231 = loc(fused[#loc14, #loc15])
#loc232 = loc(fused[#loc19, #loc18])
#loc233 = loc(fused[#loc23, #loc24])
#loc234 = loc(fused[#loc27, #loc28])
#loc235 = loc(fused[#loc36, #loc37])
#loc236 = loc(fused[#loc38, #loc39])
#loc237 = loc(fused[#loc40, #loc41])
#loc238 = loc(fused[#loc42, #loc43])
#loc239 = loc(fused[#loc44, #loc45])
#loc240 = loc(fused[#loc46, #loc47])
#loc241 = loc(fused[#loc48, #loc49])
#loc242 = loc(fused[#loc54, #loc55])
#loc245 = loc(fused[#loc65, #loc66])
#loc246 = loc(fused[#loc69, #loc70])
#loc247 = loc(fused[#loc73, #loc72])
#loc248 = loc(fused[#loc76, #loc77])
#loc249 = loc(fused[#loc78, #loc79])
#loc250 = loc(fused[#loc80, #loc81])
#loc251 = loc(fused[#loc83, #loc82])
#loc252 = loc(fused[#loc84, #loc85])
#loc253 = loc(fused[#loc89, #loc88])
#loc254 = loc(fused[#loc94, #loc95])
#loc255 = loc(fused[#loc101, #loc102])
#loc256 = loc(fused[#loc103, #loc104])
#loc257 = loc(fused[#loc107, #loc110])
#loc258 = loc(fused[#loc111, #loc112, #loc113, #loc102])
#loc259 = loc(fused[#loc119, #loc120])
#loc260 = loc(fused[#loc121, #loc122])
#loc261 = loc(fused[#loc123, #loc124])
#loc262 = loc(fused[#loc126, #loc125])
#loc263 = loc(fused[#loc127, #loc128])
#loc264 = loc(fused[#loc132, #loc131])
#loc265 = loc(fused[#loc137, #loc138])
#loc266 = loc(fused[#loc141, #loc142])
#loc267 = loc(fused[#loc143, #loc144])
#loc268 = loc(fused[#loc147, #loc150])
#loc269 = loc(fused[#loc151, #loc152, #loc153, #loc142])
#loc270 = loc(fused[#loc163, #loc164])
#loc271 = loc(fused[#loc165, #loc166])
#loc272 = loc(fused[#loc167, #loc168])
#loc273 = loc(fused[#loc170, #loc169])
#loc274 = loc(fused[#loc171, #loc172])
#loc275 = loc(fused[#loc179, #loc178])
#loc276 = loc(fused[#loc181, #loc182])
#loc277 = loc(fused[#loc185, #loc186])
#loc278 = loc(fused[#loc194, #loc195])
#loc279 = loc(fused[#loc196, #loc197])
#loc280 = loc(fused[#loc198, #loc199])
#loc281 = loc(fused[#loc201, #loc200])
#loc282 = loc(fused[#loc202, #loc203])
#loc283 = loc(fused[#loc207, #loc206])
#loc284 = loc(fused[#loc212, #loc213])
#loc285 = loc(fused[#loc216, #loc217])
