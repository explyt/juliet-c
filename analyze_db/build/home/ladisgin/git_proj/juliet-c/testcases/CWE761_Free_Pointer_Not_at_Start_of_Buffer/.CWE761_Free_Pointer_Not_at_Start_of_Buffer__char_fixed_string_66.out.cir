!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":27:80)
#loc9 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":27:97)
#loc38 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":49:84)
#loc39 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":49:101)
#loc76 = loc(fused[#loc8, #loc9])
#loc87 = loc(fused[#loc38, #loc39])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE761_Free_Pointer_Not_at_Start_of_Buffer/CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"We have a match!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc74)
  cir.func @CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc76)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc12)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc14)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc11)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc77)
    cir.scope {
      cir.for : cond {
        %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
        %10 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc18)
        %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc18)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc19)
        %13 = cir.cmp(ne, %11, %12) : !s32i, !cir.bool loc(#loc79)
        cir.condition(%13) loc(#loc20)
      } body {
        cir.scope {
          cir.scope {
            %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
            %10 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc25)
            %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc25)
            %12 = cir.const #cir.int<83> : !s32i loc(#loc26)
            %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc82)
            cir.if %13 {
              %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc28)
              cir.break loc(#loc29)
            } loc(#loc83)
          } loc(#loc81)
        } loc(#loc80)
        cir.yield loc(#loc16)
      } step {
        %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
        %10 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!s8i>, %10 : !s32i), !cir.ptr<!s8i> loc(#loc84)
        cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
        cir.yield loc(#loc78)
      } loc(#loc78)
    } loc(#loc78)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc32)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc32)
    cir.return loc(#loc7)
  } loc(#loc75)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc85)
  cir.func @CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b_goodB2GSink(%arg0: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc38, #loc39])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc88)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc43)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc44)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s8i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s8i>> loc(#loc41)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    cir.store %5, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc88)
    cir.scope {
      %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc90)
      cir.scope {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc51)
        cir.store %11, %6 : !u64i, !cir.ptr<!u64i> loc(#loc92)
        cir.for : cond {
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc53)
          %13 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc54)
          %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
          %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc54)
          %16 = cir.cmp(lt, %12, %15) : !u64i, !cir.bool loc(#loc93)
          cir.condition(%16) loc(#loc57)
        } body {
          cir.scope {
            cir.scope {
              %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
              %13 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc62)
              %14 = cir.ptr_stride(%12 : !cir.ptr<!s8i>, %13 : !u64i), !cir.ptr<!s8i> loc(#loc63)
              %15 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc61)
              %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc61)
              %17 = cir.const #cir.int<83> : !s32i loc(#loc64)
              %18 = cir.cmp(eq, %16, %17) : !s32i, !cir.bool loc(#loc96)
              cir.if %18 {
                %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc66)
                %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc66)
                cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc67)
                cir.break loc(#loc68)
              } loc(#loc97)
            } loc(#loc95)
          } loc(#loc94)
          cir.yield loc(#loc50)
        } step {
          %12 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc70)
          cir.store %13, %6 : !u64i, !cir.ptr<!u64i> loc(#loc98)
          cir.yield loc(#loc91)
        } loc(#loc91)
      } loc(#loc91)
      %7 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc71)
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
      cir.call @free(%9) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    } loc(#loc89)
    cir.return loc(#loc37)
  } loc(#loc86)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE761_Free_Pointer_Not_at_Start_of_Buffer/CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":37:23)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":27:1)
#loc7 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":42:1)
#loc10 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":30:5)
#loc11 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":30:30)
#loc12 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":28:1)
#loc13 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":30:19)
#loc14 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":30:29)
#loc15 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:5)
#loc16 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":40:5)
#loc17 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:13)
#loc18 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:12)
#loc19 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:21)
#loc20 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:18)
#loc21 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":34:5)
#loc22 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":35:9)
#loc23 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":39:9)
#loc24 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":35:14)
#loc25 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":35:13)
#loc26 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":35:22)
#loc27 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":36:9)
#loc28 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":37:13)
#loc29 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":38:13)
#loc30 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:31)
#loc31 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":33:27)
#loc32 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":41:5)
#loc33 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":41:10)
#loc34 = loc("/usr/include/string.h":407:1)
#loc35 = loc("/usr/include/string.h":408:33)
#loc36 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":49:1)
#loc37 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":65:1)
#loc40 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":51:5)
#loc41 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":51:30)
#loc42 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":50:1)
#loc43 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":51:19)
#loc44 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":51:29)
#loc45 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":52:5)
#loc46 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":64:5)
#loc47 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":53:9)
#loc48 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":53:16)
#loc49 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:9)
#loc50 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":62:9)
#loc51 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:16)
#loc52 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:14)
#loc53 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:19)
#loc54 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:23)
#loc55 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:30)
#loc56 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:34)
#loc57 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:21)
#loc58 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":56:9)
#loc59 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":57:13)
#loc60 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":61:13)
#loc61 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":57:17)
#loc62 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":57:22)
#loc63 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":57:23)
#loc64 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":57:28)
#loc65 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":58:13)
#loc66 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":59:27)
#loc67 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":59:17)
#loc68 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":60:17)
#loc69 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:38)
#loc70 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":55:37)
#loc71 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":63:9)
#loc72 = loc("CWE761_Free_Pointer_Not_at_Start_of_Buffer__char_fixed_string_66b.c":63:14)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc4, #loc5])
#loc75 = loc(fused[#loc6, #loc7])
#loc77 = loc(fused[#loc10, #loc11])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc18, #loc19])
#loc80 = loc(fused[#loc21, #loc16])
#loc81 = loc(fused[#loc22, #loc23])
#loc82 = loc(fused[#loc25, #loc26])
#loc83 = loc(fused[#loc27, #loc23])
#loc84 = loc(fused[#loc31, #loc30])
#loc85 = loc(fused[#loc34, #loc35])
#loc86 = loc(fused[#loc36, #loc37])
#loc88 = loc(fused[#loc40, #loc41])
#loc89 = loc(fused[#loc45, #loc46])
#loc90 = loc(fused[#loc47, #loc48])
#loc91 = loc(fused[#loc49, #loc50])
#loc92 = loc(fused[#loc52, #loc51])
#loc93 = loc(fused[#loc53, #loc56])
#loc94 = loc(fused[#loc58, #loc50])
#loc95 = loc(fused[#loc59, #loc60])
#loc96 = loc(fused[#loc61, #loc64])
#loc97 = loc(fused[#loc65, #loc60])
#loc98 = loc(fused[#loc70, #loc69])
