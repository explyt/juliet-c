!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":88:10)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":88:14)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":88:20)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":88:32)
#loc164 = loc(fused[#loc72, #loc73])
#loc165 = loc(fused[#loc74, #loc75])
!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType = !cir.struct<union "CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType" {!cir.ptr<!s32i>, !cir.ptr<!s32i>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.func private @printIntLine(!s32i) loc(#loc137)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc138)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc140)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc142)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc143)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc144)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc26)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc148)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc149)
    } loc(#loc147)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc32)
    cir.store %10, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc150)
    cir.scope {
      %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc38)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
      cir.store %14, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc154)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc154)
        cir.store %16, %15 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc154)
        %17 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
        %19 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc44)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc45)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc45)
        %23 = cir.const #cir.int<4> : !u64i loc(#loc155)
        %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc156)
        cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc157)
        %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc52)
        %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc53)
        %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc54)
        %30 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc55)
        cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc54)
      } loc(#loc153)
    } loc(#loc151)
    cir.return loc(#loc10)
  } loc(#loc139)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc160)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc69)
  cir.func @main(%arg0: !s32i loc(fused[#loc72, #loc73]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc74, #loc75])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc76)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc78)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc78)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc79)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc66)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_good() : () -> () loc(#loc81)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc68)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_bad() : () -> () loc(#loc85)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc69)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType, !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc96)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc99)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc99)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc173)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc174)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc175)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !cir.bool loc(#loc178)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc110)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc111)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
      } loc(#loc179)
    } loc(#loc177)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
    %11 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc32)
    cir.store %10, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
    cir.scope {
      %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc182)
      %13 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34_unionType> -> !cir.ptr<!cir.ptr<!s32i>> loc(#loc38)
      %14 = cir.load %13 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      cir.store %14, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
      cir.scope {
        %15 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc184)
        %16 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc184)
        cir.store %16, %15 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc184)
        %17 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
        %19 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc123)
        %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc123)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc124)
        %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc124)
        %23 = cir.const #cir.int<4> : !u64i loc(#loc185)
        %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc186)
        cir.libc.memmove %24 bytes from %20 to %18 : !cir.ptr<!void>, !u64i loc(#loc187)
        %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc131)
        %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc129)
        cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc132)
        %29 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
        %30 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
        cir.call @free(%31) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc91)
  } loc(#loc169)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":46:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":29:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":30:74)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:19)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:26)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:29)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:39)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:40)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":33:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":34:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":35:26)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":21:11)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":35:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":36:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":45:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":37:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":37:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":22:11)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":38:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":44:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":39:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":39:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:35)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:39)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:49)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":41:50)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":42:26)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":42:31)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":42:32)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":42:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":43:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":43:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":74:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":77:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":76:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":76:13)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":93:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":95:15)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":98:15)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":100:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":88:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":103:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":89:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":91:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":91:22)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":91:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":93:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":94:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":94:69)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":95:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":98:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":99:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":99:68)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":100:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":102:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":102:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":53:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":72:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":55:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":55:11)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":56:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":56:74)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":57:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":57:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:19)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:30)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:40)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:41)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":59:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:23)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:24)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":60:29)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":61:26)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":61:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":62:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":71:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":63:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":63:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":64:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":70:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":65:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":65:33)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:35)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:39)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:49)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":67:50)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":68:26)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":68:31)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":68:32)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":68:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":69:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int_memmove_34.c":69:18)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc11, #loc12])
#loc141 = loc(fused[#loc13, #loc14])
#loc142 = loc(fused[#loc16, #loc15])
#loc143 = loc(fused[#loc19, #loc20])
#loc144 = loc(fused[#loc18, #loc20])
#loc145 = loc(fused[#loc17, #loc21])
#loc146 = loc(fused[#loc22, #loc21])
#loc147 = loc(fused[#loc23, #loc24])
#loc148 = loc(fused[#loc25, #loc26])
#loc149 = loc(fused[#loc27, #loc24])
#loc150 = loc(fused[#loc33, #loc31])
#loc151 = loc(fused[#loc34, #loc35])
#loc152 = loc(fused[#loc36, #loc37])
#loc153 = loc(fused[#loc39, #loc40])
#loc154 = loc(fused[#loc41, #loc42])
#loc155 = loc(fused[#loc46, #loc47])
#loc156 = loc(fused[#loc45, #loc47])
#loc157 = loc(fused[#loc48, #loc49])
#loc158 = loc(fused[#loc56, #loc57])
#loc159 = loc(fused[#loc58, #loc59])
#loc160 = loc(fused[#loc60, #loc61])
#loc161 = loc(fused[#loc62, #loc63])
#loc162 = loc(fused[#loc64, #loc65])
#loc163 = loc(fused[#loc70, #loc71])
#loc166 = loc(fused[#loc81, #loc82])
#loc167 = loc(fused[#loc85, #loc86])
#loc168 = loc(fused[#loc89, #loc88])
#loc169 = loc(fused[#loc90, #loc91])
#loc170 = loc(fused[#loc92, #loc93])
#loc171 = loc(fused[#loc94, #loc95])
#loc172 = loc(fused[#loc97, #loc96])
#loc173 = loc(fused[#loc100, #loc101])
#loc174 = loc(fused[#loc99, #loc101])
#loc175 = loc(fused[#loc98, #loc102])
#loc176 = loc(fused[#loc103, #loc102])
#loc177 = loc(fused[#loc104, #loc105])
#loc178 = loc(fused[#loc106, #loc107])
#loc179 = loc(fused[#loc108, #loc105])
#loc180 = loc(fused[#loc113, #loc112])
#loc181 = loc(fused[#loc114, #loc115])
#loc182 = loc(fused[#loc116, #loc117])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc120, #loc121])
#loc185 = loc(fused[#loc125, #loc126])
#loc186 = loc(fused[#loc124, #loc126])
#loc187 = loc(fused[#loc127, #loc128])
