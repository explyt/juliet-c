!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc261)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc262)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc263)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc10)
  cir.func private @printIntLine(!s32i) loc(#loc265)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc17)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc268)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc21)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc271)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc29)
              %5 = cir.const #cir.int<20> : !s32i loc(#loc30)
              %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc262)
              %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
              %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
              %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
              %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
              %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc273)
              cir.if %11 {
                %12 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc37)
                %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc38)
                %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc38)
                cir.store %14, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc275)
              } else {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc41)
              } loc(#loc274)
            } loc(#loc272)
          } loc(#loc270)
          cir.break loc(#loc42)
        } loc(#loc22)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc10)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc10)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc44)
          cir.break loc(#loc45)
        } loc(#loc43)
        cir.yield loc(#loc19)
      } loc(#loc19)
    } loc(#loc269)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc48)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
            %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc54)
            %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc55)
            %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc55)
            %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc279)
            %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc279)
            cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc57)
          } loc(#loc277)
          cir.break loc(#loc58)
        } loc(#loc49)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc61)
          cir.break loc(#loc62)
        } loc(#loc59)
        cir.yield loc(#loc46)
      } loc(#loc46)
    } loc(#loc276)
    cir.return loc(#loc14)
  } loc(#loc266)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fgets_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc281)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc282)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc283)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc284)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc64)
  } loc(#loc280)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc78)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc287)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc82)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc290)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc90)
              %5 = cir.const #cir.int<20> : !s32i loc(#loc91)
              %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc262)
              %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
              %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc93)
              %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
              %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc94)
              %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc292)
              cir.if %11 {
                %12 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc98)
                %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc99)
                %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc99)
                cir.store %14, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc294)
              } else {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc103)
              } loc(#loc293)
            } loc(#loc291)
          } loc(#loc289)
          cir.break loc(#loc104)
        } loc(#loc83)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc106)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc106)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          cir.break loc(#loc108)
        } loc(#loc105)
        cir.yield loc(#loc80)
      } loc(#loc80)
    } loc(#loc288)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc111)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc114)
          cir.break loc(#loc115)
        } loc(#loc112)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc119)
            %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc119)
            %5 = cir.fabs %4 : !cir.double loc(#loc119)
            %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc120)
            %7 = cir.cmp(gt, %5, %6) : !cir.double, !cir.bool loc(#loc297)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc299)
              %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc127)
              %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc128)
              %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc128)
              %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc300)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc300)
              cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc299)
              %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc129)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc130)
            } else {
              %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc73)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc73)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc131)
            } loc(#loc298)
          } loc(#loc296)
          cir.break loc(#loc132)
        } loc(#loc116)
        cir.yield loc(#loc109)
      } loc(#loc109)
    } loc(#loc295)
    cir.return loc(#loc75)
  } loc(#loc285)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc137)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc303)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc141)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc306)
            cir.scope {
              %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc149)
              %5 = cir.const #cir.int<20> : !s32i loc(#loc150)
              %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc262)
              %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc151)
              %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc152)
              %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc153)
              %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
              %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc308)
              cir.if %11 {
                %12 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc157)
                %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc158)
                %14 = cir.cast(floating, %13 : !cir.double), !cir.float loc(#loc158)
                cir.store %14, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc310)
              } else {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc161)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc161)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc162)
              } loc(#loc309)
            } loc(#loc307)
          } loc(#loc305)
          cir.break loc(#loc163)
        } loc(#loc142)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc165)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc165)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc166)
          cir.break loc(#loc167)
        } loc(#loc164)
        cir.yield loc(#loc139)
      } loc(#loc139)
    } loc(#loc304)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc170)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc174)
            %4 = cir.cast(floating, %3 : !cir.float), !cir.double loc(#loc174)
            %5 = cir.fabs %4 : !cir.double loc(#loc174)
            %6 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc175)
            %7 = cir.cmp(gt, %5, %6) : !cir.double, !cir.bool loc(#loc313)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc315)
              %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc182)
              %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc183)
              %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc183)
              %12 = cir.binop(div, %9, %11) : !cir.double loc(#loc316)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc316)
              cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc185)
            } else {
              %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc186)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc186)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc187)
            } loc(#loc314)
          } loc(#loc312)
          cir.break loc(#loc188)
        } loc(#loc171)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc191)
          cir.break loc(#loc192)
        } loc(#loc189)
        cir.yield loc(#loc168)
      } loc(#loc168)
    } loc(#loc311)
    cir.return loc(#loc134)
  } loc(#loc301)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc197)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc319)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc201)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc203)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc203)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc204)
          cir.break loc(#loc205)
        } loc(#loc202)
        cir.case(default, []) {
          %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc207)
          cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc321)
          cir.break loc(#loc209)
        } loc(#loc206)
        cir.yield loc(#loc199)
      } loc(#loc199)
    } loc(#loc320)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc212)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc324)
            %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc218)
            %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc219)
            %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc219)
            %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc325)
            %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc325)
            cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc324)
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc220)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc221)
          } loc(#loc323)
          cir.break loc(#loc222)
        } loc(#loc213)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc224)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc224)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc225)
          cir.break loc(#loc226)
        } loc(#loc223)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc322)
    cir.return loc(#loc194)
  } loc(#loc317)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc327)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc231)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc328)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc235)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc237)
          cir.store %3, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc330)
          cir.break loc(#loc239)
        } loc(#loc236)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc241)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc241)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc242)
          cir.break loc(#loc243)
        } loc(#loc240)
        cir.yield loc(#loc233)
      } loc(#loc233)
    } loc(#loc329)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc246)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc333)
            %4 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc252)
            %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc253)
            %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc253)
            %7 = cir.binop(div, %4, %6) : !cir.double loc(#loc334)
            %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc334)
            cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc254)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc255)
          } loc(#loc332)
          cir.break loc(#loc256)
        } loc(#loc247)
        cir.case(default, []) {
          %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc258)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc258)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc259)
          cir.break loc(#loc260)
        } loc(#loc257)
        cir.yield loc(#loc244)
      } loc(#loc244)
    } loc(#loc331)
    cir.return loc(#loc228)
  } loc(#loc326)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fgets_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":44:23)
#loc10 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":50:19)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc13 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":26:1)
#loc14 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":67:1)
#loc15 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":28:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":28:11)
#loc17 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":30:12)
#loc18 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":30:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":31:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":52:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":31:12)
#loc22 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":33:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":34:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":46:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":35:9)
#loc26 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":35:41)
#loc27 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":45:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:19)
#loc30 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:32)
#loc31 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:49)
#loc32 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":37:59)
#loc34 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":38:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":41:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":43:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":40:32)
#loc38 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":40:27)
#loc39 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":40:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":40:43)
#loc41 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":44:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":47:5)
#loc43 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":48:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":50:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":51:9)
#loc46 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":53:5)
#loc47 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":66:5)
#loc48 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":53:12)
#loc49 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":55:5)
#loc50 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":56:5)
#loc51 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":60:5)
#loc52 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":58:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":58:40)
#loc54 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":58:28)
#loc55 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":58:36)
#loc56 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":59:22)
#loc57 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":59:9)
#loc58 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":61:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":62:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":64:19)
#loc61 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":64:9)
#loc62 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":65:9)
#loc63 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":237:1)
#loc64 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":243:1)
#loc65 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":239:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":239:14)
#loc67 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":240:5)
#loc68 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":240:14)
#loc69 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":241:5)
#loc70 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":241:14)
#loc71 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":242:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":242:14)
#loc73 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":116:23)
#loc74 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":74:1)
#loc75 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":120:1)
#loc76 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":76:5)
#loc77 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":76:11)
#loc78 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":78:12)
#loc79 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":78:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":79:5)
#loc81 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":100:5)
#loc82 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":79:12)
#loc83 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":81:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":82:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":94:5)
#loc86 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":83:9)
#loc87 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":83:41)
#loc88 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:9)
#loc89 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":93:9)
#loc90 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:19)
#loc91 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:32)
#loc92 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:49)
#loc93 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:13)
#loc94 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":85:59)
#loc95 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":86:9)
#loc96 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":89:9)
#loc97 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":91:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":88:32)
#loc99 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":88:27)
#loc100 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":88:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":88:43)
#loc102 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":92:23)
#loc103 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":92:13)
#loc104 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":95:5)
#loc105 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":96:5)
#loc106 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":98:19)
#loc107 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":98:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":99:9)
#loc109 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":101:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":119:5)
#loc111 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":101:12)
#loc112 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":103:5)
#loc113 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":105:19)
#loc114 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":105:9)
#loc115 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":106:9)
#loc116 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":107:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":109:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":117:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":109:17)
#loc120 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":109:25)
#loc121 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":109:12)
#loc122 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":110:9)
#loc123 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":113:9)
#loc124 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":115:9)
#loc125 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":111:13)
#loc126 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":111:44)
#loc127 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":111:32)
#loc128 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":111:40)
#loc129 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":112:26)
#loc130 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":112:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":116:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":118:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":123:1)
#loc134 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":169:1)
#loc135 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":125:5)
#loc136 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":125:11)
#loc137 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":127:12)
#loc138 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":127:5)
#loc139 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":128:5)
#loc140 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":149:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":128:12)
#loc142 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":130:5)
#loc143 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":131:5)
#loc144 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":143:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":132:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":132:41)
#loc147 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:9)
#loc148 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":142:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:19)
#loc150 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:32)
#loc151 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:49)
#loc152 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:13)
#loc153 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":134:59)
#loc154 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":135:9)
#loc155 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":138:9)
#loc156 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":140:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":137:32)
#loc158 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":137:27)
#loc159 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":137:13)
#loc160 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":137:43)
#loc161 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":141:23)
#loc162 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":141:13)
#loc163 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":144:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":145:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":147:19)
#loc166 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":147:9)
#loc167 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":148:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":150:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":168:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":150:12)
#loc171 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":152:5)
#loc172 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":154:9)
#loc173 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":162:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":154:17)
#loc175 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":154:25)
#loc176 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":154:12)
#loc177 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":155:9)
#loc178 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":158:9)
#loc179 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":160:9)
#loc180 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":156:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":156:44)
#loc182 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":156:32)
#loc183 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":156:40)
#loc184 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":157:26)
#loc185 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":157:13)
#loc186 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":161:23)
#loc187 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":161:13)
#loc188 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":163:9)
#loc189 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":164:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":166:19)
#loc191 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":166:9)
#loc192 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":167:9)
#loc193 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":172:1)
#loc194 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":202:1)
#loc195 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":174:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":174:11)
#loc197 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":176:12)
#loc198 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":176:5)
#loc199 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":177:5)
#loc200 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":187:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":177:12)
#loc202 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":179:5)
#loc203 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":181:19)
#loc204 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":181:9)
#loc205 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":182:9)
#loc206 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":183:5)
#loc207 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":185:16)
#loc208 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":185:9)
#loc209 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":186:9)
#loc210 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":188:5)
#loc211 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":201:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":188:12)
#loc213 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":190:5)
#loc214 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":191:5)
#loc215 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":195:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":193:9)
#loc217 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":193:40)
#loc218 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":193:28)
#loc219 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":193:36)
#loc220 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":194:22)
#loc221 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":194:9)
#loc222 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":196:5)
#loc223 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":197:5)
#loc224 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":199:19)
#loc225 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":199:9)
#loc226 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":200:9)
#loc227 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":205:1)
#loc228 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":235:1)
#loc229 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":207:5)
#loc230 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":207:11)
#loc231 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":209:12)
#loc232 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":209:5)
#loc233 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":210:5)
#loc234 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":220:5)
#loc235 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":210:12)
#loc236 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":212:5)
#loc237 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":214:16)
#loc238 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":214:9)
#loc239 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":215:9)
#loc240 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":216:5)
#loc241 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":218:19)
#loc242 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":218:9)
#loc243 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":219:9)
#loc244 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":221:5)
#loc245 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":234:5)
#loc246 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":221:12)
#loc247 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":223:5)
#loc248 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":224:5)
#loc249 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":228:5)
#loc250 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":226:9)
#loc251 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":226:40)
#loc252 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":226:28)
#loc253 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":226:36)
#loc254 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":227:22)
#loc255 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":227:9)
#loc256 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":229:5)
#loc257 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":230:5)
#loc258 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":232:19)
#loc259 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":232:9)
#loc260 = loc("CWE369_Divide_by_Zero__float_fgets_15.c":233:9)
#loc261 = loc(fused[#loc1, #loc2])
#loc262 = loc(fused[#loc3, #loc4])
#loc263 = loc(fused[#loc5, #loc6])
#loc264 = loc(fused[#loc7, #loc8])
#loc265 = loc(fused[#loc11, #loc12])
#loc266 = loc(fused[#loc13, #loc14])
#loc267 = loc(fused[#loc15, #loc16])
#loc268 = loc(fused[#loc18, #loc17])
#loc269 = loc(fused[#loc19, #loc20])
#loc270 = loc(fused[#loc23, #loc24])
#loc271 = loc(fused[#loc25, #loc26])
#loc272 = loc(fused[#loc27, #loc28])
#loc273 = loc(fused[#loc32, #loc33])
#loc274 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc275 = loc(fused[#loc39, #loc40])
#loc276 = loc(fused[#loc46, #loc47])
#loc277 = loc(fused[#loc50, #loc51])
#loc278 = loc(fused[#loc52, #loc53])
#loc279 = loc(fused[#loc54, #loc55])
#loc280 = loc(fused[#loc63, #loc64])
#loc281 = loc(fused[#loc65, #loc66])
#loc282 = loc(fused[#loc67, #loc68])
#loc283 = loc(fused[#loc69, #loc70])
#loc284 = loc(fused[#loc71, #loc72])
#loc285 = loc(fused[#loc74, #loc75])
#loc286 = loc(fused[#loc76, #loc77])
#loc287 = loc(fused[#loc79, #loc78])
#loc288 = loc(fused[#loc80, #loc81])
#loc289 = loc(fused[#loc84, #loc85])
#loc290 = loc(fused[#loc86, #loc87])
#loc291 = loc(fused[#loc88, #loc89])
#loc292 = loc(fused[#loc93, #loc94])
#loc293 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc294 = loc(fused[#loc100, #loc101])
#loc295 = loc(fused[#loc109, #loc110])
#loc296 = loc(fused[#loc117, #loc118])
#loc297 = loc(fused[#loc121, #loc120])
#loc298 = loc(fused[#loc122, #loc123, #loc124, #loc118])
#loc299 = loc(fused[#loc125, #loc126])
#loc300 = loc(fused[#loc127, #loc128])
#loc301 = loc(fused[#loc133, #loc134])
#loc302 = loc(fused[#loc135, #loc136])
#loc303 = loc(fused[#loc138, #loc137])
#loc304 = loc(fused[#loc139, #loc140])
#loc305 = loc(fused[#loc143, #loc144])
#loc306 = loc(fused[#loc145, #loc146])
#loc307 = loc(fused[#loc147, #loc148])
#loc308 = loc(fused[#loc152, #loc153])
#loc309 = loc(fused[#loc154, #loc155, #loc156, #loc148])
#loc310 = loc(fused[#loc159, #loc160])
#loc311 = loc(fused[#loc168, #loc169])
#loc312 = loc(fused[#loc172, #loc173])
#loc313 = loc(fused[#loc176, #loc175])
#loc314 = loc(fused[#loc177, #loc178, #loc179, #loc173])
#loc315 = loc(fused[#loc180, #loc181])
#loc316 = loc(fused[#loc182, #loc183])
#loc317 = loc(fused[#loc193, #loc194])
#loc318 = loc(fused[#loc195, #loc196])
#loc319 = loc(fused[#loc198, #loc197])
#loc320 = loc(fused[#loc199, #loc200])
#loc321 = loc(fused[#loc208, #loc207])
#loc322 = loc(fused[#loc210, #loc211])
#loc323 = loc(fused[#loc214, #loc215])
#loc324 = loc(fused[#loc216, #loc217])
#loc325 = loc(fused[#loc218, #loc219])
#loc326 = loc(fused[#loc227, #loc228])
#loc327 = loc(fused[#loc229, #loc230])
#loc328 = loc(fused[#loc232, #loc231])
#loc329 = loc(fused[#loc233, #loc234])
#loc330 = loc(fused[#loc238, #loc237])
#loc331 = loc(fused[#loc244, #loc245])
#loc332 = loc(fused[#loc248, #loc249])
#loc333 = loc(fused[#loc250, #loc251])
#loc334 = loc(fused[#loc252, #loc253])
