!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":32:16)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":169:10)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":169:14)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":169:20)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":169:32)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":57:16)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:28)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":88:16)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:28)
#true = #cir.bool<true> : !cir.bool
#loc231 = loc(fused[#loc54, #loc55])
#loc232 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc207)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc208)
  cir.func private @printIntLine(!s32i) loc(#loc209)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_14_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc13)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc18)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc20)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc20)
    cir.br ^bb5(%22 : !u32i) loc(#loc20)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc20)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc20)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc20)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc20)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc20)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc20)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc20)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc20)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc20)
    cir.br ^bb5(%38 : !u32i) loc(#loc20)
  ^bb5(%39: !u32i loc("CWE190_Integer_Overflow__int_rand_square_14.c":32:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc20)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc218)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %44 ^bb10, ^bb13 loc(#loc220)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc221)
  ^bb11:  // pred: ^bb10
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    %47 = cir.binop(mul, %45, %46) nsw : !s32i loc(#loc29)
    cir.store %47, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc31)
    cir.br ^bb12 loc(#loc28)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc8)
  } loc(#loc210)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc227)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc228)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_14_good : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call @CWE190_Integer_Overflow__int_rand_square_14_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_square_14_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call @CWE190_Integer_Overflow__int_rand_square_14_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %17 : !s32i loc(#loc235)
  } loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.br ^bb1 loc(#loc240)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc241)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc242)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc88)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc88)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc88)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc88)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc88)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc88)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc88)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc88)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc88)
    cir.br ^bb5(%22 : !u32i) loc(#loc88)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc88)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc88)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc88)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc88)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc88)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc88)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc88)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc88)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc88)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc88)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc88)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc88)
    cir.br ^bb5(%38 : !u32i) loc(#loc88)
  ^bb5(%39: !u32i loc("CWE190_Integer_Overflow__int_rand_square_14.c":57:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc88)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.br ^bb7 loc(#loc84)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc244)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc93)
    %44 = cir.cmp(ne, %42, %43) : !s32i, !cir.bool loc(#loc245)
    cir.brcond %44 ^bb10, ^bb11 loc(#loc246)
  ^bb10:  // pred: ^bb9
    %45 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb25 loc(#loc95)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    %47 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %48 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
    %49 = cir.unary(minus, %48) : !s32i, !s32i loc(#loc101)
    %50 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %51 = cir.binop(sub, %49, %50) nsw : !s32i loc(#loc101)
    %52 = cir.cmp(gt, %47, %51) : !s32i, !cir.bool loc(#loc248)
    cir.brcond %52 ^bb13, ^bb18 loc(#loc102)
  ^bb13:  // pred: ^bb12
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %54 = cir.abs %53 poison : !s32i loc(#loc104)
    %55 = cir.cast(integral, %54 : !s32i), !s64i loc(#loc104)
    %56 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc105)
    %57 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %58 = cir.cast(int_to_float, %57 : !s32i), !cir.double loc(#loc106)
    %59 = cir.call @sqrt(%58) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc105)
    %60 = cir.cast(float_to_int, %59 : !cir.double), !s64i loc(#loc105)
    %61 = cir.cmp(lt, %55, %60) : !s64i, !cir.bool loc(#loc249)
    cir.brcond %61 ^bb14, ^bb15 loc(#loc102)
  ^bb14:  // pred: ^bb13
    %62 = cir.const #true loc(#loc102)
    cir.br ^bb16(%62 : !cir.bool) loc(#loc102)
  ^bb15:  // pred: ^bb13
    %63 = cir.const #false loc(#loc102)
    cir.br ^bb16(%63 : !cir.bool) loc(#loc102)
  ^bb16(%64: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:28)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc102)
  ^bb17:  // pred: ^bb16
    cir.br ^bb19(%64 : !cir.bool) loc(#loc102)
  ^bb18:  // pred: ^bb12
    %65 = cir.const #false loc(#loc102)
    cir.br ^bb19(%65 : !cir.bool) loc(#loc102)
  ^bb19(%66: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc102)
  ^bb20:  // pred: ^bb19
    cir.brcond %66 ^bb21, ^bb22 loc(#loc250)
  ^bb21:  // pred: ^bb20
    %67 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %69 = cir.binop(mul, %67, %68) nsw : !s32i loc(#loc111)
    cir.store %69, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %70 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%70) : (!s32i) -> () loc(#loc113)
    cir.br ^bb23 loc(#loc109)
  ^bb22:  // pred: ^bb20
    %71 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
    %72 = cir.cast(array_to_ptrdecay, %71 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb23 loc(#loc99)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc99)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc91)
  ^bb25:  // 2 preds: ^bb10, ^bb24
    cir.br ^bb26 loc(#loc91)
  ^bb26:  // pred: ^bb25
    cir.return loc(#loc76)
  } loc(#loc236)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb1 loc(#loc255)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc126)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc256)
    cir.brcond %6 ^bb2, ^bb7 loc(#loc257)
  ^bb2:  // pred: ^bb1
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc128)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %10 ^bb3, ^bb4 loc(#loc128)
  ^bb3:  // pred: ^bb2
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc128)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc128)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc128)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc128)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc128)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc128)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc128)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc128)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc128)
    cir.br ^bb5(%22 : !u32i) loc(#loc128)
  ^bb4:  // pred: ^bb2
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc128)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc128)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc128)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc128)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc128)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc128)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc128)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc128)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc128)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc128)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc128)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc128)
    cir.br ^bb5(%38 : !u32i) loc(#loc128)
  ^bb5(%39: !u32i loc("CWE190_Integer_Overflow__int_rand_square_14.c":88:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // pred: ^bb5
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc128)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb7 loc(#loc124)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc124)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc259)
  ^bb9:  // pred: ^bb8
    %41 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %42 = cir.load %41 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc133)
    %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc260)
    cir.brcond %44 ^bb10, ^bb24 loc(#loc261)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc262)
  ^bb11:  // pred: ^bb10
    %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %46 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
    %47 = cir.unary(minus, %46) : !s32i, !s32i loc(#loc138)
    %48 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %49 = cir.binop(sub, %47, %48) nsw : !s32i loc(#loc138)
    %50 = cir.cmp(gt, %45, %49) : !s32i, !cir.bool loc(#loc263)
    cir.brcond %50 ^bb12, ^bb17 loc(#loc139)
  ^bb12:  // pred: ^bb11
    %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %52 = cir.abs %51 poison : !s32i loc(#loc141)
    %53 = cir.cast(integral, %52 : !s32i), !s64i loc(#loc141)
    %54 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc142)
    %55 = cir.const #cir.int<2147483647> : !s32i loc(#loc143)
    %56 = cir.cast(int_to_float, %55 : !s32i), !cir.double loc(#loc143)
    %57 = cir.call @sqrt(%56) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc142)
    %58 = cir.cast(float_to_int, %57 : !cir.double), !s64i loc(#loc142)
    %59 = cir.cmp(lt, %53, %58) : !s64i, !cir.bool loc(#loc264)
    cir.brcond %59 ^bb13, ^bb14 loc(#loc139)
  ^bb13:  // pred: ^bb12
    %60 = cir.const #true loc(#loc139)
    cir.br ^bb15(%60 : !cir.bool) loc(#loc139)
  ^bb14:  // pred: ^bb12
    %61 = cir.const #false loc(#loc139)
    cir.br ^bb15(%61 : !cir.bool) loc(#loc139)
  ^bb15(%62: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc139)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18(%62 : !cir.bool) loc(#loc139)
  ^bb17:  // pred: ^bb11
    %63 = cir.const #false loc(#loc139)
    cir.br ^bb18(%63 : !cir.bool) loc(#loc139)
  ^bb18(%64: !cir.bool loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc139)
  ^bb19:  // pred: ^bb18
    cir.brcond %64 ^bb20, ^bb21 loc(#loc265)
  ^bb20:  // pred: ^bb19
    %65 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %66 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    %67 = cir.binop(mul, %65, %66) nsw : !s32i loc(#loc148)
    cir.store %67, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %68 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    cir.call @printIntLine(%68) : (!s32i) -> () loc(#loc150)
    cir.br ^bb22 loc(#loc146)
  ^bb21:  // pred: ^bb19
    %69 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc151)
    %70 = cir.cast(array_to_ptrdecay, %69 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc151)
    cir.call @printLine(%70) : (!cir.ptr<!s8i>) -> () loc(#loc152)
    cir.br ^bb22 loc(#loc136)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc136)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc131)
  ^bb24:  // 2 preds: ^bb9, ^bb23
    cir.br ^bb25 loc(#loc131)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc116)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb1 loc(#loc270)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc164)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc271)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc272)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc169)
    cir.br ^bb4 loc(#loc166)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc170)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.br ^bb4 loc(#loc162)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc162)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc274)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc174)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc175)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc275)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc276)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc277)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc179)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc181)
    cir.br ^bb9 loc(#loc178)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc154)
  } loc(#loc266)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc280)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc188)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.br ^bb1 loc(#loc282)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc193)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc283)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc284)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc195)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.br ^bb3 loc(#loc191)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc191)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc286)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc207)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc200)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc287)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc288)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc289)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc204)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc206)
    cir.br ^bb8 loc(#loc203)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc198)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc198)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc183)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":42:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":38:13)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":38:33)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":26:9)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":28:12)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":29:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":33:5)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":29:8)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":29:20)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":30:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":32:9)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":41:5)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":34:8)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":34:20)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":36:9)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":38:26)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":39:26)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":39:13)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":152:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":158:1)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":154:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":154:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":155:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":155:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":156:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":156:14)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":157:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":157:14)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":174:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":176:15)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":179:15)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":181:15)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":169:1)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":184:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":170:1)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":172:27)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":172:22)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":172:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":174:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":175:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":175:54)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":176:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":179:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":180:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":180:53)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":181:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":183:12)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":183:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":62:19)
#loc73 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":74:23)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":49:1)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":77:1)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":69:13)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":69:33)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":51:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":51:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":53:12)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":53:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":54:5)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":58:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":54:8)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":54:20)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":55:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":57:9)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":59:5)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":76:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":59:8)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":59:20)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":60:5)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":63:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":65:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":62:9)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:9)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":75:9)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:13)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:20)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:35)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:31)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:49)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:62)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":67:69)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":68:9)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":71:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":73:9)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":69:26)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":70:26)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":70:13)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":74:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":80:1)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":103:1)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":95:13)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":95:33)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":82:5)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":82:9)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":84:12)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":84:5)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":85:5)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":89:5)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":85:8)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":85:20)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":86:5)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":88:9)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":90:5)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":102:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":90:8)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":90:20)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":91:5)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:9)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":101:9)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:13)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:20)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:35)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:31)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:49)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:62)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":93:69)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":94:9)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":97:9)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":99:9)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":95:26)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":96:26)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":96:13)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":100:23)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":100:13)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":106:1)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":129:1)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":125:13)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":125:33)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":108:5)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":108:9)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":110:12)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":110:5)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":111:5)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":120:5)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":111:8)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":111:20)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":112:5)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":115:5)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":117:5)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":114:19)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":114:9)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":119:16)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":119:9)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":121:5)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":128:5)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":121:8)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":121:20)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":122:5)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":123:9)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":127:9)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":125:26)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":126:26)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":126:13)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":132:1)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":150:1)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":146:13)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":146:33)
#loc186 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":134:5)
#loc187 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":134:9)
#loc188 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":136:12)
#loc189 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":136:5)
#loc190 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":137:5)
#loc191 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":141:5)
#loc192 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":137:8)
#loc193 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":137:20)
#loc194 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":138:5)
#loc195 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":140:16)
#loc196 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":140:9)
#loc197 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":142:5)
#loc198 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":149:5)
#loc199 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":142:8)
#loc200 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":142:20)
#loc201 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":143:5)
#loc202 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":144:9)
#loc203 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":148:9)
#loc204 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":146:26)
#loc205 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":147:26)
#loc206 = loc("CWE190_Integer_Overflow__int_rand_square_14.c":147:13)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc9, #loc10])
#loc212 = loc(fused[#loc11, #loc12])
#loc213 = loc(fused[#loc14, #loc13])
#loc214 = loc(fused[#loc15, #loc16])
#loc215 = loc(fused[#loc17, #loc18])
#loc216 = loc(fused[#loc19, #loc16])
#loc217 = loc(fused[#loc21, #loc20])
#loc218 = loc(fused[#loc22, #loc23])
#loc219 = loc(fused[#loc24, #loc25])
#loc220 = loc(fused[#loc26, #loc23])
#loc221 = loc(fused[#loc27, #loc28])
#loc222 = loc(fused[#loc32, #loc33])
#loc223 = loc(fused[#loc34, #loc35])
#loc224 = loc(fused[#loc36, #loc37])
#loc225 = loc(fused[#loc38, #loc39])
#loc226 = loc(fused[#loc40, #loc41])
#loc227 = loc(fused[#loc42, #loc43])
#loc228 = loc(fused[#loc44, #loc45])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc52, #loc53])
#loc233 = loc(fused[#loc63, #loc64])
#loc234 = loc(fused[#loc67, #loc68])
#loc235 = loc(fused[#loc71, #loc70])
#loc236 = loc(fused[#loc75, #loc76])
#loc237 = loc(fused[#loc77, #loc78])
#loc238 = loc(fused[#loc79, #loc80])
#loc239 = loc(fused[#loc82, #loc81])
#loc240 = loc(fused[#loc83, #loc84])
#loc241 = loc(fused[#loc85, #loc86])
#loc242 = loc(fused[#loc87, #loc84])
#loc243 = loc(fused[#loc89, #loc88])
#loc244 = loc(fused[#loc90, #loc91])
#loc245 = loc(fused[#loc92, #loc93])
#loc246 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc247 = loc(fused[#loc98, #loc99])
#loc248 = loc(fused[#loc100, #loc101])
#loc249 = loc(fused[#loc104, #loc107])
#loc250 = loc(fused[#loc108, #loc109, #loc110, #loc99])
#loc251 = loc(fused[#loc115, #loc116])
#loc252 = loc(fused[#loc117, #loc118])
#loc253 = loc(fused[#loc119, #loc120])
#loc254 = loc(fused[#loc122, #loc121])
#loc255 = loc(fused[#loc123, #loc124])
#loc256 = loc(fused[#loc125, #loc126])
#loc257 = loc(fused[#loc127, #loc124])
#loc258 = loc(fused[#loc129, #loc128])
#loc259 = loc(fused[#loc130, #loc131])
#loc260 = loc(fused[#loc132, #loc133])
#loc261 = loc(fused[#loc134, #loc131])
#loc262 = loc(fused[#loc135, #loc136])
#loc263 = loc(fused[#loc137, #loc138])
#loc264 = loc(fused[#loc141, #loc144])
#loc265 = loc(fused[#loc145, #loc146, #loc147, #loc136])
#loc266 = loc(fused[#loc153, #loc154])
#loc267 = loc(fused[#loc155, #loc156])
#loc268 = loc(fused[#loc157, #loc158])
#loc269 = loc(fused[#loc160, #loc159])
#loc270 = loc(fused[#loc161, #loc162])
#loc271 = loc(fused[#loc163, #loc164])
#loc272 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc273 = loc(fused[#loc171, #loc170])
#loc274 = loc(fused[#loc172, #loc173])
#loc275 = loc(fused[#loc174, #loc175])
#loc276 = loc(fused[#loc176, #loc173])
#loc277 = loc(fused[#loc177, #loc178])
#loc278 = loc(fused[#loc182, #loc183])
#loc279 = loc(fused[#loc184, #loc185])
#loc280 = loc(fused[#loc186, #loc187])
#loc281 = loc(fused[#loc189, #loc188])
#loc282 = loc(fused[#loc190, #loc191])
#loc283 = loc(fused[#loc192, #loc193])
#loc284 = loc(fused[#loc194, #loc191])
#loc285 = loc(fused[#loc196, #loc195])
#loc286 = loc(fused[#loc197, #loc198])
#loc287 = loc(fused[#loc199, #loc200])
#loc288 = loc(fused[#loc201, #loc198])
#loc289 = loc(fused[#loc202, #loc203])
