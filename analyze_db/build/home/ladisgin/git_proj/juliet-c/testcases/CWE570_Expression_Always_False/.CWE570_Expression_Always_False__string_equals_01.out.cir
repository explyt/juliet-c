!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc32 = loc("CWE570_Expression_Always_False__string_equals_01.c":68:10)
#loc33 = loc("CWE570_Expression_Always_False__string_equals_01.c":68:14)
#loc34 = loc("CWE570_Expression_Always_False__string_equals_01.c":68:20)
#loc35 = loc("CWE570_Expression_Always_False__string_equals_01.c":68:32)
#loc109 = loc(fused[#loc32, #loc33])
#loc110 = loc(fused[#loc34, #loc35])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__string_equals_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private @__const.CWE570_Expression_Always_False__string_equals_01_bad.charString = #cir.const_array<"false" : !cir.array<!s8i x 5>, trailing_zeros> : !cir.array<!s8i x 10> loc(#loc97)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"true\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Never prints\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE570_Expression_Always_False__string_equals_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["charString"] {alignment = 1 : i64} loc(#loc97)
    %1 = cir.get_global @__const.CWE570_Expression_Always_False__string_equals_01_bad.charString : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc97)
    cir.copy %1 to %0 : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc97)
    cir.scope {
      %2 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc13)
      %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc14)
      %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc5)
      %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc5)
      %6 = cir.call @strcmp(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc13)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc15)
      %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc102)
      cir.if %8 {
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc8)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc17)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc10)
  } loc(#loc100)
  cir.func no_proto @CWE570_Expression_Always_False__string_equals_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc104)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc106)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc29)
  cir.func @main(%arg0: !s32i loc(fused[#loc32, #loc33]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc34, #loc35])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc31)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc36)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc37)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc38)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc38)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc39)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc26)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    %8 = cir.get_global @CWE570_Expression_Always_False__string_equals_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE570_Expression_Always_False__string_equals_01_good() : () -> () loc(#loc41)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc27)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc28)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %13 = cir.get_global @CWE570_Expression_Always_False__string_equals_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call @CWE570_Expression_Always_False__string_equals_01_bad() : () -> () loc(#loc45)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc29)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %17 : !s32i loc(#loc113)
  } loc(#loc108)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc114)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["charString"] {alignment = 1 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["charStringLen"] {alignment = 4 : i64} loc(#loc119)
    %2 = cir.const #cir.zero : !cir.array<!s8i x 10> loc(#loc118)
    cir.store %2, %0 : !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>> loc(#loc118)
    cir.scope {
      %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc66)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc67)
      %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc115)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc68)
      %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc69)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc121)
      cir.if %14 {
        %15 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc72)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc73)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc73)
        %19 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc75)
        %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc75)
        cir.store %18, %21 : !s8i, !cir.ptr<!s8i> loc(#loc123)
      } loc(#loc122)
    } loc(#loc120)
    %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc76)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc77)
    %5 = cir.call @strlen(%4) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc76)
    %6 = cir.cast(integral, %5 : !u64i), !s32i loc(#loc76)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    cir.scope {
      %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc83)
      %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc126)
      cir.if %9 {
        %10 = cir.const #cir.int<0> : !s32i loc(#loc85)
        %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc85)
        %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc87)
        %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc86)
        %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc88)
        %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc88)
        cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.scope {
      %7 = cir.get_global @strcmp : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc91)
      %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc92)
      %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc93)
      %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc93)
      %11 = cir.call @strcmp(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc91)
      %12 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc130)
      cir.if %13 {
        %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc57)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc59)
  } loc(#loc117)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__string_equals_01.c":0:0)
#loc1 = loc("CWE570_Expression_Always_False__string_equals_01.c":12:5)
#loc2 = loc("CWE570_Expression_Always_False__string_equals_01.c":12:27)
#loc3 = loc("/usr/include/string.h":156:1)
#loc4 = loc("/usr/include/string.h":157:33)
#loc5 = loc("CWE570_Expression_Always_False__string_equals_01.c":15:28)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE570_Expression_Always_False__string_equals_01.c":17:19)
#loc9 = loc("CWE570_Expression_Always_False__string_equals_01.c":10:1)
#loc10 = loc("CWE570_Expression_Always_False__string_equals_01.c":19:1)
#loc11 = loc("CWE570_Expression_Always_False__string_equals_01.c":15:5)
#loc12 = loc("CWE570_Expression_Always_False__string_equals_01.c":18:5)
#loc13 = loc("CWE570_Expression_Always_False__string_equals_01.c":15:9)
#loc14 = loc("CWE570_Expression_Always_False__string_equals_01.c":15:16)
#loc15 = loc("CWE570_Expression_Always_False__string_equals_01.c":15:39)
#loc16 = loc("CWE570_Expression_Always_False__string_equals_01.c":16:5)
#loc17 = loc("CWE570_Expression_Always_False__string_equals_01.c":17:9)
#loc18 = loc("CWE570_Expression_Always_False__string_equals_01.c":53:1)
#loc19 = loc("CWE570_Expression_Always_False__string_equals_01.c":56:1)
#loc20 = loc("CWE570_Expression_Always_False__string_equals_01.c":55:5)
#loc21 = loc("CWE570_Expression_Always_False__string_equals_01.c":55:11)
#loc22 = loc("/usr/include/stdlib.h":575:1)
#loc23 = loc("/usr/include/stdlib.h":575:41)
#loc24 = loc("/usr/include/time.h":76:1)
#loc25 = loc("/usr/include/time.h":76:38)
#loc26 = loc("CWE570_Expression_Always_False__string_equals_01.c":74:15)
#loc27 = loc("CWE570_Expression_Always_False__string_equals_01.c":76:15)
#loc28 = loc("CWE570_Expression_Always_False__string_equals_01.c":80:15)
#loc29 = loc("CWE570_Expression_Always_False__string_equals_01.c":82:15)
#loc30 = loc("CWE570_Expression_Always_False__string_equals_01.c":68:1)
#loc31 = loc("CWE570_Expression_Always_False__string_equals_01.c":86:1)
#loc36 = loc("CWE570_Expression_Always_False__string_equals_01.c":69:1)
#loc37 = loc("CWE570_Expression_Always_False__string_equals_01.c":71:27)
#loc38 = loc("CWE570_Expression_Always_False__string_equals_01.c":71:22)
#loc39 = loc("CWE570_Expression_Always_False__string_equals_01.c":71:5)
#loc40 = loc("CWE570_Expression_Always_False__string_equals_01.c":74:5)
#loc41 = loc("CWE570_Expression_Always_False__string_equals_01.c":75:5)
#loc42 = loc("CWE570_Expression_Always_False__string_equals_01.c":75:59)
#loc43 = loc("CWE570_Expression_Always_False__string_equals_01.c":76:5)
#loc44 = loc("CWE570_Expression_Always_False__string_equals_01.c":80:5)
#loc45 = loc("CWE570_Expression_Always_False__string_equals_01.c":81:5)
#loc46 = loc("CWE570_Expression_Always_False__string_equals_01.c":81:58)
#loc47 = loc("CWE570_Expression_Always_False__string_equals_01.c":82:5)
#loc48 = loc("CWE570_Expression_Always_False__string_equals_01.c":85:12)
#loc49 = loc("CWE570_Expression_Always_False__string_equals_01.c":85:5)
#loc50 = loc("/usr/include/stdio.h":654:1)
#loc51 = loc("/usr/include/stdio.h":655:59)
#loc52 = loc("/usr/include/stdio.h":149:1)
#loc53 = loc("/usr/include/stdio.h":149:14)
#loc54 = loc("CWE570_Expression_Always_False__string_equals_01.c":33:19)
#loc55 = loc("/usr/include/string.h":407:1)
#loc56 = loc("/usr/include/string.h":408:33)
#loc57 = loc("CWE570_Expression_Always_False__string_equals_01.c":49:19)
#loc58 = loc("CWE570_Expression_Always_False__string_equals_01.c":26:1)
#loc59 = loc("CWE570_Expression_Always_False__string_equals_01.c":51:1)
#loc60 = loc("CWE570_Expression_Always_False__string_equals_01.c":28:5)
#loc61 = loc("CWE570_Expression_Always_False__string_equals_01.c":28:27)
#loc62 = loc("CWE570_Expression_Always_False__string_equals_01.c":29:5)
#loc63 = loc("CWE570_Expression_Always_False__string_equals_01.c":29:9)
#loc64 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:5)
#loc65 = loc("CWE570_Expression_Always_False__string_equals_01.c":37:5)
#loc66 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:15)
#loc67 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:27)
#loc68 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:31)
#loc69 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:9)
#loc70 = loc("CWE570_Expression_Always_False__string_equals_01.c":31:41)
#loc71 = loc("CWE570_Expression_Always_False__string_equals_01.c":32:5)
#loc72 = loc("CWE570_Expression_Always_False__string_equals_01.c":33:9)
#loc73 = loc("CWE570_Expression_Always_False__string_equals_01.c":36:25)
#loc74 = loc("CWE570_Expression_Always_False__string_equals_01.c":36:20)
#loc75 = loc("CWE570_Expression_Always_False__string_equals_01.c":36:9)
#loc76 = loc("CWE570_Expression_Always_False__string_equals_01.c":40:21)
#loc77 = loc("CWE570_Expression_Always_False__string_equals_01.c":40:28)
#loc78 = loc("CWE570_Expression_Always_False__string_equals_01.c":40:5)
#loc79 = loc("CWE570_Expression_Always_False__string_equals_01.c":40:38)
#loc80 = loc("CWE570_Expression_Always_False__string_equals_01.c":41:5)
#loc81 = loc("CWE570_Expression_Always_False__string_equals_01.c":44:5)
#loc82 = loc("CWE570_Expression_Always_False__string_equals_01.c":41:9)
#loc83 = loc("CWE570_Expression_Always_False__string_equals_01.c":41:25)
#loc84 = loc("CWE570_Expression_Always_False__string_equals_01.c":42:5)
#loc85 = loc("CWE570_Expression_Always_False__string_equals_01.c":43:39)
#loc86 = loc("CWE570_Expression_Always_False__string_equals_01.c":43:20)
#loc87 = loc("CWE570_Expression_Always_False__string_equals_01.c":43:34)
#loc88 = loc("CWE570_Expression_Always_False__string_equals_01.c":43:9)
#loc89 = loc("CWE570_Expression_Always_False__string_equals_01.c":47:5)
#loc90 = loc("CWE570_Expression_Always_False__string_equals_01.c":50:5)
#loc91 = loc("CWE570_Expression_Always_False__string_equals_01.c":47:8)
#loc92 = loc("CWE570_Expression_Always_False__string_equals_01.c":47:15)
#loc93 = loc("CWE570_Expression_Always_False__string_equals_01.c":47:27)
#loc94 = loc("CWE570_Expression_Always_False__string_equals_01.c":47:38)
#loc95 = loc("CWE570_Expression_Always_False__string_equals_01.c":48:5)
#loc96 = loc("CWE570_Expression_Always_False__string_equals_01.c":49:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc6, #loc7])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc15])
#loc103 = loc(fused[#loc16, #loc12])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc30, #loc31])
#loc111 = loc(fused[#loc41, #loc42])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc49, #loc48])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc52, #loc53])
#loc116 = loc(fused[#loc55, #loc56])
#loc117 = loc(fused[#loc58, #loc59])
#loc118 = loc(fused[#loc60, #loc61])
#loc119 = loc(fused[#loc62, #loc63])
#loc120 = loc(fused[#loc64, #loc65])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc65])
#loc123 = loc(fused[#loc75, #loc73])
#loc124 = loc(fused[#loc78, #loc79])
#loc125 = loc(fused[#loc80, #loc81])
#loc126 = loc(fused[#loc82, #loc83])
#loc127 = loc(fused[#loc84, #loc81])
#loc128 = loc(fused[#loc88, #loc85])
#loc129 = loc(fused[#loc89, #loc90])
#loc130 = loc(fused[#loc91, #loc94])
#loc131 = loc(fused[#loc95, #loc90])
