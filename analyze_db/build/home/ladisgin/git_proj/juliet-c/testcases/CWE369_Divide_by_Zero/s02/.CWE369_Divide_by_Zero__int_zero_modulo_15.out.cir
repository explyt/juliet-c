!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":206:10)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":206:14)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":206:20)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":206:32)
#loc218 = loc(fused[#loc53, #loc54])
#loc219 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc201)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc202)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.br ^bb1 loc(#loc206)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc15)
    cir.br ^bb2 loc(#loc13)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc13)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.br ^bb6 loc(#loc19)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc20)
    cir.br ^bb6 loc(#loc21)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc208)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc24)
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc22)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc26)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc209)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc28)
    cir.br ^bb13 loc(#loc29)
  ^bb12:  // pred: ^bb9
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb13 loc(#loc32)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc7)
  } loc(#loc203)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_modulo_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc210)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc215)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc60)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_15_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_modulo_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE369_Divide_by_Zero__int_zero_modulo_15_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc77)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc81)
    cir.br ^bb2 loc(#loc79)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc79)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc82)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb6 loc(#loc85)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc86)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb6 loc(#loc88)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc80)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc228)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<8> : !s32i loc(#loc91)
    cir.br ^bb9 loc(#loc89)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc89)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc92)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc93)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb18 loc(#loc95)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc229)
  ^bb13:  // pred: ^bb12
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %11 = cir.const #cir.int<0> : !s32i loc(#loc99)
    %12 = cir.cmp(ne, %10, %11) : !s32i, !cir.bool loc(#loc230)
    cir.brcond %12 ^bb14, ^bb15 loc(#loc231)
  ^bb14:  // pred: ^bb13
    %13 = cir.const #cir.int<100> : !s32i loc(#loc103)
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %15 = cir.binop(rem, %13, %14) : !s32i loc(#loc232)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc105)
    cir.br ^bb16 loc(#loc101)
  ^bb15:  // pred: ^bb13
    %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc71)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb16 loc(#loc97)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc97)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc107)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc90)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc73)
  } loc(#loc223)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc113)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc117)
    cir.br ^bb2 loc(#loc115)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc115)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<0> : !s32i loc(#loc119)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb6 loc(#loc121)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb6 loc(#loc124)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc238)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc127)
    cir.br ^bb9 loc(#loc125)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb17 [
      7: ^bb11
    ] loc(#loc125)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc128)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc239)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc132)
    %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc240)
    cir.brcond %10 ^bb13, ^bb14 loc(#loc241)
  ^bb13:  // pred: ^bb12
    %11 = cir.const #cir.int<100> : !s32i loc(#loc136)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc242)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc138)
    cir.br ^bb15 loc(#loc134)
  ^bb14:  // pred: ^bb12
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc139)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc139)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc140)
    cir.br ^bb15 loc(#loc130)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc130)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc141)
  ^bb17:  // pred: ^bb9
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc143)
    cir.br ^bb18 loc(#loc144)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc126)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc109)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc150)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc154)
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc152)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc155)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc156)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    cir.br ^bb6 loc(#loc158)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<7> : !s32i loc(#loc159)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb6 loc(#loc161)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc153)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc248)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc164)
    cir.br ^bb9 loc(#loc162)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc162)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc165)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc166)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc249)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc168)
    cir.br ^bb13 loc(#loc169)
  ^bb12:  // pred: ^bb9
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    cir.br ^bb13 loc(#loc172)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc163)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc146)
  } loc(#loc243)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc177)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc178)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.br ^bb1 loc(#loc253)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc182)
    cir.br ^bb2 loc(#loc180)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc180)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc183)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<7> : !s32i loc(#loc184)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.br ^bb6 loc(#loc186)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc187)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc187)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc188)
    cir.br ^bb6 loc(#loc189)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc181)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc255)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc192)
    cir.br ^bb9 loc(#loc190)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc190)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc193)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc194)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc256)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc196)
    cir.br ^bb13 loc(#loc197)
  ^bb12:  // pred: ^bb9
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    cir.br ^bb13 loc(#loc200)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc191)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc174)
  } loc(#loc250)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":35:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":22:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":49:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":24:5)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":24:9)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":26:13)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":26:12)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":26:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":27:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":37:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":27:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":29:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":31:16)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":31:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":32:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":35:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":36:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":38:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":48:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":38:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":40:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":42:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":42:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":42:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":43:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":46:19)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":46:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":47:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":189:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":195:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":191:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":191:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":192:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":192:14)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":193:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":193:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":194:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":194:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":211:15)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":213:15)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":216:15)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":218:15)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":206:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":221:1)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":207:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":209:27)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":209:22)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":209:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":211:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":212:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":212:52)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":213:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":216:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":217:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":217:51)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":218:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":220:12)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":220:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":86:23)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":56:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":90:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":58:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":58:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":60:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":60:12)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":60:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":61:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":71:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":61:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":63:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":65:16)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":65:9)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":66:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":69:19)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":69:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":70:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":72:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":89:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":72:12)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":74:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":76:19)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":76:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":77:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":80:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":87:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":80:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":80:21)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":81:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":83:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":85:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":82:26)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":82:32)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":82:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":86:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":88:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":93:1)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":127:1)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":95:5)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":95:9)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":97:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":97:12)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":97:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":98:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":108:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":98:12)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":100:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":102:16)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":102:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":103:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":106:19)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":106:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":107:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":109:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":126:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":109:12)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":111:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":113:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":120:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":113:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":113:21)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":114:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":116:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":118:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":115:26)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":115:32)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":115:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":119:23)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":119:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":121:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":124:19)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":124:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":125:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":130:1)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":157:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":132:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":132:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":134:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":134:12)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":134:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":135:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":145:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":135:12)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":137:5)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":139:19)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":139:9)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":140:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":143:16)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":143:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":144:9)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":146:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":156:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":146:12)
#loc165 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":148:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":150:22)
#loc167 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":150:28)
#loc168 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":150:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":151:9)
#loc170 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":154:19)
#loc171 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":154:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":155:9)
#loc173 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":160:1)
#loc174 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":187:1)
#loc175 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":162:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":162:9)
#loc177 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":164:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":164:12)
#loc179 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":164:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":165:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":175:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":165:12)
#loc183 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":167:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":169:16)
#loc185 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":169:9)
#loc186 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":170:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":173:19)
#loc188 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":173:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":174:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":176:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":186:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":176:12)
#loc193 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":178:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":180:22)
#loc195 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":180:28)
#loc196 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":180:9)
#loc197 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":181:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":184:19)
#loc199 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":184:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_zero_modulo_15.c":185:9)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc4, #loc5])
#loc203 = loc(fused[#loc6, #loc7])
#loc204 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc12, #loc10])
#loc206 = loc(fused[#loc13, #loc14])
#loc207 = loc(fused[#loc18, #loc17])
#loc208 = loc(fused[#loc22, #loc23])
#loc209 = loc(fused[#loc26, #loc27])
#loc210 = loc(fused[#loc33, #loc34])
#loc211 = loc(fused[#loc35, #loc36])
#loc212 = loc(fused[#loc37, #loc38])
#loc213 = loc(fused[#loc39, #loc40])
#loc214 = loc(fused[#loc41, #loc42])
#loc215 = loc(fused[#loc43, #loc44])
#loc216 = loc(fused[#loc45, #loc46])
#loc217 = loc(fused[#loc51, #loc52])
#loc220 = loc(fused[#loc62, #loc63])
#loc221 = loc(fused[#loc66, #loc67])
#loc222 = loc(fused[#loc70, #loc69])
#loc223 = loc(fused[#loc72, #loc73])
#loc224 = loc(fused[#loc74, #loc75])
#loc225 = loc(fused[#loc78, #loc76])
#loc226 = loc(fused[#loc79, #loc80])
#loc227 = loc(fused[#loc84, #loc83])
#loc228 = loc(fused[#loc89, #loc90])
#loc229 = loc(fused[#loc96, #loc97])
#loc230 = loc(fused[#loc98, #loc99])
#loc231 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc232 = loc(fused[#loc103, #loc104])
#loc233 = loc(fused[#loc108, #loc109])
#loc234 = loc(fused[#loc110, #loc111])
#loc235 = loc(fused[#loc114, #loc112])
#loc236 = loc(fused[#loc115, #loc116])
#loc237 = loc(fused[#loc120, #loc119])
#loc238 = loc(fused[#loc125, #loc126])
#loc239 = loc(fused[#loc129, #loc130])
#loc240 = loc(fused[#loc131, #loc132])
#loc241 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc242 = loc(fused[#loc136, #loc137])
#loc243 = loc(fused[#loc145, #loc146])
#loc244 = loc(fused[#loc147, #loc148])
#loc245 = loc(fused[#loc151, #loc149])
#loc246 = loc(fused[#loc152, #loc153])
#loc247 = loc(fused[#loc160, #loc159])
#loc248 = loc(fused[#loc162, #loc163])
#loc249 = loc(fused[#loc166, #loc167])
#loc250 = loc(fused[#loc173, #loc174])
#loc251 = loc(fused[#loc175, #loc176])
#loc252 = loc(fused[#loc179, #loc177])
#loc253 = loc(fused[#loc180, #loc181])
#loc254 = loc(fused[#loc185, #loc184])
#loc255 = loc(fused[#loc190, #loc191])
#loc256 = loc(fused[#loc194, #loc195])
