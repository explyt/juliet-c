!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc53 = loc("CWE369_Divide_by_Zero__float_rand_08.c":182:10)
#loc54 = loc("CWE369_Divide_by_Zero__float_rand_08.c":182:14)
#loc55 = loc("CWE369_Divide_by_Zero__float_rand_08.c":182:20)
#loc56 = loc("CWE369_Divide_by_Zero__float_rand_08.c":182:32)
#loc231 = loc(fused[#loc53, #loc54])
#loc232 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc207)
  cir.func private @printIntLine(!s32i) loc(#loc208)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc9)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc211)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc213)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc16)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc16)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc16)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc16)
          cir.yield %23 : !u32i loc(#loc16)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc16)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc16)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc16)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc16)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc16)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc16)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc16)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc16)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc16)
          cir.yield %27 : !u32i loc(#loc16)
        }) : (!cir.bool) -> !u32i loc(#loc16)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc16)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc16)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc215)
      } loc(#loc214)
    } loc(#loc212)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc217)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc220)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc27)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc28)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc28)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc221)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc221)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc220)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc30)
        } loc(#loc219)
      } loc(#loc218)
    } loc(#loc216)
    cir.return loc(#loc6)
  } loc(#loc209)
  cir.func no_proto @CWE369_Divide_by_Zero__float_rand_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc227)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc228)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc229)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc50)
  cir.func @main(%arg0: !s32i loc(fused[#loc53, #loc54]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc55, #loc56])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc232)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc52)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc57)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc58)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc59)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc59)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc60)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc47)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_rand_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc233)
    cir.call @CWE369_Divide_by_Zero__float_rand_08_good() : () -> () loc(#loc62)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc49)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_rand_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call @CWE369_Divide_by_Zero__float_rand_08_bad() : () -> () loc(#loc66)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc69)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc235)
    cir.return %17 : !s32i loc(#loc235)
  } loc(#loc230)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    cir.return %2 : !s32i loc(#loc237)
  } loc(#loc236)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc76)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc239)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc81)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc240)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc242)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc85)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc85)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc88)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc88)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc88)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc88)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc88)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc88)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc88)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc88)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc88)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc88)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc88)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc88)
          cir.yield %23 : !u32i loc(#loc88)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc88)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc88)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc88)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc88)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc88)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc88)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc88)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc88)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc88)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc88)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc88)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc88)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc88)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc88)
          cir.yield %27 : !u32i loc(#loc88)
        }) : (!cir.bool) -> !u32i loc(#loc88)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc88)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc88)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc92)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc100)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc100)
          %7 = cir.fabs %6 : !cir.double loc(#loc100)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc101)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc249)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc108)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc109)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc109)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc252)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc252)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc111)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc76)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc76)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc250)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.return loc(#loc78)
  } loc(#loc238)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
    cir.return %2 : !s32i loc(#loc254)
  } loc(#loc253)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc121)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc257)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc125)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc125)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc128)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc128)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc128)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc128)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc128)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc128)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc128)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc128)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc128)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc128)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc128)
          cir.yield %23 : !u32i loc(#loc128)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc128)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc128)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc128)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc128)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc128)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc128)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc128)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc128)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc128)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc128)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc128)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc128)
          cir.yield %27 : !u32i loc(#loc128)
        }) : (!cir.bool) -> !u32i loc(#loc128)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc128)
        %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc128)
        cir.store %11, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc132)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc132)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc137)
          %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc137)
          %7 = cir.fabs %6 : !cir.double loc(#loc137)
          %8 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc138)
          %9 = cir.cmp(gt, %7, %8) : !cir.double, !cir.bool loc(#loc266)
          cir.if %9 {
            %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc268)
            %11 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc145)
            %12 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc146)
            %13 = cir.cast(floating, %12 : !cir.float), !cir.double loc(#loc146)
            %14 = cir.binop(div, %11, %13) : !cir.double loc(#loc269)
            %15 = cir.cast(float_to_int, %14 : !cir.double), !s32i loc(#loc269)
            cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc268)
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc148)
          } else {
            %10 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc149)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc149)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc150)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.return loc(#loc118)
  } loc(#loc255)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc155)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc272)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc159)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc159)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc164)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc164)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc165)
      } else {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc166)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc170)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc170)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc281)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc177)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc178)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc178)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc282)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc282)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc281)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc180)
        } loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.return loc(#loc152)
  } loc(#loc270)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc185)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc285)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc287)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc189)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc189)
      cir.if %4 {
        %5 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc192)
        cir.store %5, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc289)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc291)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc196)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc196)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc294)
          %6 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc203)
          %7 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc204)
          %8 = cir.cast(floating, %7 : !cir.float), !cir.double loc(#loc204)
          %9 = cir.binop(div, %6, %8) : !cir.double loc(#loc295)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc295)
          cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc294)
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc205)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc206)
        } loc(#loc293)
      } loc(#loc292)
    } loc(#loc290)
    cir.return loc(#loc182)
  } loc(#loc283)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_08.c":37:1)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_08.c":55:1)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_08.c":39:5)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_08.c":39:11)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_08.c":41:12)
#loc10 = loc("CWE369_Divide_by_Zero__float_rand_08.c":41:5)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_08.c":42:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_08.c":46:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_08.c":42:8)
#loc14 = loc("CWE369_Divide_by_Zero__float_rand_08.c":42:26)
#loc15 = loc("CWE369_Divide_by_Zero__float_rand_08.c":43:5)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_08.c":45:23)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_08.c":45:9)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_08.c":47:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_08.c":54:5)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_08.c":47:8)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_08.c":47:26)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_08.c":48:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_08.c":49:9)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_08.c":53:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_08.c":51:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_08.c":51:44)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_08.c":51:32)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_08.c":51:40)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_08.c":52:26)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_08.c":52:13)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_08.c":165:1)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_08.c":171:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_08.c":167:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_08.c":167:14)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_08.c":168:5)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_08.c":168:14)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_08.c":169:5)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_08.c":169:14)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_08.c":170:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_08.c":170:14)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE369_Divide_by_Zero__float_rand_08.c":187:15)
#loc48 = loc("CWE369_Divide_by_Zero__float_rand_08.c":189:15)
#loc49 = loc("CWE369_Divide_by_Zero__float_rand_08.c":192:15)
#loc50 = loc("CWE369_Divide_by_Zero__float_rand_08.c":194:15)
#loc51 = loc("CWE369_Divide_by_Zero__float_rand_08.c":182:1)
#loc52 = loc("CWE369_Divide_by_Zero__float_rand_08.c":197:1)
#loc57 = loc("CWE369_Divide_by_Zero__float_rand_08.c":183:1)
#loc58 = loc("CWE369_Divide_by_Zero__float_rand_08.c":185:27)
#loc59 = loc("CWE369_Divide_by_Zero__float_rand_08.c":185:22)
#loc60 = loc("CWE369_Divide_by_Zero__float_rand_08.c":185:5)
#loc61 = loc("CWE369_Divide_by_Zero__float_rand_08.c":187:5)
#loc62 = loc("CWE369_Divide_by_Zero__float_rand_08.c":188:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_rand_08.c":188:47)
#loc64 = loc("CWE369_Divide_by_Zero__float_rand_08.c":189:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_rand_08.c":192:5)
#loc66 = loc("CWE369_Divide_by_Zero__float_rand_08.c":193:5)
#loc67 = loc("CWE369_Divide_by_Zero__float_rand_08.c":193:46)
#loc68 = loc("CWE369_Divide_by_Zero__float_rand_08.c":194:5)
#loc69 = loc("CWE369_Divide_by_Zero__float_rand_08.c":196:12)
#loc70 = loc("CWE369_Divide_by_Zero__float_rand_08.c":196:5)
#loc71 = loc("CWE369_Divide_by_Zero__float_rand_08.c":25:1)
#loc72 = loc("CWE369_Divide_by_Zero__float_rand_08.c":28:1)
#loc73 = loc("CWE369_Divide_by_Zero__float_rand_08.c":27:12)
#loc74 = loc("CWE369_Divide_by_Zero__float_rand_08.c":27:5)
#loc75 = loc("CWE369_Divide_by_Zero__float_rand_08.c":75:19)
#loc76 = loc("CWE369_Divide_by_Zero__float_rand_08.c":87:23)
#loc77 = loc("CWE369_Divide_by_Zero__float_rand_08.c":62:1)
#loc78 = loc("CWE369_Divide_by_Zero__float_rand_08.c":90:1)
#loc79 = loc("CWE369_Divide_by_Zero__float_rand_08.c":64:5)
#loc80 = loc("CWE369_Divide_by_Zero__float_rand_08.c":64:11)
#loc81 = loc("CWE369_Divide_by_Zero__float_rand_08.c":66:12)
#loc82 = loc("CWE369_Divide_by_Zero__float_rand_08.c":66:5)
#loc83 = loc("CWE369_Divide_by_Zero__float_rand_08.c":67:5)
#loc84 = loc("CWE369_Divide_by_Zero__float_rand_08.c":71:5)
#loc85 = loc("CWE369_Divide_by_Zero__float_rand_08.c":67:8)
#loc86 = loc("CWE369_Divide_by_Zero__float_rand_08.c":67:26)
#loc87 = loc("CWE369_Divide_by_Zero__float_rand_08.c":68:5)
#loc88 = loc("CWE369_Divide_by_Zero__float_rand_08.c":70:23)
#loc89 = loc("CWE369_Divide_by_Zero__float_rand_08.c":70:9)
#loc90 = loc("CWE369_Divide_by_Zero__float_rand_08.c":72:5)
#loc91 = loc("CWE369_Divide_by_Zero__float_rand_08.c":89:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_rand_08.c":72:8)
#loc93 = loc("CWE369_Divide_by_Zero__float_rand_08.c":72:27)
#loc94 = loc("CWE369_Divide_by_Zero__float_rand_08.c":73:5)
#loc95 = loc("CWE369_Divide_by_Zero__float_rand_08.c":76:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_rand_08.c":78:5)
#loc97 = loc("CWE369_Divide_by_Zero__float_rand_08.c":75:9)
#loc98 = loc("CWE369_Divide_by_Zero__float_rand_08.c":80:9)
#loc99 = loc("CWE369_Divide_by_Zero__float_rand_08.c":88:9)
#loc100 = loc("CWE369_Divide_by_Zero__float_rand_08.c":80:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_rand_08.c":80:25)
#loc102 = loc("CWE369_Divide_by_Zero__float_rand_08.c":80:12)
#loc103 = loc("CWE369_Divide_by_Zero__float_rand_08.c":81:9)
#loc104 = loc("CWE369_Divide_by_Zero__float_rand_08.c":84:9)
#loc105 = loc("CWE369_Divide_by_Zero__float_rand_08.c":86:9)
#loc106 = loc("CWE369_Divide_by_Zero__float_rand_08.c":82:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_rand_08.c":82:44)
#loc108 = loc("CWE369_Divide_by_Zero__float_rand_08.c":82:32)
#loc109 = loc("CWE369_Divide_by_Zero__float_rand_08.c":82:40)
#loc110 = loc("CWE369_Divide_by_Zero__float_rand_08.c":83:26)
#loc111 = loc("CWE369_Divide_by_Zero__float_rand_08.c":83:13)
#loc112 = loc("CWE369_Divide_by_Zero__float_rand_08.c":87:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_rand_08.c":30:1)
#loc114 = loc("CWE369_Divide_by_Zero__float_rand_08.c":33:1)
#loc115 = loc("CWE369_Divide_by_Zero__float_rand_08.c":32:12)
#loc116 = loc("CWE369_Divide_by_Zero__float_rand_08.c":32:5)
#loc117 = loc("CWE369_Divide_by_Zero__float_rand_08.c":93:1)
#loc118 = loc("CWE369_Divide_by_Zero__float_rand_08.c":116:1)
#loc119 = loc("CWE369_Divide_by_Zero__float_rand_08.c":95:5)
#loc120 = loc("CWE369_Divide_by_Zero__float_rand_08.c":95:11)
#loc121 = loc("CWE369_Divide_by_Zero__float_rand_08.c":97:12)
#loc122 = loc("CWE369_Divide_by_Zero__float_rand_08.c":97:5)
#loc123 = loc("CWE369_Divide_by_Zero__float_rand_08.c":98:5)
#loc124 = loc("CWE369_Divide_by_Zero__float_rand_08.c":102:5)
#loc125 = loc("CWE369_Divide_by_Zero__float_rand_08.c":98:8)
#loc126 = loc("CWE369_Divide_by_Zero__float_rand_08.c":98:26)
#loc127 = loc("CWE369_Divide_by_Zero__float_rand_08.c":99:5)
#loc128 = loc("CWE369_Divide_by_Zero__float_rand_08.c":101:23)
#loc129 = loc("CWE369_Divide_by_Zero__float_rand_08.c":101:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_rand_08.c":103:5)
#loc131 = loc("CWE369_Divide_by_Zero__float_rand_08.c":115:5)
#loc132 = loc("CWE369_Divide_by_Zero__float_rand_08.c":103:8)
#loc133 = loc("CWE369_Divide_by_Zero__float_rand_08.c":103:26)
#loc134 = loc("CWE369_Divide_by_Zero__float_rand_08.c":104:5)
#loc135 = loc("CWE369_Divide_by_Zero__float_rand_08.c":106:9)
#loc136 = loc("CWE369_Divide_by_Zero__float_rand_08.c":114:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_rand_08.c":106:17)
#loc138 = loc("CWE369_Divide_by_Zero__float_rand_08.c":106:25)
#loc139 = loc("CWE369_Divide_by_Zero__float_rand_08.c":106:12)
#loc140 = loc("CWE369_Divide_by_Zero__float_rand_08.c":107:9)
#loc141 = loc("CWE369_Divide_by_Zero__float_rand_08.c":110:9)
#loc142 = loc("CWE369_Divide_by_Zero__float_rand_08.c":112:9)
#loc143 = loc("CWE369_Divide_by_Zero__float_rand_08.c":108:13)
#loc144 = loc("CWE369_Divide_by_Zero__float_rand_08.c":108:44)
#loc145 = loc("CWE369_Divide_by_Zero__float_rand_08.c":108:32)
#loc146 = loc("CWE369_Divide_by_Zero__float_rand_08.c":108:40)
#loc147 = loc("CWE369_Divide_by_Zero__float_rand_08.c":109:26)
#loc148 = loc("CWE369_Divide_by_Zero__float_rand_08.c":109:13)
#loc149 = loc("CWE369_Divide_by_Zero__float_rand_08.c":113:23)
#loc150 = loc("CWE369_Divide_by_Zero__float_rand_08.c":113:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_rand_08.c":119:1)
#loc152 = loc("CWE369_Divide_by_Zero__float_rand_08.c":142:1)
#loc153 = loc("CWE369_Divide_by_Zero__float_rand_08.c":121:5)
#loc154 = loc("CWE369_Divide_by_Zero__float_rand_08.c":121:11)
#loc155 = loc("CWE369_Divide_by_Zero__float_rand_08.c":123:12)
#loc156 = loc("CWE369_Divide_by_Zero__float_rand_08.c":123:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_rand_08.c":124:5)
#loc158 = loc("CWE369_Divide_by_Zero__float_rand_08.c":133:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_rand_08.c":124:8)
#loc160 = loc("CWE369_Divide_by_Zero__float_rand_08.c":124:27)
#loc161 = loc("CWE369_Divide_by_Zero__float_rand_08.c":125:5)
#loc162 = loc("CWE369_Divide_by_Zero__float_rand_08.c":128:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_rand_08.c":130:5)
#loc164 = loc("CWE369_Divide_by_Zero__float_rand_08.c":127:19)
#loc165 = loc("CWE369_Divide_by_Zero__float_rand_08.c":127:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_rand_08.c":132:16)
#loc167 = loc("CWE369_Divide_by_Zero__float_rand_08.c":132:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_rand_08.c":134:5)
#loc169 = loc("CWE369_Divide_by_Zero__float_rand_08.c":141:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_rand_08.c":134:8)
#loc171 = loc("CWE369_Divide_by_Zero__float_rand_08.c":134:26)
#loc172 = loc("CWE369_Divide_by_Zero__float_rand_08.c":135:5)
#loc173 = loc("CWE369_Divide_by_Zero__float_rand_08.c":136:9)
#loc174 = loc("CWE369_Divide_by_Zero__float_rand_08.c":140:9)
#loc175 = loc("CWE369_Divide_by_Zero__float_rand_08.c":138:13)
#loc176 = loc("CWE369_Divide_by_Zero__float_rand_08.c":138:44)
#loc177 = loc("CWE369_Divide_by_Zero__float_rand_08.c":138:32)
#loc178 = loc("CWE369_Divide_by_Zero__float_rand_08.c":138:40)
#loc179 = loc("CWE369_Divide_by_Zero__float_rand_08.c":139:26)
#loc180 = loc("CWE369_Divide_by_Zero__float_rand_08.c":139:13)
#loc181 = loc("CWE369_Divide_by_Zero__float_rand_08.c":145:1)
#loc182 = loc("CWE369_Divide_by_Zero__float_rand_08.c":163:1)
#loc183 = loc("CWE369_Divide_by_Zero__float_rand_08.c":147:5)
#loc184 = loc("CWE369_Divide_by_Zero__float_rand_08.c":147:11)
#loc185 = loc("CWE369_Divide_by_Zero__float_rand_08.c":149:12)
#loc186 = loc("CWE369_Divide_by_Zero__float_rand_08.c":149:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_rand_08.c":150:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_rand_08.c":154:5)
#loc189 = loc("CWE369_Divide_by_Zero__float_rand_08.c":150:8)
#loc190 = loc("CWE369_Divide_by_Zero__float_rand_08.c":150:26)
#loc191 = loc("CWE369_Divide_by_Zero__float_rand_08.c":151:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_rand_08.c":153:16)
#loc193 = loc("CWE369_Divide_by_Zero__float_rand_08.c":153:9)
#loc194 = loc("CWE369_Divide_by_Zero__float_rand_08.c":155:5)
#loc195 = loc("CWE369_Divide_by_Zero__float_rand_08.c":162:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_rand_08.c":155:8)
#loc197 = loc("CWE369_Divide_by_Zero__float_rand_08.c":155:26)
#loc198 = loc("CWE369_Divide_by_Zero__float_rand_08.c":156:5)
#loc199 = loc("CWE369_Divide_by_Zero__float_rand_08.c":157:9)
#loc200 = loc("CWE369_Divide_by_Zero__float_rand_08.c":161:9)
#loc201 = loc("CWE369_Divide_by_Zero__float_rand_08.c":159:13)
#loc202 = loc("CWE369_Divide_by_Zero__float_rand_08.c":159:44)
#loc203 = loc("CWE369_Divide_by_Zero__float_rand_08.c":159:32)
#loc204 = loc("CWE369_Divide_by_Zero__float_rand_08.c":159:40)
#loc205 = loc("CWE369_Divide_by_Zero__float_rand_08.c":160:26)
#loc206 = loc("CWE369_Divide_by_Zero__float_rand_08.c":160:13)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc3, #loc4])
#loc209 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc7, #loc8])
#loc211 = loc(fused[#loc10, #loc9])
#loc212 = loc(fused[#loc11, #loc12])
#loc213 = loc(fused[#loc13, #loc14])
#loc214 = loc(fused[#loc15, #loc12])
#loc215 = loc(fused[#loc17, #loc16])
#loc216 = loc(fused[#loc18, #loc19])
#loc217 = loc(fused[#loc20, #loc21])
#loc218 = loc(fused[#loc22, #loc19])
#loc219 = loc(fused[#loc23, #loc24])
#loc220 = loc(fused[#loc25, #loc26])
#loc221 = loc(fused[#loc27, #loc28])
#loc222 = loc(fused[#loc31, #loc32])
#loc223 = loc(fused[#loc33, #loc34])
#loc224 = loc(fused[#loc35, #loc36])
#loc225 = loc(fused[#loc37, #loc38])
#loc226 = loc(fused[#loc39, #loc40])
#loc227 = loc(fused[#loc41, #loc42])
#loc228 = loc(fused[#loc43, #loc44])
#loc229 = loc(fused[#loc45, #loc46])
#loc230 = loc(fused[#loc51, #loc52])
#loc233 = loc(fused[#loc62, #loc63])
#loc234 = loc(fused[#loc66, #loc67])
#loc235 = loc(fused[#loc70, #loc69])
#loc236 = loc(fused[#loc71, #loc72])
#loc237 = loc(fused[#loc74, #loc73])
#loc238 = loc(fused[#loc77, #loc78])
#loc239 = loc(fused[#loc79, #loc80])
#loc240 = loc(fused[#loc82, #loc81])
#loc241 = loc(fused[#loc83, #loc84])
#loc242 = loc(fused[#loc85, #loc86])
#loc243 = loc(fused[#loc87, #loc84])
#loc244 = loc(fused[#loc89, #loc88])
#loc245 = loc(fused[#loc90, #loc91])
#loc246 = loc(fused[#loc92, #loc93])
#loc247 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc248 = loc(fused[#loc98, #loc99])
#loc249 = loc(fused[#loc102, #loc101])
#loc250 = loc(fused[#loc103, #loc104, #loc105, #loc99])
#loc251 = loc(fused[#loc106, #loc107])
#loc252 = loc(fused[#loc108, #loc109])
#loc253 = loc(fused[#loc113, #loc114])
#loc254 = loc(fused[#loc116, #loc115])
#loc255 = loc(fused[#loc117, #loc118])
#loc256 = loc(fused[#loc119, #loc120])
#loc257 = loc(fused[#loc122, #loc121])
#loc258 = loc(fused[#loc123, #loc124])
#loc259 = loc(fused[#loc125, #loc126])
#loc260 = loc(fused[#loc127, #loc124])
#loc261 = loc(fused[#loc129, #loc128])
#loc262 = loc(fused[#loc130, #loc131])
#loc263 = loc(fused[#loc132, #loc133])
#loc264 = loc(fused[#loc134, #loc131])
#loc265 = loc(fused[#loc135, #loc136])
#loc266 = loc(fused[#loc139, #loc138])
#loc267 = loc(fused[#loc140, #loc141, #loc142, #loc136])
#loc268 = loc(fused[#loc143, #loc144])
#loc269 = loc(fused[#loc145, #loc146])
#loc270 = loc(fused[#loc151, #loc152])
#loc271 = loc(fused[#loc153, #loc154])
#loc272 = loc(fused[#loc156, #loc155])
#loc273 = loc(fused[#loc157, #loc158])
#loc274 = loc(fused[#loc159, #loc160])
#loc275 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc276 = loc(fused[#loc167, #loc166])
#loc277 = loc(fused[#loc168, #loc169])
#loc278 = loc(fused[#loc170, #loc171])
#loc279 = loc(fused[#loc172, #loc169])
#loc280 = loc(fused[#loc173, #loc174])
#loc281 = loc(fused[#loc175, #loc176])
#loc282 = loc(fused[#loc177, #loc178])
#loc283 = loc(fused[#loc181, #loc182])
#loc284 = loc(fused[#loc183, #loc184])
#loc285 = loc(fused[#loc186, #loc185])
#loc286 = loc(fused[#loc187, #loc188])
#loc287 = loc(fused[#loc189, #loc190])
#loc288 = loc(fused[#loc191, #loc188])
#loc289 = loc(fused[#loc193, #loc192])
#loc290 = loc(fused[#loc194, #loc195])
#loc291 = loc(fused[#loc196, #loc197])
#loc292 = loc(fused[#loc198, #loc195])
#loc293 = loc(fused[#loc199, #loc200])
#loc294 = loc(fused[#loc201, #loc202])
#loc295 = loc(fused[#loc203, #loc204])
