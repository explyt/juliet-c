!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc126)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc128)
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc129)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc130)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc133)
    cir.scope {
      %6 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc135)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc135)
      %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc19)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc137)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
        cir.store %13, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc29)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc141)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc31)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc34)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc35)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
          } loc(#loc142)
        } loc(#loc140)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
        %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc143)
        %17 = cir.const #cir.int<2> : !s32i loc(#loc39)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc40)
        %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
        cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc144)
      } loc(#loc136)
    } loc(#loc134)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc43)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc44)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc45)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc45)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    cir.return loc(#loc12)
  } loc(#loc131)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc145)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc148)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc61)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc152)
    cir.scope {
      %6 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc154)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc154)
      %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc65)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
      cir.if %9 {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc71)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc156)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc71)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc157)
        cir.store %13, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc158)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc160)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc80)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc83)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc84)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
          } loc(#loc161)
        } loc(#loc159)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
        %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc162)
        %17 = cir.const #cir.int<2> : !s32i loc(#loc87)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc88)
        %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
        cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      } loc(#loc155)
    } loc(#loc153)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc89)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc90)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc91)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc92)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc92)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc91)
    cir.return loc(#loc58)
  } loc(#loc150)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc97)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc166)
    cir.scope {
      %6 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc168)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc168)
      %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc101)
      cir.if %9 {
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc104)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc170)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc171)
        cir.store %13, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc172)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc174)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc113)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc115)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc116)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc117)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
          } loc(#loc175)
        } loc(#loc173)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc118)
        %15 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc119)
        %16 = cir.get_member %15[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc38)
        cir.store %14, %16 : !s32i, !cir.ptr<!s32i> loc(#loc176)
        %17 = cir.const #cir.int<2> : !s32i loc(#loc120)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc121)
        %19 = cir.get_member %18[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc41)
        cir.store %17, %19 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      } loc(#loc169)
    } loc(#loc167)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
    cir.call @printStructLine(%2) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc123)
    %3 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc124)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc125)
    cir.call @free(%5) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
    cir.return loc(#loc94)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":38:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":23:21)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":26:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":26:26)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":30:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":30:40)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":30:51)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":30:52)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":30:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:37)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:13)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:21)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:18)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":31:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":32:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":32:9)
#loc38 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":33:24)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":33:9)
#loc41 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":36:21)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":36:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":37:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":37:10)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":87:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":91:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":89:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":89:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":90:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":90:14)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":53:19)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":45:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":66:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":47:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":47:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":49:12)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":49:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":50:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":62:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":50:8)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":50:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":51:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":54:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":56:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":53:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":58:33)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":58:40)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":58:52)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":58:53)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":58:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:37)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:13)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:18)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:27)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":59:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":60:24)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":60:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":61:24)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":61:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":64:21)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":64:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":65:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":65:10)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":69:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":85:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":71:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":71:21)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":73:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":73:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":74:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":81:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":74:8)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":74:26)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":75:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":77:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":77:40)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":77:52)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":77:53)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":77:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:37)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:18)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":78:33)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":79:24)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":79:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":80:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":80:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":83:21)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":83:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":84:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_struct_11.c":84:10)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc11, #loc12])
#loc132 = loc(fused[#loc13, #loc14])
#loc133 = loc(fused[#loc16, #loc15])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc19, #loc20])
#loc136 = loc(fused[#loc21, #loc18])
#loc137 = loc(fused[#loc23, #loc24])
#loc138 = loc(fused[#loc22, #loc25])
#loc139 = loc(fused[#loc26, #loc25])
#loc140 = loc(fused[#loc27, #loc28])
#loc141 = loc(fused[#loc29, #loc30])
#loc142 = loc(fused[#loc32, #loc28])
#loc143 = loc(fused[#loc37, #loc36])
#loc144 = loc(fused[#loc40, #loc39])
#loc145 = loc(fused[#loc46, #loc47])
#loc146 = loc(fused[#loc48, #loc49])
#loc147 = loc(fused[#loc50, #loc51])
#loc148 = loc(fused[#loc52, #loc53])
#loc149 = loc(fused[#loc54, #loc55])
#loc150 = loc(fused[#loc57, #loc58])
#loc151 = loc(fused[#loc59, #loc60])
#loc152 = loc(fused[#loc62, #loc61])
#loc153 = loc(fused[#loc63, #loc64])
#loc154 = loc(fused[#loc65, #loc66])
#loc155 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc156 = loc(fused[#loc72, #loc73])
#loc157 = loc(fused[#loc71, #loc74])
#loc158 = loc(fused[#loc75, #loc74])
#loc159 = loc(fused[#loc76, #loc77])
#loc160 = loc(fused[#loc78, #loc79])
#loc161 = loc(fused[#loc81, #loc77])
#loc162 = loc(fused[#loc86, #loc85])
#loc163 = loc(fused[#loc88, #loc87])
#loc164 = loc(fused[#loc93, #loc94])
#loc165 = loc(fused[#loc95, #loc96])
#loc166 = loc(fused[#loc98, #loc97])
#loc167 = loc(fused[#loc99, #loc100])
#loc168 = loc(fused[#loc101, #loc102])
#loc169 = loc(fused[#loc103, #loc100])
#loc170 = loc(fused[#loc105, #loc106])
#loc171 = loc(fused[#loc104, #loc107])
#loc172 = loc(fused[#loc108, #loc107])
#loc173 = loc(fused[#loc109, #loc110])
#loc174 = loc(fused[#loc111, #loc112])
#loc175 = loc(fused[#loc114, #loc110])
#loc176 = loc(fused[#loc119, #loc118])
#loc177 = loc(fused[#loc121, #loc120])
