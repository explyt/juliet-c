!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":116:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":116:14)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":116:20)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":116:32)
#loc195 = loc(fused[#loc65, #loc66])
#loc196 = loc(fused[#loc67, #loc68])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc171)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc172)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc173)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc12)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc12)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc177)
    cir.scope {
      %10 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc171)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc179)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc21)
        %17 = cir.const #cir.int<100> : !s32i loc(#loc22)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc22)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc22)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc181)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc26)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc26)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
        %24 = cir.const #cir.int<100> : !s32i loc(#loc28)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc28)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc30)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc182)
      } loc(#loc180)
    } loc(#loc178)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc184)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc184)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc184)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc35)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc35)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc36)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc37)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc37)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc185)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc186)
      cir.libc.memcpy %20 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc187)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc43)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc43)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc44)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc44)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc46)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc46)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc188)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    } loc(#loc183)
    cir.return loc(#loc8)
  } loc(#loc174)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc189)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc192)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc196)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc199)
    cir.return %17 : !s32i loc(#loc199)
  } loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc201)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc89)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc89)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc89)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc89)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc89)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc89)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc202)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    cir.scope {
      %10 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc171)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %13 = cir.cmp(ne, %11, %12) : !s32i, !cir.bool loc(#loc205)
      cir.if %13 {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc83)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc83)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
      } else {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc100)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc101)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc102)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc103)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc102)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc102)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc207)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc106)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc106)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
        %24 = cir.const #cir.int<50> : !s32i loc(#loc108)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc108)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc110)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc208)
      } loc(#loc206)
    } loc(#loc204)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc210)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc210)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc210)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc115)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc115)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc116)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc117)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc117)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc211)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc212)
      cir.libc.memcpy %20 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc213)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc123)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc123)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc124)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc124)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc126)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc126)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc214)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    } loc(#loc209)
    cir.return loc(#loc85)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc134)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc134)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc134)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc134)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc134)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc134)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc217)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.scope {
      %10 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc171)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc139)
      %12 = cir.const #cir.int<5> : !s32i loc(#loc140)
      %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc220)
      cir.if %13 {
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
        %16 = cir.const #cir.int<65> : !s32i loc(#loc143)
        %17 = cir.const #cir.int<50> : !s32i loc(#loc144)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc144)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc144)
        cir.libc.memset %20 bytes from %15 set to %16 : !cir.ptr<!void>, !s32i, !u64i loc(#loc222)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc148)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc148)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
        %24 = cir.const #cir.int<50> : !s32i loc(#loc150)
        %25 = cir.const #cir.int<1> : !s32i loc(#loc151)
        %26 = cir.binop(sub, %24, %25) nsw : !s32i loc(#loc150)
        %27 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %26 : !s32i), !cir.ptr<!s8i> loc(#loc152)
        cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc223)
      } loc(#loc221)
    } loc(#loc219)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc225)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc225)
      cir.store %11, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc225)
      %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc157)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc157)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc158)
      %16 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc159)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %18 = cir.call @strlen(%17) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc159)
      %19 = cir.const #cir.int<1> : !u64i loc(#loc226)
      %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc227)
      cir.libc.memcpy %20 bytes from %15 to %13 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc228)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc165)
      %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc165)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc166)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc167)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc166)
      %26 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc168)
      %27 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc168)
      cir.store %22, %27 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    } loc(#loc224)
    cir.return loc(#loc130)
  } loc(#loc215)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":25:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":25:25)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":29:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":47:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":31:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":32:33)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":33:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":34:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":39:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":34:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":34:20)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":35:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:27)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:31)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":37:32)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":38:23)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":38:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":38:14)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":38:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":38:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":40:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":46:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":41:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":41:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:28)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:35)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:41)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:52)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":43:53)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":44:22)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":44:14)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":44:17)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":44:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":45:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":45:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":100:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":104:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":102:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":102:14)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":103:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":103:14)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":121:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":123:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":126:15)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":128:15)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":116:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":131:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":117:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":119:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":119:22)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":119:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":121:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":122:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":122:75)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":123:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":126:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":127:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":127:74)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":128:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":130:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":130:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":62:19)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":54:1)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":77:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":56:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":56:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":57:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":57:33)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":58:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":58:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":59:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":69:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":59:8)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":59:20)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":60:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":63:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":65:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":62:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:27)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:30)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:9)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":67:31)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":68:22)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":68:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":68:14)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":68:17)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":68:18)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":70:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":76:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":71:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":71:25)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:16)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:22)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:28)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:35)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:41)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:52)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":73:53)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":74:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":74:14)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":74:17)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":74:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":75:19)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":75:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":80:1)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":98:1)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":82:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":82:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":83:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":83:33)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":84:12)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":84:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":85:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":90:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":85:8)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":85:20)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":86:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:16)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:22)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:27)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:30)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:9)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":88:31)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":89:22)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":89:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":89:14)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":89:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":89:18)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":91:5)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":97:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":92:9)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":92:25)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:16)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:22)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:28)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:35)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:41)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:52)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":94:53)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":95:22)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":95:14)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":95:17)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":95:9)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":96:19)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_memcpy_07.c":96:9)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc14, #loc13])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc17, #loc18])
#loc180 = loc(fused[#loc19, #loc16])
#loc181 = loc(fused[#loc24, #loc25])
#loc182 = loc(fused[#loc27, #loc26])
#loc183 = loc(fused[#loc31, #loc32])
#loc184 = loc(fused[#loc33, #loc34])
#loc185 = loc(fused[#loc39, #loc40])
#loc186 = loc(fused[#loc37, #loc40])
#loc187 = loc(fused[#loc41, #loc42])
#loc188 = loc(fused[#loc46, #loc43])
#loc189 = loc(fused[#loc49, #loc50])
#loc190 = loc(fused[#loc51, #loc52])
#loc191 = loc(fused[#loc53, #loc54])
#loc192 = loc(fused[#loc55, #loc56])
#loc193 = loc(fused[#loc57, #loc58])
#loc194 = loc(fused[#loc63, #loc64])
#loc197 = loc(fused[#loc74, #loc75])
#loc198 = loc(fused[#loc78, #loc79])
#loc199 = loc(fused[#loc82, #loc81])
#loc200 = loc(fused[#loc84, #loc85])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc88, #loc89])
#loc203 = loc(fused[#loc91, #loc90])
#loc204 = loc(fused[#loc92, #loc93])
#loc205 = loc(fused[#loc94, #loc95])
#loc206 = loc(fused[#loc96, #loc97, #loc98, #loc93])
#loc207 = loc(fused[#loc104, #loc105])
#loc208 = loc(fused[#loc107, #loc106])
#loc209 = loc(fused[#loc111, #loc112])
#loc210 = loc(fused[#loc113, #loc114])
#loc211 = loc(fused[#loc119, #loc120])
#loc212 = loc(fused[#loc117, #loc120])
#loc213 = loc(fused[#loc121, #loc122])
#loc214 = loc(fused[#loc126, #loc123])
#loc215 = loc(fused[#loc129, #loc130])
#loc216 = loc(fused[#loc131, #loc132])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc136, #loc135])
#loc219 = loc(fused[#loc137, #loc138])
#loc220 = loc(fused[#loc139, #loc140])
#loc221 = loc(fused[#loc141, #loc138])
#loc222 = loc(fused[#loc146, #loc147])
#loc223 = loc(fused[#loc149, #loc148])
#loc224 = loc(fused[#loc153, #loc154])
#loc225 = loc(fused[#loc155, #loc156])
#loc226 = loc(fused[#loc161, #loc162])
#loc227 = loc(fused[#loc159, #loc162])
#loc228 = loc(fused[#loc163, #loc164])
#loc229 = loc(fused[#loc168, #loc165])
