!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":24:60)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":24:67)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":42:64)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":42:71)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":56:64)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":56:71)
#loc127 = loc(fused[#loc15, #loc16])
#loc138 = loc(fused[#loc51, #loc52])
#loc149 = loc(fused[#loc88, #loc89])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc120)
  cir.func private  @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc122)
  cir.func private  @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc123)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc125)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_badSink(%arg0: !cir.ptr<!void> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc127)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc17)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc129)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc130)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc24)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc25)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc25)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc24)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc129)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc26)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc28)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc131)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc132)
      %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
      cir.store %13, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
      cir.scope {
        %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
        %25 = cir.cmp(eq, %23, %24) : !cir.ptr<!void>, !s32i loc(#loc134)
        %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc35)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc37)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc39)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc37)
        } loc(#loc135)
      } loc(#loc133)
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc41)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
      %18 = cir.call @wcscpy(%15, %17) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc42)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc43)
      cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc44)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc45)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc46)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    } loc(#loc128)
    cir.return loc(#loc14)
  } loc(#loc126)
  cir.func private  @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc136)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodG2BSink(%arg0: !cir.ptr<!void> loc(fused[#loc51, #loc52])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc138)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc53)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc140)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc141)
      %3 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc60)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
      %6 = cir.call @strlen(%5) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc60)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc140)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc62)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc63)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc64)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc142)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc65)
      %14 = cir.call @calloc(%11, %13) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc62)
      cir.store %14, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
      cir.scope {
        %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
        %26 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc69)
        %27 = cir.cmp(eq, %25, %26) : !cir.ptr<!void>, !s32i loc(#loc144)
        %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc70)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc74)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
        } loc(#loc145)
      } loc(#loc143)
      %15 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc75)
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc76)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc77)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc77)
      %20 = cir.call @strcpy(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc75)
      %21 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc78)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc79)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc80)
      %24 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
      cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc80)
    } loc(#loc139)
    cir.return loc(#loc50)
  } loc(#loc137)
  cir.func private  @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc146)
  cir.func private  @printWLine(!cir.ptr<!s32i>) loc(#loc147)
  cir.func  @CWE122_Heap_Based_Buffer_Overflow__CWE135_65b_goodB2GSink(%arg0: !cir.ptr<!void> loc(fused[#loc88, #loc89])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc90)
    cir.scope {
      %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc151)
      %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc152)
      %3 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc97)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc98)
      %6 = cir.call @wcslen(%5) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc97)
      cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc151)
      %7 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc99)
      %8 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc100)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc101)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc101)
      %11 = cir.binop(add, %8, %10) : !u64i loc(#loc153)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc154)
      %13 = cir.call @calloc(%11, %12) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc99)
      cir.store %13, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc152)
      cir.scope {
        %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
        %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
        %25 = cir.cmp(eq, %23, %24) : !cir.ptr<!void>, !s32i loc(#loc156)
        %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc108)
        cir.if %26 {
          %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
          %28 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc112)
          cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
        } loc(#loc157)
      } loc(#loc155)
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
      %18 = cir.call @wcscpy(%15, %17) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc115)
      %19 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc116)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc116)
      cir.call @printWLine(%20) : (!cir.ptr<!s32i>) -> () loc(#loc117)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc118)
      %22 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
      cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc118)
    } loc(#loc150)
    cir.return loc(#loc87)
  } loc(#loc148)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":35:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":25:1)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":34:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":28:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":28:45)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:64)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":28:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":28:41)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:46)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:49)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":29:63)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:28)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:34)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":30:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":31:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":31:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":31:15)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":32:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":32:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":33:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":33:14)
#loc47 = loc("/usr/include/string.h":141:1)
#loc48 = loc("/usr/include/string.h":142:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":42:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":53:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":43:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":44:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":52:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":46:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":46:45)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:50)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":46:26)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":46:41)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:38)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:46)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":47:49)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:21)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:27)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:28)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:34)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":48:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":49:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":49:22)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":49:28)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":50:27)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":50:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":51:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":51:14)
#loc82 = loc("/usr/include/wchar.h":247:1)
#loc83 = loc("/usr/include/wchar.h":247:51)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc85 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":56:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":67:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":57:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":58:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":66:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":60:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":60:48)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:64)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":60:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":60:44)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:31)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:38)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:46)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:49)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":61:63)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":62:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":63:22)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":63:28)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":63:15)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":64:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":64:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":65:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_65b.c":65:14)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc128 = loc(fused[#loc18, #loc19])
#loc129 = loc(fused[#loc20, #loc21])
#loc130 = loc(fused[#loc22, #loc23])
#loc131 = loc(fused[#loc27, #loc28])
#loc132 = loc(fused[#loc29, #loc30])
#loc133 = loc(fused[#loc31, #loc32])
#loc134 = loc(fused[#loc33, #loc34])
#loc135 = loc(fused[#loc36, #loc32])
#loc136 = loc(fused[#loc47, #loc48])
#loc137 = loc(fused[#loc49, #loc50])
#loc139 = loc(fused[#loc54, #loc55])
#loc140 = loc(fused[#loc56, #loc57])
#loc141 = loc(fused[#loc58, #loc59])
#loc142 = loc(fused[#loc63, #loc64])
#loc143 = loc(fused[#loc66, #loc67])
#loc144 = loc(fused[#loc68, #loc69])
#loc145 = loc(fused[#loc71, #loc67])
#loc146 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc86, #loc87])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc100, #loc101])
#loc154 = loc(fused[#loc102, #loc103])
#loc155 = loc(fused[#loc104, #loc105])
#loc156 = loc(fused[#loc106, #loc107])
#loc157 = loc(fused[#loc109, #loc105])
