!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc171)
  cir.func private @printIntLine(!s32i) loc(#loc172)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc173)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    cir.scope {
      %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc171)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc15)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc180)
          %13 = cir.const #cir.int<100> : !s32i loc(#loc20)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc20)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc20)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc20)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
          cir.store %19, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc180)
          cir.scope {
            %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc182)
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc27)
              %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc27)
              cir.store %23, %21 : !u64i, !cir.ptr<!u64i> loc(#loc184)
              cir.for : cond {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc29)
                %25 = cir.const #cir.int<100> : !s32i loc(#loc30)
                %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc30)
                %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc185)
                cir.condition(%27) loc(#loc31)
              } body {
                cir.scope {
                  %24 = cir.const #cir.int<5> : !s32i loc(#loc33)
                  %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
                  %26 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc35)
                  %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc36)
                  cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc187)
                } loc(#loc186)
                cir.yield loc(#loc26)
              } step {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc37)
                %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc38)
                cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc188)
                cir.yield loc(#loc183)
              } loc(#loc183)
            } loc(#loc183)
          } loc(#loc181)
          %20 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
          cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
        } loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc43)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc44)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc45)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc46)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc45)
    cir.return loc(#loc8)
  } loc(#loc174)
  cir.func no_proto @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc190)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc193)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc57)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc196)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc67)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc199)
    cir.scope {
      %9 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc193)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc71)
      cir.if %11 {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc75)
      } else {
        cir.scope {
          %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc203)
          %13 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc80)
          %14 = cir.const #cir.int<100> : !s32i loc(#loc81)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc81)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc204)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc205)
          %18 = cir.call @malloc(%17) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
          cir.store %19, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
          cir.scope {
            %21 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
            %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc208)
            cir.if %24 {
              %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc89)
              %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc90)
              %28 = cir.const #cir.int<1> : !s32i loc(#loc91)
              cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc90)
            } loc(#loc209)
          } loc(#loc207)
          cir.scope {
            %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc211)
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc98)
              %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc98)
              cir.store %23, %21 : !u64i, !cir.ptr<!u64i> loc(#loc213)
              cir.for : cond {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc100)
                %25 = cir.const #cir.int<100> : !s32i loc(#loc101)
                %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc101)
                %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc214)
                cir.condition(%27) loc(#loc102)
              } body {
                cir.scope {
                  %24 = cir.const #cir.int<5> : !s32i loc(#loc104)
                  %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
                  %26 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc106)
                  %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc107)
                  cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc216)
                } loc(#loc215)
                cir.yield loc(#loc97)
              } step {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc108)
                %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc109)
                cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc217)
                cir.yield loc(#loc212)
              } loc(#loc212)
            } loc(#loc212)
          } loc(#loc210)
          %20 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
          cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc218)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc112)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc114)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc115)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc116)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc117)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc116)
    cir.return loc(#loc64)
  } loc(#loc197)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc122)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc221)
    cir.scope {
      %9 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc171)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc126)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc126)
      cir.if %11 {
        cir.scope {
          %12 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc225)
          %13 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc132)
          %14 = cir.const #cir.int<100> : !s32i loc(#loc133)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc133)
          %16 = cir.const #cir.int<4> : !u64i loc(#loc226)
          %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc227)
          %18 = cir.call @malloc(%17) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc228)
          cir.store %19, %12 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc225)
          cir.scope {
            %21 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
            %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc139)
            %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc139)
            %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc230)
            cir.if %24 {
              %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc141)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc141)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc142)
              %27 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc143)
              %28 = cir.const #cir.int<1> : !s32i loc(#loc144)
              cir.call @exit(%28) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
            } loc(#loc231)
          } loc(#loc229)
          cir.scope {
            %21 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc233)
            cir.scope {
              %22 = cir.const #cir.int<0> : !s32i loc(#loc151)
              %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc151)
              cir.store %23, %21 : !u64i, !cir.ptr<!u64i> loc(#loc235)
              cir.for : cond {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc153)
                %25 = cir.const #cir.int<100> : !s32i loc(#loc154)
                %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc154)
                %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc236)
                cir.condition(%27) loc(#loc155)
              } body {
                cir.scope {
                  %24 = cir.const #cir.int<5> : !s32i loc(#loc157)
                  %25 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
                  %26 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc159)
                  %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc160)
                  cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc238)
                } loc(#loc237)
                cir.yield loc(#loc150)
              } step {
                %24 = cir.load %21 : !cir.ptr<!u64i>, !u64i loc(#loc161)
                %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc162)
                cir.store %25, %21 : !u64i, !cir.ptr<!u64i> loc(#loc239)
                cir.yield loc(#loc234)
              } loc(#loc234)
            } loc(#loc234)
          } loc(#loc232)
          %20 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
          cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
        } loc(#loc224)
      } loc(#loc223)
    } loc(#loc222)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc166)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc167)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc168)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc169)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc170)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
    cir.return loc(#loc119)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":23:1)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":45:1)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":25:5)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":25:11)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":26:12)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":26:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":27:5)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":41:5)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":27:8)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":28:5)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":29:9)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":40:9)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":31:13)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":31:39)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":32:13)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":38:13)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":33:17)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":33:24)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:17)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":37:17)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:26)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:22)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:29)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:33)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:31)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":35:17)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":36:37)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":36:21)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":36:32)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":36:33)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:39)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":34:38)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":39:20)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":39:13)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":42:18)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":42:23)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":42:24)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":42:5)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":44:5)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":44:10)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":116:1)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":120:1)
#loc49 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":118:5)
#loc50 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":118:14)
#loc51 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":119:5)
#loc52 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":119:14)
#loc53 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc54 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":59:19)
#loc58 = loc("/usr/include/stdlib.h":672:1)
#loc59 = loc("/usr/include/stdlib.h":672:45)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":68:27)
#loc61 = loc("/usr/include/stdlib.h":756:1)
#loc62 = loc("/usr/include/stdlib.h":756:70)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":52:1)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":84:1)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":54:5)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":54:11)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":55:12)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":55:5)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":56:5)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":80:5)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":56:8)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":57:5)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":60:5)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":62:5)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":59:9)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":63:9)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":79:9)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:13)
#loc79 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:61)
#loc80 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:39)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:46)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:50)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":65:60)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":66:13)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":70:13)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":66:17)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":66:31)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":67:13)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":68:17)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":69:17)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":69:22)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":71:13)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":77:13)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":72:17)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":72:24)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:17)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":76:17)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:26)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:22)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:29)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:33)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:31)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":74:17)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":75:37)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":75:21)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":75:32)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":75:33)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:39)
#loc109 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":73:38)
#loc110 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":78:20)
#loc111 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":78:13)
#loc112 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":81:18)
#loc113 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":81:23)
#loc114 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":81:24)
#loc115 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":81:5)
#loc116 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":83:5)
#loc117 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":83:10)
#loc118 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":87:1)
#loc119 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":114:1)
#loc120 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":89:5)
#loc121 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":89:11)
#loc122 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":90:12)
#loc123 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":90:5)
#loc124 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":91:5)
#loc125 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":110:5)
#loc126 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":91:8)
#loc127 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":92:5)
#loc128 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":93:9)
#loc129 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":109:9)
#loc130 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:13)
#loc131 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:61)
#loc132 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:39)
#loc133 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:46)
#loc134 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:50)
#loc135 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":95:60)
#loc136 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":96:13)
#loc137 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":100:13)
#loc138 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":96:17)
#loc139 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":96:31)
#loc140 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":97:13)
#loc141 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":98:27)
#loc142 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":98:17)
#loc143 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":99:17)
#loc144 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":99:22)
#loc145 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":101:13)
#loc146 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":107:13)
#loc147 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":102:17)
#loc148 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":102:24)
#loc149 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:17)
#loc150 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":106:17)
#loc151 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:26)
#loc152 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:22)
#loc153 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:29)
#loc154 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:33)
#loc155 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:31)
#loc156 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":104:17)
#loc157 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":105:37)
#loc158 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":105:21)
#loc159 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":105:32)
#loc160 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":105:33)
#loc161 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:39)
#loc162 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":103:38)
#loc163 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":108:20)
#loc164 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":108:13)
#loc165 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":111:18)
#loc166 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":111:23)
#loc167 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":111:24)
#loc168 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":111:5)
#loc169 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":113:5)
#loc170 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_09.c":113:10)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc12, #loc11])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc16, #loc14])
#loc179 = loc(fused[#loc17, #loc18])
#loc180 = loc(fused[#loc19, #loc20])
#loc181 = loc(fused[#loc21, #loc22])
#loc182 = loc(fused[#loc23, #loc24])
#loc183 = loc(fused[#loc25, #loc26])
#loc184 = loc(fused[#loc28, #loc27])
#loc185 = loc(fused[#loc29, #loc30])
#loc186 = loc(fused[#loc32, #loc26])
#loc187 = loc(fused[#loc34, #loc33])
#loc188 = loc(fused[#loc38, #loc37])
#loc189 = loc(fused[#loc40, #loc39])
#loc190 = loc(fused[#loc47, #loc48])
#loc191 = loc(fused[#loc49, #loc50])
#loc192 = loc(fused[#loc51, #loc52])
#loc193 = loc(fused[#loc53, #loc54])
#loc194 = loc(fused[#loc55, #loc56])
#loc195 = loc(fused[#loc58, #loc59])
#loc196 = loc(fused[#loc61, #loc62])
#loc197 = loc(fused[#loc63, #loc64])
#loc198 = loc(fused[#loc65, #loc66])
#loc199 = loc(fused[#loc68, #loc67])
#loc200 = loc(fused[#loc69, #loc70])
#loc201 = loc(fused[#loc72, #loc73, #loc74, #loc70])
#loc202 = loc(fused[#loc76, #loc77])
#loc203 = loc(fused[#loc78, #loc79])
#loc204 = loc(fused[#loc82, #loc83])
#loc205 = loc(fused[#loc81, #loc83])
#loc206 = loc(fused[#loc80, #loc79])
#loc207 = loc(fused[#loc84, #loc85])
#loc208 = loc(fused[#loc86, #loc87])
#loc209 = loc(fused[#loc88, #loc85])
#loc210 = loc(fused[#loc92, #loc93])
#loc211 = loc(fused[#loc94, #loc95])
#loc212 = loc(fused[#loc96, #loc97])
#loc213 = loc(fused[#loc99, #loc98])
#loc214 = loc(fused[#loc100, #loc101])
#loc215 = loc(fused[#loc103, #loc97])
#loc216 = loc(fused[#loc105, #loc104])
#loc217 = loc(fused[#loc109, #loc108])
#loc218 = loc(fused[#loc111, #loc110])
#loc219 = loc(fused[#loc118, #loc119])
#loc220 = loc(fused[#loc120, #loc121])
#loc221 = loc(fused[#loc123, #loc122])
#loc222 = loc(fused[#loc124, #loc125])
#loc223 = loc(fused[#loc127, #loc125])
#loc224 = loc(fused[#loc128, #loc129])
#loc225 = loc(fused[#loc130, #loc131])
#loc226 = loc(fused[#loc134, #loc135])
#loc227 = loc(fused[#loc133, #loc135])
#loc228 = loc(fused[#loc132, #loc131])
#loc229 = loc(fused[#loc136, #loc137])
#loc230 = loc(fused[#loc138, #loc139])
#loc231 = loc(fused[#loc140, #loc137])
#loc232 = loc(fused[#loc145, #loc146])
#loc233 = loc(fused[#loc147, #loc148])
#loc234 = loc(fused[#loc149, #loc150])
#loc235 = loc(fused[#loc152, #loc151])
#loc236 = loc(fused[#loc153, #loc154])
#loc237 = loc(fused[#loc156, #loc150])
#loc238 = loc(fused[#loc158, #loc157])
#loc239 = loc(fused[#loc162, #loc161])
#loc240 = loc(fused[#loc164, #loc163])
