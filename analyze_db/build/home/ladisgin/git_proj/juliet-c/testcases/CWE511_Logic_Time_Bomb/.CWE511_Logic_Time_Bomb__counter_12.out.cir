!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:10)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:14)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:20)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:32)
#loc157 = loc(fused[#loc66, #loc67])
#loc158 = loc(fused[#loc68, #loc69])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc129)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc134)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc134)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc137)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc21)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc137)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc26)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc27)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc140)
                cir.if %10 {
                  %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                  %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc29)
                } loc(#loc141)
              } loc(#loc139)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc30)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc31)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc142)
              cir.yield loc(#loc23)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc32)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc143)
              cir.condition(%8) loc(#loc34)
            } loc(#loc138)
          } loc(#loc138)
        } loc(#loc136)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc145)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc38)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc145)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc43)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc44)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc148)
                cir.if %10 {
                  %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc8)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc8)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
                } loc(#loc149)
              } loc(#loc147)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc48)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc150)
              cir.yield loc(#loc40)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc49)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc50)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc151)
              cir.condition(%8) loc(#loc51)
            } loc(#loc146)
          } loc(#loc146)
        } loc(#loc144)
      } loc(#loc135)
    } loc(#loc133)
    cir.return loc(#loc10)
  } loc(#loc132)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc53)
  } loc(#loc152)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc154)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc63)
  cir.func @main(%arg0: !s32i loc(fused[#loc66, #loc67]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc68, #loc69])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc158)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc65)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc70)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc71)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc72)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc72)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc73)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc60)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call @CWE511_Logic_Time_Bomb__counter_12_good() : () -> () loc(#loc75)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc61)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call @CWE511_Logic_Time_Bomb__counter_12_bad() : () -> () loc(#loc79)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc63)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.return %17 : !s32i loc(#loc161)
  } loc(#loc156)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc164)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc164)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc88)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc88)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc167)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc96)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc167)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc102)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc170)
                cir.if %10 {
                  %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc104)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc104)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc105)
                } loc(#loc171)
              } loc(#loc169)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc107)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc172)
              cir.yield loc(#loc98)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc108)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc173)
              cir.condition(%8) loc(#loc110)
            } loc(#loc168)
          } loc(#loc168)
        } loc(#loc166)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc175)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc114)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc175)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc120)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc178)
                cir.if %10 {
                  %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc122)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc122)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc123)
                } loc(#loc179)
              } loc(#loc177)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc125)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc180)
              cir.yield loc(#loc116)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc126)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc127)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc181)
              cir.condition(%8) loc(#loc128)
            } loc(#loc176)
          } loc(#loc176)
        } loc(#loc174)
      } loc(#loc165)
    } loc(#loc163)
    cir.return loc(#loc85)
  } loc(#loc162)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:28)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:31)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_12.c":29:1)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_12.c":63:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_12.c":62:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:8)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:33)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_12.c":32:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_12.c":46:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_12.c":48:5)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_12.c":33:9)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_12.c":45:9)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:13)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:25)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_12.c":35:13)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:25)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:17)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_12.c":41:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:21)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:30)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_12.c":39:17)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:21)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:22)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:17)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:19)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:24)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:21)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_12.c":49:9)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_12.c":61:9)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:13)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:25)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_12.c":51:13)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:25)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:17)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_12.c":57:17)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:21)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:30)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_12.c":55:17)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:21)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:22)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:17)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:19)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:24)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:21)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_12.c":106:1)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_12.c":109:1)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:11)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_12.c":125:15)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_12.c":127:15)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_12.c":130:15)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_12.c":132:15)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_12.c":120:1)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_12.c":135:1)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_12.c":121:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:27)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:22)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_12.c":123:5)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_12.c":125:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_12.c":126:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_12.c":126:45)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_12.c":127:5)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_12.c":130:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_12.c":131:5)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_12.c":131:44)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_12.c":132:5)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_12.c":134:12)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_12.c":134:5)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_12.c":70:1)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_12.c":104:1)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:5)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_12.c":103:5)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:8)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:33)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_12.c":73:5)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_12.c":87:5)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_12.c":89:5)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_12.c":74:9)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_12.c":86:9)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:13)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:25)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_12.c":76:13)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:25)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:17)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_12.c":82:17)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:21)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:30)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_12.c":80:17)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:31)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:21)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:22)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:17)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:19)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:24)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:21)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_12.c":90:9)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_12.c":102:9)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:13)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:25)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_12.c":92:13)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:25)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:17)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_12.c":98:17)
#loc119 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:21)
#loc120 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:30)
#loc121 = loc("CWE511_Logic_Time_Bomb__counter_12.c":96:17)
#loc122 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:31)
#loc123 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:21)
#loc124 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:22)
#loc125 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:17)
#loc126 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:19)
#loc127 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:24)
#loc128 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:21)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc6, #loc7])
#loc132 = loc(fused[#loc9, #loc10])
#loc133 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc13, #loc14])
#loc135 = loc(fused[#loc15, #loc16, #loc17, #loc12])
#loc136 = loc(fused[#loc18, #loc19])
#loc137 = loc(fused[#loc20, #loc21])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc24, #loc25])
#loc140 = loc(fused[#loc26, #loc27])
#loc141 = loc(fused[#loc28, #loc25])
#loc142 = loc(fused[#loc31, #loc30])
#loc143 = loc(fused[#loc32, #loc33])
#loc144 = loc(fused[#loc35, #loc36])
#loc145 = loc(fused[#loc37, #loc38])
#loc146 = loc(fused[#loc39, #loc40])
#loc147 = loc(fused[#loc41, #loc42])
#loc148 = loc(fused[#loc43, #loc44])
#loc149 = loc(fused[#loc45, #loc42])
#loc150 = loc(fused[#loc48, #loc47])
#loc151 = loc(fused[#loc49, #loc50])
#loc152 = loc(fused[#loc52, #loc53])
#loc153 = loc(fused[#loc54, #loc55])
#loc154 = loc(fused[#loc56, #loc57])
#loc155 = loc(fused[#loc58, #loc59])
#loc156 = loc(fused[#loc64, #loc65])
#loc159 = loc(fused[#loc75, #loc76])
#loc160 = loc(fused[#loc79, #loc80])
#loc161 = loc(fused[#loc83, #loc82])
#loc162 = loc(fused[#loc84, #loc85])
#loc163 = loc(fused[#loc86, #loc87])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc166 = loc(fused[#loc93, #loc94])
#loc167 = loc(fused[#loc95, #loc96])
#loc168 = loc(fused[#loc97, #loc98])
#loc169 = loc(fused[#loc99, #loc100])
#loc170 = loc(fused[#loc101, #loc102])
#loc171 = loc(fused[#loc103, #loc100])
#loc172 = loc(fused[#loc107, #loc106])
#loc173 = loc(fused[#loc108, #loc109])
#loc174 = loc(fused[#loc111, #loc112])
#loc175 = loc(fused[#loc113, #loc114])
#loc176 = loc(fused[#loc115, #loc116])
#loc177 = loc(fused[#loc117, #loc118])
#loc178 = loc(fused[#loc119, #loc120])
#loc179 = loc(fused[#loc121, #loc118])
#loc180 = loc(fused[#loc125, #loc124])
#loc181 = loc(fused[#loc126, #loc127])
