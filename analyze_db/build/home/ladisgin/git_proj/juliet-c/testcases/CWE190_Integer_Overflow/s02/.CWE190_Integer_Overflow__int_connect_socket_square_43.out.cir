!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc18 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":49:23)
#loc19 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":49:28)
#loc126 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":127:27)
#loc127 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":127:32)
#loc147 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":147:27)
#loc148 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":147:32)
#loc278 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":244:10)
#loc279 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":244:14)
#loc280 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":244:20)
#loc281 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":244:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc302 = loc(fused[#loc18, #loc19])
#loc342 = loc(fused[#loc126, #loc127])
#loc350 = loc(fused[#loc147, #loc148])
#loc396 = loc(fused[#loc278, #loc279])
#loc397 = loc(fused[#loc280, #loc281])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc294)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc296)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc297)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc298)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc299)
  cir.func private @close(!s32i) -> !s32i loc(#loc300)
  cir.func internal private @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc18, #loc19])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc302)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc20)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc304)
      %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc305)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc306)
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc307)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc28)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc306)
      cir.scope {
        cir.do {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc33)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc34)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc34)
          %10 = cir.const #cir.int<6> : !u32i loc(#loc35)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc35)
          %12 = cir.call @socket(%7, %9, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc36)
          cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc309)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc41)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc42)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc42)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc311)
            cir.if %54 {
              cir.break loc(#loc44)
            } loc(#loc312)
          } loc(#loc310)
          %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc313)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc47)
          %15 = cir.const #cir.int<16> : !u64i loc(#loc314)
          cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc315)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc52)
          %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc52)
          %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc53)
          cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc316)
          %19 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
          %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc55)
          %22 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc56)
          %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc57)
          cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc317)
          %24 = cir.const #cir.int<27015> : !s32i loc(#loc60)
          %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc60)
          %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc61)
          %27 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc318)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
            %52 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc320)
            %53 = cir.const #cir.int<16> : !u64i loc(#loc321)
            %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc321)
            %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc72)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc73)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc73)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc322)
            cir.if %58 {
              cir.break loc(#loc75)
            } loc(#loc323)
          } loc(#loc319)
          %28 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc76)
          %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc77)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc77)
          %31 = cir.const #cir.int<3> : !s32i loc(#loc78)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc78)
          %33 = cir.const #cir.int<4> : !u64i loc(#loc78)
          %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc78)
          %35 = cir.const #cir.int<2> : !s32i loc(#loc78)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc78)
          %37 = cir.binop(add, %34, %36) : !u64i loc(#loc78)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc79)
          %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc324)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc80)
          %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc81)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc81)
          cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc325)
          cir.scope {
            %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc87)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc87)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc327)
            %55 = cir.ternary(%54, true {
              %56 = cir.const #true loc(#loc88)
              cir.yield %56 : !cir.bool loc(#loc88)
            }, false {
              %56 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %57 = cir.const #cir.int<0> : !s32i loc(#loc90)
              %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc328)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc88)
                cir.yield %60 : !cir.bool loc(#loc88)
              }, false {
                %60 = cir.const #false loc(#loc88)
                cir.yield %60 : !cir.bool loc(#loc88)
              }) : (!cir.bool) -> !cir.bool loc(#loc88)
              cir.yield %59 : !cir.bool loc(#loc88)
            }) : (!cir.bool) -> !cir.bool loc(#loc88)
            cir.if %55 {
              cir.break loc(#loc92)
            } loc(#loc329)
          } loc(#loc326)
          %44 = cir.const #cir.int<0> : !s8i loc(#loc93)
          %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %46 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
          %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc95)
          cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc330)
          %48 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc96)
          %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc97)
          %50 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc98)
          cir.store %49, %50 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          cir.yield loc(#loc32)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc100)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc100)
          cir.condition(%8) loc(#loc100)
        } loc(#loc308)
      } loc(#loc308)
      cir.scope {
        %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc104)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc104)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc333)
        cir.if %10 {
          %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc107)
        } loc(#loc334)
      } loc(#loc332)
    } loc(#loc303)
    cir.return loc(#loc17)
  } loc(#loc301)
  cir.func private @printIntLine(!s32i) loc(#loc335)
  cir.func @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc337)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc338)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L9badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc116)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc340)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
      %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc121)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc340)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc123)
    } loc(#loc339)
    cir.return loc(#loc111)
  } loc(#loc336)
  cir.func internal private @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc126, #loc127])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc342)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc129)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc343)
    cir.return loc(#loc125)
  } loc(#loc341)
  cir.func internal private @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc345)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc346)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L13goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc137)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc348)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      %5 = cir.binop(mul, %3, %4) nsw : !s32i loc(#loc142)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc348)
      %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
      cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc144)
    } loc(#loc347)
    cir.return loc(#loc132)
  } loc(#loc344)
  cir.func internal private @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc147, #loc148])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc350)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc352)
      %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc353)
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc354)
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc355)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc157)
      cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc354)
      cir.scope {
        cir.do {
          %7 = cir.const #cir.int<2> : !s32i loc(#loc162)
          %8 = cir.const #cir.int<1> : !u32i loc(#loc163)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc163)
          %10 = cir.const #cir.int<6> : !u32i loc(#loc164)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc164)
          %12 = cir.call @socket(%7, %9, %11) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc165)
          cir.store %12, %3 : !s32i, !cir.ptr<!s32i> loc(#loc357)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc171)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc171)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc359)
            cir.if %54 {
              cir.break loc(#loc173)
            } loc(#loc360)
          } loc(#loc358)
          %13 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc361)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc176)
          %15 = cir.const #cir.int<16> : !u64i loc(#loc362)
          cir.libc.memset %15 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc363)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc181)
          %17 = cir.cast(integral, %16 : !s32i), !u16i loc(#loc181)
          %18 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc53)
          cir.store %17, %18 : !u16i, !cir.ptr<!u16i> loc(#loc364)
          %19 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc183)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc183)
          %21 = cir.call @inet_addr(%20) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc184)
          %22 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc56)
          %23 = cir.get_member %22[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc57)
          cir.store %21, %23 : !u32i, !cir.ptr<!u32i> loc(#loc365)
          %24 = cir.const #cir.int<27015> : !s32i loc(#loc187)
          %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc187)
          %26 = cir.call @htons(%25) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc188)
          %27 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
          cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc366)
          cir.scope {
            %51 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc193)
            %52 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc368)
            %53 = cir.const #cir.int<16> : !u64i loc(#loc369)
            %54 = cir.cast(integral, %53 : !u64i), !u32i loc(#loc369)
            %55 = cir.call @connect(%51, %52, %54) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc198)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc199)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc199)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc370)
            cir.if %58 {
              cir.break loc(#loc201)
            } loc(#loc371)
          } loc(#loc367)
          %28 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %29 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc203)
          %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc203)
          %31 = cir.const #cir.int<3> : !s32i loc(#loc204)
          %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc204)
          %33 = cir.const #cir.int<4> : !u64i loc(#loc204)
          %34 = cir.binop(mul, %32, %33) : !u64i loc(#loc204)
          %35 = cir.const #cir.int<2> : !s32i loc(#loc204)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc204)
          %37 = cir.binop(add, %34, %36) : !u64i loc(#loc204)
          %38 = cir.const #cir.int<1> : !s32i loc(#loc205)
          %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc205)
          %40 = cir.binop(sub, %37, %39) : !u64i loc(#loc372)
          %41 = cir.const #cir.int<0> : !s32i loc(#loc206)
          %42 = cir.call @recv(%28, %30, %40, %41) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc207)
          %43 = cir.cast(integral, %42 : !s64i), !s32i loc(#loc207)
          cir.store %43, %1 : !s32i, !cir.ptr<!s32i> loc(#loc373)
          cir.scope {
            %51 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc212)
            %52 = cir.const #cir.int<1> : !s32i loc(#loc213)
            %53 = cir.unary(minus, %52) : !s32i, !s32i loc(#loc213)
            %54 = cir.cmp(eq, %51, %53) : !s32i, !cir.bool loc(#loc375)
            %55 = cir.ternary(%54, true {
              %56 = cir.const #true loc(#loc214)
              cir.yield %56 : !cir.bool loc(#loc214)
            }, false {
              %56 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc215)
              %57 = cir.const #cir.int<0> : !s32i loc(#loc216)
              %58 = cir.cmp(eq, %56, %57) : !s32i, !cir.bool loc(#loc376)
              %59 = cir.ternary(%58, true {
                %60 = cir.const #true loc(#loc214)
                cir.yield %60 : !cir.bool loc(#loc214)
              }, false {
                %60 = cir.const #false loc(#loc214)
                cir.yield %60 : !cir.bool loc(#loc214)
              }) : (!cir.bool) -> !cir.bool loc(#loc214)
              cir.yield %59 : !cir.bool loc(#loc214)
            }) : (!cir.bool) -> !cir.bool loc(#loc214)
            cir.if %55 {
              cir.break loc(#loc218)
            } loc(#loc377)
          } loc(#loc374)
          %44 = cir.const #cir.int<0> : !s8i loc(#loc219)
          %45 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
          %46 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc221)
          %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !s32i), !cir.ptr<!s8i> loc(#loc221)
          cir.store %44, %47 : !s8i, !cir.ptr<!s8i> loc(#loc378)
          %48 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc222)
          %49 = cir.call @atoi(%48) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc223)
          %50 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc224)
          cir.store %49, %50 : !s32i, !cir.ptr<!s32i> loc(#loc379)
          cir.yield loc(#loc161)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc226)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc226)
          cir.condition(%8) loc(#loc226)
        } loc(#loc356)
      } loc(#loc356)
      cir.scope {
        %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc229)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc230)
        %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc230)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc381)
        cir.if %10 {
          %11 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc232)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc233)
        } loc(#loc382)
      } loc(#loc380)
    } loc(#loc351)
    cir.return loc(#loc146)
  } loc(#loc349)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc235)
  cir.func internal private @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc384)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc240)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L13goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc242)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc245)
      %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc246)
      %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc246)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc246)
      %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc246)
      %7 = cir.cmp(gt, %2, %6) : !s32i, !cir.bool loc(#loc387)
      %8 = cir.ternary(%7, true {
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
        %10 = cir.abs %9 poison : !s32i loc(#loc249)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc249)
        %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc250)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc251)
        %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc251)
        %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc250)
        %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc250)
        %17 = cir.cmp(lt, %11, %16) : !s64i, !cir.bool loc(#loc388)
        %18 = cir.ternary(%17, true {
          %19 = cir.const #true loc(#loc247)
          cir.yield %19 : !cir.bool loc(#loc247)
        }, false {
          %19 = cir.const #false loc(#loc247)
          cir.yield %19 : !cir.bool loc(#loc247)
        }) : (!cir.bool) -> !cir.bool loc(#loc247)
        cir.yield %18 : !cir.bool loc(#loc247)
      }, false {
        %9 = cir.const #false loc(#loc247)
        cir.yield %9 : !cir.bool loc(#loc247)
      }) : (!cir.bool) -> !cir.bool loc(#loc247)
      cir.if %8 {
        %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc390)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc258)
        %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc257)
        %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc258)
        cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc390)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc259)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc260)
      } else {
        %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc235)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc235)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc261)
      } loc(#loc389)
    } loc(#loc386)
    cir.return loc(#loc237)
  } loc(#loc383)
  cir.func @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L7goodG2BEv() : () -> () loc(#loc264)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_43L7goodB2GEv() : () -> () loc(#loc265)
    cir.return loc(#loc263)
  } loc(#loc391)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc392)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc393)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc394)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc272)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc273)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc275)
  cir.func @main(%arg0: !s32i loc(fused[#loc278, #loc279]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc280, #loc281])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc396)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc397)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc277)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc282)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc283)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc284)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc284)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc285)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc272)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc272)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc286)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_434goodEv() : () -> () loc(#loc287)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc273)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc273)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc288)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc274)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc274)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc289)
    cir.call @_ZN53CWE190_Integer_Overflow__int_connect_socket_square_433badEv() : () -> () loc(#loc290)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc275)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc275)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc291)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc292)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc398)
    cir.return %15 : !s32i loc(#loc398)
  } loc(#loc395)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":77:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":49:1)
#loc17 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":107:1)
#loc20 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":50:1)
#loc21 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":51:5)
#loc22 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":106:5)
#loc23 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":56:9)
#loc24 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":56:13)
#loc25 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":57:9)
#loc26 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":57:28)
#loc27 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":58:9)
#loc28 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":58:32)
#loc29 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":59:9)
#loc30 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":59:41)
#loc31 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":60:9)
#loc32 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":95:17)
#loc33 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:36)
#loc34 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:45)
#loc35 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:58)
#loc36 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:29)
#loc37 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:13)
#loc38 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":70:69)
#loc39 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":71:13)
#loc40 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":74:13)
#loc41 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":71:17)
#loc42 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":71:34)
#loc43 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":72:13)
#loc44 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":73:17)
#loc45 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:20)
#loc46 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:21)
#loc47 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:30)
#loc48 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:33)
#loc49 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:47)
#loc50 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:13)
#loc51 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":75:48)
#loc52 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":76:34)
#loc53 = loc("/usr/include/netinet/in.h":249:5)
#loc54 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":76:13)
#loc55 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":77:39)
#loc56 = loc("/usr/include/netinet/in.h":251:20)
#loc57 = loc("/usr/include/netinet/in.h":33:15)
#loc58 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":77:13)
#loc59 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":77:59)
#loc60 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":78:38)
#loc61 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":78:32)
#loc62 = loc("/usr/include/netinet/in.h":250:15)
#loc63 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":78:13)
#loc64 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":78:46)
#loc65 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:13)
#loc66 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":82:13)
#loc67 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:25)
#loc68 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:58)
#loc69 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:59)
#loc70 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:68)
#loc71 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:82)
#loc72 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:17)
#loc73 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":79:88)
#loc74 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":80:13)
#loc75 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":81:17)
#loc76 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:31)
#loc77 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:46)
#loc78 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:59)
#loc79 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:77)
#loc80 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:80)
#loc81 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:26)
#loc82 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:13)
#loc83 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":85:81)
#loc84 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:13)
#loc85 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":89:13)
#loc86 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:17)
#loc87 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:31)
#loc88 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:44)
#loc89 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:47)
#loc90 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":86:61)
#loc91 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":87:13)
#loc92 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":88:17)
#loc93 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":91:39)
#loc94 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":91:25)
#loc95 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":91:13)
#loc96 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":93:25)
#loc97 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":93:20)
#loc98 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":93:13)
#loc99 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":93:36)
#loc100 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":95:16)
#loc101 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":96:9)
#loc102 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":99:9)
#loc103 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":96:13)
#loc104 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":96:30)
#loc105 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":97:9)
#loc106 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":98:26)
#loc107 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":98:13)
#loc108 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc109 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc110 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":109:1)
#loc111 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":120:1)
#loc112 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":111:5)
#loc113 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":111:9)
#loc114 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":113:12)
#loc115 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":113:5)
#loc116 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":114:5)
#loc117 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":115:5)
#loc118 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":119:5)
#loc119 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":117:9)
#loc120 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":117:29)
#loc121 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":117:22)
#loc122 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":118:22)
#loc123 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":118:9)
#loc124 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":127:1)
#loc125 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":131:1)
#loc128 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":128:1)
#loc129 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":130:12)
#loc130 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":130:5)
#loc131 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":133:1)
#loc132 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":144:1)
#loc133 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":135:5)
#loc134 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":135:9)
#loc135 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":137:12)
#loc136 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":137:5)
#loc137 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":138:5)
#loc138 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":139:5)
#loc139 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":143:5)
#loc140 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":141:9)
#loc141 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":141:29)
#loc142 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":141:22)
#loc143 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":142:22)
#loc144 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":142:9)
#loc145 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":147:1)
#loc146 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":205:1)
#loc149 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":148:1)
#loc150 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":149:5)
#loc151 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":204:5)
#loc152 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":154:9)
#loc153 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":154:13)
#loc154 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":155:9)
#loc155 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":155:28)
#loc156 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":156:9)
#loc157 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":156:32)
#loc158 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":157:9)
#loc159 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":157:41)
#loc160 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":158:9)
#loc161 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":193:17)
#loc162 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:36)
#loc163 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:45)
#loc164 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:58)
#loc165 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:29)
#loc166 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:13)
#loc167 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":168:69)
#loc168 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":169:13)
#loc169 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":172:13)
#loc170 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":169:17)
#loc171 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":169:34)
#loc172 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":170:13)
#loc173 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":171:17)
#loc174 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:20)
#loc175 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:21)
#loc176 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:30)
#loc177 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:33)
#loc178 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:47)
#loc179 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:13)
#loc180 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":173:48)
#loc181 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":174:34)
#loc182 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":174:13)
#loc183 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":175:49)
#loc184 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":175:39)
#loc185 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":175:13)
#loc186 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":175:59)
#loc187 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":176:38)
#loc188 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":176:32)
#loc189 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":176:13)
#loc190 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":176:46)
#loc191 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:13)
#loc192 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":180:13)
#loc193 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:25)
#loc194 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:58)
#loc195 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:59)
#loc196 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:68)
#loc197 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:82)
#loc198 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:17)
#loc199 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":177:88)
#loc200 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":178:13)
#loc201 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":179:17)
#loc202 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:31)
#loc203 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:46)
#loc204 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:59)
#loc205 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:77)
#loc206 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:80)
#loc207 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:26)
#loc208 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:13)
#loc209 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":183:81)
#loc210 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:13)
#loc211 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":187:13)
#loc212 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:17)
#loc213 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:31)
#loc214 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:44)
#loc215 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:47)
#loc216 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":184:61)
#loc217 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":185:13)
#loc218 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":186:17)
#loc219 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":189:39)
#loc220 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":189:25)
#loc221 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":189:13)
#loc222 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":191:25)
#loc223 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":191:20)
#loc224 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":191:13)
#loc225 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":191:36)
#loc226 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":193:16)
#loc227 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":194:9)
#loc228 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":197:9)
#loc229 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":194:13)
#loc230 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":194:30)
#loc231 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":195:9)
#loc232 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":196:26)
#loc233 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":196:13)
#loc234 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc235 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":221:19)
#loc236 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":207:1)
#loc237 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":223:1)
#loc238 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":209:5)
#loc239 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":209:9)
#loc240 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":211:12)
#loc241 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":211:5)
#loc242 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":212:5)
#loc243 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:5)
#loc244 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":222:5)
#loc245 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:9)
#loc246 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:16)
#loc247 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:24)
#loc248 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:31)
#loc249 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:27)
#loc250 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:45)
#loc251 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:58)
#loc252 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":214:65)
#loc253 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":215:5)
#loc254 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":218:5)
#loc255 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":220:5)
#loc256 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":216:9)
#loc257 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":216:29)
#loc258 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":216:22)
#loc259 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":217:22)
#loc260 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":217:9)
#loc261 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":221:9)
#loc262 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":225:1)
#loc263 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":229:1)
#loc264 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":227:5)
#loc265 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":228:5)
#loc266 = loc("/usr/include/stdlib.h":575:1)
#loc267 = loc("/usr/include/stdlib.h":575:41)
#loc268 = loc("/usr/include/time.h":76:1)
#loc269 = loc("/usr/include/time.h":76:38)
#loc270 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc271 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc272 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":249:15)
#loc273 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":251:15)
#loc274 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":254:15)
#loc275 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":256:15)
#loc276 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":244:1)
#loc277 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":259:1)
#loc282 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":245:1)
#loc283 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":247:27)
#loc284 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":247:22)
#loc285 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":247:5)
#loc286 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":249:5)
#loc287 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":250:5)
#loc288 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":251:5)
#loc289 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":254:5)
#loc290 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":255:5)
#loc291 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":256:5)
#loc292 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":258:12)
#loc293 = loc("CWE190_Integer_Overflow__int_connect_socket_square_43.cpp":258:5)
#loc294 = loc(fused[#loc1, #loc2])
#loc295 = loc(fused[#loc3, #loc4])
#loc296 = loc(fused[#loc6, #loc7])
#loc297 = loc(fused[#loc8, #loc9])
#loc298 = loc(fused[#loc10, #loc11])
#loc299 = loc(fused[#loc12, #loc13])
#loc300 = loc(fused[#loc14, #loc15])
#loc301 = loc(fused[#loc16, #loc17])
#loc303 = loc(fused[#loc21, #loc22])
#loc304 = loc(fused[#loc23, #loc24])
#loc305 = loc(fused[#loc25, #loc26])
#loc306 = loc(fused[#loc27, #loc28])
#loc307 = loc(fused[#loc29, #loc30])
#loc308 = loc(fused[#loc31, #loc32])
#loc309 = loc(fused[#loc37, #loc38])
#loc310 = loc(fused[#loc39, #loc40])
#loc311 = loc(fused[#loc41, #loc42])
#loc312 = loc(fused[#loc43, #loc40])
#loc313 = loc(fused[#loc45, #loc46])
#loc314 = loc(fused[#loc48, #loc49])
#loc315 = loc(fused[#loc50, #loc51])
#loc316 = loc(fused[#loc54, #loc52])
#loc317 = loc(fused[#loc58, #loc59])
#loc318 = loc(fused[#loc63, #loc64])
#loc319 = loc(fused[#loc65, #loc66])
#loc320 = loc(fused[#loc68, #loc69])
#loc321 = loc(fused[#loc70, #loc71])
#loc322 = loc(fused[#loc72, #loc73])
#loc323 = loc(fused[#loc74, #loc66])
#loc324 = loc(fused[#loc78, #loc79])
#loc325 = loc(fused[#loc82, #loc83])
#loc326 = loc(fused[#loc84, #loc85])
#loc327 = loc(fused[#loc86, #loc87])
#loc328 = loc(fused[#loc89, #loc90])
#loc329 = loc(fused[#loc91, #loc85])
#loc330 = loc(fused[#loc95, #loc93])
#loc331 = loc(fused[#loc98, #loc99])
#loc332 = loc(fused[#loc101, #loc102])
#loc333 = loc(fused[#loc103, #loc104])
#loc334 = loc(fused[#loc105, #loc102])
#loc335 = loc(fused[#loc108, #loc109])
#loc336 = loc(fused[#loc110, #loc111])
#loc337 = loc(fused[#loc112, #loc113])
#loc338 = loc(fused[#loc115, #loc114])
#loc339 = loc(fused[#loc117, #loc118])
#loc340 = loc(fused[#loc119, #loc120])
#loc341 = loc(fused[#loc124, #loc125])
#loc343 = loc(fused[#loc130, #loc129])
#loc344 = loc(fused[#loc131, #loc132])
#loc345 = loc(fused[#loc133, #loc134])
#loc346 = loc(fused[#loc136, #loc135])
#loc347 = loc(fused[#loc138, #loc139])
#loc348 = loc(fused[#loc140, #loc141])
#loc349 = loc(fused[#loc145, #loc146])
#loc351 = loc(fused[#loc150, #loc151])
#loc352 = loc(fused[#loc152, #loc153])
#loc353 = loc(fused[#loc154, #loc155])
#loc354 = loc(fused[#loc156, #loc157])
#loc355 = loc(fused[#loc158, #loc159])
#loc356 = loc(fused[#loc160, #loc161])
#loc357 = loc(fused[#loc166, #loc167])
#loc358 = loc(fused[#loc168, #loc169])
#loc359 = loc(fused[#loc170, #loc171])
#loc360 = loc(fused[#loc172, #loc169])
#loc361 = loc(fused[#loc174, #loc175])
#loc362 = loc(fused[#loc177, #loc178])
#loc363 = loc(fused[#loc179, #loc180])
#loc364 = loc(fused[#loc182, #loc181])
#loc365 = loc(fused[#loc185, #loc186])
#loc366 = loc(fused[#loc189, #loc190])
#loc367 = loc(fused[#loc191, #loc192])
#loc368 = loc(fused[#loc194, #loc195])
#loc369 = loc(fused[#loc196, #loc197])
#loc370 = loc(fused[#loc198, #loc199])
#loc371 = loc(fused[#loc200, #loc192])
#loc372 = loc(fused[#loc204, #loc205])
#loc373 = loc(fused[#loc208, #loc209])
#loc374 = loc(fused[#loc210, #loc211])
#loc375 = loc(fused[#loc212, #loc213])
#loc376 = loc(fused[#loc215, #loc216])
#loc377 = loc(fused[#loc217, #loc211])
#loc378 = loc(fused[#loc221, #loc219])
#loc379 = loc(fused[#loc224, #loc225])
#loc380 = loc(fused[#loc227, #loc228])
#loc381 = loc(fused[#loc229, #loc230])
#loc382 = loc(fused[#loc231, #loc228])
#loc383 = loc(fused[#loc236, #loc237])
#loc384 = loc(fused[#loc238, #loc239])
#loc385 = loc(fused[#loc241, #loc240])
#loc386 = loc(fused[#loc243, #loc244])
#loc387 = loc(fused[#loc245, #loc246])
#loc388 = loc(fused[#loc249, #loc252])
#loc389 = loc(fused[#loc253, #loc254, #loc255, #loc244])
#loc390 = loc(fused[#loc256, #loc257])
#loc391 = loc(fused[#loc262, #loc263])
#loc392 = loc(fused[#loc266, #loc267])
#loc393 = loc(fused[#loc268, #loc269])
#loc394 = loc(fused[#loc270, #loc271])
#loc395 = loc(fused[#loc276, #loc277])
#loc398 = loc(fused[#loc293, #loc292])
