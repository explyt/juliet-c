!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":22:21)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":22:25)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":45:12)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":83:25)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":83:29)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:23)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":105:12)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":54:25)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":54:29)
#true = #cir.bool<true> : !cir.bool
#loc117 = loc(fused[#loc10, #loc11])
#loc131 = loc(fused[#loc48, #loc49])
#loc143 = loc(fused[#loc83, #loc84])
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc113)
  cir.func private @printIntLine(!s32i) loc(#loc114)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc10, #loc11])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc118)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc118)
    cir.store %2, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc118)
    cir.br ^bb2 loc(#loc120)
  ^bb2:  // pred: ^bb1
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc121)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc25)
    %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc25)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc26)
    cir.br ^bb5 loc(#loc22)
  ^bb4:  // pred: ^bb2
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc27)
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc16)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc9)
  } loc(#loc116)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc35)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc35)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc35)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc35)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc35)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc35)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc35)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc35)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc35)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc35)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc35)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc35)
    cir.br ^bb3(%18 : !u32i) loc(#loc35)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc35)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc35)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc35)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc35)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc35)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc35)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc35)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc35)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc35)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc35)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc35)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc35)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc35)
    cir.br ^bb3(%34 : !u32i) loc(#loc35)
  ^bb3(%35: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_41.c":45:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc35)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc35)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call @badSink(%37) : (!s32i) -> () loc(#loc38)
    cir.return loc(#loc29)
  } loc(#loc123)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc45)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc48, #loc49])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc132)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc131)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.br ^bb1 loc(#loc133)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc132)
    cir.store %2, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc132)
    cir.br ^bb2 loc(#loc134)
  ^bb2:  // pred: ^bb1
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc135)
    cir.brcond %5 ^bb3, ^bb8 loc(#loc59)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc61)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc136)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc59)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #true loc(#loc59)
    cir.br ^bb6(%9 : !cir.bool) loc(#loc59)
  ^bb5:  // pred: ^bb3
    %10 = cir.const #false loc(#loc59)
    cir.br ^bb6(%10 : !cir.bool) loc(#loc59)
  ^bb6(%11: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9(%11 : !cir.bool) loc(#loc59)
  ^bb8:  // pred: ^bb2
    %12 = cir.const #false loc(#loc59)
    cir.br ^bb9(%12 : !cir.bool) loc(#loc59)
  ^bb9(%13: !cir.bool loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:23)):  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc59)
  ^bb10:  // pred: ^bb9
    cir.brcond %13 ^bb11, ^bb12 loc(#loc137)
  ^bb11:  // pred: ^bb10
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %15 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc67)
    %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc68)
    cir.br ^bb13 loc(#loc64)
  ^bb12:  // pred: ^bb10
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc45)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb13 loc(#loc56)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc56)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc54)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc47)
  } loc(#loc130)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc75)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc77)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc77)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc77)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc77)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc77)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc77)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc77)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc77)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc77)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc77)
    cir.br ^bb3(%18 : !u32i) loc(#loc77)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc77)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc77)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc77)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc77)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc77)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc77)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc77)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc77)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc77)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc77)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc77)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc77)
    cir.br ^bb3(%34 : !u32i) loc(#loc77)
  ^bb3(%35: !u32i loc("CWE126_Buffer_Overread__CWE129_rand_41.c":105:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc77)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc77)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.call @goodB2GSink(%37) : (!s32i) -> () loc(#loc80)
    cir.return loc(#loc71)
  } loc(#loc138)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc83, #loc84])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc144)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc143)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc144)
    cir.store %2, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc144)
    cir.br ^bb2 loc(#loc146)
  ^bb2:  // pred: ^bb1
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc148)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc98)
    %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc98)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc99)
    cir.br ^bb5 loc(#loc95)
  ^bb4:  // pred: ^bb2
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc100)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb5 loc(#loc91)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc89)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc82)
  } loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc107)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc109)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc112)
    cir.return loc(#loc103)
  } loc(#loc149)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":34:23)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":22:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":37:1)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":25:9)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":25:30)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":23:1)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":24:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":36:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":28:9)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":35:9)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":28:13)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":28:21)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":29:9)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":31:9)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":33:9)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":30:33)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":30:26)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":30:13)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":34:13)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":39:1)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":47:1)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":41:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":41:9)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":43:13)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":43:12)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":43:5)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":45:5)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":46:13)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":46:5)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":109:1)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":113:1)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":111:5)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":111:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":112:5)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":112:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":94:23)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":83:1)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":97:1)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":86:9)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":86:30)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":84:1)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":85:5)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":96:5)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:9)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":95:9)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:13)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:21)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:26)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:34)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":88:36)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":89:9)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":91:9)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":93:9)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":90:33)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":90:26)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":90:13)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":94:13)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":99:1)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":107:1)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":101:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":101:9)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":103:13)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":103:12)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":103:5)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":105:5)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":106:17)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":106:5)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":54:1)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":69:1)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":57:9)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":57:30)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":55:1)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":56:5)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":68:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":60:9)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":67:9)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":60:13)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":60:21)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":61:9)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":63:9)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":65:9)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":62:33)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":62:26)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":62:13)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":66:23)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":66:13)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":71:1)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":80:1)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":73:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":73:9)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":75:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":75:12)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":75:5)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":78:12)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":78:5)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":79:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_41.c":79:5)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc5, #loc6])
#loc116 = loc(fused[#loc8, #loc9])
#loc118 = loc(fused[#loc12, #loc13])
#loc119 = loc(fused[#loc15, #loc16])
#loc120 = loc(fused[#loc17, #loc18])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc123 = loc(fused[#loc28, #loc29])
#loc124 = loc(fused[#loc30, #loc31])
#loc125 = loc(fused[#loc34, #loc32])
#loc126 = loc(fused[#loc36, #loc35])
#loc127 = loc(fused[#loc39, #loc40])
#loc128 = loc(fused[#loc41, #loc42])
#loc129 = loc(fused[#loc43, #loc44])
#loc130 = loc(fused[#loc46, #loc47])
#loc132 = loc(fused[#loc50, #loc51])
#loc133 = loc(fused[#loc53, #loc54])
#loc134 = loc(fused[#loc55, #loc56])
#loc135 = loc(fused[#loc57, #loc58])
#loc136 = loc(fused[#loc60, #loc62])
#loc137 = loc(fused[#loc63, #loc64, #loc65, #loc56])
#loc138 = loc(fused[#loc70, #loc71])
#loc139 = loc(fused[#loc72, #loc73])
#loc140 = loc(fused[#loc76, #loc74])
#loc141 = loc(fused[#loc78, #loc77])
#loc142 = loc(fused[#loc81, #loc82])
#loc144 = loc(fused[#loc85, #loc86])
#loc145 = loc(fused[#loc88, #loc89])
#loc146 = loc(fused[#loc90, #loc91])
#loc147 = loc(fused[#loc92, #loc93])
#loc148 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc149 = loc(fused[#loc102, #loc103])
#loc150 = loc(fused[#loc104, #loc105])
#loc151 = loc(fused[#loc108, #loc106])
#loc152 = loc(fused[#loc110, #loc109])
