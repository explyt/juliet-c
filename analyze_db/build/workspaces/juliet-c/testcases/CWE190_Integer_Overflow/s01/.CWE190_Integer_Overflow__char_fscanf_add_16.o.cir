!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc99)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc101)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc103)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc104)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc14)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc106)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc18)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc20)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc100)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc20)
    cir.br ^bb6 loc(#loc22)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc17)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc108)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %12 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %13 ^bb10, ^bb15 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc109)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc110)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc29)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc29)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %17 = cir.binop(add, %15, %16) nsw : !s32i loc(#loc29)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc29)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc30)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc31)
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc32)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc24)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc24)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc9)
  } loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc116)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc117)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc48)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc48)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc119)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc52)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc54)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc100)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc55)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc56)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc56)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc54)
    cir.br ^bb6 loc(#loc57)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc51)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc51)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc121)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc121)
  ^bb9:  // 2 preds: ^bb8, ^bb17
    %12 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc60)
    cir.brcond %13 ^bb10, ^bb18 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // pred: ^bb11
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc64)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc64)
    %16 = cir.const #cir.int<127> : !s32i loc(#loc65)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc124)
    cir.brcond %17 ^bb13, ^bb14 loc(#loc125)
  ^bb13:  // pred: ^bb12
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc69)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc69)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %21 = cir.binop(add, %19, %20) nsw : !s32i loc(#loc69)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc69)
    cir.store %22, %0 : !s8i, !cir.ptr<!s8i> loc(#loc116)
    %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc70)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc71)
    cir.br ^bb15 loc(#loc67)
  ^bb14:  // pred: ^bb12
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb15 loc(#loc63)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc63)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc73)
  ^bb17:  // no predecessors
    cir.br ^bb9 loc(#loc59)
  ^bb18:  // 2 preds: ^bb9, ^bb16
    cir.br ^bb19 loc(#loc59)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc43)
  } loc(#loc115)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc127)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc128)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc80)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc80)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    cir.br ^bb1 loc(#loc130)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc130)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %4 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %5 ^bb3, ^bb6 loc(#loc84)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %6 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc86)
    cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    cir.br ^bb6 loc(#loc88)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc83)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc83)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc133)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc133)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %8 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %9 ^bb10, ^bb15 loc(#loc91)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc135)
  ^bb12:  // pred: ^bb11
    %10 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc95)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc95)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc95)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc95)
    cir.store %14, %0 : !s8i, !cir.ptr<!s8i> loc(#loc127)
    %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    cir.call @printHexCharLine(%15) : (!s8i) -> () loc(#loc97)
    cir.br ^bb13 loc(#loc94)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc98)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc90)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc90)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc75)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":29:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":41:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":36:13)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":36:34)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":24:5)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":24:10)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":25:12)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":25:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":26:11)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":27:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":29:9)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":29:17)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":30:9)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":32:5)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":40:5)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":32:11)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":34:9)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":38:9)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":36:27)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":37:30)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":37:13)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":39:9)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":96:1)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":100:1)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":98:5)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":98:13)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":99:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":99:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":68:23)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":48:1)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":72:1)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":63:13)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":63:34)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":50:5)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":50:10)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":51:12)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":51:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":52:5)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":57:5)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":52:11)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":55:9)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":55:17)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":55:24)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":56:9)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":58:5)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":71:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":58:11)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":59:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":61:9)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":69:9)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":61:13)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":61:20)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":62:9)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":65:9)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":67:9)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":63:27)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":64:30)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":64:13)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":68:13)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":70:9)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":75:1)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":94:1)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":89:13)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":89:34)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":77:5)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":77:10)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":78:12)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":78:5)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":79:5)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":84:5)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":79:11)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":80:5)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":82:16)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":82:9)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":83:9)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":85:5)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":93:5)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":85:11)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":86:5)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":87:9)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":91:9)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":89:27)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":90:30)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":90:13)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_add_16.c":92:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc6, #loc7])
#loc102 = loc(fused[#loc8, #loc9])
#loc103 = loc(fused[#loc10, #loc11])
#loc104 = loc(fused[#loc12, #loc13])
#loc105 = loc(fused[#loc15, #loc14])
#loc106 = loc(fused[#loc16, #loc17])
#loc107 = loc(fused[#loc19, #loc17])
#loc108 = loc(fused[#loc23, #loc24])
#loc109 = loc(fused[#loc26, #loc24])
#loc110 = loc(fused[#loc27, #loc28])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc37, #loc38])
#loc114 = loc(fused[#loc39, #loc40])
#loc115 = loc(fused[#loc42, #loc43])
#loc116 = loc(fused[#loc44, #loc45])
#loc117 = loc(fused[#loc46, #loc47])
#loc118 = loc(fused[#loc49, #loc48])
#loc119 = loc(fused[#loc50, #loc51])
#loc120 = loc(fused[#loc53, #loc51])
#loc121 = loc(fused[#loc58, #loc59])
#loc122 = loc(fused[#loc61, #loc59])
#loc123 = loc(fused[#loc62, #loc63])
#loc124 = loc(fused[#loc64, #loc65])
#loc125 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc126 = loc(fused[#loc74, #loc75])
#loc127 = loc(fused[#loc76, #loc77])
#loc128 = loc(fused[#loc78, #loc79])
#loc129 = loc(fused[#loc81, #loc80])
#loc130 = loc(fused[#loc82, #loc83])
#loc131 = loc(fused[#loc85, #loc83])
#loc132 = loc(fused[#loc87, #loc86])
#loc133 = loc(fused[#loc89, #loc90])
#loc134 = loc(fused[#loc92, #loc90])
#loc135 = loc(fused[#loc93, #loc94])
