!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc3 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":22:23)
#loc4 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":22:28)
#loc38 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":68:27)
#loc39 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":68:32)
#loc75 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":47:27)
#loc76 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":47:32)
#loc102 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc38, #loc39])
#loc131 = loc(fused[#loc75, #loc76])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__char_min_predec_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func internal private  @badSource(%arg0: !s8i loc(fused[#loc3, #loc4])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc102)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc2)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc5)
    %2 = cir.const #cir.int<127> : !s32i loc(#loc6)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc6)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc6)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc6)
    cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc103)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc104)
    cir.return %8 : !s8i loc(#loc104)
  } loc(#loc101)
  cir.func private  @printHexCharLine(!s8i) loc(#loc105)
  cir.func no_proto  @CWE191_Integer_Underflow__char_min_predec_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc107)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc16)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc16)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc18)
    %4 = cir.call @badSource(%3) : (!s8i) -> !s8i loc(#loc19)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc109)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc111)
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc26)
      %7 = cir.unary(dec, %6) : !s8i, !s8i loc(#loc26)
      cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
      %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc25)
      cir.store %8, %5 : !s8i, !cir.ptr<!s8i> loc(#loc111)
      %9 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc28)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc29)
    } loc(#loc110)
    cir.return loc(#loc13)
  } loc(#loc106)
  cir.func no_proto  @CWE191_Integer_Underflow__char_min_predec_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc113)
  cir.func internal private  @goodB2GSource(%arg0: !s8i loc(fused[#loc38, #loc39])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc117)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc40)
    %2 = cir.const #cir.int<127> : !s32i loc(#loc41)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc41)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc41)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc41)
    cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc118)
    %7 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc43)
    cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc119)
    %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc119)
    cir.return %8 : !s8i loc(#loc119)
  } loc(#loc116)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc122)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc52)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc52)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc123)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc54)
    %4 = cir.call @goodB2GSource(%3) : (!s8i) -> !s8i loc(#loc55)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc60)
      %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc60)
      %7 = cir.const #cir.int<127> : !s32i loc(#loc61)
      %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc61)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc61)
      %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc61)
      %11 = cir.cmp(gt, %6, %10) : !s32i, !s32i loc(#loc126)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc62)
      cir.if %12 {
        %13 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc128)
        %14 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc68)
        %15 = cir.unary(dec, %14) : !s8i, !s8i loc(#loc68)
        cir.store %15, %0 : !s8i, !cir.ptr<!s8i> loc(#loc129)
        %16 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc67)
        cir.store %16, %13 : !s8i, !cir.ptr<!s8i> loc(#loc128)
        %17 = cir.load %13 : !cir.ptr<!s8i>, !s8i loc(#loc70)
        cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc71)
      } else {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc49)
  } loc(#loc121)
  cir.func internal private  @goodG2BSource(%arg0: !s8i loc(fused[#loc75, #loc76])) -> !s8i extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc131)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["__retval"] {alignment = 1 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc77)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc78)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc79)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc79)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    cir.store %5, %1 : !s8i, !cir.ptr<!s8i> loc(#loc133)
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc133)
    cir.return %6 : !s8i loc(#loc133)
  } loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc135)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc87)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc87)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc136)
    %3 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc89)
    %4 = cir.call @goodG2BSource(%3) : (!s8i) -> !s8i loc(#loc90)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc137)
    cir.scope {
      %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc139)
      %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc97)
      %7 = cir.unary(dec, %6) : !s8i, !s8i loc(#loc97)
      cir.store %7, %0 : !s8i, !cir.ptr<!s8i> loc(#loc140)
      %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc96)
      cir.store %8, %5 : !s8i, !cir.ptr<!s8i> loc(#loc139)
      %9 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc99)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc100)
    } loc(#loc138)
    cir.return loc(#loc84)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__char_min_predec_42.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":22:1)
#loc2 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":27:1)
#loc5 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":23:1)
#loc6 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":25:12)
#loc7 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":25:5)
#loc8 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":26:12)
#loc9 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc12 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":29:1)
#loc13 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":40:1)
#loc14 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":31:10)
#loc16 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":32:12)
#loc17 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":32:5)
#loc18 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":33:22)
#loc19 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":33:12)
#loc20 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":33:5)
#loc21 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":33:26)
#loc22 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":34:5)
#loc23 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":39:5)
#loc24 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":37:9)
#loc25 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":37:23)
#loc26 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":36:9)
#loc27 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":36:11)
#loc28 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":38:26)
#loc29 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":38:9)
#loc30 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":93:1)
#loc31 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":97:1)
#loc32 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":95:5)
#loc33 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":95:13)
#loc34 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":96:5)
#loc35 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":96:13)
#loc36 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":68:1)
#loc37 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":73:1)
#loc40 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":69:1)
#loc41 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":71:12)
#loc42 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":71:5)
#loc43 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":72:12)
#loc44 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":72:5)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc47 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":89:19)
#loc48 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":75:1)
#loc49 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":91:1)
#loc50 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":77:5)
#loc51 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":77:10)
#loc52 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":78:12)
#loc53 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":78:5)
#loc54 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":79:26)
#loc55 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":79:12)
#loc56 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":79:5)
#loc57 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":79:30)
#loc58 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":81:5)
#loc59 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":90:5)
#loc60 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":81:9)
#loc61 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":81:16)
#loc62 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":81:14)
#loc63 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":82:5)
#loc64 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":86:5)
#loc65 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":88:5)
#loc66 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":84:9)
#loc67 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":84:23)
#loc68 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":83:9)
#loc69 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":83:11)
#loc70 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":85:26)
#loc71 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":85:9)
#loc72 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":89:9)
#loc73 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":47:1)
#loc74 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":52:1)
#loc77 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":48:1)
#loc78 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":50:13)
#loc79 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":50:12)
#loc80 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":50:5)
#loc81 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":51:12)
#loc82 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":51:5)
#loc83 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":54:1)
#loc84 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":65:1)
#loc85 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":56:5)
#loc86 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":56:10)
#loc87 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":57:12)
#loc88 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":57:5)
#loc89 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":58:26)
#loc90 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":58:12)
#loc91 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":58:5)
#loc92 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":58:30)
#loc93 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":59:5)
#loc94 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":64:5)
#loc95 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":62:9)
#loc96 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":62:23)
#loc97 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":61:9)
#loc98 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":61:11)
#loc99 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":63:26)
#loc100 = loc("CWE191_Integer_Underflow__char_min_predec_42.c":63:9)
#loc101 = loc(fused[#loc1, #loc2])
#loc103 = loc(fused[#loc7, #loc6])
#loc104 = loc(fused[#loc9, #loc8])
#loc105 = loc(fused[#loc10, #loc11])
#loc106 = loc(fused[#loc12, #loc13])
#loc107 = loc(fused[#loc14, #loc15])
#loc108 = loc(fused[#loc17, #loc16])
#loc109 = loc(fused[#loc20, #loc21])
#loc110 = loc(fused[#loc22, #loc23])
#loc111 = loc(fused[#loc24, #loc25])
#loc112 = loc(fused[#loc26, #loc27])
#loc113 = loc(fused[#loc30, #loc31])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc118 = loc(fused[#loc42, #loc41])
#loc119 = loc(fused[#loc44, #loc43])
#loc120 = loc(fused[#loc45, #loc46])
#loc121 = loc(fused[#loc48, #loc49])
#loc122 = loc(fused[#loc50, #loc51])
#loc123 = loc(fused[#loc53, #loc52])
#loc124 = loc(fused[#loc56, #loc57])
#loc125 = loc(fused[#loc58, #loc59])
#loc126 = loc(fused[#loc60, #loc61])
#loc127 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc128 = loc(fused[#loc66, #loc67])
#loc129 = loc(fused[#loc68, #loc69])
#loc130 = loc(fused[#loc73, #loc74])
#loc132 = loc(fused[#loc80, #loc78])
#loc133 = loc(fused[#loc82, #loc81])
#loc134 = loc(fused[#loc83, #loc84])
#loc135 = loc(fused[#loc85, #loc86])
#loc136 = loc(fused[#loc88, #loc87])
#loc137 = loc(fused[#loc91, #loc92])
#loc138 = loc(fused[#loc93, #loc94])
#loc139 = loc(fused[#loc95, #loc96])
#loc140 = loc(fused[#loc97, #loc98])
