!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printLongLongLine(!s64i) loc(#loc85)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc88)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc89)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc91)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc92)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc91)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc92)
      cir.scope {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc94)
        %13 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc23)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc22)
        %16 = cir.binop(sub, %13, %15) nsw : !s64i loc(#loc23)
        cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc94)
        %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc24)
        cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc25)
      } loc(#loc93)
    } loc(#loc90)
    cir.return loc(#loc6)
  } loc(#loc86)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc95)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc36)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc39)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc39)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    cir.scope {
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc103)
      %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc104)
      %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc103)
      %8 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc46)
      cir.store %8, %6 : !s64i, !cir.ptr<!s64i> loc(#loc104)
      cir.scope {
        %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc106)
        %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc50)
        %13 = cir.binop(sub, %10, %12) nsw : !s64i loc(#loc51)
        cir.store %13, %9 : !s64i, !cir.ptr<!s64i> loc(#loc106)
        %14 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc53)
      } loc(#loc105)
    } loc(#loc102)
    cir.return loc(#loc33)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc61)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc110)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc63)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc63)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc63)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc63)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc63)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc63)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc63)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc63)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc63)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc63)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc63)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc63)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc63)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc63)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc63)
      cir.yield %29 : !u64i loc(#loc63)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc63)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc63)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc63)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc63)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc63)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc63)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc63)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc63)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc63)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc63)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc63)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc63)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc63)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc63)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc63)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc63)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc63)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc63)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc63)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc63)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc63)
      cir.yield %33 : !u64i loc(#loc63)
    }) : (!cir.bool) -> !u64i loc(#loc63)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc63)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc113)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc68)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc113)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc70)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc114)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc73)
        %13 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc74)
        %14 = cir.unary(minus, %13) nsw : !s64i, !s64i loc(#loc74)
        %15 = cir.const #cir.int<1> : !s64i loc(#loc74)
        %16 = cir.binop(sub, %14, %15) nsw : !s64i loc(#loc74)
        %17 = cir.cmp(gt, %12, %16) : !s64i, !cir.bool loc(#loc116)
        cir.if %17 {
          %18 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc118)
          %19 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc80)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc79)
          %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc79)
          %22 = cir.binop(sub, %19, %21) nsw : !s64i loc(#loc80)
          cir.store %22, %18 : !s64i, !cir.ptr<!s64i> loc(#loc118)
          %23 = cir.load %18 : !cir.ptr<!s64i>, !s64i loc(#loc81)
          cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc82)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc56)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc56)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc83)
        } loc(#loc117)
      } loc(#loc115)
    } loc(#loc112)
    cir.return loc(#loc58)
  } loc(#loc108)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":37:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":24:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":27:21)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":36:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":29:9)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":29:28)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":30:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":30:24)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":35:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":33:13)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":33:37)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":33:30)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":34:31)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":34:13)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":84:1)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":88:1)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":86:5)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":86:13)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":87:5)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":87:13)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":44:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":59:1)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":46:5)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":46:13)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":47:12)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":47:5)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":49:13)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":49:12)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":49:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":50:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":58:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":51:9)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":51:28)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":52:9)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":52:24)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":53:9)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":57:9)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":55:13)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":55:37)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":55:30)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":56:31)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":56:13)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":79:23)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":62:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":82:1)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":64:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":64:13)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":65:12)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":65:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":67:21)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":67:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":68:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":81:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":69:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":69:28)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":70:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":70:24)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":72:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":80:9)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":72:13)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":72:20)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":73:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":76:9)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":78:9)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":74:13)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":74:37)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":74:30)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":75:31)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":75:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_31.c":79:13)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc5, #loc6])
#loc87 = loc(fused[#loc7, #loc8])
#loc88 = loc(fused[#loc10, #loc9])
#loc89 = loc(fused[#loc12, #loc11])
#loc90 = loc(fused[#loc13, #loc14])
#loc91 = loc(fused[#loc15, #loc16])
#loc92 = loc(fused[#loc17, #loc18])
#loc93 = loc(fused[#loc19, #loc20])
#loc94 = loc(fused[#loc21, #loc22])
#loc95 = loc(fused[#loc26, #loc27])
#loc96 = loc(fused[#loc28, #loc29])
#loc97 = loc(fused[#loc30, #loc31])
#loc98 = loc(fused[#loc32, #loc33])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc37, #loc36])
#loc101 = loc(fused[#loc40, #loc38])
#loc102 = loc(fused[#loc41, #loc42])
#loc103 = loc(fused[#loc43, #loc44])
#loc104 = loc(fused[#loc45, #loc46])
#loc105 = loc(fused[#loc47, #loc48])
#loc106 = loc(fused[#loc49, #loc50])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc57, #loc58])
#loc109 = loc(fused[#loc59, #loc60])
#loc110 = loc(fused[#loc62, #loc61])
#loc111 = loc(fused[#loc64, #loc63])
#loc112 = loc(fused[#loc65, #loc66])
#loc113 = loc(fused[#loc67, #loc68])
#loc114 = loc(fused[#loc69, #loc70])
#loc115 = loc(fused[#loc71, #loc72])
#loc116 = loc(fused[#loc73, #loc74])
#loc117 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc118 = loc(fused[#loc78, #loc79])
