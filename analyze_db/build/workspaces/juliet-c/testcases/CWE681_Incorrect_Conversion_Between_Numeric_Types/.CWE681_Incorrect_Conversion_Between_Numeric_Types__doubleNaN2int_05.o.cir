!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc137)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc138)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc139)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc137)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc19)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc147)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc148)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc26)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc26)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc148)
          cir.scope {
            %11 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc29)
            %12 = cir.const #cir.int<256> : !s32i loc(#loc30)
            %13 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc139)
            %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc31)
            %15 = cir.call @fgets(%11, %12, %14) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc32)
            %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
            %18 = cir.cmp(ne, %15, %17) : !cir.ptr<!s8i>, !cir.bool loc(#loc150)
            cir.if %18 {
              %19 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc37)
              %20 = cir.call @atof(%19) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc38)
              cir.store %20, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc152)
            } else {
              %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc151)
          } loc(#loc149)
          %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc42)
          %8 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc43)
          %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc42)
          %10 = cir.cast(float_to_int, %9 : !cir.double), !s32i loc(#loc42)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc44)
        } loc(#loc146)
      } loc(#loc145)
    } loc(#loc144)
    cir.return loc(#loc16)
  } loc(#loc143)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc154)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc155)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc153)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc156)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc59)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc161)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc162)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc69)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc162)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc72)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc73)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc139)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc75)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc164)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc80)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc81)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc166)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc85)
            } loc(#loc165)
          } loc(#loc163)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc88)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc89)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc89)
            %10 = cir.cmp(lt, %7, %9) : !cir.double, !cir.bool loc(#loc168)
            cir.if %10 {
              %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } else {
              %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc94)
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc95)
              %13 = cir.call @sqrt(%12) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc94)
              %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc94)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc96)
            } loc(#loc169)
          } loc(#loc167)
        } loc(#loc160)
      } loc(#loc159)
    } loc(#loc158)
    cir.return loc(#loc56)
  } loc(#loc157)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc137)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc101)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc174)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc175)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc108)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc108)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc175)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc111)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc112)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc139)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc113)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc114)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc115)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc177)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc119)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc120)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc179)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc123)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc123)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc124)
            } loc(#loc178)
          } loc(#loc176)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc127)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc128)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc128)
            %10 = cir.cmp(lt, %7, %9) : !cir.double, !cir.bool loc(#loc181)
            cir.if %10 {
              %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc132)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc132)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc133)
            } else {
              %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc134)
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc135)
              %13 = cir.call @sqrt(%12) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc134)
              %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc134)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc136)
            } loc(#loc182)
          } loc(#loc180)
        } loc(#loc173)
      } loc(#loc172)
    } loc(#loc171)
    cir.return loc(#loc98)
  } loc(#loc170)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":0:0)
#loc1 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":24:1)
#loc2 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":24:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":47:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":29:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":53:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":31:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":52:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":31:8)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":32:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":33:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":51:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":34:13)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":34:45)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":35:13)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":35:35)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":48:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:23)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:36)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:53)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:17)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":40:63)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":41:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":44:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":46:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":43:37)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":43:32)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":43:17)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":43:48)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":47:17)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":50:32)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":50:37)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":50:13)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":134:1)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":138:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":136:5)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":136:11)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":137:5)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":137:11)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":25:1)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":25:26)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":65:19)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":89:27)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":60:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":97:1)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":62:5)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":96:5)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":62:8)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":63:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":66:5)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":68:5)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":65:9)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":69:9)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":95:9)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":70:13)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":70:45)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":71:13)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":71:35)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":84:13)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:23)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:36)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:53)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:17)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":76:63)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":77:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":80:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":82:13)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":79:37)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":79:32)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":79:17)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":79:48)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":83:27)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":83:17)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":87:13)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":94:13)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":87:17)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":87:32)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":88:13)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":90:13)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":92:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":89:17)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":93:36)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":93:41)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":93:17)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":100:1)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":132:1)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":102:5)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":131:5)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":102:8)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":103:5)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":104:9)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":130:9)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":105:13)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":105:45)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":106:13)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":106:35)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:13)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":119:13)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:23)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:36)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:53)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:17)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":111:63)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":112:13)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":115:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":117:13)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":114:37)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":114:32)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":114:17)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":114:48)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":118:27)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":118:17)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":122:13)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":129:13)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":122:17)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":122:32)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":123:13)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":125:13)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":127:13)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":124:27)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":124:17)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":128:36)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":128:41)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_05.c":128:17)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc9, #loc10])
#loc142 = loc(fused[#loc12, #loc13])
#loc143 = loc(fused[#loc15, #loc16])
#loc144 = loc(fused[#loc17, #loc18])
#loc145 = loc(fused[#loc20, #loc18])
#loc146 = loc(fused[#loc21, #loc22])
#loc147 = loc(fused[#loc23, #loc24])
#loc148 = loc(fused[#loc25, #loc26])
#loc149 = loc(fused[#loc27, #loc28])
#loc150 = loc(fused[#loc32, #loc33])
#loc151 = loc(fused[#loc34, #loc35, #loc36, #loc28])
#loc152 = loc(fused[#loc39, #loc40])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc51, #loc52])
#loc157 = loc(fused[#loc55, #loc56])
#loc158 = loc(fused[#loc57, #loc58])
#loc159 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc160 = loc(fused[#loc64, #loc65])
#loc161 = loc(fused[#loc66, #loc67])
#loc162 = loc(fused[#loc68, #loc69])
#loc163 = loc(fused[#loc70, #loc71])
#loc164 = loc(fused[#loc75, #loc76])
#loc165 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc166 = loc(fused[#loc82, #loc83])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc88, #loc89])
#loc169 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc170 = loc(fused[#loc97, #loc98])
#loc171 = loc(fused[#loc99, #loc100])
#loc172 = loc(fused[#loc102, #loc100])
#loc173 = loc(fused[#loc103, #loc104])
#loc174 = loc(fused[#loc105, #loc106])
#loc175 = loc(fused[#loc107, #loc108])
#loc176 = loc(fused[#loc109, #loc110])
#loc177 = loc(fused[#loc114, #loc115])
#loc178 = loc(fused[#loc116, #loc117, #loc118, #loc110])
#loc179 = loc(fused[#loc121, #loc122])
#loc180 = loc(fused[#loc125, #loc126])
#loc181 = loc(fused[#loc127, #loc128])
#loc182 = loc(fused[#loc129, #loc130, #loc131, #loc126])
