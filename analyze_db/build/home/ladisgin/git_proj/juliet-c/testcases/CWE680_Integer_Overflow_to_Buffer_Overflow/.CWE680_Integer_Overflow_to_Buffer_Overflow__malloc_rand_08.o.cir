!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":43:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc194)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc195)
  cir.func private @printIntLine(!s32i) loc(#loc196)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc197)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc20)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc204)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc27)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc27)
    cir.br ^bb5(%23 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc27)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc27)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc27)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc27)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc27)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc27)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc27)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc27)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc27)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc27)
    cir.br ^bb5(%39 : !u32i) loc(#loc27)
  ^bb5(%40: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":43:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc27)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc23)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc207)
  ^bb9:  // pred: ^bb8
    %42 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %43 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc32)
    %45 = cir.const #cir.int<4> : !u64i loc(#loc208)
    %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc209)
    %47 = cir.call @malloc(%46) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %48 = cir.cast(bitcast, %47 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc210)
    cir.store %48, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc211)
    cir.br ^bb10 loc(#loc212)
  ^bb10:  // pred: ^bb9
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %50 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
    %52 = cir.cmp(eq, %49, %51) : !cir.ptr<!s32i>, !cir.bool loc(#loc213)
    cir.brcond %52 ^bb11, ^bb12 loc(#loc214)
  ^bb11:  // pred: ^bb10
    %53 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
    %54 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc44)
    cir.call @exit(%55) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
    cir.br ^bb12 loc(#loc38)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc38)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc215)
  ^bb14:  // pred: ^bb13
    %56 = cir.const #cir.int<0> : !s32i loc(#loc47)
    %57 = cir.cast(integral, %56 : !s32i), !u64i loc(#loc47)
    cir.store %57, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    cir.br ^bb15 loc(#loc215)
  ^bb15:  // 2 preds: ^bb14, ^bb19
    %58 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc49)
    %59 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %60 = cir.cast(integral, %59 : !s32i), !u64i loc(#loc50)
    %61 = cir.cmp(lt, %58, %60) : !u64i, !cir.bool loc(#loc217)
    cir.brcond %61 ^bb16, ^bb20 loc(#loc51)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc218)
  ^bb17:  // pred: ^bb16
    %62 = cir.const #cir.int<0> : !s32i loc(#loc53)
    %63 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %64 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc55)
    %65 = cir.ptr_stride(%63 : !cir.ptr<!s32i>, %64 : !u64i), !cir.ptr<!s32i> loc(#loc56)
    cir.store %62, %65 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb18 loc(#loc46)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc46)
  ^bb19:  // pred: ^bb18
    %66 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %67 = cir.unary(inc, %66) : !u64i, !u64i loc(#loc58)
    cir.store %67, %0 : !u64i, !cir.ptr<!u64i> loc(#loc220)
    cir.br ^bb15 loc(#loc215)
  ^bb20:  // pred: ^bb15
    cir.br ^bb21 loc(#loc46)
  ^bb21:  // pred: ^bb20
    %68 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %69 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %70 = cir.ptr_stride(%68 : !cir.ptr<!s32i>, %69 : !s32i), !cir.ptr<!s32i> loc(#loc61)
    %71 = cir.load %70 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    cir.call @printIntLine(%71) : (!s32i) -> () loc(#loc62)
    %72 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
    %73 = cir.cast(bitcast, %72 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
    cir.call @free(%73) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
    cir.br ^bb22 loc(#loc30)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc12)
  } loc(#loc198)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc221)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
    cir.return %2 : !s32i loc(#loc225)
  } loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc87)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc91)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc234)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb4 loc(#loc94)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<20> : !s32i loc(#loc97)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc236)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
    %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc102)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc237)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc238)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc239)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    cir.br ^bb7 loc(#loc241)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
    %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
    %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc242)
    cir.brcond %21 ^bb8, ^bb9 loc(#loc243)
  ^bb8:  // pred: ^bb7
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc112)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc114)
    cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc108)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc244)
  ^bb11:  // pred: ^bb10
    %25 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc117)
    cir.store %26, %0 : !u64i, !cir.ptr<!u64i> loc(#loc245)
    cir.br ^bb12 loc(#loc244)
  ^bb12:  // 2 preds: ^bb11, ^bb16
    %27 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc119)
    %28 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc120)
    %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc246)
    cir.brcond %30 ^bb13, ^bb17 loc(#loc121)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc247)
  ^bb14:  // pred: ^bb13
    %31 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc125)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc126)
    cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.br ^bb15 loc(#loc116)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc116)
  ^bb16:  // pred: ^bb15
    %35 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc127)
    %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc128)
    cir.store %36, %0 : !u64i, !cir.ptr<!u64i> loc(#loc249)
    cir.br ^bb12 loc(#loc244)
  ^bb17:  // pred: ^bb12
    cir.br ^bb18 loc(#loc116)
  ^bb18:  // pred: ^bb17
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
    %38 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %39 = cir.ptr_stride(%37 : !cir.ptr<!s32i>, %38 : !s32i), !cir.ptr<!s32i> loc(#loc131)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc132)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc133)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc134)
    cir.br ^bb19 loc(#loc100)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc79)
  } loc(#loc227)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc136)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.return %2 : !s32i loc(#loc251)
  } loc(#loc250)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc254)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc255)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc148)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.br ^bb1 loc(#loc257)
  ^bb1:  // pred: ^bb0
    %5 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc258)
    %6 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc152)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc259)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<20> : !s32i loc(#loc155)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc261)
  ^bb5:  // pred: ^bb4
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc160)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc262)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc263)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc264)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc265)
    cir.br ^bb6 loc(#loc266)
  ^bb6:  // pred: ^bb5
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc267)
    cir.brcond %19 ^bb7, ^bb8 loc(#loc268)
  ^bb7:  // pred: ^bb6
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc170)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc172)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc170)
    cir.br ^bb8 loc(#loc166)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc166)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc269)
  ^bb10:  // pred: ^bb9
    %23 = cir.const #cir.int<0> : !s32i loc(#loc175)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc175)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc270)
    cir.br ^bb11 loc(#loc269)
  ^bb11:  // 2 preds: ^bb10, ^bb15
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc177)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc178)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc271)
    cir.brcond %28 ^bb12, ^bb16 loc(#loc179)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc272)
  ^bb13:  // pred: ^bb12
    %29 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc183)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc184)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    cir.br ^bb14 loc(#loc174)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc174)
  ^bb15:  // pred: ^bb14
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc185)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc186)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc274)
    cir.br ^bb11 loc(#loc269)
  ^bb16:  // pred: ^bb11
    cir.br ^bb17 loc(#loc174)
  ^bb17:  // pred: ^bb16
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc187)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc188)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc189)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc190)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc191)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc192)
    cir.br ^bb18 loc(#loc158)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc140)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":35:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":59:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":46:9)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":46:16)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":47:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":47:14)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":37:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":37:9)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":39:13)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":39:12)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":39:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":40:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":44:5)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":40:8)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":40:26)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":41:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":43:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":45:5)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":58:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:28)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:35)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:42)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:52)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:53)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":50:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:43)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:13)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:27)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:33)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:34)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:40)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":51:39)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:9)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":55:9)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:18)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:14)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:21)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:33)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:23)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":53:9)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":54:29)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":54:13)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":54:24)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":54:25)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:40)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":52:39)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":56:22)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":56:33)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":56:34)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":56:9)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":57:14)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":57:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":124:1)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":128:1)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":126:5)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":126:14)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":127:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":127:14)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":23:1)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":26:1)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":25:12)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":25:5)
#loc75 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":74:19)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":66:1)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":95:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":82:9)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":82:16)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":83:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":83:14)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":68:5)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":68:9)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":70:13)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":70:12)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":70:5)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":71:5)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":80:5)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":71:8)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":71:27)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":72:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":75:5)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":77:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":74:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":79:16)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":79:9)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":81:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":94:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:28)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:35)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:42)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:52)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:53)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":86:9)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:9)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:43)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:27)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:33)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:34)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:40)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":87:39)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":91:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:18)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:14)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:21)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:33)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:23)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":89:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":90:29)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":90:13)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":90:24)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":90:25)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:40)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":88:39)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":92:22)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":92:33)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":92:34)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":92:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":93:14)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":93:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":28:1)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":31:1)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":30:12)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":30:5)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":98:1)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":122:1)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":109:9)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":109:16)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":110:9)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":110:14)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":100:5)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":100:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":102:13)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":102:12)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":102:5)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":103:5)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":107:5)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":103:8)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":103:26)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":104:5)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":106:16)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":106:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":108:5)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":121:5)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:28)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:35)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:42)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:52)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:53)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":113:9)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:9)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:43)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:13)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:27)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:33)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:34)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:40)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":114:39)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:9)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":118:9)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:18)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:14)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:21)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:33)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:23)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":116:9)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":117:29)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":117:13)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":117:24)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":117:25)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:40)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":115:39)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":119:22)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":119:33)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":119:34)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":119:9)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":120:14)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_08.c":120:9)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc3, #loc4])
#loc195 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc7, #loc8])
#loc197 = loc(fused[#loc9, #loc10])
#loc198 = loc(fused[#loc11, #loc12])
#loc199 = loc(fused[#loc13, #loc14])
#loc200 = loc(fused[#loc15, #loc16])
#loc201 = loc(fused[#loc17, #loc18])
#loc202 = loc(fused[#loc21, #loc19])
#loc203 = loc(fused[#loc22, #loc23])
#loc204 = loc(fused[#loc24, #loc25])
#loc205 = loc(fused[#loc26, #loc23])
#loc206 = loc(fused[#loc28, #loc27])
#loc207 = loc(fused[#loc29, #loc30])
#loc208 = loc(fused[#loc33, #loc34])
#loc209 = loc(fused[#loc32, #loc34])
#loc210 = loc(fused[#loc31, #loc35])
#loc211 = loc(fused[#loc36, #loc35])
#loc212 = loc(fused[#loc37, #loc38])
#loc213 = loc(fused[#loc39, #loc40])
#loc214 = loc(fused[#loc41, #loc38])
#loc215 = loc(fused[#loc45, #loc46])
#loc216 = loc(fused[#loc48, #loc47])
#loc217 = loc(fused[#loc49, #loc50])
#loc218 = loc(fused[#loc52, #loc46])
#loc219 = loc(fused[#loc54, #loc53])
#loc220 = loc(fused[#loc58, #loc57])
#loc221 = loc(fused[#loc65, #loc66])
#loc222 = loc(fused[#loc67, #loc68])
#loc223 = loc(fused[#loc69, #loc70])
#loc224 = loc(fused[#loc71, #loc72])
#loc225 = loc(fused[#loc74, #loc73])
#loc226 = loc(fused[#loc75, #loc76])
#loc227 = loc(fused[#loc78, #loc79])
#loc228 = loc(fused[#loc80, #loc81])
#loc229 = loc(fused[#loc82, #loc83])
#loc230 = loc(fused[#loc84, #loc85])
#loc231 = loc(fused[#loc88, #loc86])
#loc232 = loc(fused[#loc89, #loc90])
#loc233 = loc(fused[#loc91, #loc92])
#loc234 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc235 = loc(fused[#loc98, #loc97])
#loc236 = loc(fused[#loc99, #loc100])
#loc237 = loc(fused[#loc103, #loc104])
#loc238 = loc(fused[#loc102, #loc104])
#loc239 = loc(fused[#loc101, #loc105])
#loc240 = loc(fused[#loc106, #loc105])
#loc241 = loc(fused[#loc107, #loc108])
#loc242 = loc(fused[#loc109, #loc110])
#loc243 = loc(fused[#loc111, #loc108])
#loc244 = loc(fused[#loc115, #loc116])
#loc245 = loc(fused[#loc118, #loc117])
#loc246 = loc(fused[#loc119, #loc120])
#loc247 = loc(fused[#loc122, #loc116])
#loc248 = loc(fused[#loc124, #loc123])
#loc249 = loc(fused[#loc128, #loc127])
#loc250 = loc(fused[#loc135, #loc136])
#loc251 = loc(fused[#loc138, #loc137])
#loc252 = loc(fused[#loc139, #loc140])
#loc253 = loc(fused[#loc141, #loc142])
#loc254 = loc(fused[#loc143, #loc144])
#loc255 = loc(fused[#loc145, #loc146])
#loc256 = loc(fused[#loc149, #loc147])
#loc257 = loc(fused[#loc150, #loc151])
#loc258 = loc(fused[#loc152, #loc153])
#loc259 = loc(fused[#loc154, #loc151])
#loc260 = loc(fused[#loc156, #loc155])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc161, #loc162])
#loc263 = loc(fused[#loc160, #loc162])
#loc264 = loc(fused[#loc159, #loc163])
#loc265 = loc(fused[#loc164, #loc163])
#loc266 = loc(fused[#loc165, #loc166])
#loc267 = loc(fused[#loc167, #loc168])
#loc268 = loc(fused[#loc169, #loc166])
#loc269 = loc(fused[#loc173, #loc174])
#loc270 = loc(fused[#loc176, #loc175])
#loc271 = loc(fused[#loc177, #loc178])
#loc272 = loc(fused[#loc180, #loc174])
#loc273 = loc(fused[#loc182, #loc181])
#loc274 = loc(fused[#loc186, #loc185])
