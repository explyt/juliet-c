!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc177)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc184)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc16)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc19)
      } loc(#loc185)
    } loc(#loc183)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc187)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc23)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc29)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc30)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc190)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc32)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc186)
    cir.return loc(#loc9)
  } loc(#loc180)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_add_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc194)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc191)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    cir.return %2 : !s32i loc(#loc197)
  } loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc198)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc59)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc62)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc63)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc64)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc64)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc62)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc67)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc67)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc209)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc211)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc81)
            %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc82)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc211)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc84)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc52)
  } loc(#loc199)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.return %2 : !s32i loc(#loc213)
  } loc(#loc212)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc218)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc98)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc98)
      cir.if %4 {
        %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc101)
        %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc178)
        %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc103)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc103)
        %10 = cir.call @__isoc99_fscanf(%7, %9, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc101)
      } loc(#loc219)
    } loc(#loc217)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc221)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc106)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc106)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc112)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc224)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc226)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc118)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc226)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc119)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc120)
          } else {
            %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc121)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc121)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc225)
        } loc(#loc223)
      } loc(#loc222)
    } loc(#loc220)
    cir.return loc(#loc91)
  } loc(#loc214)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc231)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc137)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc138)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc235)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc142)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc238)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc148)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc149)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc238)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc151)
        } loc(#loc237)
      } loc(#loc236)
    } loc(#loc234)
    cir.return loc(#loc124)
  } loc(#loc227)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc156)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc243)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc160)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc160)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc163)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc247)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc167)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc167)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc173)
          %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc174)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc176)
        } loc(#loc249)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc153)
  } loc(#loc239)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_add_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":43:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":35:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":53:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":37:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":37:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":39:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":39:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":40:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":44:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":40:8)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":40:26)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":41:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":43:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":43:16)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":45:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":52:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":45:8)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":45:26)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":46:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":47:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":51:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":49:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":49:33)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":49:26)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":50:26)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":50:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":163:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":169:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":165:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":165:14)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":166:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":166:14)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":167:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":167:14)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":168:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":168:14)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":23:1)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":26:1)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":25:12)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":25:5)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":73:19)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":85:23)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":60:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":88:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":62:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":64:12)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":69:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":65:8)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":65:26)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":66:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":68:9)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":68:16)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":68:23)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":70:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":87:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":70:8)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":70:27)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":71:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":74:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":76:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":73:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":78:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":86:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":78:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":78:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":79:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":82:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":84:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":80:13)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":80:33)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":80:26)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":81:26)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":81:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":85:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":28:1)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":31:1)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":30:12)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":30:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":91:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":114:1)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":93:5)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":93:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":95:12)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":95:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":96:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":100:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":96:8)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":96:26)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":97:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":99:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":99:16)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":99:23)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":101:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":113:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":101:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":101:26)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":102:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":104:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":112:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":104:13)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":104:20)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":105:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":108:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":110:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":106:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":106:33)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":106:26)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":107:26)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":107:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":111:23)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":111:13)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":117:1)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":140:1)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":119:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":119:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":121:12)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":121:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":122:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":131:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":122:8)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":122:27)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":123:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":126:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":128:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":125:19)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":125:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":130:16)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":130:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":132:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":139:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":132:8)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":132:26)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":133:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":134:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":138:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":136:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":136:33)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":136:26)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":137:26)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":137:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":143:1)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":161:1)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":145:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":145:9)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":147:12)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":147:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":148:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":152:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":148:8)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":148:26)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":149:5)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":151:16)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":151:9)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":153:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":160:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":153:8)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":153:26)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":154:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":155:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":159:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":157:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":157:33)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":157:26)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":158:26)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_add_08.c":158:13)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc6, #loc7])
#loc180 = loc(fused[#loc8, #loc9])
#loc181 = loc(fused[#loc10, #loc11])
#loc182 = loc(fused[#loc13, #loc12])
#loc183 = loc(fused[#loc14, #loc15])
#loc184 = loc(fused[#loc16, #loc17])
#loc185 = loc(fused[#loc18, #loc15])
#loc186 = loc(fused[#loc21, #loc22])
#loc187 = loc(fused[#loc23, #loc24])
#loc188 = loc(fused[#loc25, #loc22])
#loc189 = loc(fused[#loc26, #loc27])
#loc190 = loc(fused[#loc28, #loc29])
#loc191 = loc(fused[#loc33, #loc34])
#loc192 = loc(fused[#loc35, #loc36])
#loc193 = loc(fused[#loc37, #loc38])
#loc194 = loc(fused[#loc39, #loc40])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc46, #loc45])
#loc198 = loc(fused[#loc47, #loc48])
#loc199 = loc(fused[#loc51, #loc52])
#loc200 = loc(fused[#loc53, #loc54])
#loc201 = loc(fused[#loc56, #loc55])
#loc202 = loc(fused[#loc57, #loc58])
#loc203 = loc(fused[#loc59, #loc60])
#loc204 = loc(fused[#loc61, #loc58])
#loc205 = loc(fused[#loc65, #loc66])
#loc206 = loc(fused[#loc67, #loc68])
#loc207 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc208 = loc(fused[#loc73, #loc74])
#loc209 = loc(fused[#loc75, #loc76])
#loc210 = loc(fused[#loc77, #loc78, #loc79, #loc74])
#loc211 = loc(fused[#loc80, #loc81])
#loc212 = loc(fused[#loc86, #loc87])
#loc213 = loc(fused[#loc89, #loc88])
#loc214 = loc(fused[#loc90, #loc91])
#loc215 = loc(fused[#loc92, #loc93])
#loc216 = loc(fused[#loc95, #loc94])
#loc217 = loc(fused[#loc96, #loc97])
#loc218 = loc(fused[#loc98, #loc99])
#loc219 = loc(fused[#loc100, #loc97])
#loc220 = loc(fused[#loc104, #loc105])
#loc221 = loc(fused[#loc106, #loc107])
#loc222 = loc(fused[#loc108, #loc105])
#loc223 = loc(fused[#loc109, #loc110])
#loc224 = loc(fused[#loc111, #loc112])
#loc225 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc226 = loc(fused[#loc116, #loc117])
#loc227 = loc(fused[#loc123, #loc124])
#loc228 = loc(fused[#loc125, #loc126])
#loc229 = loc(fused[#loc128, #loc127])
#loc230 = loc(fused[#loc129, #loc130])
#loc231 = loc(fused[#loc131, #loc132])
#loc232 = loc(fused[#loc133, #loc134, #loc135, #loc130])
#loc233 = loc(fused[#loc139, #loc138])
#loc234 = loc(fused[#loc140, #loc141])
#loc235 = loc(fused[#loc142, #loc143])
#loc236 = loc(fused[#loc144, #loc141])
#loc237 = loc(fused[#loc145, #loc146])
#loc238 = loc(fused[#loc147, #loc148])
#loc239 = loc(fused[#loc152, #loc153])
#loc240 = loc(fused[#loc154, #loc155])
#loc241 = loc(fused[#loc157, #loc156])
#loc242 = loc(fused[#loc158, #loc159])
#loc243 = loc(fused[#loc160, #loc161])
#loc244 = loc(fused[#loc162, #loc159])
#loc245 = loc(fused[#loc164, #loc163])
#loc246 = loc(fused[#loc165, #loc166])
#loc247 = loc(fused[#loc167, #loc168])
#loc248 = loc(fused[#loc169, #loc166])
#loc249 = loc(fused[#loc170, #loc171])
#loc250 = loc(fused[#loc172, #loc173])
