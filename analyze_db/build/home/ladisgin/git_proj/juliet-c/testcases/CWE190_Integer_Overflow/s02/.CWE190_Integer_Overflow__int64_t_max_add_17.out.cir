!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":108:10)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":108:14)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":108:20)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":108:32)
#loc186 = loc(fused[#loc59, #loc60])
#loc187 = loc(fused[#loc61, #loc62])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_add_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc164)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc165)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc12)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.br ^bb2 loc(#loc167)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc169)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc170)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc22)
    cir.store %9, %3 : !s64i, !cir.ptr<!s64i> loc(#loc171)
    cir.br ^bb5 loc(#loc15)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc15)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc25)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb2 loc(#loc167)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc173)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb10 loc(#loc173)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc175)
    cir.brcond %15 ^bb11, ^bb17 loc(#loc32)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc176)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc177)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc36)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc6)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc6)
    %19 = cir.binop(add, %16, %18) nsw : !s64i loc(#loc36)
    cir.store %19, %0 : !s64i, !cir.ptr<!s64i> loc(#loc162)
    %20 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc37)
    cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc38)
    cir.br ^bb14 loc(#loc35)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc27)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc27)
  ^bb16:  // pred: ^bb15
    %21 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc40)
    cir.store %22, %2 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb10 loc(#loc173)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc27)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc4)
  } loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_add_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc179)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc182)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc183)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc184)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc66)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_add_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call @CWE190_Integer_Overflow__int64_t_max_add_17_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_add_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call @CWE190_Integer_Overflow__int64_t_max_add_17_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.return %17 : !s32i loc(#loc190)
  } loc(#loc185)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc193)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc194)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc195)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc87)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    cir.br ^bb1 loc(#loc197)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb2 loc(#loc197)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc95)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc200)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc97)
    cir.store %9, %3 : !s64i, !cir.ptr<!s64i> loc(#loc201)
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc100)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb2 loc(#loc197)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc90)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc203)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.br ^bb10 loc(#loc203)
  ^bb10:  // 2 preds: ^bb9, ^bb19
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %15 ^bb11, ^bb20 loc(#loc107)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc206)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc207)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    %17 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc112)
    %18 = cir.cmp(lt, %16, %17) : !s64i, !cir.bool loc(#loc208)
    cir.brcond %18 ^bb14, ^bb15 loc(#loc209)
  ^bb14:  // pred: ^bb13
    %19 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc116)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc81)
    %22 = cir.binop(add, %19, %21) nsw : !s64i loc(#loc116)
    cir.store %22, %0 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc117)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc118)
    cir.br ^bb16 loc(#loc114)
  ^bb15:  // pred: ^bb13
    %24 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc77)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.br ^bb16 loc(#loc110)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc110)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc102)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc102)
  ^bb19:  // pred: ^bb18
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
    %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc121)
    cir.store %27, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb10 loc(#loc203)
  ^bb20:  // pred: ^bb10
    cir.br ^bb21 loc(#loc102)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc79)
  } loc(#loc191)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc213)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc214)
    %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %4 = cir.const #cir.int<0> : !s64i loc(#loc131)
    cir.store %4, %3 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc218)
    cir.br ^bb2 loc(#loc217)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc138)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc139)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc220)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc141)
    %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc141)
    cir.store %10, %3 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.br ^bb5 loc(#loc134)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc134)
  ^bb6:  // pred: ^bb5
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %12 = cir.unary(inc, %11) : !s32i, !s32i loc(#loc144)
    cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.br ^bb2 loc(#loc217)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc134)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc223)
  ^bb9:  // pred: ^bb8
    %13 = cir.const #cir.int<0> : !s32i loc(#loc147)
    cir.store %13, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb10 loc(#loc223)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc225)
    cir.brcond %16 ^bb11, ^bb17 loc(#loc151)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc226)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc227)
  ^bb13:  // pred: ^bb12
    %17 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc155)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc125)
    %20 = cir.binop(add, %17, %19) nsw : !s64i loc(#loc155)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc156)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc157)
    cir.br ^bb14 loc(#loc154)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc146)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc146)
  ^bb16:  // pred: ^bb15
    %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc159)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.br ^bb10 loc(#loc223)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc146)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc123)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_add_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":40:1)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":36:13)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":36:37)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":24:11)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":25:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":26:12)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:20)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:18)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":30:16)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":30:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:24)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":27:23)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":39:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:13)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:16)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:20)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:18)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":33:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":34:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":38:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":36:30)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":37:31)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":37:13)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:24)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":32:23)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":93:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":97:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":95:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":95:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":96:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":96:13)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":113:15)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":115:15)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":118:15)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":120:15)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":108:1)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":123:1)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":109:1)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":111:27)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":111:22)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":111:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":113:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":114:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":114:54)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":115:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":118:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":119:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":119:53)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":120:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":122:12)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":122:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":67:23)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":47:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":70:1)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":62:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":62:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":49:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":49:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":49:11)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":50:5)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":50:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":51:12)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":51:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":56:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:16)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:20)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:18)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":53:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":55:16)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":55:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:24)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":52:23)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":69:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:16)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:20)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:18)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":58:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":60:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":68:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":60:13)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":60:20)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":61:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":64:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":66:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":62:30)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":63:31)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":63:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":67:13)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:24)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":57:23)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":73:1)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":91:1)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":87:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":87:37)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":75:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":75:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":75:11)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":76:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":76:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":77:12)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":77:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":82:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:9)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:16)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:20)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:18)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":79:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":81:16)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":81:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:24)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":78:23)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":90:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:13)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:9)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:16)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:20)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:18)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":84:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":85:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":89:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":87:30)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":88:31)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":88:13)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:24)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_add_17.c":83:23)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc7, #loc9])
#loc165 = loc(fused[#loc10, #loc11])
#loc166 = loc(fused[#loc13, #loc12])
#loc167 = loc(fused[#loc14, #loc15])
#loc168 = loc(fused[#loc17, #loc16])
#loc169 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc21, #loc15])
#loc171 = loc(fused[#loc23, #loc22])
#loc172 = loc(fused[#loc25, #loc24])
#loc173 = loc(fused[#loc26, #loc27])
#loc174 = loc(fused[#loc29, #loc28])
#loc175 = loc(fused[#loc30, #loc31])
#loc176 = loc(fused[#loc33, #loc27])
#loc177 = loc(fused[#loc34, #loc35])
#loc178 = loc(fused[#loc40, #loc39])
#loc179 = loc(fused[#loc41, #loc42])
#loc180 = loc(fused[#loc43, #loc44])
#loc181 = loc(fused[#loc45, #loc46])
#loc182 = loc(fused[#loc47, #loc48])
#loc183 = loc(fused[#loc49, #loc50])
#loc184 = loc(fused[#loc51, #loc52])
#loc185 = loc(fused[#loc57, #loc58])
#loc188 = loc(fused[#loc68, #loc69])
#loc189 = loc(fused[#loc72, #loc73])
#loc190 = loc(fused[#loc76, #loc75])
#loc191 = loc(fused[#loc78, #loc79])
#loc192 = loc(fused[#loc80, #loc81])
#loc193 = loc(fused[#loc82, #loc83])
#loc194 = loc(fused[#loc82, #loc84])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc88, #loc87])
#loc197 = loc(fused[#loc89, #loc90])
#loc198 = loc(fused[#loc92, #loc91])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc96, #loc90])
#loc201 = loc(fused[#loc98, #loc97])
#loc202 = loc(fused[#loc100, #loc99])
#loc203 = loc(fused[#loc101, #loc102])
#loc204 = loc(fused[#loc104, #loc103])
#loc205 = loc(fused[#loc105, #loc106])
#loc206 = loc(fused[#loc108, #loc102])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc111, #loc112])
#loc209 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc210 = loc(fused[#loc121, #loc120])
#loc211 = loc(fused[#loc122, #loc123])
#loc212 = loc(fused[#loc124, #loc125])
#loc213 = loc(fused[#loc126, #loc127])
#loc214 = loc(fused[#loc126, #loc128])
#loc215 = loc(fused[#loc129, #loc130])
#loc216 = loc(fused[#loc132, #loc131])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc136, #loc135])
#loc219 = loc(fused[#loc137, #loc138])
#loc220 = loc(fused[#loc140, #loc134])
#loc221 = loc(fused[#loc142, #loc141])
#loc222 = loc(fused[#loc144, #loc143])
#loc223 = loc(fused[#loc145, #loc146])
#loc224 = loc(fused[#loc148, #loc147])
#loc225 = loc(fused[#loc149, #loc150])
#loc226 = loc(fused[#loc152, #loc146])
#loc227 = loc(fused[#loc153, #loc154])
#loc228 = loc(fused[#loc159, #loc158])
