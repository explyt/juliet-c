!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
        cir.condition(%1) loc(#loc12)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc69)
            %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc70)
            %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc69)
            cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc69)
            %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
            cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc70)
            cir.scope {
              %4 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
              %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
              %6 = cir.const #cir.int<100> : !s32i loc(#loc24)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc24)
              %8 = cir.const #cir.int<6> : !u64i loc(#loc72)
              %9 = cir.binop(sub, %7, %8) : !u64i loc(#loc73)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc27)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
              %12 = cir.binop(sub, %9, %11) : !u64i loc(#loc74)
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
              %17 = cir.call @snprintf(%5, %12, %14, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc22)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc28)
              %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc75)
              cir.if %19 {
                %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc30)
              } loc(#loc76)
            } loc(#loc71)
          } loc(#loc68)
          cir.break loc(#loc31)
        } loc(#loc67)
        cir.yield loc(#loc11)
      } loc(#loc66)
    } loc(#loc66)
    cir.return loc(#loc9)
  } loc(#loc65)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc77)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc40)
        cir.condition(%1) loc(#loc40)
      } do {
        cir.scope {
          cir.scope {
            %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc83)
            %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc84)
            %2 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc83)
            cir.store %2, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc83)
            %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
            cir.store %3, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
            cir.scope {
              %4 = cir.get_global @snprintf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc50)
              %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
              %6 = cir.const #cir.int<100> : !s32i loc(#loc52)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc52)
              %8 = cir.const #cir.int<6> : !u64i loc(#loc86)
              %9 = cir.binop(sub, %7, %8) : !u64i loc(#loc87)
              %10 = cir.const #cir.int<1> : !s32i loc(#loc55)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc55)
              %12 = cir.binop(sub, %9, %11) : !u64i loc(#loc88)
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc56)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc56)
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc57)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc57)
              %17 = cir.call @snprintf(%5, %12, %14, %16) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc50)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc58)
              %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc89)
              cir.if %19 {
                %20 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
                %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
                cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc61)
              } loc(#loc90)
            } loc(#loc85)
          } loc(#loc82)
          cir.break loc(#loc62)
        } loc(#loc81)
        cir.yield loc(#loc39)
      } loc(#loc80)
    } loc(#loc80)
    cir.return loc(#loc37)
  } loc(#loc79)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:57)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:65)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":45:27)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":32:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":50:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":34:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":49:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":34:11)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":35:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":36:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":47:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":39:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":39:36)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":40:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":40:27)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":46:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:17)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:26)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:31)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:35)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:52)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:54)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":43:80)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":44:13)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":45:17)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":48:9)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":76:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":79:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":78:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":78:11)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":57:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":74:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":59:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":73:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":59:11)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":60:5)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":61:9)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":71:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":64:13)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":64:36)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":65:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":65:27)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":70:13)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:17)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:26)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:31)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:35)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:52)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:54)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:57)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:65)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":67:79)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":68:13)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":69:27)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":69:17)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_16.c":72:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc5, #loc6])
#loc65 = loc(fused[#loc8, #loc9])
#loc66 = loc(fused[#loc10, #loc11])
#loc67 = loc(fused[#loc13, #loc11])
#loc68 = loc(fused[#loc14, #loc15])
#loc69 = loc(fused[#loc16, #loc17])
#loc70 = loc(fused[#loc18, #loc19])
#loc71 = loc(fused[#loc20, #loc21])
#loc72 = loc(fused[#loc25, #loc26])
#loc73 = loc(fused[#loc24, #loc26])
#loc74 = loc(fused[#loc24, #loc27])
#loc75 = loc(fused[#loc22, #loc28])
#loc76 = loc(fused[#loc29, #loc21])
#loc77 = loc(fused[#loc32, #loc33])
#loc78 = loc(fused[#loc34, #loc35])
#loc79 = loc(fused[#loc36, #loc37])
#loc80 = loc(fused[#loc38, #loc39])
#loc81 = loc(fused[#loc41, #loc39])
#loc82 = loc(fused[#loc42, #loc43])
#loc83 = loc(fused[#loc44, #loc45])
#loc84 = loc(fused[#loc46, #loc47])
#loc85 = loc(fused[#loc48, #loc49])
#loc86 = loc(fused[#loc53, #loc54])
#loc87 = loc(fused[#loc52, #loc54])
#loc88 = loc(fused[#loc52, #loc55])
#loc89 = loc(fused[#loc50, #loc58])
#loc90 = loc(fused[#loc59, #loc49])
