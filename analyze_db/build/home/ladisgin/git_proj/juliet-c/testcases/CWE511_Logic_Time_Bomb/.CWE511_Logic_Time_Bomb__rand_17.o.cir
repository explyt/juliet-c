!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc63)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc65)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.br ^bb2 loc(#loc69)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc71)
    cir.brcond %4 ^bb3, ^bb11 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc72)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc22)
    %6 = cir.call @time(%5) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc23)
    %7 = cir.cast(integral, %6 : !s64i), !u32i loc(#loc23)
    cir.call @srand(%7) : (!u32i) -> () extra(#fn_attr) loc(#loc24)
    cir.br ^bb5 loc(#loc73)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc28)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc75)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc9)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc9)
    %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc30)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc15)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc32)
    cir.store %15, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb2 loc(#loc69)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc15)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc11)
  } loc(#loc67)
  cir.func no_proto @CWE511_Logic_Time_Bomb__rand_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc34)
  } loc(#loc77)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc39)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.br ^bb2 loc(#loc82)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc84)
    cir.brcond %4 ^bb3, ^bb11 loc(#loc50)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %6 = cir.call @time(%5) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %7 = cir.cast(integral, %6 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%7) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    cir.br ^bb5 loc(#loc86)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
    %9 = cir.const #cir.int<20000> : !s32i loc(#loc58)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc87)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc88)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc45)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc45)
  ^bb10:  // pred: ^bb9
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc62)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb2 loc(#loc82)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc45)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc41)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__rand_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":575:1)
#loc2 = loc("/usr/include/stdlib.h":575:41)
#loc3 = loc("/usr/include/time.h":76:1)
#loc4 = loc("/usr/include/time.h":76:38)
#loc5 = loc("/usr/include/stdlib.h":573:1)
#loc6 = loc("/usr/include/stdlib.h":573:24)
#loc7 = loc("/usr/include/unistd.h":858:1)
#loc8 = loc("/usr/include/unistd.h":858:48)
#loc9 = loc("CWE511_Logic_Time_Bomb__rand_17.c":38:20)
#loc10 = loc("CWE511_Logic_Time_Bomb__rand_17.c":29:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__rand_17.c":41:1)
#loc12 = loc("CWE511_Logic_Time_Bomb__rand_17.c":31:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__rand_17.c":31:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:5)
#loc15 = loc("CWE511_Logic_Time_Bomb__rand_17.c":40:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:13)
#loc17 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:9)
#loc18 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:16)
#loc19 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:20)
#loc20 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:18)
#loc21 = loc("CWE511_Logic_Time_Bomb__rand_17.c":33:5)
#loc22 = loc("CWE511_Logic_Time_Bomb__rand_17.c":34:30)
#loc23 = loc("CWE511_Logic_Time_Bomb__rand_17.c":34:25)
#loc24 = loc("CWE511_Logic_Time_Bomb__rand_17.c":34:9)
#loc25 = loc("CWE511_Logic_Time_Bomb__rand_17.c":36:9)
#loc26 = loc("CWE511_Logic_Time_Bomb__rand_17.c":39:9)
#loc27 = loc("CWE511_Logic_Time_Bomb__rand_17.c":36:13)
#loc28 = loc("CWE511_Logic_Time_Bomb__rand_17.c":36:23)
#loc29 = loc("CWE511_Logic_Time_Bomb__rand_17.c":37:9)
#loc30 = loc("CWE511_Logic_Time_Bomb__rand_17.c":38:13)
#loc31 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:24)
#loc32 = loc("CWE511_Logic_Time_Bomb__rand_17.c":32:23)
#loc33 = loc("CWE511_Logic_Time_Bomb__rand_17.c":62:1)
#loc34 = loc("CWE511_Logic_Time_Bomb__rand_17.c":65:1)
#loc35 = loc("CWE511_Logic_Time_Bomb__rand_17.c":64:5)
#loc36 = loc("CWE511_Logic_Time_Bomb__rand_17.c":64:11)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE511_Logic_Time_Bomb__rand_17.c":57:23)
#loc40 = loc("CWE511_Logic_Time_Bomb__rand_17.c":48:1)
#loc41 = loc("CWE511_Logic_Time_Bomb__rand_17.c":60:1)
#loc42 = loc("CWE511_Logic_Time_Bomb__rand_17.c":50:5)
#loc43 = loc("CWE511_Logic_Time_Bomb__rand_17.c":50:9)
#loc44 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:5)
#loc45 = loc("CWE511_Logic_Time_Bomb__rand_17.c":59:5)
#loc46 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:13)
#loc47 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:9)
#loc48 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:16)
#loc49 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:20)
#loc50 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:18)
#loc51 = loc("CWE511_Logic_Time_Bomb__rand_17.c":52:5)
#loc52 = loc("CWE511_Logic_Time_Bomb__rand_17.c":53:30)
#loc53 = loc("CWE511_Logic_Time_Bomb__rand_17.c":53:25)
#loc54 = loc("CWE511_Logic_Time_Bomb__rand_17.c":53:9)
#loc55 = loc("CWE511_Logic_Time_Bomb__rand_17.c":55:9)
#loc56 = loc("CWE511_Logic_Time_Bomb__rand_17.c":58:9)
#loc57 = loc("CWE511_Logic_Time_Bomb__rand_17.c":55:13)
#loc58 = loc("CWE511_Logic_Time_Bomb__rand_17.c":55:23)
#loc59 = loc("CWE511_Logic_Time_Bomb__rand_17.c":56:9)
#loc60 = loc("CWE511_Logic_Time_Bomb__rand_17.c":57:13)
#loc61 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:24)
#loc62 = loc("CWE511_Logic_Time_Bomb__rand_17.c":51:23)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc3, #loc4])
#loc65 = loc(fused[#loc5, #loc6])
#loc66 = loc(fused[#loc7, #loc8])
#loc67 = loc(fused[#loc10, #loc11])
#loc68 = loc(fused[#loc12, #loc13])
#loc69 = loc(fused[#loc14, #loc15])
#loc70 = loc(fused[#loc17, #loc16])
#loc71 = loc(fused[#loc18, #loc19])
#loc72 = loc(fused[#loc21, #loc15])
#loc73 = loc(fused[#loc25, #loc26])
#loc74 = loc(fused[#loc27, #loc28])
#loc75 = loc(fused[#loc29, #loc26])
#loc76 = loc(fused[#loc32, #loc31])
#loc77 = loc(fused[#loc33, #loc34])
#loc78 = loc(fused[#loc35, #loc36])
#loc79 = loc(fused[#loc37, #loc38])
#loc80 = loc(fused[#loc40, #loc41])
#loc81 = loc(fused[#loc42, #loc43])
#loc82 = loc(fused[#loc44, #loc45])
#loc83 = loc(fused[#loc47, #loc46])
#loc84 = loc(fused[#loc48, #loc49])
#loc85 = loc(fused[#loc51, #loc45])
#loc86 = loc(fused[#loc55, #loc56])
#loc87 = loc(fused[#loc57, #loc58])
#loc88 = loc(fused[#loc59, #loc56])
#loc89 = loc(fused[#loc62, #loc61])
