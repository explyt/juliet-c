!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":111:10)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":111:14)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":111:20)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":111:32)
#loc175 = loc(fused[#loc54, #loc55])
#loc176 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_FIVE : !s32i {alignment = 4 : i64} loc(#loc150)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc151)
  cir.func private @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc150)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc155)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc158)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc159)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc20)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc160)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc26)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc162)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc27)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc163)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc29)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc29)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc29)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc29)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc29)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc29)
              %22 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc30)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc165)
              cir.store %23, %4 : !u32i, !cir.ptr<!u32i> loc(#loc166)
            } loc(#loc164)
          } loc(#loc161)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc32)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc32)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc167)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc35)
        } loc(#loc157)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc8)
  } loc(#loc153)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc168)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc171)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc172)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_good : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_13_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.return %17 : !s32i loc(#loc179)
  } loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc180)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc150)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc183)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc84)
      } else {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc186)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc187)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc91)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc91)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc188)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc96)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc97)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc190)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc98)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc191)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc100)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc100)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc100)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc100)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc100)
              %22 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc101)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc193)
              cir.store %23, %4 : !u32i, !cir.ptr<!u32i> loc(#loc194)
            } loc(#loc192)
          } loc(#loc189)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc106)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !cir.bool loc(#loc196)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc109)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc108)
            } loc(#loc197)
          } loc(#loc195)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc110)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc110)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc198)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc113)
        } loc(#loc185)
      } loc(#loc184)
    } loc(#loc182)
    cir.return loc(#loc76)
  } loc(#loc181)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FIVE : !cir.ptr<!s32i> loc(#loc150)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc201)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc204)
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc205)
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc127)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc127)
          cir.store %7, %4 : !u32i, !cir.ptr<!u32i> loc(#loc206)
          cir.scope {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc132)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc133)
            %13 = cir.binop(rem, %11, %12) : !s32i loc(#loc208)
            %14 = cir.const #cir.int<0> : !s32i loc(#loc134)
            %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc209)
            cir.if %15 {
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc136)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc136)
              %18 = cir.const #cir.int<2> : !u32i loc(#loc136)
              %19 = cir.binop(mul, %17, %18) : !u32i loc(#loc136)
              %20 = cir.const #cir.int<1> : !u32i loc(#loc136)
              %21 = cir.binop(add, %19, %20) : !u32i loc(#loc136)
              %22 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc137)
              %23 = cir.binop(sub, %21, %22) : !u32i loc(#loc211)
              cir.store %23, %4 : !u32i, !cir.ptr<!u32i> loc(#loc212)
            } loc(#loc210)
          } loc(#loc207)
          cir.scope {
            %11 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc141)
            %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc142)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc142)
            %14 = cir.cmp(gt, %11, %13) : !u32i, !cir.bool loc(#loc214)
            cir.if %14 {
              %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc144)
              %16 = cir.const #cir.int<1> : !s32i loc(#loc145)
              cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
            } loc(#loc215)
          } loc(#loc213)
          %8 = cir.load %4 : !cir.ptr<!u32i>, !u32i loc(#loc146)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc146)
          cir.store %9, %5 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc149)
        } loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.return loc(#loc115)
  } loc(#loc199)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":111:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":111:18)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":20:1)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":37:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":22:5)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":36:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":22:8)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":22:27)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":23:5)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":24:9)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":35:9)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":25:13)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":25:22)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":26:13)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":26:17)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":27:27)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":27:13)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":27:32)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":28:13)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":31:13)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":28:17)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":28:26)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":28:31)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":29:13)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":30:31)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":30:42)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":30:17)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":33:25)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":33:13)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":34:26)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":34:13)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":96:1)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":100:1)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":98:5)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":98:11)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":99:5)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":99:11)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":116:15)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":118:15)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":121:15)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":123:15)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":111:1)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":126:1)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":112:1)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":114:27)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":114:22)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":114:5)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":116:5)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":117:5)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":117:63)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":118:5)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":121:5)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":122:5)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":122:62)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":123:5)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":125:12)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":125:5)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":49:19)
#loc73 = loc("/usr/include/stdlib.h":756:1)
#loc74 = loc("/usr/include/stdlib.h":756:70)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":44:1)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":70:1)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":46:5)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":69:5)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":46:8)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":46:27)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":47:5)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":50:5)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":52:5)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":49:9)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":53:9)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":68:9)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":54:13)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":54:22)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":55:13)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":55:17)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":56:27)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":56:13)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":56:32)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":57:13)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":60:13)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":57:17)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":57:26)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":57:31)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":58:13)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":59:31)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":59:42)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":59:17)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":62:13)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":65:13)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":62:17)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":62:31)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":63:13)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":64:17)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":64:22)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":66:25)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":66:13)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":67:26)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":67:13)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":73:1)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":94:1)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":75:5)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":93:5)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":75:8)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":75:27)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":76:5)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":77:9)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":92:9)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":78:13)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":78:22)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":79:13)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":79:17)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":80:27)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":80:13)
#loc129 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":80:32)
#loc130 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":81:13)
#loc131 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":84:13)
#loc132 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":81:17)
#loc133 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":81:26)
#loc134 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":81:31)
#loc135 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":82:13)
#loc136 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":83:31)
#loc137 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":83:42)
#loc138 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":83:17)
#loc139 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":86:13)
#loc140 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":89:13)
#loc141 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":86:17)
#loc142 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":86:31)
#loc143 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":87:13)
#loc144 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":88:17)
#loc145 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":88:22)
#loc146 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":90:25)
#loc147 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":90:13)
#loc148 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":91:26)
#loc149 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_13.c":91:13)
#loc150 = loc(fused[#loc1, #loc2])
#loc151 = loc(fused[#loc3, #loc4])
#loc152 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc7, #loc8])
#loc154 = loc(fused[#loc9, #loc10])
#loc155 = loc(fused[#loc11, #loc12])
#loc156 = loc(fused[#loc13, #loc10])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc18, #loc19])
#loc160 = loc(fused[#loc21, #loc22])
#loc161 = loc(fused[#loc23, #loc24])
#loc162 = loc(fused[#loc25, #loc26])
#loc163 = loc(fused[#loc25, #loc27])
#loc164 = loc(fused[#loc28, #loc24])
#loc165 = loc(fused[#loc29, #loc30])
#loc166 = loc(fused[#loc31, #loc30])
#loc167 = loc(fused[#loc33, #loc32])
#loc168 = loc(fused[#loc36, #loc37])
#loc169 = loc(fused[#loc38, #loc39])
#loc170 = loc(fused[#loc40, #loc41])
#loc171 = loc(fused[#loc42, #loc43])
#loc172 = loc(fused[#loc44, #loc45])
#loc173 = loc(fused[#loc46, #loc47])
#loc174 = loc(fused[#loc52, #loc53])
#loc177 = loc(fused[#loc63, #loc64])
#loc178 = loc(fused[#loc67, #loc68])
#loc179 = loc(fused[#loc71, #loc70])
#loc180 = loc(fused[#loc73, #loc74])
#loc181 = loc(fused[#loc75, #loc76])
#loc182 = loc(fused[#loc77, #loc78])
#loc183 = loc(fused[#loc79, #loc80])
#loc184 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc185 = loc(fused[#loc85, #loc86])
#loc186 = loc(fused[#loc87, #loc88])
#loc187 = loc(fused[#loc89, #loc90])
#loc188 = loc(fused[#loc92, #loc93])
#loc189 = loc(fused[#loc94, #loc95])
#loc190 = loc(fused[#loc96, #loc97])
#loc191 = loc(fused[#loc96, #loc98])
#loc192 = loc(fused[#loc99, #loc95])
#loc193 = loc(fused[#loc100, #loc101])
#loc194 = loc(fused[#loc102, #loc101])
#loc195 = loc(fused[#loc103, #loc104])
#loc196 = loc(fused[#loc105, #loc106])
#loc197 = loc(fused[#loc107, #loc104])
#loc198 = loc(fused[#loc111, #loc110])
#loc199 = loc(fused[#loc114, #loc115])
#loc200 = loc(fused[#loc116, #loc117])
#loc201 = loc(fused[#loc118, #loc119])
#loc202 = loc(fused[#loc120, #loc117])
#loc203 = loc(fused[#loc121, #loc122])
#loc204 = loc(fused[#loc123, #loc124])
#loc205 = loc(fused[#loc125, #loc126])
#loc206 = loc(fused[#loc128, #loc129])
#loc207 = loc(fused[#loc130, #loc131])
#loc208 = loc(fused[#loc132, #loc133])
#loc209 = loc(fused[#loc132, #loc134])
#loc210 = loc(fused[#loc135, #loc131])
#loc211 = loc(fused[#loc136, #loc137])
#loc212 = loc(fused[#loc138, #loc137])
#loc213 = loc(fused[#loc139, #loc140])
#loc214 = loc(fused[#loc141, #loc142])
#loc215 = loc(fused[#loc143, #loc140])
#loc216 = loc(fused[#loc147, #loc146])
