!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc78)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_12_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc83)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc83)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc86)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc21)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc86)
          cir.scope {
            %6 = cir.const #cir.int<5> : !s32i loc(#loc24)
            cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc88)
            %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc26)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc7)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc28)
            } loc(#loc89)
          } loc(#loc87)
        } loc(#loc85)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc91)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc91)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %7 = cir.const #cir.int<5> : !s32i loc(#loc37)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc93)
            cir.if %8 {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc39)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc39)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc94)
          } loc(#loc92)
        } loc(#loc90)
      } loc(#loc84)
    } loc(#loc82)
    cir.return loc(#loc9)
  } loc(#loc81)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc96)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc95)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc99)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc99)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc49)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc49)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc102)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc102)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            %7 = cir.const #cir.int<5> : !s32i loc(#loc62)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc104)
            cir.if %8 {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc64)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc64)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
            } loc(#loc105)
          } loc(#loc103)
        } loc(#loc101)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc107)
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
          cir.scope {
            %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %7 = cir.const #cir.int<5> : !s32i loc(#loc74)
            %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc109)
            cir.if %8 {
              %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc76)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc76)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc77)
            } loc(#loc110)
          } loc(#loc108)
        } loc(#loc106)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc46)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":29:27)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":20:1)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":44:1)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":22:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":43:5)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":22:8)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":22:33)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":23:5)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":32:5)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":34:5)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":24:9)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":31:9)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":25:13)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":25:32)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":25:27)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":27:13)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":30:13)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":27:26)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":27:16)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":27:24)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":28:13)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":29:17)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":35:9)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":42:9)
#loc31 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":36:13)
#loc32 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":36:32)
#loc33 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":36:27)
#loc34 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":38:13)
#loc35 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":41:13)
#loc36 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":38:16)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":38:27)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":39:13)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":40:27)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":40:17)
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":77:1)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":80:1)
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":79:5)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":79:11)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":51:1)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":75:1)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":53:5)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":74:5)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":53:8)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":53:33)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":54:5)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":63:5)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":65:5)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":55:9)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":62:9)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":56:13)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":56:32)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":56:27)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":58:13)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":61:13)
#loc61 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":58:16)
#loc62 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":58:27)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":59:13)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":60:27)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":60:17)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":66:9)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":73:9)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":67:13)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":67:32)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":67:27)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":69:13)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":72:13)
#loc73 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":69:16)
#loc74 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":69:27)
#loc75 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":70:13)
#loc76 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":71:27)
#loc77 = loc("CWE481_Assigning_Instead_of_Comparing__basic_12.c":71:17)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc8, #loc9])
#loc82 = loc(fused[#loc10, #loc11])
#loc83 = loc(fused[#loc12, #loc13])
#loc84 = loc(fused[#loc14, #loc15, #loc16, #loc11])
#loc85 = loc(fused[#loc17, #loc18])
#loc86 = loc(fused[#loc19, #loc20])
#loc87 = loc(fused[#loc22, #loc23])
#loc88 = loc(fused[#loc25, #loc24])
#loc89 = loc(fused[#loc27, #loc23])
#loc90 = loc(fused[#loc29, #loc30])
#loc91 = loc(fused[#loc31, #loc32])
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc36, #loc37])
#loc94 = loc(fused[#loc38, #loc35])
#loc95 = loc(fused[#loc41, #loc42])
#loc96 = loc(fused[#loc43, #loc44])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc101 = loc(fused[#loc54, #loc55])
#loc102 = loc(fused[#loc56, #loc57])
#loc103 = loc(fused[#loc59, #loc60])
#loc104 = loc(fused[#loc61, #loc62])
#loc105 = loc(fused[#loc63, #loc60])
#loc106 = loc(fused[#loc66, #loc67])
#loc107 = loc(fused[#loc68, #loc69])
#loc108 = loc(fused[#loc71, #loc72])
#loc109 = loc(fused[#loc73, #loc74])
#loc110 = loc(fused[#loc75, #loc72])
