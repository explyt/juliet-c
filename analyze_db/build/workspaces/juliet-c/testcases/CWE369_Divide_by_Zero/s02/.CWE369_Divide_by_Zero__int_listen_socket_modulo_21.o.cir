!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:21)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:25)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:26)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:30)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:26)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:30)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:25)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc507 = loc(fused[#loc23, #loc24])
#loc566 = loc(fused[#loc177, #loc178])
#loc623 = loc(fused[#loc326, #loc327])
#loc680 = loc(fused[#loc473, #loc474])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc496)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc497)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc498)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc499)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc500)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc501)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc502)
  cir.func private @close(!s32i) -> !s32i loc(#loc503)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc504)
  cir.func private @printIntLine(!s32i) loc(#loc505)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc23, #loc24])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc507)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc25)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc504)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc28)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc30)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc510)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc32)
      } loc(#loc509)
    } loc(#loc508)
    cir.return loc(#loc22)
  } loc(#loc506)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc512)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc38)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc513)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc515)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc516)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc517)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc518)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc519)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc47)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc517)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc49)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc518)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc56)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc58)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc59)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc522)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc65)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc65)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc524)
              cir.if %63 {
                cir.break loc(#loc67)
              } loc(#loc525)
            } loc(#loc523)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc526)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc70)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc527)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc528)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc75)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc75)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc529)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc78)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc78)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc530)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc82)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc82)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc83)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc531)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc533)
              %62 = cir.const #cir.int<16> : !u64i loc(#loc534)
              %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc534)
              %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc94)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc95)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc535)
              cir.if %67 {
                cir.break loc(#loc97)
              } loc(#loc536)
            } loc(#loc532)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %61 = cir.const #cir.int<5> : !s32i loc(#loc101)
              %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc102)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc103)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc103)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc538)
              cir.if %65 {
                cir.break loc(#loc105)
              } loc(#loc539)
            } loc(#loc537)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc107)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc108)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc109)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc540)
            cir.scope {
              %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc115)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc542)
              cir.if %63 {
                cir.break loc(#loc117)
              } loc(#loc543)
            } loc(#loc541)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc119)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc120)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc120)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc120)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc120)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc120)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc120)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc120)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc121)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc121)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc544)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc123)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc123)
            cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc545)
            cir.scope {
              %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc128)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc129)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc129)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc547)
              %64 = cir.ternary(%63, true {
                %65 = cir.const #true loc(#loc130)
                cir.yield %65 : !cir.bool loc(#loc130)
              }, false {
                %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc131)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc132)
                %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc548)
                %68 = cir.ternary(%67, true {
                  %69 = cir.const #true loc(#loc130)
                  cir.yield %69 : !cir.bool loc(#loc130)
                }, false {
                  %69 = cir.const #false loc(#loc130)
                  cir.yield %69 : !cir.bool loc(#loc130)
                }) : (!cir.bool) -> !cir.bool loc(#loc130)
                cir.yield %68 : !cir.bool loc(#loc130)
              }) : (!cir.bool) -> !cir.bool loc(#loc130)
              cir.if %64 {
                cir.break loc(#loc134)
              } loc(#loc549)
            } loc(#loc546)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc135)
            %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc135)
            %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
            %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc137)
            cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc550)
            %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc138)
            %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc139)
            cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc551)
          } loc(#loc521)
          cir.yield loc(#loc53)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc142)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc142)
          cir.condition(%16) loc(#loc142)
        } loc(#loc520)
      } loc(#loc520)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc146)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc553)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc149)
        } loc(#loc554)
      } loc(#loc552)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc152)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc153)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc556)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc156)
        } loc(#loc557)
      } loc(#loc555)
    } loc(#loc514)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc504)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc558)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc160)
    cir.return loc(#loc34)
  } loc(#loc511)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc560)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc163)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc561)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc165)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc562)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc167)
    cir.return loc(#loc162)
  } loc(#loc559)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc563)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc564)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc174)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc177, #loc178])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc566)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc563)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc182)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc182)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc186)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc190)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc570)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc194)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc195)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc572)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc196)
          } else {
            %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc174)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc174)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc197)
          } loc(#loc571)
        } loc(#loc569)
      } loc(#loc568)
    } loc(#loc567)
    cir.return loc(#loc176)
  } loc(#loc565)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc574)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc203)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc575)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc577)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc578)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc579)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc580)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc581)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc212)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc212)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc579)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc214)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc214)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc580)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc221)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc222)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc223)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc224)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc584)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc229)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc230)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc230)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc586)
              cir.if %63 {
                cir.break loc(#loc232)
              } loc(#loc587)
            } loc(#loc585)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc588)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc235)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc589)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc590)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc240)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc240)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc591)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc242)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc242)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc592)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc244)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc244)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc245)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc593)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc250)
              %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc595)
              %62 = cir.const #cir.int<16> : !u64i loc(#loc596)
              %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc596)
              %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc255)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc256)
              %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc256)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc597)
              cir.if %67 {
                cir.break loc(#loc258)
              } loc(#loc598)
            } loc(#loc594)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc261)
              %61 = cir.const #cir.int<5> : !s32i loc(#loc262)
              %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc263)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc264)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc264)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc600)
              cir.if %65 {
                cir.break loc(#loc266)
              } loc(#loc601)
            } loc(#loc599)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc267)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc268)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc269)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc270)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc602)
            cir.scope {
              %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc275)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc276)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc276)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc604)
              cir.if %63 {
                cir.break loc(#loc278)
              } loc(#loc605)
            } loc(#loc603)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc279)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc280)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc280)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc281)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc281)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc281)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc281)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc281)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc281)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc281)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc282)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc282)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc606)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc283)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc284)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc284)
            cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc607)
            cir.scope {
              %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc289)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc290)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc290)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc609)
              %64 = cir.ternary(%63, true {
                %65 = cir.const #true loc(#loc291)
                cir.yield %65 : !cir.bool loc(#loc291)
              }, false {
                %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc293)
                %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc610)
                %68 = cir.ternary(%67, true {
                  %69 = cir.const #true loc(#loc291)
                  cir.yield %69 : !cir.bool loc(#loc291)
                }, false {
                  %69 = cir.const #false loc(#loc291)
                  cir.yield %69 : !cir.bool loc(#loc291)
                }) : (!cir.bool) -> !cir.bool loc(#loc291)
                cir.yield %68 : !cir.bool loc(#loc291)
              }) : (!cir.bool) -> !cir.bool loc(#loc291)
              cir.if %64 {
                cir.break loc(#loc295)
              } loc(#loc611)
            } loc(#loc608)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc296)
            %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc296)
            %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc297)
            %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc298)
            %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc298)
            cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc612)
            %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc299)
            %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc300)
            cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc613)
          } loc(#loc583)
          cir.yield loc(#loc218)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc303)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc303)
          cir.condition(%16) loc(#loc303)
        } loc(#loc582)
      } loc(#loc582)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc306)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc307)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc307)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc615)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc309)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc310)
        } loc(#loc616)
      } loc(#loc614)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc313)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc314)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc314)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc618)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc316)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc317)
        } loc(#loc619)
      } loc(#loc617)
    } loc(#loc576)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc318)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc563)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc620)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc320)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc321)
    cir.return loc(#loc199)
  } loc(#loc573)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc621)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc326, #loc327])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc623)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc328)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc621)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc331)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc331)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc335)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc336)
          %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc627)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc340)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc341)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc629)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc342)
          } else {
            %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc343)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc343)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc344)
          } loc(#loc628)
        } loc(#loc626)
      } loc(#loc625)
    } loc(#loc624)
    cir.return loc(#loc325)
  } loc(#loc622)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc631)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc349)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc350)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc632)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc634)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc635)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc636)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc637)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc638)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc359)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc359)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc636)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc361)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc361)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc637)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc368)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc369)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc370)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc371)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc641)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc376)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc377)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc377)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc643)
              cir.if %63 {
                cir.break loc(#loc379)
              } loc(#loc644)
            } loc(#loc642)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc645)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc382)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc646)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc647)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc387)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc387)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc648)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc389)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc389)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc79)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc80)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc649)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc391)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc391)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc392)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc84)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc650)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc397)
              %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc652)
              %62 = cir.const #cir.int<16> : !u64i loc(#loc653)
              %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc653)
              %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc402)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc403)
              %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc403)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc654)
              cir.if %67 {
                cir.break loc(#loc405)
              } loc(#loc655)
            } loc(#loc651)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc408)
              %61 = cir.const #cir.int<5> : !s32i loc(#loc409)
              %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc410)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc411)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc411)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc657)
              cir.if %65 {
                cir.break loc(#loc413)
              } loc(#loc658)
            } loc(#loc656)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc414)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc415)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc416)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc417)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc659)
            cir.scope {
              %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc422)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc423)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc423)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc661)
              cir.if %63 {
                cir.break loc(#loc425)
              } loc(#loc662)
            } loc(#loc660)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc426)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc427)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc427)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc428)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc428)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc428)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc428)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc428)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc428)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc428)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc429)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc429)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc663)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc430)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc431)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc431)
            cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc664)
            cir.scope {
              %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc436)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc437)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc437)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc666)
              %64 = cir.ternary(%63, true {
                %65 = cir.const #true loc(#loc438)
                cir.yield %65 : !cir.bool loc(#loc438)
              }, false {
                %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc439)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc440)
                %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc667)
                %68 = cir.ternary(%67, true {
                  %69 = cir.const #true loc(#loc438)
                  cir.yield %69 : !cir.bool loc(#loc438)
                }, false {
                  %69 = cir.const #false loc(#loc438)
                  cir.yield %69 : !cir.bool loc(#loc438)
                }) : (!cir.bool) -> !cir.bool loc(#loc438)
                cir.yield %68 : !cir.bool loc(#loc438)
              }) : (!cir.bool) -> !cir.bool loc(#loc438)
              cir.if %64 {
                cir.break loc(#loc442)
              } loc(#loc668)
            } loc(#loc665)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc443)
            %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc443)
            %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc444)
            %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc445)
            %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc445)
            cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc669)
            %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc446)
            %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc447)
            cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc670)
          } loc(#loc640)
          cir.yield loc(#loc365)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc450)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc450)
          cir.condition(%16) loc(#loc450)
        } loc(#loc639)
      } loc(#loc639)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc453)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc454)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc454)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc672)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc456)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc457)
        } loc(#loc673)
      } loc(#loc671)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc460)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc461)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc461)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc675)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc463)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc464)
        } loc(#loc676)
      } loc(#loc674)
    } loc(#loc633)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc465)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc621)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc677)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc467)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc468)
    cir.return loc(#loc346)
  } loc(#loc630)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc678)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc473, #loc474])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc680)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc475)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc678)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc478)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc478)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc480)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc481)
        %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc683)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc482)
      } loc(#loc682)
    } loc(#loc681)
    cir.return loc(#loc472)
  } loc(#loc679)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc685)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc487)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc488)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc686)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc490)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc687)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc492)
    %5 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc678)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc688)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc494)
    cir.call @goodG2BSink(%6) : (!s32i) -> () loc(#loc495)
    cir.return loc(#loc484)
  } loc(#loc684)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":45:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":45:24)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":47:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":54:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":48:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":49:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":53:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":49:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:22)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:28)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":52:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":56:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":132:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":58:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":58:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:13)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:12)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":60:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":61:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":129:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":66:9)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":66:13)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":67:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":67:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":68:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":68:31)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":69:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":69:31)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":70:9)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":70:41)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":71:9)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":114:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":72:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":113:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:35)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:44)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:57)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:28)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:13)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":81:68)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:13)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":85:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":82:33)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":83:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":84:17)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:20)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:21)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:30)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:33)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:47)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":86:48)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":87:34)
#loc76 = loc("/usr/include/netinet/in.h":249:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":87:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":88:39)
#loc79 = loc("/usr/include/netinet/in.h":251:20)
#loc80 = loc("/usr/include/netinet/in.h":33:15)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":88:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:38)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:32)
#loc84 = loc("/usr/include/netinet/in.h":250:15)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":89:46)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:13)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":93:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:22)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:54)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:55)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:64)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:78)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":90:84)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":91:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":92:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":97:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:24)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:38)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":94:57)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":95:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":96:17)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:35)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:49)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:55)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:28)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":98:59)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":102:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":99:33)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":100:13)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":101:17)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:31)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:45)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:58)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:76)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:79)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:26)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":104:80)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":108:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:31)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:44)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:47)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":105:61)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":106:13)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":107:17)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:39)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:25)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":110:13)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:25)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:20)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:13)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":112:36)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":114:16)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":118:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":115:29)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":116:9)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":117:26)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":117:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":122:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":119:29)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":120:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":121:26)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":121:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":130:17)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":130:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":131:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":131:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":359:1)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":364:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":361:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":361:14)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":362:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":362:14)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":363:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":363:13)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":139:1)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":139:29)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc172 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":149:19)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":160:23)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":144:1)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":163:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":145:1)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":146:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":162:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":146:8)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":147:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":150:5)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":152:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":149:9)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:9)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":161:9)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:13)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":154:21)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":155:9)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":157:9)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":159:9)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:26)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:32)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":156:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":160:13)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":165:1)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":241:1)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":167:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":167:9)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:13)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:12)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":169:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":170:5)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":238:5)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":175:9)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":175:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":176:9)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":176:28)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":177:9)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":177:31)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":178:9)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":178:31)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":179:9)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":179:41)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":180:9)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":223:17)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":181:9)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":222:9)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:35)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:44)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:57)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:28)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:13)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":190:68)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:13)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":194:13)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":191:33)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":192:13)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":193:17)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:20)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:21)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:30)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:33)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:47)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:13)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":195:48)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":196:34)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":196:13)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":197:39)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":197:13)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:38)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:32)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:13)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":198:46)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":202:13)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:22)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:54)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:55)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:64)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:78)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":199:84)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":200:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":201:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:13)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":206:13)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:24)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:38)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":203:57)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":204:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":205:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:35)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:49)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:55)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:28)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:13)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":207:59)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":211:13)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":208:33)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":209:13)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":210:17)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:31)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:45)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:58)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:76)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:79)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:26)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:13)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":213:80)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:13)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":217:13)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:17)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:31)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:44)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:47)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":214:61)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":215:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":216:17)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:39)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:25)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":219:13)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:25)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:20)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":221:36)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":223:16)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:9)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":227:9)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:13)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":224:29)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":225:9)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":226:26)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":226:13)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":231:9)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:13)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":228:29)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":229:9)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":230:26)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":230:13)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":239:22)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":239:5)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":240:18)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":240:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":140:1)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":140:29)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":244:1)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":258:1)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":245:1)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":246:5)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":257:5)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":246:8)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":247:5)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:9)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":256:9)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:13)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":249:21)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":250:9)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":252:9)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":254:9)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:26)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:32)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":251:13)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":255:23)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":255:13)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":260:1)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":336:1)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":262:5)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":262:9)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:13)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:12)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":264:5)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":265:5)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":333:5)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":270:9)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":270:13)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":271:9)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":271:28)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":272:9)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":272:31)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":273:9)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":273:31)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":274:9)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":274:41)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":275:9)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":318:17)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":276:9)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":317:9)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:35)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:44)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:57)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:28)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:13)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":285:68)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:13)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":289:13)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:17)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":286:33)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":287:13)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":288:17)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:20)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:21)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:30)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:33)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:47)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:13)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":290:48)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":291:34)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":291:13)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":292:39)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":292:13)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:38)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:32)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:13)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":293:46)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:13)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":297:13)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:22)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:54)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:55)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:64)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:78)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:17)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":294:84)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":295:13)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":296:17)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:13)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":301:13)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:24)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:38)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:17)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":298:57)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":299:13)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":300:17)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:35)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:49)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:55)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:28)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:13)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":302:59)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:13)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":306:13)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:17)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":303:33)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":304:13)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":305:17)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:31)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:45)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:58)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:76)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:79)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:26)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:13)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":308:80)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:13)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":312:13)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:17)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:31)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:44)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:47)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":309:61)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":310:13)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":311:17)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:39)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:25)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":314:13)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:25)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:20)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:13)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":316:36)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":318:16)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:9)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":322:9)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:13)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":319:29)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":320:9)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":321:26)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":321:13)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":326:9)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:13)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":323:29)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":324:9)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":325:26)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":325:13)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":334:22)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":334:5)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":335:18)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":335:5)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":141:1)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":141:28)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":339:1)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":346:1)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":340:1)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":341:5)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":345:5)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":341:8)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":342:5)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:22)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:28)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":344:9)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":348:1)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":357:1)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":350:5)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":350:9)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:13)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:12)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":352:5)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":354:12)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":354:5)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":355:21)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":355:5)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":356:17)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_21.c":356:5)
#loc496 = loc(fused[#loc1, #loc2])
#loc497 = loc(fused[#loc3, #loc4])
#loc498 = loc(fused[#loc5, #loc6])
#loc499 = loc(fused[#loc7, #loc8])
#loc500 = loc(fused[#loc9, #loc10])
#loc501 = loc(fused[#loc11, #loc12])
#loc502 = loc(fused[#loc13, #loc14])
#loc503 = loc(fused[#loc15, #loc16])
#loc504 = loc(fused[#loc17, #loc18])
#loc505 = loc(fused[#loc19, #loc20])
#loc506 = loc(fused[#loc21, #loc22])
#loc508 = loc(fused[#loc26, #loc27])
#loc509 = loc(fused[#loc29, #loc27])
#loc510 = loc(fused[#loc30, #loc31])
#loc511 = loc(fused[#loc33, #loc34])
#loc512 = loc(fused[#loc35, #loc36])
#loc513 = loc(fused[#loc39, #loc37])
#loc514 = loc(fused[#loc40, #loc41])
#loc515 = loc(fused[#loc42, #loc43])
#loc516 = loc(fused[#loc44, #loc45])
#loc517 = loc(fused[#loc46, #loc47])
#loc518 = loc(fused[#loc48, #loc49])
#loc519 = loc(fused[#loc50, #loc51])
#loc520 = loc(fused[#loc52, #loc53])
#loc521 = loc(fused[#loc54, #loc55])
#loc522 = loc(fused[#loc60, #loc61])
#loc523 = loc(fused[#loc62, #loc63])
#loc524 = loc(fused[#loc64, #loc65])
#loc525 = loc(fused[#loc66, #loc63])
#loc526 = loc(fused[#loc68, #loc69])
#loc527 = loc(fused[#loc71, #loc72])
#loc528 = loc(fused[#loc73, #loc74])
#loc529 = loc(fused[#loc77, #loc75])
#loc530 = loc(fused[#loc81, #loc78])
#loc531 = loc(fused[#loc85, #loc86])
#loc532 = loc(fused[#loc87, #loc88])
#loc533 = loc(fused[#loc90, #loc91])
#loc534 = loc(fused[#loc92, #loc93])
#loc535 = loc(fused[#loc94, #loc95])
#loc536 = loc(fused[#loc96, #loc88])
#loc537 = loc(fused[#loc98, #loc99])
#loc538 = loc(fused[#loc102, #loc103])
#loc539 = loc(fused[#loc104, #loc99])
#loc540 = loc(fused[#loc110, #loc111])
#loc541 = loc(fused[#loc112, #loc113])
#loc542 = loc(fused[#loc114, #loc115])
#loc543 = loc(fused[#loc116, #loc113])
#loc544 = loc(fused[#loc120, #loc121])
#loc545 = loc(fused[#loc124, #loc125])
#loc546 = loc(fused[#loc126, #loc127])
#loc547 = loc(fused[#loc128, #loc129])
#loc548 = loc(fused[#loc131, #loc132])
#loc549 = loc(fused[#loc133, #loc127])
#loc550 = loc(fused[#loc137, #loc135])
#loc551 = loc(fused[#loc140, #loc141])
#loc552 = loc(fused[#loc143, #loc144])
#loc553 = loc(fused[#loc145, #loc146])
#loc554 = loc(fused[#loc147, #loc144])
#loc555 = loc(fused[#loc150, #loc151])
#loc556 = loc(fused[#loc152, #loc153])
#loc557 = loc(fused[#loc154, #loc151])
#loc558 = loc(fused[#loc158, #loc157])
#loc559 = loc(fused[#loc161, #loc162])
#loc560 = loc(fused[#loc163, #loc164])
#loc561 = loc(fused[#loc165, #loc166])
#loc562 = loc(fused[#loc167, #loc168])
#loc563 = loc(fused[#loc169, #loc170])
#loc564 = loc(fused[#loc171, #loc172])
#loc565 = loc(fused[#loc175, #loc176])
#loc567 = loc(fused[#loc180, #loc181])
#loc568 = loc(fused[#loc183, #loc184, #loc185, #loc181])
#loc569 = loc(fused[#loc187, #loc188])
#loc570 = loc(fused[#loc189, #loc190])
#loc571 = loc(fused[#loc191, #loc192, #loc193, #loc188])
#loc572 = loc(fused[#loc194, #loc195])
#loc573 = loc(fused[#loc198, #loc199])
#loc574 = loc(fused[#loc200, #loc201])
#loc575 = loc(fused[#loc204, #loc202])
#loc576 = loc(fused[#loc205, #loc206])
#loc577 = loc(fused[#loc207, #loc208])
#loc578 = loc(fused[#loc209, #loc210])
#loc579 = loc(fused[#loc211, #loc212])
#loc580 = loc(fused[#loc213, #loc214])
#loc581 = loc(fused[#loc215, #loc216])
#loc582 = loc(fused[#loc217, #loc218])
#loc583 = loc(fused[#loc219, #loc220])
#loc584 = loc(fused[#loc225, #loc226])
#loc585 = loc(fused[#loc227, #loc228])
#loc586 = loc(fused[#loc229, #loc230])
#loc587 = loc(fused[#loc231, #loc228])
#loc588 = loc(fused[#loc233, #loc234])
#loc589 = loc(fused[#loc236, #loc237])
#loc590 = loc(fused[#loc238, #loc239])
#loc591 = loc(fused[#loc241, #loc240])
#loc592 = loc(fused[#loc243, #loc242])
#loc593 = loc(fused[#loc246, #loc247])
#loc594 = loc(fused[#loc248, #loc249])
#loc595 = loc(fused[#loc251, #loc252])
#loc596 = loc(fused[#loc253, #loc254])
#loc597 = loc(fused[#loc255, #loc256])
#loc598 = loc(fused[#loc257, #loc249])
#loc599 = loc(fused[#loc259, #loc260])
#loc600 = loc(fused[#loc263, #loc264])
#loc601 = loc(fused[#loc265, #loc260])
#loc602 = loc(fused[#loc271, #loc272])
#loc603 = loc(fused[#loc273, #loc274])
#loc604 = loc(fused[#loc275, #loc276])
#loc605 = loc(fused[#loc277, #loc274])
#loc606 = loc(fused[#loc281, #loc282])
#loc607 = loc(fused[#loc285, #loc286])
#loc608 = loc(fused[#loc287, #loc288])
#loc609 = loc(fused[#loc289, #loc290])
#loc610 = loc(fused[#loc292, #loc293])
#loc611 = loc(fused[#loc294, #loc288])
#loc612 = loc(fused[#loc298, #loc296])
#loc613 = loc(fused[#loc301, #loc302])
#loc614 = loc(fused[#loc304, #loc305])
#loc615 = loc(fused[#loc306, #loc307])
#loc616 = loc(fused[#loc308, #loc305])
#loc617 = loc(fused[#loc311, #loc312])
#loc618 = loc(fused[#loc313, #loc314])
#loc619 = loc(fused[#loc315, #loc312])
#loc620 = loc(fused[#loc319, #loc318])
#loc621 = loc(fused[#loc322, #loc323])
#loc622 = loc(fused[#loc324, #loc325])
#loc624 = loc(fused[#loc329, #loc330])
#loc625 = loc(fused[#loc332, #loc330])
#loc626 = loc(fused[#loc333, #loc334])
#loc627 = loc(fused[#loc335, #loc336])
#loc628 = loc(fused[#loc337, #loc338, #loc339, #loc334])
#loc629 = loc(fused[#loc340, #loc341])
#loc630 = loc(fused[#loc345, #loc346])
#loc631 = loc(fused[#loc347, #loc348])
#loc632 = loc(fused[#loc351, #loc349])
#loc633 = loc(fused[#loc352, #loc353])
#loc634 = loc(fused[#loc354, #loc355])
#loc635 = loc(fused[#loc356, #loc357])
#loc636 = loc(fused[#loc358, #loc359])
#loc637 = loc(fused[#loc360, #loc361])
#loc638 = loc(fused[#loc362, #loc363])
#loc639 = loc(fused[#loc364, #loc365])
#loc640 = loc(fused[#loc366, #loc367])
#loc641 = loc(fused[#loc372, #loc373])
#loc642 = loc(fused[#loc374, #loc375])
#loc643 = loc(fused[#loc376, #loc377])
#loc644 = loc(fused[#loc378, #loc375])
#loc645 = loc(fused[#loc380, #loc381])
#loc646 = loc(fused[#loc383, #loc384])
#loc647 = loc(fused[#loc385, #loc386])
#loc648 = loc(fused[#loc388, #loc387])
#loc649 = loc(fused[#loc390, #loc389])
#loc650 = loc(fused[#loc393, #loc394])
#loc651 = loc(fused[#loc395, #loc396])
#loc652 = loc(fused[#loc398, #loc399])
#loc653 = loc(fused[#loc400, #loc401])
#loc654 = loc(fused[#loc402, #loc403])
#loc655 = loc(fused[#loc404, #loc396])
#loc656 = loc(fused[#loc406, #loc407])
#loc657 = loc(fused[#loc410, #loc411])
#loc658 = loc(fused[#loc412, #loc407])
#loc659 = loc(fused[#loc418, #loc419])
#loc660 = loc(fused[#loc420, #loc421])
#loc661 = loc(fused[#loc422, #loc423])
#loc662 = loc(fused[#loc424, #loc421])
#loc663 = loc(fused[#loc428, #loc429])
#loc664 = loc(fused[#loc432, #loc433])
#loc665 = loc(fused[#loc434, #loc435])
#loc666 = loc(fused[#loc436, #loc437])
#loc667 = loc(fused[#loc439, #loc440])
#loc668 = loc(fused[#loc441, #loc435])
#loc669 = loc(fused[#loc445, #loc443])
#loc670 = loc(fused[#loc448, #loc449])
#loc671 = loc(fused[#loc451, #loc452])
#loc672 = loc(fused[#loc453, #loc454])
#loc673 = loc(fused[#loc455, #loc452])
#loc674 = loc(fused[#loc458, #loc459])
#loc675 = loc(fused[#loc460, #loc461])
#loc676 = loc(fused[#loc462, #loc459])
#loc677 = loc(fused[#loc466, #loc465])
#loc678 = loc(fused[#loc469, #loc470])
#loc679 = loc(fused[#loc471, #loc472])
#loc681 = loc(fused[#loc476, #loc477])
#loc682 = loc(fused[#loc479, #loc477])
#loc683 = loc(fused[#loc480, #loc481])
#loc684 = loc(fused[#loc483, #loc484])
#loc685 = loc(fused[#loc485, #loc486])
#loc686 = loc(fused[#loc489, #loc487])
#loc687 = loc(fused[#loc491, #loc490])
#loc688 = loc(fused[#loc493, #loc492])
