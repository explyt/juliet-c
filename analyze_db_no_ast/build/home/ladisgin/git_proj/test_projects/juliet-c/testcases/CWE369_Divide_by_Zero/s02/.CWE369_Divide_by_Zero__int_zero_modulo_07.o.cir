!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private  @printIntLine(!s32i) loc(#loc166)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc15)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc171)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc16)
      cir.if %7 {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc18)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc175)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc24)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc177)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc28)
      } loc(#loc176)
    } loc(#loc174)
    cir.return loc(#loc6)
  } loc(#loc167)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc178)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc48)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc52)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc188)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc54)
      cir.if %7 {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc56)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc187)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc192)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc62)
      cir.if %7 {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %10 = cir.cmp(ne, %8, %9) : !s32i, !s32i loc(#loc195)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc71)
          cir.if %11 {
            %12 = cir.const #cir.int<100> : !s32i loc(#loc75)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc197)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc77)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc42)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc44)
  } loc(#loc184)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc202)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc90)
      cir.if %7 {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc92)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc96)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc206)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc98)
      cir.if %7 {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %9 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %10 = cir.cmp(ne, %8, %9) : !s32i, !s32i loc(#loc209)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc104)
          cir.if %11 {
            %12 = cir.const #cir.int<100> : !s32i loc(#loc108)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc211)
            cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc110)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc111)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc80)
  } loc(#loc198)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc118)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !s32i loc(#loc216)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc124)
      cir.if %7 {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %8 = cir.const #cir.int<7> : !s32i loc(#loc130)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc135)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc220)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc136)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc138)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc222)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc140)
      } loc(#loc221)
    } loc(#loc219)
    cir.return loc(#loc114)
  } loc(#loc212)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc150)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc227)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc152)
      cir.if %7 {
        %8 = cir.const #cir.int<7> : !s32i loc(#loc154)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc158)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc159)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !s32i loc(#loc231)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc160)
      cir.if %7 {
        %8 = cir.const #cir.int<100> : !s32i loc(#loc162)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc233)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc164)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc142)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_07.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":23:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":27:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":42:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":29:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":29:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":31:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":31:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":32:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":36:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":32:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":32:20)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":32:18)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":33:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":35:16)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":35:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":37:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":41:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":37:8)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":37:20)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":37:18)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":38:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":40:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":40:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":40:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":144:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":150:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":146:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":146:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":147:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":147:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":148:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":148:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":149:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":149:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":62:19)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":73:23)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":49:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":76:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":51:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":51:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":53:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":53:12)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":53:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":54:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":58:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":54:8)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":54:20)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":54:18)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":55:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":57:16)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":57:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":59:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":75:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":59:8)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":59:20)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":59:18)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":60:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":63:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":65:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":62:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":67:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":74:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":67:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":67:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":67:18)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":68:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":70:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":72:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":69:26)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":69:32)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":69:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":73:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":79:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":101:1)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":81:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":81:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":83:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":83:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":83:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":84:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":88:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":84:8)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":84:20)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":84:18)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":85:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":87:16)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":87:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":89:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":100:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":89:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":89:20)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":89:18)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":90:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":92:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":99:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":92:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":92:21)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":92:18)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":93:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":95:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":97:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":94:26)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":94:32)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":94:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":98:23)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":98:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":104:1)
#loc114 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":124:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":106:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":106:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":108:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":108:12)
#loc119 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":108:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":109:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":118:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":109:8)
#loc123 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":109:20)
#loc124 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":109:18)
#loc125 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":110:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":113:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":115:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":112:19)
#loc129 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":112:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":117:16)
#loc131 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":117:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":119:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":123:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":119:8)
#loc135 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":119:20)
#loc136 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":119:18)
#loc137 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":120:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":122:22)
#loc139 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":122:28)
#loc140 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":122:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":127:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":142:1)
#loc143 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":129:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":129:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":131:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":131:12)
#loc147 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":131:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":132:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":136:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":132:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":132:20)
#loc152 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":132:18)
#loc153 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":133:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":135:16)
#loc155 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":135:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":137:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":141:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":137:8)
#loc159 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":137:20)
#loc160 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":137:18)
#loc161 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":138:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":140:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":140:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_zero_modulo_07.c":140:9)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc11, #loc9])
#loc170 = loc(fused[#loc12, #loc13])
#loc171 = loc(fused[#loc14, #loc15])
#loc172 = loc(fused[#loc17, #loc13])
#loc173 = loc(fused[#loc19, #loc18])
#loc174 = loc(fused[#loc20, #loc21])
#loc175 = loc(fused[#loc22, #loc23])
#loc176 = loc(fused[#loc25, #loc21])
#loc177 = loc(fused[#loc26, #loc27])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc43, #loc44])
#loc185 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc49, #loc47])
#loc187 = loc(fused[#loc50, #loc51])
#loc188 = loc(fused[#loc52, #loc53])
#loc189 = loc(fused[#loc55, #loc51])
#loc190 = loc(fused[#loc57, #loc56])
#loc191 = loc(fused[#loc58, #loc59])
#loc192 = loc(fused[#loc60, #loc61])
#loc193 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc194 = loc(fused[#loc67, #loc68])
#loc195 = loc(fused[#loc69, #loc70])
#loc196 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc197 = loc(fused[#loc75, #loc76])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc85, #loc83])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc88, #loc89])
#loc203 = loc(fused[#loc91, #loc87])
#loc204 = loc(fused[#loc93, #loc92])
#loc205 = loc(fused[#loc94, #loc95])
#loc206 = loc(fused[#loc96, #loc97])
#loc207 = loc(fused[#loc99, #loc95])
#loc208 = loc(fused[#loc100, #loc101])
#loc209 = loc(fused[#loc102, #loc103])
#loc210 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc211 = loc(fused[#loc108, #loc109])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc119, #loc117])
#loc215 = loc(fused[#loc120, #loc121])
#loc216 = loc(fused[#loc122, #loc123])
#loc217 = loc(fused[#loc125, #loc126, #loc127, #loc121])
#loc218 = loc(fused[#loc131, #loc130])
#loc219 = loc(fused[#loc132, #loc133])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc137, #loc133])
#loc222 = loc(fused[#loc138, #loc139])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc143, #loc144])
#loc225 = loc(fused[#loc147, #loc145])
#loc226 = loc(fused[#loc148, #loc149])
#loc227 = loc(fused[#loc150, #loc151])
#loc228 = loc(fused[#loc153, #loc149])
#loc229 = loc(fused[#loc155, #loc154])
#loc230 = loc(fused[#loc156, #loc157])
#loc231 = loc(fused[#loc158, #loc159])
#loc232 = loc(fused[#loc161, #loc157])
#loc233 = loc(fused[#loc162, #loc163])
