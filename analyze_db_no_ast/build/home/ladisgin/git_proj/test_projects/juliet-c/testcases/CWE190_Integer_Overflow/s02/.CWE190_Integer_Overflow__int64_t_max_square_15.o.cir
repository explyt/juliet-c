!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private  @printLongLongLine(!s64i) loc(#loc186)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc10)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc189)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc15)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc191)
        cir.break loc(#loc17)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc18)
        cir.break loc(#loc19)
      }
      ] loc(#loc12)
    } loc(#loc190)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc22)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc194)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc27)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc194)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc29)
        } loc(#loc193)
        cir.break loc(#loc30)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        cir.break loc(#loc33)
      }
      ] loc(#loc20)
    } loc(#loc192)
    cir.return loc(#loc7)
  } loc(#loc187)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_max_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc197)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc198)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc195)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc200)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc52)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc56)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc57)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc205)
        cir.break loc(#loc59)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        cir.break loc(#loc62)
      }
      ] loc(#loc54)
    } loc(#loc204)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc65)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc67)
        cir.break loc(#loc68)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
          %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc72)
          %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc72)
          %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc73)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc74)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc74)
          %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc73)
          %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !s32i loc(#loc208)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc76)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc82)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc210)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc83)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc84)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc209)
        } loc(#loc207)
        cir.break loc(#loc86)
      }
      ] loc(#loc63)
    } loc(#loc206)
    cir.return loc(#loc49)
  } loc(#loc201)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc91)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc95)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc96)
        cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc215)
        cir.break loc(#loc98)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc99)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc99)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc100)
        cir.break loc(#loc101)
      }
      ] loc(#loc93)
    } loc(#loc214)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc104)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc107)
          %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc108)
          %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc108)
          %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc109)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc110)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc110)
          %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc109)
          %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !s32i loc(#loc218)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc112)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc220)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc118)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc117)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc118)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc220)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc119)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc120)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc121)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc121)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc219)
        } loc(#loc217)
        cir.break loc(#loc123)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        cir.break loc(#loc126)
      }
      ] loc(#loc102)
    } loc(#loc216)
    cir.return loc(#loc88)
  } loc(#loc211)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc131)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc223)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc135)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc137)
        cir.break loc(#loc138)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc139)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc139)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc225)
        cir.break loc(#loc141)
      }
      ] loc(#loc133)
    } loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc144)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc228)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc149)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc148)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc149)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc228)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc150)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc151)
        } loc(#loc227)
        cir.break loc(#loc152)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc154)
        cir.break loc(#loc155)
      }
      ] loc(#loc142)
    } loc(#loc226)
    cir.return loc(#loc128)
  } loc(#loc221)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc160)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc164)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc165)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc165)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc233)
        cir.break loc(#loc167)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc169)
        cir.break loc(#loc170)
      }
      ] loc(#loc162)
    } loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc173)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc236)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc178)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc177)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc178)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc236)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc179)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc180)
        } loc(#loc235)
        cir.break loc(#loc181)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc183)
        cir.break loc(#loc184)
      }
      ] loc(#loc171)
    } loc(#loc234)
    cir.return loc(#loc157)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":37:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":25:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":54:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":27:13)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":28:12)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":39:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":29:12)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":33:16)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":33:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":34:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":37:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":38:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":40:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":53:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":40:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":43:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":47:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:33)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:26)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":46:27)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":46:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":48:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":51:19)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":51:9)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":52:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":198:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":204:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":200:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":200:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":201:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":201:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":202:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":202:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":203:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":203:14)
#loc44 = loc("/usr/include/inttypes.h":351:1)
#loc45 = loc("/usr/include/inttypes.h":351:74)
#loc46 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":91:23)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":61:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":95:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":63:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":63:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":64:12)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":64:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":65:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":75:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":65:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":69:16)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":69:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":70:9)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":73:19)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":73:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":74:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":76:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":94:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":76:12)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":80:19)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":80:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":81:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":92:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:31)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:13)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:40)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:46)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:55)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:37)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":85:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":88:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":90:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:30)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":87:31)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":87:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":91:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":93:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":98:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":132:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":100:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":100:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":101:12)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":101:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":102:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":112:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":102:12)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":106:16)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":106:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":107:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":110:19)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":110:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":111:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":113:5)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":131:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":113:12)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":125:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:31)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:13)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:40)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:46)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:55)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:37)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":118:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":121:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":123:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:13)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:37)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:30)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":120:31)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":120:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":124:23)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":124:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":126:9)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":129:19)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":129:9)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":130:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":135:1)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":164:1)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":137:5)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":137:13)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":138:12)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":138:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":139:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":149:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":139:12)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":143:19)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":143:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":144:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":147:16)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":147:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":148:9)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":150:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":163:5)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":150:12)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":153:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":157:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:33)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:26)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":156:27)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":156:9)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":158:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":161:19)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":161:9)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":162:9)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":167:1)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":196:1)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":169:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":169:13)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":170:12)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":170:5)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":171:5)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":181:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":171:12)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":175:16)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":175:9)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":176:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":179:19)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":179:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":180:9)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":182:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":195:5)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":182:12)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":185:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":189:5)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:9)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:33)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:26)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":188:27)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":188:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":190:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":193:19)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":193:9)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":194:9)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc4, #loc5])
#loc187 = loc(fused[#loc6, #loc7])
#loc188 = loc(fused[#loc8, #loc9])
#loc189 = loc(fused[#loc11, #loc10])
#loc190 = loc(fused[#loc12, #loc13])
#loc191 = loc(fused[#loc16, #loc15])
#loc192 = loc(fused[#loc20, #loc21])
#loc193 = loc(fused[#loc23, #loc24])
#loc194 = loc(fused[#loc25, #loc26])
#loc195 = loc(fused[#loc34, #loc35])
#loc196 = loc(fused[#loc36, #loc37])
#loc197 = loc(fused[#loc38, #loc39])
#loc198 = loc(fused[#loc40, #loc41])
#loc199 = loc(fused[#loc42, #loc43])
#loc200 = loc(fused[#loc44, #loc45])
#loc201 = loc(fused[#loc48, #loc49])
#loc202 = loc(fused[#loc50, #loc51])
#loc203 = loc(fused[#loc53, #loc52])
#loc204 = loc(fused[#loc54, #loc55])
#loc205 = loc(fused[#loc58, #loc57])
#loc206 = loc(fused[#loc63, #loc64])
#loc207 = loc(fused[#loc69, #loc70])
#loc208 = loc(fused[#loc72, #loc75])
#loc209 = loc(fused[#loc77, #loc78, #loc79, #loc70])
#loc210 = loc(fused[#loc80, #loc81])
#loc211 = loc(fused[#loc87, #loc88])
#loc212 = loc(fused[#loc89, #loc90])
#loc213 = loc(fused[#loc92, #loc91])
#loc214 = loc(fused[#loc93, #loc94])
#loc215 = loc(fused[#loc97, #loc96])
#loc216 = loc(fused[#loc102, #loc103])
#loc217 = loc(fused[#loc105, #loc106])
#loc218 = loc(fused[#loc108, #loc111])
#loc219 = loc(fused[#loc113, #loc114, #loc115, #loc106])
#loc220 = loc(fused[#loc116, #loc117])
#loc221 = loc(fused[#loc127, #loc128])
#loc222 = loc(fused[#loc129, #loc130])
#loc223 = loc(fused[#loc132, #loc131])
#loc224 = loc(fused[#loc133, #loc134])
#loc225 = loc(fused[#loc140, #loc139])
#loc226 = loc(fused[#loc142, #loc143])
#loc227 = loc(fused[#loc145, #loc146])
#loc228 = loc(fused[#loc147, #loc148])
#loc229 = loc(fused[#loc156, #loc157])
#loc230 = loc(fused[#loc158, #loc159])
#loc231 = loc(fused[#loc161, #loc160])
#loc232 = loc(fused[#loc162, #loc163])
#loc233 = loc(fused[#loc166, #loc165])
#loc234 = loc(fused[#loc171, #loc172])
#loc235 = loc(fused[#loc174, #loc175])
#loc236 = loc(fused[#loc176, #loc177])
