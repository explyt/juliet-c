!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc211)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc212)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc213)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc214)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc15)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc20)
        cir.break loc(#loc22)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc23)
        cir.break loc(#loc24)
      }
      ] loc(#loc17)
    } loc(#loc218)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc27)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc31)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !s32i loc(#loc221)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc32)
          cir.if %8 {
            %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
            %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc36)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc35)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc35)
            %13 = cir.binop(mul, %10, %12) : !u32i loc(#loc224)
            cir.store %13, %9 : !u32i, !cir.ptr<!u32i> loc(#loc223)
            %14 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc37)
            cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc38)
          } loc(#loc222)
        } loc(#loc220)
        cir.break loc(#loc39)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc41)
        cir.break loc(#loc42)
      }
      ] loc(#loc25)
    } loc(#loc219)
    cir.return loc(#loc12)
  } loc(#loc215)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc44)
  } loc(#loc225)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc58)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc232)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc62)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc63)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc64)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc65)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc65)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc63)
        cir.break loc(#loc66)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc68)
        cir.break loc(#loc69)
      }
      ] loc(#loc60)
    } loc(#loc233)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc72)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        cir.break loc(#loc75)
      },
      case (default) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc78)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc79)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !s32i loc(#loc236)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc80)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc84)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
              %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc85)
              %12 = cir.const #cir.int<2> : !u32i loc(#loc85)
              %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc85)
              %14 = cir.const #cir.int<1> : !u32i loc(#loc85)
              %15 = cir.binop(add, %13, %14) : !u32i loc(#loc85)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc86)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc86)
              %18 = cir.binop(div, %15, %17) : !u32i loc(#loc239)
              %19 = cir.cmp(lt, %9, %18) : !u32i, !s32i loc(#loc240)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc88)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc242)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc94)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc93)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc93)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc243)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc242)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc95)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc96)
              } else {
                %21 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc97)
              } loc(#loc241)
            } loc(#loc238)
          } loc(#loc237)
        } loc(#loc235)
        cir.break loc(#loc98)
      }
      ] loc(#loc70)
    } loc(#loc234)
    cir.return loc(#loc55)
  } loc(#loc230)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc103)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc246)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc107)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc108)
        %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc212)
        %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc109)
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc110)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc110)
        %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc108)
        cir.break loc(#loc111)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc112)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc112)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc113)
        cir.break loc(#loc114)
      }
      ] loc(#loc105)
    } loc(#loc247)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc117)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc120)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc121)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !s32i loc(#loc250)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc122)
          cir.if %8 {
            cir.scope {
              %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc126)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc127)
              %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc127)
              %12 = cir.const #cir.int<2> : !u32i loc(#loc127)
              %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc127)
              %14 = cir.const #cir.int<1> : !u32i loc(#loc127)
              %15 = cir.binop(add, %13, %14) : !u32i loc(#loc127)
              %16 = cir.const #cir.int<2> : !s32i loc(#loc128)
              %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc128)
              %18 = cir.binop(div, %15, %17) : !u32i loc(#loc253)
              %19 = cir.cmp(lt, %9, %18) : !u32i, !s32i loc(#loc254)
              %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc130)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc256)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc136)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc135)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc135)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc257)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc256)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc137)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc138)
              } else {
                %21 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc139)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc139)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc140)
              } loc(#loc255)
            } loc(#loc252)
          } loc(#loc251)
        } loc(#loc249)
        cir.break loc(#loc141)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc142)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc142)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc143)
        cir.break loc(#loc144)
      }
      ] loc(#loc115)
    } loc(#loc248)
    cir.return loc(#loc100)
  } loc(#loc244)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc259)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc149)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc149)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc260)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc153)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc154)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc154)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc155)
        cir.break loc(#loc156)
      },
      case (default) {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc157)
        %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc157)
        cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc262)
        cir.break loc(#loc159)
      }
      ] loc(#loc151)
    } loc(#loc261)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc162)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc165)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc166)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc166)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !s32i loc(#loc265)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc167)
          cir.if %8 {
            %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc267)
            %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc171)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc170)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc170)
            %13 = cir.binop(mul, %10, %12) : !u32i loc(#loc268)
            cir.store %13, %9 : !u32i, !cir.ptr<!u32i> loc(#loc267)
            %14 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc172)
            cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc173)
          } loc(#loc266)
        } loc(#loc264)
        cir.break loc(#loc174)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc175)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc175)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc176)
        cir.break loc(#loc177)
      }
      ] loc(#loc160)
    } loc(#loc263)
    cir.return loc(#loc146)
  } loc(#loc258)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc182)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc182)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc271)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc186)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc187)
        %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc187)
        cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc273)
        cir.break loc(#loc189)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        cir.break loc(#loc192)
      }
      ] loc(#loc184)
    } loc(#loc272)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc195)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc198)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc199)
          %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc199)
          %7 = cir.cmp(gt, %4, %6) : !u32i, !s32i loc(#loc276)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc200)
          cir.if %8 {
            %9 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
            %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc204)
            %11 = cir.const #cir.int<2> : !s32i loc(#loc203)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc203)
            %13 = cir.binop(mul, %10, %12) : !u32i loc(#loc279)
            cir.store %13, %9 : !u32i, !cir.ptr<!u32i> loc(#loc278)
            %14 = cir.load %9 : !cir.ptr<!u32i>, !u32i loc(#loc205)
            cir.call @printUnsignedLine(%14) : (!u32i) -> () loc(#loc206)
          } loc(#loc277)
        } loc(#loc275)
        cir.break loc(#loc207)
      },
      case (default) {
        %4 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc208)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc208)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc209)
        cir.break loc(#loc210)
      }
      ] loc(#loc193)
    } loc(#loc274)
    cir.return loc(#loc179)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":30:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":34:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":22:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":52:1)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":24:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":24:18)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":25:12)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":25:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":36:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":26:12)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":30:17)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":31:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":51:5)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":37:12)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":45:9)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":40:12)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":40:19)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":40:17)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":41:9)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":43:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":43:42)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":43:35)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":44:31)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":44:13)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":46:9)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":49:19)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":49:9)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":50:9)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":204:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":210:1)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":206:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":206:14)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":207:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":207:14)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":208:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":208:14)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":209:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":209:14)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":91:27)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":59:1)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":96:1)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":61:18)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":62:12)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":73:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":63:12)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":67:17)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":67:24)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":71:19)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":71:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":72:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":74:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":95:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":74:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":78:19)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":78:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":79:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":81:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":93:9)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":81:12)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":81:19)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":81:17)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":82:9)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:13)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":92:13)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:17)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:25)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:34)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:35)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":84:22)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":85:13)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":88:13)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":90:13)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":86:17)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":86:46)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":86:39)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":87:35)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":87:17)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":91:17)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":94:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":99:1)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":136:1)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":101:5)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":101:18)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":102:12)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":102:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":103:5)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":113:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":103:12)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":107:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":107:17)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":107:24)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":108:9)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":111:19)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":111:9)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":112:9)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":114:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":135:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":114:12)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":117:9)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":129:9)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":117:12)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":117:19)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":117:17)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":118:9)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:13)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":128:13)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:17)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:25)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:34)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:35)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":120:22)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":121:13)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":124:13)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":126:13)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":122:17)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":122:46)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":122:39)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":123:35)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":123:17)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":127:27)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":127:17)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":130:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":133:19)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":133:9)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":134:9)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":139:1)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":169:1)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":141:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":141:18)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":142:12)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":142:5)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":143:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":153:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":143:12)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":147:19)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":147:9)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":148:9)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":151:16)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":151:9)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":152:9)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":154:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":168:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":154:12)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":157:9)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":162:9)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":157:12)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":157:19)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":157:17)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":158:9)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":160:13)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":160:42)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":160:35)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":161:31)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":161:13)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":163:9)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":166:19)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":166:9)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":167:9)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":172:1)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":202:1)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":174:5)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":174:18)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":175:12)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":175:5)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":176:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":186:5)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":176:12)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":180:16)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":180:9)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":181:9)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":184:19)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":184:9)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":185:9)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":187:5)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":201:5)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":187:12)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":190:9)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":195:9)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":190:12)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":190:19)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":190:17)
#loc201 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":191:9)
#loc202 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":193:13)
#loc203 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":193:42)
#loc204 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":193:35)
#loc205 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":194:31)
#loc206 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":194:13)
#loc207 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":196:9)
#loc208 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":199:19)
#loc209 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":199:9)
#loc210 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_multiply_15.c":200:9)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc6, #loc7])
#loc214 = loc(fused[#loc9, #loc10])
#loc215 = loc(fused[#loc11, #loc12])
#loc216 = loc(fused[#loc13, #loc14])
#loc217 = loc(fused[#loc16, #loc15])
#loc218 = loc(fused[#loc17, #loc18])
#loc219 = loc(fused[#loc25, #loc26])
#loc220 = loc(fused[#loc28, #loc29])
#loc221 = loc(fused[#loc30, #loc31])
#loc222 = loc(fused[#loc33, #loc29])
#loc223 = loc(fused[#loc34, #loc35])
#loc224 = loc(fused[#loc36, #loc35])
#loc225 = loc(fused[#loc43, #loc44])
#loc226 = loc(fused[#loc45, #loc46])
#loc227 = loc(fused[#loc47, #loc48])
#loc228 = loc(fused[#loc49, #loc50])
#loc229 = loc(fused[#loc51, #loc52])
#loc230 = loc(fused[#loc54, #loc55])
#loc231 = loc(fused[#loc56, #loc57])
#loc232 = loc(fused[#loc59, #loc58])
#loc233 = loc(fused[#loc60, #loc61])
#loc234 = loc(fused[#loc70, #loc71])
#loc235 = loc(fused[#loc76, #loc77])
#loc236 = loc(fused[#loc78, #loc79])
#loc237 = loc(fused[#loc81, #loc77])
#loc238 = loc(fused[#loc82, #loc83])
#loc239 = loc(fused[#loc85, #loc86])
#loc240 = loc(fused[#loc84, #loc87])
#loc241 = loc(fused[#loc89, #loc90, #loc91, #loc83])
#loc242 = loc(fused[#loc92, #loc93])
#loc243 = loc(fused[#loc94, #loc93])
#loc244 = loc(fused[#loc99, #loc100])
#loc245 = loc(fused[#loc101, #loc102])
#loc246 = loc(fused[#loc104, #loc103])
#loc247 = loc(fused[#loc105, #loc106])
#loc248 = loc(fused[#loc115, #loc116])
#loc249 = loc(fused[#loc118, #loc119])
#loc250 = loc(fused[#loc120, #loc121])
#loc251 = loc(fused[#loc123, #loc119])
#loc252 = loc(fused[#loc124, #loc125])
#loc253 = loc(fused[#loc127, #loc128])
#loc254 = loc(fused[#loc126, #loc129])
#loc255 = loc(fused[#loc131, #loc132, #loc133, #loc125])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc136, #loc135])
#loc258 = loc(fused[#loc145, #loc146])
#loc259 = loc(fused[#loc147, #loc148])
#loc260 = loc(fused[#loc150, #loc149])
#loc261 = loc(fused[#loc151, #loc152])
#loc262 = loc(fused[#loc158, #loc157])
#loc263 = loc(fused[#loc160, #loc161])
#loc264 = loc(fused[#loc163, #loc164])
#loc265 = loc(fused[#loc165, #loc166])
#loc266 = loc(fused[#loc168, #loc164])
#loc267 = loc(fused[#loc169, #loc170])
#loc268 = loc(fused[#loc171, #loc170])
#loc269 = loc(fused[#loc178, #loc179])
#loc270 = loc(fused[#loc180, #loc181])
#loc271 = loc(fused[#loc183, #loc182])
#loc272 = loc(fused[#loc184, #loc185])
#loc273 = loc(fused[#loc188, #loc187])
#loc274 = loc(fused[#loc193, #loc194])
#loc275 = loc(fused[#loc196, #loc197])
#loc276 = loc(fused[#loc198, #loc199])
#loc277 = loc(fused[#loc201, #loc197])
#loc278 = loc(fused[#loc202, #loc203])
#loc279 = loc(fused[#loc204, #loc203])
