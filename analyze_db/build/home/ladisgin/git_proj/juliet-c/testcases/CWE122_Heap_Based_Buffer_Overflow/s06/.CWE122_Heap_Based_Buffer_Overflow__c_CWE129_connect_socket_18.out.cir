!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":290:10)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":290:14)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":290:20)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":290:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc526 = loc(fused[#loc199, #loc200])
#loc527 = loc(fused[#loc201, #loc202])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc449)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc450)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc451)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc452)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc453)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc454)
  cir.func private @close(!s32i) -> !s32i loc(#loc455)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc456)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc457)
  cir.func private @printIntLine(!s32i) loc(#loc458)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc459)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc24)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc460)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc462)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc463)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc464)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc465)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc466)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc467)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc468)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc44)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc469)
    cir.goto "source" loc(#loc470)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc48)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc36)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc465)
    cir.scope {
      cir.do {
        %21 = cir.const #cir.int<2> : !s32i loc(#loc51)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %23 = cir.const #cir.int<6> : !s32i loc(#loc53)
        %24 = cir.call @socket(%21, %22, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
        cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc472)
        cir.scope {
          %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc59)
          %64 = cir.const #cir.int<1> : !s32i loc(#loc60)
          %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc60)
          %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc474)
          cir.if %66 {
            cir.break loc(#loc62)
          } loc(#loc475)
        } loc(#loc473)
        %25 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc476)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc65)
        %27 = cir.const #cir.int<16> : !u64i loc(#loc477)
        cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc478)
        %28 = cir.const #cir.int<2> : !s32i loc(#loc70)
        %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc70)
        %30 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
        cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc479)
        %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
        %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
        %33 = cir.call @inet_addr(%32) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc73)
        %34 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
        %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
        cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc480)
        %36 = cir.const #cir.int<27015> : !s32i loc(#loc78)
        %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc78)
        %38 = cir.call @htons(%37) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
        %39 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
        cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc481)
        cir.scope {
          %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc85)
          %64 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc483)
          %65 = cir.const #cir.int<16> : !u64i loc(#loc484)
          %66 = cir.cast(integral, %65 : !u64i), !u32i loc(#loc484)
          %67 = cir.call @connect(%63, %64, %66) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc90)
          %68 = cir.const #cir.int<1> : !s32i loc(#loc91)
          %69 = cir.unary(minus, %68) : !s32i, !s32i loc(#loc91)
          %70 = cir.cmp(eq, %67, %69) : !s32i, !cir.bool loc(#loc485)
          cir.if %70 {
            cir.break loc(#loc93)
          } loc(#loc486)
        } loc(#loc482)
        %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc94)
        %41 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc95)
        %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc95)
        %43 = cir.const #cir.int<3> : !s32i loc(#loc96)
        %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc96)
        %45 = cir.const #cir.int<4> : !u64i loc(#loc96)
        %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc96)
        %47 = cir.const #cir.int<2> : !s32i loc(#loc96)
        %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc96)
        %49 = cir.binop(add, %46, %48) : !u64i loc(#loc96)
        %50 = cir.const #cir.int<1> : !s32i loc(#loc97)
        %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc97)
        %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc487)
        %53 = cir.const #cir.int<0> : !s32i loc(#loc98)
        %54 = cir.call @recv(%40, %42, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc99)
        %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc99)
        cir.store %55, %1 : !s32i, !cir.ptr<!s32i> loc(#loc488)
        cir.scope {
          %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
          %64 = cir.const #cir.int<1> : !s32i loc(#loc105)
          %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc105)
          %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc490)
          %67 = cir.ternary(%66, true {
            %68 = cir.const #true loc(#loc106)
            cir.yield %68 : !cir.bool loc(#loc106)
          }, false {
            %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %69 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %70 = cir.cmp(eq, %68, %69) : !s32i, !cir.bool loc(#loc491)
            %71 = cir.ternary(%70, true {
              %72 = cir.const #true loc(#loc106)
              cir.yield %72 : !cir.bool loc(#loc106)
            }, false {
              %72 = cir.const #false loc(#loc106)
              cir.yield %72 : !cir.bool loc(#loc106)
            }) : (!cir.bool) -> !cir.bool loc(#loc106)
            cir.yield %71 : !cir.bool loc(#loc106)
          }) : (!cir.bool) -> !cir.bool loc(#loc106)
          cir.if %67 {
            cir.break loc(#loc110)
          } loc(#loc492)
        } loc(#loc489)
        %56 = cir.const #cir.int<0> : !s32i loc(#loc111)
        %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc111)
        %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc112)
        %59 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
        %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc113)
        cir.store %57, %60 : !s8i, !cir.ptr<!s8i> loc(#loc493)
        %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc114)
        %62 = cir.call @atoi(%61) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc115)
        cir.store %62, %0 : !s32i, !cir.ptr<!s32i> loc(#loc494)
        cir.yield loc(#loc50)
      } while {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc118)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc118)
        cir.condition(%22) loc(#loc118)
      } loc(#loc471)
    } loc(#loc471)
    cir.scope {
      %21 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc121)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc122)
      %24 = cir.cmp(ne, %21, %23) : !s32i, !cir.bool loc(#loc496)
      cir.if %24 {
        %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        %26 = cir.call @close(%25) : (!s32i) -> !s32i loc(#loc125)
      } loc(#loc497)
    } loc(#loc495)
    cir.goto "sink" loc(#loc498)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc128)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc129)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc130)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc130)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc499)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc500)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc501)
    cir.store %17, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc468)
    cir.scope {
      %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc503)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc138)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc140)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc138)
      } loc(#loc504)
    } loc(#loc502)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc143)
      cir.store %21, %5 : !s32i, !cir.ptr<!s32i> loc(#loc506)
      cir.for : cond {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc146)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc507)
        cir.condition(%24) loc(#loc147)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc149)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
          %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc152)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc509)
        } loc(#loc508)
        cir.yield loc(#loc142)
      } step {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc154)
        cir.store %23, %5 : !s32i, !cir.ptr<!s32i> loc(#loc510)
        cir.yield loc(#loc505)
      } loc(#loc505)
    } loc(#loc505)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc158)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc512)
      cir.if %23 {
        %24 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %25 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
        %26 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
        %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc165)
        cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc514)
        cir.scope {
          %28 = cir.const #cir.int<0> : !s32i loc(#loc168)
          cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc516)
          cir.for : cond {
            %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc170)
            %30 = cir.const #cir.int<10> : !s32i loc(#loc171)
            %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc517)
            cir.condition(%31) loc(#loc172)
          } body {
            cir.scope {
              %29 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
              %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc176)
              %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc174)
              cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc177)
            } loc(#loc518)
            cir.yield loc(#loc167)
          } step {
            %29 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc178)
            %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc179)
            cir.store %30, %5 : !s32i, !cir.ptr<!s32i> loc(#loc519)
            cir.yield loc(#loc515)
          } loc(#loc515)
        } loc(#loc515)
      } else {
        %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc24)
        %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc24)
        cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc180)
      } loc(#loc513)
    } loc(#loc511)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc181)
    %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc182)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc181)
    cir.return loc(#loc28)
  } loc(#loc461)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc521)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc185)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc522)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc187)
    cir.return loc(#loc184)
  } loc(#loc520)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc523)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc524)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc196)
  cir.func @main(%arg0: !s32i loc(fused[#loc199, #loc200]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc201, #loc202])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc526)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc527)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc198)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc203)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc204)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc205)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc205)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc206)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc193)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc528)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_good() : () -> () loc(#loc208)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc194)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc194)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc210)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc195)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc195)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc211)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc529)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18_bad() : () -> () loc(#loc212)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc196)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc196)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc215)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc530)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc530)
    cir.return %17 : !s32i loc(#loc530)
  } loc(#loc525)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc217)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc532)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc533)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc534)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc535)
    %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc536)
    %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc537)
    %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc538)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc234)
    %8 = cir.unary(minus, %7) : !s32i, !s32i loc(#loc235)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc539)
    cir.goto "source" loc(#loc540)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc239)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc227)
    cir.store %10, %3 : !s32i, !cir.ptr<!s32i> loc(#loc535)
    cir.scope {
      cir.do {
        %21 = cir.const #cir.int<2> : !s32i loc(#loc242)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc243)
        %23 = cir.const #cir.int<6> : !s32i loc(#loc244)
        %24 = cir.call @socket(%21, %22, %23) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc245)
        cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc542)
        cir.scope {
          %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc250)
          %64 = cir.const #cir.int<1> : !s32i loc(#loc251)
          %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc251)
          %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc544)
          cir.if %66 {
            cir.break loc(#loc253)
          } loc(#loc545)
        } loc(#loc543)
        %25 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc546)
        %26 = cir.const #cir.int<0> : !s32i loc(#loc256)
        %27 = cir.const #cir.int<16> : !u64i loc(#loc547)
        cir.libc.memset %27 bytes from %25 set to %26 : !cir.ptr<!void>, !s32i, !u64i loc(#loc548)
        %28 = cir.const #cir.int<2> : !s32i loc(#loc261)
        %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc261)
        %30 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
        cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc549)
        %31 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc263)
        %32 = cir.cast(array_to_ptrdecay, %31 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc263)
        %33 = cir.call @inet_addr(%32) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc264)
        %34 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
        %35 = cir.get_member %34[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
        cir.store %33, %35 : !u32i, !cir.ptr<!u32i> loc(#loc550)
        %36 = cir.const #cir.int<27015> : !s32i loc(#loc267)
        %37 = cir.cast(integral, %36 : !s32i), !u16i loc(#loc267)
        %38 = cir.call @htons(%37) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc268)
        %39 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
        cir.store %38, %39 : !u16i, !cir.ptr<!u16i> loc(#loc551)
        cir.scope {
          %63 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc273)
          %64 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc553)
          %65 = cir.const #cir.int<16> : !u64i loc(#loc554)
          %66 = cir.cast(integral, %65 : !u64i), !u32i loc(#loc554)
          %67 = cir.call @connect(%63, %64, %66) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc278)
          %68 = cir.const #cir.int<1> : !s32i loc(#loc279)
          %69 = cir.unary(minus, %68) : !s32i, !s32i loc(#loc279)
          %70 = cir.cmp(eq, %67, %69) : !s32i, !cir.bool loc(#loc555)
          cir.if %70 {
            cir.break loc(#loc281)
          } loc(#loc556)
        } loc(#loc552)
        %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc282)
        %41 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc283)
        %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc283)
        %43 = cir.const #cir.int<3> : !s32i loc(#loc284)
        %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc284)
        %45 = cir.const #cir.int<4> : !u64i loc(#loc284)
        %46 = cir.binop(mul, %44, %45) : !u64i loc(#loc284)
        %47 = cir.const #cir.int<2> : !s32i loc(#loc284)
        %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc284)
        %49 = cir.binop(add, %46, %48) : !u64i loc(#loc284)
        %50 = cir.const #cir.int<1> : !s32i loc(#loc285)
        %51 = cir.cast(integral, %50 : !s32i), !u64i loc(#loc285)
        %52 = cir.binop(sub, %49, %51) : !u64i loc(#loc557)
        %53 = cir.const #cir.int<0> : !s32i loc(#loc286)
        %54 = cir.call @recv(%40, %42, %52, %53) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc287)
        %55 = cir.cast(integral, %54 : !s64i), !s32i loc(#loc287)
        cir.store %55, %1 : !s32i, !cir.ptr<!s32i> loc(#loc558)
        cir.scope {
          %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc292)
          %64 = cir.const #cir.int<1> : !s32i loc(#loc293)
          %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc293)
          %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc560)
          %67 = cir.ternary(%66, true {
            %68 = cir.const #true loc(#loc294)
            cir.yield %68 : !cir.bool loc(#loc294)
          }, false {
            %68 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc295)
            %69 = cir.const #cir.int<0> : !s32i loc(#loc296)
            %70 = cir.cmp(eq, %68, %69) : !s32i, !cir.bool loc(#loc561)
            %71 = cir.ternary(%70, true {
              %72 = cir.const #true loc(#loc294)
              cir.yield %72 : !cir.bool loc(#loc294)
            }, false {
              %72 = cir.const #false loc(#loc294)
              cir.yield %72 : !cir.bool loc(#loc294)
            }) : (!cir.bool) -> !cir.bool loc(#loc294)
            cir.yield %71 : !cir.bool loc(#loc294)
          }) : (!cir.bool) -> !cir.bool loc(#loc294)
          cir.if %67 {
            cir.break loc(#loc298)
          } loc(#loc562)
        } loc(#loc559)
        %56 = cir.const #cir.int<0> : !s32i loc(#loc299)
        %57 = cir.cast(integral, %56 : !s32i), !s8i loc(#loc299)
        %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc300)
        %59 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc301)
        %60 = cir.ptr_stride(%59 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc301)
        cir.store %57, %60 : !s8i, !cir.ptr<!s8i> loc(#loc563)
        %61 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc302)
        %62 = cir.call @atoi(%61) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc303)
        cir.store %62, %0 : !s32i, !cir.ptr<!s32i> loc(#loc564)
        cir.yield loc(#loc241)
      } while {
        %21 = cir.const #cir.int<0> : !s32i loc(#loc306)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc306)
        cir.condition(%22) loc(#loc306)
      } loc(#loc541)
    } loc(#loc541)
    cir.scope {
      %21 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc309)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc310)
      %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc310)
      %24 = cir.cmp(ne, %21, %23) : !s32i, !cir.bool loc(#loc566)
      cir.if %24 {
        %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc312)
        %26 = cir.call @close(%25) : (!s32i) -> !s32i loc(#loc313)
      } loc(#loc567)
    } loc(#loc565)
    cir.goto "sink" loc(#loc568)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc316)
    %11 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc317)
    %12 = cir.const #cir.int<10> : !s32i loc(#loc318)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc318)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc569)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc570)
    %16 = cir.call @malloc(%15) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc317)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc571)
    cir.store %17, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc538)
    cir.scope {
      %21 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc323)
      %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc324)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc324)
      %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc573)
      cir.if %24 {
        %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc326)
        %26 = cir.const #cir.int<1> : !s32i loc(#loc327)
        %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc328)
        cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc326)
      } loc(#loc574)
    } loc(#loc572)
    cir.scope {
      %21 = cir.const #cir.int<0> : !s32i loc(#loc331)
      cir.store %21, %5 : !s32i, !cir.ptr<!s32i> loc(#loc576)
      cir.for : cond {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc333)
        %23 = cir.const #cir.int<10> : !s32i loc(#loc334)
        %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc577)
        cir.condition(%24) loc(#loc335)
      } body {
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc337)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
          %24 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc339)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc340)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc579)
        } loc(#loc578)
        cir.yield loc(#loc330)
      } step {
        %22 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc341)
        %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc342)
        cir.store %23, %5 : !s32i, !cir.ptr<!s32i> loc(#loc580)
        cir.yield loc(#loc575)
      } loc(#loc575)
    } loc(#loc575)
    cir.scope {
      %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc345)
      %22 = cir.const #cir.int<0> : !s32i loc(#loc346)
      %23 = cir.cmp(ge, %21, %22) : !s32i, !cir.bool loc(#loc582)
      %24 = cir.ternary(%23, true {
        %25 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
        %26 = cir.const #cir.int<10> : !s32i loc(#loc349)
        %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc583)
        %28 = cir.ternary(%27, true {
          %29 = cir.const #true loc(#loc347)
          cir.yield %29 : !cir.bool loc(#loc347)
        }, false {
          %29 = cir.const #false loc(#loc347)
          cir.yield %29 : !cir.bool loc(#loc347)
        }) : (!cir.bool) -> !cir.bool loc(#loc347)
        cir.yield %28 : !cir.bool loc(#loc347)
      }, false {
        %25 = cir.const #false loc(#loc347)
        cir.yield %25 : !cir.bool loc(#loc347)
      }) : (!cir.bool) -> !cir.bool loc(#loc347)
      cir.if %24 {
        %25 = cir.const #cir.int<1> : !s32i loc(#loc354)
        %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc355)
        %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
        %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc357)
        cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc585)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc360)
          cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc587)
          cir.for : cond {
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc362)
            %31 = cir.const #cir.int<10> : !s32i loc(#loc363)
            %32 = cir.cmp(lt, %30, %31) : !s32i, !cir.bool loc(#loc588)
            cir.condition(%32) loc(#loc364)
          } body {
            cir.scope {
              %30 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc366)
              %31 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc367)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc368)
              %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc366)
              cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc369)
            } loc(#loc589)
            cir.yield loc(#loc359)
          } step {
            %30 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc370)
            %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc371)
            cir.store %31, %5 : !s32i, !cir.ptr<!s32i> loc(#loc590)
            cir.yield loc(#loc586)
          } loc(#loc586)
        } loc(#loc586)
      } else {
        %25 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc217)
        %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc217)
        cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc372)
      } loc(#loc584)
    } loc(#loc581)
    %18 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc373)
    %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc374)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc374)
    cir.call @free(%20) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc373)
    cir.return loc(#loc219)
  } loc(#loc531)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc592)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc593)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc594)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc383)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc384)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc595)
    cir.goto "source" loc(#loc596)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc388)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc389)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc597)
    cir.goto "sink" loc(#loc598)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc393)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc394)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc395)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc395)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc599)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc600)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc394)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc601)
    cir.store %12, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc594)
    cir.scope {
      %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc400)
      %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc401)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc401)
      %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc603)
      cir.if %19 {
        %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc403)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc404)
        %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc405)
        cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc403)
      } loc(#loc604)
    } loc(#loc602)
    cir.scope {
      %16 = cir.const #cir.int<0> : !s32i loc(#loc408)
      cir.store %16, %1 : !s32i, !cir.ptr<!s32i> loc(#loc606)
      cir.for : cond {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc410)
        %18 = cir.const #cir.int<10> : !s32i loc(#loc411)
        %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc607)
        cir.condition(%19) loc(#loc412)
      } body {
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc414)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc415)
          %19 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc416)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc417)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc609)
        } loc(#loc608)
        cir.yield loc(#loc407)
      } step {
        %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc418)
        %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc419)
        cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc610)
        cir.yield loc(#loc605)
      } loc(#loc605)
    } loc(#loc605)
    cir.scope {
      %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc422)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc423)
      %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc612)
      cir.if %18 {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc427)
        %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc428)
        %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc429)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc430)
        cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc614)
        cir.scope {
          %23 = cir.const #cir.int<0> : !s32i loc(#loc433)
          cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc616)
          cir.for : cond {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc435)
            %25 = cir.const #cir.int<10> : !s32i loc(#loc436)
            %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc617)
            cir.condition(%26) loc(#loc437)
          } body {
            cir.scope {
              %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc439)
              %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc440)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc441)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc439)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc442)
            } loc(#loc618)
            cir.yield loc(#loc432)
          } step {
            %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc443)
            %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc444)
            cir.store %25, %1 : !s32i, !cir.ptr<!s32i> loc(#loc619)
            cir.yield loc(#loc615)
          } loc(#loc615)
        } loc(#loc615)
      } else {
        %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc445)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc445)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc446)
      } loc(#loc613)
    } loc(#loc611)
    %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc447)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc448)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc448)
    cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc447)
    cir.return loc(#loc376)
  } loc(#loc591)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:49)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/stdlib.h":672:1)
#loc17 = loc("/usr/include/stdlib.h":672:45)
#loc18 = loc("/usr/include/stdlib.h":756:1)
#loc19 = loc("/usr/include/stdlib.h":756:70)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":131:23)
#loc25 = loc("/usr/include/stdlib.h":687:1)
#loc26 = loc("/usr/include/stdlib.h":687:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":44:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":135:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":46:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":46:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":56:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":56:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":57:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":57:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":58:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":58:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":59:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":59:41)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":110:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":110:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:54)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":49:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":49:10)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":50:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":60:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":95:17)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:36)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:45)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:58)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:29)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":70:69)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":74:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:17)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":71:34)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":72:13)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":73:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:21)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:30)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:33)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:47)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":75:48)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":76:34)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":76:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:39)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":77:59)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:38)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:32)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":78:46)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":82:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:25)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:58)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:59)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:68)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:82)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":79:88)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":80:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":81:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:46)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:59)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:77)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:80)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:26)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":85:81)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":89:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:17)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:31)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:44)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:47)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":86:61)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":87:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":88:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:39)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:25)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":91:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:20)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":93:36)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":95:16)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":99:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:13)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":96:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":97:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":98:26)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":98:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":107:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":107:10)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":108:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:38)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:43)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":111:53)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:39)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:23)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:29)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:30)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:36)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":112:35)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":117:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:18)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:21)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:25)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:23)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":115:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:25)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:20)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":116:21)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:30)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":114:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":132:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":120:21)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":121:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":128:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":130:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:28)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:13)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:20)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":122:24)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":127:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:21)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:24)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:28)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:26)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":125:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:30)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:37)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:38)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":126:17)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:33)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":124:32)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":131:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":133:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":133:14)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":275:1)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":279:1)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":277:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":277:13)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":278:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":278:13)
#loc189 = loc("/usr/include/stdlib.h":575:1)
#loc190 = loc("/usr/include/stdlib.h":575:41)
#loc191 = loc("/usr/include/time.h":76:1)
#loc192 = loc("/usr/include/time.h":76:38)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":295:15)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":297:15)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":300:15)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":302:15)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":290:1)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":305:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":291:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":293:27)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":293:22)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":293:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":295:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":296:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":296:72)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":297:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":300:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":301:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":301:71)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":302:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":304:12)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":304:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":228:23)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":142:1)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":232:1)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":144:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":144:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":154:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":154:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":155:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":155:28)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":156:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":156:32)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":157:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":157:41)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":208:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":208:13)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:54)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:12)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":146:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":147:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":147:10)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":148:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":158:9)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":193:17)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:36)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:45)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:58)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:29)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":168:69)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":172:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:17)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":169:34)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":170:13)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":171:17)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:20)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:30)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:33)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:47)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:13)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":173:48)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":174:34)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":174:13)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:49)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:39)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:13)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":175:59)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:38)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:32)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:13)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":176:46)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":180:13)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:25)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:58)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:59)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:68)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:82)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:17)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":177:88)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":178:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":179:17)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:31)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:46)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:59)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:77)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:80)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:26)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:13)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":183:81)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:13)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":187:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:31)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:44)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:47)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":184:61)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":185:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":186:17)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:39)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:25)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":189:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:25)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:20)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":191:36)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":193:16)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:9)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":197:9)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":194:30)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":195:9)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":196:26)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":196:13)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":205:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":205:10)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":206:1)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:31)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:38)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:43)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":209:53)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:9)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:39)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:13)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:23)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:29)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:30)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:36)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":210:35)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:9)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":215:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:18)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:14)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:21)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:25)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:23)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":213:9)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:25)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:20)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":214:21)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:30)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":212:29)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:9)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":229:9)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:21)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:23)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:26)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:34)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":217:36)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":218:9)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":225:9)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":227:9)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:28)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:13)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:20)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":219:24)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":224:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:21)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:17)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:24)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:28)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:26)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":222:13)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:30)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:37)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:38)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":223:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:33)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":221:32)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":228:13)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":230:9)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":230:14)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":235:1)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":273:1)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":237:5)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":237:9)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":248:9)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":248:13)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:9)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:54)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:13)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:12)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":239:5)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":240:5)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":240:10)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":241:1)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":244:12)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":244:5)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":245:5)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":245:10)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":246:1)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:31)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:38)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:43)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":249:53)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:9)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:39)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:13)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:23)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:29)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:30)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:36)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":250:35)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:9)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":255:9)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:18)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:14)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:21)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:25)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:23)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":253:9)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:25)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:13)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:20)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":254:21)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:30)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":252:29)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:9)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":270:9)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:13)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":258:21)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":259:9)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":266:9)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":268:9)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:28)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:13)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:20)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":260:24)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":265:13)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:21)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:17)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:24)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:28)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:26)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":263:13)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:30)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:37)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:38)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":264:17)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:33)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":262:32)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":269:23)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":269:13)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":271:9)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_connect_socket_18.c":271:14)
#loc449 = loc(fused[#loc1, #loc2])
#loc450 = loc(fused[#loc3, #loc4])
#loc451 = loc(fused[#loc6, #loc7])
#loc452 = loc(fused[#loc8, #loc9])
#loc453 = loc(fused[#loc10, #loc11])
#loc454 = loc(fused[#loc12, #loc13])
#loc455 = loc(fused[#loc14, #loc15])
#loc456 = loc(fused[#loc16, #loc17])
#loc457 = loc(fused[#loc18, #loc19])
#loc458 = loc(fused[#loc20, #loc21])
#loc459 = loc(fused[#loc22, #loc23])
#loc460 = loc(fused[#loc25, #loc26])
#loc461 = loc(fused[#loc27, #loc28])
#loc462 = loc(fused[#loc29, #loc30])
#loc463 = loc(fused[#loc31, #loc32])
#loc464 = loc(fused[#loc33, #loc34])
#loc465 = loc(fused[#loc35, #loc36])
#loc466 = loc(fused[#loc37, #loc38])
#loc467 = loc(fused[#loc39, #loc40])
#loc468 = loc(fused[#loc41, #loc42])
#loc469 = loc(fused[#loc45, #loc43])
#loc470 = loc(fused[#loc46, #loc47])
#loc471 = loc(fused[#loc49, #loc50])
#loc472 = loc(fused[#loc55, #loc56])
#loc473 = loc(fused[#loc57, #loc58])
#loc474 = loc(fused[#loc59, #loc60])
#loc475 = loc(fused[#loc61, #loc58])
#loc476 = loc(fused[#loc63, #loc64])
#loc477 = loc(fused[#loc66, #loc67])
#loc478 = loc(fused[#loc68, #loc69])
#loc479 = loc(fused[#loc72, #loc70])
#loc480 = loc(fused[#loc76, #loc77])
#loc481 = loc(fused[#loc81, #loc82])
#loc482 = loc(fused[#loc83, #loc84])
#loc483 = loc(fused[#loc86, #loc87])
#loc484 = loc(fused[#loc88, #loc89])
#loc485 = loc(fused[#loc90, #loc91])
#loc486 = loc(fused[#loc92, #loc84])
#loc487 = loc(fused[#loc96, #loc97])
#loc488 = loc(fused[#loc100, #loc101])
#loc489 = loc(fused[#loc102, #loc103])
#loc490 = loc(fused[#loc104, #loc105])
#loc491 = loc(fused[#loc107, #loc108])
#loc492 = loc(fused[#loc109, #loc103])
#loc493 = loc(fused[#loc113, #loc111])
#loc494 = loc(fused[#loc116, #loc117])
#loc495 = loc(fused[#loc119, #loc120])
#loc496 = loc(fused[#loc121, #loc122])
#loc497 = loc(fused[#loc123, #loc120])
#loc498 = loc(fused[#loc126, #loc127])
#loc499 = loc(fused[#loc131, #loc132])
#loc500 = loc(fused[#loc130, #loc132])
#loc501 = loc(fused[#loc129, #loc42])
#loc502 = loc(fused[#loc133, #loc134])
#loc503 = loc(fused[#loc135, #loc136])
#loc504 = loc(fused[#loc137, #loc134])
#loc505 = loc(fused[#loc141, #loc142])
#loc506 = loc(fused[#loc144, #loc143])
#loc507 = loc(fused[#loc145, #loc146])
#loc508 = loc(fused[#loc148, #loc142])
#loc509 = loc(fused[#loc150, #loc149])
#loc510 = loc(fused[#loc154, #loc153])
#loc511 = loc(fused[#loc155, #loc156])
#loc512 = loc(fused[#loc157, #loc158])
#loc513 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc514 = loc(fused[#loc163, #loc162])
#loc515 = loc(fused[#loc166, #loc167])
#loc516 = loc(fused[#loc169, #loc168])
#loc517 = loc(fused[#loc170, #loc171])
#loc518 = loc(fused[#loc173, #loc167])
#loc519 = loc(fused[#loc179, #loc178])
#loc520 = loc(fused[#loc183, #loc184])
#loc521 = loc(fused[#loc185, #loc186])
#loc522 = loc(fused[#loc187, #loc188])
#loc523 = loc(fused[#loc189, #loc190])
#loc524 = loc(fused[#loc191, #loc192])
#loc525 = loc(fused[#loc197, #loc198])
#loc528 = loc(fused[#loc208, #loc209])
#loc529 = loc(fused[#loc212, #loc213])
#loc530 = loc(fused[#loc216, #loc215])
#loc531 = loc(fused[#loc218, #loc219])
#loc532 = loc(fused[#loc220, #loc221])
#loc533 = loc(fused[#loc222, #loc223])
#loc534 = loc(fused[#loc224, #loc225])
#loc535 = loc(fused[#loc226, #loc227])
#loc536 = loc(fused[#loc228, #loc229])
#loc537 = loc(fused[#loc230, #loc231])
#loc538 = loc(fused[#loc232, #loc233])
#loc539 = loc(fused[#loc236, #loc234])
#loc540 = loc(fused[#loc237, #loc238])
#loc541 = loc(fused[#loc240, #loc241])
#loc542 = loc(fused[#loc246, #loc247])
#loc543 = loc(fused[#loc248, #loc249])
#loc544 = loc(fused[#loc250, #loc251])
#loc545 = loc(fused[#loc252, #loc249])
#loc546 = loc(fused[#loc254, #loc255])
#loc547 = loc(fused[#loc257, #loc258])
#loc548 = loc(fused[#loc259, #loc260])
#loc549 = loc(fused[#loc262, #loc261])
#loc550 = loc(fused[#loc265, #loc266])
#loc551 = loc(fused[#loc269, #loc270])
#loc552 = loc(fused[#loc271, #loc272])
#loc553 = loc(fused[#loc274, #loc275])
#loc554 = loc(fused[#loc276, #loc277])
#loc555 = loc(fused[#loc278, #loc279])
#loc556 = loc(fused[#loc280, #loc272])
#loc557 = loc(fused[#loc284, #loc285])
#loc558 = loc(fused[#loc288, #loc289])
#loc559 = loc(fused[#loc290, #loc291])
#loc560 = loc(fused[#loc292, #loc293])
#loc561 = loc(fused[#loc295, #loc296])
#loc562 = loc(fused[#loc297, #loc291])
#loc563 = loc(fused[#loc301, #loc299])
#loc564 = loc(fused[#loc304, #loc305])
#loc565 = loc(fused[#loc307, #loc308])
#loc566 = loc(fused[#loc309, #loc310])
#loc567 = loc(fused[#loc311, #loc308])
#loc568 = loc(fused[#loc314, #loc315])
#loc569 = loc(fused[#loc319, #loc320])
#loc570 = loc(fused[#loc318, #loc320])
#loc571 = loc(fused[#loc317, #loc233])
#loc572 = loc(fused[#loc321, #loc322])
#loc573 = loc(fused[#loc323, #loc324])
#loc574 = loc(fused[#loc325, #loc322])
#loc575 = loc(fused[#loc329, #loc330])
#loc576 = loc(fused[#loc332, #loc331])
#loc577 = loc(fused[#loc333, #loc334])
#loc578 = loc(fused[#loc336, #loc330])
#loc579 = loc(fused[#loc338, #loc337])
#loc580 = loc(fused[#loc342, #loc341])
#loc581 = loc(fused[#loc343, #loc344])
#loc582 = loc(fused[#loc345, #loc346])
#loc583 = loc(fused[#loc348, #loc350])
#loc584 = loc(fused[#loc351, #loc352, #loc353, #loc344])
#loc585 = loc(fused[#loc355, #loc354])
#loc586 = loc(fused[#loc358, #loc359])
#loc587 = loc(fused[#loc361, #loc360])
#loc588 = loc(fused[#loc362, #loc363])
#loc589 = loc(fused[#loc365, #loc359])
#loc590 = loc(fused[#loc371, #loc370])
#loc591 = loc(fused[#loc375, #loc376])
#loc592 = loc(fused[#loc377, #loc378])
#loc593 = loc(fused[#loc379, #loc380])
#loc594 = loc(fused[#loc381, #loc382])
#loc595 = loc(fused[#loc385, #loc383])
#loc596 = loc(fused[#loc386, #loc387])
#loc597 = loc(fused[#loc390, #loc389])
#loc598 = loc(fused[#loc391, #loc392])
#loc599 = loc(fused[#loc396, #loc397])
#loc600 = loc(fused[#loc395, #loc397])
#loc601 = loc(fused[#loc394, #loc382])
#loc602 = loc(fused[#loc398, #loc399])
#loc603 = loc(fused[#loc400, #loc401])
#loc604 = loc(fused[#loc402, #loc399])
#loc605 = loc(fused[#loc406, #loc407])
#loc606 = loc(fused[#loc409, #loc408])
#loc607 = loc(fused[#loc410, #loc411])
#loc608 = loc(fused[#loc413, #loc407])
#loc609 = loc(fused[#loc415, #loc414])
#loc610 = loc(fused[#loc419, #loc418])
#loc611 = loc(fused[#loc420, #loc421])
#loc612 = loc(fused[#loc422, #loc423])
#loc613 = loc(fused[#loc424, #loc425, #loc426, #loc421])
#loc614 = loc(fused[#loc428, #loc427])
#loc615 = loc(fused[#loc431, #loc432])
#loc616 = loc(fused[#loc434, #loc433])
#loc617 = loc(fused[#loc435, #loc436])
#loc618 = loc(fused[#loc438, #loc432])
#loc619 = loc(fused[#loc444, #loc443])
