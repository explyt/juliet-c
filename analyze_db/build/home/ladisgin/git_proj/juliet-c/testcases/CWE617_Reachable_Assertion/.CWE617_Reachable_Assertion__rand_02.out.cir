!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc17 = loc("CWE617_Reachable_Assertion__rand_02.c":33:16)
#loc37 = loc("CWE617_Reachable_Assertion__rand_02.c":94:10)
#loc38 = loc("CWE617_Reachable_Assertion__rand_02.c":94:14)
#loc39 = loc("CWE617_Reachable_Assertion__rand_02.c":94:20)
#loc40 = loc("CWE617_Reachable_Assertion__rand_02.c":94:32)
#loc104 = loc(fused[#loc37, #loc38])
#loc105 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc89)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_02.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_02_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb1 loc(#loc94)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc95)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc17)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
    cir.br ^bb5(%20 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc17)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc17)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc17)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc17)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc17)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc17)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc17)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc17)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc17)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc17)
    cir.br ^bb5(%36 : !u32i) loc(#loc17)
  ^bb5(%37: !u32i loc("CWE617_Reachable_Assertion__rand_02.c":33:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc17)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc5)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc5)
  ^bb10:  // pred: ^bb9
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %40 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %41 = cir.cmp(gt, %39, %40) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %41 ^bb11, ^bb12 loc(#loc5)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc5)
  ^bb12:  // pred: ^bb10
    %42 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %44 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %46 = cir.const #cir.int<36> : !s32i loc(#loc5)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc5)
    %48 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %49 = cir.cast(array_to_ptrdecay, %48 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%43, %45, %47, %49) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb13 loc(#loc5)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc5)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc5)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc91)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc98)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc99)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc97)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc100)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc101)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc34)
  cir.func @main(%arg0: !s32i loc(fused[#loc37, #loc38]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc105)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc41)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc43)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc43)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc44)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %8 = cir.get_global @CWE617_Reachable_Assertion__rand_02_good : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call @CWE617_Reachable_Assertion__rand_02_good() : () -> () loc(#loc46)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %13 = cir.get_global @CWE617_Reachable_Assertion__rand_02_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call @CWE617_Reachable_Assertion__rand_02_bad() : () -> () loc(#loc50)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc108)
    cir.return %17 : !s32i loc(#loc108)
  } loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc62)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc55)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    cir.br ^bb4 loc(#loc68)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<5> : !s32i loc(#loc71)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc71)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc56)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc56)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %11 = cir.const #cir.int<5> : !s32i loc(#loc56)
    %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc56)
    cir.brcond %12 ^bb8, ^bb9 loc(#loc56)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc56)
  ^bb9:  // pred: ^bb7
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc56)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc56)
    %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc56)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc56)
    %17 = cir.const #cir.int<60> : !s32i loc(#loc56)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
    %19 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc56)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @__assert_fail(%14, %16, %18, %20) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb10 loc(#loc56)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc56)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc56)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc58)
  } loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc80)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc119)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<5> : !s32i loc(#loc86)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc86)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb3 loc(#loc83)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc74)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc74)
  ^bb6:  // pred: ^bb5
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc74)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %10 ^bb7, ^bb8 loc(#loc74)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc74)
  ^bb8:  // pred: ^bb6
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc74)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc74)
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc74)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc74)
    %15 = cir.const #cir.int<75> : !s32i loc(#loc74)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc74)
    %17 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc74)
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc74)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc74)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc76)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_02.c":36:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_02.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_02.c":37:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_02.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_02.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_02.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_02.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_02.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_02.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_02.c":34:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_02.c":30:8)
#loc16 = loc("CWE617_Reachable_Assertion__rand_02.c":31:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_02.c":33:9)
#loc19 = loc("CWE617_Reachable_Assertion__rand_02.c":78:1)
#loc20 = loc("CWE617_Reachable_Assertion__rand_02.c":82:1)
#loc21 = loc("CWE617_Reachable_Assertion__rand_02.c":80:5)
#loc22 = loc("CWE617_Reachable_Assertion__rand_02.c":80:14)
#loc23 = loc("CWE617_Reachable_Assertion__rand_02.c":81:5)
#loc24 = loc("CWE617_Reachable_Assertion__rand_02.c":81:14)
#loc25 = loc("/usr/include/stdlib.h":575:1)
#loc26 = loc("/usr/include/stdlib.h":575:41)
#loc27 = loc("/usr/include/time.h":76:1)
#loc28 = loc("/usr/include/time.h":76:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE617_Reachable_Assertion__rand_02.c":99:15)
#loc32 = loc("CWE617_Reachable_Assertion__rand_02.c":101:15)
#loc33 = loc("CWE617_Reachable_Assertion__rand_02.c":104:15)
#loc34 = loc("CWE617_Reachable_Assertion__rand_02.c":106:15)
#loc35 = loc("CWE617_Reachable_Assertion__rand_02.c":94:1)
#loc36 = loc("CWE617_Reachable_Assertion__rand_02.c":109:1)
#loc41 = loc("CWE617_Reachable_Assertion__rand_02.c":95:1)
#loc42 = loc("CWE617_Reachable_Assertion__rand_02.c":97:27)
#loc43 = loc("CWE617_Reachable_Assertion__rand_02.c":97:22)
#loc44 = loc("CWE617_Reachable_Assertion__rand_02.c":97:5)
#loc45 = loc("CWE617_Reachable_Assertion__rand_02.c":99:5)
#loc46 = loc("CWE617_Reachable_Assertion__rand_02.c":100:5)
#loc47 = loc("CWE617_Reachable_Assertion__rand_02.c":100:46)
#loc48 = loc("CWE617_Reachable_Assertion__rand_02.c":101:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_02.c":104:5)
#loc50 = loc("CWE617_Reachable_Assertion__rand_02.c":105:5)
#loc51 = loc("CWE617_Reachable_Assertion__rand_02.c":105:45)
#loc52 = loc("CWE617_Reachable_Assertion__rand_02.c":106:5)
#loc53 = loc("CWE617_Reachable_Assertion__rand_02.c":108:12)
#loc54 = loc("CWE617_Reachable_Assertion__rand_02.c":108:5)
#loc55 = loc("CWE617_Reachable_Assertion__rand_02.c":52:19)
#loc56 = loc("CWE617_Reachable_Assertion__rand_02.c":60:5)
#loc57 = loc("CWE617_Reachable_Assertion__rand_02.c":44:1)
#loc58 = loc("CWE617_Reachable_Assertion__rand_02.c":61:1)
#loc59 = loc("CWE617_Reachable_Assertion__rand_02.c":46:5)
#loc60 = loc("CWE617_Reachable_Assertion__rand_02.c":46:9)
#loc61 = loc("CWE617_Reachable_Assertion__rand_02.c":48:13)
#loc62 = loc("CWE617_Reachable_Assertion__rand_02.c":48:12)
#loc63 = loc("CWE617_Reachable_Assertion__rand_02.c":48:5)
#loc64 = loc("CWE617_Reachable_Assertion__rand_02.c":49:5)
#loc65 = loc("CWE617_Reachable_Assertion__rand_02.c":58:5)
#loc66 = loc("CWE617_Reachable_Assertion__rand_02.c":49:8)
#loc67 = loc("CWE617_Reachable_Assertion__rand_02.c":50:5)
#loc68 = loc("CWE617_Reachable_Assertion__rand_02.c":53:5)
#loc69 = loc("CWE617_Reachable_Assertion__rand_02.c":55:5)
#loc70 = loc("CWE617_Reachable_Assertion__rand_02.c":52:9)
#loc71 = loc("CWE617_Reachable_Assertion__rand_02.c":57:16)
#loc72 = loc("CWE617_Reachable_Assertion__rand_02.c":57:29)
#loc73 = loc("CWE617_Reachable_Assertion__rand_02.c":57:9)
#loc74 = loc("CWE617_Reachable_Assertion__rand_02.c":75:5)
#loc75 = loc("CWE617_Reachable_Assertion__rand_02.c":64:1)
#loc76 = loc("CWE617_Reachable_Assertion__rand_02.c":76:1)
#loc77 = loc("CWE617_Reachable_Assertion__rand_02.c":66:5)
#loc78 = loc("CWE617_Reachable_Assertion__rand_02.c":66:9)
#loc79 = loc("CWE617_Reachable_Assertion__rand_02.c":68:13)
#loc80 = loc("CWE617_Reachable_Assertion__rand_02.c":68:12)
#loc81 = loc("CWE617_Reachable_Assertion__rand_02.c":68:5)
#loc82 = loc("CWE617_Reachable_Assertion__rand_02.c":69:5)
#loc83 = loc("CWE617_Reachable_Assertion__rand_02.c":73:5)
#loc84 = loc("CWE617_Reachable_Assertion__rand_02.c":69:8)
#loc85 = loc("CWE617_Reachable_Assertion__rand_02.c":70:5)
#loc86 = loc("CWE617_Reachable_Assertion__rand_02.c":72:16)
#loc87 = loc("CWE617_Reachable_Assertion__rand_02.c":72:29)
#loc88 = loc("CWE617_Reachable_Assertion__rand_02.c":72:9)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc6, #loc7])
#loc92 = loc(fused[#loc8, #loc9])
#loc93 = loc(fused[#loc12, #loc10])
#loc94 = loc(fused[#loc13, #loc14])
#loc95 = loc(fused[#loc16, #loc14])
#loc96 = loc(fused[#loc18, #loc17])
#loc97 = loc(fused[#loc19, #loc20])
#loc98 = loc(fused[#loc21, #loc22])
#loc99 = loc(fused[#loc23, #loc24])
#loc100 = loc(fused[#loc25, #loc26])
#loc101 = loc(fused[#loc27, #loc28])
#loc102 = loc(fused[#loc29, #loc30])
#loc103 = loc(fused[#loc35, #loc36])
#loc106 = loc(fused[#loc46, #loc47])
#loc107 = loc(fused[#loc50, #loc51])
#loc108 = loc(fused[#loc54, #loc53])
#loc109 = loc(fused[#loc57, #loc58])
#loc110 = loc(fused[#loc59, #loc60])
#loc111 = loc(fused[#loc63, #loc61])
#loc112 = loc(fused[#loc64, #loc65])
#loc113 = loc(fused[#loc67, #loc68, #loc69, #loc65])
#loc114 = loc(fused[#loc73, #loc72])
#loc115 = loc(fused[#loc75, #loc76])
#loc116 = loc(fused[#loc77, #loc78])
#loc117 = loc(fused[#loc81, #loc79])
#loc118 = loc(fused[#loc82, #loc83])
#loc119 = loc(fused[#loc85, #loc83])
#loc120 = loc(fused[#loc88, #loc87])
