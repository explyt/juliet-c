!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":98:10)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":98:14)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":98:20)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":98:32)
#loc205 = loc(fused[#loc88, #loc89])
#loc206 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc171)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc172)
  cir.func private @printIntLine(!s32i) loc(#loc173)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc174)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc178)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc177)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc178)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc181)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc22)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc25)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc25)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
      cir.scope {
        %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
        %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc31)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
        %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc185)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc35)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc33)
        } loc(#loc186)
      } loc(#loc184)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %13 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc37)
      cir.store %12, %13 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    } loc(#loc180)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc189)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc42)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc189)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc191)
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc192)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc191)
        cir.store %9, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc191)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
          cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc194)
          cir.for : cond {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %20 = cir.const #cir.int<10> : !s32i loc(#loc55)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc55)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc195)
            cir.condition(%22) loc(#loc56)
          } body {
            cir.scope {
              %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc58)
              %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc59)
              %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc59)
              %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc59)
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
              %24 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc61)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc62)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            } loc(#loc196)
            cir.yield loc(#loc51)
          } step {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc65)
            cir.store %20, %8 : !u64i, !cir.ptr<!u64i> loc(#loc198)
            cir.yield loc(#loc193)
          } loc(#loc193)
        } loc(#loc193)
        %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc67)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc68)
        %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc69)
        %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc70)
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc71)
        cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc10)
  } loc(#loc175)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc73)
  } loc(#loc199)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc201)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc202)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.return %17 : !s32i loc(#loc209)
  } loc(#loc204)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc212)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc213)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc212)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc213)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc114)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc214)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc216)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc216)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc122)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc122)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc217)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc218)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
      cir.store %13, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc220)
      cir.scope {
        %16 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc222)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc132)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc133)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc134)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
        } loc(#loc223)
      } loc(#loc221)
      %14 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc135)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
      cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc224)
    } loc(#loc215)
    cir.scope {
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc226)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc141)
      %6 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      cir.store %6, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc226)
      cir.scope {
        %7 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc228)
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc229)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc228)
        cir.store %9, %7 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc228)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc151)
          cir.store %18, %8 : !u64i, !cir.ptr<!u64i> loc(#loc231)
          cir.for : cond {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc153)
            %20 = cir.const #cir.int<10> : !s32i loc(#loc154)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc154)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc232)
            cir.condition(%22) loc(#loc155)
          } body {
            cir.scope {
              %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc157)
              %20 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc158)
              %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc158)
              %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc159)
              %24 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc160)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc161)
              cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc234)
            } loc(#loc233)
            cir.yield loc(#loc150)
          } step {
            %19 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc163)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc164)
            cir.store %20, %8 : !u64i, !cir.ptr<!u64i> loc(#loc235)
            cir.yield loc(#loc230)
          } loc(#loc230)
        } loc(#loc230)
        %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %11 = cir.const #cir.int<0> : !s32i loc(#loc166)
        %12 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc167)
        %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc165)
        cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc168)
        %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc169)
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc170)
        cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc169)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc107)
  } loc(#loc210)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":48:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":24:24)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":25:24)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":26:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":28:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":28:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":30:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":30:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":30:32)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":30:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:37)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:28)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":31:33)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":32:21)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":32:10)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":32:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":34:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":47:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":35:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":35:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":36:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":46:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":37:13)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":37:32)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":38:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":38:20)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":43:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:22)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:18)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:27)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":41:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:22)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":42:35)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:34)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":40:33)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":44:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":44:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":44:32)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":44:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":45:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":45:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":84:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":87:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":86:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":86:13)
#loc76 = loc("/usr/include/stdlib.h":575:1)
#loc77 = loc("/usr/include/stdlib.h":575:41)
#loc78 = loc("/usr/include/time.h":76:1)
#loc79 = loc("/usr/include/time.h":76:38)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":103:15)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":105:15)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":108:15)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":110:15)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":98:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":113:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":99:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":101:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":101:22)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":101:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":103:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":104:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":104:60)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":105:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":108:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":109:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":109:59)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":110:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":112:12)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":112:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":55:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":82:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":57:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":57:11)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":58:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":58:24)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":59:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":59:24)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":60:12)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":60:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":61:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":67:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":62:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":62:23)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":62:22)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:30)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:33)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:43)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:44)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":64:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:37)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:28)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:34)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":65:33)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":66:21)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":66:10)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":66:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":68:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":81:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":69:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":69:23)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":69:22)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":70:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":80:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":71:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":71:32)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":72:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":72:20)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:13)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":77:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:22)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:18)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:25)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:29)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:27)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":75:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:34)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:27)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:17)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:22)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":76:35)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":74:33)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":78:26)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":78:31)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":78:32)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":78:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":79:13)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_32.c":79:18)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc9, #loc10])
#loc176 = loc(fused[#loc11, #loc12])
#loc177 = loc(fused[#loc13, #loc14])
#loc178 = loc(fused[#loc15, #loc16])
#loc179 = loc(fused[#loc18, #loc17])
#loc180 = loc(fused[#loc19, #loc20])
#loc181 = loc(fused[#loc21, #loc22])
#loc182 = loc(fused[#loc24, #loc26])
#loc183 = loc(fused[#loc27, #loc26])
#loc184 = loc(fused[#loc28, #loc29])
#loc185 = loc(fused[#loc30, #loc31])
#loc186 = loc(fused[#loc32, #loc29])
#loc187 = loc(fused[#loc38, #loc36])
#loc188 = loc(fused[#loc39, #loc40])
#loc189 = loc(fused[#loc41, #loc42])
#loc190 = loc(fused[#loc44, #loc45])
#loc191 = loc(fused[#loc46, #loc47])
#loc192 = loc(fused[#loc48, #loc49])
#loc193 = loc(fused[#loc50, #loc51])
#loc194 = loc(fused[#loc53, #loc52])
#loc195 = loc(fused[#loc54, #loc55])
#loc196 = loc(fused[#loc57, #loc51])
#loc197 = loc(fused[#loc60, #loc63])
#loc198 = loc(fused[#loc65, #loc64])
#loc199 = loc(fused[#loc72, #loc73])
#loc200 = loc(fused[#loc74, #loc75])
#loc201 = loc(fused[#loc76, #loc77])
#loc202 = loc(fused[#loc78, #loc79])
#loc203 = loc(fused[#loc80, #loc81])
#loc204 = loc(fused[#loc86, #loc87])
#loc207 = loc(fused[#loc97, #loc98])
#loc208 = loc(fused[#loc101, #loc102])
#loc209 = loc(fused[#loc105, #loc104])
#loc210 = loc(fused[#loc106, #loc107])
#loc211 = loc(fused[#loc108, #loc109])
#loc212 = loc(fused[#loc110, #loc111])
#loc213 = loc(fused[#loc112, #loc113])
#loc214 = loc(fused[#loc115, #loc114])
#loc215 = loc(fused[#loc116, #loc117])
#loc216 = loc(fused[#loc118, #loc119])
#loc217 = loc(fused[#loc123, #loc124])
#loc218 = loc(fused[#loc122, #loc124])
#loc219 = loc(fused[#loc121, #loc125])
#loc220 = loc(fused[#loc126, #loc125])
#loc221 = loc(fused[#loc127, #loc128])
#loc222 = loc(fused[#loc129, #loc130])
#loc223 = loc(fused[#loc131, #loc128])
#loc224 = loc(fused[#loc137, #loc135])
#loc225 = loc(fused[#loc138, #loc139])
#loc226 = loc(fused[#loc140, #loc141])
#loc227 = loc(fused[#loc143, #loc144])
#loc228 = loc(fused[#loc145, #loc146])
#loc229 = loc(fused[#loc147, #loc148])
#loc230 = loc(fused[#loc149, #loc150])
#loc231 = loc(fused[#loc152, #loc151])
#loc232 = loc(fused[#loc153, #loc154])
#loc233 = loc(fused[#loc156, #loc150])
#loc234 = loc(fused[#loc159, #loc162])
#loc235 = loc(fused[#loc164, #loc163])
