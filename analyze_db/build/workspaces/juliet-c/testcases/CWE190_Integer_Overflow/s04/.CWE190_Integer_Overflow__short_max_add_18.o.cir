!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc73)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc74)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc9)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc75)
    cir.br ^bb1 loc(#loc76)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<32767> : !s32i loc(#loc13)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc13)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc77)
    cir.br ^bb2 loc(#loc78)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc17)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc17)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc17)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc74)
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc18)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc18)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc19)
    cir.return loc(#loc4)
  } loc(#loc72)
  cir.func no_proto @CWE190_Integer_Overflow__short_max_add_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc79)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc28)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc84)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc85)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc35)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc35)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<32767> : !s32i loc(#loc39)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc39)
    cir.store %5, %1 : !s16i, !cir.ptr<!s16i> loc(#loc88)
    cir.br ^bb2 loc(#loc89)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc45)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc45)
    %8 = cir.const #cir.int<32767> : !s32i loc(#loc46)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc50)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc50)
    %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc50)
    cir.store %14, %0 : !s16i, !cir.ptr<!s16i> loc(#loc84)
    %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc51)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc51)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc52)
    cir.br ^bb6 loc(#loc48)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc28)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb6 loc(#loc44)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc44)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc30)
  } loc(#loc83)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc94)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc95)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc60)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc60)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<2> : !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc64)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc98)
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc68)
    %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc68)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc68)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc68)
    cir.store %10, %1 : !s16i, !cir.ptr<!s16i> loc(#loc95)
    %11 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc69)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc69)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc70)
    cir.return loc(#loc55)
  } loc(#loc93)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_max_add_18.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_max_add_18.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_max_add_18.c":37:1)
#loc5 = loc("CWE190_Integer_Overflow__short_max_add_18.c":24:5)
#loc6 = loc("CWE190_Integer_Overflow__short_max_add_18.c":24:11)
#loc7 = loc("CWE190_Integer_Overflow__short_max_add_18.c":34:9)
#loc8 = loc("CWE190_Integer_Overflow__short_max_add_18.c":34:31)
#loc9 = loc("CWE190_Integer_Overflow__short_max_add_18.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__short_max_add_18.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__short_max_add_18.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__short_max_add_18.c":26:10)
#loc13 = loc("CWE190_Integer_Overflow__short_max_add_18.c":29:12)
#loc14 = loc("CWE190_Integer_Overflow__short_max_add_18.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__short_max_add_18.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__short_max_add_18.c":30:10)
#loc17 = loc("CWE190_Integer_Overflow__short_max_add_18.c":34:24)
#loc18 = loc("CWE190_Integer_Overflow__short_max_add_18.c":35:22)
#loc19 = loc("CWE190_Integer_Overflow__short_max_add_18.c":35:9)
#loc20 = loc("CWE190_Integer_Overflow__short_max_add_18.c":84:1)
#loc21 = loc("CWE190_Integer_Overflow__short_max_add_18.c":88:1)
#loc22 = loc("CWE190_Integer_Overflow__short_max_add_18.c":86:5)
#loc23 = loc("CWE190_Integer_Overflow__short_max_add_18.c":86:13)
#loc24 = loc("CWE190_Integer_Overflow__short_max_add_18.c":87:5)
#loc25 = loc("CWE190_Integer_Overflow__short_max_add_18.c":87:13)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE190_Integer_Overflow__short_max_add_18.c":62:19)
#loc29 = loc("CWE190_Integer_Overflow__short_max_add_18.c":44:1)
#loc30 = loc("CWE190_Integer_Overflow__short_max_add_18.c":64:1)
#loc31 = loc("CWE190_Integer_Overflow__short_max_add_18.c":57:9)
#loc32 = loc("CWE190_Integer_Overflow__short_max_add_18.c":57:31)
#loc33 = loc("CWE190_Integer_Overflow__short_max_add_18.c":46:5)
#loc34 = loc("CWE190_Integer_Overflow__short_max_add_18.c":46:11)
#loc35 = loc("CWE190_Integer_Overflow__short_max_add_18.c":47:12)
#loc36 = loc("CWE190_Integer_Overflow__short_max_add_18.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__short_max_add_18.c":48:5)
#loc38 = loc("CWE190_Integer_Overflow__short_max_add_18.c":48:10)
#loc39 = loc("CWE190_Integer_Overflow__short_max_add_18.c":51:12)
#loc40 = loc("CWE190_Integer_Overflow__short_max_add_18.c":51:5)
#loc41 = loc("CWE190_Integer_Overflow__short_max_add_18.c":52:5)
#loc42 = loc("CWE190_Integer_Overflow__short_max_add_18.c":52:10)
#loc43 = loc("CWE190_Integer_Overflow__short_max_add_18.c":55:5)
#loc44 = loc("CWE190_Integer_Overflow__short_max_add_18.c":63:5)
#loc45 = loc("CWE190_Integer_Overflow__short_max_add_18.c":55:9)
#loc46 = loc("CWE190_Integer_Overflow__short_max_add_18.c":55:16)
#loc47 = loc("CWE190_Integer_Overflow__short_max_add_18.c":56:5)
#loc48 = loc("CWE190_Integer_Overflow__short_max_add_18.c":59:5)
#loc49 = loc("CWE190_Integer_Overflow__short_max_add_18.c":61:5)
#loc50 = loc("CWE190_Integer_Overflow__short_max_add_18.c":57:24)
#loc51 = loc("CWE190_Integer_Overflow__short_max_add_18.c":58:22)
#loc52 = loc("CWE190_Integer_Overflow__short_max_add_18.c":58:9)
#loc53 = loc("CWE190_Integer_Overflow__short_max_add_18.c":62:9)
#loc54 = loc("CWE190_Integer_Overflow__short_max_add_18.c":67:1)
#loc55 = loc("CWE190_Integer_Overflow__short_max_add_18.c":82:1)
#loc56 = loc("CWE190_Integer_Overflow__short_max_add_18.c":69:5)
#loc57 = loc("CWE190_Integer_Overflow__short_max_add_18.c":69:11)
#loc58 = loc("CWE190_Integer_Overflow__short_max_add_18.c":79:9)
#loc59 = loc("CWE190_Integer_Overflow__short_max_add_18.c":79:31)
#loc60 = loc("CWE190_Integer_Overflow__short_max_add_18.c":70:12)
#loc61 = loc("CWE190_Integer_Overflow__short_max_add_18.c":70:5)
#loc62 = loc("CWE190_Integer_Overflow__short_max_add_18.c":71:5)
#loc63 = loc("CWE190_Integer_Overflow__short_max_add_18.c":71:10)
#loc64 = loc("CWE190_Integer_Overflow__short_max_add_18.c":74:12)
#loc65 = loc("CWE190_Integer_Overflow__short_max_add_18.c":74:5)
#loc66 = loc("CWE190_Integer_Overflow__short_max_add_18.c":75:5)
#loc67 = loc("CWE190_Integer_Overflow__short_max_add_18.c":75:10)
#loc68 = loc("CWE190_Integer_Overflow__short_max_add_18.c":79:24)
#loc69 = loc("CWE190_Integer_Overflow__short_max_add_18.c":80:22)
#loc70 = loc("CWE190_Integer_Overflow__short_max_add_18.c":80:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc7, #loc8])
#loc75 = loc(fused[#loc10, #loc9])
#loc76 = loc(fused[#loc11, #loc12])
#loc77 = loc(fused[#loc14, #loc13])
#loc78 = loc(fused[#loc15, #loc16])
#loc79 = loc(fused[#loc20, #loc21])
#loc80 = loc(fused[#loc22, #loc23])
#loc81 = loc(fused[#loc24, #loc25])
#loc82 = loc(fused[#loc26, #loc27])
#loc83 = loc(fused[#loc29, #loc30])
#loc84 = loc(fused[#loc31, #loc32])
#loc85 = loc(fused[#loc33, #loc34])
#loc86 = loc(fused[#loc36, #loc35])
#loc87 = loc(fused[#loc37, #loc38])
#loc88 = loc(fused[#loc40, #loc39])
#loc89 = loc(fused[#loc41, #loc42])
#loc90 = loc(fused[#loc43, #loc44])
#loc91 = loc(fused[#loc45, #loc46])
#loc92 = loc(fused[#loc47, #loc48, #loc49, #loc44])
#loc93 = loc(fused[#loc54, #loc55])
#loc94 = loc(fused[#loc56, #loc57])
#loc95 = loc(fused[#loc58, #loc59])
#loc96 = loc(fused[#loc61, #loc60])
#loc97 = loc(fused[#loc62, #loc63])
#loc98 = loc(fused[#loc65, #loc64])
#loc99 = loc(fused[#loc66, #loc67])
