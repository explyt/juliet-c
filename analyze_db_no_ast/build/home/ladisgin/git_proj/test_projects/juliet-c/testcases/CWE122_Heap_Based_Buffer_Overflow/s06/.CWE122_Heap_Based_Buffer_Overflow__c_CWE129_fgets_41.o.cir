!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:21)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:25)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:25)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:29)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:25)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:29)
#true = #cir.bool<true> : !cir.bool
#loc312 = loc(fused[#loc21, #loc22])
#loc350 = loc(fused[#loc124, #loc125])
#loc386 = loc(fused[#loc226, #loc227])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc303)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc304)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc305)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc306)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc307)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc308)
  cir.func private  @printIntLine(!s32i) loc(#loc309)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc310)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc21, #loc22])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc312)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc23)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc314)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc315)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc30)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc31)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc31)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc316)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc317)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc30)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc318)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc315)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc37)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc320)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc38)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc40)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc41)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc42)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc40)
        } loc(#loc321)
      } loc(#loc319)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc45)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc323)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc48)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc324)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc49)
          cir.condition(%17) loc(#loc49)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc51)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc53)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc54)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc326)
          } loc(#loc325)
          cir.yield loc(#loc44)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc56)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc327)
          cir.yield loc(#loc322)
        } loc(#loc322)
      } loc(#loc322)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc329)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc61)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc65)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc68)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc71)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc333)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc73)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc74)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc334)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc75)
              cir.condition(%25) loc(#loc75)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc79)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc80)
              } loc(#loc335)
              cir.yield loc(#loc70)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc82)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc336)
              cir.yield loc(#loc332)
            } loc(#loc332)
          } loc(#loc332)
        } else {
          %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc83)
        } loc(#loc330)
      } loc(#loc328)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc85)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    } loc(#loc313)
    cir.return loc(#loc20)
  } loc(#loc311)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc341)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc341)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc341)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc100)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc100)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc100)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc100)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc100)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc100)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc100)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc100)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc343)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc104)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc112)
        } loc(#loc344)
      } loc(#loc342)
    } loc(#loc340)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call @badSink(%3) : (!s32i) -> () loc(#loc114)
    cir.return loc(#loc87)
  } loc(#loc337)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc347)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc117)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc348)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc119)
    cir.return loc(#loc116)
  } loc(#loc346)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc121)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc124, #loc125])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc350)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc352)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc353)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc133)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc134)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc134)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc354)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc355)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc133)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc356)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc353)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc140)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc358)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc141)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc144)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc145)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
        } loc(#loc359)
      } loc(#loc357)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc148)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc361)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc151)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc362)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc152)
          cir.condition(%17) loc(#loc152)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc154)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc156)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc157)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc364)
          } loc(#loc363)
          cir.yield loc(#loc147)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc159)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc365)
          cir.yield loc(#loc360)
        } loc(#loc360)
      } loc(#loc360)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc163)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc367)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc164)
        %17 = cir.ternary(%16, true {
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc167)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc368)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc169)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc165)
            cir.yield %23 : !cir.bool loc(#loc165)
          }, false {
            %23 = cir.const #false loc(#loc165)
            cir.yield %23 : !cir.bool loc(#loc165)
          }) : (!cir.bool) -> !cir.bool loc(#loc165)
          cir.yield %22 : !cir.bool loc(#loc165)
        }, false {
          %18 = cir.const #false loc(#loc165)
          cir.yield %18 : !cir.bool loc(#loc165)
        }) : (!cir.bool) -> !cir.bool loc(#loc165)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc173)
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc176)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc179)
            cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc372)
            cir.for : cond {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc182)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !s32i loc(#loc373)
              %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc183)
              cir.condition(%26) loc(#loc183)
            } body {
              cir.scope {
                %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
                %24 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc186)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc187)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc185)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc188)
              } loc(#loc374)
              cir.yield loc(#loc178)
            } step {
              %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc190)
              cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc375)
              cir.yield loc(#loc371)
            } loc(#loc371)
          } loc(#loc371)
        } else {
          %18 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc121)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc121)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc191)
        } loc(#loc369)
      } loc(#loc366)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc192)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc193)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc192)
    } loc(#loc351)
    cir.return loc(#loc123)
  } loc(#loc349)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc377)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc199)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc380)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc380)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc380)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc207)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc208)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc208)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc208)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc208)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc208)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc208)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc208)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc208)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc304)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc209)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc210)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc211)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc211)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc382)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc212)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc216)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc217)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc384)
        } else {
          %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc220)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc220)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc221)
        } loc(#loc383)
      } loc(#loc381)
    } loc(#loc379)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.call @goodB2GSink(%3) : (!s32i) -> () loc(#loc223)
    cir.return loc(#loc195)
  } loc(#loc376)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc226, #loc227])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc386)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc388)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc389)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc235)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc236)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc236)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc390)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc391)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc392)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc389)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc241)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc242)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc242)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !s32i loc(#loc394)
        %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc243)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc245)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc246)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc247)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc245)
        } loc(#loc395)
      } loc(#loc393)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc250)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc397)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc252)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc253)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !s32i loc(#loc398)
          %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc254)
          cir.condition(%17) loc(#loc254)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc256)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc257)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc258)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc259)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc400)
          } loc(#loc399)
          cir.yield loc(#loc249)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc260)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc261)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc401)
          cir.yield loc(#loc396)
        } loc(#loc396)
      } loc(#loc396)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc264)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc265)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !s32i loc(#loc403)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc266)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc270)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc271)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc272)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc273)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc405)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc276)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc407)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc278)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc279)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc408)
              %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc280)
              cir.condition(%25) loc(#loc280)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc283)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc284)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc285)
              } loc(#loc409)
              cir.yield loc(#loc275)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc286)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc287)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc410)
              cir.yield loc(#loc406)
            } loc(#loc406)
          } loc(#loc406)
        } else {
          %17 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc288)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc288)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc289)
        } loc(#loc404)
      } loc(#loc402)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc290)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc291)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc291)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc290)
    } loc(#loc387)
    cir.return loc(#loc225)
  } loc(#loc385)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc412)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc296)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc297)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc299)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc301)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc302)
    cir.return loc(#loc293)
  } loc(#loc411)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":69:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":48:23)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":52:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":25:1)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":26:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":51:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":27:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":27:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:54)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:31)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:38)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:43)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":28:53)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:39)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:20)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:29)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:30)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:36)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":29:35)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":34:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:18)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:21)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":32:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":33:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":31:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":49:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":37:18)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":38:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":45:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":47:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:20)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":39:24)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":44:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:17)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:26)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":42:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:30)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:37)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:38)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":43:17)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:33)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":41:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":48:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":50:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":50:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":54:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":73:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":56:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":56:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":58:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":59:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":71:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":60:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":60:45)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":70:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:49)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:59)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":62:56)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":63:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":66:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":68:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:25)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:20)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":65:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":69:13)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":72:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":72:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":172:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":176:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":174:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":174:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":175:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":175:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":145:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":122:1)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":149:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":123:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":124:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":148:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":125:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":125:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:54)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:31)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:38)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:43)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":126:53)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:39)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:23)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:20)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:29)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":127:35)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":132:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:18)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:14)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:21)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:25)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:23)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":130:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:20)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":131:21)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:30)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":129:29)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":146:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:13)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:21)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:18)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:23)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:26)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:34)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:36)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":134:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":135:9)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":142:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":144:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:28)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:20)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":136:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":141:13)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:21)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:17)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:24)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:28)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:26)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":139:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:30)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:37)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:38)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":140:17)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":138:32)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":145:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":147:9)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":147:14)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":151:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":170:1)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":153:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":153:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:12)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":155:5)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":156:5)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":168:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":157:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":157:45)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:9)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":167:9)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:19)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:32)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:49)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:59)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":159:56)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":160:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":163:9)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":165:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:25)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:20)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":162:36)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":166:23)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":166:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":169:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":169:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":80:1)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":108:1)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":81:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":82:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":107:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":83:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":83:13)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:9)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:54)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:31)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:38)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:43)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":84:53)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:39)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:23)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:20)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:29)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:30)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:36)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":85:35)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":90:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:18)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:14)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:21)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:25)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:23)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":88:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:20)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":89:21)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:30)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":87:29)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":105:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:21)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":93:18)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":94:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":101:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":103:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:28)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:20)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":95:24)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:13)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":100:13)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:21)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:17)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:24)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:28)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:26)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":98:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:30)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:37)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:38)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":99:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:33)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":97:32)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":104:23)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":104:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":106:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":106:14)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":110:1)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":119:1)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":112:5)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":112:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:12)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":114:5)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":117:12)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":117:5)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":118:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_41.c":118:5)
#loc303 = loc(fused[#loc1, #loc2])
#loc304 = loc(fused[#loc3, #loc4])
#loc305 = loc(fused[#loc5, #loc6])
#loc306 = loc(fused[#loc7, #loc8])
#loc307 = loc(fused[#loc10, #loc11])
#loc308 = loc(fused[#loc12, #loc13])
#loc309 = loc(fused[#loc14, #loc15])
#loc310 = loc(fused[#loc17, #loc18])
#loc311 = loc(fused[#loc19, #loc20])
#loc313 = loc(fused[#loc24, #loc25])
#loc314 = loc(fused[#loc26, #loc27])
#loc315 = loc(fused[#loc28, #loc29])
#loc316 = loc(fused[#loc32, #loc33])
#loc317 = loc(fused[#loc31, #loc33])
#loc318 = loc(fused[#loc30, #loc29])
#loc319 = loc(fused[#loc34, #loc35])
#loc320 = loc(fused[#loc36, #loc37])
#loc321 = loc(fused[#loc39, #loc35])
#loc322 = loc(fused[#loc43, #loc44])
#loc323 = loc(fused[#loc46, #loc45])
#loc324 = loc(fused[#loc47, #loc48])
#loc325 = loc(fused[#loc50, #loc44])
#loc326 = loc(fused[#loc52, #loc51])
#loc327 = loc(fused[#loc56, #loc55])
#loc328 = loc(fused[#loc57, #loc58])
#loc329 = loc(fused[#loc59, #loc60])
#loc330 = loc(fused[#loc62, #loc63, #loc64, #loc58])
#loc331 = loc(fused[#loc66, #loc65])
#loc332 = loc(fused[#loc69, #loc70])
#loc333 = loc(fused[#loc72, #loc71])
#loc334 = loc(fused[#loc73, #loc74])
#loc335 = loc(fused[#loc76, #loc70])
#loc336 = loc(fused[#loc82, #loc81])
#loc337 = loc(fused[#loc86, #loc87])
#loc338 = loc(fused[#loc88, #loc89])
#loc339 = loc(fused[#loc92, #loc90])
#loc340 = loc(fused[#loc93, #loc94])
#loc341 = loc(fused[#loc95, #loc96])
#loc342 = loc(fused[#loc97, #loc98])
#loc343 = loc(fused[#loc102, #loc103])
#loc344 = loc(fused[#loc105, #loc106, #loc107, #loc98])
#loc345 = loc(fused[#loc110, #loc111])
#loc346 = loc(fused[#loc115, #loc116])
#loc347 = loc(fused[#loc117, #loc118])
#loc348 = loc(fused[#loc119, #loc120])
#loc349 = loc(fused[#loc122, #loc123])
#loc351 = loc(fused[#loc127, #loc128])
#loc352 = loc(fused[#loc129, #loc130])
#loc353 = loc(fused[#loc131, #loc132])
#loc354 = loc(fused[#loc135, #loc136])
#loc355 = loc(fused[#loc134, #loc136])
#loc356 = loc(fused[#loc133, #loc132])
#loc357 = loc(fused[#loc137, #loc138])
#loc358 = loc(fused[#loc139, #loc140])
#loc359 = loc(fused[#loc142, #loc138])
#loc360 = loc(fused[#loc146, #loc147])
#loc361 = loc(fused[#loc149, #loc148])
#loc362 = loc(fused[#loc150, #loc151])
#loc363 = loc(fused[#loc153, #loc147])
#loc364 = loc(fused[#loc155, #loc154])
#loc365 = loc(fused[#loc159, #loc158])
#loc366 = loc(fused[#loc160, #loc161])
#loc367 = loc(fused[#loc162, #loc163])
#loc368 = loc(fused[#loc166, #loc168])
#loc369 = loc(fused[#loc170, #loc171, #loc172, #loc161])
#loc370 = loc(fused[#loc174, #loc173])
#loc371 = loc(fused[#loc177, #loc178])
#loc372 = loc(fused[#loc180, #loc179])
#loc373 = loc(fused[#loc181, #loc182])
#loc374 = loc(fused[#loc184, #loc178])
#loc375 = loc(fused[#loc190, #loc189])
#loc376 = loc(fused[#loc194, #loc195])
#loc377 = loc(fused[#loc196, #loc197])
#loc378 = loc(fused[#loc200, #loc198])
#loc379 = loc(fused[#loc201, #loc202])
#loc380 = loc(fused[#loc203, #loc204])
#loc381 = loc(fused[#loc205, #loc206])
#loc382 = loc(fused[#loc210, #loc211])
#loc383 = loc(fused[#loc213, #loc214, #loc215, #loc206])
#loc384 = loc(fused[#loc218, #loc219])
#loc385 = loc(fused[#loc224, #loc225])
#loc387 = loc(fused[#loc229, #loc230])
#loc388 = loc(fused[#loc231, #loc232])
#loc389 = loc(fused[#loc233, #loc234])
#loc390 = loc(fused[#loc237, #loc238])
#loc391 = loc(fused[#loc236, #loc238])
#loc392 = loc(fused[#loc235, #loc234])
#loc393 = loc(fused[#loc239, #loc240])
#loc394 = loc(fused[#loc241, #loc242])
#loc395 = loc(fused[#loc244, #loc240])
#loc396 = loc(fused[#loc248, #loc249])
#loc397 = loc(fused[#loc251, #loc250])
#loc398 = loc(fused[#loc252, #loc253])
#loc399 = loc(fused[#loc255, #loc249])
#loc400 = loc(fused[#loc257, #loc256])
#loc401 = loc(fused[#loc261, #loc260])
#loc402 = loc(fused[#loc262, #loc263])
#loc403 = loc(fused[#loc264, #loc265])
#loc404 = loc(fused[#loc267, #loc268, #loc269, #loc263])
#loc405 = loc(fused[#loc271, #loc270])
#loc406 = loc(fused[#loc274, #loc275])
#loc407 = loc(fused[#loc277, #loc276])
#loc408 = loc(fused[#loc278, #loc279])
#loc409 = loc(fused[#loc281, #loc275])
#loc410 = loc(fused[#loc287, #loc286])
#loc411 = loc(fused[#loc292, #loc293])
#loc412 = loc(fused[#loc294, #loc295])
#loc413 = loc(fused[#loc298, #loc296])
#loc414 = loc(fused[#loc300, #loc299])
