!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalFive : !s32i {alignment = 4 : i64} loc(#loc173)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc174)
  cir.func private @printIntLine(!s32i) loc(#loc175)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_14_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc177)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc11)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc178)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc180)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc18)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc18)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc18)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc18)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc18)
          cir.yield %25 : !u32i loc(#loc18)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc18)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc18)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc18)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc18)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc18)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc18)
          cir.yield %29 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc18)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc18)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc182)
      } loc(#loc181)
    } loc(#loc179)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc184)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc187)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc29)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc28)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc28)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc29)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc29)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc187)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc30)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc30)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc31)
        } loc(#loc186)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc8)
  } loc(#loc176)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_square_14_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc188)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc51)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc56)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc198)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc58)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc58)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc58)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc58)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc58)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc58)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc58)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc58)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc58)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc58)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc58)
          cir.yield %25 : !u32i loc(#loc58)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc58)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc58)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc58)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc58)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc58)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc58)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc58)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc58)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc58)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc58)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc58)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc58)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc58)
          cir.yield %29 : !u32i loc(#loc58)
        }) : (!cir.bool) -> !u32i loc(#loc58)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc58)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc58)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc200)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc63)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc202)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc70)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc70)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc70)
          %10 = cir.abs %9 poison : !s32i loc(#loc71)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc71)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc72)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc73)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc73)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc72)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc72)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc205)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc207)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc80)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc80)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc79)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc79)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc80)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc80)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc207)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc81)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc81)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc82)
          } else {
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc48)
  } loc(#loc194)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc209)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc88)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc88)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc210)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc93)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc212)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc95)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc95)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc95)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc95)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc95)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc95)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc95)
          cir.yield %25 : !u32i loc(#loc95)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc95)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc95)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc95)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc95)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc95)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc95)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc95)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc95)
          cir.yield %29 : !u32i loc(#loc95)
        }) : (!cir.bool) -> !u32i loc(#loc95)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc95)
        %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc95)
        cir.store %13, %0 : !s16i, !cir.ptr<!s16i> loc(#loc214)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc100)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc216)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc104)
          %8 = cir.cast(integral, %7 : !s16i), !s64i loc(#loc104)
          %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc104)
          %10 = cir.abs %9 poison : !s32i loc(#loc105)
          %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc105)
          %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc106)
          %13 = cir.const #cir.int<32767> : !s32i loc(#loc107)
          %14 = cir.cast(int_to_float, %13 : !s32i), !cir.double loc(#loc107)
          %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc106)
          %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc106)
          %17 = cir.cmp(le, %11, %16) : !s64i, !cir.bool loc(#loc219)
          cir.if %17 {
            %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc221)
            %19 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc114)
            %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc114)
            %21 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc113)
            %22 = cir.cast(integral, %21 : !s16i), !s32i loc(#loc113)
            %23 = cir.binop(mul, %20, %22) nsw : !s32i loc(#loc114)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc114)
            cir.store %24, %18 : !s16i, !cir.ptr<!s16i> loc(#loc221)
            %25 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc115)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc115)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc116)
          } else {
            %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc117)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc117)
            cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc118)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.return loc(#loc85)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc123)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc123)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc224)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc128)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc226)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc133)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc134)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc134)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc230)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc233)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc145)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc145)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc144)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc144)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc145)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc145)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc233)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc146)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc146)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc147)
        } loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.return loc(#loc120)
  } loc(#loc222)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc152)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc152)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc236)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc238)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc159)
        %8 = cir.cast(integral, %7 : !s32i), !s16i loc(#loc159)
        cir.store %8, %0 : !s16i, !cir.ptr<!s16i> loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.scope {
      %3 = cir.get_global @globalFive : !cir.ptr<!s32i> loc(#loc173)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc163)
      %5 = cir.const #cir.int<5> : !s32i loc(#loc164)
      %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc242)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc245)
          %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc170)
          %9 = cir.cast(integral, %8 : !s16i), !s32i loc(#loc170)
          %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc169)
          %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc169)
          %12 = cir.binop(mul, %9, %11) nsw : !s32i loc(#loc170)
          %13 = cir.cast(integral, %12 : !s32i), !s16i loc(#loc170)
          cir.store %13, %7 : !s16i, !cir.ptr<!s16i> loc(#loc245)
          %14 = cir.load %7 : !cir.ptr<!s16i>, !s16i loc(#loc171)
          %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc171)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc172)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc149)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__short_rand_square_14.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase.h":118:1)
#loc2 = loc("../../../testcasesupport/std_testcase.h":118:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":24:1)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":41:1)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":26:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":26:11)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":27:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":32:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":28:8)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":28:20)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":31:23)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":33:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":40:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":33:8)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":33:20)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":34:5)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":39:9)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":37:13)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":37:35)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":37:28)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":38:26)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":38:13)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":147:1)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":153:1)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":149:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":149:14)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":150:5)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":150:14)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":151:5)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":151:14)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":152:5)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":152:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":60:19)
#loc45 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":72:23)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":48:1)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":75:1)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":50:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":50:11)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":51:12)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":51:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":52:5)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":56:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":52:8)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":52:20)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":53:5)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":55:23)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":55:9)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":57:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":74:5)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":57:8)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":57:20)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":58:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":61:5)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":63:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":60:9)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:9)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":73:9)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:23)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:13)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:38)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:51)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":65:59)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":66:9)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":69:9)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":71:9)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":67:13)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":67:35)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":67:28)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":68:26)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":68:13)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":72:13)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":78:1)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":100:1)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":80:11)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":81:12)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":81:5)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":82:5)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":86:5)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":82:8)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":82:20)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":83:5)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":85:23)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":85:9)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":87:5)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":99:5)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":87:8)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":87:20)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":88:5)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:9)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":98:9)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:23)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:13)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:38)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:51)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":90:59)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":91:9)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":94:9)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":96:9)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":92:13)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":92:35)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":92:28)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":93:26)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":93:13)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":97:23)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":97:13)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":103:1)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":125:1)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":105:5)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":105:11)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":106:12)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":106:5)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":107:5)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":116:5)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":107:8)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":107:20)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":108:5)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":111:5)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":113:5)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":110:19)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":110:9)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":115:16)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":115:9)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":117:5)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":124:5)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":117:8)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":117:20)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":118:5)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":119:9)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":123:9)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":121:13)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":121:35)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":121:28)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":122:26)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":122:13)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":128:1)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":145:1)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":130:5)
#loc151 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":130:11)
#loc152 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":131:12)
#loc153 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":131:5)
#loc154 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":132:5)
#loc155 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":136:5)
#loc156 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":132:8)
#loc157 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":132:20)
#loc158 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":133:5)
#loc159 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":135:16)
#loc160 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":135:9)
#loc161 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":137:5)
#loc162 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":144:5)
#loc163 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":137:8)
#loc164 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":137:20)
#loc165 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":138:5)
#loc166 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":139:9)
#loc167 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":143:9)
#loc168 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":141:13)
#loc169 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":141:35)
#loc170 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":141:28)
#loc171 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":142:26)
#loc172 = loc("CWE190_Integer_Overflow__short_rand_square_14.c":142:13)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc12, #loc11])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc15, #loc16])
#loc181 = loc(fused[#loc17, #loc14])
#loc182 = loc(fused[#loc19, #loc18])
#loc183 = loc(fused[#loc20, #loc21])
#loc184 = loc(fused[#loc22, #loc23])
#loc185 = loc(fused[#loc24, #loc21])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc32, #loc33])
#loc189 = loc(fused[#loc34, #loc35])
#loc190 = loc(fused[#loc36, #loc37])
#loc191 = loc(fused[#loc38, #loc39])
#loc192 = loc(fused[#loc40, #loc41])
#loc193 = loc(fused[#loc42, #loc43])
#loc194 = loc(fused[#loc47, #loc48])
#loc195 = loc(fused[#loc49, #loc50])
#loc196 = loc(fused[#loc52, #loc51])
#loc197 = loc(fused[#loc53, #loc54])
#loc198 = loc(fused[#loc55, #loc56])
#loc199 = loc(fused[#loc57, #loc54])
#loc200 = loc(fused[#loc59, #loc58])
#loc201 = loc(fused[#loc60, #loc61])
#loc202 = loc(fused[#loc62, #loc63])
#loc203 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc204 = loc(fused[#loc68, #loc69])
#loc205 = loc(fused[#loc71, #loc74])
#loc206 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc207 = loc(fused[#loc78, #loc79])
#loc208 = loc(fused[#loc84, #loc85])
#loc209 = loc(fused[#loc86, #loc87])
#loc210 = loc(fused[#loc89, #loc88])
#loc211 = loc(fused[#loc90, #loc91])
#loc212 = loc(fused[#loc92, #loc93])
#loc213 = loc(fused[#loc94, #loc91])
#loc214 = loc(fused[#loc96, #loc95])
#loc215 = loc(fused[#loc97, #loc98])
#loc216 = loc(fused[#loc99, #loc100])
#loc217 = loc(fused[#loc101, #loc98])
#loc218 = loc(fused[#loc102, #loc103])
#loc219 = loc(fused[#loc105, #loc108])
#loc220 = loc(fused[#loc109, #loc110, #loc111, #loc103])
#loc221 = loc(fused[#loc112, #loc113])
#loc222 = loc(fused[#loc119, #loc120])
#loc223 = loc(fused[#loc121, #loc122])
#loc224 = loc(fused[#loc124, #loc123])
#loc225 = loc(fused[#loc125, #loc126])
#loc226 = loc(fused[#loc127, #loc128])
#loc227 = loc(fused[#loc129, #loc130, #loc131, #loc126])
#loc228 = loc(fused[#loc135, #loc134])
#loc229 = loc(fused[#loc136, #loc137])
#loc230 = loc(fused[#loc138, #loc139])
#loc231 = loc(fused[#loc140, #loc137])
#loc232 = loc(fused[#loc141, #loc142])
#loc233 = loc(fused[#loc143, #loc144])
#loc234 = loc(fused[#loc148, #loc149])
#loc235 = loc(fused[#loc150, #loc151])
#loc236 = loc(fused[#loc153, #loc152])
#loc237 = loc(fused[#loc154, #loc155])
#loc238 = loc(fused[#loc156, #loc157])
#loc239 = loc(fused[#loc158, #loc155])
#loc240 = loc(fused[#loc160, #loc159])
#loc241 = loc(fused[#loc161, #loc162])
#loc242 = loc(fused[#loc163, #loc164])
#loc243 = loc(fused[#loc165, #loc162])
#loc244 = loc(fused[#loc166, #loc167])
#loc245 = loc(fused[#loc168, #loc169])
