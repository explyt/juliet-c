!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":105:10)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":105:14)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":105:20)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":105:32)
#loc234 = loc(fused[#loc160, #loc161])
#loc235 = loc(fused[#loc162, #loc163])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc176)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc177)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc179)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc183)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc184)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc185)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc20)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc21)
    cir.store %5, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %7 = cir.const #cir.int<50> : !s32i loc(#loc24)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc24)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc187)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc188)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc32)
    %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc192)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb3 loc(#loc30)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // pred: ^bb3
    %19 = cir.const #cir.int<0> : !s8i loc(#loc37)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc40)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc194)
    cir.br ^bb5 loc(#loc195)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc12)
    %24 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc12)
    cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.br ^bb6 loc(#loc196)
  ^bb6:  // pred: ^bb5
    %25 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc45)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc45)
    %27 = cir.const #cir.int<67> : !s8i loc(#loc46)
    %28 = cir.cast(integral, %27 : !s8i), !s32i loc(#loc46)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc47)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc47)
    cir.libc.memset %32 bytes from %26 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc197)
    %33 = cir.const #cir.int<0> : !s8i loc(#loc51)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc52)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc54)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc54)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc198)
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // pred: ^bb6
    %39 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc57)
    cir.store %40, %1 : !u64i, !cir.ptr<!u64i> loc(#loc200)
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // 2 preds: ^bb7, ^bb10
    %41 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc59)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc60)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc60)
    %44 = cir.cmp(lt, %41, %43) : !u64i, !cir.bool loc(#loc201)
    cir.brcond %44 ^bb9, ^bb11 loc(#loc201)
  ^bb9:  // pred: ^bb8
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc61)
    %46 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc62)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc62)
    %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc62)
    %49 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc64)
    %51 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %50 : !u64i), !cir.ptr<!s8i> loc(#loc65)
    cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc202)
    cir.br ^bb10 loc(#loc56)
  ^bb10:  // pred: ^bb9
    %52 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc67)
    %53 = cir.unary(inc, %52) : !u64i, !u64i loc(#loc68)
    cir.store %53, %1 : !u64i, !cir.ptr<!u64i> loc(#loc203)
    cir.br ^bb8 loc(#loc199)
  ^bb11:  // pred: ^bb8
    cir.br ^bb12 loc(#loc56)
  ^bb12:  // pred: ^bb11
    %54 = cir.const #cir.int<0> : !s8i loc(#loc69)
    %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    %56 = cir.const #cir.int<100> : !s32i loc(#loc71)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %58 = cir.binop(sub, %56, %57) nsw : !s32i loc(#loc71)
    %59 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc73)
    cir.store %54, %59 : !s8i, !cir.ptr<!s8i> loc(#loc204)
    %60 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    cir.br ^bb13 loc(#loc44)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc42)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc10)
  } loc(#loc180)
  cir.func internal private @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc208)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc210)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc89)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc90)
    cir.store %5, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc92)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc93)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc93)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc212)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc213)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc92)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc214)
    cir.store %12, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %13 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc100)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc101)
    %15 = cir.cmp(eq, %13, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc217)
    cir.brcond %15 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc103)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc105)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
    cir.br ^bb3 loc(#loc99)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // pred: ^bb3
    %19 = cir.const #cir.int<0> : !s8i loc(#loc106)
    %20 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %22 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc109)
    cir.store %19, %22 : !s8i, !cir.ptr<!s8i> loc(#loc219)
    cir.br ^bb5 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %23 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    %24 = cir.load %23 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
    cir.store %24, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.br ^bb6 loc(#loc221)
  ^bb6:  // pred: ^bb5
    %25 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc114)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc114)
    %27 = cir.const #cir.int<67> : !s8i loc(#loc115)
    %28 = cir.cast(integral, %27 : !s8i), !s32i loc(#loc115)
    %29 = cir.const #cir.int<100> : !s32i loc(#loc116)
    %30 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %31 = cir.binop(sub, %29, %30) nsw : !s32i loc(#loc116)
    %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc116)
    cir.libc.memset %32 bytes from %26 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc222)
    %33 = cir.const #cir.int<0> : !s8i loc(#loc120)
    %34 = cir.const #cir.int<100> : !s32i loc(#loc121)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc121)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc123)
    %38 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %36 : !s32i), !cir.ptr<!s8i> loc(#loc123)
    cir.store %33, %38 : !s8i, !cir.ptr<!s8i> loc(#loc223)
    cir.br ^bb7 loc(#loc224)
  ^bb7:  // pred: ^bb6
    %39 = cir.const #cir.int<0> : !s32i loc(#loc126)
    %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc126)
    cir.store %40, %1 : !u64i, !cir.ptr<!u64i> loc(#loc225)
    cir.br ^bb8 loc(#loc224)
  ^bb8:  // 2 preds: ^bb7, ^bb10
    %41 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc128)
    %42 = cir.const #cir.int<100> : !s32i loc(#loc129)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc129)
    %44 = cir.cmp(lt, %41, %43) : !u64i, !cir.bool loc(#loc226)
    cir.brcond %44 ^bb9, ^bb11 loc(#loc226)
  ^bb9:  // pred: ^bb8
    %45 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc130)
    %46 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc131)
    %47 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %45 : !u64i), !cir.ptr<!s8i> loc(#loc131)
    %48 = cir.load %47 : !cir.ptr<!s8i>, !s8i loc(#loc131)
    %49 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
    %50 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc133)
    %51 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %50 : !u64i), !cir.ptr<!s8i> loc(#loc134)
    cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc227)
    cir.br ^bb10 loc(#loc125)
  ^bb10:  // pred: ^bb9
    %52 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc136)
    %53 = cir.unary(inc, %52) : !u64i, !u64i loc(#loc137)
    cir.store %53, %1 : !u64i, !cir.ptr<!u64i> loc(#loc228)
    cir.br ^bb8 loc(#loc224)
  ^bb11:  // pred: ^bb8
    cir.br ^bb12 loc(#loc125)
  ^bb12:  // pred: ^bb11
    %54 = cir.const #cir.int<0> : !s8i loc(#loc138)
    %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
    %56 = cir.const #cir.int<100> : !s32i loc(#loc140)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %58 = cir.binop(sub, %56, %57) nsw : !s32i loc(#loc140)
    %59 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %58 : !s32i), !cir.ptr<!s8i> loc(#loc142)
    cir.store %54, %59 : !s8i, !cir.ptr<!s8i> loc(#loc229)
    %60 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%60) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
    %62 = cir.cast(bitcast, %61 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc145)
    cir.call @free(%62) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc146)
    cir.br ^bb13 loc(#loc113)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc111)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc79)
  } loc(#loc205)
  cir.func @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33L7goodG2BEv() : () -> () loc(#loc149)
    cir.return loc(#loc148)
  } loc(#loc230)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc231)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc156)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc157)
  cir.func @main(%arg0: !s32i loc(fused[#loc160, #loc161]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc162, #loc163])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc159)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc164)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc165)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc166)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc166)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc167)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc154)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc154)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc168)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_334goodEv() : () -> () loc(#loc169)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc155)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc156)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    cir.call @_ZN56CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_333badEv() : () -> () loc(#loc172)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc157)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc157)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc174)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.return %15 : !s32i loc(#loc236)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":26:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":52:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":36:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":36:23)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":38:13)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":38:20)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":39:13)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":39:28)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":28:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":28:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":29:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":29:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":30:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":30:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:20)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:41)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":32:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:33)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:24)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":33:29)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":34:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":34:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":34:11)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":35:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":51:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":37:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":50:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:28)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:37)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":40:38)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":41:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":41:20)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":41:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":41:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":46:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:22)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:25)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:34)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:17)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:22)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:23)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":45:35)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:35)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":43:34)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":47:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":47:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":47:18)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":47:22)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":47:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":48:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":48:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":49:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":49:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":59:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":85:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":69:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":69:23)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":71:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":71:20)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":72:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":72:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":61:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":61:12)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":62:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":62:23)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":63:12)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":63:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:20)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:27)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:42)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":65:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:33)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:17)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:23)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:24)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:30)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":66:29)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":67:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":67:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":67:10)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":67:11)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":68:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":84:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":70:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":83:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:20)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:28)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:33)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:37)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:13)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":73:38)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":74:29)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":74:20)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":74:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":74:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":79:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:22)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:18)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:25)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:29)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:34)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:27)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:22)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:23)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":78:35)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:35)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":76:34)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":80:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":80:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":80:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":80:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":80:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":81:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":81:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":82:18)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":82:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":87:1)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":90:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":89:5)
#loc150 = loc("/usr/include/stdlib.h":575:1)
#loc151 = loc("/usr/include/stdlib.h":575:41)
#loc152 = loc("/usr/include/time.h":76:1)
#loc153 = loc("/usr/include/time.h":76:38)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":110:15)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":112:15)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":115:15)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":117:15)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":105:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":120:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":106:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":108:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":108:22)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":108:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":110:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":111:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":112:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":115:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":116:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":117:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":119:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_loop_33.cpp":119:5)
#loc176 = loc(fused[#loc1, #loc2])
#loc177 = loc(fused[#loc3, #loc4])
#loc178 = loc(fused[#loc5, #loc6])
#loc179 = loc(fused[#loc7, #loc8])
#loc180 = loc(fused[#loc9, #loc10])
#loc181 = loc(fused[#loc11, #loc12])
#loc182 = loc(fused[#loc13, #loc14])
#loc183 = loc(fused[#loc15, #loc16])
#loc184 = loc(fused[#loc17, #loc18])
#loc185 = loc(fused[#loc19, #loc20])
#loc186 = loc(fused[#loc22, #loc21])
#loc187 = loc(fused[#loc25, #loc26])
#loc188 = loc(fused[#loc24, #loc26])
#loc189 = loc(fused[#loc23, #loc27])
#loc190 = loc(fused[#loc28, #loc27])
#loc191 = loc(fused[#loc29, #loc30])
#loc192 = loc(fused[#loc31, #loc32])
#loc193 = loc(fused[#loc33, #loc30])
#loc194 = loc(fused[#loc38, #loc37])
#loc195 = loc(fused[#loc41, #loc42])
#loc196 = loc(fused[#loc43, #loc44])
#loc197 = loc(fused[#loc49, #loc50])
#loc198 = loc(fused[#loc54, #loc51])
#loc199 = loc(fused[#loc55, #loc56])
#loc200 = loc(fused[#loc58, #loc57])
#loc201 = loc(fused[#loc59, #loc60])
#loc202 = loc(fused[#loc63, #loc66])
#loc203 = loc(fused[#loc68, #loc67])
#loc204 = loc(fused[#loc70, #loc69])
#loc205 = loc(fused[#loc78, #loc79])
#loc206 = loc(fused[#loc80, #loc81])
#loc207 = loc(fused[#loc82, #loc83])
#loc208 = loc(fused[#loc84, #loc85])
#loc209 = loc(fused[#loc86, #loc87])
#loc210 = loc(fused[#loc88, #loc89])
#loc211 = loc(fused[#loc91, #loc90])
#loc212 = loc(fused[#loc94, #loc95])
#loc213 = loc(fused[#loc93, #loc95])
#loc214 = loc(fused[#loc92, #loc96])
#loc215 = loc(fused[#loc97, #loc96])
#loc216 = loc(fused[#loc98, #loc99])
#loc217 = loc(fused[#loc100, #loc101])
#loc218 = loc(fused[#loc102, #loc99])
#loc219 = loc(fused[#loc107, #loc106])
#loc220 = loc(fused[#loc110, #loc111])
#loc221 = loc(fused[#loc112, #loc113])
#loc222 = loc(fused[#loc118, #loc119])
#loc223 = loc(fused[#loc123, #loc120])
#loc224 = loc(fused[#loc124, #loc125])
#loc225 = loc(fused[#loc127, #loc126])
#loc226 = loc(fused[#loc128, #loc129])
#loc227 = loc(fused[#loc132, #loc135])
#loc228 = loc(fused[#loc137, #loc136])
#loc229 = loc(fused[#loc139, #loc138])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc150, #loc151])
#loc232 = loc(fused[#loc152, #loc153])
#loc233 = loc(fused[#loc158, #loc159])
#loc236 = loc(fused[#loc175, #loc174])
