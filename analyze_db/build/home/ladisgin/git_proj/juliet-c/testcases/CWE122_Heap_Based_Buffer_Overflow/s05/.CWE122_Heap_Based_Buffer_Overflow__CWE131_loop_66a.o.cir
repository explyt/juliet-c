!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc65)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc66)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_badSink(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc67)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc69)
    %1 = cir.alloca !cir.array<!cir.ptr<!s32i> x 5>, !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc70)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc71)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc16)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc16)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
    cir.store %7, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc73)
    cir.br ^bb1 loc(#loc74)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s32i>, !cir.bool loc(#loc75)
    cir.brcond %11 ^bb2, ^bb3 loc(#loc76)
  ^bb2:  // pred: ^bb1
    %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc24)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc26)
    cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc24)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc28)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc29)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!cir.ptr<!s32i>>, %16 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc29)
    cir.store %15, %18 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    %19 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc30)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_badSink(%19) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc31)
    cir.return loc(#loc8)
  } loc(#loc68)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc78)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(!cir.ptr<!cir.ptr<!s32i>>) loc(#loc80)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.alloca !cir.array<!cir.ptr<!s32i> x 5>, !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc83)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc44)
    cir.store %2, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc84)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc46)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc47)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc47)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc85)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc86)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc46)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc87)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc88)
    cir.br ^bb1 loc(#loc89)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc55)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc90)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc91)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc57)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc59)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb3 loc(#loc53)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %18 = cir.const #cir.int<2> : !s32i loc(#loc61)
    %19 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    %20 = cir.ptr_stride(%19 : !cir.ptr<!cir.ptr<!s32i>>, %18 : !s32i), !cir.ptr<!cir.ptr<!s32i>> loc(#loc62)
    cir.store %17, %20 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!s32i> x 5>>), !cir.ptr<!cir.ptr<!s32i>> loc(#loc63)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66b_goodG2BSink(%21) : (!cir.ptr<!cir.ptr<!s32i>>) -> () loc(#loc64)
    cir.return loc(#loc39)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":22:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":22:82)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":35:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":26:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":26:11)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":27:22)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":28:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":28:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":30:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":30:26)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":30:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":30:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:23)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:24)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:30)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":31:29)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":33:20)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":33:15)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":33:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":34:64)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":34:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":56:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":59:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":58:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":58:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":42:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":42:86)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":44:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":54:1)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":46:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":46:11)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":47:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":47:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":48:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":48:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:19)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:29)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:39)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:40)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":50:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":51:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":52:20)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":52:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":52:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":53:68)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_66a.c":53:5)
#loc65 = loc(fused[#loc1, #loc2])
#loc66 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc5, #loc6])
#loc68 = loc(fused[#loc7, #loc8])
#loc69 = loc(fused[#loc9, #loc10])
#loc70 = loc(fused[#loc11, #loc12])
#loc71 = loc(fused[#loc14, #loc13])
#loc72 = loc(fused[#loc15, #loc17])
#loc73 = loc(fused[#loc18, #loc17])
#loc74 = loc(fused[#loc19, #loc20])
#loc75 = loc(fused[#loc21, #loc22])
#loc76 = loc(fused[#loc23, #loc20])
#loc77 = loc(fused[#loc29, #loc27])
#loc78 = loc(fused[#loc32, #loc33])
#loc79 = loc(fused[#loc34, #loc35])
#loc80 = loc(fused[#loc36, #loc37])
#loc81 = loc(fused[#loc38, #loc39])
#loc82 = loc(fused[#loc40, #loc41])
#loc83 = loc(fused[#loc42, #loc43])
#loc84 = loc(fused[#loc45, #loc44])
#loc85 = loc(fused[#loc48, #loc49])
#loc86 = loc(fused[#loc47, #loc49])
#loc87 = loc(fused[#loc46, #loc50])
#loc88 = loc(fused[#loc51, #loc50])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc55])
#loc91 = loc(fused[#loc56, #loc53])
#loc92 = loc(fused[#loc62, #loc60])
