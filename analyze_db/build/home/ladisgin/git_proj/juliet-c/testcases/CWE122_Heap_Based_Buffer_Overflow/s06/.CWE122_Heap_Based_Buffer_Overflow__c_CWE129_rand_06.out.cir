!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":35:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":267:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":267:14)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":267:20)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":267:32)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":81:16)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:27)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":127:16)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:27)
#true = #cir.bool<true> : !cir.bool
#loc515 = loc(fused[#loc113, #loc114])
#loc516 = loc(fused[#loc115, #loc116])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc467)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc468)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc469)
  cir.func private @printIntLine(!s32i) loc(#loc470)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc471)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc11)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc472)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc474)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc475)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc476)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc23)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc477)
    cir.br ^bb1 loc(#loc478)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc27)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc28)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc479)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc480)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc30)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc30)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc30)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc30)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc30)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc30)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc30)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc30)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc30)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc30)
    cir.br ^bb5(%23 : !u32i) loc(#loc30)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc30)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc30)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc30)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc30)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc30)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc30)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc30)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc30)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc30)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc30)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc30)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc30)
    cir.br ^bb5(%39 : !u32i) loc(#loc30)
  ^bb5(%40: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":35:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc30)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc481)
    cir.br ^bb7 loc(#loc26)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc482)
  ^bb9:  // pred: ^bb8
    %42 = cir.const #cir.int<5> : !s32i loc(#loc34)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc35)
    %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc483)
    cir.brcond %44 ^bb10, ^bb38 loc(#loc484)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc485)
  ^bb11:  // pred: ^bb10
    %45 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc39)
    %46 = cir.const #cir.int<10> : !s32i loc(#loc40)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc40)
    %48 = cir.const #cir.int<4> : !u64i loc(#loc486)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc487)
    %50 = cir.call @malloc(%49) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc39)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc488)
    cir.store %51, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc475)
    cir.br ^bb12 loc(#loc489)
  ^bb12:  // pred: ^bb11
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
    %55 = cir.cmp(eq, %52, %54) : !cir.ptr<!s32i>, !cir.bool loc(#loc490)
    cir.brcond %55 ^bb13, ^bb14 loc(#loc491)
  ^bb13:  // pred: ^bb12
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc48)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc50)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb14 loc(#loc44)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc44)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc492)
  ^bb16:  // pred: ^bb15
    %59 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc493)
    cir.br ^bb17 loc(#loc492)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %60 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc56)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc494)
    cir.brcond %62 ^bb18, ^bb22 loc(#loc57)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc495)
  ^bb19:  // pred: ^bb18
    %63 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %64 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    %65 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %66 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc62)
    cir.store %63, %66 : !s32i, !cir.ptr<!s32i> loc(#loc496)
    cir.br ^bb20 loc(#loc52)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc52)
  ^bb21:  // pred: ^bb20
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %68 = cir.unary(inc, %67) : !s32i, !s32i loc(#loc64)
    cir.store %68, %0 : !s32i, !cir.ptr<!s32i> loc(#loc497)
    cir.br ^bb17 loc(#loc492)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc52)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc498)
  ^bb24:  // pred: ^bb23
    %69 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %71 = cir.cmp(ge, %69, %70) : !s32i, !cir.bool loc(#loc499)
    cir.brcond %71 ^bb25, ^bb34 loc(#loc500)
  ^bb25:  // pred: ^bb24
    %72 = cir.const #cir.int<1> : !s32i loc(#loc72)
    %73 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %74 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %75 = cir.ptr_stride(%73 : !cir.ptr<!s32i>, %74 : !s32i), !cir.ptr<!s32i> loc(#loc75)
    cir.store %72, %75 : !s32i, !cir.ptr<!s32i> loc(#loc501)
    cir.br ^bb26 loc(#loc502)
  ^bb26:  // pred: ^bb25
    %76 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %76, %0 : !s32i, !cir.ptr<!s32i> loc(#loc503)
    cir.br ^bb27 loc(#loc502)
  ^bb27:  // 2 preds: ^bb26, ^bb31
    %77 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
    %78 = cir.const #cir.int<10> : !s32i loc(#loc81)
    %79 = cir.cmp(lt, %77, %78) : !s32i, !cir.bool loc(#loc504)
    cir.brcond %79 ^bb28, ^bb32 loc(#loc82)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc505)
  ^bb29:  // pred: ^bb28
    %80 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
    %81 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %82 = cir.ptr_stride(%80 : !cir.ptr<!s32i>, %81 : !s32i), !cir.ptr<!s32i> loc(#loc86)
    %83 = cir.load %82 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    cir.call @printIntLine(%83) : (!s32i) -> () loc(#loc87)
    cir.br ^bb30 loc(#loc77)
  ^bb30:  // pred: ^bb29
    cir.br ^bb31 loc(#loc77)
  ^bb31:  // pred: ^bb30
    %84 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    %85 = cir.unary(inc, %84) : !s32i, !s32i loc(#loc89)
    cir.store %85, %0 : !s32i, !cir.ptr<!s32i> loc(#loc506)
    cir.br ^bb27 loc(#loc502)
  ^bb32:  // pred: ^bb27
    cir.br ^bb33 loc(#loc77)
  ^bb33:  // pred: ^bb32
    cir.br ^bb35 loc(#loc70)
  ^bb34:  // pred: ^bb24
    %86 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc11)
    %87 = cir.cast(array_to_ptrdecay, %86 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%87) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    cir.br ^bb35 loc(#loc66)
  ^bb35:  // 2 preds: ^bb33, ^bb34
    cir.br ^bb36 loc(#loc66)
  ^bb36:  // pred: ^bb35
    %88 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
    %89 = cir.cast(bitcast, %88 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
    cir.call @free(%89) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc92)
    cir.br ^bb37 loc(#loc38)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc33)
  ^bb38:  // 2 preds: ^bb9, ^bb37
    cir.br ^bb39 loc(#loc33)
  ^bb39:  // pred: ^bb38
    cir.return loc(#loc15)
  } loc(#loc473)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc508)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc95)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc509)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc510)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc511)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc101)
    cir.return loc(#loc94)
  } loc(#loc507)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc512)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc513)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc110)
  cir.func @main(%arg0: !s32i loc(fused[#loc113, #loc114]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc115, #loc116])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc515)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc516)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc112)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc117)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc118)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc119)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc119)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc120)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc107)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc517)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_good() : () -> () loc(#loc122)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc108)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc109)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc518)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06_bad() : () -> () loc(#loc126)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc110)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc110)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc519)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc519)
    cir.return %17 : !s32i loc(#loc519)
  } loc(#loc514)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc131)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc132)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc521)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc522)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc523)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc142)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc524)
    cir.br ^bb1 loc(#loc525)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc146)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc147)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc526)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc527)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc149)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc149)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc149)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc149)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc149)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc149)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc149)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc149)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc149)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc149)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc149)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc149)
    cir.br ^bb5(%23 : !u32i) loc(#loc149)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc149)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc149)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc149)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc149)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc149)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc149)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc149)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc149)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc149)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc149)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc149)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc149)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc149)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc149)
    cir.br ^bb5(%39 : !u32i) loc(#loc149)
  ^bb5(%40: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":81:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc149)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc149)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc528)
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc145)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc529)
  ^bb9:  // pred: ^bb8
    %42 = cir.const #cir.int<5> : !s32i loc(#loc153)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc154)
    %44 = cir.cmp(ne, %42, %43) : !s32i, !cir.bool loc(#loc530)
    cir.brcond %44 ^bb10, ^bb11 loc(#loc531)
  ^bb10:  // pred: ^bb9
    %45 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc131)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc131)
    cir.call @printLine(%46) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    cir.br ^bb47 loc(#loc156)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc532)
  ^bb12:  // pred: ^bb11
    %47 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc161)
    %48 = cir.const #cir.int<10> : !s32i loc(#loc162)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc162)
    %50 = cir.const #cir.int<4> : !u64i loc(#loc533)
    %51 = cir.binop(mul, %49, %50) : !u64i loc(#loc534)
    %52 = cir.call @malloc(%51) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc161)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc535)
    cir.store %53, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc522)
    cir.br ^bb13 loc(#loc536)
  ^bb13:  // pred: ^bb12
    %54 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
    %55 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc168)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc168)
    %57 = cir.cmp(eq, %54, %56) : !cir.ptr<!s32i>, !cir.bool loc(#loc537)
    cir.brcond %57 ^bb14, ^bb15 loc(#loc538)
  ^bb14:  // pred: ^bb13
    %58 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc170)
    %59 = cir.const #cir.int<1> : !s32i loc(#loc171)
    %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc172)
    cir.call @exit(%60) : (!s32i) -> () extra(#fn_attr) loc(#loc170)
    cir.br ^bb15 loc(#loc166)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc166)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc539)
  ^bb17:  // pred: ^bb16
    %61 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %61, %0 : !s32i, !cir.ptr<!s32i> loc(#loc540)
    cir.br ^bb18 loc(#loc539)
  ^bb18:  // 2 preds: ^bb17, ^bb22
    %62 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %63 = cir.const #cir.int<10> : !s32i loc(#loc178)
    %64 = cir.cmp(lt, %62, %63) : !s32i, !cir.bool loc(#loc541)
    cir.brcond %64 ^bb19, ^bb23 loc(#loc179)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc542)
  ^bb20:  // pred: ^bb19
    %65 = cir.const #cir.int<0> : !s32i loc(#loc181)
    %66 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc182)
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    %68 = cir.ptr_stride(%66 : !cir.ptr<!s32i>, %67 : !s32i), !cir.ptr<!s32i> loc(#loc184)
    cir.store %65, %68 : !s32i, !cir.ptr<!s32i> loc(#loc543)
    cir.br ^bb21 loc(#loc174)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc174)
  ^bb22:  // pred: ^bb21
    %69 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc185)
    %70 = cir.unary(inc, %69) : !s32i, !s32i loc(#loc186)
    cir.store %70, %0 : !s32i, !cir.ptr<!s32i> loc(#loc544)
    cir.br ^bb18 loc(#loc539)
  ^bb23:  // pred: ^bb18
    cir.br ^bb24 loc(#loc174)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc545)
  ^bb25:  // pred: ^bb24
    %71 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %72 = cir.const #cir.int<0> : !s32i loc(#loc190)
    %73 = cir.cmp(ge, %71, %72) : !s32i, !cir.bool loc(#loc546)
    cir.brcond %73 ^bb26, ^bb31 loc(#loc191)
  ^bb26:  // pred: ^bb25
    %74 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    %75 = cir.const #cir.int<10> : !s32i loc(#loc193)
    %76 = cir.cmp(lt, %74, %75) : !s32i, !cir.bool loc(#loc547)
    cir.brcond %76 ^bb27, ^bb28 loc(#loc191)
  ^bb27:  // pred: ^bb26
    %77 = cir.const #true loc(#loc191)
    cir.br ^bb29(%77 : !cir.bool) loc(#loc191)
  ^bb28:  // pred: ^bb26
    %78 = cir.const #false loc(#loc191)
    cir.br ^bb29(%78 : !cir.bool) loc(#loc191)
  ^bb29(%79: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:27)):  // 2 preds: ^bb27, ^bb28
    cir.br ^bb30 loc(#loc191)
  ^bb30:  // pred: ^bb29
    cir.br ^bb32(%79 : !cir.bool) loc(#loc191)
  ^bb31:  // pred: ^bb25
    %80 = cir.const #false loc(#loc191)
    cir.br ^bb32(%80 : !cir.bool) loc(#loc191)
  ^bb32(%81: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:27)):  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc191)
  ^bb33:  // pred: ^bb32
    cir.brcond %81 ^bb34, ^bb43 loc(#loc548)
  ^bb34:  // pred: ^bb33
    %82 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %83 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
    %84 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %85 = cir.ptr_stride(%83 : !cir.ptr<!s32i>, %84 : !s32i), !cir.ptr<!s32i> loc(#loc201)
    cir.store %82, %85 : !s32i, !cir.ptr<!s32i> loc(#loc549)
    cir.br ^bb35 loc(#loc550)
  ^bb35:  // pred: ^bb34
    %86 = cir.const #cir.int<0> : !s32i loc(#loc204)
    cir.store %86, %0 : !s32i, !cir.ptr<!s32i> loc(#loc551)
    cir.br ^bb36 loc(#loc550)
  ^bb36:  // 2 preds: ^bb35, ^bb40
    %87 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
    %88 = cir.const #cir.int<10> : !s32i loc(#loc207)
    %89 = cir.cmp(lt, %87, %88) : !s32i, !cir.bool loc(#loc552)
    cir.brcond %89 ^bb37, ^bb41 loc(#loc208)
  ^bb37:  // pred: ^bb36
    cir.br ^bb38 loc(#loc553)
  ^bb38:  // pred: ^bb37
    %90 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
    %91 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    %92 = cir.ptr_stride(%90 : !cir.ptr<!s32i>, %91 : !s32i), !cir.ptr<!s32i> loc(#loc212)
    %93 = cir.load %92 : !cir.ptr<!s32i>, !s32i loc(#loc210)
    cir.call @printIntLine(%93) : (!s32i) -> () loc(#loc213)
    cir.br ^bb39 loc(#loc203)
  ^bb39:  // pred: ^bb38
    cir.br ^bb40 loc(#loc203)
  ^bb40:  // pred: ^bb39
    %94 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
    %95 = cir.unary(inc, %94) : !s32i, !s32i loc(#loc215)
    cir.store %95, %0 : !s32i, !cir.ptr<!s32i> loc(#loc554)
    cir.br ^bb36 loc(#loc550)
  ^bb41:  // pred: ^bb36
    cir.br ^bb42 loc(#loc203)
  ^bb42:  // pred: ^bb41
    cir.br ^bb44 loc(#loc196)
  ^bb43:  // pred: ^bb33
    %96 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc132)
    %97 = cir.cast(array_to_ptrdecay, %96 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc132)
    cir.call @printLine(%97) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    cir.br ^bb44 loc(#loc188)
  ^bb44:  // 2 preds: ^bb42, ^bb43
    cir.br ^bb45 loc(#loc188)
  ^bb45:  // pred: ^bb44
    %98 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
    %99 = cir.cast(bitcast, %98 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc217)
    cir.call @free(%99) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc218)
    cir.br ^bb46 loc(#loc160)
  ^bb46:  // pred: ^bb45
    cir.br ^bb47 loc(#loc152)
  ^bb47:  // 2 preds: ^bb10, ^bb46
    cir.br ^bb48 loc(#loc152)
  ^bb48:  // pred: ^bb47
    cir.return loc(#loc134)
  } loc(#loc520)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc556)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc557)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc558)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc227)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc228)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc559)
    cir.br ^bb1 loc(#loc560)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc232)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc233)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc561)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc562)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc235)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc235)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc235)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc235)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc235)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc235)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc235)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc235)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc235)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc235)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc235)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc235)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc235)
    cir.br ^bb5(%23 : !u32i) loc(#loc235)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc235)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc235)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc235)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc235)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc235)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc235)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc235)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc235)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc235)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc235)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc235)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc235)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc235)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc235)
    cir.br ^bb5(%39 : !u32i) loc(#loc235)
  ^bb5(%40: !u32i loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":127:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc235)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc235)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc563)
    cir.br ^bb7 loc(#loc231)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc231)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc564)
  ^bb9:  // pred: ^bb8
    %42 = cir.const #cir.int<5> : !s32i loc(#loc239)
    %43 = cir.const #cir.int<5> : !s32i loc(#loc240)
    %44 = cir.cmp(eq, %42, %43) : !s32i, !cir.bool loc(#loc565)
    cir.brcond %44 ^bb10, ^bb46 loc(#loc566)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc567)
  ^bb11:  // pred: ^bb10
    %45 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc244)
    %46 = cir.const #cir.int<10> : !s32i loc(#loc245)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc245)
    %48 = cir.const #cir.int<4> : !u64i loc(#loc568)
    %49 = cir.binop(mul, %47, %48) : !u64i loc(#loc569)
    %50 = cir.call @malloc(%49) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc244)
    %51 = cir.cast(bitcast, %50 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc570)
    cir.store %51, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc557)
    cir.br ^bb12 loc(#loc571)
  ^bb12:  // pred: ^bb11
    %52 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc250)
    %53 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc251)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc251)
    %55 = cir.cmp(eq, %52, %54) : !cir.ptr<!s32i>, !cir.bool loc(#loc572)
    cir.brcond %55 ^bb13, ^bb14 loc(#loc573)
  ^bb13:  // pred: ^bb12
    %56 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc253)
    %57 = cir.const #cir.int<1> : !s32i loc(#loc254)
    %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc255)
    cir.call @exit(%58) : (!s32i) -> () extra(#fn_attr) loc(#loc253)
    cir.br ^bb14 loc(#loc249)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc249)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc574)
  ^bb16:  // pred: ^bb15
    %59 = cir.const #cir.int<0> : !s32i loc(#loc258)
    cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc575)
    cir.br ^bb17 loc(#loc574)
  ^bb17:  // 2 preds: ^bb16, ^bb21
    %60 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    %61 = cir.const #cir.int<10> : !s32i loc(#loc261)
    %62 = cir.cmp(lt, %60, %61) : !s32i, !cir.bool loc(#loc576)
    cir.brcond %62 ^bb18, ^bb22 loc(#loc262)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc577)
  ^bb19:  // pred: ^bb18
    %63 = cir.const #cir.int<0> : !s32i loc(#loc264)
    %64 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc265)
    %65 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    %66 = cir.ptr_stride(%64 : !cir.ptr<!s32i>, %65 : !s32i), !cir.ptr<!s32i> loc(#loc267)
    cir.store %63, %66 : !s32i, !cir.ptr<!s32i> loc(#loc578)
    cir.br ^bb20 loc(#loc257)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc257)
  ^bb21:  // pred: ^bb20
    %67 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc268)
    %68 = cir.unary(inc, %67) : !s32i, !s32i loc(#loc269)
    cir.store %68, %0 : !s32i, !cir.ptr<!s32i> loc(#loc579)
    cir.br ^bb17 loc(#loc574)
  ^bb22:  // pred: ^bb17
    cir.br ^bb23 loc(#loc257)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc580)
  ^bb24:  // pred: ^bb23
    %69 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    %70 = cir.const #cir.int<0> : !s32i loc(#loc273)
    %71 = cir.cmp(ge, %69, %70) : !s32i, !cir.bool loc(#loc581)
    cir.brcond %71 ^bb25, ^bb30 loc(#loc274)
  ^bb25:  // pred: ^bb24
    %72 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc275)
    %73 = cir.const #cir.int<10> : !s32i loc(#loc276)
    %74 = cir.cmp(lt, %72, %73) : !s32i, !cir.bool loc(#loc582)
    cir.brcond %74 ^bb26, ^bb27 loc(#loc274)
  ^bb26:  // pred: ^bb25
    %75 = cir.const #true loc(#loc274)
    cir.br ^bb28(%75 : !cir.bool) loc(#loc274)
  ^bb27:  // pred: ^bb25
    %76 = cir.const #false loc(#loc274)
    cir.br ^bb28(%76 : !cir.bool) loc(#loc274)
  ^bb28(%77: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:27)):  // 2 preds: ^bb26, ^bb27
    cir.br ^bb29 loc(#loc274)
  ^bb29:  // pred: ^bb28
    cir.br ^bb31(%77 : !cir.bool) loc(#loc274)
  ^bb30:  // pred: ^bb24
    %78 = cir.const #false loc(#loc274)
    cir.br ^bb31(%78 : !cir.bool) loc(#loc274)
  ^bb31(%79: !cir.bool loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:27)):  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc274)
  ^bb32:  // pred: ^bb31
    cir.brcond %79 ^bb33, ^bb42 loc(#loc583)
  ^bb33:  // pred: ^bb32
    %80 = cir.const #cir.int<1> : !s32i loc(#loc281)
    %81 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc282)
    %82 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc283)
    %83 = cir.ptr_stride(%81 : !cir.ptr<!s32i>, %82 : !s32i), !cir.ptr<!s32i> loc(#loc284)
    cir.store %80, %83 : !s32i, !cir.ptr<!s32i> loc(#loc584)
    cir.br ^bb34 loc(#loc585)
  ^bb34:  // pred: ^bb33
    %84 = cir.const #cir.int<0> : !s32i loc(#loc287)
    cir.store %84, %0 : !s32i, !cir.ptr<!s32i> loc(#loc586)
    cir.br ^bb35 loc(#loc585)
  ^bb35:  // 2 preds: ^bb34, ^bb39
    %85 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc289)
    %86 = cir.const #cir.int<10> : !s32i loc(#loc290)
    %87 = cir.cmp(lt, %85, %86) : !s32i, !cir.bool loc(#loc587)
    cir.brcond %87 ^bb36, ^bb40 loc(#loc291)
  ^bb36:  // pred: ^bb35
    cir.br ^bb37 loc(#loc588)
  ^bb37:  // pred: ^bb36
    %88 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc293)
    %89 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc294)
    %90 = cir.ptr_stride(%88 : !cir.ptr<!s32i>, %89 : !s32i), !cir.ptr<!s32i> loc(#loc295)
    %91 = cir.load %90 : !cir.ptr<!s32i>, !s32i loc(#loc293)
    cir.call @printIntLine(%91) : (!s32i) -> () loc(#loc296)
    cir.br ^bb38 loc(#loc286)
  ^bb38:  // pred: ^bb37
    cir.br ^bb39 loc(#loc286)
  ^bb39:  // pred: ^bb38
    %92 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc297)
    %93 = cir.unary(inc, %92) : !s32i, !s32i loc(#loc298)
    cir.store %93, %0 : !s32i, !cir.ptr<!s32i> loc(#loc589)
    cir.br ^bb35 loc(#loc585)
  ^bb40:  // pred: ^bb35
    cir.br ^bb41 loc(#loc286)
  ^bb41:  // pred: ^bb40
    cir.br ^bb43 loc(#loc279)
  ^bb42:  // pred: ^bb32
    %94 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc299)
    %95 = cir.cast(array_to_ptrdecay, %94 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc299)
    cir.call @printLine(%95) : (!cir.ptr<!s8i>) -> () loc(#loc300)
    cir.br ^bb43 loc(#loc271)
  ^bb43:  // 2 preds: ^bb41, ^bb42
    cir.br ^bb44 loc(#loc271)
  ^bb44:  // pred: ^bb43
    %96 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc301)
    %97 = cir.cast(bitcast, %96 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc301)
    cir.call @free(%97) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc302)
    cir.br ^bb45 loc(#loc243)
  ^bb45:  // pred: ^bb44
    cir.br ^bb46 loc(#loc238)
  ^bb46:  // 2 preds: ^bb9, ^bb45
    cir.br ^bb47 loc(#loc238)
  ^bb47:  // pred: ^bb46
    cir.return loc(#loc220)
  } loc(#loc555)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc591)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc592)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc593)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc311)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc312)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc594)
    cir.br ^bb1 loc(#loc595)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc316)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc317)
    %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc596)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc597)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc321)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc321)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc322)
    cir.br ^bb4 loc(#loc319)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<7> : !s32i loc(#loc323)
    cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc598)
    cir.br ^bb4 loc(#loc315)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc315)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc599)
  ^bb6:  // pred: ^bb5
    %11 = cir.const #cir.int<5> : !s32i loc(#loc327)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc328)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc600)
    cir.brcond %13 ^bb7, ^bb35 loc(#loc601)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc602)
  ^bb8:  // pred: ^bb7
    %14 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc332)
    %15 = cir.const #cir.int<10> : !s32i loc(#loc333)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc333)
    %17 = cir.const #cir.int<4> : !u64i loc(#loc603)
    %18 = cir.binop(mul, %16, %17) : !u64i loc(#loc604)
    %19 = cir.call @malloc(%18) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc332)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc605)
    cir.store %20, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc592)
    cir.br ^bb9 loc(#loc606)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc338)
    %22 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc339)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc339)
    %24 = cir.cmp(eq, %21, %23) : !cir.ptr<!s32i>, !cir.bool loc(#loc607)
    cir.brcond %24 ^bb10, ^bb11 loc(#loc608)
  ^bb10:  // pred: ^bb9
    %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc341)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc342)
    %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc343)
    cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc341)
    cir.br ^bb11 loc(#loc337)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc337)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc609)
  ^bb13:  // pred: ^bb12
    %28 = cir.const #cir.int<0> : !s32i loc(#loc346)
    cir.store %28, %0 : !s32i, !cir.ptr<!s32i> loc(#loc610)
    cir.br ^bb14 loc(#loc609)
  ^bb14:  // 2 preds: ^bb13, ^bb18
    %29 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc348)
    %30 = cir.const #cir.int<10> : !s32i loc(#loc349)
    %31 = cir.cmp(lt, %29, %30) : !s32i, !cir.bool loc(#loc611)
    cir.brcond %31 ^bb15, ^bb19 loc(#loc350)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc612)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<0> : !s32i loc(#loc352)
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc353)
    %34 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc354)
    %35 = cir.ptr_stride(%33 : !cir.ptr<!s32i>, %34 : !s32i), !cir.ptr<!s32i> loc(#loc355)
    cir.store %32, %35 : !s32i, !cir.ptr<!s32i> loc(#loc613)
    cir.br ^bb17 loc(#loc345)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc345)
  ^bb18:  // pred: ^bb17
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc356)
    %37 = cir.unary(inc, %36) : !s32i, !s32i loc(#loc357)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc614)
    cir.br ^bb14 loc(#loc609)
  ^bb19:  // pred: ^bb14
    cir.br ^bb20 loc(#loc345)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc615)
  ^bb21:  // pred: ^bb20
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc360)
    %39 = cir.const #cir.int<0> : !s32i loc(#loc361)
    %40 = cir.cmp(ge, %38, %39) : !s32i, !cir.bool loc(#loc616)
    cir.brcond %40 ^bb22, ^bb31 loc(#loc617)
  ^bb22:  // pred: ^bb21
    %41 = cir.const #cir.int<1> : !s32i loc(#loc365)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc366)
    %43 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc367)
    %44 = cir.ptr_stride(%42 : !cir.ptr<!s32i>, %43 : !s32i), !cir.ptr<!s32i> loc(#loc368)
    cir.store %41, %44 : !s32i, !cir.ptr<!s32i> loc(#loc618)
    cir.br ^bb23 loc(#loc619)
  ^bb23:  // pred: ^bb22
    %45 = cir.const #cir.int<0> : !s32i loc(#loc371)
    cir.store %45, %0 : !s32i, !cir.ptr<!s32i> loc(#loc620)
    cir.br ^bb24 loc(#loc619)
  ^bb24:  // 2 preds: ^bb23, ^bb28
    %46 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc373)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc374)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc621)
    cir.brcond %48 ^bb25, ^bb29 loc(#loc375)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc622)
  ^bb26:  // pred: ^bb25
    %49 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc377)
    %50 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc378)
    %51 = cir.ptr_stride(%49 : !cir.ptr<!s32i>, %50 : !s32i), !cir.ptr<!s32i> loc(#loc379)
    %52 = cir.load %51 : !cir.ptr<!s32i>, !s32i loc(#loc377)
    cir.call @printIntLine(%52) : (!s32i) -> () loc(#loc380)
    cir.br ^bb27 loc(#loc370)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc370)
  ^bb28:  // pred: ^bb27
    %53 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc381)
    %54 = cir.unary(inc, %53) : !s32i, !s32i loc(#loc382)
    cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc623)
    cir.br ^bb24 loc(#loc619)
  ^bb29:  // pred: ^bb24
    cir.br ^bb30 loc(#loc370)
  ^bb30:  // pred: ^bb29
    cir.br ^bb32 loc(#loc363)
  ^bb31:  // pred: ^bb21
    %55 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc383)
    %56 = cir.cast(array_to_ptrdecay, %55 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc383)
    cir.call @printLine(%56) : (!cir.ptr<!s8i>) -> () loc(#loc384)
    cir.br ^bb32 loc(#loc359)
  ^bb32:  // 2 preds: ^bb30, ^bb31
    cir.br ^bb33 loc(#loc359)
  ^bb33:  // pred: ^bb32
    %57 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc385)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc385)
    cir.call @free(%58) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc386)
    cir.br ^bb34 loc(#loc331)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc326)
  ^bb35:  // 2 preds: ^bb6, ^bb34
    cir.br ^bb36 loc(#loc326)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc304)
  } loc(#loc590)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc625)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc626)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc627)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc395)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc396)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc628)
    cir.br ^bb1 loc(#loc629)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<5> : !s32i loc(#loc400)
    %6 = cir.const #cir.int<5> : !s32i loc(#loc401)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc630)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc631)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc403)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc632)
    cir.br ^bb3 loc(#loc399)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc399)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc633)
  ^bb5:  // pred: ^bb4
    %9 = cir.const #cir.int<5> : !s32i loc(#loc407)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc408)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc634)
    cir.brcond %11 ^bb6, ^bb34 loc(#loc635)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc636)
  ^bb7:  // pred: ^bb6
    %12 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc412)
    %13 = cir.const #cir.int<10> : !s32i loc(#loc413)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc413)
    %15 = cir.const #cir.int<4> : !u64i loc(#loc637)
    %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc638)
    %17 = cir.call @malloc(%16) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc412)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc639)
    cir.store %18, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc626)
    cir.br ^bb8 loc(#loc640)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc418)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc419)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc419)
    %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc641)
    cir.brcond %22 ^bb9, ^bb10 loc(#loc642)
  ^bb9:  // pred: ^bb8
    %23 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc421)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc422)
    %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc423)
    cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc421)
    cir.br ^bb10 loc(#loc417)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc417)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc643)
  ^bb12:  // pred: ^bb11
    %26 = cir.const #cir.int<0> : !s32i loc(#loc426)
    cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc644)
    cir.br ^bb13 loc(#loc643)
  ^bb13:  // 2 preds: ^bb12, ^bb17
    %27 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc428)
    %28 = cir.const #cir.int<10> : !s32i loc(#loc429)
    %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc645)
    cir.brcond %29 ^bb14, ^bb18 loc(#loc430)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc646)
  ^bb15:  // pred: ^bb14
    %30 = cir.const #cir.int<0> : !s32i loc(#loc432)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc433)
    %32 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc434)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc435)
    cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc647)
    cir.br ^bb16 loc(#loc425)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc425)
  ^bb17:  // pred: ^bb16
    %34 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc436)
    %35 = cir.unary(inc, %34) : !s32i, !s32i loc(#loc437)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc648)
    cir.br ^bb13 loc(#loc643)
  ^bb18:  // pred: ^bb13
    cir.br ^bb19 loc(#loc425)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc649)
  ^bb20:  // pred: ^bb19
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc440)
    %37 = cir.const #cir.int<0> : !s32i loc(#loc441)
    %38 = cir.cmp(ge, %36, %37) : !s32i, !cir.bool loc(#loc650)
    cir.brcond %38 ^bb21, ^bb30 loc(#loc651)
  ^bb21:  // pred: ^bb20
    %39 = cir.const #cir.int<1> : !s32i loc(#loc445)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc446)
    %41 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc447)
    %42 = cir.ptr_stride(%40 : !cir.ptr<!s32i>, %41 : !s32i), !cir.ptr<!s32i> loc(#loc448)
    cir.store %39, %42 : !s32i, !cir.ptr<!s32i> loc(#loc652)
    cir.br ^bb22 loc(#loc653)
  ^bb22:  // pred: ^bb21
    %43 = cir.const #cir.int<0> : !s32i loc(#loc451)
    cir.store %43, %0 : !s32i, !cir.ptr<!s32i> loc(#loc654)
    cir.br ^bb23 loc(#loc653)
  ^bb23:  // 2 preds: ^bb22, ^bb27
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc453)
    %45 = cir.const #cir.int<10> : !s32i loc(#loc454)
    %46 = cir.cmp(lt, %44, %45) : !s32i, !cir.bool loc(#loc655)
    cir.brcond %46 ^bb24, ^bb28 loc(#loc455)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc656)
  ^bb25:  // pred: ^bb24
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc457)
    %48 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc458)
    %49 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %48 : !s32i), !cir.ptr<!s32i> loc(#loc459)
    %50 = cir.load %49 : !cir.ptr<!s32i>, !s32i loc(#loc457)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc460)
    cir.br ^bb26 loc(#loc450)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc450)
  ^bb27:  // pred: ^bb26
    %51 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc461)
    %52 = cir.unary(inc, %51) : !s32i, !s32i loc(#loc462)
    cir.store %52, %0 : !s32i, !cir.ptr<!s32i> loc(#loc657)
    cir.br ^bb23 loc(#loc653)
  ^bb28:  // pred: ^bb23
    cir.br ^bb29 loc(#loc450)
  ^bb29:  // pred: ^bb28
    cir.br ^bb31 loc(#loc443)
  ^bb30:  // pred: ^bb20
    %53 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc463)
    %54 = cir.cast(array_to_ptrdecay, %53 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc463)
    cir.call @printLine(%54) : (!cir.ptr<!s8i>) -> () loc(#loc464)
    cir.br ^bb31 loc(#loc439)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc439)
  ^bb32:  // pred: ^bb31
    %55 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc465)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc465)
    cir.call @free(%56) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc466)
    cir.br ^bb33 loc(#loc411)
  ^bb33:  // pred: ^bb32
    cir.br ^bb34 loc(#loc406)
  ^bb34:  // 2 preds: ^bb5, ^bb33
    cir.br ^bb35 loc(#loc406)
  ^bb35:  // pred: ^bb34
    cir.return loc(#loc388)
  } loc(#loc624)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":61:27)
#loc12 = loc("/usr/include/stdlib.h":687:1)
#loc13 = loc("/usr/include/stdlib.h":687:32)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":27:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":66:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":40:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":40:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:58)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":29:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":31:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":31:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":31:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":32:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":36:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":32:8)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":32:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":33:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":35:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":37:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":65:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":37:8)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":37:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":38:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":39:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":64:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:35)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:42)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:47)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":41:57)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:13)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:43)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:17)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:27)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:34)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:40)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":42:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":47:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:18)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:27)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":45:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":46:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":46:17)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":46:24)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":46:25)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:34)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":44:33)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":50:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":62:13)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":50:17)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":50:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":51:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":58:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":60:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":52:32)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":52:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":52:24)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":52:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:17)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":57:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:21)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:32)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:30)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":55:17)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":56:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":56:41)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":56:42)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":56:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":54:36)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":61:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":63:18)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":63:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":250:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":256:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":252:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":252:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":253:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":253:14)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":254:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":254:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":255:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":255:14)
#loc103 = loc("/usr/include/stdlib.h":575:1)
#loc104 = loc("/usr/include/stdlib.h":575:41)
#loc105 = loc("/usr/include/time.h":76:1)
#loc106 = loc("/usr/include/time.h":76:38)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":272:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":274:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":277:15)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":279:15)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":267:1)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":282:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":268:1)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":270:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":270:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":270:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":272:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":273:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":273:62)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":274:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":277:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":278:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":278:61)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":279:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":281:12)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":281:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":86:19)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":111:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":73:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":116:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":91:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":91:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:58)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":75:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":75:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":77:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":77:12)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":77:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":78:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":82:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":78:8)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":78:27)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":79:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":81:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":83:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":115:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":83:8)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":83:27)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":84:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":87:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":89:5)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":86:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":90:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":114:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:35)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:42)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:47)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":92:57)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:43)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:17)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:27)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:33)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:34)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:40)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":93:39)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":98:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:22)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:25)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:29)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:27)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":96:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":97:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":97:17)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":97:24)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":97:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:34)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":95:33)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":112:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:17)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:25)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:30)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:38)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":100:40)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":101:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":108:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":110:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":102:32)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":102:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":102:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":102:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":107:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:28)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:32)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":105:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":106:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":106:41)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":106:42)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":106:21)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:37)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":104:36)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":111:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":113:18)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":113:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":119:1)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":157:1)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":132:13)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":132:17)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:58)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":121:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":121:9)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":123:13)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":123:12)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":123:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":124:5)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":128:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":124:8)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":124:27)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":125:5)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":127:9)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":129:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":156:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":129:8)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":129:27)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":130:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":131:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":155:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:35)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:42)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:47)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":133:57)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:13)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:43)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:17)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:27)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:33)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:34)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:40)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":134:39)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":139:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:22)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:18)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:29)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:27)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":137:13)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":138:29)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":138:17)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":138:24)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":138:25)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:34)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":136:33)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":153:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:17)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:25)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:30)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:38)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":141:40)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":142:13)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":149:13)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":151:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":143:32)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":143:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":143:24)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":143:28)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:17)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":148:17)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:25)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:21)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:28)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:32)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:30)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":146:17)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":147:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":147:41)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":147:42)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":147:21)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:37)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":145:36)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":152:27)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":152:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":154:18)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":154:13)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":160:1)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":205:1)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":179:13)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":179:17)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:58)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":162:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":162:9)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":164:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":164:12)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":164:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":165:5)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":175:5)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":165:8)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":165:27)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":166:5)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":169:5)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":171:5)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":168:19)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":168:9)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":174:16)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":174:9)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":176:5)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":204:5)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":176:8)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":176:27)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":177:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":178:9)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":203:9)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:35)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:42)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:47)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":180:57)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:13)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:43)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:17)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:27)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:33)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:34)
#loc342 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:40)
#loc343 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":181:39)
#loc344 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:13)
#loc345 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":186:13)
#loc346 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:22)
#loc347 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:18)
#loc348 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:25)
#loc349 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:29)
#loc350 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:27)
#loc351 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":184:13)
#loc352 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":185:29)
#loc353 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":185:17)
#loc354 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":185:24)
#loc355 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":185:25)
#loc356 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:34)
#loc357 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":183:33)
#loc358 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":189:13)
#loc359 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":201:13)
#loc360 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":189:17)
#loc361 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":189:25)
#loc362 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":190:13)
#loc363 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":197:13)
#loc364 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":199:13)
#loc365 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":191:32)
#loc366 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":191:17)
#loc367 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":191:24)
#loc368 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":191:28)
#loc369 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:17)
#loc370 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":196:17)
#loc371 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:25)
#loc372 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:21)
#loc373 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:28)
#loc374 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:32)
#loc375 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:30)
#loc376 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":194:17)
#loc377 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":195:34)
#loc378 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":195:41)
#loc379 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":195:42)
#loc380 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":195:21)
#loc381 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:37)
#loc382 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":193:36)
#loc383 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":200:27)
#loc384 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":200:17)
#loc385 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":202:18)
#loc386 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":202:13)
#loc387 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":208:1)
#loc388 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":248:1)
#loc389 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":222:13)
#loc390 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":222:17)
#loc391 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:13)
#loc392 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:58)
#loc393 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":210:5)
#loc394 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":210:9)
#loc395 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":212:13)
#loc396 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":212:12)
#loc397 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":212:5)
#loc398 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":213:5)
#loc399 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":218:5)
#loc400 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":213:8)
#loc401 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":213:27)
#loc402 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":214:5)
#loc403 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":217:16)
#loc404 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":217:9)
#loc405 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":219:5)
#loc406 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":247:5)
#loc407 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":219:8)
#loc408 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":219:27)
#loc409 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":220:5)
#loc410 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":221:9)
#loc411 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":246:9)
#loc412 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:35)
#loc413 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:42)
#loc414 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:47)
#loc415 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":223:57)
#loc416 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:13)
#loc417 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:43)
#loc418 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:17)
#loc419 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:27)
#loc420 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:33)
#loc421 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:34)
#loc422 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:40)
#loc423 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":224:39)
#loc424 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:13)
#loc425 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":229:13)
#loc426 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:22)
#loc427 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:18)
#loc428 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:25)
#loc429 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:29)
#loc430 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:27)
#loc431 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":227:13)
#loc432 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":228:29)
#loc433 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":228:17)
#loc434 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":228:24)
#loc435 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":228:25)
#loc436 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:34)
#loc437 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":226:33)
#loc438 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":232:13)
#loc439 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":244:13)
#loc440 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":232:17)
#loc441 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":232:25)
#loc442 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":233:13)
#loc443 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":240:13)
#loc444 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":242:13)
#loc445 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":234:32)
#loc446 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":234:17)
#loc447 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":234:24)
#loc448 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":234:28)
#loc449 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:17)
#loc450 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":239:17)
#loc451 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:25)
#loc452 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:21)
#loc453 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:28)
#loc454 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:32)
#loc455 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:30)
#loc456 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":237:17)
#loc457 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":238:34)
#loc458 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":238:41)
#loc459 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":238:42)
#loc460 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":238:21)
#loc461 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:37)
#loc462 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":236:36)
#loc463 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":243:27)
#loc464 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":243:17)
#loc465 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":245:18)
#loc466 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_06.c":245:13)
#loc467 = loc(fused[#loc1, #loc2])
#loc468 = loc(fused[#loc3, #loc4])
#loc469 = loc(fused[#loc5, #loc6])
#loc470 = loc(fused[#loc7, #loc8])
#loc471 = loc(fused[#loc9, #loc10])
#loc472 = loc(fused[#loc12, #loc13])
#loc473 = loc(fused[#loc14, #loc15])
#loc474 = loc(fused[#loc16, #loc17])
#loc475 = loc(fused[#loc18, #loc19])
#loc476 = loc(fused[#loc20, #loc21])
#loc477 = loc(fused[#loc24, #loc22])
#loc478 = loc(fused[#loc25, #loc26])
#loc479 = loc(fused[#loc27, #loc28])
#loc480 = loc(fused[#loc29, #loc26])
#loc481 = loc(fused[#loc31, #loc30])
#loc482 = loc(fused[#loc32, #loc33])
#loc483 = loc(fused[#loc34, #loc35])
#loc484 = loc(fused[#loc36, #loc33])
#loc485 = loc(fused[#loc37, #loc38])
#loc486 = loc(fused[#loc41, #loc42])
#loc487 = loc(fused[#loc40, #loc42])
#loc488 = loc(fused[#loc39, #loc19])
#loc489 = loc(fused[#loc43, #loc44])
#loc490 = loc(fused[#loc45, #loc46])
#loc491 = loc(fused[#loc47, #loc44])
#loc492 = loc(fused[#loc51, #loc52])
#loc493 = loc(fused[#loc54, #loc53])
#loc494 = loc(fused[#loc55, #loc56])
#loc495 = loc(fused[#loc58, #loc52])
#loc496 = loc(fused[#loc60, #loc59])
#loc497 = loc(fused[#loc64, #loc63])
#loc498 = loc(fused[#loc65, #loc66])
#loc499 = loc(fused[#loc67, #loc68])
#loc500 = loc(fused[#loc69, #loc70, #loc71, #loc66])
#loc501 = loc(fused[#loc73, #loc72])
#loc502 = loc(fused[#loc76, #loc77])
#loc503 = loc(fused[#loc79, #loc78])
#loc504 = loc(fused[#loc80, #loc81])
#loc505 = loc(fused[#loc83, #loc77])
#loc506 = loc(fused[#loc89, #loc88])
#loc507 = loc(fused[#loc93, #loc94])
#loc508 = loc(fused[#loc95, #loc96])
#loc509 = loc(fused[#loc97, #loc98])
#loc510 = loc(fused[#loc99, #loc100])
#loc511 = loc(fused[#loc101, #loc102])
#loc512 = loc(fused[#loc103, #loc104])
#loc513 = loc(fused[#loc105, #loc106])
#loc514 = loc(fused[#loc111, #loc112])
#loc517 = loc(fused[#loc122, #loc123])
#loc518 = loc(fused[#loc126, #loc127])
#loc519 = loc(fused[#loc130, #loc129])
#loc520 = loc(fused[#loc133, #loc134])
#loc521 = loc(fused[#loc135, #loc136])
#loc522 = loc(fused[#loc137, #loc138])
#loc523 = loc(fused[#loc139, #loc140])
#loc524 = loc(fused[#loc143, #loc141])
#loc525 = loc(fused[#loc144, #loc145])
#loc526 = loc(fused[#loc146, #loc147])
#loc527 = loc(fused[#loc148, #loc145])
#loc528 = loc(fused[#loc150, #loc149])
#loc529 = loc(fused[#loc151, #loc152])
#loc530 = loc(fused[#loc153, #loc154])
#loc531 = loc(fused[#loc155, #loc156, #loc157, #loc152])
#loc532 = loc(fused[#loc159, #loc160])
#loc533 = loc(fused[#loc163, #loc164])
#loc534 = loc(fused[#loc162, #loc164])
#loc535 = loc(fused[#loc161, #loc138])
#loc536 = loc(fused[#loc165, #loc166])
#loc537 = loc(fused[#loc167, #loc168])
#loc538 = loc(fused[#loc169, #loc166])
#loc539 = loc(fused[#loc173, #loc174])
#loc540 = loc(fused[#loc176, #loc175])
#loc541 = loc(fused[#loc177, #loc178])
#loc542 = loc(fused[#loc180, #loc174])
#loc543 = loc(fused[#loc182, #loc181])
#loc544 = loc(fused[#loc186, #loc185])
#loc545 = loc(fused[#loc187, #loc188])
#loc546 = loc(fused[#loc189, #loc190])
#loc547 = loc(fused[#loc192, #loc194])
#loc548 = loc(fused[#loc195, #loc196, #loc197, #loc188])
#loc549 = loc(fused[#loc199, #loc198])
#loc550 = loc(fused[#loc202, #loc203])
#loc551 = loc(fused[#loc205, #loc204])
#loc552 = loc(fused[#loc206, #loc207])
#loc553 = loc(fused[#loc209, #loc203])
#loc554 = loc(fused[#loc215, #loc214])
#loc555 = loc(fused[#loc219, #loc220])
#loc556 = loc(fused[#loc221, #loc222])
#loc557 = loc(fused[#loc223, #loc224])
#loc558 = loc(fused[#loc225, #loc226])
#loc559 = loc(fused[#loc229, #loc227])
#loc560 = loc(fused[#loc230, #loc231])
#loc561 = loc(fused[#loc232, #loc233])
#loc562 = loc(fused[#loc234, #loc231])
#loc563 = loc(fused[#loc236, #loc235])
#loc564 = loc(fused[#loc237, #loc238])
#loc565 = loc(fused[#loc239, #loc240])
#loc566 = loc(fused[#loc241, #loc238])
#loc567 = loc(fused[#loc242, #loc243])
#loc568 = loc(fused[#loc246, #loc247])
#loc569 = loc(fused[#loc245, #loc247])
#loc570 = loc(fused[#loc244, #loc224])
#loc571 = loc(fused[#loc248, #loc249])
#loc572 = loc(fused[#loc250, #loc251])
#loc573 = loc(fused[#loc252, #loc249])
#loc574 = loc(fused[#loc256, #loc257])
#loc575 = loc(fused[#loc259, #loc258])
#loc576 = loc(fused[#loc260, #loc261])
#loc577 = loc(fused[#loc263, #loc257])
#loc578 = loc(fused[#loc265, #loc264])
#loc579 = loc(fused[#loc269, #loc268])
#loc580 = loc(fused[#loc270, #loc271])
#loc581 = loc(fused[#loc272, #loc273])
#loc582 = loc(fused[#loc275, #loc277])
#loc583 = loc(fused[#loc278, #loc279, #loc280, #loc271])
#loc584 = loc(fused[#loc282, #loc281])
#loc585 = loc(fused[#loc285, #loc286])
#loc586 = loc(fused[#loc288, #loc287])
#loc587 = loc(fused[#loc289, #loc290])
#loc588 = loc(fused[#loc292, #loc286])
#loc589 = loc(fused[#loc298, #loc297])
#loc590 = loc(fused[#loc303, #loc304])
#loc591 = loc(fused[#loc305, #loc306])
#loc592 = loc(fused[#loc307, #loc308])
#loc593 = loc(fused[#loc309, #loc310])
#loc594 = loc(fused[#loc313, #loc311])
#loc595 = loc(fused[#loc314, #loc315])
#loc596 = loc(fused[#loc316, #loc317])
#loc597 = loc(fused[#loc318, #loc319, #loc320, #loc315])
#loc598 = loc(fused[#loc324, #loc323])
#loc599 = loc(fused[#loc325, #loc326])
#loc600 = loc(fused[#loc327, #loc328])
#loc601 = loc(fused[#loc329, #loc326])
#loc602 = loc(fused[#loc330, #loc331])
#loc603 = loc(fused[#loc334, #loc335])
#loc604 = loc(fused[#loc333, #loc335])
#loc605 = loc(fused[#loc332, #loc308])
#loc606 = loc(fused[#loc336, #loc337])
#loc607 = loc(fused[#loc338, #loc339])
#loc608 = loc(fused[#loc340, #loc337])
#loc609 = loc(fused[#loc344, #loc345])
#loc610 = loc(fused[#loc347, #loc346])
#loc611 = loc(fused[#loc348, #loc349])
#loc612 = loc(fused[#loc351, #loc345])
#loc613 = loc(fused[#loc353, #loc352])
#loc614 = loc(fused[#loc357, #loc356])
#loc615 = loc(fused[#loc358, #loc359])
#loc616 = loc(fused[#loc360, #loc361])
#loc617 = loc(fused[#loc362, #loc363, #loc364, #loc359])
#loc618 = loc(fused[#loc366, #loc365])
#loc619 = loc(fused[#loc369, #loc370])
#loc620 = loc(fused[#loc372, #loc371])
#loc621 = loc(fused[#loc373, #loc374])
#loc622 = loc(fused[#loc376, #loc370])
#loc623 = loc(fused[#loc382, #loc381])
#loc624 = loc(fused[#loc387, #loc388])
#loc625 = loc(fused[#loc389, #loc390])
#loc626 = loc(fused[#loc391, #loc392])
#loc627 = loc(fused[#loc393, #loc394])
#loc628 = loc(fused[#loc397, #loc395])
#loc629 = loc(fused[#loc398, #loc399])
#loc630 = loc(fused[#loc400, #loc401])
#loc631 = loc(fused[#loc402, #loc399])
#loc632 = loc(fused[#loc404, #loc403])
#loc633 = loc(fused[#loc405, #loc406])
#loc634 = loc(fused[#loc407, #loc408])
#loc635 = loc(fused[#loc409, #loc406])
#loc636 = loc(fused[#loc410, #loc411])
#loc637 = loc(fused[#loc414, #loc415])
#loc638 = loc(fused[#loc413, #loc415])
#loc639 = loc(fused[#loc412, #loc392])
#loc640 = loc(fused[#loc416, #loc417])
#loc641 = loc(fused[#loc418, #loc419])
#loc642 = loc(fused[#loc420, #loc417])
#loc643 = loc(fused[#loc424, #loc425])
#loc644 = loc(fused[#loc427, #loc426])
#loc645 = loc(fused[#loc428, #loc429])
#loc646 = loc(fused[#loc431, #loc425])
#loc647 = loc(fused[#loc433, #loc432])
#loc648 = loc(fused[#loc437, #loc436])
#loc649 = loc(fused[#loc438, #loc439])
#loc650 = loc(fused[#loc440, #loc441])
#loc651 = loc(fused[#loc442, #loc443, #loc444, #loc439])
#loc652 = loc(fused[#loc446, #loc445])
#loc653 = loc(fused[#loc449, #loc450])
#loc654 = loc(fused[#loc452, #loc451])
#loc655 = loc(fused[#loc453, #loc454])
#loc656 = loc(fused[#loc456, #loc450])
#loc657 = loc(fused[#loc462, #loc461])
