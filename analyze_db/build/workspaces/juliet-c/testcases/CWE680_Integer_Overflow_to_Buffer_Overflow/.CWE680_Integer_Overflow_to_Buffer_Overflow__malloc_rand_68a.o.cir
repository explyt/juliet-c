!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":33:12)
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc41)
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc42)
  cir.func no_proto private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68b_badSink(...) loc(#loc43)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc45)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc14)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc14)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc14)
    %9 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %10 = cir.shift(left, %8 : !u32i, %9 : !s32i) -> !u32i loc(#loc14)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc14)
    %13 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc14)
    %15 = cir.binop(xor, %10, %14) : !u32i loc(#loc14)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc14)
    %18 = cir.binop(xor, %15, %17) : !u32i loc(#loc14)
    cir.br ^bb3(%18 : !u32i) loc(#loc14)
  ^bb2:  // pred: ^bb0
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc14)
    %21 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %22 = cir.shift(left, %20 : !u32i, %21 : !s32i) -> !u32i loc(#loc14)
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc14)
    %25 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc14)
    %27 = cir.binop(xor, %22, %26) : !u32i loc(#loc14)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc14)
    %30 = cir.binop(xor, %27, %29) : !u32i loc(#loc14)
    %31 = cir.unary(minus, %30) : !u32i, !u32i loc(#loc14)
    %32 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc14)
    %34 = cir.binop(sub, %31, %33) : !u32i loc(#loc14)
    cir.br ^bb3(%34 : !u32i) loc(#loc14)
  ^bb3(%35: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":33:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    %36 = cir.cast(integral, %35 : !u32i), !s32i loc(#loc14)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    %38 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_badData : !cir.ptr<!s32i> loc(#loc42)
    cir.store %37, %38 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    %39 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68b_badSink : !cir.ptr<!cir.func<(...)>> loc(#loc49)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc49)
    cir.call %40() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc8)
  } loc(#loc44)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc51)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc21)
  } loc(#loc50)
  cir.global external dsolocal @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc52)
  cir.func no_proto private @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68b_goodG2BSink(...) loc(#loc53)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc33)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc35)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %5 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68_goodG2BData : !cir.ptr<!s32i> loc(#loc52)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %6 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68b_goodG2BSink : !cir.ptr<!cir.func<(...)>> loc(#loc59)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...)>>), !cir.ptr<!cir.func<()>> loc(#loc59)
    cir.call %7() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc29)
  } loc(#loc54)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":19:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":19:5)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":25:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":25:74)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":27:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":36:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":29:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":29:9)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":31:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":31:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":31:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":33:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":34:74)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":34:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":35:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":35:73)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":57:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":60:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":59:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":59:13)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":20:1)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":20:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":43:1)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":43:78)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":46:1)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":55:1)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":48:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":48:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":50:13)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":50:12)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":50:5)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":52:12)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":52:5)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":53:78)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":53:5)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":54:5)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_68a.c":54:77)
#loc41 = loc(fused[#loc1, #loc2])
#loc42 = loc(fused[#loc3, #loc4])
#loc43 = loc(fused[#loc5, #loc6])
#loc44 = loc(fused[#loc7, #loc8])
#loc45 = loc(fused[#loc9, #loc10])
#loc46 = loc(fused[#loc13, #loc11])
#loc47 = loc(fused[#loc15, #loc14])
#loc48 = loc(fused[#loc17, #loc16])
#loc49 = loc(fused[#loc18, #loc19])
#loc50 = loc(fused[#loc20, #loc21])
#loc51 = loc(fused[#loc22, #loc23])
#loc52 = loc(fused[#loc24, #loc25])
#loc53 = loc(fused[#loc26, #loc27])
#loc54 = loc(fused[#loc28, #loc29])
#loc55 = loc(fused[#loc30, #loc31])
#loc56 = loc(fused[#loc34, #loc32])
#loc57 = loc(fused[#loc36, #loc35])
#loc58 = loc(fused[#loc38, #loc37])
#loc59 = loc(fused[#loc39, #loc40])
