!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc342)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc343)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc344)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc345)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc346)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc347)
  cir.func private @printIntLine(!s32i) loc(#loc348)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc349)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc352)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc353)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc27)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc357)
        cir.condition(%8) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc360)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc360)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc360)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc43)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc44)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc44)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc44)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc44)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc44)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc44)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc44)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc44)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc343)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc45)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc46)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc362)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc51)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc52)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc364)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc55)
              } loc(#loc363)
            } loc(#loc361)
          } loc(#loc359)
        } loc(#loc358)
        cir.yield loc(#loc30)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc57)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
        cir.yield loc(#loc355)
      } loc(#loc355)
    } loc(#loc355)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc60)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc367)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc63)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc368)
        cir.condition(%8) loc(#loc64)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc371)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc372)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc72)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc73)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc73)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc373)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc374)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc72)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc375)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc372)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc79)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc377)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc82)
                %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc83)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc81)
              } loc(#loc378)
            } loc(#loc376)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc86)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc380)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc89)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc381)
                cir.condition(%21) loc(#loc90)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc92)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc95)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc383)
                } loc(#loc382)
                cir.yield loc(#loc85)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc97)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc384)
                cir.yield loc(#loc379)
              } loc(#loc379)
            } loc(#loc379)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc101)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc386)
              cir.if %20 {
                %21 = cir.const #cir.int<1> : !s32i loc(#loc105)
                %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
                %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc107)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc108)
                cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc388)
                cir.scope {
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc111)
                  cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc390)
                  cir.for : cond {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                    %27 = cir.const #cir.int<10> : !s32i loc(#loc114)
                    %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc391)
                    cir.condition(%28) loc(#loc115)
                  } body {
                    cir.scope {
                      %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
                      %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                      %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc119)
                      %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                      cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc120)
                    } loc(#loc392)
                    cir.yield loc(#loc110)
                  } step {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc122)
                    cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc393)
                    cir.yield loc(#loc389)
                  } loc(#loc389)
                } loc(#loc389)
              } else {
                %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc123)
              } loc(#loc387)
            } loc(#loc385)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc124)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc125)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc125)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
          } loc(#loc370)
        } loc(#loc369)
        cir.yield loc(#loc59)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc126)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc127)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc394)
        cir.yield loc(#loc366)
      } loc(#loc366)
    } loc(#loc366)
    cir.return loc(#loc20)
  } loc(#loc350)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc396)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc130)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc397)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc132)
    cir.return loc(#loc129)
  } loc(#loc395)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc134)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc399)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc400)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc401)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc143)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc402)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc147)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc404)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc150)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc405)
        cir.condition(%8) loc(#loc151)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc408)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc408)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc408)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc159)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc160)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc160)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc160)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc160)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc160)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc160)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc160)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc160)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc343)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc161)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc162)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc163)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc410)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc167)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc168)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc412)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc171)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc171)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc172)
              } loc(#loc411)
            } loc(#loc409)
          } loc(#loc407)
        } loc(#loc406)
        cir.yield loc(#loc146)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc174)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
        cir.yield loc(#loc403)
      } loc(#loc403)
    } loc(#loc403)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc177)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc415)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc180)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc416)
        cir.condition(%8) loc(#loc181)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc419)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc420)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc189)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc190)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc190)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc421)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc422)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc423)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc420)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc195)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc196)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc425)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc198)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc199)
                %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc200)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc198)
              } loc(#loc426)
            } loc(#loc424)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc203)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc428)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc206)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc429)
                cir.condition(%21) loc(#loc207)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc209)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc212)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc431)
                } loc(#loc430)
                cir.yield loc(#loc202)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc214)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc432)
                cir.yield loc(#loc427)
              } loc(#loc427)
            } loc(#loc427)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc217)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc218)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc434)
              %21 = cir.ternary(%20, true {
                %22 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
                %23 = cir.const #cir.int<10> : !s32i loc(#loc221)
                %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc435)
                %25 = cir.ternary(%24, true {
                  %26 = cir.const #true loc(#loc219)
                  cir.yield %26 : !cir.bool loc(#loc219)
                }, false {
                  %26 = cir.const #false loc(#loc219)
                  cir.yield %26 : !cir.bool loc(#loc219)
                }) : (!cir.bool) -> !cir.bool loc(#loc219)
                cir.yield %25 : !cir.bool loc(#loc219)
              }, false {
                %22 = cir.const #false loc(#loc219)
                cir.yield %22 : !cir.bool loc(#loc219)
              }) : (!cir.bool) -> !cir.bool loc(#loc219)
              cir.if %21 {
                %22 = cir.const #cir.int<1> : !s32i loc(#loc226)
                %23 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc227)
                %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc229)
                cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc437)
                cir.scope {
                  %26 = cir.const #cir.int<0> : !s32i loc(#loc232)
                  cir.store %26, %6 : !s32i, !cir.ptr<!s32i> loc(#loc439)
                  cir.for : cond {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                    %28 = cir.const #cir.int<10> : !s32i loc(#loc235)
                    %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc440)
                    cir.condition(%29) loc(#loc236)
                  } body {
                    cir.scope {
                      %27 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
                      %28 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                      %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc240)
                      %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc238)
                      cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc241)
                    } loc(#loc441)
                    cir.yield loc(#loc231)
                  } step {
                    %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                    %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc243)
                    cir.store %28, %6 : !s32i, !cir.ptr<!s32i> loc(#loc442)
                    cir.yield loc(#loc438)
                  } loc(#loc438)
                } loc(#loc438)
              } else {
                %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc134)
                %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc134)
                cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc244)
              } loc(#loc436)
            } loc(#loc433)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc245)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc246)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc246)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc245)
          } loc(#loc418)
        } loc(#loc417)
        cir.yield loc(#loc176)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc247)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc248)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc443)
        cir.yield loc(#loc414)
      } loc(#loc414)
    } loc(#loc414)
    cir.return loc(#loc136)
  } loc(#loc398)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc445)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc446)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc447)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc256)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc257)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc448)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc261)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc264)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc451)
        cir.condition(%8) loc(#loc265)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc267)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc453)
        } loc(#loc452)
        cir.yield loc(#loc260)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc270)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc454)
        cir.yield loc(#loc449)
      } loc(#loc449)
    } loc(#loc449)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc273)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc456)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc275)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc276)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc457)
        cir.condition(%8) loc(#loc277)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc460)
            %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc461)
            %8 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc285)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc286)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc286)
            %11 = cir.const #cir.int<4> : !u64i loc(#loc462)
            %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc463)
            %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc285)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc464)
            cir.store %14, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc461)
            cir.scope {
              %18 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc291)
              %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc292)
              %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc292)
              %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !cir.bool loc(#loc466)
              cir.if %21 {
                %22 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc294)
                %23 = cir.const #cir.int<1> : !s32i loc(#loc295)
                %24 = cir.unary(minus, %23) nsw : !s32i, !s32i loc(#loc296)
                cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc294)
              } loc(#loc467)
            } loc(#loc465)
            cir.scope {
              %18 = cir.const #cir.int<0> : !s32i loc(#loc299)
              cir.store %18, %6 : !s32i, !cir.ptr<!s32i> loc(#loc469)
              cir.for : cond {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc301)
                %20 = cir.const #cir.int<10> : !s32i loc(#loc302)
                %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc470)
                cir.condition(%21) loc(#loc303)
              } body {
                cir.scope {
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc305)
                  %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc306)
                  %21 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
                  %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc308)
                  cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc472)
                } loc(#loc471)
                cir.yield loc(#loc298)
              } step {
                %19 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc309)
                %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc310)
                cir.store %20, %6 : !s32i, !cir.ptr<!s32i> loc(#loc473)
                cir.yield loc(#loc468)
              } loc(#loc468)
            } loc(#loc468)
            cir.scope {
              %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc313)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc314)
              %20 = cir.cmp(ge, %18, %19) : !s32i, !cir.bool loc(#loc475)
              cir.if %20 {
                %21 = cir.const #cir.int<1> : !s32i loc(#loc318)
                %22 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc319)
                %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc321)
                cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc477)
                cir.scope {
                  %25 = cir.const #cir.int<0> : !s32i loc(#loc324)
                  cir.store %25, %6 : !s32i, !cir.ptr<!s32i> loc(#loc479)
                  cir.for : cond {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc326)
                    %27 = cir.const #cir.int<10> : !s32i loc(#loc327)
                    %28 = cir.cmp(lt, %26, %27) : !s32i, !cir.bool loc(#loc480)
                    cir.condition(%28) loc(#loc328)
                  } body {
                    cir.scope {
                      %26 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc330)
                      %27 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc331)
                      %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc332)
                      %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc330)
                      cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc333)
                    } loc(#loc481)
                    cir.yield loc(#loc323)
                  } step {
                    %26 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc334)
                    %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc335)
                    cir.store %27, %6 : !s32i, !cir.ptr<!s32i> loc(#loc482)
                    cir.yield loc(#loc478)
                  } loc(#loc478)
                } loc(#loc478)
              } else {
                %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc336)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc336)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc337)
              } loc(#loc476)
            } loc(#loc474)
            %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc338)
            %16 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc339)
            %17 = cir.cast(bitcast, %16 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc339)
            cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc338)
          } loc(#loc459)
        } loc(#loc458)
        cir.yield loc(#loc272)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc340)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc341)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc483)
        cir.yield loc(#loc455)
      } loc(#loc455)
    } loc(#loc455)
    cir.return loc(#loc250)
  } loc(#loc444)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":42:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":70:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":75:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":26:11)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":27:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":27:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:12)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":29:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":45:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":31:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":32:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":44:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":33:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":33:49)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":43:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:36)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:53)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":35:63)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":36:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":39:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":41:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":38:40)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":42:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:24)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":30:23)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":74:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:16)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:20)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":47:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":48:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":73:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":49:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":49:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:58)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:35)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:42)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:47)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":50:57)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:13)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:27)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:34)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:40)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":51:39)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":56:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:22)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:18)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":54:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:29)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:17)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":55:25)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:34)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":53:33)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":71:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":59:25)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":60:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":67:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":69:13)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:32)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:17)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":61:28)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":66:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:28)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:32)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:30)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":64:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:41)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:42)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":65:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:37)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":63:36)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":70:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":72:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":72:18)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:24)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":46:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":178:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":182:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":180:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":180:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":181:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":181:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":127:27)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":82:1)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":132:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":84:11)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":85:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":85:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:12)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":87:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":103:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:16)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:20)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":89:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":90:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":102:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":91:13)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":91:49)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:13)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":101:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:23)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:36)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:53)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:17)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":93:63)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":94:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":97:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":99:13)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:24)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":96:40)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":100:27)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":100:17)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:24)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":88:23)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":131:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:16)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:20)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:18)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":105:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":106:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":130:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":107:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":107:17)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:58)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:35)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:42)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:47)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":108:57)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:43)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:17)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:27)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:33)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:34)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:40)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":109:39)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:13)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":114:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:22)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:18)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:25)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:29)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:27)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":112:13)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:29)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:17)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:24)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":113:25)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:34)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":111:33)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":128:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:25)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:27)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:30)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:38)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":116:40)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":117:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":124:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":126:13)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:32)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:17)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:24)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":118:28)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:17)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":123:17)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:25)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:21)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:28)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:30)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":121:17)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:34)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:41)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:42)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":122:21)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:37)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":120:36)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":127:17)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":129:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":129:18)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:24)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":104:23)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":135:1)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":176:1)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:5)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":137:11)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":138:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":138:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:13)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:12)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":140:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:5)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":146:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:13)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:16)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:20)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:18)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":142:5)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":145:16)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":145:9)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:24)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":141:23)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:5)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":175:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:13)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:16)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:20)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:18)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":148:5)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":149:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":174:9)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":150:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":150:17)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:13)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:58)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:35)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:42)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:47)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":151:57)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:13)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:43)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:27)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:33)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:34)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:40)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":152:39)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":157:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:22)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:18)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:25)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:29)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:27)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":155:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:29)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:17)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:24)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":156:25)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:34)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":154:33)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":172:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:17)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":160:25)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":161:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":168:13)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":170:13)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:32)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:17)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:24)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":162:28)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:17)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":167:17)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:25)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:21)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:28)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:32)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:30)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":165:17)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:34)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:41)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:42)
#loc333 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":166:21)
#loc334 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:37)
#loc335 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":164:36)
#loc336 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":171:27)
#loc337 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":171:17)
#loc338 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":173:13)
#loc339 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":173:18)
#loc340 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:24)
#loc341 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_17.c":147:23)
#loc342 = loc(fused[#loc1, #loc2])
#loc343 = loc(fused[#loc3, #loc4])
#loc344 = loc(fused[#loc5, #loc6])
#loc345 = loc(fused[#loc7, #loc8])
#loc346 = loc(fused[#loc10, #loc11])
#loc347 = loc(fused[#loc12, #loc13])
#loc348 = loc(fused[#loc14, #loc15])
#loc349 = loc(fused[#loc17, #loc18])
#loc350 = loc(fused[#loc19, #loc20])
#loc351 = loc(fused[#loc21, #loc22])
#loc352 = loc(fused[#loc21, #loc23])
#loc353 = loc(fused[#loc24, #loc25])
#loc354 = loc(fused[#loc28, #loc26])
#loc355 = loc(fused[#loc29, #loc30])
#loc356 = loc(fused[#loc32, #loc31])
#loc357 = loc(fused[#loc33, #loc34])
#loc358 = loc(fused[#loc36, #loc30])
#loc359 = loc(fused[#loc37, #loc38])
#loc360 = loc(fused[#loc39, #loc40])
#loc361 = loc(fused[#loc41, #loc42])
#loc362 = loc(fused[#loc46, #loc47])
#loc363 = loc(fused[#loc48, #loc49, #loc50, #loc42])
#loc364 = loc(fused[#loc53, #loc54])
#loc365 = loc(fused[#loc57, #loc56])
#loc366 = loc(fused[#loc58, #loc59])
#loc367 = loc(fused[#loc61, #loc60])
#loc368 = loc(fused[#loc62, #loc63])
#loc369 = loc(fused[#loc65, #loc59])
#loc370 = loc(fused[#loc66, #loc67])
#loc371 = loc(fused[#loc68, #loc69])
#loc372 = loc(fused[#loc70, #loc71])
#loc373 = loc(fused[#loc74, #loc75])
#loc374 = loc(fused[#loc73, #loc75])
#loc375 = loc(fused[#loc72, #loc71])
#loc376 = loc(fused[#loc76, #loc77])
#loc377 = loc(fused[#loc78, #loc79])
#loc378 = loc(fused[#loc80, #loc77])
#loc379 = loc(fused[#loc84, #loc85])
#loc380 = loc(fused[#loc87, #loc86])
#loc381 = loc(fused[#loc88, #loc89])
#loc382 = loc(fused[#loc91, #loc85])
#loc383 = loc(fused[#loc93, #loc92])
#loc384 = loc(fused[#loc97, #loc96])
#loc385 = loc(fused[#loc98, #loc99])
#loc386 = loc(fused[#loc100, #loc101])
#loc387 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc388 = loc(fused[#loc106, #loc105])
#loc389 = loc(fused[#loc109, #loc110])
#loc390 = loc(fused[#loc112, #loc111])
#loc391 = loc(fused[#loc113, #loc114])
#loc392 = loc(fused[#loc116, #loc110])
#loc393 = loc(fused[#loc122, #loc121])
#loc394 = loc(fused[#loc127, #loc126])
#loc395 = loc(fused[#loc128, #loc129])
#loc396 = loc(fused[#loc130, #loc131])
#loc397 = loc(fused[#loc132, #loc133])
#loc398 = loc(fused[#loc135, #loc136])
#loc399 = loc(fused[#loc137, #loc138])
#loc400 = loc(fused[#loc137, #loc139])
#loc401 = loc(fused[#loc140, #loc141])
#loc402 = loc(fused[#loc144, #loc142])
#loc403 = loc(fused[#loc145, #loc146])
#loc404 = loc(fused[#loc148, #loc147])
#loc405 = loc(fused[#loc149, #loc150])
#loc406 = loc(fused[#loc152, #loc146])
#loc407 = loc(fused[#loc153, #loc154])
#loc408 = loc(fused[#loc155, #loc156])
#loc409 = loc(fused[#loc157, #loc158])
#loc410 = loc(fused[#loc162, #loc163])
#loc411 = loc(fused[#loc164, #loc165, #loc166, #loc158])
#loc412 = loc(fused[#loc169, #loc170])
#loc413 = loc(fused[#loc174, #loc173])
#loc414 = loc(fused[#loc175, #loc176])
#loc415 = loc(fused[#loc178, #loc177])
#loc416 = loc(fused[#loc179, #loc180])
#loc417 = loc(fused[#loc182, #loc176])
#loc418 = loc(fused[#loc183, #loc184])
#loc419 = loc(fused[#loc185, #loc186])
#loc420 = loc(fused[#loc187, #loc188])
#loc421 = loc(fused[#loc191, #loc192])
#loc422 = loc(fused[#loc190, #loc192])
#loc423 = loc(fused[#loc189, #loc188])
#loc424 = loc(fused[#loc193, #loc194])
#loc425 = loc(fused[#loc195, #loc196])
#loc426 = loc(fused[#loc197, #loc194])
#loc427 = loc(fused[#loc201, #loc202])
#loc428 = loc(fused[#loc204, #loc203])
#loc429 = loc(fused[#loc205, #loc206])
#loc430 = loc(fused[#loc208, #loc202])
#loc431 = loc(fused[#loc210, #loc209])
#loc432 = loc(fused[#loc214, #loc213])
#loc433 = loc(fused[#loc215, #loc216])
#loc434 = loc(fused[#loc217, #loc218])
#loc435 = loc(fused[#loc220, #loc222])
#loc436 = loc(fused[#loc223, #loc224, #loc225, #loc216])
#loc437 = loc(fused[#loc227, #loc226])
#loc438 = loc(fused[#loc230, #loc231])
#loc439 = loc(fused[#loc233, #loc232])
#loc440 = loc(fused[#loc234, #loc235])
#loc441 = loc(fused[#loc237, #loc231])
#loc442 = loc(fused[#loc243, #loc242])
#loc443 = loc(fused[#loc248, #loc247])
#loc444 = loc(fused[#loc249, #loc250])
#loc445 = loc(fused[#loc251, #loc252])
#loc446 = loc(fused[#loc251, #loc253])
#loc447 = loc(fused[#loc254, #loc255])
#loc448 = loc(fused[#loc258, #loc256])
#loc449 = loc(fused[#loc259, #loc260])
#loc450 = loc(fused[#loc262, #loc261])
#loc451 = loc(fused[#loc263, #loc264])
#loc452 = loc(fused[#loc266, #loc260])
#loc453 = loc(fused[#loc268, #loc267])
#loc454 = loc(fused[#loc270, #loc269])
#loc455 = loc(fused[#loc271, #loc272])
#loc456 = loc(fused[#loc274, #loc273])
#loc457 = loc(fused[#loc275, #loc276])
#loc458 = loc(fused[#loc278, #loc272])
#loc459 = loc(fused[#loc279, #loc280])
#loc460 = loc(fused[#loc281, #loc282])
#loc461 = loc(fused[#loc283, #loc284])
#loc462 = loc(fused[#loc287, #loc288])
#loc463 = loc(fused[#loc286, #loc288])
#loc464 = loc(fused[#loc285, #loc284])
#loc465 = loc(fused[#loc289, #loc290])
#loc466 = loc(fused[#loc291, #loc292])
#loc467 = loc(fused[#loc293, #loc290])
#loc468 = loc(fused[#loc297, #loc298])
#loc469 = loc(fused[#loc300, #loc299])
#loc470 = loc(fused[#loc301, #loc302])
#loc471 = loc(fused[#loc304, #loc298])
#loc472 = loc(fused[#loc306, #loc305])
#loc473 = loc(fused[#loc310, #loc309])
#loc474 = loc(fused[#loc311, #loc312])
#loc475 = loc(fused[#loc313, #loc314])
#loc476 = loc(fused[#loc315, #loc316, #loc317, #loc312])
#loc477 = loc(fused[#loc319, #loc318])
#loc478 = loc(fused[#loc322, #loc323])
#loc479 = loc(fused[#loc325, #loc324])
#loc480 = loc(fused[#loc326, #loc327])
#loc481 = loc(fused[#loc329, #loc323])
#loc482 = loc(fused[#loc335, #loc334])
#loc483 = loc(fused[#loc341, #loc340])
