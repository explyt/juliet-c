!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE617_Reachable_Assertion__rand_15.c":34:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc69)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__rand_15.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc8)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_15_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc73)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
    cir.br ^bb2 loc(#loc16)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb9 [
      6: ^bb4
    ] loc(#loc16)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb5, ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb4
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc20)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc20)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc20)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc20)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc20)
    cir.br ^bb7(%19 : !u32i) loc(#loc20)
  ^bb6:  // pred: ^bb4
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc20)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc20)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc20)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc20)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc20)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc20)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc20)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc20)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc20)
    cir.br ^bb7(%35 : !u32i) loc(#loc20)
  ^bb7(%36: !u32i loc("CWE617_Reachable_Assertion__rand_15.c":34:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc20)
  ^bb8:  // pred: ^bb7
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc20)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.br ^bb10 loc(#loc22)
  ^bb9:  // pred: ^bb2
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb10 loc(#loc24)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc17)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc8)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc8)
  ^bb13:  // pred: ^bb12
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc8)
    %42 = cir.cmp(gt, %40, %41) : !s32i, !cir.bool loc(#loc8)
    cir.brcond %42 ^bb14, ^bb15 loc(#loc8)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16 loc(#loc8)
  ^bb15:  // pred: ^bb13
    %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc8)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc8)
    %45 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc8)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc8)
    %47 = cir.const #cir.int<42> : !s32i loc(#loc8)
    %48 = cir.cast(integral, %47 : !s32i), !u32i loc(#loc8)
    %49 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc8)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @__assert_fail(%44, %46, %48, %50) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc8)
    cir.br ^bb16 loc(#loc8)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc8)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc8)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc10)
  } loc(#loc72)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc78)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc41)
    cir.br ^bb2 loc(#loc39)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc39)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb6 loc(#loc45)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<5> : !s32i loc(#loc46)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc46)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.br ^bb6 loc(#loc49)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc40)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc31)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc31)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc31)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc31)
  ^bb11:  // pred: ^bb9
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
    %16 = cir.const #cir.int<67> : !s32i loc(#loc31)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc31)
    %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc31)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb12 loc(#loc31)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc31)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc31)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc33)
  } loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc56)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc60)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc58)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc63)
    %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc62)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb6 loc(#loc65)
  ^bb5:  // pred: ^bb2
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc50)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc50)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc50)
    cir.brcond %11 ^bb10, ^bb11 loc(#loc50)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc50)
  ^bb11:  // pred: ^bb9
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc50)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc50)
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc50)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc50)
    %16 = cir.const #cir.int<88> : !s32i loc(#loc50)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc50)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb12 loc(#loc50)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc50)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc50)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc52)
  } loc(#loc85)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE617_Reachable_Assertion__rand_15.c":38:19)
#loc6 = loc("/usr/include/assert.h":67:1)
#loc7 = loc("/usr/include/assert.h":69:43)
#loc8 = loc("CWE617_Reachable_Assertion__rand_15.c":42:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_15.c":25:1)
#loc10 = loc("CWE617_Reachable_Assertion__rand_15.c":43:1)
#loc11 = loc("CWE617_Reachable_Assertion__rand_15.c":27:5)
#loc12 = loc("CWE617_Reachable_Assertion__rand_15.c":27:9)
#loc13 = loc("CWE617_Reachable_Assertion__rand_15.c":29:13)
#loc14 = loc("CWE617_Reachable_Assertion__rand_15.c":29:12)
#loc15 = loc("CWE617_Reachable_Assertion__rand_15.c":29:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_15.c":30:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_15.c":40:5)
#loc18 = loc("CWE617_Reachable_Assertion__rand_15.c":30:12)
#loc19 = loc("CWE617_Reachable_Assertion__rand_15.c":32:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_15.c":34:9)
#loc22 = loc("CWE617_Reachable_Assertion__rand_15.c":35:9)
#loc23 = loc("CWE617_Reachable_Assertion__rand_15.c":38:9)
#loc24 = loc("CWE617_Reachable_Assertion__rand_15.c":39:9)
#loc25 = loc("CWE617_Reachable_Assertion__rand_15.c":91:1)
#loc26 = loc("CWE617_Reachable_Assertion__rand_15.c":95:1)
#loc27 = loc("CWE617_Reachable_Assertion__rand_15.c":93:5)
#loc28 = loc("CWE617_Reachable_Assertion__rand_15.c":93:14)
#loc29 = loc("CWE617_Reachable_Assertion__rand_15.c":94:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_15.c":94:14)
#loc31 = loc("CWE617_Reachable_Assertion__rand_15.c":67:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_15.c":50:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_15.c":68:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_15.c":52:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_15.c":52:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_15.c":54:13)
#loc37 = loc("CWE617_Reachable_Assertion__rand_15.c":54:12)
#loc38 = loc("CWE617_Reachable_Assertion__rand_15.c":54:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_15.c":55:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_15.c":65:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_15.c":55:12)
#loc42 = loc("CWE617_Reachable_Assertion__rand_15.c":57:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_15.c":59:19)
#loc44 = loc("CWE617_Reachable_Assertion__rand_15.c":59:9)
#loc45 = loc("CWE617_Reachable_Assertion__rand_15.c":60:9)
#loc46 = loc("CWE617_Reachable_Assertion__rand_15.c":63:16)
#loc47 = loc("CWE617_Reachable_Assertion__rand_15.c":63:29)
#loc48 = loc("CWE617_Reachable_Assertion__rand_15.c":63:9)
#loc49 = loc("CWE617_Reachable_Assertion__rand_15.c":64:9)
#loc50 = loc("CWE617_Reachable_Assertion__rand_15.c":88:5)
#loc51 = loc("CWE617_Reachable_Assertion__rand_15.c":71:1)
#loc52 = loc("CWE617_Reachable_Assertion__rand_15.c":89:1)
#loc53 = loc("CWE617_Reachable_Assertion__rand_15.c":73:5)
#loc54 = loc("CWE617_Reachable_Assertion__rand_15.c":73:9)
#loc55 = loc("CWE617_Reachable_Assertion__rand_15.c":75:13)
#loc56 = loc("CWE617_Reachable_Assertion__rand_15.c":75:12)
#loc57 = loc("CWE617_Reachable_Assertion__rand_15.c":75:5)
#loc58 = loc("CWE617_Reachable_Assertion__rand_15.c":76:5)
#loc59 = loc("CWE617_Reachable_Assertion__rand_15.c":86:5)
#loc60 = loc("CWE617_Reachable_Assertion__rand_15.c":76:12)
#loc61 = loc("CWE617_Reachable_Assertion__rand_15.c":78:5)
#loc62 = loc("CWE617_Reachable_Assertion__rand_15.c":80:16)
#loc63 = loc("CWE617_Reachable_Assertion__rand_15.c":80:29)
#loc64 = loc("CWE617_Reachable_Assertion__rand_15.c":80:9)
#loc65 = loc("CWE617_Reachable_Assertion__rand_15.c":81:9)
#loc66 = loc("CWE617_Reachable_Assertion__rand_15.c":84:19)
#loc67 = loc("CWE617_Reachable_Assertion__rand_15.c":84:9)
#loc68 = loc("CWE617_Reachable_Assertion__rand_15.c":85:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc6, #loc7])
#loc72 = loc(fused[#loc9, #loc10])
#loc73 = loc(fused[#loc11, #loc12])
#loc74 = loc(fused[#loc15, #loc13])
#loc75 = loc(fused[#loc16, #loc17])
#loc76 = loc(fused[#loc21, #loc20])
#loc77 = loc(fused[#loc25, #loc26])
#loc78 = loc(fused[#loc27, #loc28])
#loc79 = loc(fused[#loc29, #loc30])
#loc80 = loc(fused[#loc32, #loc33])
#loc81 = loc(fused[#loc34, #loc35])
#loc82 = loc(fused[#loc38, #loc36])
#loc83 = loc(fused[#loc39, #loc40])
#loc84 = loc(fused[#loc48, #loc47])
#loc85 = loc(fused[#loc51, #loc52])
#loc86 = loc(fused[#loc53, #loc54])
#loc87 = loc(fused[#loc57, #loc55])
#loc88 = loc(fused[#loc58, #loc59])
#loc89 = loc(fused[#loc64, #loc63])
