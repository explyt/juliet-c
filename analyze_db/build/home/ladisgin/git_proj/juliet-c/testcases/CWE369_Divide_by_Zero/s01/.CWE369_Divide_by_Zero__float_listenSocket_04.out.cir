!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":398:10)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":398:14)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":398:20)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":398:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc604 = loc(fused[#loc178, #loc179])
#loc605 = loc(fused[#loc180, #loc181])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc534)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc535)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc536)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc537)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc538)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc539)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc540)
  cir.func private @close(!s32i) -> !s32i loc(#loc541)
  cir.func private @printIntLine(!s32i) loc(#loc542)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc544)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc23)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc545)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc27)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc549)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc550)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc551)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc552)
          %8 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc553)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc36)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc551)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc38)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc552)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc43)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc44)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc45)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc52)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc52)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc557)
                cir.if %56 {
                  cir.break loc(#loc54)
                } loc(#loc558)
              } loc(#loc556)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc559)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc57)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc560)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc561)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc62)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc62)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc562)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc65)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc563)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc69)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc70)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc564)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
                %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc566)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc567)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc567)
                %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc81)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc82)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc82)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc568)
                cir.if %60 {
                  cir.break loc(#loc84)
                } loc(#loc569)
              } loc(#loc565)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                %54 = cir.const #cir.int<5> : !s32i loc(#loc88)
                %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc89)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc90)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc571)
                cir.if %58 {
                  cir.break loc(#loc92)
                } loc(#loc572)
              } loc(#loc570)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc94)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc95)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc96)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc573)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc102)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc102)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc575)
                cir.if %56 {
                  cir.break loc(#loc104)
                } loc(#loc576)
              } loc(#loc574)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc106)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
              %38 = cir.const #cir.int<20> : !s32i loc(#loc107)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc108)
              %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc107)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc107)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc109)
              %43 = cir.call @recv(%35, %37, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc110)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc577)
              cir.scope {
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc116)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc116)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc579)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc117)
                  cir.yield %58 : !cir.bool loc(#loc117)
                }, false {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc119)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc580)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc117)
                    cir.yield %62 : !cir.bool loc(#loc117)
                  }, false {
                    %62 = cir.const #false loc(#loc117)
                    cir.yield %62 : !cir.bool loc(#loc117)
                  }) : (!cir.bool) -> !cir.bool loc(#loc117)
                  cir.yield %61 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.if %57 {
                  cir.break loc(#loc121)
                } loc(#loc581)
              } loc(#loc578)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc122)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc122)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
              %48 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc124)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc124)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc582)
              %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc125)
              %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc126)
              %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc126)
              cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc583)
              cir.yield loc(#loc42)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
              cir.condition(%14) loc(#loc129)
            } loc(#loc554)
          } loc(#loc554)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc133)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc585)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc136)
            } loc(#loc586)
          } loc(#loc584)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc140)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc140)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc588)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc142)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc143)
            } loc(#loc589)
          } loc(#loc587)
        } loc(#loc548)
      } loc(#loc547)
    } loc(#loc546)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc146)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc146)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc593)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc152)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc153)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc153)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc594)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc594)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc593)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc154)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc155)
        } loc(#loc592)
      } loc(#loc591)
    } loc(#loc590)
    cir.return loc(#loc20)
  } loc(#loc543)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc596)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc158)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc597)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc160)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc598)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc162)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc599)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc164)
    cir.return loc(#loc157)
  } loc(#loc595)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc600)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc601)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc602)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc175)
  cir.func @main(%arg0: !s32i loc(fused[#loc178, #loc179]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc180, #loc181])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc604)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc605)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc177)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc182)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc183)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc184)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc184)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc185)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc172)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc606)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_04_good() : () -> () loc(#loc187)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc173)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc174)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc607)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_04_bad() : () -> () loc(#loc191)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc175)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc194)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc608)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc608)
    cir.return %17 : !s32i loc(#loc608)
  } loc(#loc603)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc196)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc197)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc610)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc202)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc611)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc206)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc206)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc615)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc616)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc617)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc618)
          %8 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc619)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc215)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc215)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc617)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc217)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc217)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc618)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc222)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc223)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc224)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc225)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc621)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc231)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc231)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc623)
                cir.if %56 {
                  cir.break loc(#loc233)
                } loc(#loc624)
              } loc(#loc622)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc625)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc236)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc626)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc627)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc241)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc241)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc628)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc243)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc243)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc629)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc245)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc245)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc246)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc630)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc632)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc633)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc633)
                %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc256)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc257)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc257)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc634)
                cir.if %60 {
                  cir.break loc(#loc259)
                } loc(#loc635)
              } loc(#loc631)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc262)
                %54 = cir.const #cir.int<5> : !s32i loc(#loc263)
                %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc264)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc265)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc265)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc637)
                cir.if %58 {
                  cir.break loc(#loc267)
                } loc(#loc638)
              } loc(#loc636)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc268)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc269)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc270)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc271)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc639)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc276)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc277)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc277)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc641)
                cir.if %56 {
                  cir.break loc(#loc279)
                } loc(#loc642)
              } loc(#loc640)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc280)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc281)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc281)
              %38 = cir.const #cir.int<20> : !s32i loc(#loc282)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc283)
              %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc282)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc282)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc284)
              %43 = cir.call @recv(%35, %37, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc285)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc285)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc643)
              cir.scope {
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc291)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc291)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc645)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc292)
                  cir.yield %58 : !cir.bool loc(#loc292)
                }, false {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc294)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc646)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc292)
                    cir.yield %62 : !cir.bool loc(#loc292)
                  }, false {
                    %62 = cir.const #false loc(#loc292)
                    cir.yield %62 : !cir.bool loc(#loc292)
                  }) : (!cir.bool) -> !cir.bool loc(#loc292)
                  cir.yield %61 : !cir.bool loc(#loc292)
                }) : (!cir.bool) -> !cir.bool loc(#loc292)
                cir.if %57 {
                  cir.break loc(#loc296)
                } loc(#loc647)
              } loc(#loc644)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc297)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc297)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc298)
              %48 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc299)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc299)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc648)
              %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc300)
              %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc301)
              %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc301)
              cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc649)
              cir.yield loc(#loc221)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc304)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc304)
              cir.condition(%14) loc(#loc304)
            } loc(#loc620)
          } loc(#loc620)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc307)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc308)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc308)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc651)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc310)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc311)
            } loc(#loc652)
          } loc(#loc650)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc315)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc315)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc654)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc317)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc318)
            } loc(#loc655)
          } loc(#loc653)
        } loc(#loc614)
      } loc(#loc613)
    } loc(#loc612)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc321)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc321)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc196)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc196)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc325)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc328)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc328)
          %6 = cir.fabs %5 : !cir.double loc(#loc328)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc329)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc659)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc661)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc336)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc337)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc337)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc662)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc662)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc661)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc338)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc339)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc197)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc197)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc340)
          } loc(#loc660)
        } loc(#loc658)
      } loc(#loc657)
    } loc(#loc656)
    cir.return loc(#loc199)
  } loc(#loc609)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc664)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc345)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc665)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc349)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc349)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc669)
          %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc670)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc671)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc672)
          %8 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc673)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc358)
          %10 = cir.unary(minus, %9) : !s32i, !s32i loc(#loc358)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc671)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc360)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc360)
          cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc672)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc365)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc366)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc367)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc368)
              cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc675)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc374)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc374)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc677)
                cir.if %56 {
                  cir.break loc(#loc376)
                } loc(#loc678)
              } loc(#loc676)
              %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc679)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc379)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc680)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc681)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc384)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc384)
              %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc682)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc386)
              %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc386)
              %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
              %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
              cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc683)
              %27 = cir.const #cir.int<27015> : !s32i loc(#loc388)
              %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc388)
              %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc389)
              %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc684)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc394)
                %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc686)
                %55 = cir.const #cir.int<16> : !u64i loc(#loc687)
                %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc687)
                %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc399)
                %58 = cir.const #cir.int<1> : !s32i loc(#loc400)
                %59 = cir.unary(minus, %58) : !s32i, !s32i loc(#loc400)
                %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc688)
                cir.if %60 {
                  cir.break loc(#loc402)
                } loc(#loc689)
              } loc(#loc685)
              cir.scope {
                %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc405)
                %54 = cir.const #cir.int<5> : !s32i loc(#loc406)
                %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc407)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc408)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc408)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc691)
                cir.if %58 {
                  cir.break loc(#loc410)
                } loc(#loc692)
              } loc(#loc690)
              %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc411)
              %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc412)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc413)
              %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc414)
              cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc693)
              cir.scope {
                %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc419)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc420)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc420)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc695)
                cir.if %56 {
                  cir.break loc(#loc422)
                } loc(#loc696)
              } loc(#loc694)
              %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc423)
              %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc424)
              %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc424)
              %38 = cir.const #cir.int<20> : !s32i loc(#loc425)
              %39 = cir.const #cir.int<1> : !s32i loc(#loc426)
              %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc425)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc425)
              %42 = cir.const #cir.int<0> : !s32i loc(#loc427)
              %43 = cir.call @recv(%35, %37, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc428)
              %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc428)
              cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc697)
              cir.scope {
                %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc433)
                %54 = cir.const #cir.int<1> : !s32i loc(#loc434)
                %55 = cir.unary(minus, %54) : !s32i, !s32i loc(#loc434)
                %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc699)
                %57 = cir.ternary(%56, true {
                  %58 = cir.const #true loc(#loc435)
                  cir.yield %58 : !cir.bool loc(#loc435)
                }, false {
                  %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc436)
                  %59 = cir.const #cir.int<0> : !s32i loc(#loc437)
                  %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc700)
                  %61 = cir.ternary(%60, true {
                    %62 = cir.const #true loc(#loc435)
                    cir.yield %62 : !cir.bool loc(#loc435)
                  }, false {
                    %62 = cir.const #false loc(#loc435)
                    cir.yield %62 : !cir.bool loc(#loc435)
                  }) : (!cir.bool) -> !cir.bool loc(#loc435)
                  cir.yield %61 : !cir.bool loc(#loc435)
                }) : (!cir.bool) -> !cir.bool loc(#loc435)
                cir.if %57 {
                  cir.break loc(#loc439)
                } loc(#loc701)
              } loc(#loc698)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc440)
              %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc440)
              %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc441)
              %48 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc442)
              %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc442)
              cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc702)
              %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc443)
              %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc444)
              %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc444)
              cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc703)
              cir.yield loc(#loc364)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc447)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc447)
              cir.condition(%14) loc(#loc447)
            } loc(#loc674)
          } loc(#loc674)
          cir.scope {
            %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc450)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc451)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc451)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc705)
            cir.if %16 {
              %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc453)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc454)
            } loc(#loc706)
          } loc(#loc704)
          cir.scope {
            %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc457)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc458)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc458)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc708)
            cir.if %16 {
              %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc460)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc461)
            } loc(#loc709)
          } loc(#loc707)
        } loc(#loc668)
      } loc(#loc667)
    } loc(#loc666)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc464)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc464)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc468)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc468)
          %6 = cir.fabs %5 : !cir.double loc(#loc468)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc469)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc713)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc715)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc476)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc477)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc477)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc716)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc716)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc715)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc478)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc479)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc480)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc480)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc481)
          } loc(#loc714)
        } loc(#loc712)
      } loc(#loc711)
    } loc(#loc710)
    cir.return loc(#loc342)
  } loc(#loc663)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc718)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc486)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc719)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc490)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc490)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc494)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc494)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc495)
      } else {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc496)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc722)
      } loc(#loc721)
    } loc(#loc720)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc500)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc500)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc726)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc506)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc507)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc507)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc727)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc727)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc726)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc508)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc509)
        } loc(#loc725)
      } loc(#loc724)
    } loc(#loc723)
    cir.return loc(#loc483)
  } loc(#loc717)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc729)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc514)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc730)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc518)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc518)
      cir.if %3 {
        %4 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc520)
        cir.store %4, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc733)
      } loc(#loc732)
    } loc(#loc731)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc524)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc524)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc737)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc530)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc531)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc531)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc738)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc738)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc737)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc532)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc533)
        } loc(#loc736)
      } loc(#loc735)
    } loc(#loc734)
    cir.return loc(#loc511)
  } loc(#loc728)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_04.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":52:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":137:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":54:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":54:11)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":56:12)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":56:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":57:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":128:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":57:8)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":58:5)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":59:9)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":127:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":64:13)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":64:17)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":65:13)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":65:32)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":66:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":66:35)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":67:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":67:35)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":68:13)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":68:45)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":69:13)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":112:21)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:39)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:48)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:61)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:32)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:17)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":78:72)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":79:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":82:17)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":79:21)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":79:37)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":80:17)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":81:21)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:24)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:25)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:34)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:37)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:51)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:17)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":83:52)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":84:38)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":84:17)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":85:43)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":85:17)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":86:42)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":86:36)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":86:17)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":86:50)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:17)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":90:17)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:26)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:58)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:59)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:68)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:82)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:21)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":87:88)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":88:17)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":89:21)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":91:17)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":94:17)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":91:28)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":91:42)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":91:21)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":91:61)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":92:17)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":93:21)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:39)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:53)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:59)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:32)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:17)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":95:63)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":96:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":99:17)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":96:21)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":96:37)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":97:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":98:21)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:35)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:49)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:62)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:80)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:83)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:30)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:17)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":102:84)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":106:17)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:21)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:35)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:48)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:51)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":103:65)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":104:17)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":105:21)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":108:43)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":108:29)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":108:17)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":110:36)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":110:31)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":110:17)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":110:47)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":112:20)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":113:13)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":116:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":113:17)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":113:33)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":114:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":115:30)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":115:17)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":117:13)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":120:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":117:17)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":117:33)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":118:13)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":119:30)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":119:17)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":129:5)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":136:5)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":129:8)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":130:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":131:9)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":135:9)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":133:13)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":133:44)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":133:32)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":133:40)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":134:26)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":134:13)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":381:1)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":387:1)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":383:5)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":383:14)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":384:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":384:14)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":385:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":385:14)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":386:5)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":386:14)
#loc166 = loc("/usr/include/stdlib.h":575:1)
#loc167 = loc("/usr/include/stdlib.h":575:41)
#loc168 = loc("/usr/include/time.h":76:1)
#loc169 = loc("/usr/include/time.h":76:38)
#loc170 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":403:15)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":405:15)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":408:15)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":410:15)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":398:1)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":413:1)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":399:1)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":401:27)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":401:22)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":401:5)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":403:5)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":404:5)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":404:55)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":405:5)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":408:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":409:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":409:54)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":410:5)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":412:12)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":412:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":224:19)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":236:23)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":144:1)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":239:1)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":146:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":146:11)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":148:12)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":148:5)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":149:5)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":220:5)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":149:8)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":150:5)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":151:9)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":219:9)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":156:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":156:17)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":157:13)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":157:32)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":158:13)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":158:35)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":159:13)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":159:35)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":160:13)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":160:45)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":161:13)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":204:21)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:39)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:48)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:61)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:32)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:17)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":170:72)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":171:17)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":174:17)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":171:21)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":171:37)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":172:17)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":173:21)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:24)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:25)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:34)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:37)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:51)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:17)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":175:52)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":176:38)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":176:17)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":177:43)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":177:17)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":178:42)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":178:36)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":178:17)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":178:50)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:17)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":182:17)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:26)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:58)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:59)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:68)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:82)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:21)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":179:88)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":180:17)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":181:21)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":183:17)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":186:17)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":183:28)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":183:42)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":183:21)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":183:61)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":184:17)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":185:21)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:39)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:53)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:59)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:32)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:17)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":187:63)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":188:17)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":191:17)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":188:21)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":188:37)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":189:17)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":190:21)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:35)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:49)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:62)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:80)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:83)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:30)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:17)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":194:84)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:17)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":198:17)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:21)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:35)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:48)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:51)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":195:65)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":196:17)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":197:21)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":200:43)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":200:29)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":200:17)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":202:36)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":202:31)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":202:17)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":202:47)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":204:20)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":205:13)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":208:13)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":205:17)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":205:33)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":206:13)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":207:30)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":207:17)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":209:13)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":212:13)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":209:17)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":209:33)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":210:13)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":211:30)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":211:17)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":221:5)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":238:5)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":221:8)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":222:5)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":225:5)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":227:5)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":224:9)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":229:9)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":237:9)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":229:17)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":229:25)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":229:12)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":230:9)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":233:9)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":235:9)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":231:13)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":231:44)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":231:32)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":231:40)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":232:26)
#loc339 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":232:13)
#loc340 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":236:13)
#loc341 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":242:1)
#loc342 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":332:1)
#loc343 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":244:5)
#loc344 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":244:11)
#loc345 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":246:12)
#loc346 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":246:5)
#loc347 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":247:5)
#loc348 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":318:5)
#loc349 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":247:8)
#loc350 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":248:5)
#loc351 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":249:9)
#loc352 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":317:9)
#loc353 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":254:13)
#loc354 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":254:17)
#loc355 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":255:13)
#loc356 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":255:32)
#loc357 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":256:13)
#loc358 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":256:35)
#loc359 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":257:13)
#loc360 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":257:35)
#loc361 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":258:13)
#loc362 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":258:45)
#loc363 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":259:13)
#loc364 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":302:21)
#loc365 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:39)
#loc366 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:48)
#loc367 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:61)
#loc368 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:32)
#loc369 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:17)
#loc370 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":268:72)
#loc371 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":269:17)
#loc372 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":272:17)
#loc373 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":269:21)
#loc374 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":269:37)
#loc375 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":270:17)
#loc376 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":271:21)
#loc377 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:24)
#loc378 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:25)
#loc379 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:34)
#loc380 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:37)
#loc381 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:51)
#loc382 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:17)
#loc383 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":273:52)
#loc384 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":274:38)
#loc385 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":274:17)
#loc386 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":275:43)
#loc387 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":275:17)
#loc388 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":276:42)
#loc389 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":276:36)
#loc390 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":276:17)
#loc391 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":276:50)
#loc392 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:17)
#loc393 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":280:17)
#loc394 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:26)
#loc395 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:58)
#loc396 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:59)
#loc397 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:68)
#loc398 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:82)
#loc399 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:21)
#loc400 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":277:88)
#loc401 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":278:17)
#loc402 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":279:21)
#loc403 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":281:17)
#loc404 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":284:17)
#loc405 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":281:28)
#loc406 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":281:42)
#loc407 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":281:21)
#loc408 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":281:61)
#loc409 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":282:17)
#loc410 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":283:21)
#loc411 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:39)
#loc412 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:53)
#loc413 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:59)
#loc414 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:32)
#loc415 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:17)
#loc416 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":285:63)
#loc417 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":286:17)
#loc418 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":289:17)
#loc419 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":286:21)
#loc420 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":286:37)
#loc421 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":287:17)
#loc422 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":288:21)
#loc423 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:35)
#loc424 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:49)
#loc425 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:62)
#loc426 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:80)
#loc427 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:83)
#loc428 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:30)
#loc429 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:17)
#loc430 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":292:84)
#loc431 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:17)
#loc432 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":296:17)
#loc433 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:21)
#loc434 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:35)
#loc435 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:48)
#loc436 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:51)
#loc437 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":293:65)
#loc438 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":294:17)
#loc439 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":295:21)
#loc440 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":298:43)
#loc441 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":298:29)
#loc442 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":298:17)
#loc443 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":300:36)
#loc444 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":300:31)
#loc445 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":300:17)
#loc446 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":300:47)
#loc447 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":302:20)
#loc448 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":303:13)
#loc449 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":306:13)
#loc450 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":303:17)
#loc451 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":303:33)
#loc452 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":304:13)
#loc453 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":305:30)
#loc454 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":305:17)
#loc455 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":307:13)
#loc456 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":310:13)
#loc457 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":307:17)
#loc458 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":307:33)
#loc459 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":308:13)
#loc460 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":309:30)
#loc461 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":309:17)
#loc462 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":319:5)
#loc463 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":331:5)
#loc464 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":319:8)
#loc465 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":320:5)
#loc466 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":322:9)
#loc467 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":330:9)
#loc468 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":322:17)
#loc469 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":322:25)
#loc470 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":322:12)
#loc471 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":323:9)
#loc472 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":326:9)
#loc473 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":328:9)
#loc474 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":324:13)
#loc475 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":324:44)
#loc476 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":324:32)
#loc477 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":324:40)
#loc478 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":325:26)
#loc479 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":325:13)
#loc480 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":329:23)
#loc481 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":329:13)
#loc482 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":335:1)
#loc483 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":358:1)
#loc484 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":337:5)
#loc485 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":337:11)
#loc486 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":339:12)
#loc487 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":339:5)
#loc488 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":340:5)
#loc489 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":349:5)
#loc490 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":340:8)
#loc491 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":341:5)
#loc492 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":344:5)
#loc493 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":346:5)
#loc494 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":343:19)
#loc495 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":343:9)
#loc496 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":348:16)
#loc497 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":348:9)
#loc498 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":350:5)
#loc499 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":357:5)
#loc500 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":350:8)
#loc501 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":351:5)
#loc502 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":352:9)
#loc503 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":356:9)
#loc504 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":354:13)
#loc505 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":354:44)
#loc506 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":354:32)
#loc507 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":354:40)
#loc508 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":355:26)
#loc509 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":355:13)
#loc510 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":361:1)
#loc511 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":379:1)
#loc512 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":363:5)
#loc513 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":363:11)
#loc514 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":365:12)
#loc515 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":365:5)
#loc516 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":366:5)
#loc517 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":370:5)
#loc518 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":366:8)
#loc519 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":367:5)
#loc520 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":369:16)
#loc521 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":369:9)
#loc522 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":371:5)
#loc523 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":378:5)
#loc524 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":371:8)
#loc525 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":372:5)
#loc526 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":373:9)
#loc527 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":377:9)
#loc528 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":375:13)
#loc529 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":375:44)
#loc530 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":375:32)
#loc531 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":375:40)
#loc532 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":376:26)
#loc533 = loc("CWE369_Divide_by_Zero__float_listenSocket_04.c":376:13)
#loc534 = loc(fused[#loc1, #loc2])
#loc535 = loc(fused[#loc3, #loc4])
#loc536 = loc(fused[#loc5, #loc6])
#loc537 = loc(fused[#loc7, #loc8])
#loc538 = loc(fused[#loc9, #loc10])
#loc539 = loc(fused[#loc11, #loc12])
#loc540 = loc(fused[#loc13, #loc14])
#loc541 = loc(fused[#loc15, #loc16])
#loc542 = loc(fused[#loc17, #loc18])
#loc543 = loc(fused[#loc19, #loc20])
#loc544 = loc(fused[#loc21, #loc22])
#loc545 = loc(fused[#loc24, #loc23])
#loc546 = loc(fused[#loc25, #loc26])
#loc547 = loc(fused[#loc28, #loc26])
#loc548 = loc(fused[#loc29, #loc30])
#loc549 = loc(fused[#loc31, #loc32])
#loc550 = loc(fused[#loc33, #loc34])
#loc551 = loc(fused[#loc35, #loc36])
#loc552 = loc(fused[#loc37, #loc38])
#loc553 = loc(fused[#loc39, #loc40])
#loc554 = loc(fused[#loc41, #loc42])
#loc555 = loc(fused[#loc47, #loc48])
#loc556 = loc(fused[#loc49, #loc50])
#loc557 = loc(fused[#loc51, #loc52])
#loc558 = loc(fused[#loc53, #loc50])
#loc559 = loc(fused[#loc55, #loc56])
#loc560 = loc(fused[#loc58, #loc59])
#loc561 = loc(fused[#loc60, #loc61])
#loc562 = loc(fused[#loc64, #loc62])
#loc563 = loc(fused[#loc68, #loc65])
#loc564 = loc(fused[#loc72, #loc73])
#loc565 = loc(fused[#loc74, #loc75])
#loc566 = loc(fused[#loc77, #loc78])
#loc567 = loc(fused[#loc79, #loc80])
#loc568 = loc(fused[#loc81, #loc82])
#loc569 = loc(fused[#loc83, #loc75])
#loc570 = loc(fused[#loc85, #loc86])
#loc571 = loc(fused[#loc89, #loc90])
#loc572 = loc(fused[#loc91, #loc86])
#loc573 = loc(fused[#loc97, #loc98])
#loc574 = loc(fused[#loc99, #loc100])
#loc575 = loc(fused[#loc101, #loc102])
#loc576 = loc(fused[#loc103, #loc100])
#loc577 = loc(fused[#loc111, #loc112])
#loc578 = loc(fused[#loc113, #loc114])
#loc579 = loc(fused[#loc115, #loc116])
#loc580 = loc(fused[#loc118, #loc119])
#loc581 = loc(fused[#loc120, #loc114])
#loc582 = loc(fused[#loc124, #loc122])
#loc583 = loc(fused[#loc127, #loc128])
#loc584 = loc(fused[#loc130, #loc131])
#loc585 = loc(fused[#loc132, #loc133])
#loc586 = loc(fused[#loc134, #loc131])
#loc587 = loc(fused[#loc137, #loc138])
#loc588 = loc(fused[#loc139, #loc140])
#loc589 = loc(fused[#loc141, #loc138])
#loc590 = loc(fused[#loc144, #loc145])
#loc591 = loc(fused[#loc147, #loc145])
#loc592 = loc(fused[#loc148, #loc149])
#loc593 = loc(fused[#loc150, #loc151])
#loc594 = loc(fused[#loc152, #loc153])
#loc595 = loc(fused[#loc156, #loc157])
#loc596 = loc(fused[#loc158, #loc159])
#loc597 = loc(fused[#loc160, #loc161])
#loc598 = loc(fused[#loc162, #loc163])
#loc599 = loc(fused[#loc164, #loc165])
#loc600 = loc(fused[#loc166, #loc167])
#loc601 = loc(fused[#loc168, #loc169])
#loc602 = loc(fused[#loc170, #loc171])
#loc603 = loc(fused[#loc176, #loc177])
#loc606 = loc(fused[#loc187, #loc188])
#loc607 = loc(fused[#loc191, #loc192])
#loc608 = loc(fused[#loc195, #loc194])
#loc609 = loc(fused[#loc198, #loc199])
#loc610 = loc(fused[#loc200, #loc201])
#loc611 = loc(fused[#loc203, #loc202])
#loc612 = loc(fused[#loc204, #loc205])
#loc613 = loc(fused[#loc207, #loc205])
#loc614 = loc(fused[#loc208, #loc209])
#loc615 = loc(fused[#loc210, #loc211])
#loc616 = loc(fused[#loc212, #loc213])
#loc617 = loc(fused[#loc214, #loc215])
#loc618 = loc(fused[#loc216, #loc217])
#loc619 = loc(fused[#loc218, #loc219])
#loc620 = loc(fused[#loc220, #loc221])
#loc621 = loc(fused[#loc226, #loc227])
#loc622 = loc(fused[#loc228, #loc229])
#loc623 = loc(fused[#loc230, #loc231])
#loc624 = loc(fused[#loc232, #loc229])
#loc625 = loc(fused[#loc234, #loc235])
#loc626 = loc(fused[#loc237, #loc238])
#loc627 = loc(fused[#loc239, #loc240])
#loc628 = loc(fused[#loc242, #loc241])
#loc629 = loc(fused[#loc244, #loc243])
#loc630 = loc(fused[#loc247, #loc248])
#loc631 = loc(fused[#loc249, #loc250])
#loc632 = loc(fused[#loc252, #loc253])
#loc633 = loc(fused[#loc254, #loc255])
#loc634 = loc(fused[#loc256, #loc257])
#loc635 = loc(fused[#loc258, #loc250])
#loc636 = loc(fused[#loc260, #loc261])
#loc637 = loc(fused[#loc264, #loc265])
#loc638 = loc(fused[#loc266, #loc261])
#loc639 = loc(fused[#loc272, #loc273])
#loc640 = loc(fused[#loc274, #loc275])
#loc641 = loc(fused[#loc276, #loc277])
#loc642 = loc(fused[#loc278, #loc275])
#loc643 = loc(fused[#loc286, #loc287])
#loc644 = loc(fused[#loc288, #loc289])
#loc645 = loc(fused[#loc290, #loc291])
#loc646 = loc(fused[#loc293, #loc294])
#loc647 = loc(fused[#loc295, #loc289])
#loc648 = loc(fused[#loc299, #loc297])
#loc649 = loc(fused[#loc302, #loc303])
#loc650 = loc(fused[#loc305, #loc306])
#loc651 = loc(fused[#loc307, #loc308])
#loc652 = loc(fused[#loc309, #loc306])
#loc653 = loc(fused[#loc312, #loc313])
#loc654 = loc(fused[#loc314, #loc315])
#loc655 = loc(fused[#loc316, #loc313])
#loc656 = loc(fused[#loc319, #loc320])
#loc657 = loc(fused[#loc322, #loc323, #loc324, #loc320])
#loc658 = loc(fused[#loc326, #loc327])
#loc659 = loc(fused[#loc330, #loc329])
#loc660 = loc(fused[#loc331, #loc332, #loc333, #loc327])
#loc661 = loc(fused[#loc334, #loc335])
#loc662 = loc(fused[#loc336, #loc337])
#loc663 = loc(fused[#loc341, #loc342])
#loc664 = loc(fused[#loc343, #loc344])
#loc665 = loc(fused[#loc346, #loc345])
#loc666 = loc(fused[#loc347, #loc348])
#loc667 = loc(fused[#loc350, #loc348])
#loc668 = loc(fused[#loc351, #loc352])
#loc669 = loc(fused[#loc353, #loc354])
#loc670 = loc(fused[#loc355, #loc356])
#loc671 = loc(fused[#loc357, #loc358])
#loc672 = loc(fused[#loc359, #loc360])
#loc673 = loc(fused[#loc361, #loc362])
#loc674 = loc(fused[#loc363, #loc364])
#loc675 = loc(fused[#loc369, #loc370])
#loc676 = loc(fused[#loc371, #loc372])
#loc677 = loc(fused[#loc373, #loc374])
#loc678 = loc(fused[#loc375, #loc372])
#loc679 = loc(fused[#loc377, #loc378])
#loc680 = loc(fused[#loc380, #loc381])
#loc681 = loc(fused[#loc382, #loc383])
#loc682 = loc(fused[#loc385, #loc384])
#loc683 = loc(fused[#loc387, #loc386])
#loc684 = loc(fused[#loc390, #loc391])
#loc685 = loc(fused[#loc392, #loc393])
#loc686 = loc(fused[#loc395, #loc396])
#loc687 = loc(fused[#loc397, #loc398])
#loc688 = loc(fused[#loc399, #loc400])
#loc689 = loc(fused[#loc401, #loc393])
#loc690 = loc(fused[#loc403, #loc404])
#loc691 = loc(fused[#loc407, #loc408])
#loc692 = loc(fused[#loc409, #loc404])
#loc693 = loc(fused[#loc415, #loc416])
#loc694 = loc(fused[#loc417, #loc418])
#loc695 = loc(fused[#loc419, #loc420])
#loc696 = loc(fused[#loc421, #loc418])
#loc697 = loc(fused[#loc429, #loc430])
#loc698 = loc(fused[#loc431, #loc432])
#loc699 = loc(fused[#loc433, #loc434])
#loc700 = loc(fused[#loc436, #loc437])
#loc701 = loc(fused[#loc438, #loc432])
#loc702 = loc(fused[#loc442, #loc440])
#loc703 = loc(fused[#loc445, #loc446])
#loc704 = loc(fused[#loc448, #loc449])
#loc705 = loc(fused[#loc450, #loc451])
#loc706 = loc(fused[#loc452, #loc449])
#loc707 = loc(fused[#loc455, #loc456])
#loc708 = loc(fused[#loc457, #loc458])
#loc709 = loc(fused[#loc459, #loc456])
#loc710 = loc(fused[#loc462, #loc463])
#loc711 = loc(fused[#loc465, #loc463])
#loc712 = loc(fused[#loc466, #loc467])
#loc713 = loc(fused[#loc470, #loc469])
#loc714 = loc(fused[#loc471, #loc472, #loc473, #loc467])
#loc715 = loc(fused[#loc474, #loc475])
#loc716 = loc(fused[#loc476, #loc477])
#loc717 = loc(fused[#loc482, #loc483])
#loc718 = loc(fused[#loc484, #loc485])
#loc719 = loc(fused[#loc487, #loc486])
#loc720 = loc(fused[#loc488, #loc489])
#loc721 = loc(fused[#loc491, #loc492, #loc493, #loc489])
#loc722 = loc(fused[#loc497, #loc496])
#loc723 = loc(fused[#loc498, #loc499])
#loc724 = loc(fused[#loc501, #loc499])
#loc725 = loc(fused[#loc502, #loc503])
#loc726 = loc(fused[#loc504, #loc505])
#loc727 = loc(fused[#loc506, #loc507])
#loc728 = loc(fused[#loc510, #loc511])
#loc729 = loc(fused[#loc512, #loc513])
#loc730 = loc(fused[#loc515, #loc514])
#loc731 = loc(fused[#loc516, #loc517])
#loc732 = loc(fused[#loc519, #loc517])
#loc733 = loc(fused[#loc521, #loc520])
#loc734 = loc(fused[#loc522, #loc523])
#loc735 = loc(fused[#loc525, #loc523])
#loc736 = loc(fused[#loc526, #loc527])
#loc737 = loc(fused[#loc528, #loc529])
#loc738 = loc(fused[#loc530, #loc531])
