!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":50:22)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":50:26)
#loc150 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":198:10)
#loc151 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":198:14)
#loc152 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":198:20)
#loc153 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":198:32)
#loc173 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":134:27)
#loc174 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":134:31)
#loc206 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":161:27)
#loc207 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":161:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc241 = loc(fused[#loc20, #loc21])
#loc290 = loc(fused[#loc150, #loc151])
#loc291 = loc(fused[#loc152, #loc153])
#loc297 = loc(fused[#loc173, #loc174])
#loc309 = loc(fused[#loc206, #loc207])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc232)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc233)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc234)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc7)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc235)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc236)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc237)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc238)
  cir.func private @close(!s32i) -> !s32i loc(#loc239)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc20, #loc21])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc19)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc22)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc232)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc25)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc245)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc246)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc247)
          %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc248)
          %11 = cir.const #cir.int<1> : !s32i loc(#loc34)
          %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc34)
          cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc247)
          cir.scope {
            cir.do {
              %13 = cir.const #cir.int<2> : !s32i loc(#loc39)
              %14 = cir.const #cir.int<1> : !s32i loc(#loc40)
              %15 = cir.const #cir.int<6> : !s32i loc(#loc41)
              %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc250)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc47)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc48)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc252)
                cir.if %58 {
                  cir.break loc(#loc50)
                } loc(#loc253)
              } loc(#loc251)
              %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc254)
              %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
              %19 = cir.const #cir.int<16> : !u64i loc(#loc255)
              cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc256)
              %20 = cir.const #cir.int<2> : !s32i loc(#loc58)
              %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc58)
              %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc59)
              cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc257)
              %23 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc7)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc7)
              %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc61)
              %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc62)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc63)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc258)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc66)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc66)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc67)
              %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc68)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc259)
              cir.scope {
                %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc261)
                %57 = cir.const #cir.int<16> : !u64i loc(#loc262)
                %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc262)
                %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc78)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc79)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc79)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc263)
                cir.if %62 {
                  cir.break loc(#loc81)
                } loc(#loc264)
              } loc(#loc260)
              %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc83)
              %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
              %35 = cir.const #cir.int<3> : !s32i loc(#loc84)
              %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc84)
              %37 = cir.const #cir.int<4> : !u64i loc(#loc84)
              %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc84)
              %39 = cir.const #cir.int<2> : !s32i loc(#loc84)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc84)
              %41 = cir.binop(add, %38, %40) : !u64i loc(#loc84)
              %42 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc85)
              %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc265)
              %45 = cir.const #cir.int<0> : !s32i loc(#loc86)
              %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc87)
              %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc87)
              cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc266)
              cir.scope {
                %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                %56 = cir.const #cir.int<1> : !s32i loc(#loc93)
                %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc93)
                %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc268)
                %59 = cir.ternary(%58, true {
                  %60 = cir.const #true loc(#loc94)
                  cir.yield %60 : !cir.bool loc(#loc94)
                }, false {
                  %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %61 = cir.const #cir.int<0> : !s32i loc(#loc96)
                  %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc269)
                  %63 = cir.ternary(%62, true {
                    %64 = cir.const #true loc(#loc94)
                    cir.yield %64 : !cir.bool loc(#loc94)
                  }, false {
                    %64 = cir.const #false loc(#loc94)
                    cir.yield %64 : !cir.bool loc(#loc94)
                  }) : (!cir.bool) -> !cir.bool loc(#loc94)
                  cir.yield %63 : !cir.bool loc(#loc94)
                }) : (!cir.bool) -> !cir.bool loc(#loc94)
                cir.if %59 {
                  cir.break loc(#loc98)
                } loc(#loc270)
              } loc(#loc267)
              %48 = cir.const #cir.int<0> : !s32i loc(#loc99)
              %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc99)
              %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc101)
              %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc101)
              cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc271)
              %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc102)
              %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc103)
              cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
              cir.yield loc(#loc38)
            } while {
              %13 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc106)
              cir.condition(%14) loc(#loc106)
            } loc(#loc249)
          } loc(#loc249)
          cir.scope {
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc110)
            %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc274)
            cir.if %16 {
              %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc112)
              %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc113)
            } loc(#loc275)
          } loc(#loc273)
        } loc(#loc244)
      } loc(#loc243)
    } loc(#loc242)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc114)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc276)
    cir.return %3 : !s32i loc(#loc276)
  } loc(#loc240)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc277)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_21.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc118)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_21_bad()\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc118)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc123)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc124)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc232)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %6 = cir.call @badSource(%5) : (!s32i) -> !s32i loc(#loc129)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc118)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc118)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc118)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc118)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc118)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc118)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc118)
          %15 = cir.const #cir.int<122> : !s32i loc(#loc118)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc118)
          %17 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc118)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc118)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc118)
        } loc(#loc118)
      } loc(#loc118)
    } loc(#loc118)
    cir.return loc(#loc120)
  } loc(#loc278)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc284)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc134)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc136)
    cir.return loc(#loc133)
  } loc(#loc283)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc286)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc287)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc147)
  cir.func @main(%arg0: !s32i loc(fused[#loc150, #loc151]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc152, #loc153])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc291)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc149)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc154)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc155)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc156)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc156)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc157)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc144)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %8 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call @CWE617_Reachable_Assertion__connect_socket_21_good() : () -> () loc(#loc159)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc145)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc146)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc146)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc162)
    %13 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call @CWE617_Reachable_Assertion__connect_socket_21_bad() : () -> () loc(#loc163)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc147)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc147)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc165)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc166)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc294)
    cir.return %17 : !s32i loc(#loc294)
  } loc(#loc289)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc295)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc170)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc173, #loc174])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc172)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc295)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc178)
      cir.if %6 {
        %7 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      } else {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc183)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc184)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc183)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc300)
      } loc(#loc299)
    } loc(#loc298)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc186)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc301)
    cir.return %3 : !s32i loc(#loc301)
  } loc(#loc296)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc188)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc303)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc193)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc194)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc196)
    %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc295)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
    %6 = cir.call @goodG2B1Source(%5) : (!s32i) -> !s32i loc(#loc199)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc188)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc188)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc188)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc188)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc188)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc188)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc188)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc188)
          %15 = cir.const #cir.int<157> : !s32i loc(#loc188)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc188)
          %17 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc188)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc188)
        } loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc190)
  } loc(#loc302)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc307)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc206, #loc207])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc309)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc205)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc307)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc211)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc211)
      cir.if %6 {
        %7 = cir.const #cir.int<5> : !s32i loc(#loc213)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc214)
        %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc213)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc312)
      } loc(#loc311)
    } loc(#loc310)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc313)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc313)
    cir.return %3 : !s32i loc(#loc313)
  } loc(#loc308)
  cir.global "private" constant cir_private dsolocal @".str.10" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc218)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc223)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc224)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc307)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc317)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc228)
    %6 = cir.call @goodG2B2Source(%5) : (!s32i) -> !s32i loc(#loc229)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc218)
    cir.scope {
      cir.scope {
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
        %9 = cir.const #cir.int<5> : !s32i loc(#loc218)
        %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc218)
        cir.if %10 {
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc218)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc218)
          %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc218)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc218)
          %15 = cir.const #cir.int<179> : !s32i loc(#loc218)
          %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc218)
          %17 = cir.get_global @".str.10" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc218)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc218)
          cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc218)
        } loc(#loc218)
      } loc(#loc218)
    } loc(#loc218)
    cir.return loc(#loc220)
  } loc(#loc314)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_21.c":0:0)
#loc1 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":48:1)
#loc2 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":48:24)
#loc3 = loc("/usr/include/sys/socket.h":102:1)
#loc4 = loc("/usr/include/sys/socket.h":102:62)
#loc5 = loc("/usr/include/arpa/inet.h":34:1)
#loc6 = loc("/usr/include/arpa/inet.h":34:47)
#loc7 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":80:53)
#loc8 = loc("/usr/include/netinet/in.h":404:1)
#loc9 = loc("/usr/include/netinet/in.h":405:40)
#loc10 = loc("/usr/include/sys/socket.h":126:1)
#loc11 = loc("/usr/include/sys/socket.h":126:75)
#loc12 = loc("/usr/include/sys/socket.h":145:1)
#loc13 = loc("/usr/include/sys/socket.h":145:68)
#loc14 = loc("/usr/include/stdlib.h":105:1)
#loc15 = loc("/usr/include/stdlib.h":106:33)
#loc16 = loc("/usr/include/unistd.h":358:1)
#loc17 = loc("/usr/include/unistd.h":358:27)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":50:1)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":112:1)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":51:1)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":52:5)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":110:5)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":52:8)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":53:5)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":54:9)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":109:9)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":59:13)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":59:17)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":60:13)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":60:32)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":61:13)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":61:36)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":62:13)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":62:45)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":63:13)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":98:21)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:40)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:49)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:62)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:33)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:17)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":73:73)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":74:17)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":77:17)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":74:21)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":74:38)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":75:17)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":76:21)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:24)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:25)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:34)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:37)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:51)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:17)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":78:52)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":79:38)
#loc59 = loc("/usr/include/netinet/in.h":249:5)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":79:17)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":80:43)
#loc62 = loc("/usr/include/netinet/in.h":251:20)
#loc63 = loc("/usr/include/netinet/in.h":33:15)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":80:17)
#loc65 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":80:63)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":81:42)
#loc67 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":81:36)
#loc68 = loc("/usr/include/netinet/in.h":250:15)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":81:17)
#loc70 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":81:50)
#loc71 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:17)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":85:17)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:29)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:62)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:63)
#loc76 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:72)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:86)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:21)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":82:92)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":83:17)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":84:21)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:35)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:50)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:63)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:81)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:84)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:30)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:17)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":88:85)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:17)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":92:17)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:21)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:35)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:48)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:51)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":89:65)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":90:17)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":91:21)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":94:43)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":94:29)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":94:17)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":96:29)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":96:24)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":96:17)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":96:40)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":98:20)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":99:13)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":102:13)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":99:17)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":99:34)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":100:13)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":101:30)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":101:17)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":111:12)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":111:5)
#loc116 = loc("/usr/include/assert.h":67:1)
#loc117 = loc("/usr/include/assert.h":69:43)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":122:5)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":114:1)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":123:1)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":116:5)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":116:9)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":118:13)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":118:12)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":118:5)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":119:17)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":119:5)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":120:22)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":120:12)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":120:5)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":120:26)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":182:1)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":186:1)
#loc134 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":184:5)
#loc135 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":184:14)
#loc136 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":185:5)
#loc137 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":185:14)
#loc138 = loc("/usr/include/stdlib.h":575:1)
#loc139 = loc("/usr/include/stdlib.h":575:41)
#loc140 = loc("/usr/include/time.h":76:1)
#loc141 = loc("/usr/include/time.h":76:38)
#loc142 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc143 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":203:15)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":205:15)
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":208:15)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":210:15)
#loc148 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":198:1)
#loc149 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":213:1)
#loc154 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":199:1)
#loc155 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":201:27)
#loc156 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":201:22)
#loc157 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":201:5)
#loc158 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":203:5)
#loc159 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":204:5)
#loc160 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":204:56)
#loc161 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":205:5)
#loc162 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":208:5)
#loc163 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":209:5)
#loc164 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":209:55)
#loc165 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":210:5)
#loc166 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":212:12)
#loc167 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":212:5)
#loc168 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":130:1)
#loc169 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":130:29)
#loc170 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":139:19)
#loc171 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":134:1)
#loc172 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":147:1)
#loc175 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":135:1)
#loc176 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":136:5)
#loc177 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":145:5)
#loc178 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":136:8)
#loc179 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":137:5)
#loc180 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":140:5)
#loc181 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":142:5)
#loc182 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":139:9)
#loc183 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":144:16)
#loc184 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":144:29)
#loc185 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":144:9)
#loc186 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":146:12)
#loc187 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":146:5)
#loc188 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":157:5)
#loc189 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":149:1)
#loc190 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":158:1)
#loc191 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":151:5)
#loc192 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":151:9)
#loc193 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":153:13)
#loc194 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":153:12)
#loc195 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":153:5)
#loc196 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":154:22)
#loc197 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":154:5)
#loc198 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":155:27)
#loc199 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":155:12)
#loc200 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":155:5)
#loc201 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":155:31)
#loc202 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":131:1)
#loc203 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":131:29)
#loc204 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":161:1)
#loc205 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":169:1)
#loc208 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":162:1)
#loc209 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":163:5)
#loc210 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":167:5)
#loc211 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":163:8)
#loc212 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":164:5)
#loc213 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":166:16)
#loc214 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":166:29)
#loc215 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":166:9)
#loc216 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":168:12)
#loc217 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":168:5)
#loc218 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":179:5)
#loc219 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":171:1)
#loc220 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":180:1)
#loc221 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":173:5)
#loc222 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":173:9)
#loc223 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":175:13)
#loc224 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":175:12)
#loc225 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":175:5)
#loc226 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":176:22)
#loc227 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":176:5)
#loc228 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":177:27)
#loc229 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":177:12)
#loc230 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":177:5)
#loc231 = loc("CWE617_Reachable_Assertion__connect_socket_21.c":177:31)
#loc232 = loc(fused[#loc1, #loc2])
#loc233 = loc(fused[#loc3, #loc4])
#loc234 = loc(fused[#loc5, #loc6])
#loc235 = loc(fused[#loc8, #loc9])
#loc236 = loc(fused[#loc10, #loc11])
#loc237 = loc(fused[#loc12, #loc13])
#loc238 = loc(fused[#loc14, #loc15])
#loc239 = loc(fused[#loc16, #loc17])
#loc240 = loc(fused[#loc18, #loc19])
#loc242 = loc(fused[#loc23, #loc24])
#loc243 = loc(fused[#loc26, #loc24])
#loc244 = loc(fused[#loc27, #loc28])
#loc245 = loc(fused[#loc29, #loc30])
#loc246 = loc(fused[#loc31, #loc32])
#loc247 = loc(fused[#loc33, #loc34])
#loc248 = loc(fused[#loc35, #loc36])
#loc249 = loc(fused[#loc37, #loc38])
#loc250 = loc(fused[#loc43, #loc44])
#loc251 = loc(fused[#loc45, #loc46])
#loc252 = loc(fused[#loc47, #loc48])
#loc253 = loc(fused[#loc49, #loc46])
#loc254 = loc(fused[#loc51, #loc52])
#loc255 = loc(fused[#loc54, #loc55])
#loc256 = loc(fused[#loc56, #loc57])
#loc257 = loc(fused[#loc60, #loc58])
#loc258 = loc(fused[#loc64, #loc65])
#loc259 = loc(fused[#loc69, #loc70])
#loc260 = loc(fused[#loc71, #loc72])
#loc261 = loc(fused[#loc74, #loc75])
#loc262 = loc(fused[#loc76, #loc77])
#loc263 = loc(fused[#loc78, #loc79])
#loc264 = loc(fused[#loc80, #loc72])
#loc265 = loc(fused[#loc84, #loc85])
#loc266 = loc(fused[#loc88, #loc89])
#loc267 = loc(fused[#loc90, #loc91])
#loc268 = loc(fused[#loc92, #loc93])
#loc269 = loc(fused[#loc95, #loc96])
#loc270 = loc(fused[#loc97, #loc91])
#loc271 = loc(fused[#loc101, #loc99])
#loc272 = loc(fused[#loc104, #loc105])
#loc273 = loc(fused[#loc107, #loc108])
#loc274 = loc(fused[#loc109, #loc110])
#loc275 = loc(fused[#loc111, #loc108])
#loc276 = loc(fused[#loc115, #loc114])
#loc277 = loc(fused[#loc116, #loc117])
#loc278 = loc(fused[#loc119, #loc120])
#loc279 = loc(fused[#loc121, #loc122])
#loc280 = loc(fused[#loc125, #loc123])
#loc281 = loc(fused[#loc127, #loc126])
#loc282 = loc(fused[#loc130, #loc131])
#loc283 = loc(fused[#loc132, #loc133])
#loc284 = loc(fused[#loc134, #loc135])
#loc285 = loc(fused[#loc136, #loc137])
#loc286 = loc(fused[#loc138, #loc139])
#loc287 = loc(fused[#loc140, #loc141])
#loc288 = loc(fused[#loc142, #loc143])
#loc289 = loc(fused[#loc148, #loc149])
#loc292 = loc(fused[#loc159, #loc160])
#loc293 = loc(fused[#loc163, #loc164])
#loc294 = loc(fused[#loc167, #loc166])
#loc295 = loc(fused[#loc168, #loc169])
#loc296 = loc(fused[#loc171, #loc172])
#loc298 = loc(fused[#loc176, #loc177])
#loc299 = loc(fused[#loc179, #loc180, #loc181, #loc177])
#loc300 = loc(fused[#loc185, #loc184])
#loc301 = loc(fused[#loc187, #loc186])
#loc302 = loc(fused[#loc189, #loc190])
#loc303 = loc(fused[#loc191, #loc192])
#loc304 = loc(fused[#loc195, #loc193])
#loc305 = loc(fused[#loc197, #loc196])
#loc306 = loc(fused[#loc200, #loc201])
#loc307 = loc(fused[#loc202, #loc203])
#loc308 = loc(fused[#loc204, #loc205])
#loc310 = loc(fused[#loc209, #loc210])
#loc311 = loc(fused[#loc212, #loc210])
#loc312 = loc(fused[#loc215, #loc214])
#loc313 = loc(fused[#loc217, #loc216])
#loc314 = loc(fused[#loc219, #loc220])
#loc315 = loc(fused[#loc221, #loc222])
#loc316 = loc(fused[#loc225, #loc223])
#loc317 = loc(fused[#loc227, #loc226])
#loc318 = loc(fused[#loc230, #loc231])
