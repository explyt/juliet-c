!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc34 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":96:10)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":96:14)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":96:20)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":96:32)
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc36, #loc37])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fprintf_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fprintf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc98)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_fprintf_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc102)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc11)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc11)
      cir.if %2 {
        %3 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc14)
        %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc6)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc6)
        %10 = cir.call @fprintf(%5, %7, %9) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc14)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc8)
  } loc(#loc100)
  cir.func no_proto @CWE252_Unchecked_Return_Value__char_fprintf_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc17)
  } loc(#loc104)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc107)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func @main(%arg0: !s32i loc(fused[#loc34, #loc35]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc36, #loc37])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc33)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc38)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc39)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc40)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc40)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc41)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc28)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    %8 = cir.get_global @CWE252_Unchecked_Return_Value__char_fprintf_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc113)
    cir.call @CWE252_Unchecked_Return_Value__char_fprintf_08_good() : () -> () loc(#loc43)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc29)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc30)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %13 = cir.get_global @CWE252_Unchecked_Return_Value__char_fprintf_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call @CWE252_Unchecked_Return_Value__char_fprintf_08_bad() : () -> () loc(#loc47)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
    cir.return %17 : !s32i loc(#loc115)
  } loc(#loc110)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.return %2 : !s32i loc(#loc117)
  } loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"fprintf failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc120)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc62)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc62)
      cir.if %2 {
        %3 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } else {
        cir.scope {
          %3 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc70)
          %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc71)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc72)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc72)
          %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc73)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc73)
          %10 = cir.call @fprintf(%5, %7, %9) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc70)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc74)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc123)
          cir.if %12 {
            %13 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc124)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc59)
  } loc(#loc118)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.return %2 : !s32i loc(#loc126)
  } loc(#loc125)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc129)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc85)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc85)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @fprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc90)
          %4 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc99)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc92)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc92)
          %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc93)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc93)
          %10 = cir.call @fprintf(%5, %7, %9) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc90)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc132)
          cir.if %12 {
            %13 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc96)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc96)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc97)
          } loc(#loc133)
        } loc(#loc131)
      } loc(#loc130)
    } loc(#loc128)
    cir.return loc(#loc82)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fprintf_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":357:1)
#loc2 = loc("/usr/include/stdio.h":358:45)
#loc3 = loc("/usr/include/stdio.h":150:1)
#loc4 = loc("/usr/include/stdio.h":150:14)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":42:25)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":42:33)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":37:1)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":44:1)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":39:5)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":43:5)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":39:8)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":39:26)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":40:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":42:9)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":42:17)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":81:1)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":85:1)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":83:5)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":83:11)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":84:5)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":84:11)
#loc22 = loc("/usr/include/stdlib.h":575:1)
#loc23 = loc("/usr/include/stdlib.h":575:41)
#loc24 = loc("/usr/include/time.h":76:1)
#loc25 = loc("/usr/include/time.h":76:38)
#loc26 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":101:15)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":103:15)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":106:15)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":108:15)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":96:1)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":111:1)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":97:1)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":99:27)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":99:22)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":99:5)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":101:5)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":102:5)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":102:57)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":103:5)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":106:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":107:5)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":107:56)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":108:5)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":110:12)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":110:5)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":25:1)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":28:1)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":27:12)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":27:5)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":56:19)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":63:23)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":51:1)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":66:1)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":53:5)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":65:5)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":53:8)
#loc63 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":53:27)
#loc64 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":54:5)
#loc65 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":57:5)
#loc66 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":59:5)
#loc67 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":56:9)
#loc68 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:9)
#loc69 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":64:9)
#loc70 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:13)
#loc71 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:21)
#loc72 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:29)
#loc73 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:37)
#loc74 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":61:49)
#loc75 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":62:9)
#loc76 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":63:13)
#loc77 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":30:1)
#loc78 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":33:1)
#loc79 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":32:12)
#loc80 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":32:5)
#loc81 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":69:1)
#loc82 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":79:1)
#loc83 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":71:5)
#loc84 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":78:5)
#loc85 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":71:8)
#loc86 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":71:26)
#loc87 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":72:5)
#loc88 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:9)
#loc89 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":77:9)
#loc90 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:13)
#loc91 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:21)
#loc92 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:29)
#loc93 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:37)
#loc94 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":74:49)
#loc95 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":75:9)
#loc96 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":76:23)
#loc97 = loc("CWE252_Unchecked_Return_Value__char_fprintf_08.c":76:13)
#loc98 = loc(fused[#loc1, #loc2])
#loc99 = loc(fused[#loc3, #loc4])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc13, #loc10])
#loc104 = loc(fused[#loc16, #loc17])
#loc105 = loc(fused[#loc18, #loc19])
#loc106 = loc(fused[#loc20, #loc21])
#loc107 = loc(fused[#loc22, #loc23])
#loc108 = loc(fused[#loc24, #loc25])
#loc109 = loc(fused[#loc26, #loc27])
#loc110 = loc(fused[#loc32, #loc33])
#loc113 = loc(fused[#loc43, #loc44])
#loc114 = loc(fused[#loc47, #loc48])
#loc115 = loc(fused[#loc51, #loc50])
#loc116 = loc(fused[#loc52, #loc53])
#loc117 = loc(fused[#loc55, #loc54])
#loc118 = loc(fused[#loc58, #loc59])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc62, #loc63])
#loc121 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc122 = loc(fused[#loc68, #loc69])
#loc123 = loc(fused[#loc70, #loc74])
#loc124 = loc(fused[#loc75, #loc69])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc80, #loc79])
#loc127 = loc(fused[#loc81, #loc82])
#loc128 = loc(fused[#loc83, #loc84])
#loc129 = loc(fused[#loc85, #loc86])
#loc130 = loc(fused[#loc87, #loc84])
#loc131 = loc(fused[#loc88, #loc89])
#loc132 = loc(fused[#loc90, #loc94])
#loc133 = loc(fused[#loc95, #loc89])
