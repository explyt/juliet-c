!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc189)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc190)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc191)
  cir.func private @printIntLine(!s32i) loc(#loc192)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc193)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc198)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc198)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
      cir.if %6 {
        %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc23)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc24)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc200)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc200)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc203)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc204)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc33)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc34)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc205)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc206)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc207)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc208)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc210)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc46)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
        } loc(#loc211)
      } loc(#loc209)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc49)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc49)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc213)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc214)
          cir.condition(%24) loc(#loc53)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc57)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc58)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          } loc(#loc215)
          cir.yield loc(#loc48)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc59)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc60)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc217)
          cir.yield loc(#loc212)
        } loc(#loc212)
      } loc(#loc212)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc63)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc64)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc65)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc202)
    cir.return loc(#loc12)
  } loc(#loc194)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc219)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc220)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc218)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc221)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc83)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc227)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc227)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc87)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc87)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc93)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc231)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc232)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc101)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc102)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc233)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc234)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc238)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc112)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc114)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
        } loc(#loc239)
      } loc(#loc237)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc117)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc117)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc241)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc119)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc120)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc242)
          cir.condition(%24) loc(#loc121)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc123)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc126)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          } loc(#loc243)
          cir.yield loc(#loc116)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc127)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc128)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          cir.yield loc(#loc240)
        } loc(#loc240)
      } loc(#loc240)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc131)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc132)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc133)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
    } loc(#loc230)
    cir.return loc(#loc79)
  } loc(#loc223)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc247)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc140)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc250)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc250)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc144)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc144)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc147)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
      } loc(#loc251)
    } loc(#loc249)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc254)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc255)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc155)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc156)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc256)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc257)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc258)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc259)
      cir.scope {
        %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc163)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc164)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc164)
        %22 = cir.cmp(eq, %19, %21) : !cir.ptr<!s32i>, !cir.bool loc(#loc261)
        cir.if %22 {
          %23 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc166)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc167)
          %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc168)
          cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc166)
        } loc(#loc262)
      } loc(#loc260)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc171)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc171)
        cir.store %20, %3 : !u64i, !cir.ptr<!u64i> loc(#loc264)
        cir.for : cond {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc173)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc174)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc265)
          cir.condition(%24) loc(#loc175)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc177)
            %22 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc178)
            %23 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc179)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc180)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc267)
          } loc(#loc266)
          cir.yield loc(#loc170)
        } step {
          %21 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc181)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc182)
          cir.store %22, %3 : !u64i, !cir.ptr<!u64i> loc(#loc268)
          cir.yield loc(#loc263)
        } loc(#loc263)
      } loc(#loc263)
      %12 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc184)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc185)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc183)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc186)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc187)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc188)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc187)
    } loc(#loc253)
    cir.return loc(#loc136)
  } loc(#loc246)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":47:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":25:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":25:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":25:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":26:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":32:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":26:8)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":26:26)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":27:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":29:16)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":29:26)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":29:30)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":29:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":33:5)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":46:5)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":34:9)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":34:16)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":35:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":35:14)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:28)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:35)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:42)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:52)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:53)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":38:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:9)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:43)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:13)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:27)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:33)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:34)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:40)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":39:39)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":43:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:18)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:14)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:21)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:33)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:23)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":41:9)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":42:29)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":42:13)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":42:24)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":42:25)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:40)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":40:39)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":44:22)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":44:33)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":44:34)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":44:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":45:9)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":45:14)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":112:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":116:1)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":114:5)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":114:14)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":115:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":115:14)
#loc73 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc74 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc75 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc76 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":62:19)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":54:1)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":83:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":56:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":56:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":58:13)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":58:12)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":58:5)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":59:5)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":68:5)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":59:8)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":59:27)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":60:5)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":63:5)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":65:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":62:9)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":67:16)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":67:9)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":69:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":82:5)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":70:9)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":70:16)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":71:9)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":71:14)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:28)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:35)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:42)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:52)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:53)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":74:9)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:9)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:43)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:13)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:27)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:33)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:34)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:40)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":75:39)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":79:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:18)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:14)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:21)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:33)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:23)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":77:9)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":78:29)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":78:13)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":78:24)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":78:25)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:40)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":76:39)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":80:22)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":80:33)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":80:34)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":80:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":81:9)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":81:14)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":86:1)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":110:1)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":88:5)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":88:9)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":90:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":90:12)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":90:5)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":91:5)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":95:5)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":91:8)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":91:26)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":92:5)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":94:16)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":94:9)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":96:5)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":109:5)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":97:9)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":97:16)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":98:9)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":98:14)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:28)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:35)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:42)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:52)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:53)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":101:9)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:9)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:43)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:13)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:27)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:33)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:34)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:40)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":102:39)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:9)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":106:9)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:18)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:14)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:21)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:33)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:23)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":104:9)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":105:29)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":105:13)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":105:24)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":105:25)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:40)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":103:39)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":107:22)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":107:33)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":107:34)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":107:9)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":108:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_fixed_11.c":108:14)
#loc189 = loc(fused[#loc1, #loc2])
#loc190 = loc(fused[#loc3, #loc4])
#loc191 = loc(fused[#loc5, #loc6])
#loc192 = loc(fused[#loc7, #loc8])
#loc193 = loc(fused[#loc9, #loc10])
#loc194 = loc(fused[#loc11, #loc12])
#loc195 = loc(fused[#loc13, #loc14])
#loc196 = loc(fused[#loc17, #loc15])
#loc197 = loc(fused[#loc18, #loc19])
#loc198 = loc(fused[#loc20, #loc21])
#loc199 = loc(fused[#loc22, #loc19])
#loc200 = loc(fused[#loc23, #loc24])
#loc201 = loc(fused[#loc26, #loc25])
#loc202 = loc(fused[#loc27, #loc28])
#loc203 = loc(fused[#loc29, #loc30])
#loc204 = loc(fused[#loc31, #loc32])
#loc205 = loc(fused[#loc35, #loc36])
#loc206 = loc(fused[#loc34, #loc36])
#loc207 = loc(fused[#loc33, #loc37])
#loc208 = loc(fused[#loc38, #loc37])
#loc209 = loc(fused[#loc39, #loc40])
#loc210 = loc(fused[#loc41, #loc42])
#loc211 = loc(fused[#loc43, #loc40])
#loc212 = loc(fused[#loc47, #loc48])
#loc213 = loc(fused[#loc50, #loc49])
#loc214 = loc(fused[#loc51, #loc52])
#loc215 = loc(fused[#loc54, #loc48])
#loc216 = loc(fused[#loc56, #loc55])
#loc217 = loc(fused[#loc60, #loc59])
#loc218 = loc(fused[#loc67, #loc68])
#loc219 = loc(fused[#loc69, #loc70])
#loc220 = loc(fused[#loc71, #loc72])
#loc221 = loc(fused[#loc73, #loc74])
#loc222 = loc(fused[#loc75, #loc76])
#loc223 = loc(fused[#loc78, #loc79])
#loc224 = loc(fused[#loc80, #loc81])
#loc225 = loc(fused[#loc84, #loc82])
#loc226 = loc(fused[#loc85, #loc86])
#loc227 = loc(fused[#loc87, #loc88])
#loc228 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc229 = loc(fused[#loc94, #loc93])
#loc230 = loc(fused[#loc95, #loc96])
#loc231 = loc(fused[#loc97, #loc98])
#loc232 = loc(fused[#loc99, #loc100])
#loc233 = loc(fused[#loc103, #loc104])
#loc234 = loc(fused[#loc102, #loc104])
#loc235 = loc(fused[#loc101, #loc105])
#loc236 = loc(fused[#loc106, #loc105])
#loc237 = loc(fused[#loc107, #loc108])
#loc238 = loc(fused[#loc109, #loc110])
#loc239 = loc(fused[#loc111, #loc108])
#loc240 = loc(fused[#loc115, #loc116])
#loc241 = loc(fused[#loc118, #loc117])
#loc242 = loc(fused[#loc119, #loc120])
#loc243 = loc(fused[#loc122, #loc116])
#loc244 = loc(fused[#loc124, #loc123])
#loc245 = loc(fused[#loc128, #loc127])
#loc246 = loc(fused[#loc135, #loc136])
#loc247 = loc(fused[#loc137, #loc138])
#loc248 = loc(fused[#loc141, #loc139])
#loc249 = loc(fused[#loc142, #loc143])
#loc250 = loc(fused[#loc144, #loc145])
#loc251 = loc(fused[#loc146, #loc143])
#loc252 = loc(fused[#loc148, #loc147])
#loc253 = loc(fused[#loc149, #loc150])
#loc254 = loc(fused[#loc151, #loc152])
#loc255 = loc(fused[#loc153, #loc154])
#loc256 = loc(fused[#loc157, #loc158])
#loc257 = loc(fused[#loc156, #loc158])
#loc258 = loc(fused[#loc155, #loc159])
#loc259 = loc(fused[#loc160, #loc159])
#loc260 = loc(fused[#loc161, #loc162])
#loc261 = loc(fused[#loc163, #loc164])
#loc262 = loc(fused[#loc165, #loc162])
#loc263 = loc(fused[#loc169, #loc170])
#loc264 = loc(fused[#loc172, #loc171])
#loc265 = loc(fused[#loc173, #loc174])
#loc266 = loc(fused[#loc176, #loc170])
#loc267 = loc(fused[#loc178, #loc177])
#loc268 = loc(fused[#loc182, #loc181])
