!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":180:10)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":180:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":180:20)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":180:32)
#loc246 = loc(fused[#loc58, #loc59])
#loc247 = loc(fused[#loc60, #loc61])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc222)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc223)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc224)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc12)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc227)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc229)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc16)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc233)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc236)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc237)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc31)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc31)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc236)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc30)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc30)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc30)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc30)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc30)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc30)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc30)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc30)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc34)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc34)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc37)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.return loc(#loc9)
  } loc(#loc225)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc242)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc238)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc243)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc55)
  cir.func @main(%arg0: !s32i loc(fused[#loc58, #loc59]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc60, #loc61])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc247)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc62)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc63)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc64)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc64)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc65)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_good() : () -> () loc(#loc67)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc54)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_08_bad() : () -> () loc(#loc71)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc55)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc250)
    cir.return %17 : !s32i loc(#loc250)
  } loc(#loc245)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %2 : !s32i loc(#loc252)
  } loc(#loc251)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc253)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc254)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc93)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc96)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc96)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc96)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc263)
      %3 = cir.call %2() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc100)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc100)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc105)
      } else {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc266)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc267)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc112)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc112)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc266)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc111)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc111)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc111)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc111)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc111)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc111)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc111)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc111)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc118)
        } loc(#loc265)
      } loc(#loc264)
    } loc(#loc262)
    cir.return loc(#loc86)
  } loc(#loc255)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.return %2 : !s32i loc(#loc269)
  } loc(#loc268)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc271)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc272)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc131)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc131)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc134)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc134)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc134)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc276)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc138)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc138)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc281)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc282)
          %7 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc147)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc148)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc148)
          %10 = cir.call @wcslen(%9) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc147)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc281)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc146)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc146)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc146)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc146)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc146)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc146)
          %17 = cir.alloca !u8i, !cir.ptr<!u8i>, %16 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc146)
          %18 = cir.cast(bitcast, %17 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc146)
          cir.store %18, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc282)
          %19 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc149)
          %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc150)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc150)
          %23 = cir.call @wcscpy(%20, %22) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc151)
          %24 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc152)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
          cir.call @printWLine(%25) : (!cir.ptr<!s32i>) -> () loc(#loc153)
        } loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.return loc(#loc124)
  } loc(#loc270)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc154)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc286)
    cir.scope {
      %2 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc288)
      %3 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc165)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc171)
      } else {
        %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc154)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc154)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc154)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc290)
      } loc(#loc289)
    } loc(#loc287)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc292)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc175)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc175)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc295)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc296)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc184)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc185)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc184)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc295)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc183)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc183)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc183)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc183)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc183)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc183)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc183)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc183)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc183)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc296)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc186)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc187)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc186)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc189)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc189)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc190)
        } loc(#loc294)
      } loc(#loc293)
    } loc(#loc291)
    cir.return loc(#loc158)
  } loc(#loc284)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc298)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc195)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc299)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc301)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc199)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc199)
      cir.if %4 {
        %5 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc202)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc202)
        %7 = cir.cast(bitcast, %6 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc202)
        cir.store %7, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc303)
      } loc(#loc302)
    } loc(#loc300)
    cir.scope {
      %2 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc305)
      %3 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc206)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc206)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc308)
          %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc309)
          %7 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc215)
          %8 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc216)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc216)
          %10 = cir.call @strlen(%9) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc215)
          cir.store %10, %5 : !u64i, !cir.ptr<!u64i> loc(#loc308)
          %11 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc214)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc214)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc214)
          %14 = cir.binop(add, %11, %13) : !u64i loc(#loc214)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc214)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc214)
          %17 = cir.binop(mul, %14, %16) : !u64i loc(#loc214)
          %18 = cir.alloca !u8i, !cir.ptr<!u8i>, %17 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc214)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc214)
          cir.store %19, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc309)
          %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc217)
          %21 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc218)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc218)
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc219)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc219)
          %25 = cir.call @strcpy(%22, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc217)
          %26 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc220)
          %27 = cir.cast(bitcast, %26 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc220)
          cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc221)
        } loc(#loc307)
      } loc(#loc306)
    } loc(#loc304)
    cir.return loc(#loc192)
  } loc(#loc297)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":47:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":40:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":59:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":42:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":42:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":43:12)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":43:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":48:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:8)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":44:26)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":45:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":47:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":58:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:8)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":49:26)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":50:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":51:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":57:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:49)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":54:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":54:35)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:30)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":53:45)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:26)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:32)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":55:19)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":56:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":56:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":163:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":169:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":165:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":165:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":166:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":166:14)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":167:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":167:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":168:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":168:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":185:15)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":187:15)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":190:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":192:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":180:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":195:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":181:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":183:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":183:22)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":183:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":185:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":186:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":186:56)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":187:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":190:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":191:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":191:55)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":192:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":194:12)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":194:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":28:1)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":31:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":30:12)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":30:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":78:19)
#loc81 = loc("/usr/include/wchar.h":247:1)
#loc82 = loc("/usr/include/wchar.h":247:51)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":66:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":90:1)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":68:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":68:12)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":69:12)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":69:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":74:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:8)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":70:26)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":71:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":73:24)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":73:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":89:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:8)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":75:27)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":76:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":79:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":81:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":78:9)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":82:9)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":88:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:52)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":85:13)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":85:35)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":84:48)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:26)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":86:19)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":87:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":87:13)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":33:1)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":36:1)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":35:12)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":35:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":93:1)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":112:1)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":95:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":95:12)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":96:12)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":96:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:5)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":101:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:8)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":97:26)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":98:5)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":100:24)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":100:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":111:5)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:8)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":102:26)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":103:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":104:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":110:9)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:52)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":107:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":107:35)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:30)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":106:48)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:26)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:32)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":108:19)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":109:35)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":109:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":127:24)
#loc155 = loc("/usr/include/string.h":141:1)
#loc156 = loc("/usr/include/string.h":142:14)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":115:1)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":139:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":117:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":117:12)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":118:12)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":118:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":128:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:8)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":119:27)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":120:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":123:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":125:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":122:19)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":122:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":127:9)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":138:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:8)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":129:26)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":130:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":131:9)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":137:9)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:49)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":134:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":134:35)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:30)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":133:45)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:19)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:26)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":135:32)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":136:31)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":136:13)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":142:1)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":161:1)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":144:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":144:12)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":145:12)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":145:5)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:5)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":150:5)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:8)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":146:26)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":147:5)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":149:24)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":149:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:5)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":160:5)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:8)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":151:26)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":152:5)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":153:9)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":159:9)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:13)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:49)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":156:13)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":156:35)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:30)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":155:45)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:19)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:26)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":157:32)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":158:31)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_08.c":158:13)
#loc222 = loc(fused[#loc2, #loc3])
#loc223 = loc(fused[#loc4, #loc5])
#loc224 = loc(fused[#loc6, #loc7])
#loc225 = loc(fused[#loc8, #loc9])
#loc226 = loc(fused[#loc10, #loc11])
#loc227 = loc(fused[#loc13, #loc12])
#loc228 = loc(fused[#loc14, #loc15])
#loc229 = loc(fused[#loc16, #loc17])
#loc230 = loc(fused[#loc18, #loc15])
#loc231 = loc(fused[#loc19, #loc1])
#loc232 = loc(fused[#loc20, #loc21])
#loc233 = loc(fused[#loc22, #loc23])
#loc234 = loc(fused[#loc24, #loc21])
#loc235 = loc(fused[#loc25, #loc26])
#loc236 = loc(fused[#loc27, #loc28])
#loc237 = loc(fused[#loc29, #loc30])
#loc238 = loc(fused[#loc38, #loc39])
#loc239 = loc(fused[#loc40, #loc41])
#loc240 = loc(fused[#loc42, #loc43])
#loc241 = loc(fused[#loc44, #loc45])
#loc242 = loc(fused[#loc46, #loc47])
#loc243 = loc(fused[#loc48, #loc49])
#loc244 = loc(fused[#loc50, #loc51])
#loc245 = loc(fused[#loc56, #loc57])
#loc248 = loc(fused[#loc67, #loc68])
#loc249 = loc(fused[#loc71, #loc72])
#loc250 = loc(fused[#loc75, #loc74])
#loc251 = loc(fused[#loc76, #loc77])
#loc252 = loc(fused[#loc79, #loc78])
#loc253 = loc(fused[#loc81, #loc82])
#loc254 = loc(fused[#loc83, #loc84])
#loc255 = loc(fused[#loc85, #loc86])
#loc256 = loc(fused[#loc87, #loc88])
#loc257 = loc(fused[#loc90, #loc89])
#loc258 = loc(fused[#loc91, #loc92])
#loc259 = loc(fused[#loc93, #loc94])
#loc260 = loc(fused[#loc95, #loc92])
#loc261 = loc(fused[#loc97, #loc96])
#loc262 = loc(fused[#loc98, #loc99])
#loc263 = loc(fused[#loc100, #loc101])
#loc264 = loc(fused[#loc102, #loc103, #loc104, #loc99])
#loc265 = loc(fused[#loc106, #loc107])
#loc266 = loc(fused[#loc108, #loc109])
#loc267 = loc(fused[#loc110, #loc111])
#loc268 = loc(fused[#loc119, #loc120])
#loc269 = loc(fused[#loc122, #loc121])
#loc270 = loc(fused[#loc123, #loc124])
#loc271 = loc(fused[#loc125, #loc126])
#loc272 = loc(fused[#loc128, #loc127])
#loc273 = loc(fused[#loc129, #loc130])
#loc274 = loc(fused[#loc131, #loc132])
#loc275 = loc(fused[#loc133, #loc130])
#loc276 = loc(fused[#loc135, #loc134])
#loc277 = loc(fused[#loc136, #loc137])
#loc278 = loc(fused[#loc138, #loc139])
#loc279 = loc(fused[#loc140, #loc137])
#loc280 = loc(fused[#loc141, #loc142])
#loc281 = loc(fused[#loc143, #loc144])
#loc282 = loc(fused[#loc145, #loc146])
#loc283 = loc(fused[#loc155, #loc156])
#loc284 = loc(fused[#loc157, #loc158])
#loc285 = loc(fused[#loc159, #loc160])
#loc286 = loc(fused[#loc162, #loc161])
#loc287 = loc(fused[#loc163, #loc164])
#loc288 = loc(fused[#loc165, #loc166])
#loc289 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc290 = loc(fused[#loc172, #loc154])
#loc291 = loc(fused[#loc173, #loc174])
#loc292 = loc(fused[#loc175, #loc176])
#loc293 = loc(fused[#loc177, #loc174])
#loc294 = loc(fused[#loc178, #loc179])
#loc295 = loc(fused[#loc180, #loc181])
#loc296 = loc(fused[#loc182, #loc183])
#loc297 = loc(fused[#loc191, #loc192])
#loc298 = loc(fused[#loc193, #loc194])
#loc299 = loc(fused[#loc196, #loc195])
#loc300 = loc(fused[#loc197, #loc198])
#loc301 = loc(fused[#loc199, #loc200])
#loc302 = loc(fused[#loc201, #loc198])
#loc303 = loc(fused[#loc203, #loc202])
#loc304 = loc(fused[#loc204, #loc205])
#loc305 = loc(fused[#loc206, #loc207])
#loc306 = loc(fused[#loc208, #loc205])
#loc307 = loc(fused[#loc209, #loc210])
#loc308 = loc(fused[#loc211, #loc212])
#loc309 = loc(fused[#loc213, #loc214])
