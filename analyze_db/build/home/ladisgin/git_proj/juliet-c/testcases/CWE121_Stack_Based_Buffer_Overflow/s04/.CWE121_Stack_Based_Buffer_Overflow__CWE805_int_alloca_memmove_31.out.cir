!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":79:10)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":79:14)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":79:20)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":79:32)
#loc119 = loc(fused[#loc50, #loc51])
#loc120 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc99)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc103)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc102)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc11)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
    cir.scope {
      %18 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc106)
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
      cir.store %20, %18 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
      %21 = cir.load %18 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc18)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
      cir.scope {
        %22 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc109)
        %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc109)
        cir.store %23, %22 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc109)
        %24 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc23)
        %26 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc24)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc24)
        %28 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc25)
        %30 = cir.const #cir.int<4> : !u64i loc(#loc110)
        %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc111)
        cir.libc.memmove %31 bytes from %27 to %25 : !cir.ptr<!void>, !u64i loc(#loc112)
        %32 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
        %33 = cir.const #cir.int<0> : !s32i loc(#loc31)
        %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc32)
        %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc33)
      } loc(#loc108)
    } loc(#loc105)
    cir.return loc(#loc4)
  } loc(#loc100)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc113)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc115)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    cir.return %17 : !s32i loc(#loc123)
  } loc(#loc118)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc73)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc73)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc73)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc73)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc73)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc127)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc73)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc73)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc75)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc75)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc75)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc75)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    %17 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc128)
    cir.scope {
      %18 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc130)
      %19 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc131)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      cir.store %20, %18 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
      %21 = cir.load %18 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
      cir.store %21, %19 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc131)
      cir.scope {
        %22 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc133)
        %23 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc133)
        cir.store %23, %22 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc133)
        %24 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
        %25 = cir.cast(bitcast, %24 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc88)
        %26 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc89)
        %27 = cir.cast(bitcast, %26 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc89)
        %28 = cir.const #cir.int<100> : !s32i loc(#loc90)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc90)
        %30 = cir.const #cir.int<4> : !u64i loc(#loc134)
        %31 = cir.binop(mul, %29, %30) : !u64i loc(#loc135)
        cir.libc.memmove %31 bytes from %27 to %25 : !cir.ptr<!void>, !u64i loc(#loc136)
        %32 = cir.load %19 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
        %33 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc97)
        %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc98)
      } loc(#loc132)
    } loc(#loc129)
    cir.return loc(#loc69)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":39:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":24:34)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":25:35)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":28:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":38:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":30:26)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":31:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":31:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":37:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":33:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":33:33)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:21)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:27)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:35)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:39)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:49)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":35:50)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":36:26)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":36:31)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":36:32)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":36:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":65:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":68:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":67:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":67:13)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":84:15)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":86:15)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":89:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":91:15)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":79:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":94:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":80:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":82:27)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":82:22)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":82:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":84:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":85:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":85:75)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":86:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":89:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":90:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":90:74)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":91:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":93:12)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":93:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":46:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":63:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":48:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":48:11)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":49:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":49:34)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":50:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":50:35)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":52:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":52:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":53:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":62:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":54:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":54:26)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":55:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":55:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":56:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":61:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":57:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":57:33)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:21)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:27)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:35)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:39)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:49)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":59:50)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":60:26)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":60:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":60:32)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_31.c":60:13)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc12, #loc11])
#loc105 = loc(fused[#loc13, #loc14])
#loc106 = loc(fused[#loc15, #loc16])
#loc107 = loc(fused[#loc17, #loc18])
#loc108 = loc(fused[#loc19, #loc20])
#loc109 = loc(fused[#loc21, #loc22])
#loc110 = loc(fused[#loc26, #loc27])
#loc111 = loc(fused[#loc25, #loc27])
#loc112 = loc(fused[#loc28, #loc29])
#loc113 = loc(fused[#loc34, #loc35])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc38, #loc39])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc48, #loc49])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc67, #loc66])
#loc124 = loc(fused[#loc68, #loc69])
#loc125 = loc(fused[#loc70, #loc71])
#loc126 = loc(fused[#loc72, #loc73])
#loc127 = loc(fused[#loc74, #loc75])
#loc128 = loc(fused[#loc77, #loc76])
#loc129 = loc(fused[#loc78, #loc79])
#loc130 = loc(fused[#loc80, #loc81])
#loc131 = loc(fused[#loc82, #loc83])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc86, #loc87])
#loc134 = loc(fused[#loc91, #loc92])
#loc135 = loc(fused[#loc90, #loc92])
#loc136 = loc(fused[#loc93, #loc94])
