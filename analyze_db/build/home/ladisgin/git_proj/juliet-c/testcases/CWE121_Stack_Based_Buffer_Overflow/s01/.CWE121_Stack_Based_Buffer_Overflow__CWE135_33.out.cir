!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":111:10)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":111:14)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":111:20)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":111:32)
#loc164 = loc(fused[#loc108, #loc109])
#loc165 = loc(fused[#loc110, #loc111])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc124)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc130)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc131)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc132)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc19)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc20)
    cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc133)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %8, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc128)
    cir.br ^bb2 loc(#loc136)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc27)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc27)
    cir.store %14, %1 : !u64i, !cir.ptr<!u64i> loc(#loc129)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc15)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc15)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc15)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc15)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc15)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    cir.store %22, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc31)
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb3 loc(#loc26)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc24)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc9)
  } loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc34)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc137)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc141)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc143)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc48)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc49)
    cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc144)
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc34)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc34)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
    cir.store %8, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc145)
    cir.br ^bb1 loc(#loc146)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc40)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc139)
    cir.br ^bb2 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc56)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc57)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc56)
    cir.store %14, %1 : !u64i, !cir.ptr<!u64i> loc(#loc140)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc44)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc44)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc44)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc44)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc44)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc44)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc44)
    cir.store %23, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc141)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc58)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
    %27 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb3 loc(#loc55)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc38)
  } loc(#loc138)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc148)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc149)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc151)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc153)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc155)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc78)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc79)
    cir.store %5, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc156)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc81)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc81)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc81)
    cir.store %8, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %4 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc70)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc70)
    cir.store %10, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc151)
    cir.br ^bb2 loc(#loc159)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc87)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
    %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc87)
    cir.store %14, %1 : !u64i, !cir.ptr<!u64i> loc(#loc152)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc74)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc74)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc74)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc74)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc74)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc74)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc74)
    cir.store %22, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc153)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc91)
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc93)
    cir.br ^bb3 loc(#loc86)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc68)
  } loc(#loc150)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() : () -> () loc(#loc96)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() : () -> () loc(#loc97)
    cir.return loc(#loc95)
  } loc(#loc160)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc161)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc105)
  cir.func @main(%arg0: !s32i loc(fused[#loc108, #loc109]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc110, #loc111])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc112)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc113)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc114)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc114)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc115)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc102)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_334goodEv() : () -> () loc(#loc117)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc103)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc104)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc104)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_333badEv() : () -> () loc(#loc120)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc105)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc121)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %15 : !s32i loc(#loc166)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":36:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":30:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":38:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":38:23)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:49)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":42:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":42:35)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":32:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":32:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":33:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":33:23)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":34:12)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":34:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":36:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":37:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":46:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":39:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":45:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:30)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:37)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:54)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":44:31)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":44:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":60:20)
#loc35 = loc("/usr/include/string.h":141:1)
#loc36 = loc("/usr/include/string.h":142:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":54:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":71:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":62:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":62:23)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:49)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":66:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":66:35)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":56:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":56:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":57:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":57:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":58:12)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":58:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":60:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":61:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":70:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":63:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":69:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:45)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:48)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":68:31)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":68:13)
#loc63 = loc("/usr/include/wchar.h":247:1)
#loc64 = loc("/usr/include/wchar.h":247:51)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":74:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":91:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":82:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":82:23)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:52)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":86:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":86:35)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":76:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":76:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":77:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":77:23)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":78:12)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":78:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":80:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":80:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":81:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":90:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":83:9)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":89:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:30)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:48)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:54)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":88:35)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":88:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":93:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":97:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":95:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":96:5)
#loc98 = loc("/usr/include/stdlib.h":575:1)
#loc99 = loc("/usr/include/stdlib.h":575:41)
#loc100 = loc("/usr/include/time.h":76:1)
#loc101 = loc("/usr/include/time.h":76:38)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":116:15)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":118:15)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":121:15)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":123:15)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":111:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":126:1)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":112:1)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":114:27)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":114:22)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":114:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":116:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":117:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":118:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":121:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":122:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":123:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":125:12)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":125:5)
#loc124 = loc(fused[#loc2, #loc3])
#loc125 = loc(fused[#loc4, #loc5])
#loc126 = loc(fused[#loc6, #loc7])
#loc127 = loc(fused[#loc8, #loc9])
#loc128 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc12, #loc13])
#loc130 = loc(fused[#loc14, #loc15])
#loc131 = loc(fused[#loc16, #loc17])
#loc132 = loc(fused[#loc18, #loc19])
#loc133 = loc(fused[#loc21, #loc20])
#loc134 = loc(fused[#loc22, #loc1])
#loc135 = loc(fused[#loc23, #loc24])
#loc136 = loc(fused[#loc25, #loc26])
#loc137 = loc(fused[#loc35, #loc36])
#loc138 = loc(fused[#loc37, #loc38])
#loc139 = loc(fused[#loc39, #loc40])
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
#loc142 = loc(fused[#loc45, #loc46])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc50, #loc49])
#loc145 = loc(fused[#loc51, #loc34])
#loc146 = loc(fused[#loc52, #loc53])
#loc147 = loc(fused[#loc54, #loc55])
#loc148 = loc(fused[#loc63, #loc64])
#loc149 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc67, #loc68])
#loc151 = loc(fused[#loc69, #loc70])
#loc152 = loc(fused[#loc71, #loc72])
#loc153 = loc(fused[#loc73, #loc74])
#loc154 = loc(fused[#loc75, #loc76])
#loc155 = loc(fused[#loc77, #loc78])
#loc156 = loc(fused[#loc80, #loc79])
#loc157 = loc(fused[#loc82, #loc81])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc94, #loc95])
#loc161 = loc(fused[#loc98, #loc99])
#loc162 = loc(fused[#loc100, #loc101])
#loc163 = loc(fused[#loc106, #loc107])
#loc166 = loc(fused[#loc123, #loc122])
