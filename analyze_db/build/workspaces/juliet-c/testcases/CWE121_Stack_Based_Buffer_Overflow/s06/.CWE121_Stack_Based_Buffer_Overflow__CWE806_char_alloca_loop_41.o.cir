!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":23:77)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":23:84)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":54:81)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":54:88)
#loc128 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc65, #loc66])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc128)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc130)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc131)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc132)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc130)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc130)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc17)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc17)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc133)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc23)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc23)
        cir.store %17, %2 : !u64i, !cir.ptr<!u64i> loc(#loc135)
        cir.for : cond {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc25)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
          %20 = cir.cmp(lt, %18, %19) : !u64i, !cir.bool loc(#loc136)
          cir.condition(%20) loc(#loc27)
        } body {
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc31)
            %21 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc29)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc33)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc33)
            cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc138)
          } loc(#loc137)
          cir.yield loc(#loc22)
        } step {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc35)
          cir.store %19, %2 : !u64i, !cir.ptr<!u64i> loc(#loc139)
          cir.yield loc(#loc134)
        } loc(#loc134)
      } loc(#loc134)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc36)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc36)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc37)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc37)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc39)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc39)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc140)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc41)
    } loc(#loc129)
    cir.return loc(#loc6)
  } loc(#loc127)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc47)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc47)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc47)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc47)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc50)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc51)
    %13 = cir.const #cir.int<100> : !s32i loc(#loc52)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc52)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc52)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc145)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc56)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc58)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc60)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc146)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_badSink(%24) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.return loc(#loc43)
  } loc(#loc141)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc65, #loc66])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc148)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc67)
    cir.scope {
      %1 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc150)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc151)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc152)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc150)
      cir.store %4, %1 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc150)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc75)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
      %7 = cir.call @strlen(%6) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc75)
      cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc153)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc81)
        cir.store %17, %2 : !u64i, !cir.ptr<!u64i> loc(#loc155)
        cir.for : cond {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc83)
          %19 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc84)
          %20 = cir.cmp(lt, %18, %19) : !u64i, !cir.bool loc(#loc156)
          cir.condition(%20) loc(#loc85)
        } body {
          cir.scope {
            %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
            %19 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc88)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !u64i), !cir.ptr<!s8i> loc(#loc89)
            %21 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc87)
            %22 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %23 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc91)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc91)
            cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc158)
          } loc(#loc157)
          cir.yield loc(#loc80)
        } step {
          %18 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc92)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc93)
          cir.store %19, %2 : !u64i, !cir.ptr<!u64i> loc(#loc159)
          cir.yield loc(#loc154)
        } loc(#loc154)
      } loc(#loc154)
      %8 = cir.const #cir.int<0> : !s32i loc(#loc94)
      %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc94)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc95)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc96)
      %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc95)
      %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc97)
      %14 = cir.ptr_stride(%13 : !cir.ptr<!s8i>, %12 : !s32i), !cir.ptr<!s8i> loc(#loc97)
      cir.store %9, %14 : !s8i, !cir.ptr<!s8i> loc(#loc160)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    } loc(#loc149)
    cir.return loc(#loc64)
  } loc(#loc147)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc102)
    cir.return loc(#loc101)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc109)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc109)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc109)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc109)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc109)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc109)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc109)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc110)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
    %12 = cir.const #cir.int<65> : !s32i loc(#loc113)
    %13 = cir.const #cir.int<50> : !s32i loc(#loc114)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc115)
    %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc114)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc114)
    cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc167)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc118)
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc120)
    %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc122)
    cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41_goodG2BSink(%24) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.return loc(#loc105)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s06/CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":37:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":24:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":25:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":36:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":26:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":26:25)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":27:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":27:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":27:19)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":28:19)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":28:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":28:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":28:30)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":33:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:21)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:25)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:23)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":31:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":32:23)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":32:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":32:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":32:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":32:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:35)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":30:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":34:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":34:14)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":34:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":34:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":35:19)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":35:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":39:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":48:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":41:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":41:12)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":42:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":42:33)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":43:12)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":43:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:18)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:23)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":45:28)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":46:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":46:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":46:10)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":46:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":46:15)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":47:76)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":47:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":54:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":68:1)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":55:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":56:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":67:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":57:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":57:25)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":58:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":58:16)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":58:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":59:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":59:26)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":59:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":59:30)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":64:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:18)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:14)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:21)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:25)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":62:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":63:23)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":63:28)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":63:29)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":63:18)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":63:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:35)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":61:34)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":65:22)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":65:14)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":65:17)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":65:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":66:19)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":66:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":82:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":85:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":84:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":84:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":71:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":80:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":73:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":73:12)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":74:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":74:33)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":75:12)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":75:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:12)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:18)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:23)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:26)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":77:27)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":78:18)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":78:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":78:10)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":78:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":78:14)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":79:80)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE806_char_alloca_loop_41.c":79:5)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc15])
#loc132 = loc(fused[#loc14, #loc16])
#loc133 = loc(fused[#loc19, #loc20])
#loc134 = loc(fused[#loc21, #loc22])
#loc135 = loc(fused[#loc24, #loc23])
#loc136 = loc(fused[#loc25, #loc26])
#loc137 = loc(fused[#loc28, #loc22])
#loc138 = loc(fused[#loc33, #loc31])
#loc139 = loc(fused[#loc35, #loc34])
#loc140 = loc(fused[#loc39, #loc36])
#loc141 = loc(fused[#loc42, #loc43])
#loc142 = loc(fused[#loc44, #loc45])
#loc143 = loc(fused[#loc46, #loc47])
#loc144 = loc(fused[#loc49, #loc48])
#loc145 = loc(fused[#loc54, #loc55])
#loc146 = loc(fused[#loc57, #loc56])
#loc147 = loc(fused[#loc63, #loc64])
#loc149 = loc(fused[#loc68, #loc69])
#loc150 = loc(fused[#loc70, #loc71])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc72, #loc74])
#loc153 = loc(fused[#loc77, #loc78])
#loc154 = loc(fused[#loc79, #loc80])
#loc155 = loc(fused[#loc82, #loc81])
#loc156 = loc(fused[#loc83, #loc84])
#loc157 = loc(fused[#loc86, #loc80])
#loc158 = loc(fused[#loc91, #loc89])
#loc159 = loc(fused[#loc93, #loc92])
#loc160 = loc(fused[#loc97, #loc94])
#loc161 = loc(fused[#loc100, #loc101])
#loc162 = loc(fused[#loc102, #loc103])
#loc163 = loc(fused[#loc104, #loc105])
#loc164 = loc(fused[#loc106, #loc107])
#loc165 = loc(fused[#loc108, #loc109])
#loc166 = loc(fused[#loc111, #loc110])
#loc167 = loc(fused[#loc116, #loc117])
#loc168 = loc(fused[#loc119, #loc118])
