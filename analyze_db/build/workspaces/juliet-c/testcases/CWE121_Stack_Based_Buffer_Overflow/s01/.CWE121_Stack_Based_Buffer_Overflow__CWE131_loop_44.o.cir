!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":21:21)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":21:27)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":52:25)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":52:31)
#loc95 = loc(fused[#loc5, #loc6])
#loc113 = loc(fused[#loc52, #loc53])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc93)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc95)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc97)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc98)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc97)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc97)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc16)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc16)
        cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc100)
        cir.for : cond {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc18)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc19)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc101)
          cir.condition(%13) loc(#loc20)
        } body {
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc23)
            %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc23)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
            %15 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc25)
            %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc26)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc103)
          } loc(#loc102)
          cir.yield loc(#loc15)
        } step {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc28)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc29)
          cir.store %11, %2 : !u64i, !cir.ptr<!u64i> loc(#loc104)
          cir.yield loc(#loc99)
        } loc(#loc99)
      } loc(#loc99)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc30)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc31)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc30)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc33)
    } loc(#loc96)
    cir.return loc(#loc4)
  } loc(#loc94)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc107)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc39)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc107)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc40)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc42)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc42)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc42)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc42)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
    %9 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc44)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
    cir.call %9(%10) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc44)
    cir.return loc(#loc35)
  } loc(#loc105)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc47)
  } loc(#loc110)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc52, #loc53])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc113)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc54)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc115)
      %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc116)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc115)
      cir.store %3, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc115)
      cir.scope {
        %8 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc63)
        cir.store %9, %2 : !u64i, !cir.ptr<!u64i> loc(#loc118)
        cir.for : cond {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc65)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc66)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc66)
          %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc119)
          cir.condition(%13) loc(#loc67)
        } body {
          cir.scope {
            %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc70)
            %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc70)
            %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
            %15 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc72)
            %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc73)
            cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc121)
          } loc(#loc120)
          cir.yield loc(#loc62)
        } step {
          %10 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc75)
          %11 = cir.unary(inc, %10) : !u64i, !u64i loc(#loc76)
          cir.store %11, %2 : !u64i, !cir.ptr<!u64i> loc(#loc122)
          cir.yield loc(#loc117)
        } loc(#loc117)
      } loc(#loc117)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc78)
      %6 = cir.ptr_stride(%4 : !cir.ptr<!s32i>, %5 : !s32i), !cir.ptr<!s32i> loc(#loc79)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc80)
    } loc(#loc114)
    cir.return loc(#loc51)
  } loc(#loc112)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc86)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>> loc(#loc125)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc87)
    cir.store %3, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc126)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc89)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc89)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc89)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc89)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc89)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc89)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
    cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc127)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s32i>)>> loc(#loc91)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
    cir.call %11(%12) : (!cir.ptr<!cir.func<(!cir.ptr<!s32i>)>>, !cir.ptr<!s32i>) -> () loc(#loc91)
    cir.return loc(#loc82)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":33:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":22:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":23:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":24:9)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":24:28)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":25:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":25:16)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":30:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:18)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:14)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:21)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:25)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":28:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:30)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:23)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:18)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:19)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":29:31)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":27:29)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":31:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":31:27)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":31:28)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":31:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":35:1)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":45:1)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":37:5)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":37:11)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":39:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":39:31)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":40:12)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":40:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":42:19)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":42:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":44:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":44:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":76:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":79:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":78:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":78:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":52:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":64:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":53:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":54:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":63:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":55:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":55:28)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":56:9)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":56:16)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":61:9)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:18)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:21)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:25)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:23)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":59:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:30)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:23)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:18)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:19)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":60:31)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":58:29)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":62:22)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":62:27)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":62:28)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":62:9)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":66:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":74:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":68:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":68:11)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":69:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":69:31)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":70:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":70:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":72:19)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":72:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":73:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_44.c":73:13)
#loc93 = loc(fused[#loc1, #loc2])
#loc94 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc8, #loc9])
#loc97 = loc(fused[#loc10, #loc11])
#loc98 = loc(fused[#loc12, #loc13])
#loc99 = loc(fused[#loc14, #loc15])
#loc100 = loc(fused[#loc17, #loc16])
#loc101 = loc(fused[#loc18, #loc19])
#loc102 = loc(fused[#loc21, #loc15])
#loc103 = loc(fused[#loc24, #loc27])
#loc104 = loc(fused[#loc29, #loc28])
#loc105 = loc(fused[#loc34, #loc35])
#loc106 = loc(fused[#loc36, #loc37])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc41, #loc40])
#loc109 = loc(fused[#loc43, #loc42])
#loc110 = loc(fused[#loc46, #loc47])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc50, #loc51])
#loc114 = loc(fused[#loc55, #loc56])
#loc115 = loc(fused[#loc57, #loc58])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc64, #loc63])
#loc119 = loc(fused[#loc65, #loc66])
#loc120 = loc(fused[#loc68, #loc62])
#loc121 = loc(fused[#loc71, #loc74])
#loc122 = loc(fused[#loc76, #loc75])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc83, #loc84])
#loc125 = loc(fused[#loc85, #loc86])
#loc126 = loc(fused[#loc88, #loc87])
#loc127 = loc(fused[#loc90, #loc89])
