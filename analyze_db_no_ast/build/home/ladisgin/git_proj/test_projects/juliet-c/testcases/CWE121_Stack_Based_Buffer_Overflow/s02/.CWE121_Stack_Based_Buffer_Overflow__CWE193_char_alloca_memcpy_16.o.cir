!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc77)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc78)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc81)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc82)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc81)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc12)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc12)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc12)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc82)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%20) loc(#loc15)
      } do {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc18)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc85)
        cir.break loc(#loc22)
      } loc(#loc83)
    } loc(#loc83)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc87)
      %20 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc87)
      cir.store %20, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc87)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc28)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
      %25 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc29)
      %26 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc30)
      %27 = cir.call @strlen(%26) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc29)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc31)
      %30 = cir.binop(add, %27, %29) : !u64i loc(#loc88)
      %31 = cir.const #cir.int<1> : !u64i loc(#loc89)
      %32 = cir.binop(mul, %30, %31) : !u64i loc(#loc90)
      cir.libc.memcpy %32 bytes from %24 to %22 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc91)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    } loc(#loc86)
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc40)
  } loc(#loc92)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc95)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc96)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc48)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc48)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc48)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc48)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc48)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc97)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc48)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc96)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc50)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc50)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc50)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc50)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc50)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc50)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc50)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc50)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc97)
    cir.scope {
      cir.while {
        %19 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%20) loc(#loc53)
      } do {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
        cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc99)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc56)
        %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc59)
        cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc100)
        cir.break loc(#loc60)
      } loc(#loc98)
    } loc(#loc98)
    cir.scope {
      %19 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc102)
      %20 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc102)
      cir.store %20, %19 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc102)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc65)
      %23 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc66)
      %24 = cir.cast(bitcast, %23 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      %25 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc67)
      %26 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc68)
      %27 = cir.call @strlen(%26) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc67)
      %28 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc69)
      %30 = cir.binop(add, %27, %29) : !u64i loc(#loc103)
      %31 = cir.const #cir.int<1> : !u64i loc(#loc104)
      %32 = cir.binop(mul, %30, %31) : !u64i loc(#loc105)
      cir.libc.memcpy %32 bytes from %24 to %22 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc106)
      %33 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%33) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    } loc(#loc101)
    cir.return loc(#loc44)
  } loc(#loc94)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":48:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":30:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":31:36)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":32:37)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":33:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":40:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":33:11)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":37:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":37:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":38:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":38:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":38:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":38:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":41:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":47:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":42:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":42:29)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:16)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:31)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:38)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:48)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:53)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:64)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:30)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":45:65)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":46:19)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":46:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":77:1)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":80:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":79:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":79:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":55:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":75:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":57:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":57:12)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":58:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":58:36)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":59:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":59:37)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":60:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":67:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":60:11)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":64:16)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":64:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":65:19)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":65:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":65:14)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":65:15)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":66:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":68:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":74:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":69:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":69:29)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:16)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:31)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:38)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:48)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:53)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:64)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:30)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":72:65)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":73:19)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_memcpy_16.c":73:9)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc13, #loc14])
#loc84 = loc(fused[#loc17, #loc16])
#loc85 = loc(fused[#loc19, #loc18])
#loc86 = loc(fused[#loc23, #loc24])
#loc87 = loc(fused[#loc25, #loc26])
#loc88 = loc(fused[#loc29, #loc31])
#loc89 = loc(fused[#loc32, #loc33])
#loc90 = loc(fused[#loc34, #loc33])
#loc91 = loc(fused[#loc35, #loc36])
#loc92 = loc(fused[#loc39, #loc40])
#loc93 = loc(fused[#loc41, #loc42])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc49, #loc50])
#loc98 = loc(fused[#loc51, #loc52])
#loc99 = loc(fused[#loc55, #loc54])
#loc100 = loc(fused[#loc57, #loc56])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc64])
#loc103 = loc(fused[#loc67, #loc69])
#loc104 = loc(fused[#loc70, #loc71])
#loc105 = loc(fused[#loc72, #loc71])
#loc106 = loc(fused[#loc73, #loc74])
