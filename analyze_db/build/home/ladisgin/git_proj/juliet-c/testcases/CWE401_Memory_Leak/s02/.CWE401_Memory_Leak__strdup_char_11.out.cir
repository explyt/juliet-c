!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc57 = loc("CWE401_Memory_Leak__strdup_char_11.c":163:10)
#loc58 = loc("CWE401_Memory_Leak__strdup_char_11.c":163:14)
#loc59 = loc("CWE401_Memory_Leak__strdup_char_11.c":163:20)
#loc60 = loc("CWE401_Memory_Leak__strdup_char_11.c":163:32)
#loc212 = loc(fused[#loc57, #loc58])
#loc213 = loc(fused[#loc59, #loc60])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodB2G2.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc187)
  cir.global "private" constant cir_private @__const.goodB2G1.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc188)
  cir.global "private" constant cir_private @__const.CWE401_Memory_Leak__strdup_char_11_bad.myString = #cir.const_array<"myString\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> loc(#loc189)
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc190)
  cir.func private @strdup(!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc191)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc17)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc189)
          %7 = cir.get_global @__const.CWE401_Memory_Leak__strdup_char_11_bad.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc189)
          cir.copy %7 to %6 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc189)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc26)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc27)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc26)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc200)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc30)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc31)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc202)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc202)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc34)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc34)
      cir.if %5 {
      } loc(#loc203)
    } loc(#loc201)
    cir.return loc(#loc14)
  } loc(#loc193)
  cir.func no_proto @CWE401_Memory_Leak__strdup_char_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc38)
  } loc(#loc204)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc209)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc213)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc64)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE401_Memory_Leak__strdup_char_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call @CWE401_Memory_Leak__strdup_char_11_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE401_Memory_Leak__strdup_char_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call @CWE401_Memory_Leak__strdup_char_11_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc216)
    cir.return %17 : !s32i loc(#loc216)
  } loc(#loc211)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc218)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc84)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc223)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc223)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc88)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc88)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc188)
          %7 = cir.get_global @__const.goodB2G1.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc188)
          cir.copy %7 to %6 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc188)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc93)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc94)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc93)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc98)
        } loc(#loc225)
      } loc(#loc224)
    } loc(#loc222)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc228)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc228)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
      } loc(#loc229)
    } loc(#loc227)
    cir.return loc(#loc81)
  } loc(#loc219)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc113)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc232)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc234)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc117)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc117)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s8i x 9>, !cir.ptr<!cir.array<!s8i x 9>>, ["myString"] {alignment = 1 : i64} loc(#loc187)
          %7 = cir.get_global @__const.goodB2G2.myString : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc187)
          cir.copy %7 to %6 : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc187)
          %8 = cir.get_global @strdup : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>)>> loc(#loc122)
          %9 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc123)
          %10 = cir.call @strdup(%9) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc122)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
          %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc127)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc239)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc239)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc130)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc130)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc134)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc110)
  } loc(#loc230)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"a string\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc137)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc243)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc142)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc244)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc146)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc146)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc152)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc153)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc153)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc153)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc153)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc153)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc153)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc153)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc248)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc155)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc156)
        %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc137)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc137)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc155)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc158)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc250)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc250)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc161)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
      cir.if %5 {
      } loc(#loc251)
    } loc(#loc249)
    cir.return loc(#loc139)
  } loc(#loc242)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc253)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc168)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc254)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc256)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc172)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc172)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc175)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc175)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc175)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc175)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc175)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc175)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc175)
        cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc258)
        %13 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc177)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
        %15 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc179)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc179)
        %17 = cir.call @strcpy(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc177)
        %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc180)
        cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc181)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc184)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc184)
      cir.if %5 {
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc165)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s02/CWE401_Memory_Leak__strdup_char_11.c":0:0)
#loc1 = loc("CWE401_Memory_Leak__strdup_char_11.c":85:13)
#loc2 = loc("CWE401_Memory_Leak__strdup_char_11.c":85:31)
#loc3 = loc("CWE401_Memory_Leak__strdup_char_11.c":58:13)
#loc4 = loc("CWE401_Memory_Leak__strdup_char_11.c":58:31)
#loc5 = loc("CWE401_Memory_Leak__strdup_char_11.c":31:13)
#loc6 = loc("CWE401_Memory_Leak__strdup_char_11.c":31:31)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc9 = loc("/usr/include/string.h":187:1)
#loc10 = loc("/usr/include/string.h":188:35)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE401_Memory_Leak__strdup_char_11.c":24:1)
#loc14 = loc("CWE401_Memory_Leak__strdup_char_11.c":44:1)
#loc15 = loc("CWE401_Memory_Leak__strdup_char_11.c":26:5)
#loc16 = loc("CWE401_Memory_Leak__strdup_char_11.c":26:12)
#loc17 = loc("CWE401_Memory_Leak__strdup_char_11.c":27:12)
#loc18 = loc("CWE401_Memory_Leak__strdup_char_11.c":27:5)
#loc19 = loc("CWE401_Memory_Leak__strdup_char_11.c":28:5)
#loc20 = loc("CWE401_Memory_Leak__strdup_char_11.c":37:5)
#loc21 = loc("CWE401_Memory_Leak__strdup_char_11.c":28:8)
#loc22 = loc("CWE401_Memory_Leak__strdup_char_11.c":28:26)
#loc23 = loc("CWE401_Memory_Leak__strdup_char_11.c":29:5)
#loc24 = loc("CWE401_Memory_Leak__strdup_char_11.c":30:9)
#loc25 = loc("CWE401_Memory_Leak__strdup_char_11.c":36:9)
#loc26 = loc("CWE401_Memory_Leak__strdup_char_11.c":33:20)
#loc27 = loc("CWE401_Memory_Leak__strdup_char_11.c":33:27)
#loc28 = loc("CWE401_Memory_Leak__strdup_char_11.c":33:13)
#loc29 = loc("CWE401_Memory_Leak__strdup_char_11.c":33:35)
#loc30 = loc("CWE401_Memory_Leak__strdup_char_11.c":35:23)
#loc31 = loc("CWE401_Memory_Leak__strdup_char_11.c":35:13)
#loc32 = loc("CWE401_Memory_Leak__strdup_char_11.c":38:5)
#loc33 = loc("CWE401_Memory_Leak__strdup_char_11.c":43:5)
#loc34 = loc("CWE401_Memory_Leak__strdup_char_11.c":38:8)
#loc35 = loc("CWE401_Memory_Leak__strdup_char_11.c":38:26)
#loc36 = loc("CWE401_Memory_Leak__strdup_char_11.c":39:5)
#loc37 = loc("CWE401_Memory_Leak__strdup_char_11.c":146:1)
#loc38 = loc("CWE401_Memory_Leak__strdup_char_11.c":152:1)
#loc39 = loc("CWE401_Memory_Leak__strdup_char_11.c":148:5)
#loc40 = loc("CWE401_Memory_Leak__strdup_char_11.c":148:14)
#loc41 = loc("CWE401_Memory_Leak__strdup_char_11.c":149:5)
#loc42 = loc("CWE401_Memory_Leak__strdup_char_11.c":149:14)
#loc43 = loc("CWE401_Memory_Leak__strdup_char_11.c":150:5)
#loc44 = loc("CWE401_Memory_Leak__strdup_char_11.c":150:14)
#loc45 = loc("CWE401_Memory_Leak__strdup_char_11.c":151:5)
#loc46 = loc("CWE401_Memory_Leak__strdup_char_11.c":151:14)
#loc47 = loc("/usr/include/stdlib.h":575:1)
#loc48 = loc("/usr/include/stdlib.h":575:41)
#loc49 = loc("/usr/include/time.h":76:1)
#loc50 = loc("/usr/include/time.h":76:38)
#loc51 = loc("CWE401_Memory_Leak__strdup_char_11.c":168:15)
#loc52 = loc("CWE401_Memory_Leak__strdup_char_11.c":170:15)
#loc53 = loc("CWE401_Memory_Leak__strdup_char_11.c":173:15)
#loc54 = loc("CWE401_Memory_Leak__strdup_char_11.c":175:15)
#loc55 = loc("CWE401_Memory_Leak__strdup_char_11.c":163:1)
#loc56 = loc("CWE401_Memory_Leak__strdup_char_11.c":178:1)
#loc61 = loc("CWE401_Memory_Leak__strdup_char_11.c":164:1)
#loc62 = loc("CWE401_Memory_Leak__strdup_char_11.c":166:27)
#loc63 = loc("CWE401_Memory_Leak__strdup_char_11.c":166:22)
#loc64 = loc("CWE401_Memory_Leak__strdup_char_11.c":166:5)
#loc65 = loc("CWE401_Memory_Leak__strdup_char_11.c":168:5)
#loc66 = loc("CWE401_Memory_Leak__strdup_char_11.c":169:5)
#loc67 = loc("CWE401_Memory_Leak__strdup_char_11.c":169:45)
#loc68 = loc("CWE401_Memory_Leak__strdup_char_11.c":170:5)
#loc69 = loc("CWE401_Memory_Leak__strdup_char_11.c":173:5)
#loc70 = loc("CWE401_Memory_Leak__strdup_char_11.c":174:5)
#loc71 = loc("CWE401_Memory_Leak__strdup_char_11.c":174:44)
#loc72 = loc("CWE401_Memory_Leak__strdup_char_11.c":175:5)
#loc73 = loc("CWE401_Memory_Leak__strdup_char_11.c":177:12)
#loc74 = loc("CWE401_Memory_Leak__strdup_char_11.c":177:5)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc77 = loc("CWE401_Memory_Leak__strdup_char_11.c":68:19)
#loc78 = loc("/usr/include/stdlib.h":687:1)
#loc79 = loc("/usr/include/stdlib.h":687:32)
#loc80 = loc("CWE401_Memory_Leak__strdup_char_11.c":51:1)
#loc81 = loc("CWE401_Memory_Leak__strdup_char_11.c":75:1)
#loc82 = loc("CWE401_Memory_Leak__strdup_char_11.c":53:5)
#loc83 = loc("CWE401_Memory_Leak__strdup_char_11.c":53:12)
#loc84 = loc("CWE401_Memory_Leak__strdup_char_11.c":54:12)
#loc85 = loc("CWE401_Memory_Leak__strdup_char_11.c":54:5)
#loc86 = loc("CWE401_Memory_Leak__strdup_char_11.c":55:5)
#loc87 = loc("CWE401_Memory_Leak__strdup_char_11.c":64:5)
#loc88 = loc("CWE401_Memory_Leak__strdup_char_11.c":55:8)
#loc89 = loc("CWE401_Memory_Leak__strdup_char_11.c":55:26)
#loc90 = loc("CWE401_Memory_Leak__strdup_char_11.c":56:5)
#loc91 = loc("CWE401_Memory_Leak__strdup_char_11.c":57:9)
#loc92 = loc("CWE401_Memory_Leak__strdup_char_11.c":63:9)
#loc93 = loc("CWE401_Memory_Leak__strdup_char_11.c":60:20)
#loc94 = loc("CWE401_Memory_Leak__strdup_char_11.c":60:27)
#loc95 = loc("CWE401_Memory_Leak__strdup_char_11.c":60:13)
#loc96 = loc("CWE401_Memory_Leak__strdup_char_11.c":60:35)
#loc97 = loc("CWE401_Memory_Leak__strdup_char_11.c":62:23)
#loc98 = loc("CWE401_Memory_Leak__strdup_char_11.c":62:13)
#loc99 = loc("CWE401_Memory_Leak__strdup_char_11.c":65:5)
#loc100 = loc("CWE401_Memory_Leak__strdup_char_11.c":74:5)
#loc101 = loc("CWE401_Memory_Leak__strdup_char_11.c":65:8)
#loc102 = loc("CWE401_Memory_Leak__strdup_char_11.c":65:27)
#loc103 = loc("CWE401_Memory_Leak__strdup_char_11.c":66:5)
#loc104 = loc("CWE401_Memory_Leak__strdup_char_11.c":69:5)
#loc105 = loc("CWE401_Memory_Leak__strdup_char_11.c":71:5)
#loc106 = loc("CWE401_Memory_Leak__strdup_char_11.c":68:9)
#loc107 = loc("CWE401_Memory_Leak__strdup_char_11.c":73:9)
#loc108 = loc("CWE401_Memory_Leak__strdup_char_11.c":73:14)
#loc109 = loc("CWE401_Memory_Leak__strdup_char_11.c":78:1)
#loc110 = loc("CWE401_Memory_Leak__strdup_char_11.c":97:1)
#loc111 = loc("CWE401_Memory_Leak__strdup_char_11.c":80:5)
#loc112 = loc("CWE401_Memory_Leak__strdup_char_11.c":80:12)
#loc113 = loc("CWE401_Memory_Leak__strdup_char_11.c":81:12)
#loc114 = loc("CWE401_Memory_Leak__strdup_char_11.c":81:5)
#loc115 = loc("CWE401_Memory_Leak__strdup_char_11.c":82:5)
#loc116 = loc("CWE401_Memory_Leak__strdup_char_11.c":91:5)
#loc117 = loc("CWE401_Memory_Leak__strdup_char_11.c":82:8)
#loc118 = loc("CWE401_Memory_Leak__strdup_char_11.c":82:26)
#loc119 = loc("CWE401_Memory_Leak__strdup_char_11.c":83:5)
#loc120 = loc("CWE401_Memory_Leak__strdup_char_11.c":84:9)
#loc121 = loc("CWE401_Memory_Leak__strdup_char_11.c":90:9)
#loc122 = loc("CWE401_Memory_Leak__strdup_char_11.c":87:20)
#loc123 = loc("CWE401_Memory_Leak__strdup_char_11.c":87:27)
#loc124 = loc("CWE401_Memory_Leak__strdup_char_11.c":87:13)
#loc125 = loc("CWE401_Memory_Leak__strdup_char_11.c":87:35)
#loc126 = loc("CWE401_Memory_Leak__strdup_char_11.c":89:23)
#loc127 = loc("CWE401_Memory_Leak__strdup_char_11.c":89:13)
#loc128 = loc("CWE401_Memory_Leak__strdup_char_11.c":92:5)
#loc129 = loc("CWE401_Memory_Leak__strdup_char_11.c":96:5)
#loc130 = loc("CWE401_Memory_Leak__strdup_char_11.c":92:8)
#loc131 = loc("CWE401_Memory_Leak__strdup_char_11.c":92:26)
#loc132 = loc("CWE401_Memory_Leak__strdup_char_11.c":93:5)
#loc133 = loc("CWE401_Memory_Leak__strdup_char_11.c":95:9)
#loc134 = loc("CWE401_Memory_Leak__strdup_char_11.c":95:14)
#loc135 = loc("/usr/include/string.h":141:1)
#loc136 = loc("/usr/include/string.h":142:14)
#loc137 = loc("CWE401_Memory_Leak__strdup_char_11.c":114:22)
#loc138 = loc("CWE401_Memory_Leak__strdup_char_11.c":100:1)
#loc139 = loc("CWE401_Memory_Leak__strdup_char_11.c":123:1)
#loc140 = loc("CWE401_Memory_Leak__strdup_char_11.c":102:5)
#loc141 = loc("CWE401_Memory_Leak__strdup_char_11.c":102:12)
#loc142 = loc("CWE401_Memory_Leak__strdup_char_11.c":103:12)
#loc143 = loc("CWE401_Memory_Leak__strdup_char_11.c":103:5)
#loc144 = loc("CWE401_Memory_Leak__strdup_char_11.c":104:5)
#loc145 = loc("CWE401_Memory_Leak__strdup_char_11.c":116:5)
#loc146 = loc("CWE401_Memory_Leak__strdup_char_11.c":104:8)
#loc147 = loc("CWE401_Memory_Leak__strdup_char_11.c":104:27)
#loc148 = loc("CWE401_Memory_Leak__strdup_char_11.c":105:5)
#loc149 = loc("CWE401_Memory_Leak__strdup_char_11.c":108:5)
#loc150 = loc("CWE401_Memory_Leak__strdup_char_11.c":110:5)
#loc151 = loc("CWE401_Memory_Leak__strdup_char_11.c":107:19)
#loc152 = loc("CWE401_Memory_Leak__strdup_char_11.c":107:9)
#loc153 = loc("CWE401_Memory_Leak__strdup_char_11.c":112:24)
#loc154 = loc("CWE401_Memory_Leak__strdup_char_11.c":112:9)
#loc155 = loc("CWE401_Memory_Leak__strdup_char_11.c":114:9)
#loc156 = loc("CWE401_Memory_Leak__strdup_char_11.c":114:16)
#loc157 = loc("CWE401_Memory_Leak__strdup_char_11.c":115:19)
#loc158 = loc("CWE401_Memory_Leak__strdup_char_11.c":115:9)
#loc159 = loc("CWE401_Memory_Leak__strdup_char_11.c":117:5)
#loc160 = loc("CWE401_Memory_Leak__strdup_char_11.c":122:5)
#loc161 = loc("CWE401_Memory_Leak__strdup_char_11.c":117:8)
#loc162 = loc("CWE401_Memory_Leak__strdup_char_11.c":117:26)
#loc163 = loc("CWE401_Memory_Leak__strdup_char_11.c":118:5)
#loc164 = loc("CWE401_Memory_Leak__strdup_char_11.c":126:1)
#loc165 = loc("CWE401_Memory_Leak__strdup_char_11.c":144:1)
#loc166 = loc("CWE401_Memory_Leak__strdup_char_11.c":128:5)
#loc167 = loc("CWE401_Memory_Leak__strdup_char_11.c":128:12)
#loc168 = loc("CWE401_Memory_Leak__strdup_char_11.c":129:12)
#loc169 = loc("CWE401_Memory_Leak__strdup_char_11.c":129:5)
#loc170 = loc("CWE401_Memory_Leak__strdup_char_11.c":130:5)
#loc171 = loc("CWE401_Memory_Leak__strdup_char_11.c":137:5)
#loc172 = loc("CWE401_Memory_Leak__strdup_char_11.c":130:8)
#loc173 = loc("CWE401_Memory_Leak__strdup_char_11.c":130:26)
#loc174 = loc("CWE401_Memory_Leak__strdup_char_11.c":131:5)
#loc175 = loc("CWE401_Memory_Leak__strdup_char_11.c":133:24)
#loc176 = loc("CWE401_Memory_Leak__strdup_char_11.c":133:9)
#loc177 = loc("CWE401_Memory_Leak__strdup_char_11.c":135:9)
#loc178 = loc("CWE401_Memory_Leak__strdup_char_11.c":135:16)
#loc179 = loc("CWE401_Memory_Leak__strdup_char_11.c":135:22)
#loc180 = loc("CWE401_Memory_Leak__strdup_char_11.c":136:19)
#loc181 = loc("CWE401_Memory_Leak__strdup_char_11.c":136:9)
#loc182 = loc("CWE401_Memory_Leak__strdup_char_11.c":138:5)
#loc183 = loc("CWE401_Memory_Leak__strdup_char_11.c":143:5)
#loc184 = loc("CWE401_Memory_Leak__strdup_char_11.c":138:8)
#loc185 = loc("CWE401_Memory_Leak__strdup_char_11.c":138:26)
#loc186 = loc("CWE401_Memory_Leak__strdup_char_11.c":139:5)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc5, #loc6])
#loc190 = loc(fused[#loc7, #loc8])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc15, #loc16])
#loc195 = loc(fused[#loc18, #loc17])
#loc196 = loc(fused[#loc19, #loc20])
#loc197 = loc(fused[#loc21, #loc22])
#loc198 = loc(fused[#loc23, #loc20])
#loc199 = loc(fused[#loc24, #loc25])
#loc200 = loc(fused[#loc28, #loc29])
#loc201 = loc(fused[#loc32, #loc33])
#loc202 = loc(fused[#loc34, #loc35])
#loc203 = loc(fused[#loc36, #loc33])
#loc204 = loc(fused[#loc37, #loc38])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc43, #loc44])
#loc208 = loc(fused[#loc45, #loc46])
#loc209 = loc(fused[#loc47, #loc48])
#loc210 = loc(fused[#loc49, #loc50])
#loc211 = loc(fused[#loc55, #loc56])
#loc214 = loc(fused[#loc66, #loc67])
#loc215 = loc(fused[#loc70, #loc71])
#loc216 = loc(fused[#loc74, #loc73])
#loc217 = loc(fused[#loc75, #loc76])
#loc218 = loc(fused[#loc78, #loc79])
#loc219 = loc(fused[#loc80, #loc81])
#loc220 = loc(fused[#loc82, #loc83])
#loc221 = loc(fused[#loc85, #loc84])
#loc222 = loc(fused[#loc86, #loc87])
#loc223 = loc(fused[#loc88, #loc89])
#loc224 = loc(fused[#loc90, #loc87])
#loc225 = loc(fused[#loc91, #loc92])
#loc226 = loc(fused[#loc95, #loc96])
#loc227 = loc(fused[#loc99, #loc100])
#loc228 = loc(fused[#loc101, #loc102])
#loc229 = loc(fused[#loc103, #loc104, #loc105, #loc100])
#loc230 = loc(fused[#loc109, #loc110])
#loc231 = loc(fused[#loc111, #loc112])
#loc232 = loc(fused[#loc114, #loc113])
#loc233 = loc(fused[#loc115, #loc116])
#loc234 = loc(fused[#loc117, #loc118])
#loc235 = loc(fused[#loc119, #loc116])
#loc236 = loc(fused[#loc120, #loc121])
#loc237 = loc(fused[#loc124, #loc125])
#loc238 = loc(fused[#loc128, #loc129])
#loc239 = loc(fused[#loc130, #loc131])
#loc240 = loc(fused[#loc132, #loc129])
#loc241 = loc(fused[#loc135, #loc136])
#loc242 = loc(fused[#loc138, #loc139])
#loc243 = loc(fused[#loc140, #loc141])
#loc244 = loc(fused[#loc143, #loc142])
#loc245 = loc(fused[#loc144, #loc145])
#loc246 = loc(fused[#loc146, #loc147])
#loc247 = loc(fused[#loc148, #loc149, #loc150, #loc145])
#loc248 = loc(fused[#loc154, #loc153])
#loc249 = loc(fused[#loc159, #loc160])
#loc250 = loc(fused[#loc161, #loc162])
#loc251 = loc(fused[#loc163, #loc160])
#loc252 = loc(fused[#loc164, #loc165])
#loc253 = loc(fused[#loc166, #loc167])
#loc254 = loc(fused[#loc169, #loc168])
#loc255 = loc(fused[#loc170, #loc171])
#loc256 = loc(fused[#loc172, #loc173])
#loc257 = loc(fused[#loc174, #loc171])
#loc258 = loc(fused[#loc176, #loc175])
#loc259 = loc(fused[#loc182, #loc183])
#loc260 = loc(fused[#loc184, #loc185])
#loc261 = loc(fused[#loc186, #loc183])
