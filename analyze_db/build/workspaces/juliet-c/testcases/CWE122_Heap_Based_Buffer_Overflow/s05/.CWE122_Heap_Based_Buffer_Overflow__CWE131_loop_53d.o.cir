!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":23:65)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":23:71)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":43:69)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":43:75)
#loc74 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc40, #loc41])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc71)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc72)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc75)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc76)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc74)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc75)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc75)
    cir.br ^bb2 loc(#loc78)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc79)
    cir.br ^bb3 loc(#loc78)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc80)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc81)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc25)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc25)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc31)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc83)
    cir.br ^bb3 loc(#loc78)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc34)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc35)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc73)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc40, #loc41])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc86)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc87)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc46)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc86)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc86)
    cir.br ^bb2 loc(#loc89)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc51)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc90)
    cir.br ^bb3 loc(#loc89)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc53)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc54)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc54)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc91)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc55)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc92)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc57)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc58)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc58)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc59)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc61)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb6 loc(#loc50)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc50)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc63)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc64)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc94)
    cir.br ^bb3 loc(#loc89)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc50)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc67)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc68)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc69)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc70)
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc39)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":26:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":26:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":27:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":27:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":32:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:18)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:21)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:30)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":31:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":29:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":33:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":33:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":33:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":34:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":34:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":43:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":56:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":46:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":46:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":47:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":47:16)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":44:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":45:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":55:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":52:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:18)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:21)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:23)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":50:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:30)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:18)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":51:31)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:30)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":49:29)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":53:22)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":53:27)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":53:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":53:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":54:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_53d.c":54:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc9, #loc10])
#loc76 = loc(fused[#loc11, #loc12])
#loc77 = loc(fused[#loc14, #loc15])
#loc78 = loc(fused[#loc16, #loc17])
#loc79 = loc(fused[#loc19, #loc18])
#loc80 = loc(fused[#loc20, #loc21])
#loc81 = loc(fused[#loc23, #loc17])
#loc82 = loc(fused[#loc26, #loc29])
#loc83 = loc(fused[#loc31, #loc30])
#loc84 = loc(fused[#loc38, #loc39])
#loc86 = loc(fused[#loc42, #loc43])
#loc87 = loc(fused[#loc44, #loc45])
#loc88 = loc(fused[#loc47, #loc48])
#loc89 = loc(fused[#loc49, #loc50])
#loc90 = loc(fused[#loc52, #loc51])
#loc91 = loc(fused[#loc53, #loc54])
#loc92 = loc(fused[#loc56, #loc50])
#loc93 = loc(fused[#loc59, #loc62])
#loc94 = loc(fused[#loc64, #loc63])
