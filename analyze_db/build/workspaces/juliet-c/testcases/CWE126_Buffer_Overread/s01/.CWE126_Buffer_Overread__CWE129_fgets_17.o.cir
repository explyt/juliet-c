!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc201)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc202)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc203)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_fgets_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc21)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc25)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc28)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc213)
        cir.condition(%8) loc(#loc29)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc216)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc216)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc216)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc38)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc38)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc38)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc38)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc38)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc38)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc38)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc38)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc202)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc218)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc46)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc49)
              } loc(#loc219)
            } loc(#loc217)
          } loc(#loc215)
        } loc(#loc214)
        cir.yield loc(#loc24)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc51)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
        cir.yield loc(#loc211)
      } loc(#loc211)
    } loc(#loc211)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc54)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc224)
        cir.condition(%8) loc(#loc58)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc227)
            %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc227)
            cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc227)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
              %9 = cir.const #cir.int<0> : !s32i loc(#loc67)
              %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc229)
              cir.if %10 {
                %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc72)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc72)
                %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc73)
              } else {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc12)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc12)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
              } loc(#loc230)
            } loc(#loc228)
          } loc(#loc226)
        } loc(#loc225)
        cir.yield loc(#loc53)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc76)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc231)
        cir.yield loc(#loc222)
      } loc(#loc222)
    } loc(#loc222)
    cir.return loc(#loc14)
  } loc(#loc206)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_fgets_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc233)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc79)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc234)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    cir.return loc(#loc78)
  } loc(#loc232)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc237)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc92)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc96)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc99)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc242)
        cir.condition(%8) loc(#loc100)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc245)
            %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc245)
            cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc245)
            cir.scope {
              %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
              %9 = cir.const #cir.int<3> : !s32i loc(#loc109)
              %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc109)
              %11 = cir.const #cir.int<4> : !u64i loc(#loc109)
              %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc109)
              %13 = cir.const #cir.int<2> : !s32i loc(#loc109)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc109)
              %15 = cir.binop(add, %12, %14) : !u64i loc(#loc109)
              %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc109)
              %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc202)
              %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc110)
              %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc111)
              %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc112)
              %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc112)
              %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc247)
              cir.if %22 {
                %23 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc116)
                %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc117)
                cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc249)
              } else {
                %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc120)
                %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc120)
                cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc121)
              } loc(#loc248)
            } loc(#loc246)
          } loc(#loc244)
        } loc(#loc243)
        cir.yield loc(#loc95)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc123)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
        cir.yield loc(#loc240)
      } loc(#loc240)
    } loc(#loc240)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc126)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc252)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc253)
        cir.condition(%8) loc(#loc130)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc256)
            %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc256)
            cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc256)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
              %9 = cir.const #cir.int<0> : !s32i loc(#loc139)
              %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc258)
              %11 = cir.ternary(%10, true {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                %13 = cir.const #cir.int<10> : !s32i loc(#loc142)
                %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc259)
                %15 = cir.ternary(%14, true {
                  %16 = cir.const #true loc(#loc140)
                  cir.yield %16 : !cir.bool loc(#loc140)
                }, false {
                  %16 = cir.const #false loc(#loc140)
                  cir.yield %16 : !cir.bool loc(#loc140)
                }) : (!cir.bool) -> !cir.bool loc(#loc140)
                cir.yield %15 : !cir.bool loc(#loc140)
              }, false {
                %12 = cir.const #false loc(#loc140)
                cir.yield %12 : !cir.bool loc(#loc140)
              }) : (!cir.bool) -> !cir.bool loc(#loc140)
              cir.if %11 {
                %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
                %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc148)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc148)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc149)
              } else {
                %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc83)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc83)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc150)
              } loc(#loc260)
            } loc(#loc257)
          } loc(#loc255)
        } loc(#loc254)
        cir.yield loc(#loc125)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc152)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc261)
        cir.yield loc(#loc251)
      } loc(#loc251)
    } loc(#loc251)
    cir.return loc(#loc85)
  } loc(#loc235)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc264)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc265)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc161)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc165)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc268)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc167)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc168)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc269)
        cir.condition(%8) loc(#loc169)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc171)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc271)
        } loc(#loc270)
        cir.yield loc(#loc164)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc174)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
        cir.yield loc(#loc267)
      } loc(#loc267)
    } loc(#loc267)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc177)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc274)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc179)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc180)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc275)
        cir.condition(%8) loc(#loc181)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc278)
            %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc278)
            cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc278)
            cir.scope {
              %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
              %9 = cir.const #cir.int<0> : !s32i loc(#loc190)
              %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc280)
              cir.if %10 {
                %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
                %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc195)
                %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc195)
                %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc196)
              } else {
                %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc197)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc197)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc198)
              } loc(#loc281)
            } loc(#loc279)
          } loc(#loc277)
        } loc(#loc276)
        cir.yield loc(#loc176)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc199)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc200)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc282)
        cir.yield loc(#loc273)
      } loc(#loc273)
    } loc(#loc273)
    cir.return loc(#loc154)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_fgets_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":42:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":58:27)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":24:1)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":62:1)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":26:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":26:9)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":26:11)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":27:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":27:9)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":29:13)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":29:12)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":29:5)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:5)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":45:5)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:13)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:9)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:16)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:20)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:18)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":31:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":32:9)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":44:9)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":33:13)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":33:49)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":43:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:23)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:36)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:53)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":35:63)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":36:13)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":39:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":41:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":38:29)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":38:24)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":38:17)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":38:40)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":42:17)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:24)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":30:23)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:5)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":61:5)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:13)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:9)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:16)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:20)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:18)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":47:5)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":48:9)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":60:9)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":49:13)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":49:34)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":52:13)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":59:13)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":52:17)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":52:25)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":53:13)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":55:13)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":57:13)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":54:37)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":54:30)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":54:17)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":58:17)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:24)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":46:23)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":139:1)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":143:1)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":141:5)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":141:13)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":142:5)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":142:13)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":102:27)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":69:1)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":106:1)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":71:5)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":71:9)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":71:11)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":72:5)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":72:9)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":74:13)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":74:12)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":74:5)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:5)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":90:5)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:13)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:9)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:16)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:20)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:18)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":76:5)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":77:9)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":89:9)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":78:13)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":78:49)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:13)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":88:13)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:23)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:36)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:53)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:17)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":80:63)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":81:13)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":84:13)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":86:13)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":83:29)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":83:24)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":83:17)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":83:40)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":87:27)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":87:17)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:24)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":75:23)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:5)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":105:5)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:13)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:9)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:16)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:20)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:18)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":92:5)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":93:9)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":104:9)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":94:13)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":94:34)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:13)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":103:13)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:17)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:25)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:27)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:30)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:38)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":96:40)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":97:13)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":99:13)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":101:13)
#loc147 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":98:37)
#loc148 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":98:30)
#loc149 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":98:17)
#loc150 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":102:17)
#loc151 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:24)
#loc152 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":91:23)
#loc153 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":109:1)
#loc154 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":137:1)
#loc155 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":111:5)
#loc156 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":111:9)
#loc157 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":111:11)
#loc158 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":112:5)
#loc159 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":112:9)
#loc160 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":114:13)
#loc161 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":114:12)
#loc162 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":114:5)
#loc163 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:5)
#loc164 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":120:5)
#loc165 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:13)
#loc166 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:9)
#loc167 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:16)
#loc168 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:20)
#loc169 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:18)
#loc170 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":116:5)
#loc171 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":119:16)
#loc172 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":119:9)
#loc173 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:24)
#loc174 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":115:23)
#loc175 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:5)
#loc176 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":136:5)
#loc177 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:13)
#loc178 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:9)
#loc179 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:16)
#loc180 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:20)
#loc181 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:18)
#loc182 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":122:5)
#loc183 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":123:9)
#loc184 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":135:9)
#loc185 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":124:13)
#loc186 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":124:34)
#loc187 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":127:13)
#loc188 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":134:13)
#loc189 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":127:17)
#loc190 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":127:25)
#loc191 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":128:13)
#loc192 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":130:13)
#loc193 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":132:13)
#loc194 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":129:37)
#loc195 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":129:30)
#loc196 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":129:17)
#loc197 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":133:27)
#loc198 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":133:17)
#loc199 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:24)
#loc200 = loc("CWE126_Buffer_Overread__CWE129_fgets_17.c":121:23)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc10, #loc11])
#loc206 = loc(fused[#loc13, #loc14])
#loc207 = loc(fused[#loc15, #loc16])
#loc208 = loc(fused[#loc15, #loc17])
#loc209 = loc(fused[#loc18, #loc19])
#loc210 = loc(fused[#loc22, #loc20])
#loc211 = loc(fused[#loc23, #loc24])
#loc212 = loc(fused[#loc26, #loc25])
#loc213 = loc(fused[#loc27, #loc28])
#loc214 = loc(fused[#loc30, #loc24])
#loc215 = loc(fused[#loc31, #loc32])
#loc216 = loc(fused[#loc33, #loc34])
#loc217 = loc(fused[#loc35, #loc36])
#loc218 = loc(fused[#loc40, #loc41])
#loc219 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc220 = loc(fused[#loc47, #loc48])
#loc221 = loc(fused[#loc51, #loc50])
#loc222 = loc(fused[#loc52, #loc53])
#loc223 = loc(fused[#loc55, #loc54])
#loc224 = loc(fused[#loc56, #loc57])
#loc225 = loc(fused[#loc59, #loc53])
#loc226 = loc(fused[#loc60, #loc61])
#loc227 = loc(fused[#loc62, #loc63])
#loc228 = loc(fused[#loc64, #loc65])
#loc229 = loc(fused[#loc66, #loc67])
#loc230 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc231 = loc(fused[#loc76, #loc75])
#loc232 = loc(fused[#loc77, #loc78])
#loc233 = loc(fused[#loc79, #loc80])
#loc234 = loc(fused[#loc81, #loc82])
#loc235 = loc(fused[#loc84, #loc85])
#loc236 = loc(fused[#loc86, #loc87])
#loc237 = loc(fused[#loc86, #loc88])
#loc238 = loc(fused[#loc89, #loc90])
#loc239 = loc(fused[#loc93, #loc91])
#loc240 = loc(fused[#loc94, #loc95])
#loc241 = loc(fused[#loc97, #loc96])
#loc242 = loc(fused[#loc98, #loc99])
#loc243 = loc(fused[#loc101, #loc95])
#loc244 = loc(fused[#loc102, #loc103])
#loc245 = loc(fused[#loc104, #loc105])
#loc246 = loc(fused[#loc106, #loc107])
#loc247 = loc(fused[#loc111, #loc112])
#loc248 = loc(fused[#loc113, #loc114, #loc115, #loc107])
#loc249 = loc(fused[#loc118, #loc119])
#loc250 = loc(fused[#loc123, #loc122])
#loc251 = loc(fused[#loc124, #loc125])
#loc252 = loc(fused[#loc127, #loc126])
#loc253 = loc(fused[#loc128, #loc129])
#loc254 = loc(fused[#loc131, #loc125])
#loc255 = loc(fused[#loc132, #loc133])
#loc256 = loc(fused[#loc134, #loc135])
#loc257 = loc(fused[#loc136, #loc137])
#loc258 = loc(fused[#loc138, #loc139])
#loc259 = loc(fused[#loc141, #loc143])
#loc260 = loc(fused[#loc144, #loc145, #loc146, #loc137])
#loc261 = loc(fused[#loc152, #loc151])
#loc262 = loc(fused[#loc153, #loc154])
#loc263 = loc(fused[#loc155, #loc156])
#loc264 = loc(fused[#loc155, #loc157])
#loc265 = loc(fused[#loc158, #loc159])
#loc266 = loc(fused[#loc162, #loc160])
#loc267 = loc(fused[#loc163, #loc164])
#loc268 = loc(fused[#loc166, #loc165])
#loc269 = loc(fused[#loc167, #loc168])
#loc270 = loc(fused[#loc170, #loc164])
#loc271 = loc(fused[#loc172, #loc171])
#loc272 = loc(fused[#loc174, #loc173])
#loc273 = loc(fused[#loc175, #loc176])
#loc274 = loc(fused[#loc178, #loc177])
#loc275 = loc(fused[#loc179, #loc180])
#loc276 = loc(fused[#loc182, #loc176])
#loc277 = loc(fused[#loc183, #loc184])
#loc278 = loc(fused[#loc185, #loc186])
#loc279 = loc(fused[#loc187, #loc188])
#loc280 = loc(fused[#loc189, #loc190])
#loc281 = loc(fused[#loc191, #loc192, #loc193, #loc188])
#loc282 = loc(fused[#loc200, #loc199])
