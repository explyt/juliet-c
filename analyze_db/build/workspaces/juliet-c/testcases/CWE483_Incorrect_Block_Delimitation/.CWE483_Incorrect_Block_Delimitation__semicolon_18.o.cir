!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc62)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc65)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc66)
    cir.goto "sink" loc(#loc67)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc15)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc17)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc68)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc65)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc21)
      %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc70)
      cir.if %8 {
      } loc(#loc19)
    } loc(#loc69)
    cir.scope {
      %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
      %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
      cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc24)
      %8 = cir.const #cir.int<1> : !s32i loc(#loc25)
      cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    } loc(#loc71)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc29)
      cir.if %7 {
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc31)
      } loc(#loc74)
    } loc(#loc73)
    cir.return loc(#loc8)
  } loc(#loc64)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc76)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc75)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc79)
    cir.goto "sink" loc(#loc80)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc44)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc45)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc46)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc81)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc41)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.scope {
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc83)
      cir.if %8 {
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc52)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc52)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc54)
        cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc85)
      } loc(#loc84)
    } loc(#loc82)
    cir.scope {
      %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc58)
      cir.if %7 {
        %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc60)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } loc(#loc87)
    } loc(#loc86)
    cir.return loc(#loc37)
  } loc(#loc77)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":30:23)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":35:23)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":20:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":38:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":25:9)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":25:28)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":26:9)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":26:17)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":22:5)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":22:10)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":23:1)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":25:18)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":25:27)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":28:9)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":28:20)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":28:13)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":28:18)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":29:9)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":32:9)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":30:13)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":31:17)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":31:13)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":33:9)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":36:9)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":33:13)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":34:9)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":35:13)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":65:1)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":68:1)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":67:5)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":67:11)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":45:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":63:1)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":50:9)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":50:28)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":51:9)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":51:17)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":47:5)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":47:10)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":48:1)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":50:18)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":50:27)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":53:9)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":57:9)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":53:13)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":53:18)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":54:9)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":55:23)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":55:13)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":56:17)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":56:13)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":58:9)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":61:9)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":58:13)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":59:9)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":60:23)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_18.c":60:13)
#loc62 = loc(fused[#loc1, #loc2])
#loc63 = loc(fused[#loc3, #loc4])
#loc64 = loc(fused[#loc7, #loc8])
#loc65 = loc(fused[#loc9, #loc10])
#loc66 = loc(fused[#loc11, #loc12])
#loc67 = loc(fused[#loc13, #loc14])
#loc68 = loc(fused[#loc16, #loc17])
#loc69 = loc(fused[#loc18, #loc19])
#loc70 = loc(fused[#loc20, #loc21])
#loc71 = loc(fused[#loc22, #loc23])
#loc72 = loc(fused[#loc26, #loc25])
#loc73 = loc(fused[#loc27, #loc28])
#loc74 = loc(fused[#loc30, #loc28])
#loc75 = loc(fused[#loc32, #loc33])
#loc76 = loc(fused[#loc34, #loc35])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc38, #loc39])
#loc79 = loc(fused[#loc40, #loc41])
#loc80 = loc(fused[#loc42, #loc43])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc47, #loc48])
#loc83 = loc(fused[#loc49, #loc50])
#loc84 = loc(fused[#loc51, #loc48])
#loc85 = loc(fused[#loc55, #loc54])
#loc86 = loc(fused[#loc56, #loc57])
#loc87 = loc(fused[#loc59, #loc57])
