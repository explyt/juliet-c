!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func private  @printIntLine(!s32i) loc(#loc95)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_predec_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%3) loc(#loc13)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc14)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc14)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc14)
          %10 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
          %14 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
          %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc14)
          cir.yield %19 : !u32i loc(#loc14)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc14)
          %10 = cir.const #cir.int<30> : !s32i loc(#loc14)
          %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc14)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc14)
          %14 = cir.const #cir.int<15> : !s32i loc(#loc14)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc14)
          %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc14)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc14)
          %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc14)
          %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc14)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc14)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
          %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc14)
          cir.yield %23 : !u32i loc(#loc14)
        }) : (!cir.bool) -> !u32i loc(#loc14)
        %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc14)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
        cir.break loc(#loc16)
      } loc(#loc99)
    } loc(#loc99)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%3) loc(#loc19)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc103)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          %4 = cir.unary(dec, %3) : !s32i, !s32i loc(#loc24)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc103)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc27)
        } loc(#loc102)
        cir.break loc(#loc28)
      } loc(#loc101)
    } loc(#loc101)
    cir.return loc(#loc6)
  } loc(#loc96)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_predec_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc105)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc37)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc46)
        cir.condition(%3) loc(#loc46)
      } do {
        %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %4 = cir.binop(and, %2, %3) : !s32i loc(#loc47)
        %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc47)
        %6 = cir.ternary(%5, true {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
          %10 = cir.const #cir.int<30> : !s32i loc(#loc47)
          %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc47)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc47)
          %14 = cir.const #cir.int<15> : !s32i loc(#loc47)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc47)
          %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc47)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
          %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc47)
          cir.yield %19 : !u32i loc(#loc47)
        }, false {
          %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc47)
          %10 = cir.const #cir.int<30> : !s32i loc(#loc47)
          %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc47)
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc47)
          %14 = cir.const #cir.int<15> : !s32i loc(#loc47)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc47)
          %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc47)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc47)
          %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc47)
          %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc47)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc47)
          %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc47)
          cir.yield %23 : !u32i loc(#loc47)
        }) : (!cir.bool) -> !u32i loc(#loc47)
        %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc47)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
        cir.break loc(#loc49)
      } loc(#loc112)
    } loc(#loc112)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc52)
        cir.condition(%3) loc(#loc52)
      } do {
        cir.scope {
          %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc56)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc56)
          %7 = cir.cmp(gt, %2, %6) : !s32i, !s32i loc(#loc116)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc57)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc118)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
            %11 = cir.unary(dec, %10) : !s32i, !s32i loc(#loc63)
            cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc118)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc65)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc66)
          } else {
            %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc37)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc37)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          } loc(#loc117)
        } loc(#loc115)
        cir.break loc(#loc68)
      } loc(#loc114)
    } loc(#loc114)
    cir.return loc(#loc39)
  } loc(#loc109)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc121)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc77)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc77)
        cir.condition(%3) loc(#loc77)
      } do {
        %2 = cir.const #cir.int<2> : !s32i loc(#loc78)
        %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc79)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc124)
        cir.break loc(#loc81)
      } loc(#loc123)
    } loc(#loc123)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc84)
        cir.condition(%3) loc(#loc84)
      } do {
        cir.scope {
          %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          %4 = cir.unary(dec, %3) : !s32i, !s32i loc(#loc89)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc127)
          %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc92)
        } loc(#loc126)
        cir.break loc(#loc93)
      } loc(#loc125)
    } loc(#loc125)
    cir.return loc(#loc70)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int_rand_predec_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":43:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":24:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":26:12)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":26:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":27:5)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":32:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":27:11)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":30:16)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":30:9)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":31:9)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":42:5)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":33:11)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":35:9)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":40:9)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":38:13)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":38:26)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":37:13)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":37:15)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":39:26)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":39:13)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":41:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":102:1)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":106:1)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":104:5)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":104:13)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":105:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":105:13)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":72:23)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":50:1)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":76:1)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":52:5)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":52:9)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":54:12)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":54:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":55:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":60:5)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":55:11)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":58:16)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":58:9)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":59:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":61:5)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":75:5)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":61:11)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":64:9)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":73:9)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":64:13)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":64:20)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":64:18)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":65:9)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":69:9)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":71:9)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":67:13)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":67:26)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":66:13)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":66:15)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":68:26)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":68:13)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":72:13)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":74:9)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":79:1)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":100:1)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":81:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":81:9)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":83:12)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":83:5)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":84:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":89:5)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":84:11)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":87:17)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":87:16)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":87:9)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":88:9)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":90:5)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":99:5)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":90:11)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":92:9)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":97:9)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":95:13)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":95:26)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":94:13)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":94:15)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":96:26)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":96:13)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_predec_16.c":98:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc10, #loc9])
#loc99 = loc(fused[#loc11, #loc12])
#loc100 = loc(fused[#loc15, #loc14])
#loc101 = loc(fused[#loc17, #loc18])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc29, #loc30])
#loc106 = loc(fused[#loc31, #loc32])
#loc107 = loc(fused[#loc33, #loc34])
#loc108 = loc(fused[#loc35, #loc36])
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
#loc111 = loc(fused[#loc43, #loc42])
#loc112 = loc(fused[#loc44, #loc45])
#loc113 = loc(fused[#loc48, #loc47])
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc53, #loc54])
#loc116 = loc(fused[#loc55, #loc56])
#loc117 = loc(fused[#loc58, #loc59, #loc60, #loc54])
#loc118 = loc(fused[#loc61, #loc62])
#loc119 = loc(fused[#loc63, #loc64])
#loc120 = loc(fused[#loc69, #loc70])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc74, #loc73])
#loc123 = loc(fused[#loc75, #loc76])
#loc124 = loc(fused[#loc80, #loc78])
#loc125 = loc(fused[#loc82, #loc83])
#loc126 = loc(fused[#loc85, #loc86])
#loc127 = loc(fused[#loc87, #loc88])
#loc128 = loc(fused[#loc89, #loc90])
