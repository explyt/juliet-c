!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc87)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc89)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc91)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc92)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc14)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc93)
    cir.goto "source" loc(#loc94)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc18)
    %4 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc19)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %9 = cir.call @__isoc99_fscanf(%6, %8, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc19)
    cir.goto "sink" loc(#loc95)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc23)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc24)
    %11 = cir.cast(integral, %10 : !s8i), !s32i loc(#loc24)
    %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc13)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc13)
    %14 = cir.binop(mul, %11, %13) nsw : !s32i loc(#loc24)
    %15 = cir.cast(integral, %14 : !s32i), !s8i loc(#loc24)
    cir.store %15, %1 : !s8i, !cir.ptr<!s8i> loc(#loc92)
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    cir.call @printHexCharLine(%16) : (!s8i) -> () loc(#loc26)
    cir.return loc(#loc9)
  } loc(#loc90)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_square_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc97)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc98)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc96)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc101)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc41)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc41)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    cir.goto "source" loc(#loc103)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc45)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc46)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc88)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc47)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc48)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc46)
    cir.goto "sink" loc(#loc104)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc51)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc54)
      %10 = cir.cast(integral, %9 : !s8i), !s64i loc(#loc54)
      %11 = cir.cast(integral, %10 : !s64i), !s32i loc(#loc54)
      %12 = cir.abs %11 poison : !s32i loc(#loc55)
      %13 = cir.cast(integral, %12 : !s32i), !s64i loc(#loc55)
      %14 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc56)
      %15 = cir.const #cir.int<127> : !s32i loc(#loc57)
      %16 = cir.cast(int_to_float, %15 : !s32i), !cir.double loc(#loc57)
      %17 = cir.call @sqrt(%16) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc56)
      %18 = cir.cast(float_to_int, %17 : !cir.double), !s64i loc(#loc56)
      %19 = cir.cmp(le, %13, %18) : !s64i, !cir.bool loc(#loc106)
      cir.if %19 {
        %20 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc108)
        %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc64)
        %22 = cir.cast(integral, %21 : !s8i), !s32i loc(#loc64)
        %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
        %24 = cir.cast(integral, %23 : !s8i), !s32i loc(#loc63)
        %25 = cir.binop(mul, %22, %24) nsw : !s32i loc(#loc64)
        %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc64)
        cir.store %26, %20 : !s8i, !cir.ptr<!s8i> loc(#loc108)
        %27 = cir.load %20 : !cir.ptr<!s8i>, !s8i loc(#loc65)
        cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc66)
      } else {
        %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } loc(#loc107)
    } loc(#loc105)
    cir.return loc(#loc38)
  } loc(#loc100)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc110)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc111)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc74)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc74)
    cir.store %3, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    cir.goto "source" loc(#loc113)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc78)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc79)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc114)
    cir.goto "sink" loc(#loc115)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc83)
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc84)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc84)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc73)
    %9 = cir.cast(integral, %8 : !s8i), !s32i loc(#loc73)
    %10 = cir.binop(mul, %7, %9) nsw : !s32i loc(#loc84)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc84)
    cir.store %11, %1 : !s8i, !cir.ptr<!s8i> loc(#loc111)
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc85)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc86)
    cir.return loc(#loc69)
  } loc(#loc109)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_square_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":31:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":39:1)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":26:10)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":36:9)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":36:30)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":27:12)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":28:10)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":29:1)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":31:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":31:13)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":32:10)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":33:1)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":36:23)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":37:26)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":86:1)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":90:1)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":88:5)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":88:13)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":89:5)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":89:13)
#loc33 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":64:19)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":46:1)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":66:1)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":48:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":48:10)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":49:12)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":49:5)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":50:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":50:10)
#loc45 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":51:1)
#loc46 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":53:13)
#loc48 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":53:20)
#loc49 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":54:5)
#loc50 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":54:10)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":55:1)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:5)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":65:5)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:19)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:9)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:34)
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:47)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":57:55)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":58:5)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":61:5)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":63:5)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":59:9)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":59:30)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":59:23)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":60:26)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":60:9)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":64:9)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":69:1)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":84:1)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":71:5)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":71:10)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":81:9)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":81:30)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":72:12)
#loc75 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":72:5)
#loc76 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":73:5)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":73:10)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":74:1)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":76:12)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":76:5)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":77:5)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":77:10)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":78:1)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":81:23)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":82:26)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_square_18.c":82:9)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc6, #loc7])
#loc90 = loc(fused[#loc8, #loc9])
#loc91 = loc(fused[#loc10, #loc11])
#loc92 = loc(fused[#loc12, #loc13])
#loc93 = loc(fused[#loc15, #loc14])
#loc94 = loc(fused[#loc16, #loc17])
#loc95 = loc(fused[#loc21, #loc22])
#loc96 = loc(fused[#loc27, #loc28])
#loc97 = loc(fused[#loc29, #loc30])
#loc98 = loc(fused[#loc31, #loc32])
#loc99 = loc(fused[#loc34, #loc35])
#loc100 = loc(fused[#loc37, #loc38])
#loc101 = loc(fused[#loc39, #loc40])
#loc102 = loc(fused[#loc42, #loc41])
#loc103 = loc(fused[#loc43, #loc44])
#loc104 = loc(fused[#loc49, #loc50])
#loc105 = loc(fused[#loc52, #loc53])
#loc106 = loc(fused[#loc55, #loc58])
#loc107 = loc(fused[#loc59, #loc60, #loc61, #loc53])
#loc108 = loc(fused[#loc62, #loc63])
#loc109 = loc(fused[#loc68, #loc69])
#loc110 = loc(fused[#loc70, #loc71])
#loc111 = loc(fused[#loc72, #loc73])
#loc112 = loc(fused[#loc75, #loc74])
#loc113 = loc(fused[#loc76, #loc77])
#loc114 = loc(fused[#loc80, #loc79])
#loc115 = loc(fused[#loc81, #loc82])
