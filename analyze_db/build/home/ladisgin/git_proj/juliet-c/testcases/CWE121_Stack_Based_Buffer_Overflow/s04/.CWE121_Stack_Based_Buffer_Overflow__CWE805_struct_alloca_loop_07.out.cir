!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":154:10)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":154:14)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":154:20)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":154:32)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc268 = loc(fused[#loc87, #loc88])
#loc269 = loc(fused[#loc89, #loc90])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc233)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc234)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc236)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc237)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc238)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc237)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc12)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc12)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc12)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc12)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc238)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc233)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc240)
      cir.if %20 {
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc244)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc246)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc30)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc30)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc248)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc32)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc33)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc33)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc249)
            cir.condition(%24) loc(#loc34)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc36)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc38)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc251)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc40)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc42)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc252)
            } loc(#loc250)
            cir.yield loc(#loc29)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc44)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc45)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc253)
            cir.yield loc(#loc247)
          } loc(#loc247)
        } loc(#loc247)
      } loc(#loc245)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc255)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc52)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc257)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc54)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc55)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc55)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc258)
            cir.condition(%27) loc(#loc56)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc58)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc59)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc61)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc60)
            } loc(#loc259)
            cir.yield loc(#loc51)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc63)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc64)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc260)
            cir.yield loc(#loc256)
          } loc(#loc256)
        } loc(#loc256)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc65)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc66)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc68)
      } loc(#loc254)
    } loc(#loc243)
    cir.return loc(#loc6)
  } loc(#loc235)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc262)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc73)
    cir.return loc(#loc70)
  } loc(#loc261)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc264)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc265)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc266)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc84)
  cir.func @main(%arg0: !s32i loc(fused[#loc87, #loc88]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc89, #loc90])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc269)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc86)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc91)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc92)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc93)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc93)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc94)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc81)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_good() : () -> () loc(#loc96)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc82)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc83)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc271)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07_bad() : () -> () loc(#loc100)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc84)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc103)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc272)
    cir.return %17 : !s32i loc(#loc272)
  } loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc105)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc275)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc111)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc111)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc111)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc111)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc111)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc276)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc111)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc275)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc113)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc113)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc113)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc113)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc113)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc113)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc276)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc233)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc117)
      %20 = cir.cmp(ne, %18, %19) : !s32i, !cir.bool loc(#loc278)
      cir.if %20 {
        %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc105)
        %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc105)
        cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc121)
      } else {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc122)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc282)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc284)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc134)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc286)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc136)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc137)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc137)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc287)
            cir.condition(%24) loc(#loc138)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc140)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc141)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc142)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc142)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc143)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc144)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc145)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc290)
            } loc(#loc288)
            cir.yield loc(#loc133)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc146)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc147)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc291)
            cir.yield loc(#loc285)
          } loc(#loc285)
        } loc(#loc285)
      } loc(#loc283)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc293)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc154)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc154)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc295)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc156)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc157)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc157)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc296)
            cir.condition(%27) loc(#loc158)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc160)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc161)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc163)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
            } loc(#loc297)
            cir.yield loc(#loc153)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc165)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc166)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc298)
            cir.yield loc(#loc294)
          } loc(#loc294)
        } loc(#loc294)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc167)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc168)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc169)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc170)
      } loc(#loc292)
    } loc(#loc281)
    cir.return loc(#loc107)
  } loc(#loc273)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc301)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc176)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc176)
    %4 = cir.const #cir.int<8> : !u64i loc(#loc176)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc176)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc176)
    %7 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc302)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc176)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc176)
    cir.store %9, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc301)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc178)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc178)
    %12 = cir.const #cir.int<8> : !u64i loc(#loc178)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc178)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc178)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc178)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc178)
    cir.store %16, %7 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc302)
    cir.scope {
      %17 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc233)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc181)
      %19 = cir.const #cir.int<5> : !s32i loc(#loc182)
      %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc304)
      cir.if %20 {
        %21 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc184)
        cir.store %21, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc306)
      } loc(#loc305)
    } loc(#loc303)
    cir.scope {
      %17 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc308)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc310)
        cir.scope {
          %19 = cir.const #cir.int<0> : !s32i loc(#loc196)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc196)
          cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc312)
          cir.for : cond {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc198)
            %22 = cir.const #cir.int<100> : !s32i loc(#loc199)
            %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc199)
            %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc313)
            cir.condition(%24) loc(#loc200)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc202)
              %22 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc203)
              %23 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
              %24 = cir.ptr_stride(%23 : !cir.ptr<!ty__twoIntsStruct>, %22 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
              %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc39)
              cir.store %21, %25 : !s32i, !cir.ptr<!s32i> loc(#loc315)
              %26 = cir.const #cir.int<0> : !s32i loc(#loc205)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc206)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc207)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc207)
              %30 = cir.get_member %29[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc43)
              cir.store %26, %30 : !s32i, !cir.ptr<!s32i> loc(#loc316)
            } loc(#loc314)
            cir.yield loc(#loc195)
          } step {
            %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc208)
            %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc209)
            cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc317)
            cir.yield loc(#loc311)
          } loc(#loc311)
        } loc(#loc311)
      } loc(#loc309)
      cir.scope {
        %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc319)
        cir.scope {
          %22 = cir.const #cir.int<0> : !s32i loc(#loc216)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc216)
          cir.store %23, %18 : !u64i, !cir.ptr<!u64i> loc(#loc321)
          cir.for : cond {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc218)
            %25 = cir.const #cir.int<100> : !s32i loc(#loc219)
            %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc219)
            %27 = cir.cmp(lt, %24, %26) : !u64i, !cir.bool loc(#loc322)
            cir.condition(%27) loc(#loc220)
          } body {
            cir.scope {
              %24 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc222)
              %25 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc223)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc224)
              %27 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc225)
              %28 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc226)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!ty__twoIntsStruct>, %27 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc226)
              cir.copy %29 to %26 : !cir.ptr<!ty__twoIntsStruct> loc(#loc224)
            } loc(#loc323)
            cir.yield loc(#loc215)
          } step {
            %24 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc227)
            %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc228)
            cir.store %25, %18 : !u64i, !cir.ptr<!u64i> loc(#loc324)
            cir.yield loc(#loc320)
          } loc(#loc320)
        } loc(#loc320)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc229)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc230)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!ty__twoIntsStruct>, %20 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc231)
        cir.call @printStructLine(%21) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc232)
      } loc(#loc318)
    } loc(#loc307)
    cir.return loc(#loc172)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":23:1)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":27:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":59:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":29:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":29:21)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":30:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":30:54)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":31:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":31:55)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":37:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":32:20)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":33:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":36:16)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":36:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":38:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":58:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":39:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":39:33)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":40:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":48:9)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":41:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":41:20)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:13)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":47:13)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:22)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:18)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:25)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:29)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":44:13)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:36)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:24)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":45:17)
#loc39 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:36)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:24)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":46:17)
#loc43 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:35)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":43:34)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":49:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":57:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":50:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":50:20)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":55:13)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:22)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:18)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:25)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:29)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:27)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":53:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:17)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:23)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:34)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":54:27)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:35)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":52:34)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:30)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:35)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:36)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":56:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":138:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":142:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":140:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":140:14)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":141:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":141:14)
#loc75 = loc("/usr/include/stdlib.h":575:1)
#loc76 = loc("/usr/include/stdlib.h":575:41)
#loc77 = loc("/usr/include/time.h":76:1)
#loc78 = loc("/usr/include/time.h":76:38)
#loc79 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":159:15)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":161:15)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":164:15)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":166:15)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":154:1)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":169:1)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":155:1)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":157:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":157:22)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":157:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":159:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":160:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":160:75)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":161:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":164:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":165:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":165:74)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":166:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":168:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":168:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":74:19)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":66:1)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":102:1)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":68:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":68:21)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":69:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":69:54)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":70:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":70:55)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":80:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:8)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":71:20)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":72:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":75:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":77:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":74:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":79:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":79:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":81:5)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":101:5)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":82:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":82:33)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":83:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":91:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":84:13)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":84:20)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":90:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:22)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:18)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:25)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:29)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:27)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":87:13)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:36)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:24)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":88:17)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:36)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:24)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":89:17)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:35)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":86:34)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":92:9)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":100:9)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":93:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":93:20)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:13)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":98:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:22)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:18)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:25)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:29)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:27)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":96:13)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:17)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:22)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:23)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:34)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":97:27)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:35)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":95:34)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:30)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:35)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:36)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":99:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":105:1)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":136:1)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":107:5)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":107:21)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":108:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":108:54)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":109:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":109:55)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":114:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:8)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":110:20)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":111:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":113:16)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":113:9)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":115:5)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":135:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":116:9)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":116:33)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":117:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":125:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":118:13)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":118:20)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:13)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":124:13)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:22)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:18)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:25)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:29)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:27)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":121:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:36)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:24)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":122:17)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:36)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:24)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":123:17)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:35)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":120:34)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":126:9)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":134:9)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":127:13)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":127:20)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:13)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":132:13)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:22)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:18)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:25)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:29)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:27)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":130:13)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:17)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:22)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:23)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:34)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":131:27)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:35)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":129:34)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:30)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:35)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:36)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_struct_alloca_loop_07.c":133:13)
#loc233 = loc(fused[#loc1, #loc2])
#loc234 = loc(fused[#loc3, #loc4])
#loc235 = loc(fused[#loc5, #loc6])
#loc236 = loc(fused[#loc7, #loc8])
#loc237 = loc(fused[#loc9, #loc10])
#loc238 = loc(fused[#loc11, #loc12])
#loc239 = loc(fused[#loc13, #loc14])
#loc240 = loc(fused[#loc15, #loc16])
#loc241 = loc(fused[#loc17, #loc14])
#loc242 = loc(fused[#loc19, #loc18])
#loc243 = loc(fused[#loc20, #loc21])
#loc244 = loc(fused[#loc22, #loc23])
#loc245 = loc(fused[#loc24, #loc25])
#loc246 = loc(fused[#loc26, #loc27])
#loc247 = loc(fused[#loc28, #loc29])
#loc248 = loc(fused[#loc31, #loc30])
#loc249 = loc(fused[#loc32, #loc33])
#loc250 = loc(fused[#loc35, #loc29])
#loc251 = loc(fused[#loc38, #loc36])
#loc252 = loc(fused[#loc42, #loc40])
#loc253 = loc(fused[#loc45, #loc44])
#loc254 = loc(fused[#loc46, #loc47])
#loc255 = loc(fused[#loc48, #loc49])
#loc256 = loc(fused[#loc50, #loc51])
#loc257 = loc(fused[#loc53, #loc52])
#loc258 = loc(fused[#loc54, #loc55])
#loc259 = loc(fused[#loc57, #loc51])
#loc260 = loc(fused[#loc64, #loc63])
#loc261 = loc(fused[#loc69, #loc70])
#loc262 = loc(fused[#loc71, #loc72])
#loc263 = loc(fused[#loc73, #loc74])
#loc264 = loc(fused[#loc75, #loc76])
#loc265 = loc(fused[#loc77, #loc78])
#loc266 = loc(fused[#loc79, #loc80])
#loc267 = loc(fused[#loc85, #loc86])
#loc270 = loc(fused[#loc96, #loc97])
#loc271 = loc(fused[#loc100, #loc101])
#loc272 = loc(fused[#loc104, #loc103])
#loc273 = loc(fused[#loc106, #loc107])
#loc274 = loc(fused[#loc108, #loc109])
#loc275 = loc(fused[#loc110, #loc111])
#loc276 = loc(fused[#loc112, #loc113])
#loc277 = loc(fused[#loc114, #loc115])
#loc278 = loc(fused[#loc116, #loc117])
#loc279 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc280 = loc(fused[#loc123, #loc122])
#loc281 = loc(fused[#loc124, #loc125])
#loc282 = loc(fused[#loc126, #loc127])
#loc283 = loc(fused[#loc128, #loc129])
#loc284 = loc(fused[#loc130, #loc131])
#loc285 = loc(fused[#loc132, #loc133])
#loc286 = loc(fused[#loc135, #loc134])
#loc287 = loc(fused[#loc136, #loc137])
#loc288 = loc(fused[#loc139, #loc133])
#loc289 = loc(fused[#loc142, #loc140])
#loc290 = loc(fused[#loc145, #loc143])
#loc291 = loc(fused[#loc147, #loc146])
#loc292 = loc(fused[#loc148, #loc149])
#loc293 = loc(fused[#loc150, #loc151])
#loc294 = loc(fused[#loc152, #loc153])
#loc295 = loc(fused[#loc155, #loc154])
#loc296 = loc(fused[#loc156, #loc157])
#loc297 = loc(fused[#loc159, #loc153])
#loc298 = loc(fused[#loc166, #loc165])
#loc299 = loc(fused[#loc171, #loc172])
#loc300 = loc(fused[#loc173, #loc174])
#loc301 = loc(fused[#loc175, #loc176])
#loc302 = loc(fused[#loc177, #loc178])
#loc303 = loc(fused[#loc179, #loc180])
#loc304 = loc(fused[#loc181, #loc182])
#loc305 = loc(fused[#loc183, #loc180])
#loc306 = loc(fused[#loc185, #loc184])
#loc307 = loc(fused[#loc186, #loc187])
#loc308 = loc(fused[#loc188, #loc189])
#loc309 = loc(fused[#loc190, #loc191])
#loc310 = loc(fused[#loc192, #loc193])
#loc311 = loc(fused[#loc194, #loc195])
#loc312 = loc(fused[#loc197, #loc196])
#loc313 = loc(fused[#loc198, #loc199])
#loc314 = loc(fused[#loc201, #loc195])
#loc315 = loc(fused[#loc204, #loc202])
#loc316 = loc(fused[#loc207, #loc205])
#loc317 = loc(fused[#loc209, #loc208])
#loc318 = loc(fused[#loc210, #loc211])
#loc319 = loc(fused[#loc212, #loc213])
#loc320 = loc(fused[#loc214, #loc215])
#loc321 = loc(fused[#loc217, #loc216])
#loc322 = loc(fused[#loc218, #loc219])
#loc323 = loc(fused[#loc221, #loc215])
#loc324 = loc(fused[#loc228, #loc227])
