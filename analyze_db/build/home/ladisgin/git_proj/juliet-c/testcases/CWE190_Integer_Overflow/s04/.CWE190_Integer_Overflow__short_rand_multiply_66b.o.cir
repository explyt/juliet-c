!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":22:63)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":22:79)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":39:67)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":39:83)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":51:67)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":51:83)
#loc75 = loc(fused[#loc5, #loc6])
#loc82 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc46, #loc47])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc73)
  cir.func @CWE190_Integer_Overflow__short_rand_multiply_66b_badSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc76)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc75)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc77)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc11)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc12)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s16i>, %4 : !s32i), !cir.ptr<!s16i> loc(#loc10)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc12)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc77)
    cir.br ^bb1 loc(#loc78)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc16)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc16)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc79)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc80)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc19)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc19)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc19)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc19)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc76)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc20)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc20)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc21)
    cir.br ^bb3 loc(#loc15)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc15)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc74)
  cir.func @CWE190_Integer_Overflow__short_rand_multiply_66b_goodG2BSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc24, #loc25])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc82)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc84)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc30)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc31)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s16i>, %4 : !s32i), !cir.ptr<!s16i> loc(#loc29)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc31)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc84)
    cir.br ^bb1 loc(#loc85)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc35)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc35)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc36)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc86)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc87)
  ^bb2:  // pred: ^bb1
    %11 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc38)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc38)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc27)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc38)
    %15 = cir.cast(integral, %14 : !s32i), !s16i loc(#loc38)
    cir.store %15, %0 : !s16i, !cir.ptr<!s16i> loc(#loc83)
    %16 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc39)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc39)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc40)
    cir.br ^bb3 loc(#loc34)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc23)
  } loc(#loc81)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc43)
  cir.func @CWE190_Integer_Overflow__short_rand_multiply_66b_goodB2GSink(%arg0: !cir.ptr<!s16i> loc(fused[#loc46, #loc47])) extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc92)
    cir.store %arg0, %1 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc52)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc53)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc54)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!s16i>, %4 : !s32i), !cir.ptr<!s16i> loc(#loc51)
    %6 = cir.load %5 : !cir.ptr<!s16i>, !s16i loc(#loc53)
    cir.store %6, %2 : !s16i, !cir.ptr<!s16i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    %8 = cir.cast(integral, %7 : !s16i), !s32i loc(#loc57)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %10 ^bb2, ^bb8 loc(#loc95)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc96)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc62)
    %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc62)
    %13 = cir.const #cir.int<32767> : !s32i loc(#loc63)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc64)
    %15 = cir.binop(div, %13, %14) : !s32i loc(#loc97)
    %16 = cir.cmp(lt, %12, %15) : !s32i, !cir.bool loc(#loc98)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc99)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc69)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc69)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc69)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc69)
    cir.store %21, %0 : !s16i, !cir.ptr<!s16i> loc(#loc91)
    %22 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc70)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc70)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc71)
    cir.br ^bb6 loc(#loc67)
  ^bb5:  // pred: ^bb3
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc43)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb6 loc(#loc61)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc61)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc56)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc56)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc45)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":29:9)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":29:31)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":25:5)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":25:29)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":23:1)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":25:18)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":25:28)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":26:8)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":26:15)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":29:24)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":30:22)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":30:9)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":39:1)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":48:1)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":45:9)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":45:31)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":41:29)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":40:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":41:18)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":41:28)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":42:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":47:5)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":42:8)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":42:15)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":43:5)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":45:24)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":46:22)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":46:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":64:23)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":51:1)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":67:1)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":59:13)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":59:35)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":53:29)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":52:1)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":53:18)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":53:28)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":54:5)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":66:5)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":54:8)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":54:15)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":55:5)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":57:9)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":65:9)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":57:13)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":57:21)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":57:30)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":57:31)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":58:9)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":61:9)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":63:9)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":59:28)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":60:26)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":60:13)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_multiply_66b.c":64:13)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc9, #loc10])
#loc78 = loc(fused[#loc14, #loc15])
#loc79 = loc(fused[#loc16, #loc17])
#loc80 = loc(fused[#loc18, #loc15])
#loc81 = loc(fused[#loc22, #loc23])
#loc83 = loc(fused[#loc26, #loc27])
#loc84 = loc(fused[#loc28, #loc29])
#loc85 = loc(fused[#loc33, #loc34])
#loc86 = loc(fused[#loc35, #loc36])
#loc87 = loc(fused[#loc37, #loc34])
#loc88 = loc(fused[#loc41, #loc42])
#loc89 = loc(fused[#loc44, #loc45])
#loc91 = loc(fused[#loc48, #loc49])
#loc92 = loc(fused[#loc50, #loc51])
#loc93 = loc(fused[#loc55, #loc56])
#loc94 = loc(fused[#loc57, #loc58])
#loc95 = loc(fused[#loc59, #loc56])
#loc96 = loc(fused[#loc60, #loc61])
#loc97 = loc(fused[#loc63, #loc64])
#loc98 = loc(fused[#loc62, #loc65])
#loc99 = loc(fused[#loc66, #loc67, #loc68, #loc61])
