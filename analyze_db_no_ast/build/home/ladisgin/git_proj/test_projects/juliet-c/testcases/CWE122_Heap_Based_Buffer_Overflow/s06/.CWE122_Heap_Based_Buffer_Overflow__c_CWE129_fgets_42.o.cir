!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:22)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:26)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:26)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:30)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:26)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:30)
#true = #cir.bool<true> : !cir.bool
#loc319 = loc(fused[#loc10, #loc11])
#loc364 = loc(fused[#loc127, #loc128])
#loc402 = loc(fused[#loc234, #loc235])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc315)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc316)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc317)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private  @badSource(%arg0: !s32i loc(fused[#loc10, #loc11])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc319)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc9)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc321)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc321)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc321)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc19)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc20)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc20)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc20)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc20)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc316)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc22)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc323)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc24)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc29)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
        } else {
          %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc7)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        } loc(#loc324)
      } loc(#loc322)
    } loc(#loc320)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc326)
    cir.return %3 : !s32i loc(#loc326)
  } loc(#loc318)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc327)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc328)
  cir.func private  @printIntLine(!s32i) loc(#loc329)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc330)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc43)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc331)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc333)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    %4 = cir.call @badSource(%3) : (!s32i) -> !s32i loc(#loc54)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc337)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc338)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc63)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc339)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc340)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc341)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc338)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc70)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc343)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc71)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc73)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc74)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc75)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
        } loc(#loc344)
      } loc(#loc342)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc78)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc346)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc81)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc347)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc82)
          cir.condition(%21) loc(#loc82)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc84)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc87)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc349)
          } loc(#loc348)
          cir.yield loc(#loc77)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc89)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc350)
          cir.yield loc(#loc345)
        } loc(#loc345)
      } loc(#loc345)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc352)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc94)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc101)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc354)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc104)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc356)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc107)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc357)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc108)
              cir.condition(%29) loc(#loc108)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc112)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc110)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc113)
              } loc(#loc358)
              cir.yield loc(#loc103)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc115)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc359)
              cir.yield loc(#loc355)
            } loc(#loc355)
          } loc(#loc355)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc43)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc43)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc116)
        } loc(#loc353)
      } loc(#loc351)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc117)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc117)
    } loc(#loc336)
    cir.return loc(#loc47)
  } loc(#loc332)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc361)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc121)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc362)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc123)
    cir.return loc(#loc120)
  } loc(#loc360)
  cir.func internal private  @goodB2GSource(%arg0: !s32i loc(fused[#loc127, #loc128])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc364)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc126)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc366)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc366)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc366)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc137)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc137)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc137)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc137)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc137)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc137)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc137)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc137)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc316)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc138)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc139)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc140)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !s32i loc(#loc368)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc141)
        cir.if %21 {
          %22 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc145)
          %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc146)
          cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc370)
        } else {
          %22 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc149)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        } loc(#loc369)
      } loc(#loc367)
    } loc(#loc365)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc371)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    cir.return %3 : !s32i loc(#loc371)
  } loc(#loc363)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc153)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc159)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc374)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    %4 = cir.call @goodB2GSource(%3) : (!s32i) -> !s32i loc(#loc162)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc375)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc377)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc378)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc171)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc172)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc172)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc379)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc380)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc171)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc381)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc378)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc177)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc383)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc179)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc181)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc182)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc183)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc181)
        } loc(#loc384)
      } loc(#loc382)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc186)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc386)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc189)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc387)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc190)
          cir.condition(%21) loc(#loc190)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc192)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc194)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc195)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc389)
          } loc(#loc388)
          cir.yield loc(#loc185)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc196)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc197)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc390)
          cir.yield loc(#loc385)
        } loc(#loc385)
      } loc(#loc385)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc201)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc392)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc202)
        %21 = cir.ternary(%20, true {
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          %23 = cir.const #cir.int<10> : !s32i loc(#loc205)
          %24 = cir.cmp(lt, %22, %23) : !s32i, !s32i loc(#loc393)
          %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc207)
          %26 = cir.ternary(%25, true {
            %27 = cir.const #true loc(#loc203)
            cir.yield %27 : !cir.bool loc(#loc203)
          }, false {
            %27 = cir.const #false loc(#loc203)
            cir.yield %27 : !cir.bool loc(#loc203)
          }) : (!cir.bool) -> !cir.bool loc(#loc203)
          cir.yield %26 : !cir.bool loc(#loc203)
        }, false {
          %22 = cir.const #false loc(#loc203)
          cir.yield %22 : !cir.bool loc(#loc203)
        }) : (!cir.bool) -> !cir.bool loc(#loc203)
        cir.if %21 {
          %22 = cir.const #cir.int<1> : !s32i loc(#loc211)
          %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc212)
          %24 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
          %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc214)
          cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc395)
          cir.scope {
            %26 = cir.const #cir.int<0> : !s32i loc(#loc217)
            cir.store %26, %5 : !s32i, !cir.ptr<!s32i> loc(#loc397)
            cir.for : cond {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %28 = cir.const #cir.int<10> : !s32i loc(#loc220)
              %29 = cir.cmp(lt, %27, %28) : !s32i, !s32i loc(#loc398)
              %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc221)
              cir.condition(%30) loc(#loc221)
            } body {
              cir.scope {
                %27 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc223)
                %28 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc225)
                %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc223)
                cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc226)
              } loc(#loc399)
              cir.yield loc(#loc216)
            } step {
              %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %28 = cir.unary(inc, %27) : !s32i, !s32i loc(#loc228)
              cir.store %28, %5 : !s32i, !cir.ptr<!s32i> loc(#loc400)
              cir.yield loc(#loc396)
            } loc(#loc396)
          } loc(#loc396)
        } else {
          %22 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc153)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc153)
          cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc229)
        } loc(#loc394)
      } loc(#loc391)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc230)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc231)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc231)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc230)
    } loc(#loc376)
    cir.return loc(#loc155)
  } loc(#loc372)
  cir.func internal private  @goodG2BSource(%arg0: !s32i loc(fused[#loc234, #loc235])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc402)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc233)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %2 = cir.const #cir.int<7> : !s32i loc(#loc237)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc403)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc404)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc404)
    cir.return %4 : !s32i loc(#loc404)
  } loc(#loc401)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc406)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc245)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc246)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc407)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    %4 = cir.call @goodG2BSource(%3) : (!s32i) -> !s32i loc(#loc249)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc408)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc410)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc411)
      %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc258)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc259)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc259)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc412)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc413)
      %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc258)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc414)
      cir.store %13, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc411)
      cir.scope {
        %17 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc265)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc265)
        %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s32i>, !s32i loc(#loc416)
        %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc266)
        cir.if %21 {
          %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc268)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc269)
          %24 = cir.unary(minus, %23) : !s32i, !s32i loc(#loc270)
          cir.call @exit(%24) : (!s32i) -> () extra(#fn_attr) loc(#loc268)
        } loc(#loc417)
      } loc(#loc415)
      cir.scope {
        %17 = cir.const #cir.int<0> : !s32i loc(#loc273)
        cir.store %17, %5 : !s32i, !cir.ptr<!s32i> loc(#loc419)
        cir.for : cond {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc275)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc276)
          %20 = cir.cmp(lt, %18, %19) : !s32i, !s32i loc(#loc420)
          %21 = cir.cast(int_to_bool, %20 : !s32i), !cir.bool loc(#loc277)
          cir.condition(%21) loc(#loc277)
        } body {
          cir.scope {
            %18 = cir.const #cir.int<0> : !s32i loc(#loc279)
            %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc280)
            %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc281)
            %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc282)
            cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc422)
          } loc(#loc421)
          cir.yield loc(#loc272)
        } step {
          %18 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc283)
          %19 = cir.unary(inc, %18) : !s32i, !s32i loc(#loc284)
          cir.store %19, %5 : !s32i, !cir.ptr<!s32i> loc(#loc423)
          cir.yield loc(#loc418)
        } loc(#loc418)
      } loc(#loc418)
      cir.scope {
        %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc287)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc288)
        %19 = cir.cmp(ge, %17, %18) : !s32i, !s32i loc(#loc425)
        %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc289)
        cir.if %20 {
          %21 = cir.const #cir.int<1> : !s32i loc(#loc293)
          %22 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc294)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc295)
          %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc296)
          cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc427)
          cir.scope {
            %25 = cir.const #cir.int<0> : !s32i loc(#loc299)
            cir.store %25, %5 : !s32i, !cir.ptr<!s32i> loc(#loc429)
            cir.for : cond {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
              %27 = cir.const #cir.int<10> : !s32i loc(#loc302)
              %28 = cir.cmp(lt, %26, %27) : !s32i, !s32i loc(#loc430)
              %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc303)
              cir.condition(%29) loc(#loc303)
            } body {
              cir.scope {
                %26 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc305)
                %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc306)
                %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc307)
                %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc305)
                cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc308)
              } loc(#loc431)
              cir.yield loc(#loc298)
            } step {
              %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc309)
              %27 = cir.unary(inc, %26) : !s32i, !s32i loc(#loc310)
              cir.store %27, %5 : !s32i, !cir.ptr<!s32i> loc(#loc432)
              cir.yield loc(#loc428)
            } loc(#loc428)
          } loc(#loc428)
        } else {
          %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc311)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc311)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc312)
        } loc(#loc426)
      } loc(#loc424)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc313)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc314)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc314)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc313)
    } loc(#loc409)
    cir.return loc(#loc242)
  } loc(#loc405)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":36:23)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":24:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":40:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":25:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":26:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":38:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":27:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":27:45)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":37:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:19)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:49)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:59)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":29:56)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":33:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":35:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:25)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:20)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":32:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":36:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":39:12)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":39:5)
#loc35 = loc("/usr/include/stdlib.h":672:1)
#loc36 = loc("/usr/include/stdlib.h":672:45)
#loc37 = loc("/usr/include/stdlib.h":756:1)
#loc38 = loc("/usr/include/stdlib.h":756:70)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":70:23)
#loc44 = loc("/usr/include/stdlib.h":687:1)
#loc45 = loc("/usr/include/stdlib.h":687:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":42:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":74:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":44:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:12)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":46:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:12)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":47:26)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":48:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":73:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":49:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":49:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:54)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:38)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:43)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":50:53)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:39)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:20)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:30)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:36)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":51:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":56:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:18)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:25)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":54:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":55:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:30)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":53:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":71:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:13)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:21)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":59:18)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":60:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":67:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":69:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:28)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:20)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":61:24)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":66:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:26)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":64:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:30)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:37)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:38)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":65:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:33)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":63:32)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":70:13)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":72:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":72:14)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":175:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":179:1)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":177:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":177:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":178:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":178:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":124:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":140:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":125:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":126:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":138:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":127:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":127:45)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":137:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:32)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:49)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:59)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":129:56)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":130:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":133:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":135:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:20)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:13)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":132:36)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":136:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":136:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":139:12)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":139:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":169:23)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":142:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":173:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":144:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":144:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:12)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":146:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:26)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":147:30)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":148:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":172:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":149:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":149:13)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:54)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:31)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:38)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":150:53)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:39)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:23)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:20)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:29)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:30)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:36)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":151:35)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":156:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:18)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:14)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:21)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:25)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":154:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:25)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:20)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":155:21)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:30)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":153:29)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":170:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:13)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:21)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:18)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:23)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:26)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:34)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:36)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":158:31)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":159:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":166:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":168:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:28)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:20)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":160:24)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:13)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":165:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:21)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:17)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:24)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:28)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:26)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":163:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:30)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:37)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:38)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":164:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:33)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":162:32)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":169:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":171:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":171:14)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":81:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":87:1)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":82:1)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":85:12)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":85:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":86:12)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":86:5)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":89:1)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":121:1)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":91:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":91:9)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:12)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":93:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:26)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:12)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:5)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":94:30)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":95:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":120:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":96:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":96:13)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:54)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:31)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:38)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:43)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":97:53)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:39)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:23)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:20)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:29)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:30)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:36)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":98:35)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":103:9)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:18)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:14)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:21)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:25)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:23)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":101:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:25)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:20)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":102:21)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:30)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":100:29)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:9)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":118:9)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:21)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":106:18)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":107:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":114:9)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":116:9)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:28)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:20)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":108:24)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:13)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":113:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:21)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:17)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:24)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:28)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:26)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":111:13)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:30)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:37)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:38)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":112:17)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:33)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":110:32)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":117:23)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":117:13)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":119:9)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_42.c":119:14)
#loc315 = loc(fused[#loc1, #loc2])
#loc316 = loc(fused[#loc3, #loc4])
#loc317 = loc(fused[#loc5, #loc6])
#loc318 = loc(fused[#loc8, #loc9])
#loc320 = loc(fused[#loc13, #loc14])
#loc321 = loc(fused[#loc15, #loc16])
#loc322 = loc(fused[#loc17, #loc18])
#loc323 = loc(fused[#loc22, #loc23])
#loc324 = loc(fused[#loc25, #loc26, #loc27, #loc18])
#loc325 = loc(fused[#loc30, #loc31])
#loc326 = loc(fused[#loc34, #loc33])
#loc327 = loc(fused[#loc35, #loc36])
#loc328 = loc(fused[#loc37, #loc38])
#loc329 = loc(fused[#loc39, #loc40])
#loc330 = loc(fused[#loc41, #loc42])
#loc331 = loc(fused[#loc44, #loc45])
#loc332 = loc(fused[#loc46, #loc47])
#loc333 = loc(fused[#loc48, #loc49])
#loc334 = loc(fused[#loc52, #loc50])
#loc335 = loc(fused[#loc55, #loc56])
#loc336 = loc(fused[#loc57, #loc58])
#loc337 = loc(fused[#loc59, #loc60])
#loc338 = loc(fused[#loc61, #loc62])
#loc339 = loc(fused[#loc65, #loc66])
#loc340 = loc(fused[#loc64, #loc66])
#loc341 = loc(fused[#loc63, #loc62])
#loc342 = loc(fused[#loc67, #loc68])
#loc343 = loc(fused[#loc69, #loc70])
#loc344 = loc(fused[#loc72, #loc68])
#loc345 = loc(fused[#loc76, #loc77])
#loc346 = loc(fused[#loc79, #loc78])
#loc347 = loc(fused[#loc80, #loc81])
#loc348 = loc(fused[#loc83, #loc77])
#loc349 = loc(fused[#loc85, #loc84])
#loc350 = loc(fused[#loc89, #loc88])
#loc351 = loc(fused[#loc90, #loc91])
#loc352 = loc(fused[#loc92, #loc93])
#loc353 = loc(fused[#loc95, #loc96, #loc97, #loc91])
#loc354 = loc(fused[#loc99, #loc98])
#loc355 = loc(fused[#loc102, #loc103])
#loc356 = loc(fused[#loc105, #loc104])
#loc357 = loc(fused[#loc106, #loc107])
#loc358 = loc(fused[#loc109, #loc103])
#loc359 = loc(fused[#loc115, #loc114])
#loc360 = loc(fused[#loc119, #loc120])
#loc361 = loc(fused[#loc121, #loc122])
#loc362 = loc(fused[#loc123, #loc124])
#loc363 = loc(fused[#loc125, #loc126])
#loc365 = loc(fused[#loc130, #loc131])
#loc366 = loc(fused[#loc132, #loc133])
#loc367 = loc(fused[#loc134, #loc135])
#loc368 = loc(fused[#loc139, #loc140])
#loc369 = loc(fused[#loc142, #loc143, #loc144, #loc135])
#loc370 = loc(fused[#loc147, #loc148])
#loc371 = loc(fused[#loc152, #loc151])
#loc372 = loc(fused[#loc154, #loc155])
#loc373 = loc(fused[#loc156, #loc157])
#loc374 = loc(fused[#loc160, #loc158])
#loc375 = loc(fused[#loc163, #loc164])
#loc376 = loc(fused[#loc165, #loc166])
#loc377 = loc(fused[#loc167, #loc168])
#loc378 = loc(fused[#loc169, #loc170])
#loc379 = loc(fused[#loc173, #loc174])
#loc380 = loc(fused[#loc172, #loc174])
#loc381 = loc(fused[#loc171, #loc170])
#loc382 = loc(fused[#loc175, #loc176])
#loc383 = loc(fused[#loc177, #loc178])
#loc384 = loc(fused[#loc180, #loc176])
#loc385 = loc(fused[#loc184, #loc185])
#loc386 = loc(fused[#loc187, #loc186])
#loc387 = loc(fused[#loc188, #loc189])
#loc388 = loc(fused[#loc191, #loc185])
#loc389 = loc(fused[#loc193, #loc192])
#loc390 = loc(fused[#loc197, #loc196])
#loc391 = loc(fused[#loc198, #loc199])
#loc392 = loc(fused[#loc200, #loc201])
#loc393 = loc(fused[#loc204, #loc206])
#loc394 = loc(fused[#loc208, #loc209, #loc210, #loc199])
#loc395 = loc(fused[#loc212, #loc211])
#loc396 = loc(fused[#loc215, #loc216])
#loc397 = loc(fused[#loc218, #loc217])
#loc398 = loc(fused[#loc219, #loc220])
#loc399 = loc(fused[#loc222, #loc216])
#loc400 = loc(fused[#loc228, #loc227])
#loc401 = loc(fused[#loc232, #loc233])
#loc403 = loc(fused[#loc238, #loc237])
#loc404 = loc(fused[#loc240, #loc239])
#loc405 = loc(fused[#loc241, #loc242])
#loc406 = loc(fused[#loc243, #loc244])
#loc407 = loc(fused[#loc247, #loc245])
#loc408 = loc(fused[#loc250, #loc251])
#loc409 = loc(fused[#loc252, #loc253])
#loc410 = loc(fused[#loc254, #loc255])
#loc411 = loc(fused[#loc256, #loc257])
#loc412 = loc(fused[#loc260, #loc261])
#loc413 = loc(fused[#loc259, #loc261])
#loc414 = loc(fused[#loc258, #loc257])
#loc415 = loc(fused[#loc262, #loc263])
#loc416 = loc(fused[#loc264, #loc265])
#loc417 = loc(fused[#loc267, #loc263])
#loc418 = loc(fused[#loc271, #loc272])
#loc419 = loc(fused[#loc274, #loc273])
#loc420 = loc(fused[#loc275, #loc276])
#loc421 = loc(fused[#loc278, #loc272])
#loc422 = loc(fused[#loc280, #loc279])
#loc423 = loc(fused[#loc284, #loc283])
#loc424 = loc(fused[#loc285, #loc286])
#loc425 = loc(fused[#loc287, #loc288])
#loc426 = loc(fused[#loc290, #loc291, #loc292, #loc286])
#loc427 = loc(fused[#loc294, #loc293])
#loc428 = loc(fused[#loc297, #loc298])
#loc429 = loc(fused[#loc300, #loc299])
#loc430 = loc(fused[#loc301, #loc302])
#loc431 = loc(fused[#loc304, #loc298])
#loc432 = loc(fused[#loc310, #loc309])
