!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":30:21)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":77:10)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":77:14)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":77:20)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":77:32)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":58:21)
#loc86 = loc(fused[#loc32, #loc33])
#loc87 = loc(fused[#loc34, #loc35])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_63a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc73)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_predec_63b_badSink(!cir.ptr<!s64i>) loc(#loc74)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_63_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc76)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc77)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc11)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc11)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc11)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc11)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc11)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc11)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc11)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc11)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc11)
    cir.br ^bb3(%27 : !u64i) loc(#loc11)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc11)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc11)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc11)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc11)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc11)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc11)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc11)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc11)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc11)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc11)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc11)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc11)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc11)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc11)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc11)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc11)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc11)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc11)
    cir.br ^bb3(%53 : !u64i) loc(#loc11)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":30:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc11)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc78)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_predec_63b_badSink(%0) : (!cir.ptr<!s64i>) -> () loc(#loc13)
    cir.return loc(#loc6)
  } loc(#loc75)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_predec_63_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc16)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc81)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    cir.return loc(#loc15)
  } loc(#loc79)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc82)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc29)
  cir.func @main(%arg0: !s32i loc(fused[#loc32, #loc33]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc34, #loc35])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc87)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc31)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc36)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc36)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc37)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc38)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc38)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc39)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc26)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc40)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_predec_63_good : !cir.ptr<!cir.func<!void ()>> loc(#loc88)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_predec_63_good() : () -> () loc(#loc41)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc27)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc27)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc28)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_predec_63_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc89)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_predec_63_bad() : () -> () loc(#loc45)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc29)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc48)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.return %17 : !s32i loc(#loc90)
  } loc(#loc85)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_predec_63b_goodG2BSink(!cir.ptr<!s64i>) loc(#loc91)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc93)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc94)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc58)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc59)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc59)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_predec_63b_goodG2BSink(%0) : (!cir.ptr<!s64i>) -> () loc(#loc61)
    cir.return loc(#loc53)
  } loc(#loc92)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_predec_63b_goodB2GSink(!cir.ptr<!s64i>) loc(#loc96)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc70)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc70)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc70)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc70)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc70)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc70)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc70)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc70)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc70)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc70)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc70)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc70)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc70)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc70)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc70)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc70)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc70)
    cir.br ^bb3(%27 : !u64i) loc(#loc70)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc70)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc70)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc70)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc70)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc70)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc70)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc70)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc70)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc70)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc70)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc70)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc70)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc70)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc70)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc70)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc70)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc70)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc70)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc70)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc70)
    cir.br ^bb3(%53 : !u64i) loc(#loc70)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":58:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc70)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_predec_63b_goodB2GSink(%0) : (!cir.ptr<!s64i>) -> () loc(#loc72)
    cir.return loc(#loc65)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s05/CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":23:81)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":32:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":27:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":28:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":28:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":31:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":62:1)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":66:1)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":64:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":64:13)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":65:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":65:13)
#loc20 = loc("/usr/include/stdlib.h":575:1)
#loc21 = loc("/usr/include/stdlib.h":575:41)
#loc22 = loc("/usr/include/time.h":76:1)
#loc23 = loc("/usr/include/time.h":76:38)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":82:15)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":84:15)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":87:15)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":89:15)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":77:1)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":92:1)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":78:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":80:27)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":80:22)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":80:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":82:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":83:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":83:59)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":84:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":87:5)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":88:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":88:58)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":89:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":91:12)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":91:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":39:1)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":39:82)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":41:1)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":48:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":43:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":43:13)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":44:12)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":44:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":46:13)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":46:12)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":46:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":47:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":51:1)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":51:82)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":53:1)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":60:1)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":55:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":55:13)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":56:12)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":56:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":58:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_predec_63a.c":59:5)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc10, #loc9])
#loc78 = loc(fused[#loc12, #loc11])
#loc79 = loc(fused[#loc14, #loc15])
#loc80 = loc(fused[#loc16, #loc17])
#loc81 = loc(fused[#loc18, #loc19])
#loc82 = loc(fused[#loc20, #loc21])
#loc83 = loc(fused[#loc22, #loc23])
#loc84 = loc(fused[#loc24, #loc25])
#loc85 = loc(fused[#loc30, #loc31])
#loc88 = loc(fused[#loc41, #loc42])
#loc89 = loc(fused[#loc45, #loc46])
#loc90 = loc(fused[#loc49, #loc48])
#loc91 = loc(fused[#loc50, #loc51])
#loc92 = loc(fused[#loc52, #loc53])
#loc93 = loc(fused[#loc54, #loc55])
#loc94 = loc(fused[#loc57, #loc56])
#loc95 = loc(fused[#loc60, #loc58])
#loc96 = loc(fused[#loc62, #loc63])
#loc97 = loc(fused[#loc64, #loc65])
#loc98 = loc(fused[#loc66, #loc67])
#loc99 = loc(fused[#loc69, #loc68])
#loc100 = loc(fused[#loc71, #loc70])
