!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:40)
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc104)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc105)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc107)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc109)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.br ^bb2 loc(#loc112)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc114)
    cir.brcond %6 ^bb3, ^bb14 loc(#loc26)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc116)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc17)
    cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc110)
    cir.br ^bb6 loc(#loc117)
  ^bb6:  // pred: ^bb5
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc32)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc33)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
    %13 = cir.call @fgets(%9, %10, %12) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
    %16 = cir.cmp(ne, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc118)
    cir.brcond %16 ^bb7, ^bb8 loc(#loc119)
  ^bb7:  // pred: ^bb6
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc40)
    %18 = cir.call @atof(%17) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc41)
    cir.store %18, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc120)
    cir.br ^bb9 loc(#loc38)
  ^bb8:  // pred: ^bb6
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc31)
  ^bb10:  // pred: ^bb9
    %21 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc45)
    %22 = cir.cast(float_to_int, %21 : !cir.double), !s32i loc(#loc45)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc46)
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc21)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc21)
  ^bb13:  // pred: ^bb12
    %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc48)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.br ^bb2 loc(#loc112)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc21)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc13)
  } loc(#loc108)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc125)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    cir.br ^bb2 loc(#loc128)
  ^bb2:  // 2 preds: ^bb1, ^bb26
    %4 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc130)
    cir.brcond %6 ^bb3, ^bb27 loc(#loc68)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc131)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc59)
    cir.store %8, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc126)
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    %9 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc74)
    %10 = cir.const #cir.int<256> : !s32i loc(#loc75)
    %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc104)
    %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc76)
    %13 = cir.call @fgets(%9, %10, %12) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc77)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc78)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc78)
    %16 = cir.cmp(ne, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc134)
    cir.brcond %16 ^bb7, ^bb8 loc(#loc135)
  ^bb7:  // pred: ^bb6
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc82)
    %18 = cir.call @atof(%17) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc83)
    cir.store %18, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc136)
    cir.br ^bb9 loc(#loc80)
  ^bb8:  // pred: ^bb6
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc86)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc86)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb9 loc(#loc73)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc73)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc137)
  ^bb11:  // pred: ^bb10
    %21 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc90)
    %22 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc91)
    %24 = cir.cmp(gt, %21, %23) : !cir.double, !cir.bool loc(#loc138)
    cir.brcond %24 ^bb12, ^bb13 loc(#loc92)
  ^bb12:  // pred: ^bb11
    %25 = cir.const #true loc(#loc92)
    cir.br ^bb18(%25 : !cir.bool) loc(#loc92)
  ^bb13:  // pred: ^bb11
    %26 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc93)
    %27 = cir.const #cir.int<2147483647> : !s32i loc(#loc94)
    %28 = cir.unary(minus, %27) : !s32i, !s32i loc(#loc94)
    %29 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc94)
    %31 = cir.cast(int_to_float, %30 : !s32i), !cir.double loc(#loc94)
    %32 = cir.cmp(lt, %26, %31) : !cir.double, !cir.bool loc(#loc139)
    cir.brcond %32 ^bb14, ^bb15 loc(#loc92)
  ^bb14:  // pred: ^bb13
    %33 = cir.const #true loc(#loc92)
    cir.br ^bb16(%33 : !cir.bool) loc(#loc92)
  ^bb15:  // pred: ^bb13
    %34 = cir.const #false loc(#loc92)
    cir.br ^bb16(%34 : !cir.bool) loc(#loc92)
  ^bb16(%35: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:40)):  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc92)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18(%35 : !cir.bool) loc(#loc92)
  ^bb18(%36: !cir.bool loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:40)):  // 2 preds: ^bb12, ^bb17
    cir.br ^bb19 loc(#loc92)
  ^bb19:  // pred: ^bb18
    cir.brcond %36 ^bb20, ^bb21 loc(#loc140)
  ^bb20:  // pred: ^bb19
    %37 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc53)
    %38 = cir.cast(array_to_ptrdecay, %37 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb22 loc(#loc96)
  ^bb21:  // pred: ^bb19
    %39 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc99)
    %40 = cir.cast(float_to_int, %39 : !cir.double), !s32i loc(#loc99)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc100)
    cir.br ^bb22 loc(#loc89)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc89)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc71)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc63)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc63)
  ^bb26:  // pred: ^bb25
    %41 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %42 = cir.unary(inc, %41) : !s32i, !s32i loc(#loc102)
    cir.store %42, %2 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    cir.br ^bb2 loc(#loc128)
  ^bb27:  // pred: ^bb2
    cir.br ^bb28 loc(#loc63)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc55)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":38:27)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":22:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":44:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":28:13)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":28:45)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":29:13)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":29:35)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":24:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":24:9)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:5)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":43:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:13)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:9)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:16)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:20)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:18)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":26:5)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":27:9)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":42:9)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:13)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":39:13)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:23)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:36)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:53)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:17)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":31:63)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":32:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":35:13)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":37:13)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":34:37)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":34:32)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":34:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":34:48)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":38:17)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":41:31)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":41:13)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:24)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":25:23)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":86:1)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":89:1)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":88:5)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":88:11)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":76:27)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":51:1)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":84:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":57:13)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":57:45)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":58:13)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":58:35)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":53:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":53:9)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:5)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":83:5)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:13)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:9)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:16)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:20)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:18)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":55:5)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":56:9)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":82:9)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:13)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":72:13)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:23)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:36)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:53)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:17)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":64:63)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":65:13)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":68:13)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":70:13)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":67:37)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":67:32)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":67:17)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":67:48)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":71:27)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":71:17)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:13)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":81:13)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:17)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:32)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:43)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":74:58)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":75:13)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":77:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":79:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":76:17)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":80:35)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":80:17)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:24)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_17.c":54:23)
#loc103 = loc(fused[#loc1, #loc2])
#loc104 = loc(fused[#loc3, #loc4])
#loc105 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc7, #loc8])
#loc107 = loc(fused[#loc10, #loc11])
#loc108 = loc(fused[#loc12, #loc13])
#loc109 = loc(fused[#loc14, #loc15])
#loc110 = loc(fused[#loc16, #loc17])
#loc111 = loc(fused[#loc18, #loc19])
#loc112 = loc(fused[#loc20, #loc21])
#loc113 = loc(fused[#loc23, #loc22])
#loc114 = loc(fused[#loc24, #loc25])
#loc115 = loc(fused[#loc27, #loc21])
#loc116 = loc(fused[#loc28, #loc29])
#loc117 = loc(fused[#loc30, #loc31])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc120 = loc(fused[#loc42, #loc43])
#loc121 = loc(fused[#loc48, #loc47])
#loc122 = loc(fused[#loc49, #loc50])
#loc123 = loc(fused[#loc51, #loc52])
#loc124 = loc(fused[#loc54, #loc55])
#loc125 = loc(fused[#loc56, #loc57])
#loc126 = loc(fused[#loc58, #loc59])
#loc127 = loc(fused[#loc60, #loc61])
#loc128 = loc(fused[#loc62, #loc63])
#loc129 = loc(fused[#loc65, #loc64])
#loc130 = loc(fused[#loc66, #loc67])
#loc131 = loc(fused[#loc69, #loc63])
#loc132 = loc(fused[#loc70, #loc71])
#loc133 = loc(fused[#loc72, #loc73])
#loc134 = loc(fused[#loc77, #loc78])
#loc135 = loc(fused[#loc79, #loc80, #loc81, #loc73])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc88, #loc89])
#loc138 = loc(fused[#loc90, #loc91])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96, #loc97, #loc89])
#loc141 = loc(fused[#loc102, #loc101])
