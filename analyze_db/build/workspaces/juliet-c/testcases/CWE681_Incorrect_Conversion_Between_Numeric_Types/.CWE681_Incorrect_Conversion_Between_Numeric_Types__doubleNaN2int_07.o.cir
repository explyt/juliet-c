!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc138)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc139)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc140)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc141)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc143)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc14)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc145)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc146)
    cir.br ^bb1 loc(#loc147)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc138)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc148)
    cir.brcond %5 ^bb2, ^bb10 loc(#loc149)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc150)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc20)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc20)
    cir.store %7, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc146)
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc30)
    %9 = cir.const #cir.int<256> : !s32i loc(#loc31)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc140)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc152)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc153)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc38)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc39)
    cir.store %17, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc154)
    cir.br ^bb7 loc(#loc36)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc29)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc43)
    %21 = cir.call @sqrt(%20) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc44)
    %22 = cir.cast(float_to_int, %21 : !cir.double), !s32i loc(#loc44)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc45)
    cir.br ^bb9 loc(#loc27)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc22)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc16)
  } loc(#loc144)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Value is negative\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc159)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc138)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc63)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc163)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb16 loc(#loc65)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc164)
  ^bb4:  // pred: ^bb3
    %8 = cir.const #cir.int<0> : !s32i loc(#loc59)
    %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc59)
    cir.store %9, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc160)
    cir.br ^bb5 loc(#loc165)
  ^bb5:  // pred: ^bb4
    %10 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc72)
    %11 = cir.const #cir.int<256> : !s32i loc(#loc73)
    %12 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc140)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %14 = cir.call @fgets(%10, %11, %13) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc75)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc76)
    %17 = cir.cmp(ne, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc166)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc167)
  ^bb6:  // pred: ^bb5
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc80)
    %19 = cir.call @atof(%18) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc81)
    cir.store %19, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc168)
    cir.br ^bb8 loc(#loc78)
  ^bb7:  // pred: ^bb5
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc84)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb8 loc(#loc71)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc71)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc169)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc88)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc89)
    %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc89)
    %25 = cir.cmp(lt, %22, %24) : !cir.double, !cir.bool loc(#loc170)
    cir.brcond %25 ^bb11, ^bb12 loc(#loc171)
  ^bb11:  // pred: ^bb10
    %26 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb13 loc(#loc91)
  ^bb12:  // pred: ^bb10
    %28 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc94)
    %29 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc95)
    %30 = cir.call @sqrt(%29) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc94)
    %31 = cir.cast(float_to_int, %30 : !cir.double), !s32i loc(#loc94)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc96)
    cir.br ^bb13 loc(#loc87)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc87)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc69)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc61)
  ^bb16:  // 2 preds: ^bb2, ^bb15
    cir.br ^bb17 loc(#loc61)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc55)
  } loc(#loc158)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc173)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc174)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc138)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc105)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc106)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc176)
    cir.brcond %5 ^bb2, ^bb15 loc(#loc177)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc178)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc102)
    %7 = cir.cast(int_to_float, %6 : !s32i), !cir.double loc(#loc102)
    cir.store %7, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc174)
    cir.br ^bb4 loc(#loc179)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc112)
    %9 = cir.const #cir.int<256> : !s32i loc(#loc113)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc140)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc114)
    %12 = cir.call @fgets(%8, %9, %11) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc115)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc116)
    %15 = cir.cmp(ne, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
    cir.brcond %15 ^bb5, ^bb6 loc(#loc181)
  ^bb5:  // pred: ^bb4
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc120)
    %17 = cir.call @atof(%16) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc121)
    cir.store %17, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc182)
    cir.br ^bb7 loc(#loc118)
  ^bb6:  // pred: ^bb4
    %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc124)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb7 loc(#loc111)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc111)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc183)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc128)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %22 = cir.cast(int_to_float, %21 : !s32i), !cir.double loc(#loc129)
    %23 = cir.cmp(lt, %20, %22) : !cir.double, !cir.bool loc(#loc184)
    cir.brcond %23 ^bb10, ^bb11 loc(#loc185)
  ^bb10:  // pred: ^bb9
    %24 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc133)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc133)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc134)
    cir.br ^bb12 loc(#loc131)
  ^bb11:  // pred: ^bb9
    %26 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc135)
    %27 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc136)
    %28 = cir.call @sqrt(%27) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc135)
    %29 = cir.cast(float_to_int, %28 : !cir.double), !s32i loc(#loc135)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc137)
    cir.br ^bb12 loc(#loc127)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc127)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc109)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc104)
  ^bb15:  // 2 preds: ^bb1, ^bb14
    cir.br ^bb16 loc(#loc104)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc98)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":0:0)
#loc1 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":24:1)
#loc2 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":24:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":46:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":28:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":52:1)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":33:13)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":33:45)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":34:13)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":34:35)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":30:5)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":51:5)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":30:8)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":30:20)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":31:5)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":32:9)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":50:9)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:13)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":47:13)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:23)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:36)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:53)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:17)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":39:63)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":40:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":43:13)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":45:13)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":42:37)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":42:32)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":42:17)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":42:48)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":46:17)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":49:37)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":49:32)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":49:13)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":133:1)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":137:1)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":135:5)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":135:11)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":136:5)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":136:11)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":64:19)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":88:27)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":59:1)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":96:1)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":69:13)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":69:45)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":70:13)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":70:35)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":61:5)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":95:5)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":61:8)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":61:20)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":62:5)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":65:5)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":67:5)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":64:9)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":68:9)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":94:9)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":83:13)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:23)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:36)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:53)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:17)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":75:63)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":76:13)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":79:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":81:13)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":78:37)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":78:32)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":78:17)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":78:48)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":82:27)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":82:17)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":86:13)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":93:13)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":86:17)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":86:32)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":87:13)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":89:13)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":91:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":88:17)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":92:36)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":92:41)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":92:17)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":99:1)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":131:1)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":104:13)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":104:45)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":105:13)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":105:35)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":101:5)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":130:5)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":101:8)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":101:20)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":102:5)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":103:9)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":129:9)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:13)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":118:13)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:23)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:36)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:53)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:17)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":110:63)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":111:13)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":114:13)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":116:13)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":113:37)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":113:32)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":113:17)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":113:48)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":117:27)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":117:17)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":121:13)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":128:13)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":121:17)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":121:32)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":122:13)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":124:13)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":126:13)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":123:27)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":123:17)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":127:36)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":127:41)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__doubleNaN2int_07.c":127:17)
#loc138 = loc(fused[#loc1, #loc2])
#loc139 = loc(fused[#loc3, #loc4])
#loc140 = loc(fused[#loc5, #loc6])
#loc141 = loc(fused[#loc7, #loc8])
#loc142 = loc(fused[#loc9, #loc10])
#loc143 = loc(fused[#loc12, #loc13])
#loc144 = loc(fused[#loc15, #loc16])
#loc145 = loc(fused[#loc17, #loc18])
#loc146 = loc(fused[#loc19, #loc20])
#loc147 = loc(fused[#loc21, #loc22])
#loc148 = loc(fused[#loc23, #loc24])
#loc149 = loc(fused[#loc25, #loc22])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc28, #loc29])
#loc152 = loc(fused[#loc33, #loc34])
#loc153 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc154 = loc(fused[#loc40, #loc41])
#loc155 = loc(fused[#loc46, #loc47])
#loc156 = loc(fused[#loc48, #loc49])
#loc157 = loc(fused[#loc50, #loc51])
#loc158 = loc(fused[#loc54, #loc55])
#loc159 = loc(fused[#loc56, #loc57])
#loc160 = loc(fused[#loc58, #loc59])
#loc161 = loc(fused[#loc60, #loc61])
#loc162 = loc(fused[#loc62, #loc63])
#loc163 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc164 = loc(fused[#loc68, #loc69])
#loc165 = loc(fused[#loc70, #loc71])
#loc166 = loc(fused[#loc75, #loc76])
#loc167 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc168 = loc(fused[#loc82, #loc83])
#loc169 = loc(fused[#loc86, #loc87])
#loc170 = loc(fused[#loc88, #loc89])
#loc171 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc172 = loc(fused[#loc97, #loc98])
#loc173 = loc(fused[#loc99, #loc100])
#loc174 = loc(fused[#loc101, #loc102])
#loc175 = loc(fused[#loc103, #loc104])
#loc176 = loc(fused[#loc105, #loc106])
#loc177 = loc(fused[#loc107, #loc104])
#loc178 = loc(fused[#loc108, #loc109])
#loc179 = loc(fused[#loc110, #loc111])
#loc180 = loc(fused[#loc115, #loc116])
#loc181 = loc(fused[#loc117, #loc118, #loc119, #loc111])
#loc182 = loc(fused[#loc122, #loc123])
#loc183 = loc(fused[#loc126, #loc127])
#loc184 = loc(fused[#loc128, #loc129])
#loc185 = loc(fused[#loc130, #loc131, #loc132, #loc127])
