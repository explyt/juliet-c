!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":132:10)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":132:14)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":132:20)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":132:32)
#loc290 = loc(fused[#loc95, #loc96])
#loc291 = loc(fused[#loc97, #loc98])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc253)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc254)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc255)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc256)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc257)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc259)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc260)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc261)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc262)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc265)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc31)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc32)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc268)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<100> : !s32i loc(#loc36)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc37)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc36)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc36)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc270)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc40)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
        %21 = cir.const #cir.int<100> : !s32i loc(#loc42)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc42)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc44)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc271)
      } loc(#loc269)
    } loc(#loc267)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc273)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc274)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc275)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc273)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc273)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc52)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc52)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc276)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc58)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc58)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc278)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc60)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc61)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc279)
          cir.condition(%30) loc(#loc62)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc65)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc66)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc64)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc67)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc68)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc68)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc281)
          } loc(#loc280)
          cir.yield loc(#loc57)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc69)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc70)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc282)
          cir.yield loc(#loc277)
        } loc(#loc277)
      } loc(#loc277)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc71)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc71)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc72)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc73)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc72)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc74)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc74)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc283)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc77)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc78)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc77)
    } loc(#loc272)
    cir.return loc(#loc12)
  } loc(#loc258)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc285)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc286)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc284)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc287)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc92)
  cir.func @main(%arg0: !s32i loc(fused[#loc95, #loc96]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc97, #loc98])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc291)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc94)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc99)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc100)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc101)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc101)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc102)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc89)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc292)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_good() : () -> () loc(#loc104)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc90)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc90)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc293)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06_bad() : () -> () loc(#loc108)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc92)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc111)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc294)
    cir.return %17 : !s32i loc(#loc294)
  } loc(#loc289)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc113)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc296)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc118)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc119)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc119)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc297)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc298)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc118)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc299)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc300)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc127)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc127)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc302)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc129)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc130)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc131)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc129)
      } loc(#loc303)
    } loc(#loc301)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc134)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc135)
      %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc305)
      cir.if %10 {
        %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc113)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc113)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc139)
      } else {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc140)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc141)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc142)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc143)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc142)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc142)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc307)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc146)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc146)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc147)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc148)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc148)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc150)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc308)
      } loc(#loc306)
    } loc(#loc304)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc310)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc311)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc312)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc310)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc310)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc158)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc158)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc313)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc164)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc164)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc315)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc166)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc167)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc316)
          cir.condition(%30) loc(#loc168)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc171)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc172)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc170)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc173)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc174)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc174)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc318)
          } loc(#loc317)
          cir.yield loc(#loc163)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc175)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc176)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc319)
          cir.yield loc(#loc314)
        } loc(#loc314)
      } loc(#loc314)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc177)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc177)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc178)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc179)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc178)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc180)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc180)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc320)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc181)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc182)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc183)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc184)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc183)
    } loc(#loc309)
    cir.return loc(#loc115)
  } loc(#loc295)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc322)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc189)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc190)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc190)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc323)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc324)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc189)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc325)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc326)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc197)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc198)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc198)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc328)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc200)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc201)
        %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc202)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc200)
      } loc(#loc329)
    } loc(#loc327)
    cir.scope {
      %8 = cir.const #cir.int<5> : !s32i loc(#loc205)
      %9 = cir.const #cir.int<5> : !s32i loc(#loc206)
      %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc331)
      cir.if %10 {
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc208)
        %13 = cir.const #cir.int<65> : !s32i loc(#loc209)
        %14 = cir.const #cir.int<50> : !s32i loc(#loc210)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc211)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc210)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc210)
        cir.libc.memset %17 bytes from %12 set to %13 : !cir.ptr<!void>, !s32i, !u64i loc(#loc333)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc214)
        %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc214)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
        %21 = cir.const #cir.int<50> : !s32i loc(#loc216)
        %22 = cir.const #cir.int<1> : !s32i loc(#loc217)
        %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc216)
        %24 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc218)
        cir.store %19, %24 : !s8i, !cir.ptr<!s8i> loc(#loc334)
      } loc(#loc332)
    } loc(#loc330)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc336)
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc337)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc338)
      %11 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc336)
      cir.store %11, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc336)
      %12 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc226)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
      %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc226)
      cir.store %14, %10 : !u64i, !cir.ptr<!u64i> loc(#loc339)
      cir.scope {
        %26 = cir.const #cir.int<0> : !s32i loc(#loc232)
        %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc232)
        cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc341)
        cir.for : cond {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc234)
          %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc235)
          %30 = cir.cmp(lt, %28, %29) : !u64i, !cir.bool loc(#loc342)
          cir.condition(%30) loc(#loc236)
        } body {
          cir.scope {
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc238)
            %29 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc239)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc240)
            %31 = cir.load %30 : !cir.ptr<!s8i>, !s8i loc(#loc238)
            %32 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc241)
            %33 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc242)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc242)
            cir.store %31, %34 : !s8i, !cir.ptr<!s8i> loc(#loc344)
          } loc(#loc343)
          cir.yield loc(#loc231)
        } step {
          %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc243)
          %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc244)
          cir.store %29, %9 : !u64i, !cir.ptr<!u64i> loc(#loc345)
          cir.yield loc(#loc340)
        } loc(#loc340)
      } loc(#loc340)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc245)
      %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc245)
      %17 = cir.const #cir.int<50> : !s32i loc(#loc246)
      %18 = cir.const #cir.int<1> : !s32i loc(#loc247)
      %19 = cir.binop(sub, %17, %18) nsw : !s32i loc(#loc246)
      %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc248)
      %21 = cir.ptr_stride(%20 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc248)
      cir.store %16, %21 : !s8i, !cir.ptr<!s8i> loc(#loc346)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc249)
      cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc250)
      %23 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc251)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc252)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc252)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc251)
    } loc(#loc335)
    cir.return loc(#loc186)
  } loc(#loc321)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":27:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":51:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":29:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":29:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":30:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":31:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":37:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":32:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":33:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:16)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:22)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":35:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:14)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:18)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":36:19)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":38:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":50:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":39:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":39:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:16)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":40:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:19)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:26)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":41:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":46:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:14)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:25)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":44:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:29)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:18)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":45:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":43:34)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:22)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:17)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":47:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":48:19)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":48:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":49:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":49:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":116:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":120:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":118:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":118:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":119:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":119:14)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":137:15)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":139:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":142:15)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":144:15)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":132:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":147:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":133:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":135:27)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":135:22)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":135:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":137:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":138:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":138:67)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":139:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":142:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":143:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":143:66)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":144:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":146:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":146:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":66:19)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":58:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":87:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":60:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":60:12)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:20)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:31)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:42)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:43)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":61:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:33)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:17)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:23)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:30)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":62:29)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":73:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:8)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":63:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":64:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":67:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":69:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":66:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:22)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:30)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":71:31)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:22)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:17)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":72:18)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":74:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":86:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":75:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":75:25)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:16)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":76:19)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:19)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:26)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":77:30)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":82:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:18)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:14)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:21)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:25)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:23)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":80:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:23)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:28)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:18)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":81:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:35)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":79:34)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:22)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:14)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:17)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":83:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":84:19)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":84:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":85:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":85:14)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":90:1)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":114:1)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":92:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":92:12)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:27)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:31)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:42)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:43)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":93:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:33)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:17)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:23)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:30)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":94:29)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":100:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:8)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":95:27)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":96:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:16)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:22)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:27)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:30)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":98:31)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:22)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:14)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":99:18)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":101:5)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":113:5)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":102:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":102:25)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:9)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:16)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":103:19)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:19)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:26)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":104:30)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":109:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:18)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:14)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:21)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:25)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:23)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":107:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:23)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:28)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:29)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:18)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":108:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:35)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":106:34)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:22)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:14)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:17)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":110:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":111:19)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":111:9)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":112:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_06.c":112:14)
#loc253 = loc(fused[#loc1, #loc2])
#loc254 = loc(fused[#loc3, #loc4])
#loc255 = loc(fused[#loc5, #loc6])
#loc256 = loc(fused[#loc7, #loc8])
#loc257 = loc(fused[#loc9, #loc10])
#loc258 = loc(fused[#loc11, #loc12])
#loc259 = loc(fused[#loc13, #loc14])
#loc260 = loc(fused[#loc17, #loc18])
#loc261 = loc(fused[#loc16, #loc18])
#loc262 = loc(fused[#loc15, #loc19])
#loc263 = loc(fused[#loc20, #loc19])
#loc264 = loc(fused[#loc21, #loc22])
#loc265 = loc(fused[#loc23, #loc24])
#loc266 = loc(fused[#loc25, #loc22])
#loc267 = loc(fused[#loc29, #loc30])
#loc268 = loc(fused[#loc31, #loc32])
#loc269 = loc(fused[#loc33, #loc30])
#loc270 = loc(fused[#loc38, #loc39])
#loc271 = loc(fused[#loc41, #loc40])
#loc272 = loc(fused[#loc45, #loc46])
#loc273 = loc(fused[#loc47, #loc48])
#loc274 = loc(fused[#loc49, #loc50])
#loc275 = loc(fused[#loc49, #loc51])
#loc276 = loc(fused[#loc54, #loc55])
#loc277 = loc(fused[#loc56, #loc57])
#loc278 = loc(fused[#loc59, #loc58])
#loc279 = loc(fused[#loc60, #loc61])
#loc280 = loc(fused[#loc63, #loc57])
#loc281 = loc(fused[#loc68, #loc66])
#loc282 = loc(fused[#loc70, #loc69])
#loc283 = loc(fused[#loc74, #loc71])
#loc284 = loc(fused[#loc79, #loc80])
#loc285 = loc(fused[#loc81, #loc82])
#loc286 = loc(fused[#loc83, #loc84])
#loc287 = loc(fused[#loc85, #loc86])
#loc288 = loc(fused[#loc87, #loc88])
#loc289 = loc(fused[#loc93, #loc94])
#loc292 = loc(fused[#loc104, #loc105])
#loc293 = loc(fused[#loc108, #loc109])
#loc294 = loc(fused[#loc112, #loc111])
#loc295 = loc(fused[#loc114, #loc115])
#loc296 = loc(fused[#loc116, #loc117])
#loc297 = loc(fused[#loc120, #loc121])
#loc298 = loc(fused[#loc119, #loc121])
#loc299 = loc(fused[#loc118, #loc122])
#loc300 = loc(fused[#loc123, #loc122])
#loc301 = loc(fused[#loc124, #loc125])
#loc302 = loc(fused[#loc126, #loc127])
#loc303 = loc(fused[#loc128, #loc125])
#loc304 = loc(fused[#loc132, #loc133])
#loc305 = loc(fused[#loc134, #loc135])
#loc306 = loc(fused[#loc136, #loc137, #loc138, #loc133])
#loc307 = loc(fused[#loc144, #loc145])
#loc308 = loc(fused[#loc147, #loc146])
#loc309 = loc(fused[#loc151, #loc152])
#loc310 = loc(fused[#loc153, #loc154])
#loc311 = loc(fused[#loc155, #loc156])
#loc312 = loc(fused[#loc155, #loc157])
#loc313 = loc(fused[#loc160, #loc161])
#loc314 = loc(fused[#loc162, #loc163])
#loc315 = loc(fused[#loc165, #loc164])
#loc316 = loc(fused[#loc166, #loc167])
#loc317 = loc(fused[#loc169, #loc163])
#loc318 = loc(fused[#loc174, #loc172])
#loc319 = loc(fused[#loc176, #loc175])
#loc320 = loc(fused[#loc180, #loc177])
#loc321 = loc(fused[#loc185, #loc186])
#loc322 = loc(fused[#loc187, #loc188])
#loc323 = loc(fused[#loc191, #loc192])
#loc324 = loc(fused[#loc190, #loc192])
#loc325 = loc(fused[#loc189, #loc193])
#loc326 = loc(fused[#loc194, #loc193])
#loc327 = loc(fused[#loc195, #loc196])
#loc328 = loc(fused[#loc197, #loc198])
#loc329 = loc(fused[#loc199, #loc196])
#loc330 = loc(fused[#loc203, #loc204])
#loc331 = loc(fused[#loc205, #loc206])
#loc332 = loc(fused[#loc207, #loc204])
#loc333 = loc(fused[#loc212, #loc213])
#loc334 = loc(fused[#loc215, #loc214])
#loc335 = loc(fused[#loc219, #loc220])
#loc336 = loc(fused[#loc221, #loc222])
#loc337 = loc(fused[#loc223, #loc224])
#loc338 = loc(fused[#loc223, #loc225])
#loc339 = loc(fused[#loc228, #loc229])
#loc340 = loc(fused[#loc230, #loc231])
#loc341 = loc(fused[#loc233, #loc232])
#loc342 = loc(fused[#loc234, #loc235])
#loc343 = loc(fused[#loc237, #loc231])
#loc344 = loc(fused[#loc242, #loc240])
#loc345 = loc(fused[#loc244, #loc243])
#loc346 = loc(fused[#loc248, #loc245])
