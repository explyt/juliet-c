!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE190_Integer_Overflow__int_max_add_07.c":172:10)
#loc53 = loc("CWE190_Integer_Overflow__int_max_add_07.c":172:14)
#loc54 = loc("CWE190_Integer_Overflow__int_max_add_07.c":172:20)
#loc55 = loc("CWE190_Integer_Overflow__int_max_add_07.c":172:32)
#loc215 = loc(fused[#loc52, #loc53])
#loc216 = loc(fused[#loc54, #loc55])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc192)
  cir.func private @printIntLine(!s32i) loc(#loc193)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_07_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb1 loc(#loc198)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc199)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc18)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc202)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc23)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc203)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc204)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc205)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc27)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc26)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc21)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_add_07_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc208)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc206)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc211)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc212)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc213)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc216)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_add_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call @CWE190_Integer_Overflow__int_max_add_07_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_add_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call @CWE190_Integer_Overflow__int_max_add_07_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc219)
    cir.return %17 : !s32i loc(#loc219)
  } loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc71)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb1 loc(#loc224)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc225)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc226)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.br ^bb3 loc(#loc81)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc228)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc90)
    %11 = cir.cmp(ne, %9, %10) : !s32i, !cir.bool loc(#loc229)
    cir.brcond %11 ^bb6, ^bb7 loc(#loc230)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb13 loc(#loc92)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc231)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc232)
    cir.brcond %16 ^bb9, ^bb10 loc(#loc233)
  ^bb9:  // pred: ^bb8
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %19 = cir.binop(add, %17, %18) nsw : !s32i loc(#loc102)
    cir.store %19, %0 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc104)
    cir.br ^bb11 loc(#loc100)
  ^bb10:  // pred: ^bb8
    %21 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc71)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    cir.br ^bb11 loc(#loc96)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc96)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc88)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc73)
  } loc(#loc220)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb1 loc(#loc238)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc117)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc239)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc240)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc242)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc124)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc243)
    cir.brcond %11 ^bb6, ^bb12 loc(#loc244)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc245)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc129)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc246)
    cir.brcond %14 ^bb8, ^bb9 loc(#loc247)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %17 = cir.binop(add, %15, %16) nsw : !s32i loc(#loc133)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc135)
    cir.br ^bb10 loc(#loc131)
  ^bb9:  // pred: ^bb7
    %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc136)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc136)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.br ^bb10 loc(#loc127)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc127)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc122)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc122)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc107)
  } loc(#loc234)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc250)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    cir.br ^bb1 loc(#loc252)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc149)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc253)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc254)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    cir.br ^bb4 loc(#loc151)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc155)
    cir.store %9, %1 : !s32i, !cir.ptr<!s32i> loc(#loc255)
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc147)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc256)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc160)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc257)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc258)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc259)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc141)
    %16 = cir.binop(add, %14, %15) nsw : !s32i loc(#loc164)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc166)
    cir.br ^bb9 loc(#loc163)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc158)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc158)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc139)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc262)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc173)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.br ^bb1 loc(#loc264)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc178)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc265)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc266)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc180)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc267)
    cir.br ^bb3 loc(#loc176)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc268)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc192)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc185)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc269)
    cir.brcond %11 ^bb6, ^bb9 loc(#loc270)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc271)
  ^bb7:  // pred: ^bb6
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc189)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc191)
    cir.br ^bb8 loc(#loc188)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc183)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc183)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc168)
  } loc(#loc260)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_add_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_add_07.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_add_07.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_add_07.c":27:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_add_07.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:13)
#loc8 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:33)
#loc9 = loc("CWE190_Integer_Overflow__int_max_add_07.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_add_07.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int_max_add_07.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int_max_add_07.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_add_07.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__int_max_add_07.c":32:20)
#loc17 = loc("CWE190_Integer_Overflow__int_max_add_07.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_add_07.c":35:16)
#loc19 = loc("CWE190_Integer_Overflow__int_max_add_07.c":35:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_add_07.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:8)
#loc23 = loc("CWE190_Integer_Overflow__int_max_add_07.c":37:20)
#loc24 = loc("CWE190_Integer_Overflow__int_max_add_07.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_add_07.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__int_max_add_07.c":43:9)
#loc27 = loc("CWE190_Integer_Overflow__int_max_add_07.c":41:26)
#loc28 = loc("CWE190_Integer_Overflow__int_max_add_07.c":42:26)
#loc29 = loc("CWE190_Integer_Overflow__int_max_add_07.c":42:13)
#loc30 = loc("CWE190_Integer_Overflow__int_max_add_07.c":155:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_add_07.c":161:1)
#loc32 = loc("CWE190_Integer_Overflow__int_max_add_07.c":157:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_add_07.c":157:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_add_07.c":158:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_add_07.c":158:14)
#loc36 = loc("CWE190_Integer_Overflow__int_max_add_07.c":159:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_add_07.c":159:14)
#loc38 = loc("CWE190_Integer_Overflow__int_max_add_07.c":160:5)
#loc39 = loc("CWE190_Integer_Overflow__int_max_add_07.c":160:14)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__int_max_add_07.c":177:15)
#loc47 = loc("CWE190_Integer_Overflow__int_max_add_07.c":179:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_add_07.c":182:15)
#loc49 = loc("CWE190_Integer_Overflow__int_max_add_07.c":184:15)
#loc50 = loc("CWE190_Integer_Overflow__int_max_add_07.c":172:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_add_07.c":187:1)
#loc56 = loc("CWE190_Integer_Overflow__int_max_add_07.c":173:1)
#loc57 = loc("CWE190_Integer_Overflow__int_max_add_07.c":175:27)
#loc58 = loc("CWE190_Integer_Overflow__int_max_add_07.c":175:22)
#loc59 = loc("CWE190_Integer_Overflow__int_max_add_07.c":175:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_add_07.c":177:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_add_07.c":178:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_add_07.c":178:50)
#loc63 = loc("CWE190_Integer_Overflow__int_max_add_07.c":179:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_add_07.c":182:5)
#loc65 = loc("CWE190_Integer_Overflow__int_max_add_07.c":183:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_add_07.c":183:49)
#loc67 = loc("CWE190_Integer_Overflow__int_max_add_07.c":184:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_add_07.c":186:12)
#loc69 = loc("CWE190_Integer_Overflow__int_max_add_07.c":186:5)
#loc70 = loc("CWE190_Integer_Overflow__int_max_add_07.c":65:19)
#loc71 = loc("CWE190_Integer_Overflow__int_max_add_07.c":77:23)
#loc72 = loc("CWE190_Integer_Overflow__int_max_add_07.c":52:1)
#loc73 = loc("CWE190_Integer_Overflow__int_max_add_07.c":80:1)
#loc74 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:13)
#loc75 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:33)
#loc76 = loc("CWE190_Integer_Overflow__int_max_add_07.c":54:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_add_07.c":54:9)
#loc78 = loc("CWE190_Integer_Overflow__int_max_add_07.c":56:12)
#loc79 = loc("CWE190_Integer_Overflow__int_max_add_07.c":56:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_add_07.c":61:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:8)
#loc83 = loc("CWE190_Integer_Overflow__int_max_add_07.c":57:20)
#loc84 = loc("CWE190_Integer_Overflow__int_max_add_07.c":58:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_add_07.c":60:16)
#loc86 = loc("CWE190_Integer_Overflow__int_max_add_07.c":60:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_add_07.c":79:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:8)
#loc90 = loc("CWE190_Integer_Overflow__int_max_add_07.c":62:20)
#loc91 = loc("CWE190_Integer_Overflow__int_max_add_07.c":63:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_add_07.c":66:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_add_07.c":68:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_add_07.c":65:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:9)
#loc96 = loc("CWE190_Integer_Overflow__int_max_add_07.c":78:9)
#loc97 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:13)
#loc98 = loc("CWE190_Integer_Overflow__int_max_add_07.c":70:20)
#loc99 = loc("CWE190_Integer_Overflow__int_max_add_07.c":71:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_add_07.c":74:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_add_07.c":76:9)
#loc102 = loc("CWE190_Integer_Overflow__int_max_add_07.c":72:26)
#loc103 = loc("CWE190_Integer_Overflow__int_max_add_07.c":73:26)
#loc104 = loc("CWE190_Integer_Overflow__int_max_add_07.c":73:13)
#loc105 = loc("CWE190_Integer_Overflow__int_max_add_07.c":77:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_add_07.c":83:1)
#loc107 = loc("CWE190_Integer_Overflow__int_max_add_07.c":106:1)
#loc108 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:13)
#loc109 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:33)
#loc110 = loc("CWE190_Integer_Overflow__int_max_add_07.c":85:5)
#loc111 = loc("CWE190_Integer_Overflow__int_max_add_07.c":85:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_add_07.c":87:12)
#loc113 = loc("CWE190_Integer_Overflow__int_max_add_07.c":87:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_add_07.c":92:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:8)
#loc117 = loc("CWE190_Integer_Overflow__int_max_add_07.c":88:20)
#loc118 = loc("CWE190_Integer_Overflow__int_max_add_07.c":89:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_add_07.c":91:16)
#loc120 = loc("CWE190_Integer_Overflow__int_max_add_07.c":91:9)
#loc121 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:5)
#loc122 = loc("CWE190_Integer_Overflow__int_max_add_07.c":105:5)
#loc123 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:8)
#loc124 = loc("CWE190_Integer_Overflow__int_max_add_07.c":93:20)
#loc125 = loc("CWE190_Integer_Overflow__int_max_add_07.c":94:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:9)
#loc127 = loc("CWE190_Integer_Overflow__int_max_add_07.c":104:9)
#loc128 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:13)
#loc129 = loc("CWE190_Integer_Overflow__int_max_add_07.c":96:20)
#loc130 = loc("CWE190_Integer_Overflow__int_max_add_07.c":97:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_add_07.c":100:9)
#loc132 = loc("CWE190_Integer_Overflow__int_max_add_07.c":102:9)
#loc133 = loc("CWE190_Integer_Overflow__int_max_add_07.c":98:26)
#loc134 = loc("CWE190_Integer_Overflow__int_max_add_07.c":99:26)
#loc135 = loc("CWE190_Integer_Overflow__int_max_add_07.c":99:13)
#loc136 = loc("CWE190_Integer_Overflow__int_max_add_07.c":103:23)
#loc137 = loc("CWE190_Integer_Overflow__int_max_add_07.c":103:13)
#loc138 = loc("CWE190_Integer_Overflow__int_max_add_07.c":109:1)
#loc139 = loc("CWE190_Integer_Overflow__int_max_add_07.c":132:1)
#loc140 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:13)
#loc141 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:33)
#loc142 = loc("CWE190_Integer_Overflow__int_max_add_07.c":111:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_add_07.c":111:9)
#loc144 = loc("CWE190_Integer_Overflow__int_max_add_07.c":113:12)
#loc145 = loc("CWE190_Integer_Overflow__int_max_add_07.c":113:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_add_07.c":123:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:8)
#loc149 = loc("CWE190_Integer_Overflow__int_max_add_07.c":114:20)
#loc150 = loc("CWE190_Integer_Overflow__int_max_add_07.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_add_07.c":118:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_add_07.c":120:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_add_07.c":117:19)
#loc154 = loc("CWE190_Integer_Overflow__int_max_add_07.c":117:9)
#loc155 = loc("CWE190_Integer_Overflow__int_max_add_07.c":122:16)
#loc156 = loc("CWE190_Integer_Overflow__int_max_add_07.c":122:9)
#loc157 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:5)
#loc158 = loc("CWE190_Integer_Overflow__int_max_add_07.c":131:5)
#loc159 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:8)
#loc160 = loc("CWE190_Integer_Overflow__int_max_add_07.c":124:20)
#loc161 = loc("CWE190_Integer_Overflow__int_max_add_07.c":125:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_add_07.c":126:9)
#loc163 = loc("CWE190_Integer_Overflow__int_max_add_07.c":130:9)
#loc164 = loc("CWE190_Integer_Overflow__int_max_add_07.c":128:26)
#loc165 = loc("CWE190_Integer_Overflow__int_max_add_07.c":129:26)
#loc166 = loc("CWE190_Integer_Overflow__int_max_add_07.c":129:13)
#loc167 = loc("CWE190_Integer_Overflow__int_max_add_07.c":135:1)
#loc168 = loc("CWE190_Integer_Overflow__int_max_add_07.c":153:1)
#loc169 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:13)
#loc170 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:33)
#loc171 = loc("CWE190_Integer_Overflow__int_max_add_07.c":137:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_add_07.c":137:9)
#loc173 = loc("CWE190_Integer_Overflow__int_max_add_07.c":139:12)
#loc174 = loc("CWE190_Integer_Overflow__int_max_add_07.c":139:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:5)
#loc176 = loc("CWE190_Integer_Overflow__int_max_add_07.c":144:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:8)
#loc178 = loc("CWE190_Integer_Overflow__int_max_add_07.c":140:20)
#loc179 = loc("CWE190_Integer_Overflow__int_max_add_07.c":141:5)
#loc180 = loc("CWE190_Integer_Overflow__int_max_add_07.c":143:16)
#loc181 = loc("CWE190_Integer_Overflow__int_max_add_07.c":143:9)
#loc182 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:5)
#loc183 = loc("CWE190_Integer_Overflow__int_max_add_07.c":152:5)
#loc184 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:8)
#loc185 = loc("CWE190_Integer_Overflow__int_max_add_07.c":145:20)
#loc186 = loc("CWE190_Integer_Overflow__int_max_add_07.c":146:5)
#loc187 = loc("CWE190_Integer_Overflow__int_max_add_07.c":147:9)
#loc188 = loc("CWE190_Integer_Overflow__int_max_add_07.c":151:9)
#loc189 = loc("CWE190_Integer_Overflow__int_max_add_07.c":149:26)
#loc190 = loc("CWE190_Integer_Overflow__int_max_add_07.c":150:26)
#loc191 = loc("CWE190_Integer_Overflow__int_max_add_07.c":150:13)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc195 = loc(fused[#loc7, #loc8])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc12, #loc11])
#loc198 = loc(fused[#loc13, #loc14])
#loc199 = loc(fused[#loc15, #loc16])
#loc200 = loc(fused[#loc17, #loc14])
#loc201 = loc(fused[#loc19, #loc18])
#loc202 = loc(fused[#loc20, #loc21])
#loc203 = loc(fused[#loc22, #loc23])
#loc204 = loc(fused[#loc24, #loc21])
#loc205 = loc(fused[#loc25, #loc26])
#loc206 = loc(fused[#loc30, #loc31])
#loc207 = loc(fused[#loc32, #loc33])
#loc208 = loc(fused[#loc34, #loc35])
#loc209 = loc(fused[#loc36, #loc37])
#loc210 = loc(fused[#loc38, #loc39])
#loc211 = loc(fused[#loc40, #loc41])
#loc212 = loc(fused[#loc42, #loc43])
#loc213 = loc(fused[#loc44, #loc45])
#loc214 = loc(fused[#loc50, #loc51])
#loc217 = loc(fused[#loc61, #loc62])
#loc218 = loc(fused[#loc65, #loc66])
#loc219 = loc(fused[#loc69, #loc68])
#loc220 = loc(fused[#loc72, #loc73])
#loc221 = loc(fused[#loc74, #loc75])
#loc222 = loc(fused[#loc76, #loc77])
#loc223 = loc(fused[#loc79, #loc78])
#loc224 = loc(fused[#loc80, #loc81])
#loc225 = loc(fused[#loc82, #loc83])
#loc226 = loc(fused[#loc84, #loc81])
#loc227 = loc(fused[#loc86, #loc85])
#loc228 = loc(fused[#loc87, #loc88])
#loc229 = loc(fused[#loc89, #loc90])
#loc230 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc231 = loc(fused[#loc95, #loc96])
#loc232 = loc(fused[#loc97, #loc98])
#loc233 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc234 = loc(fused[#loc106, #loc107])
#loc235 = loc(fused[#loc108, #loc109])
#loc236 = loc(fused[#loc110, #loc111])
#loc237 = loc(fused[#loc113, #loc112])
#loc238 = loc(fused[#loc114, #loc115])
#loc239 = loc(fused[#loc116, #loc117])
#loc240 = loc(fused[#loc118, #loc115])
#loc241 = loc(fused[#loc120, #loc119])
#loc242 = loc(fused[#loc121, #loc122])
#loc243 = loc(fused[#loc123, #loc124])
#loc244 = loc(fused[#loc125, #loc122])
#loc245 = loc(fused[#loc126, #loc127])
#loc246 = loc(fused[#loc128, #loc129])
#loc247 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc248 = loc(fused[#loc138, #loc139])
#loc249 = loc(fused[#loc140, #loc141])
#loc250 = loc(fused[#loc142, #loc143])
#loc251 = loc(fused[#loc145, #loc144])
#loc252 = loc(fused[#loc146, #loc147])
#loc253 = loc(fused[#loc148, #loc149])
#loc254 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc255 = loc(fused[#loc156, #loc155])
#loc256 = loc(fused[#loc157, #loc158])
#loc257 = loc(fused[#loc159, #loc160])
#loc258 = loc(fused[#loc161, #loc158])
#loc259 = loc(fused[#loc162, #loc163])
#loc260 = loc(fused[#loc167, #loc168])
#loc261 = loc(fused[#loc169, #loc170])
#loc262 = loc(fused[#loc171, #loc172])
#loc263 = loc(fused[#loc174, #loc173])
#loc264 = loc(fused[#loc175, #loc176])
#loc265 = loc(fused[#loc177, #loc178])
#loc266 = loc(fused[#loc179, #loc176])
#loc267 = loc(fused[#loc181, #loc180])
#loc268 = loc(fused[#loc182, #loc183])
#loc269 = loc(fused[#loc184, #loc185])
#loc270 = loc(fused[#loc186, #loc183])
#loc271 = loc(fused[#loc187, #loc188])
