!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":23:21)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":23:28)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":54:25)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":54:32)
#loc135 = loc(fused[#loc9, #loc10])
#loc159 = loc(fused[#loc75, #loc76])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc131)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc133)
  cir.func internal private @badSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc136)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc135)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc13)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc136)
    cir.store %2, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc136)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc16)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc17)
    %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc18)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc18)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc138)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc139)
    cir.libc.memcpy %11 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc140)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc24)
    %14 = cir.const #cir.int<50> : !s32i loc(#loc25)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc25)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc27)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc29)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc30)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc31)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc8)
  } loc(#loc134)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc143)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc41)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc146)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc42)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc43)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc43)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc147)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc148)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc42)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc51)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc152)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc153)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc53)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc55)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc53)
    cir.br ^bb3 loc(#loc49)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc49)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc57)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc58)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc58)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc154)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc62)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc64)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc64)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc66)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc155)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc67)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    cir.call %31(%32) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc67)
    cir.return loc(#loc37)
  } loc(#loc144)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc156)
  cir.func internal private @goodG2BSink(%arg0: !cir.ptr<!s8i> loc(fused[#loc75, #loc76])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc160)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc159)
    cir.store %arg0, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc79)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc160)
    cir.store %2, %0 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc160)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc82)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc82)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc83)
    %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc84)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc84)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc162)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc163)
    cir.libc.memcpy %11 bytes from %6 to %4 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc164)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc90)
    %14 = cir.const #cir.int<50> : !s32i loc(#loc91)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc91)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc93)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc93)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc165)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %20 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc96)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc97)
    cir.call @free(%22) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc96)
    cir.br ^bb2 loc(#loc81)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc74)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.alloca !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc168)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc103)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>> loc(#loc168)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc104)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc105)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc105)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc169)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc170)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc104)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc171)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc113)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc113)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc174)
    cir.brcond %13 ^bb2, ^bb3 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc115)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc117)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc115)
    cir.br ^bb3 loc(#loc111)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc111)
  ^bb4:  // pred: ^bb3
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc118)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc118)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc119)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc120)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc121)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc120)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc120)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc176)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc124)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc124)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc126)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc126)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc128)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc177)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>>, !cir.ptr<!cir.func<(!cir.ptr<!s8i>)>> loc(#loc129)
    %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    cir.call %31(%32) : (!cir.ptr<!cir.func<(!cir.ptr<!s8i>)>>, !cir.ptr<!s8i>) -> () loc(#loc129)
    cir.return loc(#loc99)
  } loc(#loc166)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("/usr/include/stdlib.h":687:1)
#loc6 = loc("/usr/include/stdlib.h":687:32)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":23:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":26:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":26:25)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":32:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:16)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:22)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:28)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:35)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:41)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:52)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":28:53)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":29:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":29:14)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":29:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":30:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":30:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":31:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":31:14)
#loc32 = loc("/usr/include/stdlib.h":672:1)
#loc33 = loc("/usr/include/stdlib.h":672:45)
#loc34 = loc("/usr/include/stdlib.h":756:1)
#loc35 = loc("/usr/include/stdlib.h":756:70)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":35:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":47:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":37:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":37:12)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":39:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":39:32)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:20)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:42)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:43)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":40:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:17)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:23)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:24)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":41:29)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:18)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:27)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":43:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":44:19)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":44:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":44:10)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":44:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":44:15)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":46:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":46:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":78:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":81:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":80:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":80:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":54:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":64:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":57:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":57:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":55:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":56:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":63:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:16)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:35)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:41)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:52)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:9)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":59:53)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":60:22)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":60:14)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":60:17)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":60:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":61:19)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":61:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":62:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":62:14)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":66:1)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":76:1)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":68:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":68:12)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":69:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":69:32)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:20)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:42)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:43)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":70:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:33)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:23)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:24)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:30)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":71:29)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:12)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:18)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:23)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:26)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":73:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":74:18)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":74:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":74:10)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":74:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":74:14)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":75:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memcpy_44.c":75:13)
#loc131 = loc(fused[#loc1, #loc2])
#loc132 = loc(fused[#loc3, #loc4])
#loc133 = loc(fused[#loc5, #loc6])
#loc134 = loc(fused[#loc7, #loc8])
#loc136 = loc(fused[#loc11, #loc12])
#loc137 = loc(fused[#loc14, #loc15])
#loc138 = loc(fused[#loc20, #loc21])
#loc139 = loc(fused[#loc18, #loc21])
#loc140 = loc(fused[#loc22, #loc23])
#loc141 = loc(fused[#loc27, #loc24])
#loc142 = loc(fused[#loc32, #loc33])
#loc143 = loc(fused[#loc34, #loc35])
#loc144 = loc(fused[#loc36, #loc37])
#loc145 = loc(fused[#loc38, #loc39])
#loc146 = loc(fused[#loc40, #loc41])
#loc147 = loc(fused[#loc44, #loc45])
#loc148 = loc(fused[#loc43, #loc45])
#loc149 = loc(fused[#loc42, #loc46])
#loc150 = loc(fused[#loc47, #loc46])
#loc151 = loc(fused[#loc48, #loc49])
#loc152 = loc(fused[#loc50, #loc51])
#loc153 = loc(fused[#loc52, #loc49])
#loc154 = loc(fused[#loc60, #loc61])
#loc155 = loc(fused[#loc63, #loc62])
#loc156 = loc(fused[#loc69, #loc70])
#loc157 = loc(fused[#loc71, #loc72])
#loc158 = loc(fused[#loc73, #loc74])
#loc160 = loc(fused[#loc77, #loc78])
#loc161 = loc(fused[#loc80, #loc81])
#loc162 = loc(fused[#loc86, #loc87])
#loc163 = loc(fused[#loc84, #loc87])
#loc164 = loc(fused[#loc88, #loc89])
#loc165 = loc(fused[#loc93, #loc90])
#loc166 = loc(fused[#loc98, #loc99])
#loc167 = loc(fused[#loc100, #loc101])
#loc168 = loc(fused[#loc102, #loc103])
#loc169 = loc(fused[#loc106, #loc107])
#loc170 = loc(fused[#loc105, #loc107])
#loc171 = loc(fused[#loc104, #loc108])
#loc172 = loc(fused[#loc109, #loc108])
#loc173 = loc(fused[#loc110, #loc111])
#loc174 = loc(fused[#loc112, #loc113])
#loc175 = loc(fused[#loc114, #loc111])
#loc176 = loc(fused[#loc122, #loc123])
#loc177 = loc(fused[#loc125, #loc124])
