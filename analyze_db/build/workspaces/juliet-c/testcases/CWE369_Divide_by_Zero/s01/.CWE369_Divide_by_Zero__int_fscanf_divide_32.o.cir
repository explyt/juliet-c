!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc113)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc115)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc118)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc119)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc118)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc119)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc122)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc24)
      %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc114)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
      %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
      %13 = cir.call @__isoc99_fscanf(%10, %12, %5) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc24)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    } loc(#loc121)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc125)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc34)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc126)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc36)
    } loc(#loc124)
    cir.return loc(#loc9)
  } loc(#loc116)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc128)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc129)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc132)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc133)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc52)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc136)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc136)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc59)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc137)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    } loc(#loc135)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc140)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc67)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc68)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc140)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc69)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc141)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc71)
    } loc(#loc139)
    cir.return loc(#loc44)
  } loc(#loc130)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc84)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc90)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc149)
      %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc91)
      %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc114)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc92)
      %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc93)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc93)
      %13 = cir.call @__isoc99_fscanf(%10, %12, %5) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc91)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    } loc(#loc148)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc152)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc152)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc105)
        %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc154)
        cir.if %10 {
          %11 = cir.const #cir.int<100> : !s32i loc(#loc109)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %13 = cir.binop(div, %11, %12) : !s32i loc(#loc156)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc111)
        } else {
          %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc74)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc74)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc112)
        } loc(#loc155)
      } loc(#loc153)
    } loc(#loc151)
    cir.return loc(#loc76)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":40:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":25:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":25:22)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":26:22)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":34:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:21)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:20)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:16)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:21)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:10)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":35:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":39:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:21)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:20)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:22)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:28)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":95:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":99:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":97:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":97:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":98:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":98:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":47:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":65:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":49:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":49:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":50:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":50:22)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":51:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":51:22)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:13)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:12)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":54:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":59:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:20)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":57:16)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":57:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:21)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:10)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":60:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":64:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:21)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:20)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:22)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:28)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:9)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":90:23)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":68:1)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":93:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":70:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":70:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":71:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":71:22)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":72:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":72:22)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":75:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":80:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:21)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:20)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:16)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:23)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:21)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:10)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":81:5)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":92:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:21)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:20)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":91:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":85:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":87:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":89:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:26)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:32)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":90:13)
#loc113 = loc(fused[#loc1, #loc2])
#loc114 = loc(fused[#loc3, #loc4])
#loc115 = loc(fused[#loc6, #loc7])
#loc116 = loc(fused[#loc8, #loc9])
#loc117 = loc(fused[#loc10, #loc11])
#loc118 = loc(fused[#loc12, #loc13])
#loc119 = loc(fused[#loc14, #loc15])
#loc120 = loc(fused[#loc18, #loc16])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc21, #loc22])
#loc123 = loc(fused[#loc28, #loc26])
#loc124 = loc(fused[#loc29, #loc30])
#loc125 = loc(fused[#loc31, #loc32])
#loc126 = loc(fused[#loc34, #loc35])
#loc127 = loc(fused[#loc37, #loc38])
#loc128 = loc(fused[#loc39, #loc40])
#loc129 = loc(fused[#loc41, #loc42])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc45, #loc46])
#loc132 = loc(fused[#loc47, #loc48])
#loc133 = loc(fused[#loc49, #loc50])
#loc134 = loc(fused[#loc53, #loc51])
#loc135 = loc(fused[#loc54, #loc55])
#loc136 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc60, #loc59])
#loc138 = loc(fused[#loc63, #loc61])
#loc139 = loc(fused[#loc64, #loc65])
#loc140 = loc(fused[#loc66, #loc67])
#loc141 = loc(fused[#loc69, #loc70])
#loc142 = loc(fused[#loc72, #loc73])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc77, #loc78])
#loc145 = loc(fused[#loc79, #loc80])
#loc146 = loc(fused[#loc81, #loc82])
#loc147 = loc(fused[#loc85, #loc83])
#loc148 = loc(fused[#loc86, #loc87])
#loc149 = loc(fused[#loc88, #loc89])
#loc150 = loc(fused[#loc96, #loc94])
#loc151 = loc(fused[#loc97, #loc98])
#loc152 = loc(fused[#loc99, #loc100])
#loc153 = loc(fused[#loc102, #loc103])
#loc154 = loc(fused[#loc104, #loc105])
#loc155 = loc(fused[#loc106, #loc107, #loc108, #loc103])
#loc156 = loc(fused[#loc109, #loc110])
