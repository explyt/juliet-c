!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printIntLine(!s32i) loc(#loc81)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc84)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc85)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc10)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc10)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc86)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc85)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc12)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc12)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc12)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %17, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc86)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc89)
        cir.condition(%21) loc(#loc19)
      } body {
        cir.scope {
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
          cir.store %19, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc91)
        } loc(#loc90)
        cir.yield loc(#loc14)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc24)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
        cir.yield loc(#loc87)
      } loc(#loc87)
    } loc(#loc87)
    cir.scope {
      %18 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc94)
      %19 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc94)
      cir.store %19, %18 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc94)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc29)
      %22 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc30)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc30)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc31)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc31)
      %26 = cir.const #cir.int<4> : !u64i loc(#loc95)
      %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc96)
      cir.libc.memmove %27 bytes from %23 to %21 : !cir.ptr<!void>, !u64i loc(#loc97)
      %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
      %29 = cir.const #cir.int<0> : !s32i loc(#loc37)
      %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc38)
      %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc36)
      cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc39)
    } loc(#loc93)
    cir.return loc(#loc4)
  } loc(#loc82)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc99)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    cir.return loc(#loc41)
  } loc(#loc98)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc103)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc51)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc51)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc51)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc51)
    %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc104)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc51)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc51)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc103)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc53)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc53)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc53)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc53)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc53)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc53)
    cir.store %17, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc104)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc56)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc107)
        cir.condition(%21) loc(#loc60)
      } body {
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc109)
        } loc(#loc108)
        cir.yield loc(#loc55)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
        %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc65)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
        cir.yield loc(#loc105)
      } loc(#loc105)
    } loc(#loc105)
    cir.scope {
      %18 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc112)
      %19 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc112)
      cir.store %19, %18 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc112)
      %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc70)
      %22 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc71)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc71)
      %24 = cir.const #cir.int<100> : !s32i loc(#loc72)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc72)
      %26 = cir.const #cir.int<4> : !u64i loc(#loc113)
      %27 = cir.binop(mul, %25, %26) : !u64i loc(#loc114)
      cir.libc.memmove %27 bytes from %23 to %21 : !cir.ptr<!void>, !u64i loc(#loc115)
      %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
      %29 = cir.const #cir.int<0> : !s32i loc(#loc78)
      %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc79)
      %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc80)
    } loc(#loc111)
    cir.return loc(#loc45)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":39:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":23:9)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":24:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":25:34)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":26:35)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:20)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":28:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":31:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:24)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":27:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":33:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":38:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":34:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":34:29)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:17)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:23)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:31)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:35)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:45)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":36:46)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":37:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":37:27)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":37:28)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":37:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":65:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":68:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":67:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":67:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":46:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":63:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":48:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":48:9)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":49:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":49:11)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":50:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":50:34)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":51:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":51:35)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:5)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":56:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:16)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:20)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:18)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":53:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":55:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":55:9)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:24)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":52:23)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":57:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":62:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":58:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":58:29)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:17)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:23)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:31)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:35)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:45)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":60:46)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":61:22)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":61:27)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":61:28)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_memmove_17.c":61:9)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc9, #loc10])
#loc86 = loc(fused[#loc11, #loc12])
#loc87 = loc(fused[#loc13, #loc14])
#loc88 = loc(fused[#loc16, #loc15])
#loc89 = loc(fused[#loc17, #loc18])
#loc90 = loc(fused[#loc20, #loc14])
#loc91 = loc(fused[#loc22, #loc21])
#loc92 = loc(fused[#loc24, #loc23])
#loc93 = loc(fused[#loc25, #loc26])
#loc94 = loc(fused[#loc27, #loc28])
#loc95 = loc(fused[#loc32, #loc33])
#loc96 = loc(fused[#loc31, #loc33])
#loc97 = loc(fused[#loc34, #loc35])
#loc98 = loc(fused[#loc40, #loc41])
#loc99 = loc(fused[#loc42, #loc43])
#loc100 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc46, #loc47])
#loc102 = loc(fused[#loc48, #loc49])
#loc103 = loc(fused[#loc50, #loc51])
#loc104 = loc(fused[#loc52, #loc53])
#loc105 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc57, #loc56])
#loc107 = loc(fused[#loc58, #loc59])
#loc108 = loc(fused[#loc61, #loc55])
#loc109 = loc(fused[#loc63, #loc62])
#loc110 = loc(fused[#loc65, #loc64])
#loc111 = loc(fused[#loc66, #loc67])
#loc112 = loc(fused[#loc68, #loc69])
#loc113 = loc(fused[#loc73, #loc74])
#loc114 = loc(fused[#loc72, #loc74])
#loc115 = loc(fused[#loc75, #loc76])
