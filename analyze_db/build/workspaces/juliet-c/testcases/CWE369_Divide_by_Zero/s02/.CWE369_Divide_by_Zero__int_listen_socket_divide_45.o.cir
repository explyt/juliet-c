!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc328)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc329)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc330)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc331)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc332)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc333)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc334)
  cir.func private @close(!s32i) -> !s32i loc(#loc335)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc336)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc338)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc339)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc341)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc342)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc343)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc344)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc345)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc33)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc343)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc35)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc35)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc344)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc42)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc44)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc348)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc50)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc51)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc51)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc350)
              cir.if %63 {
                cir.break loc(#loc53)
              } loc(#loc351)
            } loc(#loc349)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc352)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc56)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc353)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc354)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc61)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc61)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc355)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc64)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc64)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc356)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc68)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc68)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc69)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc357)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc359)
              %62 = cir.const #cir.int<16> : !u64i loc(#loc360)
              %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc360)
              %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc81)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc361)
              cir.if %67 {
                cir.break loc(#loc83)
              } loc(#loc362)
            } loc(#loc358)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %61 = cir.const #cir.int<5> : !s32i loc(#loc87)
              %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc89)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc89)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc364)
              cir.if %65 {
                cir.break loc(#loc91)
              } loc(#loc365)
            } loc(#loc363)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc366)
            cir.scope {
              %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc101)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc368)
              cir.if %63 {
                cir.break loc(#loc103)
              } loc(#loc369)
            } loc(#loc367)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc106)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc106)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc106)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc106)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc106)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc106)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc106)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc107)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc370)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc108)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc109)
            cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.scope {
              %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc115)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc115)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc373)
              %64 = cir.ternary(%63, true {
                %65 = cir.const #true loc(#loc116)
                cir.yield %65 : !cir.bool loc(#loc116)
              }, false {
                %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc118)
                %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc374)
                %68 = cir.ternary(%67, true {
                  %69 = cir.const #true loc(#loc116)
                  cir.yield %69 : !cir.bool loc(#loc116)
                }, false {
                  %69 = cir.const #false loc(#loc116)
                  cir.yield %69 : !cir.bool loc(#loc116)
                }) : (!cir.bool) -> !cir.bool loc(#loc116)
                cir.yield %68 : !cir.bool loc(#loc116)
              }) : (!cir.bool) -> !cir.bool loc(#loc116)
              cir.if %64 {
                cir.break loc(#loc120)
              } loc(#loc375)
            } loc(#loc372)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc121)
            %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc121)
            %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
            %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc123)
            cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc376)
            %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
            %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc125)
            cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc377)
          } loc(#loc347)
          cir.yield loc(#loc39)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc128)
          cir.condition(%16) loc(#loc128)
        } loc(#loc346)
      } loc(#loc346)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc132)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc379)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc134)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc135)
        } loc(#loc380)
      } loc(#loc378)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc139)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc382)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc141)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc142)
        } loc(#loc383)
      } loc(#loc381)
    } loc(#loc340)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    %4 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData : !cir.ptr<!s32i> loc(#loc336)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc384)
    %5 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc385)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc145)
    cir.return loc(#loc20)
  } loc(#loc337)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_divide_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc387)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc149)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc388)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc151)
    cir.return loc(#loc148)
  } loc(#loc386)
  cir.func private @printIntLine(!s32i) loc(#loc389)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc391)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_badData : !cir.ptr<!s32i> loc(#loc336)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc391)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc159)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc392)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc161)
    cir.return loc(#loc156)
  } loc(#loc390)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc393)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc395)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc168)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc169)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc396)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc171)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
    %5 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData : !cir.ptr<!s32i> loc(#loc393)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc398)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc399)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc175)
    cir.return loc(#loc165)
  } loc(#loc394)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc401)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodG2BData : !cir.ptr<!s32i> loc(#loc393)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc181)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc402)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc183)
    cir.return loc(#loc178)
  } loc(#loc400)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc403)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc405)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc190)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc191)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc406)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc408)
      %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc409)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc410)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc411)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc412)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc200)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc200)
      cir.store %12, %8 : !s32i, !cir.ptr<!s32i> loc(#loc410)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc202)
      %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc202)
      cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc411)
      cir.scope {
        cir.do {
          cir.scope {
            %15 = cir.const #cir.int<2> : !s32i loc(#loc209)
            %16 = cir.const #cir.int<1> : !s32i loc(#loc210)
            %17 = cir.const #cir.int<6> : !s32i loc(#loc211)
            %18 = cir.call @socket(%15, %16, %17) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc212)
            cir.store %18, %8 : !s32i, !cir.ptr<!s32i> loc(#loc415)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc217)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc218)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc218)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc417)
              cir.if %63 {
                cir.break loc(#loc220)
              } loc(#loc418)
            } loc(#loc416)
            %19 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc419)
            %20 = cir.const #cir.int<0> : !s32i loc(#loc223)
            %21 = cir.const #cir.int<16> : !u64i loc(#loc420)
            cir.libc.memset %21 bytes from %19 set to %20 : !cir.ptr<!void>, !s32i, !u64i loc(#loc421)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc228)
            %23 = cir.cast(integral, %22 : !s32i), !u16i loc(#loc228)
            %24 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc422)
            %25 = cir.const #cir.int<0> : !s32i loc(#loc230)
            %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc230)
            %27 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
            %28 = cir.get_member %27[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
            cir.store %26, %28 : !u32i, !cir.ptr<!u32i> loc(#loc423)
            %29 = cir.const #cir.int<27015> : !s32i loc(#loc232)
            %30 = cir.cast(integral, %29 : !s32i), !u16i loc(#loc232)
            %31 = cir.call @htons(%30) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc233)
            %32 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
            cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc424)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc238)
              %61 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc426)
              %62 = cir.const #cir.int<16> : !u64i loc(#loc427)
              %63 = cir.cast(integral, %62 : !u64i), !u32i loc(#loc427)
              %64 = cir.call @bind(%60, %61, %63) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc243)
              %65 = cir.const #cir.int<1> : !s32i loc(#loc244)
              %66 = cir.unary(minus, %65) nsw : !s32i, !s32i loc(#loc244)
              %67 = cir.cmp(eq, %64, %66) : !s32i, !cir.bool loc(#loc428)
              cir.if %67 {
                cir.break loc(#loc246)
              } loc(#loc429)
            } loc(#loc425)
            cir.scope {
              %60 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc249)
              %61 = cir.const #cir.int<5> : !s32i loc(#loc250)
              %62 = cir.call @listen(%60, %61) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc251)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc252)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc252)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc431)
              cir.if %65 {
                cir.break loc(#loc254)
              } loc(#loc432)
            } loc(#loc430)
            %33 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc255)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc256)
            %35 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc257)
            %36 = cir.call @accept(%33, %34, %35) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc258)
            cir.store %36, %9 : !s32i, !cir.ptr<!s32i> loc(#loc433)
            cir.scope {
              %60 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc263)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc264)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc264)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc435)
              cir.if %63 {
                cir.break loc(#loc266)
              } loc(#loc436)
            } loc(#loc434)
            %37 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc267)
            %38 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc268)
            %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc268)
            %40 = cir.const #cir.int<3> : !s32i loc(#loc269)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc269)
            %42 = cir.const #cir.int<4> : !u64i loc(#loc269)
            %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc269)
            %44 = cir.const #cir.int<2> : !s32i loc(#loc269)
            %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc269)
            %46 = cir.binop(add, %43, %45) : !u64i loc(#loc269)
            %47 = cir.const #cir.int<1> : !s32i loc(#loc270)
            %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc270)
            %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc437)
            %50 = cir.const #cir.int<0> : !s32i loc(#loc271)
            %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc272)
            %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc272)
            cir.store %52, %6 : !s32i, !cir.ptr<!s32i> loc(#loc438)
            cir.scope {
              %60 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc278)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc278)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc440)
              %64 = cir.ternary(%63, true {
                %65 = cir.const #true loc(#loc279)
                cir.yield %65 : !cir.bool loc(#loc279)
              }, false {
                %65 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc280)
                %66 = cir.const #cir.int<0> : !s32i loc(#loc281)
                %67 = cir.cmp(eq, %65, %66) : !s32i, !cir.bool loc(#loc441)
                %68 = cir.ternary(%67, true {
                  %69 = cir.const #true loc(#loc279)
                  cir.yield %69 : !cir.bool loc(#loc279)
                }, false {
                  %69 = cir.const #false loc(#loc279)
                  cir.yield %69 : !cir.bool loc(#loc279)
                }) : (!cir.bool) -> !cir.bool loc(#loc279)
                cir.yield %68 : !cir.bool loc(#loc279)
              }) : (!cir.bool) -> !cir.bool loc(#loc279)
              cir.if %64 {
                cir.break loc(#loc283)
              } loc(#loc442)
            } loc(#loc439)
            %53 = cir.const #cir.int<0> : !s32i loc(#loc284)
            %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc284)
            %55 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc285)
            %56 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc286)
            %57 = cir.ptr_stride(%56 : !cir.ptr<!s8i>, %55 : !s32i), !cir.ptr<!s8i> loc(#loc286)
            cir.store %54, %57 : !s8i, !cir.ptr<!s8i> loc(#loc443)
            %58 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc287)
            %59 = cir.call @atoi(%58) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc288)
            cir.store %59, %0 : !s32i, !cir.ptr<!s32i> loc(#loc444)
          } loc(#loc414)
          cir.yield loc(#loc206)
        } while {
          %15 = cir.const #cir.int<0> : !s32i loc(#loc291)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc291)
          cir.condition(%16) loc(#loc291)
        } loc(#loc413)
      } loc(#loc413)
      cir.scope {
        %15 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc294)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc295)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc295)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc446)
        cir.if %18 {
          %19 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc297)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc298)
        } loc(#loc447)
      } loc(#loc445)
      cir.scope {
        %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc301)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc302)
        %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc302)
        %18 = cir.cmp(ne, %15, %17) : !s32i, !cir.bool loc(#loc449)
        cir.if %18 {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc304)
          %20 = cir.call @close(%19) : (!s32i) -> !s32i loc(#loc305)
        } loc(#loc450)
      } loc(#loc448)
    } loc(#loc407)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc306)
    %4 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData : !cir.ptr<!s32i> loc(#loc403)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc451)
    %5 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc452)
    cir.call %5() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc308)
    cir.return loc(#loc187)
  } loc(#loc404)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc453)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc312)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc455)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_divide_45_goodB2GData : !cir.ptr<!s32i> loc(#loc403)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc316)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc455)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc319)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc320)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc457)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc324)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc325)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc459)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc326)
      } else {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc312)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc312)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc327)
      } loc(#loc458)
    } loc(#loc456)
    cir.return loc(#loc314)
  } loc(#loc454)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":42:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":42:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":55:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":131:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":57:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":57:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":59:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":59:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":59:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":60:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":128:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":65:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":65:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":66:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":66:28)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":67:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":67:31)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":68:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":68:31)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":69:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":69:41)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":70:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":113:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":71:9)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":112:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:35)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:44)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:57)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:28)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":80:68)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":81:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":84:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":81:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":81:33)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":82:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":83:17)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:20)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:30)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:33)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:47)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":85:48)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":86:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":86:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":87:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":87:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":88:38)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":88:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":88:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":88:46)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":92:13)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:22)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:54)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:55)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:64)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:78)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":89:84)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":90:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":91:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":93:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":96:13)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":93:24)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":93:38)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":93:17)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":93:57)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":94:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":95:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:35)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:49)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:55)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:28)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":97:59)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":98:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":101:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":98:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":98:33)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":99:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":100:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:31)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:45)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:58)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:76)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:79)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:26)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":103:80)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":107:13)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:31)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:44)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:47)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":104:61)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":105:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":106:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":109:39)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":109:25)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":109:13)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":111:25)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":111:20)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":111:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":111:36)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":113:16)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":114:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":117:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":114:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":114:29)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":115:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":116:26)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":116:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":118:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":121:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":118:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":118:29)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":119:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":120:26)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":120:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":129:66)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":129:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":130:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":130:13)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":249:1)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":253:1)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":251:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":251:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":252:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":252:13)
#loc153 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc154 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":48:1)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":53:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":50:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":50:16)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":52:18)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":52:24)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":52:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":43:1)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":43:12)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":145:1)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":154:1)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":147:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":147:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":149:13)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":149:12)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":149:5)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":151:12)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":151:5)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":152:70)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":152:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":153:5)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":153:17)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":138:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":143:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":140:5)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":140:16)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":142:18)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":142:24)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":142:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":44:1)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":44:12)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":171:1)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":247:1)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":173:5)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":173:9)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":175:13)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":175:12)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":175:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":176:5)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":244:5)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":181:9)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":181:13)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":182:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":182:28)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":183:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":183:31)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":184:9)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":184:31)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":185:9)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":185:41)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":186:9)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":229:17)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":187:9)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":228:9)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:35)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:44)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:57)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:28)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:13)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":196:68)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":197:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":200:13)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":197:17)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":197:33)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":198:13)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":199:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:20)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:21)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:30)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:33)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:47)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:13)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":201:48)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":202:34)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":202:13)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":203:39)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":203:13)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":204:38)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":204:32)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":204:13)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":204:46)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:13)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":208:13)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:22)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:54)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:55)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:64)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:78)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":205:84)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":206:13)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":207:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":209:13)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":212:13)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":209:24)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":209:38)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":209:17)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":209:57)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":210:13)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":211:17)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:35)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:49)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:55)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:28)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:13)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":213:59)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":214:13)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":217:13)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":214:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":214:33)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":215:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":216:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:31)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:45)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:58)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:76)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:79)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:26)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":219:80)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:13)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":223:13)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:17)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:31)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:44)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:47)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":220:61)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":221:13)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":222:17)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":225:39)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":225:25)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":225:13)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":227:25)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":227:20)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":227:13)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":227:36)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":229:16)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":230:9)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":233:9)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":230:13)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":230:29)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":231:9)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":232:26)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":232:13)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":234:9)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":237:9)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":234:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":234:29)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":235:9)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":236:26)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":236:13)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":245:70)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":245:5)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":246:5)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":246:17)
#loc310 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc311 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":167:19)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":157:1)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":169:1)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":159:5)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":159:16)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":161:5)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":168:5)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":161:9)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":161:17)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":162:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":164:5)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":166:5)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":163:22)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":163:28)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":163:9)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_divide_45.c":167:9)
#loc328 = loc(fused[#loc1, #loc2])
#loc329 = loc(fused[#loc3, #loc4])
#loc330 = loc(fused[#loc5, #loc6])
#loc331 = loc(fused[#loc7, #loc8])
#loc332 = loc(fused[#loc9, #loc10])
#loc333 = loc(fused[#loc11, #loc12])
#loc334 = loc(fused[#loc13, #loc14])
#loc335 = loc(fused[#loc15, #loc16])
#loc336 = loc(fused[#loc17, #loc18])
#loc337 = loc(fused[#loc19, #loc20])
#loc338 = loc(fused[#loc21, #loc22])
#loc339 = loc(fused[#loc25, #loc23])
#loc340 = loc(fused[#loc26, #loc27])
#loc341 = loc(fused[#loc28, #loc29])
#loc342 = loc(fused[#loc30, #loc31])
#loc343 = loc(fused[#loc32, #loc33])
#loc344 = loc(fused[#loc34, #loc35])
#loc345 = loc(fused[#loc36, #loc37])
#loc346 = loc(fused[#loc38, #loc39])
#loc347 = loc(fused[#loc40, #loc41])
#loc348 = loc(fused[#loc46, #loc47])
#loc349 = loc(fused[#loc48, #loc49])
#loc350 = loc(fused[#loc50, #loc51])
#loc351 = loc(fused[#loc52, #loc49])
#loc352 = loc(fused[#loc54, #loc55])
#loc353 = loc(fused[#loc57, #loc58])
#loc354 = loc(fused[#loc59, #loc60])
#loc355 = loc(fused[#loc63, #loc61])
#loc356 = loc(fused[#loc67, #loc64])
#loc357 = loc(fused[#loc71, #loc72])
#loc358 = loc(fused[#loc73, #loc74])
#loc359 = loc(fused[#loc76, #loc77])
#loc360 = loc(fused[#loc78, #loc79])
#loc361 = loc(fused[#loc80, #loc81])
#loc362 = loc(fused[#loc82, #loc74])
#loc363 = loc(fused[#loc84, #loc85])
#loc364 = loc(fused[#loc88, #loc89])
#loc365 = loc(fused[#loc90, #loc85])
#loc366 = loc(fused[#loc96, #loc97])
#loc367 = loc(fused[#loc98, #loc99])
#loc368 = loc(fused[#loc100, #loc101])
#loc369 = loc(fused[#loc102, #loc99])
#loc370 = loc(fused[#loc106, #loc107])
#loc371 = loc(fused[#loc110, #loc111])
#loc372 = loc(fused[#loc112, #loc113])
#loc373 = loc(fused[#loc114, #loc115])
#loc374 = loc(fused[#loc117, #loc118])
#loc375 = loc(fused[#loc119, #loc113])
#loc376 = loc(fused[#loc123, #loc121])
#loc377 = loc(fused[#loc126, #loc127])
#loc378 = loc(fused[#loc129, #loc130])
#loc379 = loc(fused[#loc131, #loc132])
#loc380 = loc(fused[#loc133, #loc130])
#loc381 = loc(fused[#loc136, #loc137])
#loc382 = loc(fused[#loc138, #loc139])
#loc383 = loc(fused[#loc140, #loc137])
#loc384 = loc(fused[#loc144, #loc143])
#loc385 = loc(fused[#loc145, #loc146])
#loc386 = loc(fused[#loc147, #loc148])
#loc387 = loc(fused[#loc149, #loc150])
#loc388 = loc(fused[#loc151, #loc152])
#loc389 = loc(fused[#loc153, #loc154])
#loc390 = loc(fused[#loc155, #loc156])
#loc391 = loc(fused[#loc157, #loc158])
#loc392 = loc(fused[#loc159, #loc160])
#loc393 = loc(fused[#loc162, #loc163])
#loc394 = loc(fused[#loc164, #loc165])
#loc395 = loc(fused[#loc166, #loc167])
#loc396 = loc(fused[#loc170, #loc168])
#loc397 = loc(fused[#loc172, #loc171])
#loc398 = loc(fused[#loc174, #loc173])
#loc399 = loc(fused[#loc175, #loc176])
#loc400 = loc(fused[#loc177, #loc178])
#loc401 = loc(fused[#loc179, #loc180])
#loc402 = loc(fused[#loc181, #loc182])
#loc403 = loc(fused[#loc184, #loc185])
#loc404 = loc(fused[#loc186, #loc187])
#loc405 = loc(fused[#loc188, #loc189])
#loc406 = loc(fused[#loc192, #loc190])
#loc407 = loc(fused[#loc193, #loc194])
#loc408 = loc(fused[#loc195, #loc196])
#loc409 = loc(fused[#loc197, #loc198])
#loc410 = loc(fused[#loc199, #loc200])
#loc411 = loc(fused[#loc201, #loc202])
#loc412 = loc(fused[#loc203, #loc204])
#loc413 = loc(fused[#loc205, #loc206])
#loc414 = loc(fused[#loc207, #loc208])
#loc415 = loc(fused[#loc213, #loc214])
#loc416 = loc(fused[#loc215, #loc216])
#loc417 = loc(fused[#loc217, #loc218])
#loc418 = loc(fused[#loc219, #loc216])
#loc419 = loc(fused[#loc221, #loc222])
#loc420 = loc(fused[#loc224, #loc225])
#loc421 = loc(fused[#loc226, #loc227])
#loc422 = loc(fused[#loc229, #loc228])
#loc423 = loc(fused[#loc231, #loc230])
#loc424 = loc(fused[#loc234, #loc235])
#loc425 = loc(fused[#loc236, #loc237])
#loc426 = loc(fused[#loc239, #loc240])
#loc427 = loc(fused[#loc241, #loc242])
#loc428 = loc(fused[#loc243, #loc244])
#loc429 = loc(fused[#loc245, #loc237])
#loc430 = loc(fused[#loc247, #loc248])
#loc431 = loc(fused[#loc251, #loc252])
#loc432 = loc(fused[#loc253, #loc248])
#loc433 = loc(fused[#loc259, #loc260])
#loc434 = loc(fused[#loc261, #loc262])
#loc435 = loc(fused[#loc263, #loc264])
#loc436 = loc(fused[#loc265, #loc262])
#loc437 = loc(fused[#loc269, #loc270])
#loc438 = loc(fused[#loc273, #loc274])
#loc439 = loc(fused[#loc275, #loc276])
#loc440 = loc(fused[#loc277, #loc278])
#loc441 = loc(fused[#loc280, #loc281])
#loc442 = loc(fused[#loc282, #loc276])
#loc443 = loc(fused[#loc286, #loc284])
#loc444 = loc(fused[#loc289, #loc290])
#loc445 = loc(fused[#loc292, #loc293])
#loc446 = loc(fused[#loc294, #loc295])
#loc447 = loc(fused[#loc296, #loc293])
#loc448 = loc(fused[#loc299, #loc300])
#loc449 = loc(fused[#loc301, #loc302])
#loc450 = loc(fused[#loc303, #loc300])
#loc451 = loc(fused[#loc307, #loc306])
#loc452 = loc(fused[#loc308, #loc309])
#loc453 = loc(fused[#loc310, #loc311])
#loc454 = loc(fused[#loc313, #loc314])
#loc455 = loc(fused[#loc315, #loc316])
#loc456 = loc(fused[#loc317, #loc318])
#loc457 = loc(fused[#loc319, #loc320])
#loc458 = loc(fused[#loc321, #loc322, #loc323, #loc318])
#loc459 = loc(fused[#loc324, #loc325])
