!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc52)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc53)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_12.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_12_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc56)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc59)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc59)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
      cir.if %7 {
        %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %10 = cir.binop(and, %8, %9) : !s32i loc(#loc22)
        %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc22)
        %12 = cir.ternary(%11, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc22)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc22)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc22)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc22)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc22)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc22)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc22)
          cir.yield %25 : !u32i loc(#loc22)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc22)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc22)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc22)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc22)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc22)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc22)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc22)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc22)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc22)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc22)
          cir.yield %29 : !u32i loc(#loc22)
        }) : (!cir.bool) -> !u32i loc(#loc22)
        %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc22)
        cir.store %13, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc24)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc25)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc24)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc62)
      } loc(#loc60)
    } loc(#loc58)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc7)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc7)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc7)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc7)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc7)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc7)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc7)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc7)
          %11 = cir.const #cir.int<41> : !s32i loc(#loc7)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc7)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc7)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc7)
        } loc(#loc7)
      } loc(#loc7)
    } loc(#loc7)
    cir.return loc(#loc9)
  } loc(#loc55)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc64)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    cir.return loc(#loc28)
  } loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc66)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    cir.scope {
      %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc69)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc69)
      %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc41)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc41)
      cir.if %7 {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc46)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc46)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
      } else {
        %8 = cir.const #cir.int<5> : !s32i loc(#loc49)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc49)
        cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
      } loc(#loc70)
    } loc(#loc68)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc31)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc31)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc31)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc31)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc31)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
          %11 = cir.const #cir.int<66> : !s32i loc(#loc31)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc31)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc31)
        } loc(#loc31)
      } loc(#loc31)
    } loc(#loc31)
    cir.return loc(#loc33)
  } loc(#loc65)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("/usr/include/assert.h":69:1)
#loc6 = loc("/usr/include/assert.h":71:43)
#loc7 = loc("CWE617_Reachable_Assertion__rand_12.c":41:5)
#loc8 = loc("CWE617_Reachable_Assertion__rand_12.c":25:1)
#loc9 = loc("CWE617_Reachable_Assertion__rand_12.c":42:1)
#loc10 = loc("CWE617_Reachable_Assertion__rand_12.c":27:5)
#loc11 = loc("CWE617_Reachable_Assertion__rand_12.c":27:9)
#loc12 = loc("CWE617_Reachable_Assertion__rand_12.c":29:13)
#loc13 = loc("CWE617_Reachable_Assertion__rand_12.c":29:12)
#loc14 = loc("CWE617_Reachable_Assertion__rand_12.c":29:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_12.c":30:5)
#loc16 = loc("CWE617_Reachable_Assertion__rand_12.c":39:5)
#loc17 = loc("CWE617_Reachable_Assertion__rand_12.c":30:8)
#loc18 = loc("CWE617_Reachable_Assertion__rand_12.c":30:33)
#loc19 = loc("CWE617_Reachable_Assertion__rand_12.c":31:5)
#loc20 = loc("CWE617_Reachable_Assertion__rand_12.c":34:5)
#loc21 = loc("CWE617_Reachable_Assertion__rand_12.c":36:5)
#loc22 = loc("CWE617_Reachable_Assertion__rand_12.c":33:16)
#loc23 = loc("CWE617_Reachable_Assertion__rand_12.c":33:9)
#loc24 = loc("CWE617_Reachable_Assertion__rand_12.c":38:16)
#loc25 = loc("CWE617_Reachable_Assertion__rand_12.c":38:29)
#loc26 = loc("CWE617_Reachable_Assertion__rand_12.c":38:9)
#loc27 = loc("CWE617_Reachable_Assertion__rand_12.c":69:1)
#loc28 = loc("CWE617_Reachable_Assertion__rand_12.c":72:1)
#loc29 = loc("CWE617_Reachable_Assertion__rand_12.c":71:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_12.c":71:13)
#loc31 = loc("CWE617_Reachable_Assertion__rand_12.c":66:5)
#loc32 = loc("CWE617_Reachable_Assertion__rand_12.c":50:1)
#loc33 = loc("CWE617_Reachable_Assertion__rand_12.c":67:1)
#loc34 = loc("CWE617_Reachable_Assertion__rand_12.c":52:5)
#loc35 = loc("CWE617_Reachable_Assertion__rand_12.c":52:9)
#loc36 = loc("CWE617_Reachable_Assertion__rand_12.c":54:13)
#loc37 = loc("CWE617_Reachable_Assertion__rand_12.c":54:12)
#loc38 = loc("CWE617_Reachable_Assertion__rand_12.c":54:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_12.c":55:5)
#loc40 = loc("CWE617_Reachable_Assertion__rand_12.c":64:5)
#loc41 = loc("CWE617_Reachable_Assertion__rand_12.c":55:8)
#loc42 = loc("CWE617_Reachable_Assertion__rand_12.c":55:33)
#loc43 = loc("CWE617_Reachable_Assertion__rand_12.c":56:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_12.c":59:5)
#loc45 = loc("CWE617_Reachable_Assertion__rand_12.c":61:5)
#loc46 = loc("CWE617_Reachable_Assertion__rand_12.c":58:16)
#loc47 = loc("CWE617_Reachable_Assertion__rand_12.c":58:29)
#loc48 = loc("CWE617_Reachable_Assertion__rand_12.c":58:9)
#loc49 = loc("CWE617_Reachable_Assertion__rand_12.c":63:16)
#loc50 = loc("CWE617_Reachable_Assertion__rand_12.c":63:29)
#loc51 = loc("CWE617_Reachable_Assertion__rand_12.c":63:9)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc8, #loc9])
#loc56 = loc(fused[#loc10, #loc11])
#loc57 = loc(fused[#loc14, #loc12])
#loc58 = loc(fused[#loc15, #loc16])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc61 = loc(fused[#loc23, #loc22])
#loc62 = loc(fused[#loc26, #loc25])
#loc63 = loc(fused[#loc27, #loc28])
#loc64 = loc(fused[#loc29, #loc30])
#loc65 = loc(fused[#loc32, #loc33])
#loc66 = loc(fused[#loc34, #loc35])
#loc67 = loc(fused[#loc38, #loc36])
#loc68 = loc(fused[#loc39, #loc40])
#loc69 = loc(fused[#loc41, #loc42])
#loc70 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc71 = loc(fused[#loc48, #loc47])
#loc72 = loc(fused[#loc51, #loc50])
