!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc159)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc160)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc163)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc167)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc170)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc170)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc172)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc172)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc172)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc34)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc34)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc34)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc34)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc34)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc34)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc34)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !s32i loc(#loc174)
          %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc38)
          cir.if %26 {
            %27 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
            %28 = cir.call @atoi(%27) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc43)
            cir.store %28, %4 : !s32i, !cir.ptr<!s32i> loc(#loc176)
          } else {
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc46)
          } loc(#loc175)
        } loc(#loc173)
      } loc(#loc171)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc47)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    } loc(#loc169)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc179)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc59)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc181)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc61)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc13)
  } loc(#loc164)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc182)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc188)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc188)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc191)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc81)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc83)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    } loc(#loc190)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc197)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc97)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc197)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc99)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc69)
  } loc(#loc185)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc100)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc201)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc200)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc201)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc109)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc204)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc206)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc206)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc206)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc122)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc123)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc123)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc123)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc123)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc123)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc123)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc123)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc123)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc160)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc124)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc125)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !s32i loc(#loc208)
          %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc127)
          cir.if %26 {
            %27 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
            %28 = cir.call @atoi(%27) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc132)
            cir.store %28, %4 : !s32i, !cir.ptr<!s32i> loc(#loc210)
          } else {
            %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc135)
            %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc135)
            cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc205)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    } loc(#loc203)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc213)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc144)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc148)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc215)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc149)
        cir.if %10 {
          %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
          %12 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc155)
          %13 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc155)
          cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc217)
          %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc157)
        } else {
          %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc100)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc100)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        } loc(#loc216)
      } loc(#loc214)
    } loc(#loc212)
    cir.return loc(#loc102)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":27:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":28:22)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":47:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:21)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:20)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":34:49)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":44:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:23)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:36)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:53)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:17)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:63)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:60)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":37:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":40:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":42:13)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:29)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:24)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:17)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:40)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":43:17)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:21)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:10)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":48:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":55:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:21)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:20)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":50:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":54:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:33)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:26)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":53:26)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":53:13)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":126:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":130:1)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":128:5)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":128:13)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":129:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":129:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":63:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":84:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":65:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":65:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":66:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":66:22)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":67:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":67:22)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":69:12)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":69:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":70:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":75:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:21)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:20)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":73:16)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":73:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:21)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:10)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":76:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":83:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:21)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:20)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":78:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":82:9)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:33)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:26)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":81:26)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":81:13)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":121:23)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":87:1)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":124:1)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":89:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":89:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":90:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":90:22)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":91:5)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":91:22)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":93:12)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":93:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":94:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":110:5)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:21)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:20)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":96:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":108:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":97:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":97:49)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":107:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:23)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:36)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:53)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:17)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:63)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:60)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":100:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":103:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":105:13)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:29)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:24)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:17)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:40)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":106:27)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":106:17)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:21)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:10)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":111:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":123:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:21)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:20)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:9)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":122:9)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:20)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:18)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":115:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":118:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":120:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:33)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:26)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":117:26)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":117:13)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":121:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc10, #loc11])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc14, #loc15])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc18, #loc19])
#loc168 = loc(fused[#loc21, #loc20])
#loc169 = loc(fused[#loc22, #loc23])
#loc170 = loc(fused[#loc24, #loc25])
#loc171 = loc(fused[#loc27, #loc28])
#loc172 = loc(fused[#loc29, #loc30])
#loc173 = loc(fused[#loc31, #loc32])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc39, #loc40, #loc41, #loc32])
#loc176 = loc(fused[#loc44, #loc45])
#loc177 = loc(fused[#loc49, #loc47])
#loc178 = loc(fused[#loc50, #loc51])
#loc179 = loc(fused[#loc52, #loc53])
#loc180 = loc(fused[#loc55, #loc56])
#loc181 = loc(fused[#loc57, #loc58])
#loc182 = loc(fused[#loc62, #loc63])
#loc183 = loc(fused[#loc64, #loc65])
#loc184 = loc(fused[#loc66, #loc67])
#loc185 = loc(fused[#loc68, #loc69])
#loc186 = loc(fused[#loc70, #loc71])
#loc187 = loc(fused[#loc72, #loc73])
#loc188 = loc(fused[#loc74, #loc75])
#loc189 = loc(fused[#loc77, #loc76])
#loc190 = loc(fused[#loc78, #loc79])
#loc191 = loc(fused[#loc80, #loc81])
#loc192 = loc(fused[#loc84, #loc83])
#loc193 = loc(fused[#loc87, #loc85])
#loc194 = loc(fused[#loc88, #loc89])
#loc195 = loc(fused[#loc90, #loc91])
#loc196 = loc(fused[#loc93, #loc94])
#loc197 = loc(fused[#loc95, #loc96])
#loc198 = loc(fused[#loc101, #loc102])
#loc199 = loc(fused[#loc103, #loc104])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc110, #loc109])
#loc203 = loc(fused[#loc111, #loc112])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc116, #loc117])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc120, #loc121])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc128, #loc129, #loc130, #loc121])
#loc210 = loc(fused[#loc133, #loc134])
#loc211 = loc(fused[#loc139, #loc137])
#loc212 = loc(fused[#loc140, #loc141])
#loc213 = loc(fused[#loc142, #loc143])
#loc214 = loc(fused[#loc145, #loc146])
#loc215 = loc(fused[#loc147, #loc148])
#loc216 = loc(fused[#loc150, #loc151, #loc152, #loc146])
#loc217 = loc(fused[#loc153, #loc154])
