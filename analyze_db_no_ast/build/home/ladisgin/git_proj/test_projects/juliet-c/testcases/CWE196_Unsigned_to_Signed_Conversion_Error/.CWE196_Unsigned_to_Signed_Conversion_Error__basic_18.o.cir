!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc71)
  cir.func private  @printIntLine(!s32i) loc(#loc72)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc75)
    cir.goto "sink" loc(#loc76)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc13)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc14)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc77)
    cir.scope {
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
      %8 = cir.const #cir.int<2> : !s32i loc(#loc20)
      %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc79)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc21)
      %11 = cir.cmp(eq, %9, %10) : !s32i, !s32i loc(#loc80)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc22)
      cir.if %12 {
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc24)
        %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc24)
        %15 = cir.const #cir.int<2> : !u32i loc(#loc24)
        %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc24)
        %17 = cir.const #cir.int<1> : !u32i loc(#loc24)
        %18 = cir.binop(add, %16, %17) : !u32i loc(#loc24)
        %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
        %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc82)
        cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc83)
      } loc(#loc81)
    } loc(#loc78)
    %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc27)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc30)
    cir.return loc(#loc6)
  } loc(#loc73)
  cir.func no_proto  @CWE196_Unsigned_to_Signed_Conversion_Error__basic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc85)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc87)
  cir.func no_proto internal private  @good1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc90)
    cir.goto "sink" loc(#loc91)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc45)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc46)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc92)
    cir.scope {
      %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc51)
      %8 = cir.const #cir.int<2> : !s32i loc(#loc52)
      %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc94)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc53)
      %11 = cir.cmp(eq, %9, %10) : !s32i, !s32i loc(#loc95)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc54)
      cir.if %12 {
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
        %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
        %15 = cir.const #cir.int<2> : !u32i loc(#loc56)
        %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc56)
        %17 = cir.const #cir.int<1> : !u32i loc(#loc56)
        %18 = cir.binop(add, %16, %17) : !u32i loc(#loc56)
        %19 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc57)
        %20 = cir.binop(sub, %18, %19) : !u32i loc(#loc97)
        cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc98)
      } loc(#loc96)
    } loc(#loc93)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc61)
      %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc62)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc62)
      %10 = cir.cmp(gt, %7, %9) : !u32i, !s32i loc(#loc100)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc63)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc65)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc66)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
      } loc(#loc101)
    } loc(#loc99)
    %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc67)
    %5 = cir.cast(integral, %4 : !u32i), !s32i loc(#loc67)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc70)
    cir.return loc(#loc38)
  } loc(#loc88)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":20:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":36:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":25:9)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":25:18)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":26:9)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":26:13)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":22:5)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":22:10)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":23:1)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":27:23)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":27:9)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":27:28)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":28:9)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":31:9)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":28:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":28:22)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":28:27)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":28:24)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":29:9)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":30:27)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":30:38)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":30:13)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":33:21)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":33:9)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":34:22)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":34:9)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":65:1)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":68:1)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":67:5)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":67:11)
#loc35 = loc("/usr/include/stdlib.h":756:1)
#loc36 = loc("/usr/include/stdlib.h":756:70)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":43:1)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":63:1)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":48:9)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":48:18)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":49:9)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":49:13)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":45:5)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":45:10)
#loc45 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":46:1)
#loc46 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":50:23)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":50:9)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":50:28)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":51:9)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":54:9)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":51:13)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":51:22)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":51:27)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":51:24)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":52:9)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":53:27)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":53:38)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":53:13)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":56:9)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":59:9)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":56:13)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":56:27)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":56:25)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":57:9)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":58:13)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":58:18)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":60:21)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":60:9)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":61:22)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_18.c":61:9)
#loc71 = loc(fused[#loc1, #loc2])
#loc72 = loc(fused[#loc3, #loc4])
#loc73 = loc(fused[#loc5, #loc6])
#loc74 = loc(fused[#loc7, #loc8])
#loc75 = loc(fused[#loc9, #loc10])
#loc76 = loc(fused[#loc11, #loc12])
#loc77 = loc(fused[#loc15, #loc16])
#loc78 = loc(fused[#loc17, #loc18])
#loc79 = loc(fused[#loc19, #loc20])
#loc80 = loc(fused[#loc19, #loc21])
#loc81 = loc(fused[#loc23, #loc18])
#loc82 = loc(fused[#loc24, #loc25])
#loc83 = loc(fused[#loc26, #loc25])
#loc84 = loc(fused[#loc28, #loc27])
#loc85 = loc(fused[#loc31, #loc32])
#loc86 = loc(fused[#loc33, #loc34])
#loc87 = loc(fused[#loc35, #loc36])
#loc88 = loc(fused[#loc37, #loc38])
#loc89 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc41, #loc42])
#loc91 = loc(fused[#loc43, #loc44])
#loc92 = loc(fused[#loc47, #loc48])
#loc93 = loc(fused[#loc49, #loc50])
#loc94 = loc(fused[#loc51, #loc52])
#loc95 = loc(fused[#loc51, #loc53])
#loc96 = loc(fused[#loc55, #loc50])
#loc97 = loc(fused[#loc56, #loc57])
#loc98 = loc(fused[#loc58, #loc57])
#loc99 = loc(fused[#loc59, #loc60])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc64, #loc60])
#loc102 = loc(fused[#loc68, #loc67])
