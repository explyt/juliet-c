!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":85:10)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":85:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":85:20)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":85:32)
#loc176 = loc(fused[#loc77, #loc78])
#loc177 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc151)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc17)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc18)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc155)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc156)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc17)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc157)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc158)
    cir.scope {
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc26)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc26)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc160)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc161)
    } loc(#loc159)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc33)
      cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
      cir.for : cond {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc164)
        cir.condition(%12) loc(#loc37)
      } body {
        cir.scope {
          %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc39)
          %12 = cir.const #cir.int<65> : !s32i loc(#loc40)
          %13 = cir.const #cir.int<100> : !s32i loc(#loc41)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc42)
          %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc41)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc41)
          cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc166)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc45)
          %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc45)
          %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
          %20 = cir.const #cir.int<100> : !s32i loc(#loc47)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc47)
          %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc49)
          cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc167)
        } loc(#loc165)
        cir.yield loc(#loc32)
      } step {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
        %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc51)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc162)
    cir.scope {
      %9 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc170)
      %10 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc170)
      cir.store %10, %9 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc170)
      %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc56)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc57)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc58)
      %14 = cir.call @strcpy(%12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc56)
      %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc61)
      %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc61)
    } loc(#loc169)
    cir.return loc(#loc12)
  } loc(#loc152)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc64)
  } loc(#loc171)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc173)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc84)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc180)
    cir.return %17 : !s32i loc(#loc180)
  } loc(#loc175)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc102)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc102)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc184)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc185)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
    cir.store %8, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc187)
    cir.scope {
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc109)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc110)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc189)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc112)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc114)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc112)
      } loc(#loc190)
    } loc(#loc188)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc117)
      cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.for : cond {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
        %11 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc193)
        cir.condition(%12) loc(#loc121)
      } body {
        cir.scope {
          %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
          %12 = cir.const #cir.int<65> : !s32i loc(#loc124)
          %13 = cir.const #cir.int<50> : !s32i loc(#loc125)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc126)
          %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc125)
          %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc125)
          cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc195)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc129)
          %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
          %20 = cir.const #cir.int<50> : !s32i loc(#loc131)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc131)
          %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc133)
          cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc196)
        } loc(#loc194)
        cir.yield loc(#loc116)
      } step {
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc135)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
        cir.yield loc(#loc191)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      %9 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc199)
      %10 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc199)
      cir.store %10, %9 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc199)
      %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc140)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc141)
      %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
      %14 = cir.call @strcpy(%12, %13) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc140)
      %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
      cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc144)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc145)
      %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
    } loc(#loc198)
    cir.return loc(#loc96)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":42:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":25:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":26:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:27)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:31)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:42)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":27:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:33)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:17)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:23)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:24)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:30)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":28:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":34:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:18)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":30:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:16)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:22)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:31)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:9)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":32:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":33:23)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":33:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":33:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":33:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":33:19)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":29:23)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":35:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":41:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":36:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":36:25)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":38:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":38:16)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":38:22)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":39:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":39:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":40:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":40:14)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":70:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":73:1)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":72:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":72:13)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":90:15)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":92:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":95:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":97:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":85:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":100:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":86:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":88:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":88:22)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":88:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":90:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":91:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":91:63)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":92:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":95:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":96:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":96:62)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":97:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":99:12)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":99:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":49:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":68:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":51:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":51:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":52:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":52:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:20)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:31)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:42)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:43)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":53:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":54:29)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":60:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:16)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:20)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:18)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":56:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:16)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:22)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:27)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":58:31)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":59:22)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":59:9)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":59:14)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":59:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":59:18)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:24)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":55:23)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":61:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":67:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":62:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":62:25)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":64:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":64:16)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":64:22)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":65:19)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":65:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":66:9)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cpy_17.c":66:14)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc18, #loc20])
#loc157 = loc(fused[#loc17, #loc21])
#loc158 = loc(fused[#loc22, #loc21])
#loc159 = loc(fused[#loc23, #loc24])
#loc160 = loc(fused[#loc25, #loc26])
#loc161 = loc(fused[#loc27, #loc24])
#loc162 = loc(fused[#loc31, #loc32])
#loc163 = loc(fused[#loc34, #loc33])
#loc164 = loc(fused[#loc35, #loc36])
#loc165 = loc(fused[#loc38, #loc32])
#loc166 = loc(fused[#loc43, #loc44])
#loc167 = loc(fused[#loc46, #loc45])
#loc168 = loc(fused[#loc51, #loc50])
#loc169 = loc(fused[#loc52, #loc53])
#loc170 = loc(fused[#loc54, #loc55])
#loc171 = loc(fused[#loc63, #loc64])
#loc172 = loc(fused[#loc65, #loc66])
#loc173 = loc(fused[#loc67, #loc68])
#loc174 = loc(fused[#loc69, #loc70])
#loc175 = loc(fused[#loc75, #loc76])
#loc178 = loc(fused[#loc86, #loc87])
#loc179 = loc(fused[#loc90, #loc91])
#loc180 = loc(fused[#loc94, #loc93])
#loc181 = loc(fused[#loc95, #loc96])
#loc182 = loc(fused[#loc97, #loc98])
#loc183 = loc(fused[#loc99, #loc100])
#loc184 = loc(fused[#loc103, #loc104])
#loc185 = loc(fused[#loc102, #loc104])
#loc186 = loc(fused[#loc101, #loc105])
#loc187 = loc(fused[#loc106, #loc105])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc111, #loc108])
#loc191 = loc(fused[#loc115, #loc116])
#loc192 = loc(fused[#loc118, #loc117])
#loc193 = loc(fused[#loc119, #loc120])
#loc194 = loc(fused[#loc122, #loc116])
#loc195 = loc(fused[#loc127, #loc128])
#loc196 = loc(fused[#loc130, #loc129])
#loc197 = loc(fused[#loc135, #loc134])
#loc198 = loc(fused[#loc136, #loc137])
#loc199 = loc(fused[#loc138, #loc139])
