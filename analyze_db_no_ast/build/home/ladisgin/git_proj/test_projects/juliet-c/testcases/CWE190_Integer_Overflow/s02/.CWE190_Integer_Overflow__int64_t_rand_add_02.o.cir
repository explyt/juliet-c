!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_02.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc156)
  cir.func private  @printLongLongLine(!s64i) loc(#loc157)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_add_02_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc160)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc13)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc15)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc15)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc15)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc15)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc15)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc15)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc15)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc15)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc15)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc15)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc15)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc15)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc15)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc15)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc15)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc15)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc15)
          cir.yield %31 : !u64i loc(#loc15)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc15)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc15)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc15)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc15)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc15)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc15)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc15)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc15)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc15)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc15)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc15)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc15)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc15)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc15)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc15)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc15)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc15)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc15)
          cir.yield %35 : !u64i loc(#loc15)
        }) : (!cir.bool) -> !u64i loc(#loc15)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc15)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc163)
      } loc(#loc162)
    } loc(#loc161)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc19)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc167)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc24)
          %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc25)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc167)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc27)
        } loc(#loc166)
      } loc(#loc165)
    } loc(#loc164)
    cir.return loc(#loc6)
  } loc(#loc158)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_add_02_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc168)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc173)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc175)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc46)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc176)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc50)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc52)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc52)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc52)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc52)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc52)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc52)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc52)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc52)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc52)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc52)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc52)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc52)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc52)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc52)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc52)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc52)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc52)
          cir.yield %31 : !u64i loc(#loc52)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc52)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc52)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc52)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc52)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc52)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc52)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc52)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc52)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc52)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc52)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc52)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc52)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc52)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc52)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc52)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc52)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc52)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc52)
          cir.yield %35 : !u64i loc(#loc52)
        }) : (!cir.bool) -> !u64i loc(#loc52)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc52)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc179)
      } loc(#loc178)
    } loc(#loc177)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc56)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc63)
          %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc64)
          %6 = cir.cmp(lt, %4, %5) : !s64i, !s32i loc(#loc183)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc65)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc185)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc71)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc70)
            %12 = cir.binop(add, %9, %11) nsw : !s64i loc(#loc71)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc185)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc72)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc73)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          } loc(#loc184)
        } loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.return loc(#loc43)
  } loc(#loc174)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc79)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc83)
      cir.if %3 {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc85)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc85)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc85)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc85)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc85)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc85)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc85)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc85)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc85)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc85)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc85)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc85)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc85)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc85)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc85)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc85)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc85)
          cir.yield %31 : !u64i loc(#loc85)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc85)
          %12 = cir.const #cir.int<60> : !s32i loc(#loc85)
          %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc85)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc85)
          %16 = cir.const #cir.int<45> : !s32i loc(#loc85)
          %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc85)
          %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc85)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc85)
          %21 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc85)
          %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc85)
          %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc85)
          %26 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc85)
          %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc85)
          %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc85)
          %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc85)
          %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc85)
          %33 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc85)
          %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc85)
          cir.yield %35 : !u64i loc(#loc85)
        }) : (!cir.bool) -> !u64i loc(#loc85)
        %9 = cir.cast(integral, %8 : !u64i), !s64i loc(#loc85)
        cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc191)
      } loc(#loc190)
    } loc(#loc189)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc89)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc93)
          %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc94)
          %6 = cir.cmp(lt, %4, %5) : !s64i, !s32i loc(#loc195)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc95)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc100)
            %12 = cir.binop(add, %9, %11) nsw : !s64i loc(#loc101)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc197)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc102)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc103)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc104)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc104)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc192)
    cir.return loc(#loc76)
  } loc(#loc186)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc110)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc114)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc118)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc118)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc119)
      } else {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc120)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc120)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc203)
      } loc(#loc202)
    } loc(#loc201)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc124)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc124)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc207)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc130)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc129)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc129)
          %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc130)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc207)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc131)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc132)
        } loc(#loc206)
      } loc(#loc205)
    } loc(#loc204)
    cir.return loc(#loc107)
  } loc(#loc198)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc137)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc141)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc141)
      cir.if %3 {
        %4 = cir.const #cir.int<2> : !s32i loc(#loc143)
        %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc143)
        cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
      } loc(#loc212)
    } loc(#loc211)
    cir.scope {
      %2 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc147)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc217)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc153)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc152)
          %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc152)
          %8 = cir.binop(add, %5, %7) nsw : !s64i loc(#loc153)
          cir.store %8, %4 : !s64i, !cir.ptr<!s64i> loc(#loc217)
          %9 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc154)
          cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc155)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc214)
    cir.return loc(#loc134)
  } loc(#loc208)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_add_02.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":26:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":30:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":26:8)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":29:25)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":38:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":31:8)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":33:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":37:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":35:13)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":35:37)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":35:30)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":36:31)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":36:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":145:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":151:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":147:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":147:14)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":148:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":148:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":149:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":149:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":150:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":150:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":58:19)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":70:23)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":46:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":73:1)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":48:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":48:13)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":49:12)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":49:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":50:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":54:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":50:8)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":51:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":53:25)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":53:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":72:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":55:8)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":56:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":59:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":58:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":63:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":71:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":63:13)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":63:20)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":63:18)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":64:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":65:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":65:37)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":65:30)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":66:31)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":66:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":70:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":76:1)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":98:1)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":78:5)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":78:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":79:12)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":79:5)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":80:5)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":84:5)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":80:8)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":81:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":83:25)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":83:9)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":85:5)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":97:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":85:8)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":88:9)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":96:9)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":88:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":88:20)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":88:18)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":89:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":92:9)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":94:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":90:13)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":90:37)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":90:30)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":91:31)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":91:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":95:23)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":95:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":101:1)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":123:1)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":103:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":103:13)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":104:12)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":104:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":105:5)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":114:5)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":105:8)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":106:5)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":109:5)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":111:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":108:19)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":108:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":113:16)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":113:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":115:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":122:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":115:8)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":116:5)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":117:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":121:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":119:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":119:37)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":119:30)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":120:31)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":120:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":126:1)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":143:1)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":128:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":128:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":129:12)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":129:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":130:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":134:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":130:8)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":131:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":133:16)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":133:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":135:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":142:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":135:8)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":136:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":137:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":141:9)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":139:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":139:37)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":139:30)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":140:31)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_add_02.c":140:13)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc10, #loc9])
#loc161 = loc(fused[#loc11, #loc12])
#loc162 = loc(fused[#loc14, #loc12])
#loc163 = loc(fused[#loc16, #loc15])
#loc164 = loc(fused[#loc17, #loc18])
#loc165 = loc(fused[#loc20, #loc18])
#loc166 = loc(fused[#loc21, #loc22])
#loc167 = loc(fused[#loc23, #loc24])
#loc168 = loc(fused[#loc28, #loc29])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc32, #loc33])
#loc171 = loc(fused[#loc34, #loc35])
#loc172 = loc(fused[#loc36, #loc37])
#loc173 = loc(fused[#loc38, #loc39])
#loc174 = loc(fused[#loc42, #loc43])
#loc175 = loc(fused[#loc44, #loc45])
#loc176 = loc(fused[#loc47, #loc46])
#loc177 = loc(fused[#loc48, #loc49])
#loc178 = loc(fused[#loc51, #loc49])
#loc179 = loc(fused[#loc53, #loc52])
#loc180 = loc(fused[#loc54, #loc55])
#loc181 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc182 = loc(fused[#loc61, #loc62])
#loc183 = loc(fused[#loc63, #loc64])
#loc184 = loc(fused[#loc66, #loc67, #loc68, #loc62])
#loc185 = loc(fused[#loc69, #loc70])
#loc186 = loc(fused[#loc75, #loc76])
#loc187 = loc(fused[#loc77, #loc78])
#loc188 = loc(fused[#loc80, #loc79])
#loc189 = loc(fused[#loc81, #loc82])
#loc190 = loc(fused[#loc84, #loc82])
#loc191 = loc(fused[#loc86, #loc85])
#loc192 = loc(fused[#loc87, #loc88])
#loc193 = loc(fused[#loc90, #loc88])
#loc194 = loc(fused[#loc91, #loc92])
#loc195 = loc(fused[#loc93, #loc94])
#loc196 = loc(fused[#loc96, #loc97, #loc98, #loc92])
#loc197 = loc(fused[#loc99, #loc100])
#loc198 = loc(fused[#loc106, #loc107])
#loc199 = loc(fused[#loc108, #loc109])
#loc200 = loc(fused[#loc111, #loc110])
#loc201 = loc(fused[#loc112, #loc113])
#loc202 = loc(fused[#loc115, #loc116, #loc117, #loc113])
#loc203 = loc(fused[#loc121, #loc120])
#loc204 = loc(fused[#loc122, #loc123])
#loc205 = loc(fused[#loc125, #loc123])
#loc206 = loc(fused[#loc126, #loc127])
#loc207 = loc(fused[#loc128, #loc129])
#loc208 = loc(fused[#loc133, #loc134])
#loc209 = loc(fused[#loc135, #loc136])
#loc210 = loc(fused[#loc138, #loc137])
#loc211 = loc(fused[#loc139, #loc140])
#loc212 = loc(fused[#loc142, #loc140])
#loc213 = loc(fused[#loc144, #loc143])
#loc214 = loc(fused[#loc145, #loc146])
#loc215 = loc(fused[#loc148, #loc146])
#loc216 = loc(fused[#loc149, #loc150])
#loc217 = loc(fused[#loc151, #loc152])
