!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc89)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_32.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_32_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc95)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc97)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc98)
    %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc99)
    cir.store %3, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
    cir.store %3, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc28)
    cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %8 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb2 loc(#loc102)
  ^bb2:  // pred: ^bb1
    %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc95)
    cir.store %10, %1 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc95)
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // pred: ^bb2
    %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
    %12 = cir.const #cir.int<3> : !s32i loc(#loc38)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc38)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc38)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc38)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc38)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc38)
    %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc38)
    %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc89)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
    %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
    %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
    %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc104)
    cir.brcond %25 ^bb4, ^bb5 loc(#loc105)
  ^bb4:  // pred: ^bb3
    %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
    %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc46)
    cir.store %27, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    cir.br ^bb6 loc(#loc43)
  ^bb5:  // pred: ^bb3
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb6 loc(#loc36)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc36)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc34)
  ^bb8:  // pred: ^bb7
    %30 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %31 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc51)
    cir.store %30, %31 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.br ^bb9 loc(#loc31)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc108)
  ^bb10:  // pred: ^bb9
    %32 = cir.load deref %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.store %33, %2 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %34 = cir.const #cir.int<4> : !u64i loc(#loc12)
    cir.br ^bb11 loc(#loc12)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc12)
  ^bb12:  // pred: ^bb11
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %36 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %37 = cir.cmp(gt, %35, %36) : !s32i, !cir.bool loc(#loc12)
    cir.brcond %37 ^bb13, ^bb14 loc(#loc12)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc12)
  ^bb14:  // pred: ^bb12
    %38 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
    %40 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
    %41 = cir.cast(array_to_ptrdecay, %40 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
    %42 = cir.const #cir.int<54> : !s32i loc(#loc12)
    %43 = cir.cast(integral, %42 : !s32i), !u32i loc(#loc12)
    %44 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @__assert_fail(%39, %41, %43, %45) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
    cir.br ^bb15 loc(#loc12)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc12)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc12)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc54)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc14)
  } loc(#loc93)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc109)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc60)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc112)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc113)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc115)
    %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc116)
    cir.store %2, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    cir.store %2, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc74)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    %9 = cir.const #cir.int<5> : !s32i loc(#loc79)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %11 = cir.binop(add, %9, %10) nsw : !s32i loc(#loc79)
    cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %13 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    cir.store %12, %13 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb2 loc(#loc77)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc121)
  ^bb3:  // pred: ^bb2
    %14 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
    %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %16 = cir.const #cir.int<4> : !u64i loc(#loc60)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
    %18 = cir.const #cir.int<5> : !s32i loc(#loc60)
    %19 = cir.cmp(gt, %17, %18) : !s32i, !cir.bool loc(#loc60)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc60)
  ^bb6:  // pred: ^bb5
    cir.br ^bb8 loc(#loc60)
  ^bb7:  // pred: ^bb5
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc60)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc60)
    %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc60)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc60)
    %24 = cir.const #cir.int<79> : !s32i loc(#loc60)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc60)
    %26 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc60)
    %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @__assert_fail(%21, %23, %25, %27) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc60)
    cir.br ^bb8 loc(#loc60)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc60)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc86)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc62)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_32.c":46:27)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_32.c":54:9)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_32.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_32.c":56:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:9)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:21)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_32.c":37:13)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_32.c":37:49)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:9)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:21)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_32.c":29:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_32.c":29:9)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_32.c":30:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_32.c":30:22)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_32.c":31:5)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_32.c":31:22)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:13)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:12)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_32.c":33:5)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_32.c":34:5)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_32.c":50:5)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_32.c":35:20)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_32.c":36:9)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_32.c":48:9)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:13)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_32.c":47:13)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:23)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:36)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:53)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:17)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_32.c":39:63)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_32.c":40:13)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_32.c":43:13)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_32.c":45:13)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:29)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:24)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:17)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_32.c":42:40)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_32.c":46:17)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:21)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:10)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_32.c":49:9)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_32.c":51:5)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_32.c":55:5)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_32.c":52:20)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_32.c":83:1)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_32.c":86:1)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_32.c":85:5)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_32.c":85:13)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_32.c":79:9)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_32.c":63:1)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_32.c":81:1)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:9)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:21)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:9)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:21)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_32.c":65:5)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_32.c":65:9)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_32.c":66:5)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_32.c":66:22)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_32.c":67:5)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_32.c":67:22)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:13)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:12)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_32.c":69:5)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_32.c":70:5)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_32.c":75:5)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_32.c":71:20)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:16)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:29)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_32.c":73:9)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:21)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:10)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_32.c":74:9)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_32.c":76:5)
#loc86 = loc("CWE617_Reachable_Assertion__fgets_32.c":80:5)
#loc87 = loc("CWE617_Reachable_Assertion__fgets_32.c":77:20)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc10, #loc11])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc17, #loc18])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc21, #loc22])
#loc98 = loc(fused[#loc23, #loc24])
#loc99 = loc(fused[#loc25, #loc26])
#loc100 = loc(fused[#loc29, #loc27])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc35, #loc36])
#loc104 = loc(fused[#loc40, #loc41])
#loc105 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc106 = loc(fused[#loc47, #loc48])
#loc107 = loc(fused[#loc52, #loc50])
#loc108 = loc(fused[#loc53, #loc54])
#loc109 = loc(fused[#loc56, #loc57])
#loc110 = loc(fused[#loc58, #loc59])
#loc111 = loc(fused[#loc61, #loc62])
#loc112 = loc(fused[#loc63, #loc64])
#loc113 = loc(fused[#loc65, #loc66])
#loc114 = loc(fused[#loc67, #loc68])
#loc115 = loc(fused[#loc69, #loc70])
#loc116 = loc(fused[#loc71, #loc72])
#loc117 = loc(fused[#loc75, #loc73])
#loc118 = loc(fused[#loc76, #loc77])
#loc119 = loc(fused[#loc81, #loc80])
#loc120 = loc(fused[#loc84, #loc82])
#loc121 = loc(fused[#loc85, #loc86])
