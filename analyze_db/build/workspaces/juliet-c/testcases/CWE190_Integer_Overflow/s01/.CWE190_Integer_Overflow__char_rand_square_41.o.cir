!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":24:21)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":24:26)
#loc39 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":66:25)
#loc40 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":66:30)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":47:25)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":47:30)
#loc93 = loc(fused[#loc7, #loc8])
#loc105 = loc(fused[#loc39, #loc40])
#loc115 = loc(fused[#loc70, #loc71])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printHexCharLine(!s8i) loc(#loc91)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc95)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc14)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc14)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc13)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc13)
      %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc14)
      %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc14)
      cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc95)
      %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc15)
      cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc16)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc97)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc21)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc21)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc98)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc23)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
      cir.yield %22 : !u32i loc(#loc23)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc23)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc23)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc23)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc23)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc23)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc23)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc23)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc23)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc23)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc23)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc23)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc23)
      cir.yield %26 : !u32i loc(#loc23)
    }) : (!cir.bool) -> !u32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc23)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc23)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc99)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    cir.call @badSink(%10) : (!s8i) -> () loc(#loc26)
    cir.return loc(#loc18)
  } loc(#loc96)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_square_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc100)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func internal private @goodB2GSink(%arg0: !s8i loc(fused[#loc39, #loc40])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc41)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc44)
      %2 = cir.cast(integral, %1 : !s8i), !s64i loc(#loc44)
      %3 = cir.cast(integral, %2 : !s64i), !s32i loc(#loc44)
      %4 = cir.abs %3 poison : !s32i loc(#loc45)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc45)
      %6 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc46)
      %7 = cir.const #cir.int<127> : !s32i loc(#loc47)
      %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc47)
      %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc46)
      %10 = cir.cast(float_to_int, %9 : !cir.double), !s64i loc(#loc46)
      %11 = cir.cmp(le, %5, %10) : !s64i, !cir.bool loc(#loc107)
      cir.if %11 {
        %12 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc109)
        %13 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc54)
        %14 = cir.cast(integral, %13 : !s8i), !s32i loc(#loc54)
        %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc53)
        %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc53)
        %17 = cir.binop(mul, %14, %16) nsw : !s32i loc(#loc54)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc54)
        cir.store %18, %12 : !s8i, !cir.ptr<!s8i> loc(#loc109)
        %19 = cir.load %12 : !cir.ptr<!s8i>, !s8i loc(#loc55)
        cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc56)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc38)
  } loc(#loc104)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc111)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc62)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc62)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc64)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc64)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc64)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc64)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc64)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc64)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc64)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc64)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc64)
      cir.yield %22 : !u32i loc(#loc64)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc64)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc64)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc64)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc64)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc64)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc64)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc64)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc64)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc64)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc64)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc64)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc64)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc64)
      cir.yield %26 : !u32i loc(#loc64)
    }) : (!cir.bool) -> !u32i loc(#loc64)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc64)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc64)
    cir.store %9, %0 : !s8i, !cir.ptr<!s8i> loc(#loc113)
    %10 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc66)
    cir.call @goodB2GSink(%10) : (!s8i) -> () loc(#loc67)
    cir.return loc(#loc59)
  } loc(#loc110)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc70, #loc71])) extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc115)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc72)
    cir.scope {
      %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc117)
      %2 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc77)
      %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc77)
      %4 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
      %5 = cir.cast(integral, %4 : !s8i), !s32i loc(#loc76)
      %6 = cir.binop(mul, %3, %5) nsw : !s32i loc(#loc77)
      %7 = cir.cast(integral, %6 : !s32i), !s8i loc(#loc77)
      cir.store %7, %1 : !s8i, !cir.ptr<!s8i> loc(#loc117)
      %8 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc78)
      cir.call @printHexCharLine(%8) : (!s8i) -> () loc(#loc79)
    } loc(#loc116)
    cir.return loc(#loc69)
  } loc(#loc114)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc119)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc84)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc84)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc120)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc86)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc86)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc121)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc88)
    cir.call @goodG2BSink(%5) : (!s8i) -> () loc(#loc89)
    cir.return loc(#loc81)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_square_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":31:1)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":30:5)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":28:9)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":28:30)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":28:23)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":29:26)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":33:1)
#loc18 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":40:1)
#loc19 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":35:10)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":36:12)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":38:18)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":39:13)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":39:5)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":89:1)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":93:1)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":91:5)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":91:13)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":92:13)
#loc33 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":76:19)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":66:1)
#loc38 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":78:1)
#loc41 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":67:1)
#loc42 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:5)
#loc43 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":77:5)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:19)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:9)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:34)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:47)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":69:55)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":70:5)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":73:5)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":75:5)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":71:9)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":71:30)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":71:23)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":72:26)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":72:9)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":76:9)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":80:1)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":87:1)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":82:5)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":82:10)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":83:12)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":83:5)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":85:18)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":85:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":86:17)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":86:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":47:1)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":54:1)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":48:1)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":49:5)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":53:5)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":51:9)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":51:30)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":51:23)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":52:26)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":52:9)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":56:1)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":63:1)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":58:5)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":58:10)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":59:12)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":59:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":61:12)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":61:5)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":62:17)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_square_41.c":62:5)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc12, #loc13])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc19, #loc20])
#loc98 = loc(fused[#loc22, #loc21])
#loc99 = loc(fused[#loc24, #loc23])
#loc100 = loc(fused[#loc27, #loc28])
#loc101 = loc(fused[#loc29, #loc30])
#loc102 = loc(fused[#loc31, #loc32])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc37, #loc38])
#loc106 = loc(fused[#loc42, #loc43])
#loc107 = loc(fused[#loc45, #loc48])
#loc108 = loc(fused[#loc49, #loc50, #loc51, #loc43])
#loc109 = loc(fused[#loc52, #loc53])
#loc110 = loc(fused[#loc58, #loc59])
#loc111 = loc(fused[#loc60, #loc61])
#loc112 = loc(fused[#loc63, #loc62])
#loc113 = loc(fused[#loc65, #loc64])
#loc114 = loc(fused[#loc68, #loc69])
#loc116 = loc(fused[#loc73, #loc74])
#loc117 = loc(fused[#loc75, #loc76])
#loc118 = loc(fused[#loc80, #loc81])
#loc119 = loc(fused[#loc82, #loc83])
#loc120 = loc(fused[#loc85, #loc84])
#loc121 = loc(fused[#loc87, #loc86])
