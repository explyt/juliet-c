!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc1 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":25:16)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":25:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":48:20)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":48:27)
#loc48 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":67:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":67:27)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc71 = loc(fused[#loc8, #loc9])
#loc78 = loc(fused[#loc30, #loc31])
#loc85 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc1)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc1)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc1)
    cir.return loc(#loc1)
  } loc(#loc1)
  cir.func private @printIntLine(!s32i) loc(#loc68)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc69)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_549badSink_eEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc8, #loc9])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc71)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc73)
      %2 = cir.const #cir.int<8> : !u64i loc(#loc74)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc16)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc74)
      cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc14)
      cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc73)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc18)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc75)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc20)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc21)
      %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc76)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc23)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc25)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc26)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc27)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc26)
    } loc(#loc72)
    cir.return loc(#loc7)
  } loc(#loc70)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5413goodG2BSink_eEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc30, #loc31])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc78)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc32)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc80)
      %2 = cir.const #cir.int<8> : !u64i loc(#loc81)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc81)
      cir.call @_ZN12TwoIntsClassC2Ev(%5) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr1) loc(#loc36)
      cir.store %5, %1 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc80)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc39)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc40)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc82)
      %9 = cir.const #cir.int<10> : !s32i loc(#loc41)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc42)
      %11 = cir.get_member %10[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc22)
      cir.store %9, %11 : !s32i, !cir.ptr<!s32i> loc(#loc83)
      %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc43)
      %13 = cir.get_member %12[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc19)
      %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc45)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc46)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc47)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc46)
    } loc(#loc79)
    cir.return loc(#loc29)
  } loc(#loc77)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc48)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc48)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc48)
    cir.return loc(#loc48)
  } loc(#loc48)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_5413goodB2GSink_eEPc(%arg0: !cir.ptr<!s8i> loc(fused[#loc51, #loc52])) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc85)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc53)
    cir.scope {
      %1 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc87)
      %2 = cir.const #cir.int<4> : !u64i loc(#loc88)
      %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc88)
      cir.call @_ZN11OneIntClassC2Ev(%5) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr1) loc(#loc57)
      cir.store %5, %1 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc87)
      %6 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc61)
      %8 = cir.get_member %7[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc62)
      cir.store %6, %8 : !s32i, !cir.ptr<!s32i> loc(#loc89)
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc63)
      %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc62)
      %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc64)
      cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc65)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc66)
    } loc(#loc86)
    cir.return loc(#loc50)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":0:0)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc4 = loc("/usr/include/stdlib.h":687:1)
#loc5 = loc("/usr/include/stdlib.h":687:32)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":25:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":41:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":26:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":27:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":40:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":33:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":33:45)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":33:35)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":33:39)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":35:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":35:9)
#loc19 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":36:28)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":36:9)
#loc22 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":37:22)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":37:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":37:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":39:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":39:14)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":48:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":64:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":49:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":50:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":63:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":56:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":56:45)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":56:35)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":56:39)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":58:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":58:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":59:28)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":59:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":60:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":60:32)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":60:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":62:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":62:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":67:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":81:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":68:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":69:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":80:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":75:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":75:44)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":75:34)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":75:38)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":77:28)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":77:9)
#loc62 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":78:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":78:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":78:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":79:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_54e.cpp":79:14)
#loc68 = loc(fused[#loc2, #loc3])
#loc69 = loc(fused[#loc4, #loc5])
#loc70 = loc(fused[#loc6, #loc7])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc15, #loc14])
#loc75 = loc(fused[#loc18, #loc17])
#loc76 = loc(fused[#loc21, #loc20])
#loc77 = loc(fused[#loc28, #loc29])
#loc79 = loc(fused[#loc33, #loc34])
#loc80 = loc(fused[#loc35, #loc36])
#loc81 = loc(fused[#loc37, #loc36])
#loc82 = loc(fused[#loc40, #loc39])
#loc83 = loc(fused[#loc42, #loc41])
#loc84 = loc(fused[#loc49, #loc50])
#loc86 = loc(fused[#loc54, #loc55])
#loc87 = loc(fused[#loc56, #loc57])
#loc88 = loc(fused[#loc58, #loc57])
#loc89 = loc(fused[#loc61, #loc60])
