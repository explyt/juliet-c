!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B2.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc145)
  cir.global "private" constant cir_private @__const.goodG2B1.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc146)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc147)
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc148)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc149)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc150)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc151)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc154)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc156)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc25)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc157)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc148)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc29)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc31)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc32)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc160)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc161)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc40)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc40)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc165)
          cir.if %15 {
            %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc42)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc44)
            cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
          } loc(#loc166)
        } loc(#loc164)
      } loc(#loc159)
    } loc(#loc158)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc147)
      %3 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc147)
      cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc147)
      %4 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc47)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc49)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc50)
      %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc51)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc50)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc52)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc168)
      %13 = cir.call @strncpy(%5, %6, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc47)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc53)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc55)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc56)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc55)
    } loc(#loc167)
    cir.return loc(#loc22)
  } loc(#loc155)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc169)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc70)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc172)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc74)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc79)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc80)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc81)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc80)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc80)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc178)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc179)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc79)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc90)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc90)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc183)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc92)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc94)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc92)
          } loc(#loc184)
        } loc(#loc182)
      } loc(#loc177)
    } loc(#loc176)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc146)
      %3 = cir.get_global @__const.goodG2B1.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc146)
      cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc146)
      %4 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc97)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc98)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc99)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc100)
      %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc101)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc100)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc102)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc102)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc186)
      %13 = cir.call @strncpy(%5, %6, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc97)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc103)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc104)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc105)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc105)
    } loc(#loc185)
    cir.return loc(#loc67)
  } loc(#loc173)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc188)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc111)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc189)
    cir.scope {
      %2 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc148)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc115)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc117)
        %6 = cir.const #cir.int<10> : !s32i loc(#loc118)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc118)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc118)
        %10 = cir.const #cir.int<1> : !u64i loc(#loc192)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc193)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc194)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc128)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc128)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc197)
          cir.if %17 {
            %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc130)
            %19 = cir.const #cir.int<1> : !s32i loc(#loc131)
            %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc132)
            cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc130)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc191)
    } loc(#loc190)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc145)
      %3 = cir.get_global @__const.goodG2B2.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc145)
      cir.copy %3 to %2 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc145)
      %4 = cir.get_global @strncpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i>>> loc(#loc135)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc137)
      %7 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc138)
      %8 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc139)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc138)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc140)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc140)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc200)
      %13 = cir.call @strncpy(%5, %6, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc135)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc142)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc143)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc199)
    cir.return loc(#loc108)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":90:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":90:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":69:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":69:29)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":39:9)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":39:29)
#loc7 = loc("../../../testcasesupport/std_testcase.h":109:1)
#loc8 = loc("../../../testcasesupport/std_testcase.h":109:18)
#loc9 = loc("/usr/include/stdlib.h":672:1)
#loc10 = loc("/usr/include/stdlib.h":672:45)
#loc11 = loc("/usr/include/stdlib.h":756:1)
#loc12 = loc("/usr/include/stdlib.h":756:70)
#loc13 = loc("/usr/include/string.h":144:1)
#loc14 = loc("/usr/include/string.h":146:14)
#loc15 = loc("/usr/include/string.h":407:1)
#loc16 = loc("/usr/include/string.h":408:33)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":28:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":46:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":30:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":30:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":31:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":31:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":32:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":37:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":32:8)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":33:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:31)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:45)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:46)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":35:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:37)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:21)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:27)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:28)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:34)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":36:33)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":38:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":45:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:17)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:23)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:31)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:38)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":42:48)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":43:19)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":44:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":44:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":99:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":103:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":101:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":101:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":102:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":102:14)
#loc63 = loc("../../../testcasesupport/std_testcase.h":110:1)
#loc64 = loc("../../../testcasesupport/std_testcase.h":110:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":60:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":53:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":76:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":55:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":55:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":56:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":56:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":57:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":67:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":57:8)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":58:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":61:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":63:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":60:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:24)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:32)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:35)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:38)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:49)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:31)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:50)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":65:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:37)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:27)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:28)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":66:33)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":68:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":75:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:31)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:38)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":72:48)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":73:19)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":73:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":74:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":74:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":79:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":97:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":81:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":81:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":82:12)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":82:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":83:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":88:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":83:8)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":84:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:32)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:38)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:49)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:50)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":86:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:37)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:13)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:21)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:27)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:34)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":87:33)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":89:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":96:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:17)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:23)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:31)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:38)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":93:48)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":94:19)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":94:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":95:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_ncpy_09.c":95:14)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc15, #loc16])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc19, #loc20])
#loc155 = loc(fused[#loc21, #loc22])
#loc156 = loc(fused[#loc23, #loc24])
#loc157 = loc(fused[#loc26, #loc25])
#loc158 = loc(fused[#loc27, #loc28])
#loc159 = loc(fused[#loc30, #loc28])
#loc160 = loc(fused[#loc33, #loc34])
#loc161 = loc(fused[#loc32, #loc34])
#loc162 = loc(fused[#loc31, #loc35])
#loc163 = loc(fused[#loc36, #loc35])
#loc164 = loc(fused[#loc37, #loc38])
#loc165 = loc(fused[#loc39, #loc40])
#loc166 = loc(fused[#loc41, #loc38])
#loc167 = loc(fused[#loc45, #loc46])
#loc168 = loc(fused[#loc50, #loc52])
#loc169 = loc(fused[#loc57, #loc58])
#loc170 = loc(fused[#loc59, #loc60])
#loc171 = loc(fused[#loc61, #loc62])
#loc172 = loc(fused[#loc63, #loc64])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc68, #loc69])
#loc175 = loc(fused[#loc71, #loc70])
#loc176 = loc(fused[#loc72, #loc73])
#loc177 = loc(fused[#loc75, #loc76, #loc77, #loc73])
#loc178 = loc(fused[#loc82, #loc83])
#loc179 = loc(fused[#loc84, #loc83])
#loc180 = loc(fused[#loc79, #loc85])
#loc181 = loc(fused[#loc86, #loc85])
#loc182 = loc(fused[#loc87, #loc88])
#loc183 = loc(fused[#loc89, #loc90])
#loc184 = loc(fused[#loc91, #loc88])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc100, #loc102])
#loc187 = loc(fused[#loc107, #loc108])
#loc188 = loc(fused[#loc109, #loc110])
#loc189 = loc(fused[#loc112, #loc111])
#loc190 = loc(fused[#loc113, #loc114])
#loc191 = loc(fused[#loc116, #loc114])
#loc192 = loc(fused[#loc120, #loc121])
#loc193 = loc(fused[#loc122, #loc121])
#loc194 = loc(fused[#loc117, #loc123])
#loc195 = loc(fused[#loc124, #loc123])
#loc196 = loc(fused[#loc125, #loc126])
#loc197 = loc(fused[#loc127, #loc128])
#loc198 = loc(fused[#loc129, #loc126])
#loc199 = loc(fused[#loc133, #loc134])
#loc200 = loc(fused[#loc138, #loc140])
