!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":25:65)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":25:73)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":39:69)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":39:77)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":49:69)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":49:77)
#loc57 = loc(fused[#loc5, #loc6])
#loc61 = loc(fused[#loc17, #loc18])
#loc67 = loc(fused[#loc35, #loc36])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printLongLongLine(!s64i) loc(#loc55)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_54e_badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc57)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc59)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc12)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc11)
      %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc12)
      cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc59)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc13)
      cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc14)
    } loc(#loc58)
    cir.return loc(#loc4)
  } loc(#loc56)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_54e_goodG2BSink(%arg0: !s64i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc19)
    cir.scope {
      %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc63)
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc24)
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc23)
      %4 = cir.binop(mul, %2, %3) nsw : !s64i loc(#loc24)
      cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc63)
      %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
      cir.call @printLongLongLine(%5) : (!s64i) -> () loc(#loc26)
    } loc(#loc62)
    cir.return loc(#loc16)
  } loc(#loc60)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc64)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc29)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc65)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc32)
  cir.func  @CWE190_Integer_Overflow__int64_t_fscanf_square_54e_goodB2GSink(%arg0: !s64i loc(fused[#loc35, #loc36])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc37)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc40)
      %2 = cir.call @imaxabs(%1) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc41)
      %3 = cir.cast(int_to_float, %2 : !s64i), !cir.long_double<!cir.f80> loc(#loc41)
      %4 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc42)
      %5 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc43)
      %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc43)
      %7 = cir.call @sqrtl(%6) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc42)
      %8 = cir.cmp(le, %3, %7) : !cir.long_double<!cir.f80>, !s32i loc(#loc69)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc45)
      cir.if %9 {
        %10 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc71)
        %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
        %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc51)
        cir.store %13, %10 : !s64i, !cir.ptr<!s64i> loc(#loc71)
        %14 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc53)
      } else {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc32)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc54)
      } loc(#loc70)
    } loc(#loc68)
    cir.return loc(#loc34)
  } loc(#loc66)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":26:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":27:5)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":29:33)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":29:26)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":30:27)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":30:9)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":39:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":46:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":40:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":45:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":43:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":43:33)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":43:26)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":44:27)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":44:9)
#loc27 = loc("/usr/include/inttypes.h":351:1)
#loc28 = loc("/usr/include/inttypes.h":351:74)
#loc29 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":59:19)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":49:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":61:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":50:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":60:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:27)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:9)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:36)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:42)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:51)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":52:33)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":53:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":56:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":58:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":54:9)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":54:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":54:26)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":55:27)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":55:9)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_54e.c":59:9)
#loc55 = loc(fused[#loc1, #loc2])
#loc56 = loc(fused[#loc3, #loc4])
#loc58 = loc(fused[#loc8, #loc9])
#loc59 = loc(fused[#loc10, #loc11])
#loc60 = loc(fused[#loc15, #loc16])
#loc62 = loc(fused[#loc20, #loc21])
#loc63 = loc(fused[#loc22, #loc23])
#loc64 = loc(fused[#loc27, #loc28])
#loc65 = loc(fused[#loc30, #loc31])
#loc66 = loc(fused[#loc33, #loc34])
#loc68 = loc(fused[#loc38, #loc39])
#loc69 = loc(fused[#loc41, #loc44])
#loc70 = loc(fused[#loc46, #loc47, #loc48, #loc39])
#loc71 = loc(fused[#loc49, #loc50])
