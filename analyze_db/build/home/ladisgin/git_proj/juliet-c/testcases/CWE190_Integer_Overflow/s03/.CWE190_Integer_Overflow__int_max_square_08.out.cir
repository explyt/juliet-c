!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_08.c":182:10)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_08.c":182:14)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_08.c":182:20)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_08.c":182:32)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:28)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:28)
#true = #cir.bool<true> : !cir.bool
#loc233 = loc(fused[#loc50, #loc51])
#loc234 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc211)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.br ^bb1 loc(#loc216)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc217)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc218)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc220)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc222)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc223)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc6)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc25)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc19)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc4)
  } loc(#loc212)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc225)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc226)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc224)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc229)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc230)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc234)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call @CWE190_Integer_Overflow__int_max_square_08_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call @CWE190_Integer_Overflow__int_max_square_08_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc237)
    cir.return %17 : !s32i loc(#loc237)
  } loc(#loc232)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc69)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc239)
    cir.return %2 : !s32i loc(#loc239)
  } loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc245)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc85)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc246)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb3 loc(#loc84)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc248)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc92)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc250)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb21 loc(#loc95)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc251)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
    %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc101)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc101)
    %17 = cir.cmp(gt, %12, %16) : !s32i, !cir.bool loc(#loc252)
    cir.brcond %17 ^bb9, ^bb14 loc(#loc102)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    %19 = cir.abs %18 poison : !s32i loc(#loc104)
    %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc104)
    %21 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc105)
    %22 = cir.const #cir.int<2147483647> : !s32i loc(#loc106)
    %23 = cir.cast(int_to_float, %22 : !s32i), !cir.double loc(#loc106)
    %24 = cir.call @sqrt(%23) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc105)
    %25 = cir.cast(float_to_int, %24 : !cir.double), !s64i loc(#loc105)
    %26 = cir.cmp(lt, %20, %25) : !s64i, !cir.bool loc(#loc253)
    cir.brcond %26 ^bb10, ^bb11 loc(#loc102)
  ^bb10:  // pred: ^bb9
    %27 = cir.const #true loc(#loc102)
    cir.br ^bb12(%27 : !cir.bool) loc(#loc102)
  ^bb11:  // pred: ^bb9
    %28 = cir.const #false loc(#loc102)
    cir.br ^bb12(%28 : !cir.bool) loc(#loc102)
  ^bb12(%29: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_08.c":80:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%29 : !cir.bool) loc(#loc102)
  ^bb14:  // pred: ^bb8
    %30 = cir.const #false loc(#loc102)
    cir.br ^bb15(%30 : !cir.bool) loc(#loc102)
  ^bb15(%31: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_08.c":80:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc102)
  ^bb16:  // pred: ^bb15
    cir.brcond %31 ^bb17, ^bb18 loc(#loc254)
  ^bb17:  // pred: ^bb16
    %32 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    %34 = cir.binop(mul, %32, %33) nsw : !s32i loc(#loc111)
    cir.store %34, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %35 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc113)
    cir.br ^bb19 loc(#loc109)
  ^bb18:  // pred: ^bb16
    %36 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb19 loc(#loc99)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc99)
  ^bb20:  // pred: ^bb19
    cir.br ^bb21 loc(#loc91)
  ^bb21:  // 2 preds: ^bb6, ^bb20
    cir.br ^bb22 loc(#loc91)
  ^bb22:  // pred: ^bb21
    cir.return loc(#loc76)
  } loc(#loc240)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    cir.return %2 : !s32i loc(#loc256)
  } loc(#loc255)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc259)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc125)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc262)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc129)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc263)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.br ^bb3 loc(#loc128)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc128)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc265)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc136)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %9 ^bb6, ^bb20 loc(#loc267)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc268)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc142)
    %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc142)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc142)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc142)
    %15 = cir.cmp(gt, %10, %14) : !s32i, !cir.bool loc(#loc269)
    cir.brcond %15 ^bb8, ^bb13 loc(#loc143)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %17 = cir.abs %16 poison : !s32i loc(#loc145)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc145)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc146)
    %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc147)
    %21 = cir.cast(int_to_float, %20 : !s32i), !cir.double loc(#loc147)
    %22 = cir.call @sqrt(%21) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc146)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s64i loc(#loc146)
    %24 = cir.cmp(lt, %18, %23) : !s64i, !cir.bool loc(#loc270)
    cir.brcond %24 ^bb9, ^bb10 loc(#loc143)
  ^bb9:  // pred: ^bb8
    %25 = cir.const #true loc(#loc143)
    cir.br ^bb11(%25 : !cir.bool) loc(#loc143)
  ^bb10:  // pred: ^bb8
    %26 = cir.const #false loc(#loc143)
    cir.br ^bb11(%26 : !cir.bool) loc(#loc143)
  ^bb11(%27: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_08.c":106:28)):  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc143)
  ^bb12:  // pred: ^bb11
    cir.br ^bb14(%27 : !cir.bool) loc(#loc143)
  ^bb13:  // pred: ^bb7
    %28 = cir.const #false loc(#loc143)
    cir.br ^bb14(%28 : !cir.bool) loc(#loc143)
  ^bb14(%29: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_08.c":106:28)):  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc143)
  ^bb15:  // pred: ^bb14
    cir.brcond %29 ^bb16, ^bb17 loc(#loc271)
  ^bb16:  // pred: ^bb15
    %30 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %31 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc152)
    cir.store %32, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    %33 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc154)
    cir.br ^bb18 loc(#loc150)
  ^bb17:  // pred: ^bb15
    %34 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc155)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb18 loc(#loc140)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc140)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc135)
  ^bb20:  // 2 preds: ^bb5, ^bb19
    cir.br ^bb21 loc(#loc135)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc120)
  } loc(#loc257)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc163)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    cir.br ^bb1 loc(#loc276)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc167)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc167)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc278)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc172)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc172)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc173)
    cir.br ^bb4 loc(#loc170)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc174)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    cir.br ^bb4 loc(#loc166)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc166)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc280)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc281)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc178)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc282)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc283)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc183)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc185)
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc177)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc177)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc158)
  } loc(#loc272)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc286)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc192)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc287)
    cir.br ^bb1 loc(#loc288)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc289)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc196)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc196)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc290)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc199)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.br ^bb3 loc(#loc195)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc195)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc292)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc293)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc203)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc203)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc294)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc295)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc189)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc208)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc210)
    cir.br ^bb8 loc(#loc207)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc202)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc187)
  } loc(#loc284)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_08.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_08.c":37:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_08.c":55:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_08.c":51:13)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_08.c":51:33)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_08.c":39:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_08.c":39:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_08.c":41:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_08.c":41:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_08.c":42:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_08.c":46:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_08.c":42:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_08.c":42:26)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_08.c":43:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_08.c":45:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_08.c":45:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_08.c":47:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_08.c":54:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_08.c":47:8)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_08.c":47:26)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_08.c":48:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_08.c":49:9)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_08.c":53:9)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_08.c":51:26)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_08.c":52:26)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_08.c":52:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_08.c":165:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_08.c":171:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_08.c":167:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_08.c":167:14)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_08.c":168:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_08.c":168:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_08.c":169:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_08.c":169:14)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_08.c":170:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_08.c":170:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_08.c":187:15)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_08.c":189:15)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_08.c":192:15)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_08.c":194:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_08.c":182:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_08.c":197:1)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_08.c":183:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_08.c":185:27)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_08.c":185:22)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_08.c":185:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_08.c":187:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_08.c":188:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_08.c":188:53)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_08.c":189:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_08.c":192:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_08.c":193:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_08.c":193:52)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_08.c":194:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_08.c":196:12)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_08.c":196:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_08.c":25:1)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_08.c":28:1)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_08.c":27:12)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_08.c":27:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_08.c":75:19)
#loc73 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_08.c":87:23)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_08.c":62:1)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_08.c":90:1)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_08.c":82:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_08.c":82:33)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_08.c":64:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_08.c":64:9)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_08.c":66:12)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_08.c":66:5)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_08.c":67:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_08.c":71:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_08.c":67:8)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_08.c":67:26)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_08.c":68:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_08.c":70:16)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_08.c":70:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_08.c":72:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_08.c":89:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_08.c":72:8)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_08.c":72:27)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_08.c":73:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_08.c":76:5)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_08.c":78:5)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_08.c":75:9)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_08.c":88:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:13)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:20)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:35)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:31)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:49)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:62)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_08.c":80:69)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_08.c":81:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_08.c":84:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_08.c":86:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_08.c":82:26)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_08.c":83:26)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_08.c":83:13)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_08.c":87:13)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_08.c":30:1)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_08.c":33:1)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_08.c":32:12)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_08.c":32:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_08.c":93:1)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_08.c":116:1)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_08.c":108:13)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_08.c":108:33)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_08.c":95:5)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_08.c":95:9)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_08.c":97:12)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_08.c":97:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_08.c":98:5)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_08.c":102:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_08.c":98:8)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_08.c":98:26)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_08.c":99:5)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_08.c":101:16)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_08.c":101:9)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_08.c":103:5)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_08.c":115:5)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_08.c":103:8)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_08.c":103:26)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_08.c":104:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_08.c":114:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:13)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:20)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:35)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:31)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:49)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:62)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_08.c":106:69)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_08.c":107:9)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_08.c":110:9)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_08.c":112:9)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_08.c":108:26)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_08.c":109:26)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_08.c":109:13)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_08.c":113:23)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_08.c":113:13)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_08.c":119:1)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_08.c":142:1)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_08.c":138:13)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_08.c":138:33)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_08.c":121:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_08.c":121:9)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_08.c":123:12)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_08.c":123:5)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_08.c":124:5)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_08.c":133:5)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_08.c":124:8)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_08.c":124:27)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_08.c":125:5)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_08.c":128:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_08.c":130:5)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_08.c":127:19)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_08.c":127:9)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_08.c":132:16)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_08.c":132:9)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_08.c":134:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_08.c":141:5)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_08.c":134:8)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_08.c":134:26)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_08.c":135:5)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_08.c":136:9)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_08.c":140:9)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_08.c":138:26)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_08.c":139:26)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_08.c":139:13)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_08.c":145:1)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_08.c":163:1)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_08.c":159:13)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_08.c":159:33)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_08.c":147:5)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_08.c":147:9)
#loc192 = loc("CWE190_Integer_Overflow__int_max_square_08.c":149:12)
#loc193 = loc("CWE190_Integer_Overflow__int_max_square_08.c":149:5)
#loc194 = loc("CWE190_Integer_Overflow__int_max_square_08.c":150:5)
#loc195 = loc("CWE190_Integer_Overflow__int_max_square_08.c":154:5)
#loc196 = loc("CWE190_Integer_Overflow__int_max_square_08.c":150:8)
#loc197 = loc("CWE190_Integer_Overflow__int_max_square_08.c":150:26)
#loc198 = loc("CWE190_Integer_Overflow__int_max_square_08.c":151:5)
#loc199 = loc("CWE190_Integer_Overflow__int_max_square_08.c":153:16)
#loc200 = loc("CWE190_Integer_Overflow__int_max_square_08.c":153:9)
#loc201 = loc("CWE190_Integer_Overflow__int_max_square_08.c":155:5)
#loc202 = loc("CWE190_Integer_Overflow__int_max_square_08.c":162:5)
#loc203 = loc("CWE190_Integer_Overflow__int_max_square_08.c":155:8)
#loc204 = loc("CWE190_Integer_Overflow__int_max_square_08.c":155:26)
#loc205 = loc("CWE190_Integer_Overflow__int_max_square_08.c":156:5)
#loc206 = loc("CWE190_Integer_Overflow__int_max_square_08.c":157:9)
#loc207 = loc("CWE190_Integer_Overflow__int_max_square_08.c":161:9)
#loc208 = loc("CWE190_Integer_Overflow__int_max_square_08.c":159:26)
#loc209 = loc("CWE190_Integer_Overflow__int_max_square_08.c":160:26)
#loc210 = loc("CWE190_Integer_Overflow__int_max_square_08.c":160:13)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc7, #loc8])
#loc215 = loc(fused[#loc10, #loc9])
#loc216 = loc(fused[#loc11, #loc12])
#loc217 = loc(fused[#loc13, #loc14])
#loc218 = loc(fused[#loc15, #loc12])
#loc219 = loc(fused[#loc17, #loc16])
#loc220 = loc(fused[#loc18, #loc19])
#loc221 = loc(fused[#loc20, #loc21])
#loc222 = loc(fused[#loc22, #loc19])
#loc223 = loc(fused[#loc23, #loc24])
#loc224 = loc(fused[#loc28, #loc29])
#loc225 = loc(fused[#loc30, #loc31])
#loc226 = loc(fused[#loc32, #loc33])
#loc227 = loc(fused[#loc34, #loc35])
#loc228 = loc(fused[#loc36, #loc37])
#loc229 = loc(fused[#loc38, #loc39])
#loc230 = loc(fused[#loc40, #loc41])
#loc231 = loc(fused[#loc42, #loc43])
#loc232 = loc(fused[#loc48, #loc49])
#loc235 = loc(fused[#loc59, #loc60])
#loc236 = loc(fused[#loc63, #loc64])
#loc237 = loc(fused[#loc67, #loc66])
#loc238 = loc(fused[#loc68, #loc69])
#loc239 = loc(fused[#loc71, #loc70])
#loc240 = loc(fused[#loc75, #loc76])
#loc241 = loc(fused[#loc77, #loc78])
#loc242 = loc(fused[#loc79, #loc80])
#loc243 = loc(fused[#loc82, #loc81])
#loc244 = loc(fused[#loc83, #loc84])
#loc245 = loc(fused[#loc85, #loc86])
#loc246 = loc(fused[#loc87, #loc84])
#loc247 = loc(fused[#loc89, #loc88])
#loc248 = loc(fused[#loc90, #loc91])
#loc249 = loc(fused[#loc92, #loc93])
#loc250 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc251 = loc(fused[#loc98, #loc99])
#loc252 = loc(fused[#loc100, #loc101])
#loc253 = loc(fused[#loc104, #loc107])
#loc254 = loc(fused[#loc108, #loc109, #loc110, #loc99])
#loc255 = loc(fused[#loc115, #loc116])
#loc256 = loc(fused[#loc118, #loc117])
#loc257 = loc(fused[#loc119, #loc120])
#loc258 = loc(fused[#loc121, #loc122])
#loc259 = loc(fused[#loc123, #loc124])
#loc260 = loc(fused[#loc126, #loc125])
#loc261 = loc(fused[#loc127, #loc128])
#loc262 = loc(fused[#loc129, #loc130])
#loc263 = loc(fused[#loc131, #loc128])
#loc264 = loc(fused[#loc133, #loc132])
#loc265 = loc(fused[#loc134, #loc135])
#loc266 = loc(fused[#loc136, #loc137])
#loc267 = loc(fused[#loc138, #loc135])
#loc268 = loc(fused[#loc139, #loc140])
#loc269 = loc(fused[#loc141, #loc142])
#loc270 = loc(fused[#loc145, #loc148])
#loc271 = loc(fused[#loc149, #loc150, #loc151, #loc140])
#loc272 = loc(fused[#loc157, #loc158])
#loc273 = loc(fused[#loc159, #loc160])
#loc274 = loc(fused[#loc161, #loc162])
#loc275 = loc(fused[#loc164, #loc163])
#loc276 = loc(fused[#loc165, #loc166])
#loc277 = loc(fused[#loc167, #loc168])
#loc278 = loc(fused[#loc169, #loc170, #loc171, #loc166])
#loc279 = loc(fused[#loc175, #loc174])
#loc280 = loc(fused[#loc176, #loc177])
#loc281 = loc(fused[#loc178, #loc179])
#loc282 = loc(fused[#loc180, #loc177])
#loc283 = loc(fused[#loc181, #loc182])
#loc284 = loc(fused[#loc186, #loc187])
#loc285 = loc(fused[#loc188, #loc189])
#loc286 = loc(fused[#loc190, #loc191])
#loc287 = loc(fused[#loc193, #loc192])
#loc288 = loc(fused[#loc194, #loc195])
#loc289 = loc(fused[#loc196, #loc197])
#loc290 = loc(fused[#loc198, #loc195])
#loc291 = loc(fused[#loc200, #loc199])
#loc292 = loc(fused[#loc201, #loc202])
#loc293 = loc(fused[#loc203, #loc204])
#loc294 = loc(fused[#loc205, #loc202])
#loc295 = loc(fused[#loc206, #loc207])
