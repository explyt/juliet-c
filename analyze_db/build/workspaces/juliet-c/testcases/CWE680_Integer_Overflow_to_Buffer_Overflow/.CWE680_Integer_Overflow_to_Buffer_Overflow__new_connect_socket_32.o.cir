!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc230)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc231)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc232)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc233)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc234)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc235)
  cir.func private @close(!s32i) -> !s32i loc(#loc236)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc237)
  cir.func private @printIntLine(!s32i) loc(#loc238)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_323badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc242)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc241)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc29)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc245)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc34)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc247)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc248)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc249)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc250)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc43)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc249)
        cir.scope {
          cir.do {
            cir.scope {
              %16 = cir.const #cir.int<2> : !s32i loc(#loc50)
              %17 = cir.const #cir.int<1> : !u32i loc(#loc51)
              %18 = cir.cast(integral, %17 : !u32i), !s32i loc(#loc51)
              %19 = cir.const #cir.int<6> : !u32i loc(#loc52)
              %20 = cir.cast(integral, %19 : !u32i), !s32i loc(#loc52)
              %21 = cir.call @socket(%16, %18, %20) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
              cir.store %21, %12 : !s32i, !cir.ptr<!s32i> loc(#loc253)
              cir.scope {
                %59 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc59)
                %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc59)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc255)
                cir.if %62 {
                  cir.break loc(#loc61)
                } loc(#loc256)
              } loc(#loc254)
              %22 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc257)
              %23 = cir.const #cir.int<0> : !s32i loc(#loc64)
              %24 = cir.const #cir.int<16> : !u64i loc(#loc258)
              cir.libc.memset %24 bytes from %22 set to %23 : !cir.ptr<!void>, !s32i, !u64i loc(#loc259)
              %25 = cir.const #cir.int<2> : !s32i loc(#loc69)
              %26 = cir.cast(integral, %25 : !s32i), !u16i loc(#loc69)
              %27 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
              cir.store %26, %27 : !u16i, !cir.ptr<!u16i> loc(#loc260)
              %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
              %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
              %30 = cir.call @inet_addr(%29) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc72)
              %31 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
              %32 = cir.get_member %31[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
              cir.store %30, %32 : !u32i, !cir.ptr<!u32i> loc(#loc261)
              %33 = cir.const #cir.int<27015> : !s32i loc(#loc77)
              %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc77)
              %35 = cir.call @htons(%34) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc78)
              %36 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
              cir.store %35, %36 : !u16i, !cir.ptr<!u16i> loc(#loc262)
              cir.scope {
                %59 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                %60 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc264)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc265)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc265)
                %63 = cir.call @connect(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc89)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc90)
                %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc90)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc266)
                cir.if %66 {
                  cir.break loc(#loc92)
                } loc(#loc267)
              } loc(#loc263)
              %37 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              %38 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
              %39 = cir.cast(bitcast, %38 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
              %40 = cir.const #cir.int<3> : !s32i loc(#loc95)
              %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc95)
              %42 = cir.const #cir.int<4> : !u64i loc(#loc95)
              %43 = cir.binop(mul, %41, %42) : !u64i loc(#loc95)
              %44 = cir.const #cir.int<2> : !s32i loc(#loc95)
              %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc95)
              %46 = cir.binop(add, %43, %45) : !u64i loc(#loc95)
              %47 = cir.const #cir.int<1> : !s32i loc(#loc96)
              %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc96)
              %49 = cir.binop(sub, %46, %48) : !u64i loc(#loc268)
              %50 = cir.const #cir.int<0> : !s32i loc(#loc97)
              %51 = cir.call @recv(%37, %39, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc98)
              %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc98)
              cir.store %52, %10 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              cir.scope {
                %59 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc104)
                %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc104)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc271)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc105)
                  cir.yield %64 : !cir.bool loc(#loc105)
                }, false {
                  %64 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc107)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc272)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc105)
                    cir.yield %68 : !cir.bool loc(#loc105)
                  }, false {
                    %68 = cir.const #false loc(#loc105)
                    cir.yield %68 : !cir.bool loc(#loc105)
                  }) : (!cir.bool) -> !cir.bool loc(#loc105)
                  cir.yield %67 : !cir.bool loc(#loc105)
                }) : (!cir.bool) -> !cir.bool loc(#loc105)
                cir.if %63 {
                  cir.break loc(#loc109)
                } loc(#loc273)
              } loc(#loc270)
              %53 = cir.const #cir.int<0> : !s8i loc(#loc110)
              %54 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc111)
              %55 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc112)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc274)
              %57 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc114)
              cir.store %58, %5 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            } loc(#loc252)
            cir.yield loc(#loc47)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc117)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc117)
            cir.condition(%17) loc(#loc117)
          } loc(#loc251)
        } loc(#loc251)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc121)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc277)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc124)
          } loc(#loc278)
        } loc(#loc276)
      } loc(#loc246)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc126)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc279)
    } loc(#loc244)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc281)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc281)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc283)
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc284)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc285)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc140)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc286)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc287)
        cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc288)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc144)
        %16 = cir.call @_Znam(%15) : (!u64i) -> !cir.ptr<!void> loc(#loc145)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc289)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc289)
        cir.store %18, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc290)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc151)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc151)
          cir.store %25, %9 : !u64i, !cir.ptr<!u64i> loc(#loc292)
          cir.for : cond {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc153)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc154)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc154)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc293)
            cir.condition(%29) loc(#loc293)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc156)
              %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
              %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc158)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc159)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc295)
            } loc(#loc294)
            cir.yield loc(#loc150)
          } step {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc160)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc161)
            cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc296)
            cir.yield loc(#loc291)
          } loc(#loc291)
        } loc(#loc291)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc163)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc164)
        %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc162)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc165)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
        cir.delete.array %23 : <!s32i> loc(#loc166)
      } loc(#loc282)
    } loc(#loc280)
    cir.return loc(#loc21)
  } loc(#loc239)
  cir.func internal private @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc299)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc300)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc299)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc300)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc175)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc176)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc303)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc182)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc303)
      %8 = cir.const #cir.int<20> : !s32i loc(#loc183)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc304)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc186)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    } loc(#loc302)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc307)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc192)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc309)
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc310)
        %10 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc311)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc200)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc200)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc312)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc313)
        cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc314)
        %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc204)
        %16 = cir.call @_Znam(%15) : (!u64i) -> !cir.ptr<!void> loc(#loc205)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc315)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc315)
        cir.store %18, %10 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc316)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc211)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc211)
          cir.store %25, %9 : !u64i, !cir.ptr<!u64i> loc(#loc318)
          cir.for : cond {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc213)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc214)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc214)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc319)
            cir.condition(%29) loc(#loc319)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc216)
              %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
              %28 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc218)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc219)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc321)
            } loc(#loc320)
            cir.yield loc(#loc210)
          } step {
            %26 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc220)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc221)
            cir.store %27, %9 : !u64i, !cir.ptr<!u64i> loc(#loc322)
            cir.yield loc(#loc317)
          } loc(#loc317)
        } loc(#loc317)
        %19 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc223)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc224)
        %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc222)
        cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc225)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc226)
        cir.delete.array %23 : <!s32i> loc(#loc226)
      } loc(#loc308)
    } loc(#loc306)
    cir.return loc(#loc168)
  } loc(#loc297)
  cir.func @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_324goodEv() extra(#fn_attr1) {
    cir.call @_ZN65CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32L7goodG2BEv() : () -> () loc(#loc229)
    cir.return loc(#loc228)
  } loc(#loc323)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":81:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc17 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc19 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":46:1)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":129:1)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":48:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":48:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":49:5)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":49:22)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":50:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":50:22)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":52:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":52:12)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":52:5)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":53:5)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":112:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":54:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":54:21)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":54:20)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":55:9)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":110:9)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":60:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":60:17)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":61:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":61:32)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":62:13)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":62:36)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":63:13)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":63:45)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":64:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":99:21)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":65:13)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":98:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:40)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:49)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:62)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:33)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:17)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":74:73)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":75:17)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":78:17)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":75:21)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":75:38)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":76:17)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":77:21)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:24)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:25)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:34)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:37)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:51)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:17)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":79:52)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":80:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":80:17)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":81:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":81:17)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":81:63)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":82:42)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":82:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":82:17)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":82:50)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:17)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":86:17)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:29)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:62)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:63)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:72)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:86)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:21)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":83:92)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":84:17)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":85:21)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:35)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:50)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:63)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:81)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:84)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:30)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:17)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":89:85)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:17)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":93:17)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:21)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:35)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:48)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:51)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":90:65)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":91:17)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":92:21)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":95:43)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":95:29)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":95:17)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":97:29)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":97:24)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":97:17)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":97:40)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":99:20)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":100:13)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":103:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":100:17)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":100:34)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":101:13)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":102:30)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":102:17)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":111:21)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":111:10)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":111:9)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":113:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":128:5)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":114:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":114:21)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":114:20)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":115:9)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":127:9)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":116:13)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":116:20)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":116:30)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":117:13)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":117:18)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":119:25)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":119:32)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":119:42)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":119:13)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":120:41)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":46:6)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":120:32)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":120:50)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":120:13)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:13)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":124:13)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:22)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:18)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:25)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:37)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":122:13)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":123:33)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":123:17)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":123:28)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":123:29)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:44)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":121:43)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":125:26)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":125:37)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":125:38)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":125:13)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":126:23)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":136:1)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":165:1)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":138:5)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":138:9)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":139:5)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":139:22)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":140:5)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":140:22)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":142:13)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":142:12)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":142:5)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":143:5)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":148:5)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":144:9)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":144:21)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":144:20)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":146:16)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":146:9)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":147:21)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":147:10)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":147:9)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":149:5)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":164:5)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":150:9)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":150:21)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":150:20)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":151:9)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":163:9)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":152:13)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":152:20)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":152:30)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":153:13)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":153:18)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":155:25)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":155:32)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":155:42)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":155:13)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":156:41)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":136:13)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":156:32)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":156:50)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":156:13)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:13)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":160:13)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:22)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:18)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:25)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:37)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":158:13)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":159:33)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":159:17)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":159:28)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":159:29)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:44)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":157:43)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":161:26)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":161:37)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":161:38)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":161:13)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":162:23)
#loc227 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":167:1)
#loc228 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":170:1)
#loc229 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_connect_socket_32.cpp":169:5)
#loc230 = loc(fused[#loc1, #loc2])
#loc231 = loc(fused[#loc3, #loc4])
#loc232 = loc(fused[#loc6, #loc7])
#loc233 = loc(fused[#loc8, #loc9])
#loc234 = loc(fused[#loc10, #loc11])
#loc235 = loc(fused[#loc12, #loc13])
#loc236 = loc(fused[#loc14, #loc15])
#loc237 = loc(fused[#loc16, #loc17])
#loc238 = loc(fused[#loc18, #loc19])
#loc239 = loc(fused[#loc20, #loc21])
#loc240 = loc(fused[#loc22, #loc23])
#loc241 = loc(fused[#loc24, #loc25])
#loc242 = loc(fused[#loc26, #loc27])
#loc243 = loc(fused[#loc30, #loc28])
#loc244 = loc(fused[#loc31, #loc32])
#loc245 = loc(fused[#loc33, #loc34])
#loc246 = loc(fused[#loc36, #loc37])
#loc247 = loc(fused[#loc38, #loc39])
#loc248 = loc(fused[#loc40, #loc41])
#loc249 = loc(fused[#loc42, #loc43])
#loc250 = loc(fused[#loc44, #loc45])
#loc251 = loc(fused[#loc46, #loc47])
#loc252 = loc(fused[#loc48, #loc49])
#loc253 = loc(fused[#loc54, #loc55])
#loc254 = loc(fused[#loc56, #loc57])
#loc255 = loc(fused[#loc58, #loc59])
#loc256 = loc(fused[#loc60, #loc57])
#loc257 = loc(fused[#loc62, #loc63])
#loc258 = loc(fused[#loc65, #loc66])
#loc259 = loc(fused[#loc67, #loc68])
#loc260 = loc(fused[#loc71, #loc69])
#loc261 = loc(fused[#loc75, #loc76])
#loc262 = loc(fused[#loc80, #loc81])
#loc263 = loc(fused[#loc82, #loc83])
#loc264 = loc(fused[#loc85, #loc86])
#loc265 = loc(fused[#loc87, #loc88])
#loc266 = loc(fused[#loc89, #loc90])
#loc267 = loc(fused[#loc91, #loc83])
#loc268 = loc(fused[#loc95, #loc96])
#loc269 = loc(fused[#loc99, #loc100])
#loc270 = loc(fused[#loc101, #loc102])
#loc271 = loc(fused[#loc103, #loc104])
#loc272 = loc(fused[#loc106, #loc107])
#loc273 = loc(fused[#loc108, #loc102])
#loc274 = loc(fused[#loc112, #loc110])
#loc275 = loc(fused[#loc115, #loc116])
#loc276 = loc(fused[#loc118, #loc119])
#loc277 = loc(fused[#loc120, #loc121])
#loc278 = loc(fused[#loc122, #loc119])
#loc279 = loc(fused[#loc127, #loc125])
#loc280 = loc(fused[#loc128, #loc129])
#loc281 = loc(fused[#loc130, #loc131])
#loc282 = loc(fused[#loc133, #loc134])
#loc283 = loc(fused[#loc135, #loc136])
#loc284 = loc(fused[#loc135, #loc137])
#loc285 = loc(fused[#loc138, #loc139])
#loc286 = loc(fused[#loc141, #loc142])
#loc287 = loc(fused[#loc140, #loc142])
#loc288 = loc(fused[#loc143, #loc142])
#loc289 = loc(fused[#loc146, #loc147])
#loc290 = loc(fused[#loc148, #loc147])
#loc291 = loc(fused[#loc149, #loc150])
#loc292 = loc(fused[#loc152, #loc151])
#loc293 = loc(fused[#loc153, #loc154])
#loc294 = loc(fused[#loc155, #loc150])
#loc295 = loc(fused[#loc157, #loc156])
#loc296 = loc(fused[#loc161, #loc160])
#loc297 = loc(fused[#loc167, #loc168])
#loc298 = loc(fused[#loc169, #loc170])
#loc299 = loc(fused[#loc171, #loc172])
#loc300 = loc(fused[#loc173, #loc174])
#loc301 = loc(fused[#loc177, #loc175])
#loc302 = loc(fused[#loc178, #loc179])
#loc303 = loc(fused[#loc180, #loc181])
#loc304 = loc(fused[#loc184, #loc183])
#loc305 = loc(fused[#loc187, #loc185])
#loc306 = loc(fused[#loc188, #loc189])
#loc307 = loc(fused[#loc190, #loc191])
#loc308 = loc(fused[#loc193, #loc194])
#loc309 = loc(fused[#loc195, #loc196])
#loc310 = loc(fused[#loc195, #loc197])
#loc311 = loc(fused[#loc198, #loc199])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc200, #loc202])
#loc314 = loc(fused[#loc203, #loc202])
#loc315 = loc(fused[#loc206, #loc207])
#loc316 = loc(fused[#loc208, #loc207])
#loc317 = loc(fused[#loc209, #loc210])
#loc318 = loc(fused[#loc212, #loc211])
#loc319 = loc(fused[#loc213, #loc214])
#loc320 = loc(fused[#loc215, #loc210])
#loc321 = loc(fused[#loc217, #loc216])
#loc322 = loc(fused[#loc221, #loc220])
#loc323 = loc(fused[#loc227, #loc228])
