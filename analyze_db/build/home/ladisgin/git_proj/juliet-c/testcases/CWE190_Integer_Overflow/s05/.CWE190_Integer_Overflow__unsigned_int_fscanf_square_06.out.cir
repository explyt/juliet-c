!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":169:10)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":169:14)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":169:20)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":169:32)
#loc228 = loc(fused[#loc55, #loc56])
#loc229 = loc(fused[#loc57, #loc58])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc204)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc206)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc209)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc211)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc205)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc19)
      } loc(#loc212)
    } loc(#loc210)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc214)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc218)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc217)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc31)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc32)
        } loc(#loc216)
      } loc(#loc215)
    } loc(#loc213)
    cir.return loc(#loc9)
  } loc(#loc207)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc34)
  } loc(#loc219)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc224)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc62)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_06_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc75)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc80)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc235)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc84)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc85)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc237)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc87)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc205)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc88)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc89)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc89)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc87)
      } loc(#loc238)
    } loc(#loc236)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc93)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc240)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc100)
          %7 = cir.cast(integral, %6 : !u32i), !s64i loc(#loc100)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc100)
          %9 = cir.abs %8 poison : !s32i loc(#loc101)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc101)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc102)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc103)
          %14 = cir.const #cir.int<2> : !u32i loc(#loc103)
          %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc103)
          %16 = cir.const #cir.int<1> : !u32i loc(#loc103)
          %17 = cir.binop(add, %15, %16) : !u32i loc(#loc103)
          %18 = cir.cast(int_to_float, %17 : !u32i), !cir.double loc(#loc103)
          %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc102)
          %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc102)
          %21 = cir.cmp(lt, %10, %20) : !s64i, !cir.bool loc(#loc243)
          cir.if %21 {
            %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc245)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc110)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc109)
            %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc246)
            cir.store %25, %22 : !u32i, !cir.ptr<!u32i> loc(#loc245)
            %26 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc111)
            cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc112)
          } else {
            %22 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc75)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc75)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          } loc(#loc244)
        } loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.return loc(#loc77)
  } loc(#loc233)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc118)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc249)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc122)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc251)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc125)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc205)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc126)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc127)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc127)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc125)
      } loc(#loc252)
    } loc(#loc250)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc131)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc254)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc135)
          %7 = cir.cast(integral, %6 : !u32i), !s64i loc(#loc135)
          %8 = cir.cast(integral, %7 : !s64i), !s32i loc(#loc135)
          %9 = cir.abs %8 poison : !s32i loc(#loc136)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc136)
          %11 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc137)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc138)
          %14 = cir.const #cir.int<2> : !u32i loc(#loc138)
          %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc138)
          %16 = cir.const #cir.int<1> : !u32i loc(#loc138)
          %17 = cir.binop(add, %15, %16) : !u32i loc(#loc138)
          %18 = cir.cast(int_to_float, %17 : !u32i), !cir.double loc(#loc138)
          %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc137)
          %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc137)
          %21 = cir.cmp(lt, %10, %20) : !s64i, !cir.bool loc(#loc257)
          cir.if %21 {
            %22 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc145)
            %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc144)
            %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc260)
            cir.store %25, %22 : !u32i, !cir.ptr<!u32i> loc(#loc259)
            %26 = cir.load %22 : !cir.ptr<!u32i>, !u32i loc(#loc146)
            cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc147)
          } else {
            %22 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc148)
            %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc148)
            cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc149)
          } loc(#loc258)
        } loc(#loc256)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc115)
  } loc(#loc247)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc154)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc263)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc159)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc265)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc163)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc163)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc164)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc165)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc165)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc267)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc169)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc170)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc269)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc272)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc176)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc175)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc273)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc272)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc177)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc178)
        } loc(#loc271)
      } loc(#loc270)
    } loc(#loc268)
    cir.return loc(#loc151)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc183)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc276)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc187)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc188)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc278)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc190)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc190)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc280)
      } loc(#loc279)
    } loc(#loc277)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc195)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc282)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc201)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc200)
          %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc286)
          cir.store %9, %6 : !u32i, !cir.ptr<!u32i> loc(#loc285)
          %10 = cir.load %6 : !cir.ptr<!u32i>, !u32i loc(#loc202)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc203)
        } loc(#loc284)
      } loc(#loc283)
    } loc(#loc281)
    cir.return loc(#loc180)
  } loc(#loc274)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":36:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":29:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":46:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":31:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":31:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":32:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":37:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":33:8)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":33:27)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":36:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":36:17)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":45:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":38:8)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":38:27)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":39:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":44:9)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":42:13)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":42:42)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":42:35)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":43:31)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":43:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":152:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":158:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":154:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":154:14)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":155:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":155:14)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":156:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":156:14)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":157:5)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":157:14)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":174:15)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":176:15)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":179:15)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":181:15)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":169:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":184:1)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":170:1)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":172:27)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":172:22)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":172:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":174:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":175:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":175:65)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":176:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":179:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":180:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":180:64)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":181:5)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":183:12)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":183:5)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":65:19)
#loc74 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":77:23)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":53:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":80:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":55:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":55:18)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":56:12)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":56:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":57:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":61:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":57:8)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":57:27)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":58:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":60:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":60:17)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":60:24)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":62:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":79:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":62:8)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":62:27)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":63:5)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":66:5)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":68:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":65:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":78:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:23)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:13)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:37)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:50)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":70:58)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":71:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":74:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":76:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":72:13)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":72:42)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":72:35)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":73:31)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":73:13)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":77:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":83:1)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":105:1)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":85:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":85:18)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":86:12)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":86:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":87:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":91:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":87:8)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":87:27)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":88:5)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":90:9)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":90:17)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":90:24)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":92:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":104:5)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":92:8)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":92:27)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":93:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:9)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":103:9)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:23)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:13)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:37)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:50)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":95:58)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":96:9)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":99:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":101:9)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":97:13)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":97:42)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":97:35)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":98:31)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":98:13)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":102:23)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":102:13)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":108:1)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":130:1)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":110:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":110:18)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":111:12)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":111:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":112:5)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":121:5)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":112:8)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":112:27)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":113:5)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":116:5)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":118:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":115:19)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":115:9)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":120:16)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":120:9)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":122:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":129:5)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":122:8)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":122:27)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":123:5)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":124:9)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":128:9)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":126:13)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":126:42)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":126:35)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":127:31)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":127:13)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":133:1)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":150:1)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":135:5)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":135:18)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":136:12)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":136:5)
#loc185 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":137:5)
#loc186 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":141:5)
#loc187 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":137:8)
#loc188 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":137:27)
#loc189 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":138:5)
#loc190 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":140:16)
#loc191 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":140:9)
#loc192 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":142:5)
#loc193 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":149:5)
#loc194 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":142:8)
#loc195 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":142:27)
#loc196 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":143:5)
#loc197 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":144:9)
#loc198 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":148:9)
#loc199 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":146:13)
#loc200 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":146:42)
#loc201 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":146:35)
#loc202 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":147:31)
#loc203 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_06.c":147:13)
#loc204 = loc(fused[#loc1, #loc2])
#loc205 = loc(fused[#loc3, #loc4])
#loc206 = loc(fused[#loc6, #loc7])
#loc207 = loc(fused[#loc8, #loc9])
#loc208 = loc(fused[#loc10, #loc11])
#loc209 = loc(fused[#loc13, #loc12])
#loc210 = loc(fused[#loc14, #loc15])
#loc211 = loc(fused[#loc16, #loc17])
#loc212 = loc(fused[#loc18, #loc15])
#loc213 = loc(fused[#loc21, #loc22])
#loc214 = loc(fused[#loc23, #loc24])
#loc215 = loc(fused[#loc25, #loc22])
#loc216 = loc(fused[#loc26, #loc27])
#loc217 = loc(fused[#loc28, #loc29])
#loc218 = loc(fused[#loc30, #loc29])
#loc219 = loc(fused[#loc33, #loc34])
#loc220 = loc(fused[#loc35, #loc36])
#loc221 = loc(fused[#loc37, #loc38])
#loc222 = loc(fused[#loc39, #loc40])
#loc223 = loc(fused[#loc41, #loc42])
#loc224 = loc(fused[#loc43, #loc44])
#loc225 = loc(fused[#loc45, #loc46])
#loc226 = loc(fused[#loc47, #loc48])
#loc227 = loc(fused[#loc53, #loc54])
#loc230 = loc(fused[#loc64, #loc65])
#loc231 = loc(fused[#loc68, #loc69])
#loc232 = loc(fused[#loc72, #loc71])
#loc233 = loc(fused[#loc76, #loc77])
#loc234 = loc(fused[#loc78, #loc79])
#loc235 = loc(fused[#loc81, #loc80])
#loc236 = loc(fused[#loc82, #loc83])
#loc237 = loc(fused[#loc84, #loc85])
#loc238 = loc(fused[#loc86, #loc83])
#loc239 = loc(fused[#loc90, #loc91])
#loc240 = loc(fused[#loc92, #loc93])
#loc241 = loc(fused[#loc94, #loc95, #loc96, #loc91])
#loc242 = loc(fused[#loc98, #loc99])
#loc243 = loc(fused[#loc101, #loc104])
#loc244 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc245 = loc(fused[#loc108, #loc109])
#loc246 = loc(fused[#loc110, #loc109])
#loc247 = loc(fused[#loc114, #loc115])
#loc248 = loc(fused[#loc116, #loc117])
#loc249 = loc(fused[#loc119, #loc118])
#loc250 = loc(fused[#loc120, #loc121])
#loc251 = loc(fused[#loc122, #loc123])
#loc252 = loc(fused[#loc124, #loc121])
#loc253 = loc(fused[#loc128, #loc129])
#loc254 = loc(fused[#loc130, #loc131])
#loc255 = loc(fused[#loc132, #loc129])
#loc256 = loc(fused[#loc133, #loc134])
#loc257 = loc(fused[#loc136, #loc139])
#loc258 = loc(fused[#loc140, #loc141, #loc142, #loc134])
#loc259 = loc(fused[#loc143, #loc144])
#loc260 = loc(fused[#loc145, #loc144])
#loc261 = loc(fused[#loc150, #loc151])
#loc262 = loc(fused[#loc152, #loc153])
#loc263 = loc(fused[#loc155, #loc154])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc158, #loc159])
#loc266 = loc(fused[#loc160, #loc161, #loc162, #loc157])
#loc267 = loc(fused[#loc166, #loc165])
#loc268 = loc(fused[#loc167, #loc168])
#loc269 = loc(fused[#loc169, #loc170])
#loc270 = loc(fused[#loc171, #loc168])
#loc271 = loc(fused[#loc172, #loc173])
#loc272 = loc(fused[#loc174, #loc175])
#loc273 = loc(fused[#loc176, #loc175])
#loc274 = loc(fused[#loc179, #loc180])
#loc275 = loc(fused[#loc181, #loc182])
#loc276 = loc(fused[#loc184, #loc183])
#loc277 = loc(fused[#loc185, #loc186])
#loc278 = loc(fused[#loc187, #loc188])
#loc279 = loc(fused[#loc189, #loc186])
#loc280 = loc(fused[#loc191, #loc190])
#loc281 = loc(fused[#loc192, #loc193])
#loc282 = loc(fused[#loc194, #loc195])
#loc283 = loc(fused[#loc196, #loc193])
#loc284 = loc(fused[#loc197, #loc198])
#loc285 = loc(fused[#loc199, #loc200])
#loc286 = loc(fused[#loc201, #loc200])
