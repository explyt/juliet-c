!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":126:10)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":126:14)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":126:20)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":126:32)
#loc148 = loc(fused[#loc51, #loc52])
#loc149 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\0A\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc4)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"snprintf failed!\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc133)
    cir.br ^bb1 loc(#loc134)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc17)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc15)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc132)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc132)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc133)
    cir.br ^bb6 loc(#loc136)
  ^bb6:  // pred: ^bb5
    %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
    %9 = cir.const #cir.int<6> : !u64i loc(#loc137)
    %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc138)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc28)
    %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc139)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc3)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc3)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc4)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc4)
    %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc140)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc141)
  ^bb7:  // pred: ^bb6
    %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc32)
  ^bb11:  // pred: ^bb2
    %23 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb12 loc(#loc34)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc16)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc10)
  } loc(#loc131)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc144)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc142)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc145)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc149)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    cir.return %17 : !s32i loc(#loc152)
  } loc(#loc147)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
    cir.br ^bb1 loc(#loc156)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc77)
    cir.br ^bb2 loc(#loc75)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc75)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc78)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc79)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb12 loc(#loc81)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc157)
  ^bb6:  // pred: ^bb5
    %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc154)
    cir.store %5, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc154)
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc74)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc155)
    cir.br ^bb7 loc(#loc158)
  ^bb7:  // pred: ^bb6
    %7 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc86)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc88)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc88)
    %11 = cir.const #cir.int<6> : !u64i loc(#loc159)
    %12 = cir.binop(sub, %10, %11) : !u64i loc(#loc160)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc91)
    %15 = cir.binop(sub, %12, %14) : !u64i loc(#loc161)
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc92)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc92)
    %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc93)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc93)
    %20 = cir.call @snprintf(%8, %15, %17, %19) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc86)
    %21 = cir.const #cir.int<0> : !s32i loc(#loc94)
    %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %22 ^bb8, ^bb9 loc(#loc163)
  ^bb8:  // pred: ^bb7
    %23 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc96)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc85)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc83)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc98)
  ^bb12:  // 2 preds: ^bb4, ^bb11
    cir.br ^bb13 loc(#loc76)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc70)
  } loc(#loc153)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc107)
    cir.br ^bb2 loc(#loc105)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc105)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc168)
  ^bb5:  // pred: ^bb4
    %3 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc165)
    cir.store %3, %0 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc165)
    %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc104)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    cir.br ^bb6 loc(#loc169)
  ^bb6:  // pred: ^bb5
    %5 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc113)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc115)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc115)
    %9 = cir.const #cir.int<6> : !u64i loc(#loc170)
    %10 = cir.binop(sub, %8, %9) : !u64i loc(#loc171)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc118)
    %13 = cir.binop(sub, %10, %12) : !u64i loc(#loc172)
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc119)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc119)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc120)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc120)
    %18 = cir.call @snprintf(%6, %13, %15, %17) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc113)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc173)
    cir.brcond %20 ^bb7, ^bb8 loc(#loc174)
  ^bb7:  // pred: ^bb6
    %21 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc123)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc123)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc124)
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc112)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc125)
  ^bb11:  // pred: ^bb2
    %23 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc126)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc127)
    cir.br ^bb12 loc(#loc128)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc106)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc100)
  } loc(#loc164)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":385:1)
#loc2 = loc("/usr/include/stdio.h":387:62)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:53)
#loc4 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:61)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":46:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":52:19)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":32:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":55:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":40:9)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":40:32)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":41:9)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":41:23)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":34:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":54:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":34:12)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":36:5)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":37:5)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":48:5)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:9)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":47:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:22)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:27)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:31)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:48)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:50)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":44:76)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":45:9)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":46:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":49:5)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":52:9)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":53:9)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":111:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":115:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":113:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":113:11)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":114:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":114:11)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":131:15)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":133:15)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":136:15)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":138:15)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":126:1)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":141:1)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":127:1)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":129:27)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":129:22)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":129:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":131:5)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":132:5)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":132:76)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":133:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":136:5)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":137:5)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":137:75)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":138:5)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":140:12)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":140:5)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":62:1)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":84:1)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":74:9)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":74:32)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":75:9)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":75:23)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":64:5)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":83:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":64:12)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":66:5)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":68:19)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":68:9)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":69:9)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":71:5)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":81:5)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:9)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":80:9)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:13)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:22)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:27)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:31)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:48)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:50)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:53)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:61)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":77:75)
#loc95 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":78:9)
#loc96 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":79:23)
#loc97 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":79:13)
#loc98 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":82:5)
#loc99 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":87:1)
#loc100 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":109:1)
#loc101 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":95:9)
#loc102 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":95:32)
#loc103 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":96:9)
#loc104 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":96:23)
#loc105 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":89:5)
#loc106 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":108:5)
#loc107 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":89:12)
#loc108 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":91:5)
#loc109 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":92:5)
#loc110 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":102:5)
#loc111 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:9)
#loc112 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":101:9)
#loc113 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:13)
#loc114 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:22)
#loc115 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:27)
#loc116 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:31)
#loc117 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:48)
#loc118 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:50)
#loc119 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:53)
#loc120 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:61)
#loc121 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":98:75)
#loc122 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":99:9)
#loc123 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":100:23)
#loc124 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":100:13)
#loc125 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":103:5)
#loc126 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":106:19)
#loc127 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":106:9)
#loc128 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_snprintf_15.c":107:9)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc5, #loc6])
#loc131 = loc(fused[#loc9, #loc10])
#loc132 = loc(fused[#loc11, #loc12])
#loc133 = loc(fused[#loc13, #loc14])
#loc134 = loc(fused[#loc15, #loc16])
#loc135 = loc(fused[#loc19, #loc20])
#loc136 = loc(fused[#loc21, #loc22])
#loc137 = loc(fused[#loc26, #loc27])
#loc138 = loc(fused[#loc25, #loc27])
#loc139 = loc(fused[#loc25, #loc28])
#loc140 = loc(fused[#loc23, #loc29])
#loc141 = loc(fused[#loc30, #loc22])
#loc142 = loc(fused[#loc35, #loc36])
#loc143 = loc(fused[#loc37, #loc38])
#loc144 = loc(fused[#loc39, #loc40])
#loc145 = loc(fused[#loc41, #loc42])
#loc146 = loc(fused[#loc43, #loc44])
#loc147 = loc(fused[#loc49, #loc50])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc64, #loc65])
#loc152 = loc(fused[#loc68, #loc67])
#loc153 = loc(fused[#loc69, #loc70])
#loc154 = loc(fused[#loc71, #loc72])
#loc155 = loc(fused[#loc73, #loc74])
#loc156 = loc(fused[#loc75, #loc76])
#loc157 = loc(fused[#loc82, #loc83])
#loc158 = loc(fused[#loc84, #loc85])
#loc159 = loc(fused[#loc89, #loc90])
#loc160 = loc(fused[#loc88, #loc90])
#loc161 = loc(fused[#loc88, #loc91])
#loc162 = loc(fused[#loc86, #loc94])
#loc163 = loc(fused[#loc95, #loc85])
#loc164 = loc(fused[#loc99, #loc100])
#loc165 = loc(fused[#loc101, #loc102])
#loc166 = loc(fused[#loc103, #loc104])
#loc167 = loc(fused[#loc105, #loc106])
#loc168 = loc(fused[#loc109, #loc110])
#loc169 = loc(fused[#loc111, #loc112])
#loc170 = loc(fused[#loc116, #loc117])
#loc171 = loc(fused[#loc115, #loc117])
#loc172 = loc(fused[#loc115, #loc118])
#loc173 = loc(fused[#loc113, #loc121])
#loc174 = loc(fused[#loc122, #loc112])
