!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc60 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":217:10)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":217:14)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":217:20)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":217:32)
#loc245 = loc(fused[#loc60, #loc61])
#loc246 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc228)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_sub_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc18)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
            cir.yield %20 : !u32i loc(#loc18)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc18)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc18)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc18)
            cir.yield %24 : !u32i loc(#loc18)
          }) : (!cir.bool) -> !u32i loc(#loc18)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc18)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          cir.break loc(#loc20)
        } loc(#loc17)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc22)
          cir.break loc(#loc23)
        } loc(#loc21)
        cir.yield loc(#loc14)
      } loc(#loc14)
    } loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc31)
            %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc32)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc236)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc34)
          } loc(#loc235)
          cir.break loc(#loc35)
        } loc(#loc27)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc38)
          cir.break loc(#loc39)
        } loc(#loc36)
        cir.yield loc(#loc24)
      } loc(#loc24)
    } loc(#loc234)
    cir.return loc(#loc9)
  } loc(#loc229)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_sub_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc241)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc237)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc242)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc243)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc246)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_sub_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call @CWE191_Integer_Underflow__int_rand_sub_15_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_sub_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call @CWE191_Integer_Underflow__int_rand_sub_15_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc249)
    cir.return %17 : !s32i loc(#loc249)
  } loc(#loc244)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc87)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc89)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc89)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc89)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc89)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc89)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc89)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc89)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc89)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc89)
            cir.yield %20 : !u32i loc(#loc89)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc89)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc89)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc89)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc89)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc89)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc89)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc89)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc89)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc89)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc89)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc89)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc89)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc89)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc89)
            cir.yield %24 : !u32i loc(#loc89)
          }) : (!cir.bool) -> !u32i loc(#loc89)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc89)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
          cir.break loc(#loc91)
        } loc(#loc88)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc93)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc93)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc94)
          cir.break loc(#loc95)
        } loc(#loc92)
        cir.yield loc(#loc85)
      } loc(#loc85)
    } loc(#loc253)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc98)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc100)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc100)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          cir.break loc(#loc102)
        } loc(#loc99)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc107)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc107)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc107)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc257)
            cir.if %8 {
              %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc112)
              %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc113)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc259)
              %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc115)
            } else {
              %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc78)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc78)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc116)
            } loc(#loc258)
          } loc(#loc256)
          cir.break loc(#loc117)
        } loc(#loc103)
        cir.yield loc(#loc96)
      } loc(#loc96)
    } loc(#loc255)
    cir.return loc(#loc80)
  } loc(#loc250)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc122)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc126)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc128)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc128)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc128)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc128)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc128)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc128)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc128)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc128)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc128)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc128)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc128)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc128)
            cir.yield %20 : !u32i loc(#loc128)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc128)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc128)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc128)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc128)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc128)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc128)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc128)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc128)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc128)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc128)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc128)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc128)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc128)
            cir.yield %24 : !u32i loc(#loc128)
          }) : (!cir.bool) -> !u32i loc(#loc128)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc128)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
          cir.break loc(#loc130)
        } loc(#loc127)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc132)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc132)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc133)
          cir.break loc(#loc134)
        } loc(#loc131)
        cir.yield loc(#loc124)
      } loc(#loc124)
    } loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc137)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc142)
            %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc142)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc142)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc142)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc267)
            cir.if %8 {
              %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc269)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              %11 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc148)
              cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc269)
              %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc150)
            } else {
              %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc151)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc151)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc268)
          } loc(#loc266)
          cir.break loc(#loc153)
        } loc(#loc138)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc156)
          cir.break loc(#loc157)
        } loc(#loc154)
        cir.yield loc(#loc135)
      } loc(#loc135)
    } loc(#loc265)
    cir.return loc(#loc119)
  } loc(#loc260)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc166)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc168)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc168)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc169)
          cir.break loc(#loc170)
        } loc(#loc167)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc172)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc173)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
          cir.break loc(#loc175)
        } loc(#loc171)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc273)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc178)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc277)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc183)
            %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc184)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc277)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc185)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc186)
          } loc(#loc276)
          cir.break loc(#loc187)
        } loc(#loc179)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc189)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc189)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc190)
          cir.break loc(#loc191)
        } loc(#loc188)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc275)
    cir.return loc(#loc159)
  } loc(#loc270)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc196)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc200)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc202)
          %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc203)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc282)
          cir.break loc(#loc205)
        } loc(#loc201)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc207)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc207)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc208)
          cir.break loc(#loc209)
        } loc(#loc206)
        cir.yield loc(#loc198)
      } loc(#loc198)
    } loc(#loc281)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc212)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc218)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc217)
            %6 = cir.binop(sub, %4, %5) nsw : !s32i loc(#loc218)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc285)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc219)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc220)
          } loc(#loc284)
          cir.break loc(#loc221)
        } loc(#loc213)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc223)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc223)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc224)
          cir.break loc(#loc225)
        } loc(#loc222)
        cir.yield loc(#loc210)
      } loc(#loc210)
    } loc(#loc283)
    cir.return loc(#loc193)
  } loc(#loc278)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_sub_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":52:1)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":24:9)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":26:12)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":26:5)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":37:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":27:12)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":29:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":31:16)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":32:9)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":36:9)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":38:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":51:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":38:12)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":40:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":41:5)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":45:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":43:9)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":43:29)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":43:22)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":44:22)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":44:9)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":46:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":47:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":49:19)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":49:9)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":50:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":200:1)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":206:1)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":202:5)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":202:14)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":203:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":203:14)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":204:5)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":204:14)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":205:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":205:14)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":222:15)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":224:15)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":227:15)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":229:15)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":217:1)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":232:1)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":218:1)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":220:27)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":220:22)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":220:5)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":222:5)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":223:5)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":223:52)
#loc71 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":224:5)
#loc72 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":227:5)
#loc73 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":228:5)
#loc74 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":228:51)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":229:5)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":231:12)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":231:5)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":90:23)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":59:1)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":94:1)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":61:5)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":61:9)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":63:12)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":63:5)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":64:5)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":74:5)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":64:12)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":66:5)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":68:16)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":68:9)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":69:9)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":70:5)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":72:19)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":72:9)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":73:9)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":75:5)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":93:5)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":75:12)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":77:5)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":79:19)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":79:9)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":80:9)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":81:5)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":83:9)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":91:9)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":83:13)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":83:20)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":84:9)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":87:9)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":89:9)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":85:13)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":85:33)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":85:26)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":86:26)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":86:13)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":90:13)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":92:9)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":97:1)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":132:1)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":99:5)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":99:9)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":101:12)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":101:5)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":102:5)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":112:5)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":102:12)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":104:5)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":106:16)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":106:9)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":107:9)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":108:5)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":110:19)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":110:9)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":111:9)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":113:5)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":131:5)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":113:12)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":115:5)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":117:9)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":125:9)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":117:13)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":117:20)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":118:9)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":121:9)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":123:9)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":119:13)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":119:33)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":119:26)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":120:26)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":120:13)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":124:23)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":124:13)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":126:9)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":127:5)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":129:19)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":129:9)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":130:9)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":135:1)
#loc159 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":165:1)
#loc160 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":137:5)
#loc161 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":137:9)
#loc162 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":139:12)
#loc163 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":139:5)
#loc164 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":140:5)
#loc165 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":150:5)
#loc166 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":140:12)
#loc167 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":142:5)
#loc168 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":144:19)
#loc169 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":144:9)
#loc170 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":145:9)
#loc171 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":146:5)
#loc172 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":148:17)
#loc173 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":148:16)
#loc174 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":148:9)
#loc175 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":149:9)
#loc176 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":151:5)
#loc177 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":164:5)
#loc178 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":151:12)
#loc179 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":153:5)
#loc180 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":154:5)
#loc181 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":158:5)
#loc182 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":156:9)
#loc183 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":156:29)
#loc184 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":156:22)
#loc185 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":157:22)
#loc186 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":157:9)
#loc187 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":159:5)
#loc188 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":160:5)
#loc189 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":162:19)
#loc190 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":162:9)
#loc191 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":163:9)
#loc192 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":168:1)
#loc193 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":198:1)
#loc194 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":170:5)
#loc195 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":170:9)
#loc196 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":172:12)
#loc197 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":172:5)
#loc198 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":173:5)
#loc199 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":183:5)
#loc200 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":173:12)
#loc201 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":175:5)
#loc202 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":177:17)
#loc203 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":177:16)
#loc204 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":177:9)
#loc205 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":178:9)
#loc206 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":179:5)
#loc207 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":181:19)
#loc208 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":181:9)
#loc209 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":182:9)
#loc210 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":184:5)
#loc211 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":197:5)
#loc212 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":184:12)
#loc213 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":186:5)
#loc214 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":187:5)
#loc215 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":191:5)
#loc216 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":189:9)
#loc217 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":189:29)
#loc218 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":189:22)
#loc219 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":190:22)
#loc220 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":190:9)
#loc221 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":192:5)
#loc222 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":193:5)
#loc223 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":195:19)
#loc224 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":195:9)
#loc225 = loc("CWE191_Integer_Underflow__int_rand_sub_15.c":196:9)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc6, #loc7])
#loc229 = loc(fused[#loc8, #loc9])
#loc230 = loc(fused[#loc10, #loc11])
#loc231 = loc(fused[#loc13, #loc12])
#loc232 = loc(fused[#loc14, #loc15])
#loc233 = loc(fused[#loc19, #loc18])
#loc234 = loc(fused[#loc24, #loc25])
#loc235 = loc(fused[#loc28, #loc29])
#loc236 = loc(fused[#loc30, #loc31])
#loc237 = loc(fused[#loc40, #loc41])
#loc238 = loc(fused[#loc42, #loc43])
#loc239 = loc(fused[#loc44, #loc45])
#loc240 = loc(fused[#loc46, #loc47])
#loc241 = loc(fused[#loc48, #loc49])
#loc242 = loc(fused[#loc50, #loc51])
#loc243 = loc(fused[#loc52, #loc53])
#loc244 = loc(fused[#loc58, #loc59])
#loc247 = loc(fused[#loc69, #loc70])
#loc248 = loc(fused[#loc73, #loc74])
#loc249 = loc(fused[#loc77, #loc76])
#loc250 = loc(fused[#loc79, #loc80])
#loc251 = loc(fused[#loc81, #loc82])
#loc252 = loc(fused[#loc84, #loc83])
#loc253 = loc(fused[#loc85, #loc86])
#loc254 = loc(fused[#loc90, #loc89])
#loc255 = loc(fused[#loc96, #loc97])
#loc256 = loc(fused[#loc104, #loc105])
#loc257 = loc(fused[#loc106, #loc107])
#loc258 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc259 = loc(fused[#loc111, #loc112])
#loc260 = loc(fused[#loc118, #loc119])
#loc261 = loc(fused[#loc120, #loc121])
#loc262 = loc(fused[#loc123, #loc122])
#loc263 = loc(fused[#loc124, #loc125])
#loc264 = loc(fused[#loc129, #loc128])
#loc265 = loc(fused[#loc135, #loc136])
#loc266 = loc(fused[#loc139, #loc140])
#loc267 = loc(fused[#loc141, #loc142])
#loc268 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc269 = loc(fused[#loc146, #loc147])
#loc270 = loc(fused[#loc158, #loc159])
#loc271 = loc(fused[#loc160, #loc161])
#loc272 = loc(fused[#loc163, #loc162])
#loc273 = loc(fused[#loc164, #loc165])
#loc274 = loc(fused[#loc174, #loc172])
#loc275 = loc(fused[#loc176, #loc177])
#loc276 = loc(fused[#loc180, #loc181])
#loc277 = loc(fused[#loc182, #loc183])
#loc278 = loc(fused[#loc192, #loc193])
#loc279 = loc(fused[#loc194, #loc195])
#loc280 = loc(fused[#loc197, #loc196])
#loc281 = loc(fused[#loc198, #loc199])
#loc282 = loc(fused[#loc204, #loc202])
#loc283 = loc(fused[#loc210, #loc211])
#loc284 = loc(fused[#loc214, #loc215])
#loc285 = loc(fused[#loc216, #loc217])
