!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" external @CWE190_Integer_Overflow__int64_t_fscanf_square_68_badData : !s64i {alignment = 8 : i64} loc(#loc57)
  cir.func private @printLongLongLine(!s64i) loc(#loc58)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_68b_badSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc60)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_square_68_badData : !cir.ptr<!s64i> loc(#loc57)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc60)
    cir.scope {
      %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc62)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc12)
      %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc13)
      cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc62)
      %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc14)
      cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc15)
    } loc(#loc61)
    cir.return loc(#loc6)
  } loc(#loc59)
  cir.global "private" external @CWE190_Integer_Overflow__int64_t_fscanf_square_68_goodG2BData : !s64i {alignment = 8 : i64} loc(#loc63)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_68b_goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc65)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_square_68_goodG2BData : !cir.ptr<!s64i> loc(#loc63)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc21)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc65)
    cir.scope {
      %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc67)
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc25)
      %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc26)
      cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc67)
      %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc27)
      cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc28)
    } loc(#loc66)
    cir.return loc(#loc19)
  } loc(#loc64)
  cir.global "private" external @CWE190_Integer_Overflow__int64_t_fscanf_square_68_goodB2GData : !s64i {alignment = 8 : i64} loc(#loc68)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc69)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc33)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc36)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_68b_goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_fscanf_square_68_goodB2GData : !cir.ptr<!s64i> loc(#loc68)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc40)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc72)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc44)
      %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc44)
      %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc45)
      %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc46)
      %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc46)
      %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc45)
      %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc74)
      cir.if %10 {
        %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc76)
        %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        %14 = cir.binop(mul, %12, %13) nsw : !s64i loc(#loc53)
        cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc76)
        %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc54)
        cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc55)
      } else {
        %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc36)
        %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc36)
        cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc56)
      } loc(#loc75)
    } loc(#loc73)
    cir.return loc(#loc38)
  } loc(#loc71)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":23:16)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":29:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":37:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":31:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":31:20)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":32:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":36:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":34:9)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":34:33)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":34:26)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":35:27)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":35:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":24:1)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":24:16)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":44:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":52:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":46:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":46:20)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":47:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":51:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":49:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":49:33)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":49:26)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":50:27)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":50:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":25:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":25:16)
#loc31 = loc("/usr/include/inttypes.h":351:1)
#loc32 = loc("/usr/include/inttypes.h":351:74)
#loc33 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":66:19)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":55:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":68:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":57:5)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":57:20)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":67:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:27)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:9)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:36)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:42)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":59:51)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":60:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":63:5)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":65:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":61:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":61:33)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":61:26)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":62:27)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":62:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_68b.c":66:9)
#loc57 = loc(fused[#loc1, #loc2])
#loc58 = loc(fused[#loc3, #loc4])
#loc59 = loc(fused[#loc5, #loc6])
#loc60 = loc(fused[#loc7, #loc8])
#loc61 = loc(fused[#loc9, #loc10])
#loc62 = loc(fused[#loc11, #loc12])
#loc63 = loc(fused[#loc16, #loc17])
#loc64 = loc(fused[#loc18, #loc19])
#loc65 = loc(fused[#loc20, #loc21])
#loc66 = loc(fused[#loc22, #loc23])
#loc67 = loc(fused[#loc24, #loc25])
#loc68 = loc(fused[#loc29, #loc30])
#loc69 = loc(fused[#loc31, #loc32])
#loc70 = loc(fused[#loc34, #loc35])
#loc71 = loc(fused[#loc37, #loc38])
#loc72 = loc(fused[#loc39, #loc40])
#loc73 = loc(fused[#loc41, #loc42])
#loc74 = loc(fused[#loc44, #loc47])
#loc75 = loc(fused[#loc48, #loc49, #loc50, #loc42])
#loc76 = loc(fused[#loc51, #loc52])
