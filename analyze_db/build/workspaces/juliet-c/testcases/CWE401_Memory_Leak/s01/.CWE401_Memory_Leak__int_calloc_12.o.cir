!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc179)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc180)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc181)
  cir.func private @printIntLine(!s32i) loc(#loc182)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc183)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc185)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc188)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc188)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc24)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc25)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc25)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc190)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc191)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc192)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc194)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc36)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc37)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
          } loc(#loc195)
        } loc(#loc193)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc38)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc41)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc196)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc44)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc45)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc46)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc46)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc46)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc46)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc46)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc46)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc46)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
        %13 = cir.const #cir.int<5> : !s32i loc(#loc48)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc51)
        cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc198)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc54)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc55)
      } loc(#loc189)
    } loc(#loc187)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc200)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc200)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc58)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
      cir.if %5 {
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc63)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc64)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc64)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc63)
      } loc(#loc201)
    } loc(#loc199)
    cir.return loc(#loc12)
  } loc(#loc184)
  cir.func no_proto @CWE401_Memory_Leak__int_calloc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc202)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc209)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc209)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc79)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
      cir.if %5 {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc84)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc85)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc85)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc211)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc84)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc212)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc213)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc215)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc95)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc96)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc97)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc95)
          } loc(#loc216)
        } loc(#loc214)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc98)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc100)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc101)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc217)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc104)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc102)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc105)
      } else {
        %6 = cir.get_global @calloc : !cir.ptr<!cir.func<(!u64i, !u64i) -> !cir.ptr<!void>>> loc(#loc106)
        %7 = cir.const #cir.int<100> : !s32i loc(#loc107)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc107)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc218)
        %10 = cir.call @calloc(%8, %9) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc219)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc220)
        cir.scope {
          %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc222)
          cir.if %23 {
            %24 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc117)
            %25 = cir.const #cir.int<1> : !s32i loc(#loc118)
            %26 = cir.unary(minus, %25) nsw : !s32i, !s32i loc(#loc119)
            cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
          } loc(#loc223)
        } loc(#loc221)
        %12 = cir.const #cir.int<5> : !s32i loc(#loc120)
        %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc121)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc122)
        %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc123)
        cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc224)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc125)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc126)
        %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc124)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc127)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc226)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc226)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc130)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc130)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc135)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc136)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc135)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc137)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc138)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc138)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc72)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc143)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc230)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc232)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc232)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc147)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc147)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc152)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc152)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc152)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc152)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc152)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc152)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc152)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc234)
        %13 = cir.const #cir.int<5> : !s32i loc(#loc154)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc156)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc157)
        cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc235)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc158)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc159)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc160)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc158)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc161)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc162)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc162)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc162)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc162)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc162)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc162)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc162)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
        %13 = cir.const #cir.int<5> : !s32i loc(#loc164)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc166)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc167)
        cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc237)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc169)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc170)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc168)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc171)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc239)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc239)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc174)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc174)
      cir.if %5 {
      } else {
      } loc(#loc240)
    } loc(#loc238)
    cir.return loc(#loc140)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_calloc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE401_Memory_Leak__int_calloc_12.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__int_calloc_12.c":55:1)
#loc13 = loc("CWE401_Memory_Leak__int_calloc_12.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__int_calloc_12.c":26:11)
#loc15 = loc("CWE401_Memory_Leak__int_calloc_12.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__int_calloc_12.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__int_calloc_12.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__int_calloc_12.c":44:5)
#loc19 = loc("CWE401_Memory_Leak__int_calloc_12.c":28:8)
#loc20 = loc("CWE401_Memory_Leak__int_calloc_12.c":28:33)
#loc21 = loc("CWE401_Memory_Leak__int_calloc_12.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__int_calloc_12.c":36:5)
#loc23 = loc("CWE401_Memory_Leak__int_calloc_12.c":38:5)
#loc24 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:23)
#loc25 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:30)
#loc26 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:35)
#loc27 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:45)
#loc28 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:46)
#loc29 = loc("CWE401_Memory_Leak__int_calloc_12.c":31:9)
#loc30 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:9)
#loc31 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:37)
#loc32 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:13)
#loc33 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:21)
#loc34 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:27)
#loc35 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:28)
#loc36 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:34)
#loc37 = loc("CWE401_Memory_Leak__int_calloc_12.c":32:33)
#loc38 = loc("CWE401_Memory_Leak__int_calloc_12.c":34:19)
#loc39 = loc("CWE401_Memory_Leak__int_calloc_12.c":34:9)
#loc40 = loc("CWE401_Memory_Leak__int_calloc_12.c":34:14)
#loc41 = loc("CWE401_Memory_Leak__int_calloc_12.c":34:15)
#loc42 = loc("CWE401_Memory_Leak__int_calloc_12.c":35:22)
#loc43 = loc("CWE401_Memory_Leak__int_calloc_12.c":35:27)
#loc44 = loc("CWE401_Memory_Leak__int_calloc_12.c":35:28)
#loc45 = loc("CWE401_Memory_Leak__int_calloc_12.c":35:9)
#loc46 = loc("CWE401_Memory_Leak__int_calloc_12.c":40:23)
#loc47 = loc("CWE401_Memory_Leak__int_calloc_12.c":40:9)
#loc48 = loc("CWE401_Memory_Leak__int_calloc_12.c":42:19)
#loc49 = loc("CWE401_Memory_Leak__int_calloc_12.c":42:9)
#loc50 = loc("CWE401_Memory_Leak__int_calloc_12.c":42:14)
#loc51 = loc("CWE401_Memory_Leak__int_calloc_12.c":42:15)
#loc52 = loc("CWE401_Memory_Leak__int_calloc_12.c":43:22)
#loc53 = loc("CWE401_Memory_Leak__int_calloc_12.c":43:27)
#loc54 = loc("CWE401_Memory_Leak__int_calloc_12.c":43:28)
#loc55 = loc("CWE401_Memory_Leak__int_calloc_12.c":43:9)
#loc56 = loc("CWE401_Memory_Leak__int_calloc_12.c":45:5)
#loc57 = loc("CWE401_Memory_Leak__int_calloc_12.c":54:5)
#loc58 = loc("CWE401_Memory_Leak__int_calloc_12.c":45:8)
#loc59 = loc("CWE401_Memory_Leak__int_calloc_12.c":45:33)
#loc60 = loc("CWE401_Memory_Leak__int_calloc_12.c":46:5)
#loc61 = loc("CWE401_Memory_Leak__int_calloc_12.c":49:5)
#loc62 = loc("CWE401_Memory_Leak__int_calloc_12.c":51:5)
#loc63 = loc("CWE401_Memory_Leak__int_calloc_12.c":53:9)
#loc64 = loc("CWE401_Memory_Leak__int_calloc_12.c":53:14)
#loc65 = loc("CWE401_Memory_Leak__int_calloc_12.c":133:1)
#loc66 = loc("CWE401_Memory_Leak__int_calloc_12.c":137:1)
#loc67 = loc("CWE401_Memory_Leak__int_calloc_12.c":135:5)
#loc68 = loc("CWE401_Memory_Leak__int_calloc_12.c":135:13)
#loc69 = loc("CWE401_Memory_Leak__int_calloc_12.c":136:5)
#loc70 = loc("CWE401_Memory_Leak__int_calloc_12.c":136:13)
#loc71 = loc("CWE401_Memory_Leak__int_calloc_12.c":64:1)
#loc72 = loc("CWE401_Memory_Leak__int_calloc_12.c":96:1)
#loc73 = loc("CWE401_Memory_Leak__int_calloc_12.c":66:5)
#loc74 = loc("CWE401_Memory_Leak__int_calloc_12.c":66:11)
#loc75 = loc("CWE401_Memory_Leak__int_calloc_12.c":67:12)
#loc76 = loc("CWE401_Memory_Leak__int_calloc_12.c":67:5)
#loc77 = loc("CWE401_Memory_Leak__int_calloc_12.c":68:5)
#loc78 = loc("CWE401_Memory_Leak__int_calloc_12.c":85:5)
#loc79 = loc("CWE401_Memory_Leak__int_calloc_12.c":68:8)
#loc80 = loc("CWE401_Memory_Leak__int_calloc_12.c":68:33)
#loc81 = loc("CWE401_Memory_Leak__int_calloc_12.c":69:5)
#loc82 = loc("CWE401_Memory_Leak__int_calloc_12.c":76:5)
#loc83 = loc("CWE401_Memory_Leak__int_calloc_12.c":78:5)
#loc84 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:23)
#loc85 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:30)
#loc86 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:35)
#loc87 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:45)
#loc88 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:46)
#loc89 = loc("CWE401_Memory_Leak__int_calloc_12.c":71:9)
#loc90 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:9)
#loc91 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:37)
#loc92 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:13)
#loc93 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:21)
#loc94 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:27)
#loc95 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:28)
#loc96 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:34)
#loc97 = loc("CWE401_Memory_Leak__int_calloc_12.c":72:33)
#loc98 = loc("CWE401_Memory_Leak__int_calloc_12.c":74:19)
#loc99 = loc("CWE401_Memory_Leak__int_calloc_12.c":74:9)
#loc100 = loc("CWE401_Memory_Leak__int_calloc_12.c":74:14)
#loc101 = loc("CWE401_Memory_Leak__int_calloc_12.c":74:15)
#loc102 = loc("CWE401_Memory_Leak__int_calloc_12.c":75:22)
#loc103 = loc("CWE401_Memory_Leak__int_calloc_12.c":75:27)
#loc104 = loc("CWE401_Memory_Leak__int_calloc_12.c":75:28)
#loc105 = loc("CWE401_Memory_Leak__int_calloc_12.c":75:9)
#loc106 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:23)
#loc107 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:30)
#loc108 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:35)
#loc109 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:45)
#loc110 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:46)
#loc111 = loc("CWE401_Memory_Leak__int_calloc_12.c":80:9)
#loc112 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:9)
#loc113 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:37)
#loc114 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:13)
#loc115 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:21)
#loc116 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:27)
#loc117 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:28)
#loc118 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:34)
#loc119 = loc("CWE401_Memory_Leak__int_calloc_12.c":81:33)
#loc120 = loc("CWE401_Memory_Leak__int_calloc_12.c":83:19)
#loc121 = loc("CWE401_Memory_Leak__int_calloc_12.c":83:9)
#loc122 = loc("CWE401_Memory_Leak__int_calloc_12.c":83:14)
#loc123 = loc("CWE401_Memory_Leak__int_calloc_12.c":83:15)
#loc124 = loc("CWE401_Memory_Leak__int_calloc_12.c":84:22)
#loc125 = loc("CWE401_Memory_Leak__int_calloc_12.c":84:27)
#loc126 = loc("CWE401_Memory_Leak__int_calloc_12.c":84:28)
#loc127 = loc("CWE401_Memory_Leak__int_calloc_12.c":84:9)
#loc128 = loc("CWE401_Memory_Leak__int_calloc_12.c":86:5)
#loc129 = loc("CWE401_Memory_Leak__int_calloc_12.c":95:5)
#loc130 = loc("CWE401_Memory_Leak__int_calloc_12.c":86:8)
#loc131 = loc("CWE401_Memory_Leak__int_calloc_12.c":86:33)
#loc132 = loc("CWE401_Memory_Leak__int_calloc_12.c":87:5)
#loc133 = loc("CWE401_Memory_Leak__int_calloc_12.c":90:5)
#loc134 = loc("CWE401_Memory_Leak__int_calloc_12.c":92:5)
#loc135 = loc("CWE401_Memory_Leak__int_calloc_12.c":89:9)
#loc136 = loc("CWE401_Memory_Leak__int_calloc_12.c":89:14)
#loc137 = loc("CWE401_Memory_Leak__int_calloc_12.c":94:9)
#loc138 = loc("CWE401_Memory_Leak__int_calloc_12.c":94:14)
#loc139 = loc("CWE401_Memory_Leak__int_calloc_12.c":101:1)
#loc140 = loc("CWE401_Memory_Leak__int_calloc_12.c":131:1)
#loc141 = loc("CWE401_Memory_Leak__int_calloc_12.c":103:5)
#loc142 = loc("CWE401_Memory_Leak__int_calloc_12.c":103:11)
#loc143 = loc("CWE401_Memory_Leak__int_calloc_12.c":104:12)
#loc144 = loc("CWE401_Memory_Leak__int_calloc_12.c":104:5)
#loc145 = loc("CWE401_Memory_Leak__int_calloc_12.c":105:5)
#loc146 = loc("CWE401_Memory_Leak__int_calloc_12.c":120:5)
#loc147 = loc("CWE401_Memory_Leak__int_calloc_12.c":105:8)
#loc148 = loc("CWE401_Memory_Leak__int_calloc_12.c":105:33)
#loc149 = loc("CWE401_Memory_Leak__int_calloc_12.c":106:5)
#loc150 = loc("CWE401_Memory_Leak__int_calloc_12.c":112:5)
#loc151 = loc("CWE401_Memory_Leak__int_calloc_12.c":114:5)
#loc152 = loc("CWE401_Memory_Leak__int_calloc_12.c":108:23)
#loc153 = loc("CWE401_Memory_Leak__int_calloc_12.c":108:9)
#loc154 = loc("CWE401_Memory_Leak__int_calloc_12.c":110:19)
#loc155 = loc("CWE401_Memory_Leak__int_calloc_12.c":110:9)
#loc156 = loc("CWE401_Memory_Leak__int_calloc_12.c":110:14)
#loc157 = loc("CWE401_Memory_Leak__int_calloc_12.c":110:15)
#loc158 = loc("CWE401_Memory_Leak__int_calloc_12.c":111:22)
#loc159 = loc("CWE401_Memory_Leak__int_calloc_12.c":111:27)
#loc160 = loc("CWE401_Memory_Leak__int_calloc_12.c":111:28)
#loc161 = loc("CWE401_Memory_Leak__int_calloc_12.c":111:9)
#loc162 = loc("CWE401_Memory_Leak__int_calloc_12.c":116:23)
#loc163 = loc("CWE401_Memory_Leak__int_calloc_12.c":116:9)
#loc164 = loc("CWE401_Memory_Leak__int_calloc_12.c":118:19)
#loc165 = loc("CWE401_Memory_Leak__int_calloc_12.c":118:9)
#loc166 = loc("CWE401_Memory_Leak__int_calloc_12.c":118:14)
#loc167 = loc("CWE401_Memory_Leak__int_calloc_12.c":118:15)
#loc168 = loc("CWE401_Memory_Leak__int_calloc_12.c":119:22)
#loc169 = loc("CWE401_Memory_Leak__int_calloc_12.c":119:27)
#loc170 = loc("CWE401_Memory_Leak__int_calloc_12.c":119:28)
#loc171 = loc("CWE401_Memory_Leak__int_calloc_12.c":119:9)
#loc172 = loc("CWE401_Memory_Leak__int_calloc_12.c":121:5)
#loc173 = loc("CWE401_Memory_Leak__int_calloc_12.c":130:5)
#loc174 = loc("CWE401_Memory_Leak__int_calloc_12.c":121:8)
#loc175 = loc("CWE401_Memory_Leak__int_calloc_12.c":121:33)
#loc176 = loc("CWE401_Memory_Leak__int_calloc_12.c":122:5)
#loc177 = loc("CWE401_Memory_Leak__int_calloc_12.c":125:5)
#loc178 = loc("CWE401_Memory_Leak__int_calloc_12.c":127:5)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc11, #loc12])
#loc185 = loc(fused[#loc13, #loc14])
#loc186 = loc(fused[#loc16, #loc15])
#loc187 = loc(fused[#loc17, #loc18])
#loc188 = loc(fused[#loc19, #loc20])
#loc189 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc190 = loc(fused[#loc26, #loc27])
#loc191 = loc(fused[#loc24, #loc28])
#loc192 = loc(fused[#loc29, #loc28])
#loc193 = loc(fused[#loc30, #loc31])
#loc194 = loc(fused[#loc32, #loc33])
#loc195 = loc(fused[#loc34, #loc31])
#loc196 = loc(fused[#loc39, #loc38])
#loc197 = loc(fused[#loc47, #loc46])
#loc198 = loc(fused[#loc49, #loc48])
#loc199 = loc(fused[#loc56, #loc57])
#loc200 = loc(fused[#loc58, #loc59])
#loc201 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc202 = loc(fused[#loc65, #loc66])
#loc203 = loc(fused[#loc67, #loc68])
#loc204 = loc(fused[#loc69, #loc70])
#loc205 = loc(fused[#loc71, #loc72])
#loc206 = loc(fused[#loc73, #loc74])
#loc207 = loc(fused[#loc76, #loc75])
#loc208 = loc(fused[#loc77, #loc78])
#loc209 = loc(fused[#loc79, #loc80])
#loc210 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc211 = loc(fused[#loc86, #loc87])
#loc212 = loc(fused[#loc84, #loc88])
#loc213 = loc(fused[#loc89, #loc88])
#loc214 = loc(fused[#loc90, #loc91])
#loc215 = loc(fused[#loc92, #loc93])
#loc216 = loc(fused[#loc94, #loc91])
#loc217 = loc(fused[#loc99, #loc98])
#loc218 = loc(fused[#loc108, #loc109])
#loc219 = loc(fused[#loc106, #loc110])
#loc220 = loc(fused[#loc111, #loc110])
#loc221 = loc(fused[#loc112, #loc113])
#loc222 = loc(fused[#loc114, #loc115])
#loc223 = loc(fused[#loc116, #loc113])
#loc224 = loc(fused[#loc121, #loc120])
#loc225 = loc(fused[#loc128, #loc129])
#loc226 = loc(fused[#loc130, #loc131])
#loc227 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc228 = loc(fused[#loc139, #loc140])
#loc229 = loc(fused[#loc141, #loc142])
#loc230 = loc(fused[#loc144, #loc143])
#loc231 = loc(fused[#loc145, #loc146])
#loc232 = loc(fused[#loc147, #loc148])
#loc233 = loc(fused[#loc149, #loc150, #loc151, #loc146])
#loc234 = loc(fused[#loc153, #loc152])
#loc235 = loc(fused[#loc155, #loc154])
#loc236 = loc(fused[#loc163, #loc162])
#loc237 = loc(fused[#loc165, #loc164])
#loc238 = loc(fused[#loc172, #loc173])
#loc239 = loc(fused[#loc174, #loc175])
#loc240 = loc(fused[#loc176, #loc177, #loc178, #loc173])
