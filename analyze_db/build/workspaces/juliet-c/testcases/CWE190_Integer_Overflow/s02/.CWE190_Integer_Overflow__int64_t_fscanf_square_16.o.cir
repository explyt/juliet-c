!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc107)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc109)
  cir.func private @printLongLongLine(!s64i) loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc15)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc115)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc19)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc116)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc21)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc108)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc109)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc109)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc21)
    cir.br ^bb6 loc(#loc23)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc18)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc117)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc117)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %11 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %12 ^bb10, ^bb15 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc118)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc119)
  ^bb12:  // pred: ^bb11
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc30)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc32)
    cir.br ^bb13 loc(#loc29)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc33)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc25)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc25)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc10)
  } loc(#loc111)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_fscanf_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc120)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc123)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc42)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc52)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc129)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc56)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc56)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc130)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc58)
    %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc108)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc59)
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc131)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc131)
    %10 = cir.call @__isoc99_fscanf(%7, %9, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc58)
    cir.br ^bb6 loc(#loc62)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc55)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc55)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc132)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // 2 preds: ^bb8, ^bb17
    %11 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %12 ^bb10, ^bb18 loc(#loc65)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc133)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc134)
  ^bb12:  // pred: ^bb11
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    %14 = cir.call @imaxabs(%13) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc70)
    %15 = cir.cast(int_to_float, %14 : !s64i), !cir.long_double<!cir.f80> loc(#loc70)
    %16 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc71)
    %17 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc72)
    %18 = cir.cast(int_to_float, %17 : !s64i), !cir.long_double<!cir.f80> loc(#loc72)
    %19 = cir.call @sqrtl(%18) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc71)
    %20 = cir.cmp(le, %15, %19) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc135)
    cir.brcond %20 ^bb13, ^bb14 loc(#loc136)
  ^bb13:  // pred: ^bb12
    %21 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %22 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc49)
    %23 = cir.binop(mul, %21, %22) nsw : !s64i loc(#loc77)
    cir.store %23, %0 : !s64i, !cir.ptr<!s64i> loc(#loc126)
    %24 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    cir.call @printLongLongLine(%24) : (!s64i) -> () loc(#loc79)
    cir.br ^bb15 loc(#loc75)
  ^bb14:  // pred: ^bb12
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    cir.br ^bb15 loc(#loc68)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc68)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc81)
  ^bb17:  // no predecessors
    cir.br ^bb9 loc(#loc64)
  ^bb18:  // 2 preds: ^bb9, ^bb16
    cir.br ^bb19 loc(#loc64)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc47)
  } loc(#loc125)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc88)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    cir.br ^bb1 loc(#loc141)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc141)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc92)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<2> : !s32i loc(#loc94)
    %6 = cir.cast(integral, %5 : !s32i), !s64i loc(#loc94)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc143)
    cir.br ^bb6 loc(#loc96)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc91)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc91)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc144)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc144)
  ^bb9:  // 2 preds: ^bb8, ^bb14
    %7 = cir.const #cir.int<1> : !s32i loc(#loc99)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc99)
    cir.brcond %8 ^bb10, ^bb15 loc(#loc99)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc145)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc146)
  ^bb12:  // pred: ^bb11
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc103)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc138)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc104)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc105)
    cir.br ^bb13 loc(#loc102)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc106)
  ^bb14:  // no predecessors
    cir.br ^bb9 loc(#loc98)
  ^bb15:  // 2 preds: ^bb9, ^bb13
    cir.br ^bb16 loc(#loc98)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc83)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":32:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":32:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":44:1)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":39:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":39:37)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":27:13)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":28:12)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":29:11)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":30:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":32:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":32:17)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":35:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":43:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":35:11)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":36:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":41:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":39:30)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":40:31)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":40:13)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":42:9)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":99:1)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":103:1)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":101:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":101:13)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":102:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":102:13)
#loc40 = loc("/usr/include/inttypes.h":351:1)
#loc41 = loc("/usr/include/inttypes.h":351:74)
#loc42 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":71:23)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":51:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":75:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":66:13)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":66:37)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":53:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":53:13)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":54:12)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":54:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":60:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":55:11)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":56:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":58:9)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":58:17)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":58:24)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":58:28)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":59:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":61:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":74:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":61:11)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":62:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":72:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:31)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:13)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:40)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:46)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":64:55)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":65:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":68:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":70:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":66:30)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":67:31)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":67:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":71:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":73:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":78:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":97:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":92:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":92:37)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":80:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":81:12)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":81:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":82:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":87:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":82:11)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":83:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":85:16)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":85:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":86:9)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":88:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":96:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":88:11)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":89:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":90:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":94:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":92:30)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":93:31)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":93:13)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_square_16.c":95:9)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc16, #loc15])
#loc115 = loc(fused[#loc17, #loc18])
#loc116 = loc(fused[#loc20, #loc18])
#loc117 = loc(fused[#loc24, #loc25])
#loc118 = loc(fused[#loc27, #loc25])
#loc119 = loc(fused[#loc28, #loc29])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc46, #loc47])
#loc126 = loc(fused[#loc48, #loc49])
#loc127 = loc(fused[#loc50, #loc51])
#loc128 = loc(fused[#loc53, #loc52])
#loc129 = loc(fused[#loc54, #loc55])
#loc130 = loc(fused[#loc57, #loc55])
#loc131 = loc(fused[#loc60, #loc61])
#loc132 = loc(fused[#loc63, #loc64])
#loc133 = loc(fused[#loc66, #loc64])
#loc134 = loc(fused[#loc67, #loc68])
#loc135 = loc(fused[#loc70, #loc73])
#loc136 = loc(fused[#loc74, #loc75, #loc76, #loc68])
#loc137 = loc(fused[#loc82, #loc83])
#loc138 = loc(fused[#loc84, #loc85])
#loc139 = loc(fused[#loc86, #loc87])
#loc140 = loc(fused[#loc89, #loc88])
#loc141 = loc(fused[#loc90, #loc91])
#loc142 = loc(fused[#loc93, #loc91])
#loc143 = loc(fused[#loc95, #loc94])
#loc144 = loc(fused[#loc97, #loc98])
#loc145 = loc(fused[#loc100, #loc98])
#loc146 = loc(fused[#loc101, #loc102])
