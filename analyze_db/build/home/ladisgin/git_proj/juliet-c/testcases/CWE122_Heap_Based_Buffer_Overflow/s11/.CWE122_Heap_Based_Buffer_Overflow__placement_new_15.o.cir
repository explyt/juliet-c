!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc8 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc77 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc333)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc334)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc335)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc8)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc8)
    cir.return loc(#loc8)
  } loc(#loc8)
  cir.func private @printIntLine(!s32i) loc(#loc336)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc337)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_153badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc339)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc340)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc341)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc342)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc23)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc343)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc23)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc344)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc341)
    cir.br ^bb1 loc(#loc345)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc29)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc346)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc347)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb3 loc(#loc27)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc27)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc348)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc36)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc349)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc342)
    cir.br ^bb5 loc(#loc350)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc40)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc351)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc352)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc44)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc42)
    cir.br ^bb7 loc(#loc38)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc38)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc353)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<6> : !s32i loc(#loc47)
    cir.br ^bb10 loc(#loc45)
  ^bb10:  // pred: ^bb9
    cir.switch.flat %23 : !s32i, ^bb13 [
      6: ^bb12
    ] loc(#loc45)
  ^bb11:  // no predecessors
    cir.br ^bb12 loc(#loc48)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc354)
    cir.br ^bb14 loc(#loc51)
  ^bb13:  // pred: ^bb10
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb14 loc(#loc53)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc46)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc355)
  ^bb16:  // pred: ^bb15
    %27 = cir.const #cir.int<7> : !s32i loc(#loc56)
    cir.br ^bb17 loc(#loc54)
  ^bb17:  // pred: ^bb16
    cir.switch.flat %27 : !s32i, ^bb22 [
      7: ^bb19
    ] loc(#loc54)
  ^bb18:  // no predecessors
    cir.br ^bb19 loc(#loc57)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc356)
  ^bb20:  // pred: ^bb19
    %28 = cir.const #cir.int<8> : !u64i loc(#loc357)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc357)
    cir.call @_ZN12TwoIntsClassC2Ev(%31) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc16)
    cir.store %31, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc339)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc63)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc358)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc65)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
    %37 = cir.get_member %36[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %35, %37 : !s32i, !cir.ptr<!s32i> loc(#loc359)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc68)
    %39 = cir.get_member %38[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc70)
    %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc71)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc71)
    cir.br ^bb21 loc(#loc59)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23 loc(#loc73)
  ^bb22:  // pred: ^bb17
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc74)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb23 loc(#loc76)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc55)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc14)
  } loc(#loc338)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc77)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc77)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc77)
    cir.return loc(#loc77)
  } loc(#loc77)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc361)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc362)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc363)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc364)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc88)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc365)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc88)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc366)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc363)
    cir.br ^bb1 loc(#loc367)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc94)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc368)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc369)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc96)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc98)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
    cir.br ^bb3 loc(#loc92)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc370)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc371)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc364)
    cir.br ^bb5 loc(#loc372)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc105)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc373)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc374)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc109)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb7 loc(#loc103)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc103)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc375)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<6> : !s32i loc(#loc112)
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // pred: ^bb9
    cir.switch.flat %23 : !s32i, ^bb13 [
      6: ^bb12
    ] loc(#loc110)
  ^bb11:  // no predecessors
    cir.br ^bb12 loc(#loc113)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc376)
    cir.br ^bb14 loc(#loc116)
  ^bb13:  // pred: ^bb10
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc117)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc118)
    cir.br ^bb14 loc(#loc119)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc111)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc377)
  ^bb16:  // pred: ^bb15
    %27 = cir.const #cir.int<8> : !s32i loc(#loc122)
    cir.br ^bb17 loc(#loc120)
  ^bb17:  // pred: ^bb16
    cir.switch.flat %27 : !s32i, ^bb20 [
      7: ^bb19
    ] loc(#loc120)
  ^bb18:  // no predecessors
    cir.br ^bb19 loc(#loc123)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc124)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc125)
    cir.br ^bb23 loc(#loc126)
  ^bb20:  // pred: ^bb17
    cir.br ^bb21 loc(#loc378)
  ^bb21:  // pred: ^bb20
    %30 = cir.const #cir.int<4> : !u64i loc(#loc379)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc130)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc379)
    cir.call @_ZN11OneIntClassC2Ev(%33) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc81)
    cir.store %33, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc361)
    %34 = cir.const #cir.int<5> : !s32i loc(#loc131)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc132)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc133)
    cir.store %34, %36 : !s32i, !cir.ptr<!s32i> loc(#loc380)
    %37 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc134)
    %38 = cir.get_member %37[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc133)
    %39 = cir.load %38 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc136)
    %40 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc137)
    %41 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
    %42 = cir.cast(bitcast, %41 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc138)
    cir.call @free(%42) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc137)
    cir.br ^bb22 loc(#loc128)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc139)
  ^bb23:  // 2 preds: ^bb19, ^bb22
    cir.br ^bb24 loc(#loc121)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc79)
  } loc(#loc360)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc382)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc383)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc384)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc385)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc150)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc386)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc150)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc387)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc384)
    cir.br ^bb1 loc(#loc388)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc156)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc389)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc390)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc158)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc160)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc158)
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc154)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc391)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc392)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc385)
    cir.br ^bb5 loc(#loc393)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc166)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc167)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc394)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc395)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc169)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc170)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc171)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc169)
    cir.br ^bb7 loc(#loc165)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc165)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc396)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<6> : !s32i loc(#loc174)
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // pred: ^bb9
    cir.switch.flat %23 : !s32i, ^bb13 [
      6: ^bb12
    ] loc(#loc172)
  ^bb11:  // no predecessors
    cir.br ^bb12 loc(#loc175)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %24 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc176)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc397)
    cir.br ^bb14 loc(#loc178)
  ^bb13:  // pred: ^bb10
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc179)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc180)
    cir.br ^bb14 loc(#loc181)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc173)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc398)
  ^bb16:  // pred: ^bb15
    %27 = cir.const #cir.int<7> : !s32i loc(#loc184)
    cir.br ^bb17 loc(#loc182)
  ^bb17:  // pred: ^bb16
    cir.switch.flat %27 : !s32i, ^bb22 [
      7: ^bb19
    ] loc(#loc182)
  ^bb18:  // no predecessors
    cir.br ^bb19 loc(#loc185)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc399)
  ^bb20:  // pred: ^bb19
    %28 = cir.const #cir.int<4> : !u64i loc(#loc400)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc189)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc189)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc400)
    cir.call @_ZN11OneIntClassC2Ev(%31) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc143)
    cir.store %31, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc382)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc190)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc191)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc133)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc401)
    %35 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc192)
    %36 = cir.get_member %35[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc133)
    %37 = cir.load %36 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc194)
    %38 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc195)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc196)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc196)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc195)
    cir.br ^bb21 loc(#loc187)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23 loc(#loc197)
  ^bb22:  // pred: ^bb17
    %41 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    cir.br ^bb23 loc(#loc200)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc183)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc141)
  } loc(#loc381)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc403)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc404)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc405)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc406)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc211)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc407)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc211)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc408)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc405)
    cir.br ^bb1 loc(#loc409)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc217)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc410)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc411)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc219)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc221)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc219)
    cir.br ^bb3 loc(#loc215)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc215)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc412)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc224)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc413)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc406)
    cir.br ^bb5 loc(#loc414)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc227)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc228)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc415)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc416)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc230)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc231)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc232)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc230)
    cir.br ^bb7 loc(#loc226)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc226)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc417)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<5> : !s32i loc(#loc235)
    cir.br ^bb10 loc(#loc233)
  ^bb10:  // pred: ^bb9
    cir.switch.flat %23 : !s32i, ^bb13 [
      6: ^bb12
    ] loc(#loc233)
  ^bb11:  // no predecessors
    cir.br ^bb12 loc(#loc236)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc237)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc237)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc238)
    cir.br ^bb14 loc(#loc239)
  ^bb13:  // pred: ^bb10
    %26 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc240)
    cir.store %26, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc418)
    cir.br ^bb14 loc(#loc242)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc234)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc419)
  ^bb16:  // pred: ^bb15
    %27 = cir.const #cir.int<7> : !s32i loc(#loc245)
    cir.br ^bb17 loc(#loc243)
  ^bb17:  // pred: ^bb16
    cir.switch.flat %27 : !s32i, ^bb22 [
      7: ^bb19
    ] loc(#loc243)
  ^bb18:  // no predecessors
    cir.br ^bb19 loc(#loc246)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc420)
  ^bb20:  // pred: ^bb19
    %28 = cir.const #cir.int<8> : !u64i loc(#loc421)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc250)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc250)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc421)
    cir.call @_ZN12TwoIntsClassC2Ev(%31) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc204)
    cir.store %31, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc403)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc251)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc252)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc422)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc253)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc254)
    %37 = cir.get_member %36[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %35, %37 : !s32i, !cir.ptr<!s32i> loc(#loc423)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc255)
    %39 = cir.get_member %38[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc257)
    %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc258)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc259)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc259)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc258)
    cir.br ^bb21 loc(#loc248)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23 loc(#loc260)
  ^bb22:  // pred: ^bb17
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc261)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc261)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc262)
    cir.br ^bb23 loc(#loc263)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc244)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc202)
  } loc(#loc402)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc425)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc426)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc427)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc428)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc274)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc429)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc274)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc430)
    cir.store %7, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc427)
    cir.br ^bb1 loc(#loc431)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc279)
    %9 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc280)
    %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc432)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc433)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc282)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc283)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc284)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc282)
    cir.br ^bb3 loc(#loc278)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc278)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.int<8> : !u64i loc(#loc434)
    %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc287)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc435)
    cir.store %16, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc428)
    cir.br ^bb5 loc(#loc436)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc290)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc291)
    %19 = cir.cmp(eq, %17, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc437)
    cir.brcond %19 ^bb6, ^bb7 loc(#loc438)
  ^bb6:  // pred: ^bb5
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc293)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc294)
    %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc295)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc293)
    cir.br ^bb7 loc(#loc289)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc289)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc439)
  ^bb9:  // pred: ^bb8
    %23 = cir.const #cir.int<6> : !s32i loc(#loc298)
    cir.br ^bb10 loc(#loc296)
  ^bb10:  // pred: ^bb9
    cir.switch.flat %23 : !s32i, ^bb13 [
      6: ^bb12
    ] loc(#loc296)
  ^bb11:  // no predecessors
    cir.br ^bb12 loc(#loc299)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    %24 = cir.load %3 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc300)
    cir.store %24, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc440)
    cir.br ^bb14 loc(#loc302)
  ^bb13:  // pred: ^bb10
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc303)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc303)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc304)
    cir.br ^bb14 loc(#loc305)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc297)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc441)
  ^bb16:  // pred: ^bb15
    %27 = cir.const #cir.int<7> : !s32i loc(#loc308)
    cir.br ^bb17 loc(#loc306)
  ^bb17:  // pred: ^bb16
    cir.switch.flat %27 : !s32i, ^bb22 [
      7: ^bb19
    ] loc(#loc306)
  ^bb18:  // no predecessors
    cir.br ^bb19 loc(#loc309)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc442)
  ^bb20:  // pred: ^bb19
    %28 = cir.const #cir.int<8> : !u64i loc(#loc443)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc313)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc313)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc443)
    cir.call @_ZN12TwoIntsClassC2Ev(%31) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc267)
    cir.store %31, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc425)
    %32 = cir.const #cir.int<5> : !s32i loc(#loc314)
    %33 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc315)
    %34 = cir.get_member %33[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    cir.store %32, %34 : !s32i, !cir.ptr<!s32i> loc(#loc444)
    %35 = cir.const #cir.int<10> : !s32i loc(#loc316)
    %36 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc317)
    %37 = cir.get_member %36[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %35, %37 : !s32i, !cir.ptr<!s32i> loc(#loc445)
    %38 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc318)
    %39 = cir.get_member %38[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc64)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc319)
    cir.call @printIntLine(%40) : (!s32i) -> () loc(#loc320)
    %41 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc321)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc322)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc322)
    cir.call @free(%43) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc321)
    cir.br ^bb21 loc(#loc311)
  ^bb21:  // pred: ^bb20
    cir.br ^bb23 loc(#loc323)
  ^bb22:  // pred: ^bb17
    %44 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc324)
    %45 = cir.cast(array_to_ptrdecay, %44 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc324)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc325)
    cir.br ^bb23 loc(#loc326)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc307)
  ^bb24:  // pred: ^bb23
    cir.return loc(#loc265)
  } loc(#loc424)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_154goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G1Ev() : () -> () loc(#loc329)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodB2G2Ev() : () -> () loc(#loc330)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B1Ev() : () -> () loc(#loc331)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_15L8goodG2B2Ev() : () -> () loc(#loc332)
    cir.return loc(#loc328)
  } loc(#loc446)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":39:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":65:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:45)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":26:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:62)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:64)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:36)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:43)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":27:61)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:42)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:26)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:32)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:39)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":28:38)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:44)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:63)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":29:37)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:43)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:34)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:40)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":30:39)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":31:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":41:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":31:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":33:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":35:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":35:9)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":36:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":39:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":40:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":42:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":64:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":42:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":44:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":45:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":58:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:35)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":51:39)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":53:28)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":53:9)
#loc64 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":54:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":54:9)
#loc67 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:22)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:32)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":55:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":57:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":57:14)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":59:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":62:19)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":62:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":63:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":72:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":111:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:44)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":74:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":74:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:62)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:64)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:36)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:43)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":75:61)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:42)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:32)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:39)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":76:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:44)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:63)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":77:37)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:43)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:27)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:40)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":78:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":79:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":89:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":79:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":81:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":83:16)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":83:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":84:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":87:19)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":87:9)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":88:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":90:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":110:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":90:12)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":92:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":94:19)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":94:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":95:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":97:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":108:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":103:38)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":105:28)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":105:9)
#loc133 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:22)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:32)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":106:9)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":107:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":107:14)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":109:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":114:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":153:1)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:44)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":116:5)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":116:12)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:5)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:62)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:64)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:43)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":117:61)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:42)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:26)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:32)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:33)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:39)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":118:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:44)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:63)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":119:37)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:5)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:43)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:27)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:34)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:40)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":120:39)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":121:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":131:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":121:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":123:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":125:16)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":125:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":126:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":129:19)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":129:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":130:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":132:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":152:5)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":132:12)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":134:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":135:5)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":146:5)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:34)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":141:38)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":143:28)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":143:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:22)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:32)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":144:9)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":145:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":145:14)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":147:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":150:19)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":150:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":151:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":156:1)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":197:1)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:9)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:45)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":158:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":158:12)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:62)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:64)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:36)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:43)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":159:61)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:5)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:42)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:26)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:32)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:33)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:39)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":160:38)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:44)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:63)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":161:37)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:43)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:9)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:27)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:33)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:34)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:40)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":162:39)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":163:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":173:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":163:12)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":165:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":167:19)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":167:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":168:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":171:16)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":171:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":172:9)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":174:5)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":196:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":174:12)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":176:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":177:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":190:5)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:35)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":183:39)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":185:28)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":185:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":186:28)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":186:9)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:22)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:32)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":187:9)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":189:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":189:14)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":191:5)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":194:19)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":194:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":195:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":200:1)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":241:1)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:45)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":202:5)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":202:12)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:5)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:62)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:5)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:64)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:36)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:43)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":203:61)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:5)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:42)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:26)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:32)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:33)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:39)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":204:38)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:44)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:63)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":205:37)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:5)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:43)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:9)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:27)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:33)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:34)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:40)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":206:39)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":207:5)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":217:5)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":207:12)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":209:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":211:16)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":211:9)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":212:9)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":215:19)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":215:9)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":216:9)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":218:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":240:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":218:12)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":220:5)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":221:5)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":234:5)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:35)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":227:39)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":229:28)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":229:9)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":230:28)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":230:9)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:22)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:32)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":231:9)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":233:9)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":233:14)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":235:5)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":238:19)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":238:9)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":239:9)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":243:1)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":249:1)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":245:5)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":246:5)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":247:5)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_15.cpp":248:5)
#loc333 = loc(fused[#loc1, #loc2])
#loc334 = loc(fused[#loc3, #loc4])
#loc335 = loc(fused[#loc5, #loc6])
#loc336 = loc(fused[#loc9, #loc10])
#loc337 = loc(fused[#loc11, #loc12])
#loc338 = loc(fused[#loc13, #loc14])
#loc339 = loc(fused[#loc15, #loc16])
#loc340 = loc(fused[#loc17, #loc18])
#loc341 = loc(fused[#loc19, #loc20])
#loc342 = loc(fused[#loc21, #loc22])
#loc343 = loc(fused[#loc24, #loc25])
#loc344 = loc(fused[#loc23, #loc20])
#loc345 = loc(fused[#loc26, #loc27])
#loc346 = loc(fused[#loc28, #loc29])
#loc347 = loc(fused[#loc30, #loc27])
#loc348 = loc(fused[#loc34, #loc35])
#loc349 = loc(fused[#loc36, #loc22])
#loc350 = loc(fused[#loc37, #loc38])
#loc351 = loc(fused[#loc39, #loc40])
#loc352 = loc(fused[#loc41, #loc38])
#loc353 = loc(fused[#loc45, #loc46])
#loc354 = loc(fused[#loc50, #loc49])
#loc355 = loc(fused[#loc54, #loc55])
#loc356 = loc(fused[#loc58, #loc59])
#loc357 = loc(fused[#loc60, #loc16])
#loc358 = loc(fused[#loc63, #loc62])
#loc359 = loc(fused[#loc66, #loc65])
#loc360 = loc(fused[#loc78, #loc79])
#loc361 = loc(fused[#loc80, #loc81])
#loc362 = loc(fused[#loc82, #loc83])
#loc363 = loc(fused[#loc84, #loc85])
#loc364 = loc(fused[#loc86, #loc87])
#loc365 = loc(fused[#loc89, #loc90])
#loc366 = loc(fused[#loc88, #loc85])
#loc367 = loc(fused[#loc91, #loc92])
#loc368 = loc(fused[#loc93, #loc94])
#loc369 = loc(fused[#loc95, #loc92])
#loc370 = loc(fused[#loc99, #loc100])
#loc371 = loc(fused[#loc101, #loc87])
#loc372 = loc(fused[#loc102, #loc103])
#loc373 = loc(fused[#loc104, #loc105])
#loc374 = loc(fused[#loc106, #loc103])
#loc375 = loc(fused[#loc110, #loc111])
#loc376 = loc(fused[#loc115, #loc114])
#loc377 = loc(fused[#loc120, #loc121])
#loc378 = loc(fused[#loc127, #loc128])
#loc379 = loc(fused[#loc129, #loc81])
#loc380 = loc(fused[#loc132, #loc131])
#loc381 = loc(fused[#loc140, #loc141])
#loc382 = loc(fused[#loc142, #loc143])
#loc383 = loc(fused[#loc144, #loc145])
#loc384 = loc(fused[#loc146, #loc147])
#loc385 = loc(fused[#loc148, #loc149])
#loc386 = loc(fused[#loc151, #loc152])
#loc387 = loc(fused[#loc150, #loc147])
#loc388 = loc(fused[#loc153, #loc154])
#loc389 = loc(fused[#loc155, #loc156])
#loc390 = loc(fused[#loc157, #loc154])
#loc391 = loc(fused[#loc161, #loc162])
#loc392 = loc(fused[#loc163, #loc149])
#loc393 = loc(fused[#loc164, #loc165])
#loc394 = loc(fused[#loc166, #loc167])
#loc395 = loc(fused[#loc168, #loc165])
#loc396 = loc(fused[#loc172, #loc173])
#loc397 = loc(fused[#loc177, #loc176])
#loc398 = loc(fused[#loc182, #loc183])
#loc399 = loc(fused[#loc186, #loc187])
#loc400 = loc(fused[#loc188, #loc143])
#loc401 = loc(fused[#loc191, #loc190])
#loc402 = loc(fused[#loc201, #loc202])
#loc403 = loc(fused[#loc203, #loc204])
#loc404 = loc(fused[#loc205, #loc206])
#loc405 = loc(fused[#loc207, #loc208])
#loc406 = loc(fused[#loc209, #loc210])
#loc407 = loc(fused[#loc212, #loc213])
#loc408 = loc(fused[#loc211, #loc208])
#loc409 = loc(fused[#loc214, #loc215])
#loc410 = loc(fused[#loc216, #loc217])
#loc411 = loc(fused[#loc218, #loc215])
#loc412 = loc(fused[#loc222, #loc223])
#loc413 = loc(fused[#loc224, #loc210])
#loc414 = loc(fused[#loc225, #loc226])
#loc415 = loc(fused[#loc227, #loc228])
#loc416 = loc(fused[#loc229, #loc226])
#loc417 = loc(fused[#loc233, #loc234])
#loc418 = loc(fused[#loc241, #loc240])
#loc419 = loc(fused[#loc243, #loc244])
#loc420 = loc(fused[#loc247, #loc248])
#loc421 = loc(fused[#loc249, #loc204])
#loc422 = loc(fused[#loc252, #loc251])
#loc423 = loc(fused[#loc254, #loc253])
#loc424 = loc(fused[#loc264, #loc265])
#loc425 = loc(fused[#loc266, #loc267])
#loc426 = loc(fused[#loc268, #loc269])
#loc427 = loc(fused[#loc270, #loc271])
#loc428 = loc(fused[#loc272, #loc273])
#loc429 = loc(fused[#loc275, #loc276])
#loc430 = loc(fused[#loc274, #loc271])
#loc431 = loc(fused[#loc277, #loc278])
#loc432 = loc(fused[#loc279, #loc280])
#loc433 = loc(fused[#loc281, #loc278])
#loc434 = loc(fused[#loc285, #loc286])
#loc435 = loc(fused[#loc287, #loc273])
#loc436 = loc(fused[#loc288, #loc289])
#loc437 = loc(fused[#loc290, #loc291])
#loc438 = loc(fused[#loc292, #loc289])
#loc439 = loc(fused[#loc296, #loc297])
#loc440 = loc(fused[#loc301, #loc300])
#loc441 = loc(fused[#loc306, #loc307])
#loc442 = loc(fused[#loc310, #loc311])
#loc443 = loc(fused[#loc312, #loc267])
#loc444 = loc(fused[#loc315, #loc314])
#loc445 = loc(fused[#loc317, #loc316])
#loc446 = loc(fused[#loc327, #loc328])
