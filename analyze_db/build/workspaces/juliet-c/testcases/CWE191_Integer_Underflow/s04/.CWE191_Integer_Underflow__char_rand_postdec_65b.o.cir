!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":22:62)
#loc6 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":22:67)
#loc18 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":37:66)
#loc19 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":37:71)
#loc34 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":48:66)
#loc35 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":48:71)
#loc53 = loc(fused[#loc5, #loc6])
#loc58 = loc(fused[#loc18, #loc19])
#loc64 = loc(fused[#loc34, #loc35])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_65b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc51)
  cir.func @CWE191_Integer_Underflow__char_rand_postdec_65b_badSink(%arg0: !s8i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc54)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc53)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc9)
    cir.br ^bb1 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc12)
    %3 = cir.unary(dec, %2) : !s8i, !s8i loc(#loc13)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc56)
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc8)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc54)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc14)
    cir.call @printHexCharLine(%5) : (!s8i) -> () loc(#loc15)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc52)
  cir.func @CWE191_Integer_Underflow__char_rand_postdec_65b_goodG2BSink(%arg0: !s8i loc(fused[#loc18, #loc19])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc59)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc58)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc22)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc25)
    %3 = cir.unary(dec, %2) : !s8i, !s8i loc(#loc26)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc61)
    %4 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc21)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc59)
    %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    cir.call @printHexCharLine(%5) : (!s8i) -> () loc(#loc28)
    cir.br ^bb2 loc(#loc24)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc17)
  } loc(#loc57)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc31)
  cir.func @CWE191_Integer_Underflow__char_rand_postdec_65b_goodB2GSink(%arg0: !s8i loc(fused[#loc34, #loc35])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc65)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc64)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc38)
    cir.br ^bb1 loc(#loc66)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc41)
    %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc41)
    %4 = cir.const #cir.int<127> : !s32i loc(#loc42)
    %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc42)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc42)
    %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc67)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc68)
  ^bb2:  // pred: ^bb1
    %9 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc46)
    %10 = cir.unary(dec, %9) : !s8i, !s8i loc(#loc47)
    cir.store %10, %1 : !s8i, !cir.ptr<!s8i> loc(#loc69)
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc37)
    cir.store %11, %0 : !s8i, !cir.ptr<!s8i> loc(#loc65)
    %12 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc48)
    cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc49)
    cir.br ^bb4 loc(#loc44)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc31)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc40)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc33)
  } loc(#loc63)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__char_rand_postdec_65b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":30:1)
#loc7 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":27:9)
#loc8 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":27:23)
#loc9 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":23:1)
#loc10 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":29:5)
#loc12 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":26:13)
#loc13 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":26:9)
#loc14 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":28:26)
#loc15 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":28:9)
#loc16 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":37:1)
#loc17 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":45:1)
#loc20 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":42:9)
#loc21 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":42:23)
#loc22 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":38:1)
#loc23 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":39:5)
#loc24 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":44:5)
#loc25 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":41:13)
#loc26 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":41:9)
#loc27 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":43:26)
#loc28 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":43:9)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":59:19)
#loc32 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":48:1)
#loc33 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":61:1)
#loc36 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":54:9)
#loc37 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":54:23)
#loc38 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":49:1)
#loc39 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":51:5)
#loc40 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":60:5)
#loc41 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":51:9)
#loc42 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":51:16)
#loc43 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":52:5)
#loc44 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":56:5)
#loc45 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":58:5)
#loc46 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":53:13)
#loc47 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":53:9)
#loc48 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":55:26)
#loc49 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":55:9)
#loc50 = loc("CWE191_Integer_Underflow__char_rand_postdec_65b.c":59:9)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc7, #loc8])
#loc55 = loc(fused[#loc10, #loc11])
#loc56 = loc(fused[#loc13, #loc12])
#loc57 = loc(fused[#loc16, #loc17])
#loc59 = loc(fused[#loc20, #loc21])
#loc60 = loc(fused[#loc23, #loc24])
#loc61 = loc(fused[#loc26, #loc25])
#loc62 = loc(fused[#loc29, #loc30])
#loc63 = loc(fused[#loc32, #loc33])
#loc65 = loc(fused[#loc36, #loc37])
#loc66 = loc(fused[#loc39, #loc40])
#loc67 = loc(fused[#loc41, #loc42])
#loc68 = loc(fused[#loc43, #loc44, #loc45, #loc40])
#loc69 = loc(fused[#loc47, #loc46])
