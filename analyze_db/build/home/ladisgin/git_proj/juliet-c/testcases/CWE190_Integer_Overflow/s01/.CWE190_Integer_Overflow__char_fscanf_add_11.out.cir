!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc57 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":162:10)
#loc58 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":162:14)
#loc59 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":162:20)
#loc60 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":162:32)
#loc225 = loc(fused[#loc57, #loc58])
#loc226 = loc(fused[#loc59, #loc60])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc201)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc202)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printHexCharLine(!s8i) loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc206)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc207)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc16)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc210)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc210)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc20)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc211)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc23)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc203)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc23)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc212)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc213)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc213)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc27)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %17 ^bb6, ^bb9 loc(#loc214)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc215)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc32)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc32)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %21 = cir.binop(add, %19, %20) nsw : !s32i loc(#loc32)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc32)
    cir.store %22, %0 : !s8i, !cir.ptr<!s8i> loc(#loc206)
    %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc33)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc34)
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc26)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc11)
  } loc(#loc205)
  cir.func no_proto @CWE190_Integer_Overflow__char_fscanf_add_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc36)
  } loc(#loc216)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc221)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc222)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc54)
  cir.func @main(%arg0: !s32i loc(fused[#loc57, #loc58]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc59, #loc60])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc226)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc61)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc62)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc63)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc63)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc64)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc51)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_add_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call @CWE190_Integer_Overflow__char_fscanf_add_11_good() : () -> () loc(#loc66)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc52)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc53)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_fscanf_add_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE190_Integer_Overflow__char_fscanf_add_11_bad() : () -> () loc(#loc70)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc54)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    cir.return %17 : !s32i loc(#loc229)
  } loc(#loc224)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc232)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc233)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc85)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc85)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc234)
    cir.br ^bb1 loc(#loc235)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc236)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc236)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc89)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc89)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc237)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc92)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc203)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc93)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc94)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc94)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc92)
    cir.br ^bb3 loc(#loc88)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc238)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc239)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc239)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc97)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc240)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc77)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb13 loc(#loc100)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc241)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc105)
    %21 = cir.cast(integral, %20 : !s8i), !s32i loc(#loc105)
    %22 = cir.const #cir.int<127> : !s32i loc(#loc106)
    %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc242)
    cir.brcond %23 ^bb9, ^bb10 loc(#loc243)
  ^bb9:  // pred: ^bb8
    %24 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc110)
    %25 = cir.cast(integral, %24 : !s8i), !s32i loc(#loc110)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %27 = cir.binop(add, %25, %26) nsw : !s32i loc(#loc110)
    %28 = cir.cast(integral, %27 : !s32i), !s8i loc(#loc110)
    cir.store %28, %0 : !s8i, !cir.ptr<!s8i> loc(#loc232)
    %29 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc111)
    cir.call @printHexCharLine(%29) : (!s8i) -> () loc(#loc112)
    cir.br ^bb11 loc(#loc108)
  ^bb10:  // pred: ^bb8
    %30 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc78)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    cir.br ^bb11 loc(#loc104)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc104)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc96)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc96)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc80)
  } loc(#loc231)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc245)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc246)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc120)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc120)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc247)
    cir.br ^bb1 loc(#loc248)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc249)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc249)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc124)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc250)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc127)
    %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc203)
    %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc128)
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc129)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc129)
    %13 = cir.call @__isoc99_fscanf(%10, %12, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc127)
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc251)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
    %16 = cir.call %15() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc132)
    %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc132)
    cir.brcond %17 ^bb6, ^bb12 loc(#loc253)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc254)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc137)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc137)
    %20 = cir.const #cir.int<127> : !s32i loc(#loc138)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc255)
    cir.brcond %21 ^bb8, ^bb9 loc(#loc256)
  ^bb8:  // pred: ^bb7
    %22 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc142)
    %23 = cir.cast(integral, %22 : !s8i), !s32i loc(#loc142)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %25 = cir.binop(add, %23, %24) nsw : !s32i loc(#loc142)
    %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc142)
    cir.store %26, %0 : !s8i, !cir.ptr<!s8i> loc(#loc245)
    %27 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc143)
    cir.call @printHexCharLine(%27) : (!s8i) -> () loc(#loc144)
    cir.br ^bb10 loc(#loc140)
  ^bb9:  // pred: ^bb7
    %28 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc145)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc145)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc146)
    cir.br ^bb10 loc(#loc136)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc136)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc131)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc131)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc115)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc258)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc259)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc153)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc153)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc260)
    cir.br ^bb1 loc(#loc261)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc262)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc262)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc157)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc157)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc263)
  ^bb2:  // pred: ^bb1
    %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc163)
    cir.br ^bb4 loc(#loc160)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc164)
    cir.store %11, %1 : !s8i, !cir.ptr<!s8i> loc(#loc264)
    cir.br ^bb4 loc(#loc156)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc156)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc265)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc266)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc266)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc168)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %15 ^bb7, ^bb10 loc(#loc267)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc268)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc173)
    %17 = cir.cast(integral, %16 : !s8i), !s32i loc(#loc173)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %19 = cir.binop(add, %17, %18) nsw : !s32i loc(#loc173)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc173)
    cir.store %20, %0 : !s8i, !cir.ptr<!s8i> loc(#loc258)
    %21 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc174)
    cir.call @printHexCharLine(%21) : (!s8i) -> () loc(#loc175)
    cir.br ^bb9 loc(#loc172)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc167)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc167)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc148)
  } loc(#loc257)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc270)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc271)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc182)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc182)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc272)
    cir.br ^bb1 loc(#loc273)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc274)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc274)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc186)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc186)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc275)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc189)
    %9 = cir.cast(integral, %8 : !s32i), !s8i loc(#loc189)
    cir.store %9, %1 : !s8i, !cir.ptr<!s8i> loc(#loc276)
    cir.br ^bb3 loc(#loc185)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc185)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc277)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc278)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc278)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc193)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc193)
    cir.brcond %13 ^bb6, ^bb9 loc(#loc279)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc280)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc198)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc198)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc179)
    %17 = cir.binop(add, %15, %16) nsw : !s32i loc(#loc198)
    %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc198)
    cir.store %18, %0 : !s8i, !cir.ptr<!s8i> loc(#loc270)
    %19 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc199)
    cir.call @printHexCharLine(%19) : (!s8i) -> () loc(#loc200)
    cir.br ^bb8 loc(#loc197)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc192)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc192)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc177)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_fscanf_add_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":29:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc10 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":22:1)
#loc11 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":39:1)
#loc12 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":35:13)
#loc13 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":35:34)
#loc14 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":24:5)
#loc15 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":24:10)
#loc16 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":25:12)
#loc17 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":25:5)
#loc18 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":26:5)
#loc19 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":26:8)
#loc21 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":26:26)
#loc22 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":27:5)
#loc23 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":29:9)
#loc24 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":29:17)
#loc25 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":31:5)
#loc26 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":38:5)
#loc27 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":31:8)
#loc28 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":31:26)
#loc29 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":32:5)
#loc30 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":33:9)
#loc31 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":37:9)
#loc32 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":35:27)
#loc33 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":36:30)
#loc34 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":36:13)
#loc35 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":145:1)
#loc36 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":151:1)
#loc37 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":147:5)
#loc38 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":147:14)
#loc39 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":148:5)
#loc40 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":148:14)
#loc41 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":149:5)
#loc42 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":149:14)
#loc43 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":150:5)
#loc44 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":150:14)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":167:15)
#loc52 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":169:15)
#loc53 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":172:15)
#loc54 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":174:15)
#loc55 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":162:1)
#loc56 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":177:1)
#loc61 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":163:1)
#loc62 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":165:27)
#loc63 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":165:22)
#loc64 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":165:5)
#loc65 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":167:5)
#loc66 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":168:5)
#loc67 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":168:54)
#loc68 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":169:5)
#loc69 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":172:5)
#loc70 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":173:5)
#loc71 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":173:53)
#loc72 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":174:5)
#loc73 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":176:12)
#loc74 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":176:5)
#loc75 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc77 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":58:19)
#loc78 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":70:23)
#loc79 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":46:1)
#loc80 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":73:1)
#loc81 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":65:13)
#loc82 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":65:34)
#loc83 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":48:5)
#loc84 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":48:10)
#loc85 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":49:12)
#loc86 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":49:5)
#loc87 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":50:5)
#loc88 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":54:5)
#loc89 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":50:8)
#loc90 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":50:26)
#loc91 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":51:5)
#loc92 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":53:9)
#loc93 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":53:17)
#loc94 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":53:24)
#loc95 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":55:5)
#loc96 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":72:5)
#loc97 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":55:8)
#loc98 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":55:27)
#loc99 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":56:5)
#loc100 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":59:5)
#loc101 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":61:5)
#loc102 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":58:9)
#loc103 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":63:9)
#loc104 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":71:9)
#loc105 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":63:13)
#loc106 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":63:20)
#loc107 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":64:9)
#loc108 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":67:9)
#loc109 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":69:9)
#loc110 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":65:27)
#loc111 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":66:30)
#loc112 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":66:13)
#loc113 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":70:13)
#loc114 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":76:1)
#loc115 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":98:1)
#loc116 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":90:13)
#loc117 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":90:34)
#loc118 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":78:5)
#loc119 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":78:10)
#loc120 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":79:12)
#loc121 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":79:5)
#loc122 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":80:5)
#loc123 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":84:5)
#loc124 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":80:8)
#loc125 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":80:26)
#loc126 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":81:5)
#loc127 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":83:9)
#loc128 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":83:17)
#loc129 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":83:24)
#loc130 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":85:5)
#loc131 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":97:5)
#loc132 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":85:8)
#loc133 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":85:26)
#loc134 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":86:5)
#loc135 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":88:9)
#loc136 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":96:9)
#loc137 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":88:13)
#loc138 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":88:20)
#loc139 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":89:9)
#loc140 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":92:9)
#loc141 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":94:9)
#loc142 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":90:27)
#loc143 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":91:30)
#loc144 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":91:13)
#loc145 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":95:23)
#loc146 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":95:13)
#loc147 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":101:1)
#loc148 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":123:1)
#loc149 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":119:13)
#loc150 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":119:34)
#loc151 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":103:5)
#loc152 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":103:10)
#loc153 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":104:12)
#loc154 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":104:5)
#loc155 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":105:5)
#loc156 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":114:5)
#loc157 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":105:8)
#loc158 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":105:27)
#loc159 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":106:5)
#loc160 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":109:5)
#loc161 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":111:5)
#loc162 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":108:19)
#loc163 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":108:9)
#loc164 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":113:16)
#loc165 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":113:9)
#loc166 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":115:5)
#loc167 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":122:5)
#loc168 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":115:8)
#loc169 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":115:26)
#loc170 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":116:5)
#loc171 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":117:9)
#loc172 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":121:9)
#loc173 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":119:27)
#loc174 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":120:30)
#loc175 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":120:13)
#loc176 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":126:1)
#loc177 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":143:1)
#loc178 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":139:13)
#loc179 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":139:34)
#loc180 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":128:5)
#loc181 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":128:10)
#loc182 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":129:12)
#loc183 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":129:5)
#loc184 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":130:5)
#loc185 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":134:5)
#loc186 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":130:8)
#loc187 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":130:26)
#loc188 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":131:5)
#loc189 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":133:16)
#loc190 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":133:9)
#loc191 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":135:5)
#loc192 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":142:5)
#loc193 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":135:8)
#loc194 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":135:26)
#loc195 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":136:5)
#loc196 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":137:9)
#loc197 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":141:9)
#loc198 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":139:27)
#loc199 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":140:30)
#loc200 = loc("CWE190_Integer_Overflow__char_fscanf_add_11.c":140:13)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc8, #loc9])
#loc205 = loc(fused[#loc10, #loc11])
#loc206 = loc(fused[#loc12, #loc13])
#loc207 = loc(fused[#loc14, #loc15])
#loc208 = loc(fused[#loc17, #loc16])
#loc209 = loc(fused[#loc18, #loc19])
#loc210 = loc(fused[#loc20, #loc21])
#loc211 = loc(fused[#loc22, #loc19])
#loc212 = loc(fused[#loc25, #loc26])
#loc213 = loc(fused[#loc27, #loc28])
#loc214 = loc(fused[#loc29, #loc26])
#loc215 = loc(fused[#loc30, #loc31])
#loc216 = loc(fused[#loc35, #loc36])
#loc217 = loc(fused[#loc37, #loc38])
#loc218 = loc(fused[#loc39, #loc40])
#loc219 = loc(fused[#loc41, #loc42])
#loc220 = loc(fused[#loc43, #loc44])
#loc221 = loc(fused[#loc45, #loc46])
#loc222 = loc(fused[#loc47, #loc48])
#loc223 = loc(fused[#loc49, #loc50])
#loc224 = loc(fused[#loc55, #loc56])
#loc227 = loc(fused[#loc66, #loc67])
#loc228 = loc(fused[#loc70, #loc71])
#loc229 = loc(fused[#loc74, #loc73])
#loc230 = loc(fused[#loc75, #loc76])
#loc231 = loc(fused[#loc79, #loc80])
#loc232 = loc(fused[#loc81, #loc82])
#loc233 = loc(fused[#loc83, #loc84])
#loc234 = loc(fused[#loc86, #loc85])
#loc235 = loc(fused[#loc87, #loc88])
#loc236 = loc(fused[#loc89, #loc90])
#loc237 = loc(fused[#loc91, #loc88])
#loc238 = loc(fused[#loc95, #loc96])
#loc239 = loc(fused[#loc97, #loc98])
#loc240 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc241 = loc(fused[#loc103, #loc104])
#loc242 = loc(fused[#loc105, #loc106])
#loc243 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc244 = loc(fused[#loc114, #loc115])
#loc245 = loc(fused[#loc116, #loc117])
#loc246 = loc(fused[#loc118, #loc119])
#loc247 = loc(fused[#loc121, #loc120])
#loc248 = loc(fused[#loc122, #loc123])
#loc249 = loc(fused[#loc124, #loc125])
#loc250 = loc(fused[#loc126, #loc123])
#loc251 = loc(fused[#loc130, #loc131])
#loc252 = loc(fused[#loc132, #loc133])
#loc253 = loc(fused[#loc134, #loc131])
#loc254 = loc(fused[#loc135, #loc136])
#loc255 = loc(fused[#loc137, #loc138])
#loc256 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc257 = loc(fused[#loc147, #loc148])
#loc258 = loc(fused[#loc149, #loc150])
#loc259 = loc(fused[#loc151, #loc152])
#loc260 = loc(fused[#loc154, #loc153])
#loc261 = loc(fused[#loc155, #loc156])
#loc262 = loc(fused[#loc157, #loc158])
#loc263 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc264 = loc(fused[#loc165, #loc164])
#loc265 = loc(fused[#loc166, #loc167])
#loc266 = loc(fused[#loc168, #loc169])
#loc267 = loc(fused[#loc170, #loc167])
#loc268 = loc(fused[#loc171, #loc172])
#loc269 = loc(fused[#loc176, #loc177])
#loc270 = loc(fused[#loc178, #loc179])
#loc271 = loc(fused[#loc180, #loc181])
#loc272 = loc(fused[#loc183, #loc182])
#loc273 = loc(fused[#loc184, #loc185])
#loc274 = loc(fused[#loc186, #loc187])
#loc275 = loc(fused[#loc188, #loc185])
#loc276 = loc(fused[#loc190, #loc189])
#loc277 = loc(fused[#loc191, #loc192])
#loc278 = loc(fused[#loc193, #loc194])
#loc279 = loc(fused[#loc195, #loc192])
#loc280 = loc(fused[#loc196, #loc197])
