!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLongLongLine(!s64i) loc(#loc194)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc196)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc12)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc18)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.br ^bb6 loc(#loc20)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc21)
    cir.br ^bb6 loc(#loc22)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc15)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc201)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc25)
    cir.br ^bb9 loc(#loc23)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc23)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc202)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc29)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc9)
    %10 = cir.binop(mul, %8, %9) nsw : !s64i loc(#loc29)
    cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc196)
    %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc30)
    cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc31)
    cir.br ^bb13 loc(#loc28)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc32)
  ^bb14:  // pred: ^bb9
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb15 loc(#loc35)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc24)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc7)
  } loc(#loc195)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc205)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc206)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc207)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc203)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc208)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc60)
    cir.br ^bb2 loc(#loc58)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc58)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc62)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc214)
    cir.br ^bb6 loc(#loc64)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb6 loc(#loc67)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc59)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc215)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<8> : !s32i loc(#loc70)
    cir.br ^bb9 loc(#loc68)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb12 [
      7: ^bb11
    ] loc(#loc68)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc71)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb18 loc(#loc74)
  ^bb12:  // pred: ^bb9
    cir.br ^bb13 loc(#loc216)
  ^bb13:  // pred: ^bb12
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %11 = cir.call @imaxabs(%10) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc78)
    %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc78)
    %13 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc79)
    %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc80)
    %15 = cir.cast(int_to_float, %14 : !s64i), !cir.long_double<!cir.f80> loc(#loc80)
    %16 = cir.call @sqrtl(%15) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc79)
    %17 = cir.cmp(le, %12, %16) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc217)
    cir.brcond %17 ^bb14, ^bb15 loc(#loc218)
  ^bb14:  // pred: ^bb13
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc53)
    %20 = cir.binop(mul, %18, %19) nsw : !s64i loc(#loc85)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc86)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc87)
    cir.br ^bb16 loc(#loc83)
  ^bb15:  // pred: ^bb13
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb16 loc(#loc76)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc76)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc89)
  ^bb18:  // 2 preds: ^bb11, ^bb17
    cir.br ^bb19 loc(#loc69)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc51)
  } loc(#loc209)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc96)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc222)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc100)
    cir.br ^bb2 loc(#loc98)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc98)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc102)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc224)
    cir.br ^bb6 loc(#loc104)
  ^bb5:  // pred: ^bb2
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc105)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb6 loc(#loc107)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc99)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc225)
  ^bb8:  // pred: ^bb7
    %7 = cir.const #cir.int<7> : !s32i loc(#loc110)
    cir.br ^bb9 loc(#loc108)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %7 : !s32i, ^bb17 [
      7: ^bb11
    ] loc(#loc108)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc111)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc226)
  ^bb12:  // pred: ^bb11
    %8 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc114)
    %9 = cir.call @imaxabs(%8) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc115)
    %10 = cir.cast(int_to_float, %9 : !s64i), !cir.long_double<!cir.f80> loc(#loc115)
    %11 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc116)
    %12 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc117)
    %13 = cir.cast(int_to_float, %12 : !s64i), !cir.long_double<!cir.f80> loc(#loc117)
    %14 = cir.call @sqrtl(%13) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc116)
    %15 = cir.cmp(le, %10, %14) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc227)
    cir.brcond %15 ^bb13, ^bb14 loc(#loc228)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc122)
    %17 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc93)
    %18 = cir.binop(mul, %16, %17) nsw : !s64i loc(#loc122)
    cir.store %18, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    %19 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
    cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc124)
    cir.br ^bb15 loc(#loc120)
  ^bb14:  // pred: ^bb12
    %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc125)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb15 loc(#loc113)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc113)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18 loc(#loc127)
  ^bb17:  // pred: ^bb9
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    cir.br ^bb18 loc(#loc130)
  ^bb18:  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc109)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc91)
  } loc(#loc219)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc231)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc137)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc232)
    cir.br ^bb1 loc(#loc233)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc141)
    cir.br ^bb2 loc(#loc139)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc139)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc143)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc144)
    cir.br ^bb6 loc(#loc145)
  ^bb5:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc146)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc146)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc234)
    cir.br ^bb6 loc(#loc148)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc235)
  ^bb8:  // pred: ^bb7
    %8 = cir.const #cir.int<7> : !s32i loc(#loc151)
    cir.br ^bb9 loc(#loc149)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %8 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc149)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc152)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc236)
  ^bb12:  // pred: ^bb11
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc155)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc134)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc155)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc230)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc156)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc157)
    cir.br ^bb13 loc(#loc154)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc158)
  ^bb14:  // pred: ^bb9
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc159)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc159)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc160)
    cir.br ^bb15 loc(#loc161)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc150)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc132)
  } loc(#loc229)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc168)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc240)
    cir.br ^bb1 loc(#loc241)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<6> : !s32i loc(#loc172)
    cir.br ^bb2 loc(#loc170)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %3 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc170)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc173)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %4 = cir.const #cir.int<2> : !s32i loc(#loc174)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc174)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc242)
    cir.br ^bb6 loc(#loc176)
  ^bb5:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    cir.br ^bb6 loc(#loc179)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc171)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc243)
  ^bb8:  // pred: ^bb7
    %8 = cir.const #cir.int<7> : !s32i loc(#loc182)
    cir.br ^bb9 loc(#loc180)
  ^bb9:  // pred: ^bb8
    cir.switch.flat %8 : !s32i, ^bb14 [
      7: ^bb11
    ] loc(#loc180)
  ^bb10:  // no predecessors
    cir.br ^bb11 loc(#loc183)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc244)
  ^bb12:  // pred: ^bb11
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc186)
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc165)
    %11 = cir.binop(mul, %9, %10) nsw : !s64i loc(#loc186)
    cir.store %11, %0 : !s64i, !cir.ptr<!s64i> loc(#loc238)
    %12 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc187)
    cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc188)
    cir.br ^bb13 loc(#loc185)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15 loc(#loc189)
  ^bb14:  // pred: ^bb9
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc190)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    cir.br ^bb15 loc(#loc192)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc181)
  ^bb16:  // pred: ^bb15
    cir.return loc(#loc163)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":37:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":25:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":54:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:9)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:33)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":27:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":39:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":31:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":33:16)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":33:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":34:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":37:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":38:9)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":40:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":53:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":40:12)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":42:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":43:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":47:5)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":45:26)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":46:27)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":46:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":51:19)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":51:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":52:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":198:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":204:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":200:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":200:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":201:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":201:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":202:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":202:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":203:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":203:14)
#loc46 = loc("/usr/include/inttypes.h":351:1)
#loc47 = loc("/usr/include/inttypes.h":351:74)
#loc48 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":91:23)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":61:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":95:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:37)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":63:13)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":64:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":65:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":75:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":65:12)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":67:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":69:16)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":69:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":70:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":73:19)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":73:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":74:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":76:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":94:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":76:12)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":78:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":80:19)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":80:9)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":81:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":92:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:31)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:13)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:40)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:46)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":84:55)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":85:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":88:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":90:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":86:30)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":87:31)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":87:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":91:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":93:9)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":98:1)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":132:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:37)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":100:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":100:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":101:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":101:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":102:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":112:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":102:12)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":104:5)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":106:16)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":106:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":107:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":110:19)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":110:9)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":111:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":113:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":131:5)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":113:12)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":115:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":125:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:31)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:13)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:40)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:46)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":117:55)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":118:9)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":121:9)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":123:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":119:30)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":120:31)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":120:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":124:23)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":124:13)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":126:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":129:19)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":129:9)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":130:9)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":135:1)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":164:1)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:9)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:33)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":137:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":137:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":138:12)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":138:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":139:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":149:5)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":139:12)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":141:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":143:19)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":143:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":144:9)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":147:16)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":147:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":148:9)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":150:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":163:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":150:12)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":152:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":153:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":157:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":155:26)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":156:27)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":156:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":158:5)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":161:19)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":161:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":162:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":167:1)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":196:1)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:9)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:33)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":169:5)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":169:13)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":170:12)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":170:5)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":171:5)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":181:5)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":171:12)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":173:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":175:16)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":175:9)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":176:9)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":179:19)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":179:9)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":180:9)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":182:5)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":195:5)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":182:12)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":184:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":185:5)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":189:5)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":187:26)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":188:27)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":188:9)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":190:5)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":193:19)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":193:9)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_max_square_15.c":194:9)
#loc193 = loc(fused[#loc1, #loc2])
#loc194 = loc(fused[#loc4, #loc5])
#loc195 = loc(fused[#loc6, #loc7])
#loc196 = loc(fused[#loc8, #loc9])
#loc197 = loc(fused[#loc10, #loc11])
#loc198 = loc(fused[#loc13, #loc12])
#loc199 = loc(fused[#loc14, #loc15])
#loc200 = loc(fused[#loc19, #loc18])
#loc201 = loc(fused[#loc23, #loc24])
#loc202 = loc(fused[#loc27, #loc28])
#loc203 = loc(fused[#loc36, #loc37])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc46, #loc47])
#loc209 = loc(fused[#loc50, #loc51])
#loc210 = loc(fused[#loc52, #loc53])
#loc211 = loc(fused[#loc54, #loc55])
#loc212 = loc(fused[#loc57, #loc56])
#loc213 = loc(fused[#loc58, #loc59])
#loc214 = loc(fused[#loc63, #loc62])
#loc215 = loc(fused[#loc68, #loc69])
#loc216 = loc(fused[#loc75, #loc76])
#loc217 = loc(fused[#loc78, #loc81])
#loc218 = loc(fused[#loc82, #loc83, #loc84, #loc76])
#loc219 = loc(fused[#loc90, #loc91])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc97, #loc96])
#loc223 = loc(fused[#loc98, #loc99])
#loc224 = loc(fused[#loc103, #loc102])
#loc225 = loc(fused[#loc108, #loc109])
#loc226 = loc(fused[#loc112, #loc113])
#loc227 = loc(fused[#loc115, #loc118])
#loc228 = loc(fused[#loc119, #loc120, #loc121, #loc113])
#loc229 = loc(fused[#loc131, #loc132])
#loc230 = loc(fused[#loc133, #loc134])
#loc231 = loc(fused[#loc135, #loc136])
#loc232 = loc(fused[#loc138, #loc137])
#loc233 = loc(fused[#loc139, #loc140])
#loc234 = loc(fused[#loc147, #loc146])
#loc235 = loc(fused[#loc149, #loc150])
#loc236 = loc(fused[#loc153, #loc154])
#loc237 = loc(fused[#loc162, #loc163])
#loc238 = loc(fused[#loc164, #loc165])
#loc239 = loc(fused[#loc166, #loc167])
#loc240 = loc(fused[#loc169, #loc168])
#loc241 = loc(fused[#loc170, #loc171])
#loc242 = loc(fused[#loc175, #loc174])
#loc243 = loc(fused[#loc180, #loc181])
#loc244 = loc(fused[#loc184, #loc185])
