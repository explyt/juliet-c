!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":24:24)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":24:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":63:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":63:35)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":99:29)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":99:35)
#loc227 = loc(fused[#loc9, #loc10])
#loc258 = loc(fused[#loc88, #loc89])
#loc285 = loc(fused[#loc159, #loc160])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc223)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc224)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc225)
  cir.func internal private  @badSource(%arg0: !cir.ptr<!s32i> loc(fused[#loc9, #loc10])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc227)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc11)
    cir.scope {
      %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc223)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc17)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc231)
        cir.scope {
          %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
          %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
          %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc23)
          %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s32i>, !s32i loc(#loc233)
          %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc24)
          cir.if %16 {
            %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc26)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc27)
            %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc28)
            cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
          } loc(#loc234)
        } loc(#loc232)
      } loc(#loc229)
    } loc(#loc228)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc235)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc235)
  } loc(#loc226)
  cir.func private  @printIntLine(!s32i) loc(#loc236)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc237)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc239)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc39)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc240)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc223)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %5 = cir.call @badSource(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc44)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc244)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc245)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc244)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc244)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc55)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc247)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc57)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc58)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc58)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc248)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc59)
          cir.condition(%22) loc(#loc59)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc62)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc62)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc62)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc63)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc64)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc65)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc250)
          } loc(#loc249)
          cir.yield loc(#loc54)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc68)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc251)
          cir.yield loc(#loc246)
        } loc(#loc246)
      } loc(#loc246)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc71)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc72)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc243)
    cir.return loc(#loc36)
  } loc(#loc238)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc253)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc77)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc79)
    cir.return loc(#loc76)
  } loc(#loc252)
  cir.global "private"  internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc255)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc256)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc85)
  cir.func internal private  @goodG2B1Source(%arg0: !cir.ptr<!s32i> loc(fused[#loc88, #loc89])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc258)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc87)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc90)
    cir.scope {
      %4 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc255)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc93)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc93)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } else {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc98)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc99)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc99)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc261)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc262)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc98)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc263)
        cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc264)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc106)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !s32i loc(#loc266)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc108)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc111)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc112)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
          } loc(#loc267)
        } loc(#loc265)
      } loc(#loc260)
    } loc(#loc259)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc268)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc268)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc268)
  } loc(#loc257)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc119)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc271)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc121)
    %3 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc255)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc272)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
    %5 = cir.call @goodG2B1Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc124)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc273)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc275)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc276)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc275)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc275)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc135)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc278)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc137)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc138)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc138)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc279)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc139)
          cir.condition(%22) loc(#loc139)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc141)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc142)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc142)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc144)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc145)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc281)
          } loc(#loc280)
          cir.yield loc(#loc134)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc148)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc282)
          cir.yield loc(#loc277)
        } loc(#loc277)
      } loc(#loc277)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc150)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc151)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc152)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
    } loc(#loc274)
    cir.return loc(#loc116)
  } loc(#loc269)
  cir.global "private"  internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc283)
  cir.func internal private  @goodG2B2Source(%arg0: !cir.ptr<!s32i> loc(fused[#loc159, #loc160])) -> !cir.ptr<!s32i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc285)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["__retval"] {alignment = 8 : i64} loc(#loc158)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc161)
    cir.scope {
      %4 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc283)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc164)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc164)
      cir.if %6 {
        %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc166)
        %8 = cir.const #cir.int<10> : !s32i loc(#loc167)
        %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc167)
        %10 = cir.const #cir.int<4> : !u64i loc(#loc288)
        %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc289)
        %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc166)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
        cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc291)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc174)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc175)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc175)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s32i>, !s32i loc(#loc293)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc176)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc178)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc179)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc180)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc178)
          } loc(#loc294)
        } loc(#loc292)
      } loc(#loc287)
    } loc(#loc286)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc181)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc295)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc295)
    cir.return %3 : !cir.ptr<!s32i> loc(#loc295)
  } loc(#loc284)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc297)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc187)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc298)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %3 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc283)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.call @goodG2B2Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc192)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc300)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc302)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc303)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc302)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc302)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc203)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc203)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc305)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc205)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc206)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc206)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc306)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc207)
          cir.condition(%22) loc(#loc207)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc209)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc210)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc210)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc211)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc212)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc213)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc308)
          } loc(#loc307)
          cir.yield loc(#loc202)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc215)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc216)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc309)
          cir.yield loc(#loc304)
        } loc(#loc304)
      } loc(#loc304)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc217)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc218)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc219)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc217)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc220)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc221)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc222)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc221)
    } loc(#loc301)
    cir.return loc(#loc184)
  } loc(#loc296)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":29:23)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":29:30)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":29:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":29:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:37)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:21)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:18)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:27)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:28)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":30:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":32:12)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":32:5)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("/usr/include/stdlib.h":687:1)
#loc34 = loc("/usr/include/stdlib.h":687:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":35:1)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":52:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":37:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":37:11)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":38:12)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":38:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":39:17)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":39:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":40:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":40:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":40:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":40:26)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":41:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":51:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":42:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":42:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":43:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":43:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":48:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:25)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:23)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":47:31)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:30)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":45:29)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":49:22)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":49:27)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":49:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":49:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":50:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":50:14)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":129:1)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":133:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":131:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":131:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":132:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":132:14)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":59:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":59:29)
#loc83 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc84 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":68:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":63:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":77:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":64:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":65:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":75:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":65:8)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":66:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":69:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":71:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":68:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:23)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:30)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:33)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:43)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:44)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":73:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:37)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:21)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:27)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:28)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:34)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":74:33)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":76:12)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":76:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":79:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":96:1)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":81:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":81:11)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":82:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":82:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":83:22)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":83:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":84:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":84:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":84:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":84:31)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":85:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":95:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":86:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":86:28)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":87:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":87:16)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":92:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:14)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:21)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:25)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:23)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":90:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:30)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:23)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:18)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:19)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":91:31)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":89:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":93:22)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":93:27)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":93:28)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":93:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":94:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":94:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":60:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":60:29)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":99:1)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":108:1)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":100:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":101:5)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":106:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":101:8)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":102:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:30)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:33)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:44)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":104:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:37)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:18)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:27)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:28)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:34)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":105:33)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":107:12)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":107:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":110:1)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":127:1)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":112:5)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":112:11)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":113:12)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":113:5)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":114:22)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":114:5)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":115:27)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":115:12)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":115:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":115:31)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":116:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":126:5)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":117:9)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":117:28)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":118:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":118:16)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":123:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:18)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:14)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:25)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:23)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":121:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:30)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:23)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:18)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:19)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":122:31)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:30)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":120:29)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":124:22)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":124:27)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":124:28)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":124:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":125:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_21.c":125:14)
#loc223 = loc(fused[#loc1, #loc2])
#loc224 = loc(fused[#loc3, #loc4])
#loc225 = loc(fused[#loc5, #loc6])
#loc226 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc12, #loc13])
#loc229 = loc(fused[#loc15, #loc13])
#loc230 = loc(fused[#loc16, #loc18])
#loc231 = loc(fused[#loc19, #loc18])
#loc232 = loc(fused[#loc20, #loc21])
#loc233 = loc(fused[#loc22, #loc23])
#loc234 = loc(fused[#loc25, #loc21])
#loc235 = loc(fused[#loc30, #loc29])
#loc236 = loc(fused[#loc31, #loc32])
#loc237 = loc(fused[#loc33, #loc34])
#loc238 = loc(fused[#loc35, #loc36])
#loc239 = loc(fused[#loc37, #loc38])
#loc240 = loc(fused[#loc40, #loc39])
#loc241 = loc(fused[#loc42, #loc41])
#loc242 = loc(fused[#loc45, #loc46])
#loc243 = loc(fused[#loc47, #loc48])
#loc244 = loc(fused[#loc49, #loc50])
#loc245 = loc(fused[#loc51, #loc52])
#loc246 = loc(fused[#loc53, #loc54])
#loc247 = loc(fused[#loc56, #loc55])
#loc248 = loc(fused[#loc57, #loc58])
#loc249 = loc(fused[#loc60, #loc54])
#loc250 = loc(fused[#loc63, #loc66])
#loc251 = loc(fused[#loc68, #loc67])
#loc252 = loc(fused[#loc75, #loc76])
#loc253 = loc(fused[#loc77, #loc78])
#loc254 = loc(fused[#loc79, #loc80])
#loc255 = loc(fused[#loc81, #loc82])
#loc256 = loc(fused[#loc83, #loc84])
#loc257 = loc(fused[#loc86, #loc87])
#loc259 = loc(fused[#loc91, #loc92])
#loc260 = loc(fused[#loc94, #loc95, #loc96, #loc92])
#loc261 = loc(fused[#loc100, #loc101])
#loc262 = loc(fused[#loc99, #loc101])
#loc263 = loc(fused[#loc98, #loc102])
#loc264 = loc(fused[#loc103, #loc102])
#loc265 = loc(fused[#loc104, #loc105])
#loc266 = loc(fused[#loc106, #loc107])
#loc267 = loc(fused[#loc109, #loc105])
#loc268 = loc(fused[#loc114, #loc113])
#loc269 = loc(fused[#loc115, #loc116])
#loc270 = loc(fused[#loc117, #loc118])
#loc271 = loc(fused[#loc120, #loc119])
#loc272 = loc(fused[#loc122, #loc121])
#loc273 = loc(fused[#loc125, #loc126])
#loc274 = loc(fused[#loc127, #loc128])
#loc275 = loc(fused[#loc129, #loc130])
#loc276 = loc(fused[#loc131, #loc132])
#loc277 = loc(fused[#loc133, #loc134])
#loc278 = loc(fused[#loc136, #loc135])
#loc279 = loc(fused[#loc137, #loc138])
#loc280 = loc(fused[#loc140, #loc134])
#loc281 = loc(fused[#loc143, #loc146])
#loc282 = loc(fused[#loc148, #loc147])
#loc283 = loc(fused[#loc155, #loc156])
#loc284 = loc(fused[#loc157, #loc158])
#loc286 = loc(fused[#loc162, #loc163])
#loc287 = loc(fused[#loc165, #loc163])
#loc288 = loc(fused[#loc168, #loc169])
#loc289 = loc(fused[#loc167, #loc169])
#loc290 = loc(fused[#loc166, #loc170])
#loc291 = loc(fused[#loc171, #loc170])
#loc292 = loc(fused[#loc172, #loc173])
#loc293 = loc(fused[#loc174, #loc175])
#loc294 = loc(fused[#loc177, #loc173])
#loc295 = loc(fused[#loc182, #loc181])
#loc296 = loc(fused[#loc183, #loc184])
#loc297 = loc(fused[#loc185, #loc186])
#loc298 = loc(fused[#loc188, #loc187])
#loc299 = loc(fused[#loc190, #loc189])
#loc300 = loc(fused[#loc193, #loc194])
#loc301 = loc(fused[#loc195, #loc196])
#loc302 = loc(fused[#loc197, #loc198])
#loc303 = loc(fused[#loc199, #loc200])
#loc304 = loc(fused[#loc201, #loc202])
#loc305 = loc(fused[#loc204, #loc203])
#loc306 = loc(fused[#loc205, #loc206])
#loc307 = loc(fused[#loc208, #loc202])
#loc308 = loc(fused[#loc211, #loc214])
#loc309 = loc(fused[#loc216, #loc215])
