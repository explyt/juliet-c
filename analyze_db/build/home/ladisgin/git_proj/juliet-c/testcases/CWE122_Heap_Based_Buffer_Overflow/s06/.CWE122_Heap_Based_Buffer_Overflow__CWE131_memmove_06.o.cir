!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc145)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc146)
  cir.func private @printIntLine(!s32i) loc(#loc147)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc148)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc150)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc151)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.br ^bb1 loc(#loc153)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc19)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc20)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc154)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc155)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc22)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc23)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc23)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc22)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc156)
    cir.store %10, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc157)
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // pred: ^bb2
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s32i>, !cir.bool loc(#loc159)
    cir.brcond %14 ^bb4, ^bb5 loc(#loc160)
  ^bb4:  // pred: ^bb3
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb5 loc(#loc27)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc18)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc161)
  ^bb9:  // pred: ^bb8
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc150)
    cir.store %18, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc150)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc37)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc37)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc38)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc38)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc162)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc163)
    cir.libc.memmove %26 bytes from %22 to %20 : !cir.ptr<!void>, !u64i loc(#loc164)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc45)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc46)
    %31 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
    cir.call @free(%33) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb10 loc(#loc35)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc10)
  } loc(#loc149)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc165)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc64)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc68)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc69)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc174)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc175)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc57)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb8 loc(#loc71)
  ^bb3:  // pred: ^bb1
    %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc74)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc75)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc75)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc176)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc177)
    %13 = cir.call @malloc(%12) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc74)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc178)
    cir.store %14, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc179)
    cir.br ^bb4 loc(#loc180)
  ^bb4:  // pred: ^bb3
    %15 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
    %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc83)
    %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc181)
    cir.brcond %18 ^bb5, ^bb6 loc(#loc182)
  ^bb5:  // pred: ^bb4
    %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc85)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc87)
    cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc85)
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc67)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc67)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc183)
  ^bb10:  // pred: ^bb9
    %22 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc170)
    cir.store %22, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc170)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc91)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc91)
    %27 = cir.const #cir.int<10> : !s32i loc(#loc92)
    %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc92)
    %29 = cir.const #cir.int<4> : !u64i loc(#loc184)
    %30 = cir.binop(mul, %28, %29) : !u64i loc(#loc185)
    cir.libc.memmove %30 bytes from %26 to %24 : !cir.ptr<!void>, !u64i loc(#loc186)
    %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
    %32 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !s32i), !cir.ptr<!s32i> loc(#loc99)
    %34 = cir.load %33 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    cir.call @printIntLine(%34) : (!s32i) -> () loc(#loc100)
    %35 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc101)
    %36 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc102)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc102)
    cir.call @free(%37) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc101)
    cir.br ^bb11 loc(#loc89)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc59)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc109)
    cir.store %2, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc190)
    cir.br ^bb1 loc(#loc191)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc113)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc114)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc192)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc193)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc116)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc117)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc117)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc194)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc195)
    %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc196)
    cir.store %12, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.br ^bb3 loc(#loc198)
  ^bb3:  // pred: ^bb2
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc125)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc199)
    cir.brcond %16 ^bb4, ^bb5 loc(#loc200)
  ^bb4:  // pred: ^bb3
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc127)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc129)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc127)
    cir.br ^bb5 loc(#loc123)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc123)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc112)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc201)
  ^bb9:  // pred: ^bb8
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc188)
    cir.store %20, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc188)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc132)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc132)
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc133)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc133)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc134)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc134)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc202)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc203)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc204)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc140)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc141)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc142)
    %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc144)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    cir.br ^bb10 loc(#loc131)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc104)
  } loc(#loc187)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":25:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":42:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":36:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":36:28)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":27:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":27:11)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":28:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":28:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":29:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":30:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:30)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:32)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":32:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":33:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":35:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":41:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:17)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:44)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":38:45)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":39:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":40:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":40:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":93:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":97:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":95:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":95:14)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":96:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":96:14)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":56:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":49:1)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":71:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":65:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":65:28)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":51:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":51:11)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":52:12)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":52:5)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":63:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:8)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":53:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":54:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":57:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":59:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":56:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:23)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:33)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:43)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:44)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":61:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:37)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:27)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:28)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:34)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":62:33)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":64:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":70:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:17)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:34)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:44)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":67:45)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:27)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:28)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":68:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":69:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":69:14)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":74:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":91:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":85:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":85:28)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":76:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":76:11)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":77:12)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":77:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":83:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:8)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":78:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":79:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:43)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:44)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":81:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:37)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:34)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":82:33)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":84:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":90:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:17)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:23)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:44)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":87:45)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:22)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:27)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:28)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":88:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":89:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memmove_06.c":89:14)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc147 = loc(fused[#loc5, #loc6])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc9, #loc10])
#loc150 = loc(fused[#loc11, #loc12])
#loc151 = loc(fused[#loc13, #loc14])
#loc152 = loc(fused[#loc16, #loc15])
#loc153 = loc(fused[#loc17, #loc18])
#loc154 = loc(fused[#loc19, #loc20])
#loc155 = loc(fused[#loc21, #loc18])
#loc156 = loc(fused[#loc22, #loc24])
#loc157 = loc(fused[#loc25, #loc24])
#loc158 = loc(fused[#loc26, #loc27])
#loc159 = loc(fused[#loc28, #loc29])
#loc160 = loc(fused[#loc30, #loc27])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc39, #loc40])
#loc163 = loc(fused[#loc38, #loc40])
#loc164 = loc(fused[#loc41, #loc42])
#loc165 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc51, #loc52])
#loc167 = loc(fused[#loc53, #loc54])
#loc168 = loc(fused[#loc55, #loc56])
#loc169 = loc(fused[#loc58, #loc59])
#loc170 = loc(fused[#loc60, #loc61])
#loc171 = loc(fused[#loc62, #loc63])
#loc172 = loc(fused[#loc65, #loc64])
#loc173 = loc(fused[#loc66, #loc67])
#loc174 = loc(fused[#loc68, #loc69])
#loc175 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc176 = loc(fused[#loc76, #loc77])
#loc177 = loc(fused[#loc75, #loc77])
#loc178 = loc(fused[#loc74, #loc78])
#loc179 = loc(fused[#loc79, #loc78])
#loc180 = loc(fused[#loc80, #loc81])
#loc181 = loc(fused[#loc82, #loc83])
#loc182 = loc(fused[#loc84, #loc81])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc93, #loc94])
#loc185 = loc(fused[#loc92, #loc94])
#loc186 = loc(fused[#loc95, #loc96])
#loc187 = loc(fused[#loc103, #loc104])
#loc188 = loc(fused[#loc105, #loc106])
#loc189 = loc(fused[#loc107, #loc108])
#loc190 = loc(fused[#loc110, #loc109])
#loc191 = loc(fused[#loc111, #loc112])
#loc192 = loc(fused[#loc113, #loc114])
#loc193 = loc(fused[#loc115, #loc112])
#loc194 = loc(fused[#loc118, #loc119])
#loc195 = loc(fused[#loc117, #loc119])
#loc196 = loc(fused[#loc116, #loc120])
#loc197 = loc(fused[#loc121, #loc120])
#loc198 = loc(fused[#loc122, #loc123])
#loc199 = loc(fused[#loc124, #loc125])
#loc200 = loc(fused[#loc126, #loc123])
#loc201 = loc(fused[#loc130, #loc131])
#loc202 = loc(fused[#loc135, #loc136])
#loc203 = loc(fused[#loc134, #loc136])
#loc204 = loc(fused[#loc137, #loc138])
