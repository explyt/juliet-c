!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc91)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%4) loc(#loc17)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc18)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
          cir.yield %20 : !u32i loc(#loc18)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc18)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc18)
          cir.yield %24 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc18)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
        cir.break loc(#loc20)
      } loc(#loc96)
    } loc(#loc96)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc24)
        %5 = cir.call @usleep(%4) : (!u32i) -> !s32i loc(#loc25)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc7)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc26)
        cir.break loc(#loc27)
      } loc(#loc98)
    } loc(#loc98)
    cir.return loc(#loc9)
  } loc(#loc93)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc99)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc34)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc104)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
        cir.condition(%4) loc(#loc45)
      } do {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc46)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc46)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc46)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc46)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc46)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc46)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc46)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc46)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc46)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc46)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc46)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc46)
          cir.yield %20 : !u32i loc(#loc46)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc46)
          %11 = cir.const #cir.int<30> : !s32i loc(#loc46)
          %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc46)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc46)
          %15 = cir.const #cir.int<15> : !s32i loc(#loc46)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc46)
          %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc46)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc46)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc46)
          %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc46)
          %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc46)
          %22 = cir.const #cir.int<1> : !s32i loc(#loc46)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc46)
          %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc46)
          cir.yield %24 : !u32i loc(#loc46)
        }) : (!cir.bool) -> !u32i loc(#loc46)
        %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc46)
        cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
        cir.break loc(#loc48)
      } loc(#loc105)
    } loc(#loc105)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc51)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc51)
        cir.condition(%4) loc(#loc51)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc55)
          %5 = cir.cmp(gt, %3, %4) : !s32i, !s32i loc(#loc109)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
          %7 = cir.ternary(%6, true {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc58)
            %9 = cir.const #cir.int<2000> : !s32i loc(#loc59)
            %10 = cir.cmp(le, %8, %9) : !s32i, !s32i loc(#loc110)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc60)
            %12 = cir.ternary(%11, true {
              %13 = cir.const #true loc(#loc57)
              cir.yield %13 : !cir.bool loc(#loc57)
            }, false {
              %13 = cir.const #false loc(#loc57)
              cir.yield %13 : !cir.bool loc(#loc57)
            }) : (!cir.bool) -> !cir.bool loc(#loc57)
            cir.yield %12 : !cir.bool loc(#loc57)
          }, false {
            %8 = cir.const #false loc(#loc57)
            cir.yield %8 : !cir.bool loc(#loc57)
          }) : (!cir.bool) -> !cir.bool loc(#loc57)
          cir.if %7 {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
            %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc64)
            %10 = cir.call @usleep(%9) : (!u32i) -> !s32i loc(#loc65)
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc34)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          } else {
            %8 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc35)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc35)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc67)
          } loc(#loc111)
        } loc(#loc108)
        cir.break loc(#loc68)
      } loc(#loc107)
    } loc(#loc107)
    cir.return loc(#loc37)
  } loc(#loc102)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc74)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
        cir.condition(%4) loc(#loc78)
      } do {
        %3 = cir.const #cir.int<20> : !s32i loc(#loc79)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
        cir.break loc(#loc81)
      } loc(#loc115)
    } loc(#loc115)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
        cir.condition(%4) loc(#loc84)
      } do {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc85)
        %5 = cir.call @usleep(%4) : (!u32i) -> !s32i loc(#loc86)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc87)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc87)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc88)
        cir.break loc(#loc89)
      } loc(#loc117)
    } loc(#loc117)
    cir.return loc(#loc70)
  } loc(#loc112)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/unistd.h":480:1)
#loc4 = loc("/usr/include/unistd.h":480:43)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":45:19)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":30:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":48:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":32:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":32:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":34:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":34:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":34:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":35:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":40:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":35:11)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":38:17)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":38:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":39:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":41:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":47:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":41:11)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":44:15)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":44:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":45:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":46:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":103:1)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":107:1)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":105:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":105:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":106:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":106:13)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":72:23)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":76:23)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":55:1)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":80:1)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":57:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":57:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":59:14)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":59:13)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":59:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":60:5)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":65:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":60:11)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":63:17)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":63:9)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":64:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":66:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":79:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":66:11)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:9)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":77:9)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:13)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:21)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:19)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:23)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:26)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:35)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":69:32)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":70:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":73:9)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":75:9)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":71:19)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":71:13)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":72:13)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":76:13)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":78:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":83:1)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":101:1)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":85:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":85:9)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":87:14)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":87:13)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":87:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":88:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":93:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":88:11)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":91:17)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":91:9)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":92:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":94:5)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":100:5)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":94:11)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":97:15)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":97:9)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":98:19)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":98:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_16.c":99:9)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc8, #loc9])
#loc94 = loc(fused[#loc10, #loc11])
#loc95 = loc(fused[#loc14, #loc12])
#loc96 = loc(fused[#loc15, #loc16])
#loc97 = loc(fused[#loc19, #loc18])
#loc98 = loc(fused[#loc21, #loc22])
#loc99 = loc(fused[#loc28, #loc29])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc32, #loc33])
#loc102 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc38, #loc39])
#loc104 = loc(fused[#loc42, #loc40])
#loc105 = loc(fused[#loc43, #loc44])
#loc106 = loc(fused[#loc47, #loc46])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc52, #loc53])
#loc109 = loc(fused[#loc54, #loc55])
#loc110 = loc(fused[#loc58, #loc59])
#loc111 = loc(fused[#loc61, #loc62, #loc63, #loc53])
#loc112 = loc(fused[#loc69, #loc70])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc75, #loc73])
#loc115 = loc(fused[#loc76, #loc77])
#loc116 = loc(fused[#loc80, #loc79])
#loc117 = loc(fused[#loc82, #loc83])
