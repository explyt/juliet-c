!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":115:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":115:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":115:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":115:32)
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc162)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc11)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc167)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc168)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc18)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc18)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
    cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc170)
  ^bb5:  // pred: ^bb4
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc162)
    cir.store %12, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc162)
    cir.br ^bb6 loc(#loc171)
  ^bb6:  // pred: ^bb5
    %13 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc24)
    cir.store %14, %1 : !u64i, !cir.ptr<!u64i> loc(#loc172)
    cir.br ^bb7 loc(#loc171)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc26)
    %16 = cir.const #cir.int<10> : !s32i loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc27)
    %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc173)
    cir.brcond %18 ^bb8, ^bb12 loc(#loc28)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc174)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %20 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !u64i), !cir.ptr<!s32i> loc(#loc31)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc33)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc34)
    cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc36)
    %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc37)
    cir.store %27, %1 : !u64i, !cir.ptr<!u64i> loc(#loc176)
    cir.br ^bb7 loc(#loc171)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc23)
  ^bb13:  // pred: ^bb12
    %28 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
    %29 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !s32i), !cir.ptr<!s32i> loc(#loc40)
    %31 = cir.load %30 : !cir.ptr<!s32i>, !s32i loc(#loc38)
    cir.call @printIntLine(%31) : (!s32i) -> () loc(#loc41)
    cir.br ^bb14 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc4)
  } loc(#loc161)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc177)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc180)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc67)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.return %17 : !s32i loc(#loc188)
  } loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc190)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc191)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc87)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
    cir.br ^bb1 loc(#loc194)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc92)
    %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc195)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc196)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    cir.br ^bb4 loc(#loc94)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<10> : !s32i loc(#loc97)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc97)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc97)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc97)
    %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc97)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc97)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc97)
    cir.store %15, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.br ^bb4 loc(#loc90)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc198)
  ^bb6:  // pred: ^bb5
    %16 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc190)
    cir.store %16, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc190)
    cir.br ^bb7 loc(#loc199)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<0> : !s32i loc(#loc103)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc103)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc200)
    cir.br ^bb8 loc(#loc199)
  ^bb8:  // 2 preds: ^bb7, ^bb12
    %19 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc105)
    %20 = cir.const #cir.int<10> : !s32i loc(#loc106)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc106)
    %22 = cir.cmp(lt, %19, %21) : !u64i, !cir.bool loc(#loc201)
    cir.brcond %22 ^bb9, ^bb13 loc(#loc107)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc202)
  ^bb10:  // pred: ^bb9
    %23 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc109)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc110)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc110)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc110)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc112)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc113)
    cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.br ^bb11 loc(#loc102)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc102)
  ^bb12:  // pred: ^bb11
    %30 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc115)
    %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc116)
    cir.store %31, %1 : !u64i, !cir.ptr<!u64i> loc(#loc204)
    cir.br ^bb8 loc(#loc199)
  ^bb13:  // pred: ^bb8
    cir.br ^bb14 loc(#loc102)
  ^bb14:  // pred: ^bb13
    %32 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
    %33 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !s32i), !cir.ptr<!s32i> loc(#loc119)
    %35 = cir.load %34 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc120)
    cir.br ^bb15 loc(#loc100)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc80)
  } loc(#loc189)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc206)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc208)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc129)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc209)
    cir.br ^bb1 loc(#loc210)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc133)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc134)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc211)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc212)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<10> : !s32i loc(#loc136)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc136)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc136)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc136)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc136)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc136)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
    cir.store %13, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc213)
    cir.br ^bb3 loc(#loc132)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc214)
  ^bb5:  // pred: ^bb4
    %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc206)
    cir.store %14, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc206)
    cir.br ^bb6 loc(#loc215)
  ^bb6:  // pred: ^bb5
    %15 = cir.const #cir.int<0> : !s32i loc(#loc142)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc142)
    cir.store %16, %1 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    cir.br ^bb7 loc(#loc215)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc144)
    %18 = cir.const #cir.int<10> : !s32i loc(#loc145)
    %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc145)
    %20 = cir.cmp(lt, %17, %19) : !u64i, !cir.bool loc(#loc217)
    cir.brcond %20 ^bb8, ^bb12 loc(#loc146)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc218)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc148)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc149)
    %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !u64i), !cir.ptr<!s32i> loc(#loc149)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
    %26 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc151)
    %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc152)
    cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb10 loc(#loc141)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc141)
  ^bb11:  // pred: ^bb10
    %28 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc154)
    %29 = cir.unary(inc, %28) : !u64i, !u64i loc(#loc155)
    cir.store %29, %1 : !u64i, !cir.ptr<!u64i> loc(#loc220)
    cir.br ^bb7 loc(#loc215)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc141)
  ^bb13:  // pred: ^bb12
    %30 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
    %31 = cir.const #cir.int<0> : !s32i loc(#loc157)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc158)
    %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc159)
    cir.br ^bb14 loc(#loc139)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc122)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":44:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":35:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":35:28)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":36:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":36:16)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":27:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":27:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":28:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":28:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":33:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:8)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":29:27)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":32:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":32:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":34:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":43:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":41:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:25)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":39:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":40:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":38:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":42:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":99:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":103:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":101:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":101:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":102:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":102:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":120:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":122:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":125:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":127:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":115:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":130:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":116:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":118:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":118:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":118:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":120:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":121:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":121:61)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":122:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":125:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":126:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":126:60)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":127:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":129:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":129:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":58:19)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":51:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":75:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":66:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":66:28)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":67:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":67:16)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":53:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":53:11)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":54:12)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":54:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":64:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:8)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":55:27)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":56:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":59:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":61:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":58:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":63:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":63:9)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":65:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":74:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":72:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:18)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:14)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:21)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:23)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":70:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:30)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:23)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:19)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":71:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":69:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:27)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":73:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":78:1)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":97:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":88:9)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":88:28)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":89:9)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":89:16)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":80:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":80:11)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":81:12)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":81:5)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":86:5)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:8)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":82:27)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":83:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":85:23)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":85:9)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":87:5)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":96:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":94:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:18)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:14)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:21)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:25)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":92:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:30)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:23)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:18)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":93:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:30)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":91:29)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:22)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:27)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:28)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_06.c":95:9)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc9, #loc10])
#loc165 = loc(fused[#loc12, #loc11])
#loc166 = loc(fused[#loc13, #loc14])
#loc167 = loc(fused[#loc15, #loc16])
#loc168 = loc(fused[#loc17, #loc14])
#loc169 = loc(fused[#loc19, #loc18])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc22, #loc23])
#loc172 = loc(fused[#loc25, #loc24])
#loc173 = loc(fused[#loc26, #loc27])
#loc174 = loc(fused[#loc29, #loc23])
#loc175 = loc(fused[#loc32, #loc35])
#loc176 = loc(fused[#loc37, #loc36])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc46, #loc47])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc50, #loc51])
#loc182 = loc(fused[#loc52, #loc53])
#loc183 = loc(fused[#loc58, #loc59])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc73, #loc74])
#loc188 = loc(fused[#loc77, #loc76])
#loc189 = loc(fused[#loc79, #loc80])
#loc190 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc83, #loc84])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc88, #loc87])
#loc194 = loc(fused[#loc89, #loc90])
#loc195 = loc(fused[#loc91, #loc92])
#loc196 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc197 = loc(fused[#loc98, #loc97])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc104, #loc103])
#loc201 = loc(fused[#loc105, #loc106])
#loc202 = loc(fused[#loc108, #loc102])
#loc203 = loc(fused[#loc111, #loc114])
#loc204 = loc(fused[#loc116, #loc115])
#loc205 = loc(fused[#loc121, #loc122])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc125, #loc126])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc130, #loc129])
#loc210 = loc(fused[#loc131, #loc132])
#loc211 = loc(fused[#loc133, #loc134])
#loc212 = loc(fused[#loc135, #loc132])
#loc213 = loc(fused[#loc137, #loc136])
#loc214 = loc(fused[#loc138, #loc139])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc143, #loc142])
#loc217 = loc(fused[#loc144, #loc145])
#loc218 = loc(fused[#loc147, #loc141])
#loc219 = loc(fused[#loc150, #loc153])
#loc220 = loc(fused[#loc155, #loc154])
