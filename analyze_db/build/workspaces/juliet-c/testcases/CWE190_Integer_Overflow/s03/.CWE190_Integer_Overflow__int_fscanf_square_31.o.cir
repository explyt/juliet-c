!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc94)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc95)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc96)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_31_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc14)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc95)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc15)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc14)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc101)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc102)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc101)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc102)
      cir.scope {
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc104)
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc26)
        %14 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc26)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc104)
        %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc28)
      } loc(#loc103)
    } loc(#loc100)
    cir.return loc(#loc9)
  } loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_31_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc106)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc107)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc105)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc39)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc113)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc114)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc114)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc116)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        %9 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc53)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc116)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc55)
      } loc(#loc115)
    } loc(#loc112)
    cir.return loc(#loc36)
  } loc(#loc108)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc56)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %2 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc66)
    %3 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc95)
    %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc67)
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc68)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc68)
    %7 = cir.call @__isoc99_fscanf(%4, %6, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc66)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc122)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc123)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc122)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc123)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc78)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc78)
        %17 = cir.cmp(gt, %12, %16) : !s32i, !cir.bool loc(#loc125)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %20 = cir.abs %19 poison : !s32i loc(#loc81)
          %21 = cir.cast(integral, %20 : !s32i), !s64i loc(#loc81)
          %22 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc82)
          %23 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
          %24 = cir.cast(int_to_float, %23 : !s32i), !cir.double loc(#loc83)
          %25 = cir.call @sqrt(%24) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc82)
          %26 = cir.cast(float_to_int, %25 : !cir.double), !s64i loc(#loc82)
          %27 = cir.cmp(lt, %21, %26) : !s64i, !cir.bool loc(#loc126)
          %28 = cir.ternary(%27, true {
            %29 = cir.const #true loc(#loc79)
            cir.yield %29 : !cir.bool loc(#loc79)
          }, false {
            %29 = cir.const #false loc(#loc79)
            cir.yield %29 : !cir.bool loc(#loc79)
          }) : (!cir.bool) -> !cir.bool loc(#loc79)
          cir.yield %28 : !cir.bool loc(#loc79)
        }, false {
          %19 = cir.const #false loc(#loc79)
          cir.yield %19 : !cir.bool loc(#loc79)
        }) : (!cir.bool) -> !cir.bool loc(#loc79)
        cir.if %18 {
          %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc128)
          %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc90)
          %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc89)
          %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc90)
          cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc128)
          %23 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc91)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc92)
        } else {
          %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc93)
        } loc(#loc127)
      } loc(#loc124)
    } loc(#loc121)
    cir.return loc(#loc61)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":30:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":40:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":26:9)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":30:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":39:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":32:24)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":33:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":33:20)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":34:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":38:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":36:13)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":36:33)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":36:26)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":37:26)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":37:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":89:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":93:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":91:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":91:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":92:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":92:13)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":47:1)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":63:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":49:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":51:12)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":51:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":53:12)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":53:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":54:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":62:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":55:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":55:24)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":56:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":56:20)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":57:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":61:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":59:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":59:33)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":59:26)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":60:26)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":60:13)
#loc56 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":84:23)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":66:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":87:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":68:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":68:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":70:12)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":70:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":72:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":72:12)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":72:19)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":73:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":86:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":74:24)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":75:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":75:20)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":85:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:13)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:20)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:28)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:35)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:31)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:49)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:62)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":77:69)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":78:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":81:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":83:9)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":79:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":79:33)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":79:26)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":80:26)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":80:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_31.c":84:13)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc6, #loc7])
#loc97 = loc(fused[#loc8, #loc9])
#loc98 = loc(fused[#loc10, #loc11])
#loc99 = loc(fused[#loc13, #loc12])
#loc100 = loc(fused[#loc16, #loc17])
#loc101 = loc(fused[#loc18, #loc19])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc29, #loc30])
#loc106 = loc(fused[#loc31, #loc32])
#loc107 = loc(fused[#loc33, #loc34])
#loc108 = loc(fused[#loc35, #loc36])
#loc109 = loc(fused[#loc37, #loc38])
#loc110 = loc(fused[#loc40, #loc39])
#loc111 = loc(fused[#loc42, #loc41])
#loc112 = loc(fused[#loc43, #loc44])
#loc113 = loc(fused[#loc45, #loc46])
#loc114 = loc(fused[#loc47, #loc48])
#loc115 = loc(fused[#loc49, #loc50])
#loc116 = loc(fused[#loc51, #loc52])
#loc117 = loc(fused[#loc57, #loc58])
#loc118 = loc(fused[#loc60, #loc61])
#loc119 = loc(fused[#loc62, #loc63])
#loc120 = loc(fused[#loc65, #loc64])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc71, #loc72])
#loc123 = loc(fused[#loc73, #loc74])
#loc124 = loc(fused[#loc75, #loc76])
#loc125 = loc(fused[#loc77, #loc78])
#loc126 = loc(fused[#loc81, #loc84])
#loc127 = loc(fused[#loc85, #loc86, #loc87, #loc76])
#loc128 = loc(fused[#loc88, #loc89])
