!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":73:10)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":73:14)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":73:20)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":73:32)
#loc92 = loc(fused[#loc34, #loc35])
#loc93 = loc(fused[#loc36, #loc37])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc81)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc83)
    cir.goto "sink" loc(#loc84)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc10)
    %1 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc11)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc13)
    %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc13)
    %5 = cir.call @sqrt(%4) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc11)
    cir.store %5, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc85)
    %6 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc16)
    cir.call @printDoubleLine(%6) : (!cir.double) -> () loc(#loc17)
    cir.return loc(#loc5)
  } loc(#loc82)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc87)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc86)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc88)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc89)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func @main(%arg0: !s32i loc(fused[#loc34, #loc35]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc36, #loc37])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc93)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc33)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc38)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc39)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc40)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc40)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc41)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc28)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    %8 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_18_good() : () -> () loc(#loc43)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc29)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc30)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %13 = cir.get_global @CWE391_Unchecked_Error_Condition__sqrt_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc95)
    cir.call @CWE391_Unchecked_Error_Condition__sqrt_18_bad() : () -> () loc(#loc47)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
    cir.return %17 : !s32i loc(#loc96)
  } loc(#loc91)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc54)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc98)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc100)
    cir.goto "sink" loc(#loc101)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc63)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %2 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc65)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc66)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc68)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc68)
    %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc66)
    cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc103)
    cir.scope {
      %9 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc73)
      %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %11 = cir.const #cir.int<33> : !s32i loc(#loc74)
      %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc105)
      cir.if %12 {
        %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc54)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc76)
        %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc77)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc78)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
      } loc(#loc106)
    } loc(#loc104)
    %8 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc79)
    cir.call @printDoubleLine(%8) : (!cir.double) -> () loc(#loc80)
    cir.return loc(#loc58)
  } loc(#loc99)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_18.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":34:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":29:9)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":29:16)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":26:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":26:10)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":27:1)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":30:32)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":30:46)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":30:45)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":30:9)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":30:47)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":32:25)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":32:9)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":59:1)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":62:1)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":61:5)
#loc21 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":61:11)
#loc22 = loc("/usr/include/stdlib.h":575:1)
#loc23 = loc("/usr/include/stdlib.h":575:41)
#loc24 = loc("/usr/include/time.h":76:1)
#loc25 = loc("/usr/include/time.h":76:38)
#loc26 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":78:15)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":80:15)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":83:15)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":85:15)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":73:1)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":88:1)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":74:1)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":76:27)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":76:22)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":76:5)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":78:5)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":79:5)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":79:52)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":80:5)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":83:5)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":84:5)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":84:51)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":85:5)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":87:12)
#loc51 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":87:5)
#loc52 = loc("/usr/include/errno.h":37:1)
#loc53 = loc("/usr/include/errno.h":37:45)
#loc54 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":52:23)
#loc55 = loc("/usr/include/stdlib.h":756:1)
#loc56 = loc("/usr/include/stdlib.h":756:70)
#loc57 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":41:1)
#loc58 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":57:1)
#loc59 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":46:9)
#loc60 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":46:16)
#loc61 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":43:5)
#loc62 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":43:10)
#loc63 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":44:1)
#loc64 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":47:17)
#loc65 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":47:9)
#loc66 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":48:32)
#loc67 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":48:46)
#loc68 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":48:45)
#loc69 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":48:9)
#loc70 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":48:47)
#loc71 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":50:9)
#loc72 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":54:9)
#loc73 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":50:13)
#loc74 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":50:22)
#loc75 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":51:9)
#loc76 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":52:13)
#loc77 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":53:13)
#loc78 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":53:18)
#loc79 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":55:25)
#loc80 = loc("CWE391_Unchecked_Error_Condition__sqrt_18.c":55:9)
#loc81 = loc(fused[#loc2, #loc3])
#loc82 = loc(fused[#loc4, #loc5])
#loc83 = loc(fused[#loc6, #loc7])
#loc84 = loc(fused[#loc8, #loc9])
#loc85 = loc(fused[#loc14, #loc15])
#loc86 = loc(fused[#loc18, #loc19])
#loc87 = loc(fused[#loc20, #loc21])
#loc88 = loc(fused[#loc22, #loc23])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc47, #loc48])
#loc96 = loc(fused[#loc51, #loc50])
#loc97 = loc(fused[#loc52, #loc53])
#loc98 = loc(fused[#loc55, #loc56])
#loc99 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc59, #loc60])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc65, #loc64])
#loc103 = loc(fused[#loc69, #loc70])
#loc104 = loc(fused[#loc71, #loc72])
#loc105 = loc(fused[#loc73, #loc74])
#loc106 = loc(fused[#loc75, #loc72])
