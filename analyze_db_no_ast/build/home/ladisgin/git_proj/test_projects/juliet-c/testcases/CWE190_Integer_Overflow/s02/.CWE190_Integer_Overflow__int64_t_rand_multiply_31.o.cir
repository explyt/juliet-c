!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc100)
  cir.func private  @printLongLongLine(!s64i) loc(#loc101)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc104)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc105)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc107)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc108)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc107)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc108)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc21)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc22)
        %15 = cir.cmp(gt, %12, %14) : !s64i, !s32i loc(#loc110)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc23)
        cir.if %16 {
          %17 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc112)
          %18 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %19 = cir.const #cir.int<2> : !s32i loc(#loc26)
          %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc26)
          %21 = cir.binop(mul, %18, %20) nsw : !s64i loc(#loc27)
          cir.store %21, %17 : !s64i, !cir.ptr<!s64i> loc(#loc112)
          %22 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc29)
        } loc(#loc111)
      } loc(#loc109)
    } loc(#loc106)
    cir.return loc(#loc6)
  } loc(#loc102)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_multiply_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc115)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc113)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc40)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc42)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc119)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc121)
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc122)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc47)
      cir.store %6, %4 : !s64i, !cir.ptr<!s64i> loc(#loc121)
      %7 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc49)
      cir.store %7, %5 : !s64i, !cir.ptr<!s64i> loc(#loc122)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc52)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc53)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc53)
        %11 = cir.cmp(gt, %8, %10) : !s64i, !s32i loc(#loc124)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc54)
        cir.if %12 {
          %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc126)
          %14 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc58)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc57)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc57)
          %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc58)
          cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc126)
          %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc59)
          cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc60)
        } loc(#loc125)
      } loc(#loc123)
    } loc(#loc120)
    cir.return loc(#loc37)
  } loc(#loc116)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc127)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc63)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc68)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc70)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc70)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc70)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc70)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc70)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc70)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc70)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc70)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc70)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc70)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc70)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc70)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc70)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc70)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc70)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc70)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc70)
      cir.yield %29 : !u64i loc(#loc70)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc70)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc70)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc70)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc70)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc70)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc70)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc70)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc70)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc70)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc70)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc70)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc70)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc70)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc70)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc70)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc70)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc70)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc70)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc70)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc70)
      cir.yield %33 : !u64i loc(#loc70)
    }) : (!cir.bool) -> !u64i loc(#loc70)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc70)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["dataCopy", init] {alignment = 8 : i64} loc(#loc133)
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc134)
      %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc133)
      %11 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc77)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc134)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc80)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc81)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc81)
        %15 = cir.cmp(gt, %12, %14) : !s64i, !s32i loc(#loc136)
        %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc82)
        cir.if %16 {
          cir.scope {
            %17 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc86)
            %18 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc87)
            %19 = cir.const #cir.int<2> : !s32i loc(#loc88)
            %20 = cir.cast(integral, %19 : !s32i), !s64i loc(#loc88)
            %21 = cir.binop(div, %18, %20) : !s64i loc(#loc139)
            %22 = cir.cmp(lt, %17, %21) : !s64i, !s32i loc(#loc140)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc90)
            cir.if %23 {
              %24 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc142)
              %25 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc96)
              %26 = cir.const #cir.int<2> : !s32i loc(#loc95)
              %27 = cir.cast(integral, %26 : !s32i), !s64i loc(#loc95)
              %28 = cir.binop(mul, %25, %27) nsw : !s64i loc(#loc96)
              cir.store %28, %24 : !s64i, !cir.ptr<!s64i> loc(#loc142)
              %29 = cir.load %24 : !cir.ptr<!s64i>, !s64i loc(#loc97)
              cir.call @printLongLongLine(%29) : (!s64i) -> () loc(#loc98)
            } else {
              %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc63)
              %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc63)
              cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc99)
            } loc(#loc141)
          } loc(#loc138)
        } loc(#loc137)
      } loc(#loc135)
    } loc(#loc132)
    cir.return loc(#loc65)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":27:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":37:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":29:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":29:28)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":30:24)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":36:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":31:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":31:19)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":31:17)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":34:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":34:37)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":34:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":35:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":35:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":89:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":93:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":91:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":91:13)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":92:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":92:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":45:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":61:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":47:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":47:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":48:12)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":48:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":50:12)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":50:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":51:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":60:5)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":52:9)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":52:28)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":53:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":53:24)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":54:9)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":59:9)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":54:12)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":54:19)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":54:17)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":55:9)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":57:13)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":57:37)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":57:30)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":58:31)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":58:13)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":83:27)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":64:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":87:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":66:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":66:13)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":67:12)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":67:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":69:21)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":69:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":70:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":86:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":71:9)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":71:28)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":72:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":72:24)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":73:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":85:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":73:12)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":73:19)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":73:17)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":74:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":84:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:17)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:25)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:35)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:36)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":76:22)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":77:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":80:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":82:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":78:17)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":78:41)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":78:34)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":79:35)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":79:17)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_31.c":83:17)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc5, #loc6])
#loc103 = loc(fused[#loc7, #loc8])
#loc104 = loc(fused[#loc10, #loc9])
#loc105 = loc(fused[#loc12, #loc11])
#loc106 = loc(fused[#loc13, #loc14])
#loc107 = loc(fused[#loc15, #loc16])
#loc108 = loc(fused[#loc17, #loc18])
#loc109 = loc(fused[#loc19, #loc20])
#loc110 = loc(fused[#loc21, #loc22])
#loc111 = loc(fused[#loc24, #loc20])
#loc112 = loc(fused[#loc25, #loc26])
#loc113 = loc(fused[#loc30, #loc31])
#loc114 = loc(fused[#loc32, #loc33])
#loc115 = loc(fused[#loc34, #loc35])
#loc116 = loc(fused[#loc36, #loc37])
#loc117 = loc(fused[#loc38, #loc39])
#loc118 = loc(fused[#loc41, #loc40])
#loc119 = loc(fused[#loc43, #loc42])
#loc120 = loc(fused[#loc44, #loc45])
#loc121 = loc(fused[#loc46, #loc47])
#loc122 = loc(fused[#loc48, #loc49])
#loc123 = loc(fused[#loc50, #loc51])
#loc124 = loc(fused[#loc52, #loc53])
#loc125 = loc(fused[#loc55, #loc51])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc61, #loc62])
#loc128 = loc(fused[#loc64, #loc65])
#loc129 = loc(fused[#loc66, #loc67])
#loc130 = loc(fused[#loc69, #loc68])
#loc131 = loc(fused[#loc71, #loc70])
#loc132 = loc(fused[#loc72, #loc73])
#loc133 = loc(fused[#loc74, #loc75])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc83, #loc79])
#loc138 = loc(fused[#loc84, #loc85])
#loc139 = loc(fused[#loc87, #loc88])
#loc140 = loc(fused[#loc86, #loc89])
#loc141 = loc(fused[#loc91, #loc92, #loc93, #loc85])
#loc142 = loc(fused[#loc94, #loc95])
