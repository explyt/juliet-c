!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc185)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc187)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc17)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc19)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
            cir.yield %21 : !u32i loc(#loc19)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc19)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc19)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc19)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc19)
            cir.yield %25 : !u32i loc(#loc19)
          }) : (!cir.bool) -> !u32i loc(#loc19)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc19)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
          cir.break loc(#loc21)
        } loc(#loc18)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc23)
          cir.break loc(#loc24)
        } loc(#loc22)
        cir.yield loc(#loc15)
      } loc(#loc15)
    } loc(#loc191)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc27)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc29)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc194)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc31)
          cir.break loc(#loc32)
        } loc(#loc28)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc35)
          cir.break loc(#loc36)
        } loc(#loc33)
        cir.yield loc(#loc25)
      } loc(#loc25)
    } loc(#loc193)
    cir.return loc(#loc9)
  } loc(#loc188)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc41)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc199)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc38)
  } loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc57)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc59)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc59)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc59)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc59)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc59)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc59)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc59)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc59)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc59)
            cir.yield %21 : !u32i loc(#loc59)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc59)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc59)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc59)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc59)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc59)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc59)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc59)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc59)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc59)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc59)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc59)
            cir.yield %25 : !u32i loc(#loc59)
          }) : (!cir.bool) -> !u32i loc(#loc59)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc59)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
          cir.break loc(#loc61)
        } loc(#loc58)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc64)
          cir.break loc(#loc65)
        } loc(#loc62)
        cir.yield loc(#loc55)
      } loc(#loc55)
    } loc(#loc203)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc68)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc71)
          cir.break loc(#loc72)
        } loc(#loc69)
        cir.case(default, []) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc77)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc207)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc81)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc209)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc83)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc84)
            } loc(#loc208)
          } loc(#loc206)
          cir.break loc(#loc85)
        } loc(#loc73)
        cir.yield loc(#loc66)
      } loc(#loc66)
    } loc(#loc205)
    cir.return loc(#loc49)
  } loc(#loc200)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc95)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc97)
          %6 = cir.binop(and, %4, %5) : !s32i loc(#loc97)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc97)
          %8 = cir.ternary(%7, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc97)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc97)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc97)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc97)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc97)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc97)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc97)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc97)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc97)
            cir.yield %21 : !u32i loc(#loc97)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc97)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc97)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc97)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc97)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc97)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc97)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc97)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc97)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc97)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc97)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc97)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc97)
            cir.yield %25 : !u32i loc(#loc97)
          }) : (!cir.bool) -> !u32i loc(#loc97)
          %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc97)
          cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          cir.break loc(#loc99)
        } loc(#loc96)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc102)
          cir.break loc(#loc103)
        } loc(#loc100)
        cir.yield loc(#loc93)
      } loc(#loc93)
    } loc(#loc213)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc106)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %5 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc217)
            cir.if %6 {
              %7 = cir.const #cir.int<100> : !s32i loc(#loc115)
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc219)
              cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc117)
            } else {
              %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc118)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc118)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc119)
            } loc(#loc218)
          } loc(#loc216)
          cir.break loc(#loc120)
        } loc(#loc107)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc122)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc122)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          cir.break loc(#loc124)
        } loc(#loc121)
        cir.yield loc(#loc104)
      } loc(#loc104)
    } loc(#loc215)
    cir.return loc(#loc87)
  } loc(#loc210)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc130)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc134)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc137)
          cir.break loc(#loc138)
        } loc(#loc135)
        cir.case(default, []) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc140)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
          cir.break loc(#loc142)
        } loc(#loc139)
        cir.yield loc(#loc132)
      } loc(#loc132)
    } loc(#loc223)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc145)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc147)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc226)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc149)
          cir.break loc(#loc150)
        } loc(#loc146)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc152)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc152)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc153)
          cir.break loc(#loc154)
        } loc(#loc151)
        cir.yield loc(#loc143)
      } loc(#loc143)
    } loc(#loc225)
    cir.return loc(#loc126)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc160)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc164)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %4 = cir.const #cir.int<7> : !s32i loc(#loc166)
          cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
          cir.break loc(#loc168)
        } loc(#loc165)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc171)
          cir.break loc(#loc172)
        } loc(#loc169)
        cir.yield loc(#loc162)
      } loc(#loc162)
    } loc(#loc230)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc175)
      cir.switch (%3 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %4 = cir.const #cir.int<100> : !s32i loc(#loc177)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc233)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc179)
          cir.break loc(#loc180)
        } loc(#loc176)
        cir.case(default, []) {
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc182)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc182)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc183)
          cir.break loc(#loc184)
        } loc(#loc181)
        cir.yield loc(#loc173)
      } loc(#loc173)
    } loc(#loc232)
    cir.return loc(#loc156)
  } loc(#loc227)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":49:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":37:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":27:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":29:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:16)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":31:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":32:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":33:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":35:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":36:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":48:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":38:12)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":40:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:22)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:28)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":42:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":43:9)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":44:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:19)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":46:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":47:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":189:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":195:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":191:14)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":192:14)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":193:14)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":194:14)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:23)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":56:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":90:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":58:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":60:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":71:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":61:12)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":63:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:16)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":65:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":66:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":67:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:19)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":69:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":70:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":89:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":72:12)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":74:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:19)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":76:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":77:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":78:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":87:9)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":80:21)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":81:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":83:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":85:9)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:26)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:32)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":82:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":86:13)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":88:9)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":93:1)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":127:1)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":95:9)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:13)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:12)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":97:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":108:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":98:12)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":100:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:16)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":102:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":103:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":104:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:19)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":106:9)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":107:9)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":126:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":109:12)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":111:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":120:9)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":113:21)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":114:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":116:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":118:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:26)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:32)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":115:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:23)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":119:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":121:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":122:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:19)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":124:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":125:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":130:1)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":157:1)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":132:9)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:12)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":134:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":145:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":135:12)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":137:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:19)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":139:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":140:9)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":141:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:16)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":143:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":144:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":156:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":146:12)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":148:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:22)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:28)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":150:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":151:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":152:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:19)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":154:9)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":155:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":160:1)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":187:1)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":162:9)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:13)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:12)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":164:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":175:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":165:12)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":167:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:16)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":169:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":170:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":171:5)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:19)
#loc171 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":173:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":174:9)
#loc173 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:5)
#loc174 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":186:5)
#loc175 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":176:12)
#loc176 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":178:5)
#loc177 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:22)
#loc178 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:28)
#loc179 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":180:9)
#loc180 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":181:9)
#loc181 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":182:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:19)
#loc183 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":184:9)
#loc184 = loc("CWE369_Divide_by_Zero__int_rand_modulo_15.c":185:9)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc6, #loc7])
#loc188 = loc(fused[#loc8, #loc9])
#loc189 = loc(fused[#loc10, #loc11])
#loc190 = loc(fused[#loc14, #loc12])
#loc191 = loc(fused[#loc15, #loc16])
#loc192 = loc(fused[#loc20, #loc19])
#loc193 = loc(fused[#loc25, #loc26])
#loc194 = loc(fused[#loc29, #loc30])
#loc195 = loc(fused[#loc37, #loc38])
#loc196 = loc(fused[#loc39, #loc40])
#loc197 = loc(fused[#loc41, #loc42])
#loc198 = loc(fused[#loc43, #loc44])
#loc199 = loc(fused[#loc45, #loc46])
#loc200 = loc(fused[#loc48, #loc49])
#loc201 = loc(fused[#loc50, #loc51])
#loc202 = loc(fused[#loc54, #loc52])
#loc203 = loc(fused[#loc55, #loc56])
#loc204 = loc(fused[#loc60, #loc59])
#loc205 = loc(fused[#loc66, #loc67])
#loc206 = loc(fused[#loc74, #loc75])
#loc207 = loc(fused[#loc76, #loc77])
#loc208 = loc(fused[#loc78, #loc79, #loc80, #loc75])
#loc209 = loc(fused[#loc81, #loc82])
#loc210 = loc(fused[#loc86, #loc87])
#loc211 = loc(fused[#loc88, #loc89])
#loc212 = loc(fused[#loc92, #loc90])
#loc213 = loc(fused[#loc93, #loc94])
#loc214 = loc(fused[#loc98, #loc97])
#loc215 = loc(fused[#loc104, #loc105])
#loc216 = loc(fused[#loc108, #loc109])
#loc217 = loc(fused[#loc110, #loc111])
#loc218 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc219 = loc(fused[#loc115, #loc116])
#loc220 = loc(fused[#loc125, #loc126])
#loc221 = loc(fused[#loc127, #loc128])
#loc222 = loc(fused[#loc131, #loc129])
#loc223 = loc(fused[#loc132, #loc133])
#loc224 = loc(fused[#loc141, #loc140])
#loc225 = loc(fused[#loc143, #loc144])
#loc226 = loc(fused[#loc147, #loc148])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc157, #loc158])
#loc229 = loc(fused[#loc161, #loc159])
#loc230 = loc(fused[#loc162, #loc163])
#loc231 = loc(fused[#loc167, #loc166])
#loc232 = loc(fused[#loc173, #loc174])
#loc233 = loc(fused[#loc177, #loc178])
