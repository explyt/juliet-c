!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc87)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc90)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc91)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc92)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc93)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc94)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc93)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc94)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc17)
    cir.store %6, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc95)
    cir.br ^bb1 loc(#loc96)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc6)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc89)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc22)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc22)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc22)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc22)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc22)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc97)
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
    %15 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc25)
    cir.store %14, %15 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
    cir.br ^bb2 loc(#loc20)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc99)
  ^bb3:  // pred: ^bb2
    %16 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %17 = cir.load %16 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc29)
    cir.store %17, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc90)
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %18 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc91)
    cir.store %18, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc91)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %20 = cir.cast(bitcast, %19 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc32)
    %21 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc33)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc33)
    %23 = cir.const #cir.int<10> : !s32i loc(#loc34)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc34)
    %25 = cir.const #cir.int<4> : !u64i loc(#loc101)
    %26 = cir.binop(mul, %24, %25) : !u64i loc(#loc102)
    cir.libc.memmove %26 bytes from %22 to %20 : !cir.ptr<!void>, !u64i loc(#loc103)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %28 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%30) : (!s32i) -> () loc(#loc42)
    cir.br ^bb5 loc(#loc31)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc28)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc4)
  } loc(#loc88)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    cir.return loc(#loc44)
  } loc(#loc104)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc108)
    %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc109)
    %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc111)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc112)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc111)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc112)
    %6 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc61)
    cir.store %6, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc50)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc107)
    %9 = cir.const #cir.int<10> : !s32i loc(#loc66)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc66)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc66)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc66)
    %13 = cir.alloca !u8i, !cir.ptr<!u8i>, %12 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
    cir.store %15, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc115)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
    %17 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc69)
    cir.store %16, %17 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
    cir.br ^bb2 loc(#loc64)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc117)
  ^bb3:  // pred: ^bb2
    %18 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc52)
    %19 = cir.load %18 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    cir.store %19, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc108)
    cir.br ^bb4 loc(#loc118)
  ^bb4:  // pred: ^bb3
    %20 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc109)
    cir.store %20, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc109)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc76)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc76)
    %23 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc77)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
    %25 = cir.const #cir.int<10> : !s32i loc(#loc78)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc78)
    %27 = cir.const #cir.int<4> : !u64i loc(#loc119)
    %28 = cir.binop(mul, %26, %27) : !u64i loc(#loc120)
    cir.libc.memmove %28 bytes from %24 to %22 : !cir.ptr<!void>, !u64i loc(#loc121)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %30 = cir.const #cir.int<0> : !s32i loc(#loc84)
    %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc85)
    %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc83)
    cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc86)
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc72)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc48)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":42:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:23)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:23)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":36:13)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":36:32)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":23:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":23:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":24:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":24:24)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":25:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":25:24)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":26:12)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":26:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":27:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":32:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":28:22)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":30:23)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":30:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:21)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:10)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":31:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":33:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":41:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":34:22)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":35:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":40:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:21)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:27)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:35)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:38)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:48)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:13)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":38:49)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:26)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:31)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:32)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":39:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":72:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":75:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":74:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":74:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":49:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":70:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:23)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:23)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":64:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":64:32)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":51:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":51:11)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":52:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":52:24)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":53:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":53:24)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":54:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":54:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":55:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":60:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":56:22)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":58:23)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":58:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:21)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:10)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":59:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":61:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":69:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":62:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":63:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":68:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:21)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:35)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:38)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:48)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":66:49)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:26)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:31)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:32)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memmove_32.c":67:13)
#loc87 = loc(fused[#loc1, #loc2])
#loc88 = loc(fused[#loc3, #loc4])
#loc89 = loc(fused[#loc5, #loc6])
#loc90 = loc(fused[#loc7, #loc8])
#loc91 = loc(fused[#loc9, #loc10])
#loc92 = loc(fused[#loc11, #loc12])
#loc93 = loc(fused[#loc13, #loc14])
#loc94 = loc(fused[#loc15, #loc16])
#loc95 = loc(fused[#loc18, #loc17])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc23, #loc22])
#loc98 = loc(fused[#loc26, #loc24])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc30, #loc31])
#loc101 = loc(fused[#loc35, #loc36])
#loc102 = loc(fused[#loc34, #loc36])
#loc103 = loc(fused[#loc37, #loc38])
#loc104 = loc(fused[#loc43, #loc44])
#loc105 = loc(fused[#loc45, #loc46])
#loc106 = loc(fused[#loc47, #loc48])
#loc107 = loc(fused[#loc49, #loc50])
#loc108 = loc(fused[#loc51, #loc52])
#loc109 = loc(fused[#loc53, #loc54])
#loc110 = loc(fused[#loc55, #loc56])
#loc111 = loc(fused[#loc57, #loc58])
#loc112 = loc(fused[#loc59, #loc60])
#loc113 = loc(fused[#loc62, #loc61])
#loc114 = loc(fused[#loc63, #loc64])
#loc115 = loc(fused[#loc67, #loc66])
#loc116 = loc(fused[#loc70, #loc68])
#loc117 = loc(fused[#loc71, #loc72])
#loc118 = loc(fused[#loc74, #loc75])
#loc119 = loc(fused[#loc79, #loc80])
#loc120 = loc(fused[#loc78, #loc80])
#loc121 = loc(fused[#loc81, #loc82])
