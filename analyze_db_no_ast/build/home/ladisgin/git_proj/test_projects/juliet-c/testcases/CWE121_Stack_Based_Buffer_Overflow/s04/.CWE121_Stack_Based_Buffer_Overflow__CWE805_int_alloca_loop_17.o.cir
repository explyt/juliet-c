!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc107)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc111)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc10)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc10)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc10)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc112)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc12)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc12)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc12)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc12)
    cir.store %17, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc112)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc15)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc115)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc19)
        cir.condition(%22) loc(#loc19)
      } body {
        cir.scope {
          %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
          cir.store %19, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc117)
        } loc(#loc116)
        cir.yield loc(#loc14)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc24)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
        cir.yield loc(#loc113)
      } loc(#loc113)
    } loc(#loc113)
    cir.scope {
      %18 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc120)
      %19 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc120)
      cir.store %19, %18 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc120)
      cir.scope {
        %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc122)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc35)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc35)
          cir.store %26, %20 : !u64i, !cir.ptr<!u64i> loc(#loc124)
          cir.for : cond {
            %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc37)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc38)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc38)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !s32i loc(#loc125)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc39)
            cir.condition(%31) loc(#loc39)
          } body {
            cir.scope {
              %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %28 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc42)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc42)
              %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
              %32 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc44)
              %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc45)
              cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            } loc(#loc126)
            cir.yield loc(#loc34)
          } step {
            %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc47)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc48)
            cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc128)
            cir.yield loc(#loc123)
          } loc(#loc123)
        } loc(#loc123)
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc51)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc52)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc4)
  } loc(#loc108)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    cir.return loc(#loc54)
  } loc(#loc129)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc134)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc64)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc64)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc64)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc64)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc64)
    %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc135)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc64)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc64)
    cir.store %10, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc134)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc66)
    %13 = cir.const #cir.int<4> : !u64i loc(#loc66)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc66)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc66)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc66)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc66)
    cir.store %17, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc135)
    cir.scope {
      %18 = cir.const #cir.int<0> : !s32i loc(#loc69)
      cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
      cir.for : cond {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %20 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %21 = cir.cmp(lt, %19, %20) : !s32i, !s32i loc(#loc138)
        %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc73)
        cir.condition(%22) loc(#loc73)
      } body {
        cir.scope {
          %19 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
          cir.store %19, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc140)
        } loc(#loc139)
        cir.yield loc(#loc68)
      } step {
        %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %20 = cir.unary(inc, %19) : !s32i, !s32i loc(#loc78)
        cir.store %20, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
        cir.yield loc(#loc136)
      } loc(#loc136)
    } loc(#loc136)
    cir.scope {
      %18 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc143)
      %19 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc143)
      cir.store %19, %18 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc143)
      cir.scope {
        %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc145)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc89)
          cir.store %26, %20 : !u64i, !cir.ptr<!u64i> loc(#loc147)
          cir.for : cond {
            %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc91)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc92)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc92)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !s32i loc(#loc148)
            %31 = cir.cast(int_to_bool, %30 : !s32i), !cir.bool loc(#loc93)
            cir.condition(%31) loc(#loc93)
          } body {
            cir.scope {
              %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc95)
              %28 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc96)
              %29 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %27 : !u64i), !cir.ptr<!s32i> loc(#loc96)
              %30 = cir.load %29 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %31 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
              %32 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc98)
              %33 = cir.ptr_stride(%31 : !cir.ptr<!s32i>, %32 : !u64i), !cir.ptr<!s32i> loc(#loc99)
              cir.store %30, %33 : !s32i, !cir.ptr<!s32i> loc(#loc150)
            } loc(#loc149)
            cir.yield loc(#loc88)
          } step {
            %27 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc101)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc102)
            cir.store %28, %20 : !u64i, !cir.ptr<!u64i> loc(#loc151)
            cir.yield loc(#loc146)
          } loc(#loc146)
        } loc(#loc146)
        %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
        %22 = cir.const #cir.int<0> : !s32i loc(#loc104)
        %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc105)
        %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc106)
      } loc(#loc144)
    } loc(#loc142)
    cir.return loc(#loc58)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":45:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":23:9)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":24:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":25:34)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":26:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":26:35)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":32:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:13)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:16)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:20)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:18)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":28:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":31:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":31:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:24)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":27:23)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":33:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":44:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":34:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":34:29)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":43:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":36:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":36:20)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":41:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:18)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:25)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:29)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":39:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:27)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:17)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:22)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:23)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":40:35)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:35)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":38:34)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":42:26)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":42:31)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":42:32)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":42:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":77:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":80:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":79:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":79:13)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":52:1)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":75:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":54:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":54:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":55:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":55:11)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":56:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":56:34)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":57:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":57:35)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":62:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:16)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:20)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:18)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":59:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":61:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":61:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:24)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":58:23)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":63:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":74:5)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":64:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":64:29)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":65:9)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":73:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":66:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":66:20)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:13)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":71:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:22)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:18)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:25)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:29)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:27)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":69:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:34)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:27)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:22)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:23)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":70:35)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:35)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":68:34)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":72:26)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":72:31)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":72:32)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_17.c":72:13)
#loc107 = loc(fused[#loc1, #loc2])
#loc108 = loc(fused[#loc3, #loc4])
#loc109 = loc(fused[#loc5, #loc6])
#loc110 = loc(fused[#loc7, #loc8])
#loc111 = loc(fused[#loc9, #loc10])
#loc112 = loc(fused[#loc11, #loc12])
#loc113 = loc(fused[#loc13, #loc14])
#loc114 = loc(fused[#loc16, #loc15])
#loc115 = loc(fused[#loc17, #loc18])
#loc116 = loc(fused[#loc20, #loc14])
#loc117 = loc(fused[#loc22, #loc21])
#loc118 = loc(fused[#loc24, #loc23])
#loc119 = loc(fused[#loc25, #loc26])
#loc120 = loc(fused[#loc27, #loc28])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc31, #loc32])
#loc123 = loc(fused[#loc33, #loc34])
#loc124 = loc(fused[#loc36, #loc35])
#loc125 = loc(fused[#loc37, #loc38])
#loc126 = loc(fused[#loc40, #loc34])
#loc127 = loc(fused[#loc43, #loc46])
#loc128 = loc(fused[#loc48, #loc47])
#loc129 = loc(fused[#loc53, #loc54])
#loc130 = loc(fused[#loc55, #loc56])
#loc131 = loc(fused[#loc57, #loc58])
#loc132 = loc(fused[#loc59, #loc60])
#loc133 = loc(fused[#loc61, #loc62])
#loc134 = loc(fused[#loc63, #loc64])
#loc135 = loc(fused[#loc65, #loc66])
#loc136 = loc(fused[#loc67, #loc68])
#loc137 = loc(fused[#loc70, #loc69])
#loc138 = loc(fused[#loc71, #loc72])
#loc139 = loc(fused[#loc74, #loc68])
#loc140 = loc(fused[#loc76, #loc75])
#loc141 = loc(fused[#loc78, #loc77])
#loc142 = loc(fused[#loc79, #loc80])
#loc143 = loc(fused[#loc81, #loc82])
#loc144 = loc(fused[#loc83, #loc84])
#loc145 = loc(fused[#loc85, #loc86])
#loc146 = loc(fused[#loc87, #loc88])
#loc147 = loc(fused[#loc90, #loc89])
#loc148 = loc(fused[#loc91, #loc92])
#loc149 = loc(fused[#loc94, #loc88])
#loc150 = loc(fused[#loc97, #loc100])
#loc151 = loc(fused[#loc102, #loc101])
