!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:25)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:25)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:29)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:25)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:29)
#loc153 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc66, #loc67])
#loc187 = loc(fused[#loc95, #loc96])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc151)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc155)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc157)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc15)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc16)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc157)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc18)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc4)
  } loc(#loc152)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc158)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc159)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc160)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc161)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc163)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc164)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc33)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc164)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc167)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc167)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc167)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc42)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc43)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc43)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc43)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc43)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc43)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc43)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc43)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc43)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc159)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc44)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc45)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc46)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc46)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc169)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc47)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc51)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc52)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc27)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc27)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc55)
        } loc(#loc170)
      } loc(#loc168)
    } loc(#loc166)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc56)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc56)
    cir.return loc(#loc29)
  } loc(#loc162)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc59)
  } loc(#loc172)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc66, #loc67])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc72)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc178)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc73)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc180)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %7 = cir.const #cir.int<2> : !s32i loc(#loc76)
        %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc77)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc180)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc79)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc65)
  } loc(#loc175)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc183)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc85)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc183)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc88)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc90)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc90)
    cir.return loc(#loc81)
  } loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc92)
  cir.func internal private  @goodB2GSink(%arg0: !s32i loc(fused[#loc95, #loc96])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc187)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc101)
      %3 = cir.cmp(gt, %1, %2) : !s32i, !s32i loc(#loc189)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc102)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc107)
          %7 = cir.const #cir.int<2> : !s32i loc(#loc108)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc192)
          %9 = cir.cmp(lt, %5, %8) : !s32i, !s32i loc(#loc193)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc110)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %13 = cir.const #cir.int<2> : !s32i loc(#loc115)
            %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc116)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc195)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc118)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc92)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc92)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc194)
        } loc(#loc191)
      } loc(#loc190)
    } loc(#loc188)
    cir.return loc(#loc94)
  } loc(#loc186)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc125)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc198)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc126)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %6 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc201)
      %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc201)
      cir.store %7, %6 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc201)
      cir.scope {
        %8 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc134)
        %9 = cir.const #cir.int<3> : !s32i loc(#loc135)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc135)
        %11 = cir.const #cir.int<4> : !u64i loc(#loc135)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc135)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc135)
        %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc135)
        %15 = cir.binop(add, %12, %14) : !u64i loc(#loc135)
        %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc135)
        %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc159)
        %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc136)
        %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc137)
        %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc138)
        %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !s32i loc(#loc203)
        %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc139)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc143)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc144)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc205)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc147)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc147)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc148)
        } loc(#loc204)
      } loc(#loc202)
    } loc(#loc200)
    %4 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc149)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
    cir.call %4(%5) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc149)
    cir.return loc(#loc121)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:8)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:15)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:13)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":27:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:29)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:22)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":30:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":30:9)
#loc19 = loc("/usr/include/stdio.h":654:1)
#loc20 = loc("/usr/include/stdio.h":655:59)
#loc21 = loc("/usr/include/stdio.h":149:1)
#loc22 = loc("/usr/include/stdio.h":149:14)
#loc23 = loc("/usr/include/stdlib.h":105:1)
#loc24 = loc("/usr/include/stdlib.h":106:33)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":51:23)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":34:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":56:1)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":36:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":36:9)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":38:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":38:29)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":40:12)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":40:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":41:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":53:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":42:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":42:45)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":52:9)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:19)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:32)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:49)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:13)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:59)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:56)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":45:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":48:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":50:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:25)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:20)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:36)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":51:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":55:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":55:13)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":124:1)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":128:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":126:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":126:13)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":127:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":127:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":71:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":64:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":70:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:8)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:15)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:13)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":66:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:9)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:29)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:22)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":69:22)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":69:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":73:1)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":82:1)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":75:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":75:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":76:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":76:29)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":78:12)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":78:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":80:12)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":80:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":81:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":81:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":97:23)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":100:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":86:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":99:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:8)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:15)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:13)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":88:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":98:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:21)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:29)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:30)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:18)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":91:9)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":94:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":96:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:33)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:26)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":93:26)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":93:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":97:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":102:1)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":122:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":104:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":104:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":105:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":105:29)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":107:12)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":107:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":108:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":120:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":109:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":109:45)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:9)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":119:9)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:19)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:32)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:49)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:59)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:56)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":112:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":115:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":117:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:25)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:20)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:36)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":118:23)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":118:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":121:5)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":121:13)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc8, #loc9])
#loc155 = loc(fused[#loc10, #loc11])
#loc156 = loc(fused[#loc13, #loc9])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc19, #loc20])
#loc159 = loc(fused[#loc21, #loc22])
#loc160 = loc(fused[#loc23, #loc24])
#loc161 = loc(fused[#loc25, #loc26])
#loc162 = loc(fused[#loc28, #loc29])
#loc163 = loc(fused[#loc30, #loc31])
#loc164 = loc(fused[#loc32, #loc33])
#loc165 = loc(fused[#loc35, #loc34])
#loc166 = loc(fused[#loc36, #loc37])
#loc167 = loc(fused[#loc38, #loc39])
#loc168 = loc(fused[#loc40, #loc41])
#loc169 = loc(fused[#loc45, #loc46])
#loc170 = loc(fused[#loc48, #loc49, #loc50, #loc41])
#loc171 = loc(fused[#loc53, #loc54])
#loc172 = loc(fused[#loc58, #loc59])
#loc173 = loc(fused[#loc60, #loc61])
#loc174 = loc(fused[#loc62, #loc63])
#loc175 = loc(fused[#loc64, #loc65])
#loc177 = loc(fused[#loc69, #loc70])
#loc178 = loc(fused[#loc71, #loc72])
#loc179 = loc(fused[#loc74, #loc70])
#loc180 = loc(fused[#loc75, #loc76])
#loc181 = loc(fused[#loc80, #loc81])
#loc182 = loc(fused[#loc82, #loc83])
#loc183 = loc(fused[#loc84, #loc85])
#loc184 = loc(fused[#loc87, #loc86])
#loc185 = loc(fused[#loc89, #loc88])
#loc186 = loc(fused[#loc93, #loc94])
#loc188 = loc(fused[#loc98, #loc99])
#loc189 = loc(fused[#loc100, #loc101])
#loc190 = loc(fused[#loc103, #loc99])
#loc191 = loc(fused[#loc104, #loc105])
#loc192 = loc(fused[#loc107, #loc108])
#loc193 = loc(fused[#loc106, #loc109])
#loc194 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc195 = loc(fused[#loc114, #loc115])
#loc196 = loc(fused[#loc120, #loc121])
#loc197 = loc(fused[#loc122, #loc123])
#loc198 = loc(fused[#loc124, #loc125])
#loc199 = loc(fused[#loc127, #loc126])
#loc200 = loc(fused[#loc128, #loc129])
#loc201 = loc(fused[#loc130, #loc131])
#loc202 = loc(fused[#loc132, #loc133])
#loc203 = loc(fused[#loc137, #loc138])
#loc204 = loc(fused[#loc140, #loc141, #loc142, #loc133])
#loc205 = loc(fused[#loc145, #loc146])
