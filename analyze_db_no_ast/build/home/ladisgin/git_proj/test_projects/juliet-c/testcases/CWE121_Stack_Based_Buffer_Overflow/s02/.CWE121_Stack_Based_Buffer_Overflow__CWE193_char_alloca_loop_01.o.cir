!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc97)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc101)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc10)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc10)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc10)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc102)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc101)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc12)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc12)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc12)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc12)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc13)
    cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc15)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc18)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc104)
    cir.scope {
      %25 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc106)
      %26 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc107)
      %27 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc108)
      %28 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc106)
      cir.store %28, %25 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc106)
      %29 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc26)
      %30 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc27)
      %31 = cir.call @strlen(%30) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc26)
      cir.store %31, %27 : !u64i, !cir.ptr<!u64i> loc(#loc109)
      cir.scope {
        %33 = cir.const #cir.int<0> : !s32i loc(#loc32)
        %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc32)
        cir.store %34, %26 : !u64i, !cir.ptr<!u64i> loc(#loc111)
        cir.for : cond {
          %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc34)
          %36 = cir.load %27 : !cir.ptr<!u64i>, !u64i loc(#loc35)
          %37 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc36)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc112)
          %40 = cir.cmp(lt, %35, %39) : !u64i, !s32i loc(#loc113)
          %41 = cir.cast(int_to_bool, %40 : !s32i), !cir.bool loc(#loc37)
          cir.condition(%41) loc(#loc37)
        } body {
          cir.scope {
            %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc39)
            %36 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc40)
            %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc40)
            %38 = cir.load %37 : !cir.ptr<!s8i>, !s8i loc(#loc40)
            %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
            %40 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc42)
            %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc43)
            cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc115)
          } loc(#loc114)
          cir.yield loc(#loc31)
        } step {
          %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc46)
          cir.store %36, %26 : !u64i, !cir.ptr<!u64i> loc(#loc116)
          cir.yield loc(#loc110)
        } loc(#loc110)
      } loc(#loc110)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    } loc(#loc105)
    cir.return loc(#loc6)
  } loc(#loc99)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc117)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc121)
    %2 = cir.const #cir.int<10> : !s32i loc(#loc58)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc58)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc58)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc58)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc58)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc122)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc58)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc58)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc121)
    %10 = cir.const #cir.int<10> : !s32i loc(#loc60)
    %11 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc60)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc60)
    %14 = cir.const #cir.int<1> : !u64i loc(#loc60)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc60)
    %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc60)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc60)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
    cir.store %18, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
    %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    cir.store %19, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc123)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc63)
    %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
    %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
    %24 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc66)
    cir.store %21, %24 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.scope {
      %25 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc126)
      %26 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc127)
      %27 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc128)
      %28 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc126)
      cir.store %28, %25 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc126)
      %29 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc74)
      %30 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc75)
      %31 = cir.call @strlen(%30) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc74)
      cir.store %31, %27 : !u64i, !cir.ptr<!u64i> loc(#loc129)
      cir.scope {
        %33 = cir.const #cir.int<0> : !s32i loc(#loc80)
        %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc80)
        cir.store %34, %26 : !u64i, !cir.ptr<!u64i> loc(#loc131)
        cir.for : cond {
          %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc82)
          %36 = cir.load %27 : !cir.ptr<!u64i>, !u64i loc(#loc83)
          %37 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc84)
          %39 = cir.binop(add, %36, %38) : !u64i loc(#loc132)
          %40 = cir.cmp(lt, %35, %39) : !u64i, !s32i loc(#loc133)
          %41 = cir.cast(int_to_bool, %40 : !s32i), !cir.bool loc(#loc85)
          cir.condition(%41) loc(#loc85)
        } body {
          cir.scope {
            %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %36 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc88)
            %37 = cir.ptr_stride(%36 : !cir.ptr<!s8i>, %35 : !u64i), !cir.ptr<!s8i> loc(#loc88)
            %38 = cir.load %37 : !cir.ptr<!s8i>, !s8i loc(#loc88)
            %39 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc89)
            %40 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %41 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %40 : !u64i), !cir.ptr<!s8i> loc(#loc91)
            cir.store %38, %41 : !s8i, !cir.ptr<!s8i> loc(#loc135)
          } loc(#loc134)
          cir.yield loc(#loc79)
        } step {
          %35 = cir.load %26 : !cir.ptr<!u64i>, !u64i loc(#loc93)
          %36 = cir.unary(inc, %35) : !u64i, !u64i loc(#loc94)
          cir.store %36, %26 : !u64i, !cir.ptr<!u64i> loc(#loc136)
          cir.yield loc(#loc130)
        } loc(#loc130)
      } loc(#loc130)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    } loc(#loc125)
    cir.return loc(#loc54)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s02/CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":28:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":49:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":30:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":31:36)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":32:37)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":35:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":35:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":36:15)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":36:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":36:10)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":36:11)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":37:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":48:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":38:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":38:29)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":39:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":39:16)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":39:19)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":40:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":40:28)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":40:9)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":40:34)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":46:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:18)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:14)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:21)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:25)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:37)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":44:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:30)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:23)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:18)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:19)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":45:31)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:41)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":43:40)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":47:19)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":47:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":79:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":82:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":81:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":81:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":56:1)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":77:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":58:12)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":59:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":59:36)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":60:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":60:37)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":63:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":63:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":64:15)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":64:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":64:10)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":64:11)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":65:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":76:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":66:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":66:29)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":67:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":67:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":67:19)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":68:21)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":68:28)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":68:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":68:34)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":74:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:18)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:14)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:21)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:25)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:37)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:23)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":72:9)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:30)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:23)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:13)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:18)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":73:31)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:41)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":71:40)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":75:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE193_char_alloca_loop_01.c":75:9)
#loc97 = loc(fused[#loc1, #loc2])
#loc98 = loc(fused[#loc3, #loc4])
#loc99 = loc(fused[#loc5, #loc6])
#loc100 = loc(fused[#loc7, #loc8])
#loc101 = loc(fused[#loc9, #loc10])
#loc102 = loc(fused[#loc11, #loc12])
#loc103 = loc(fused[#loc14, #loc13])
#loc104 = loc(fused[#loc16, #loc15])
#loc105 = loc(fused[#loc19, #loc20])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc23, #loc24])
#loc108 = loc(fused[#loc23, #loc25])
#loc109 = loc(fused[#loc28, #loc29])
#loc110 = loc(fused[#loc30, #loc31])
#loc111 = loc(fused[#loc33, #loc32])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc34, #loc36])
#loc114 = loc(fused[#loc38, #loc31])
#loc115 = loc(fused[#loc41, #loc44])
#loc116 = loc(fused[#loc46, #loc45])
#loc117 = loc(fused[#loc49, #loc50])
#loc118 = loc(fused[#loc51, #loc52])
#loc119 = loc(fused[#loc53, #loc54])
#loc120 = loc(fused[#loc55, #loc56])
#loc121 = loc(fused[#loc57, #loc58])
#loc122 = loc(fused[#loc59, #loc60])
#loc123 = loc(fused[#loc62, #loc61])
#loc124 = loc(fused[#loc64, #loc63])
#loc125 = loc(fused[#loc67, #loc68])
#loc126 = loc(fused[#loc69, #loc70])
#loc127 = loc(fused[#loc71, #loc72])
#loc128 = loc(fused[#loc71, #loc73])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc81, #loc80])
#loc132 = loc(fused[#loc83, #loc84])
#loc133 = loc(fused[#loc82, #loc84])
#loc134 = loc(fused[#loc86, #loc79])
#loc135 = loc(fused[#loc89, #loc92])
#loc136 = loc(fused[#loc94, #loc93])
