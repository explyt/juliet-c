!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc172)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc173)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc174)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc175)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc176)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc179)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc180)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc181)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc182)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc183)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc185)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc185)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc31)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc186)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc187)
    cir.br ^bb4 loc(#loc34)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc4)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc4)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc4)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc188)
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc30)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc189)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc190)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc190)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc40)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc191)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc192)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc47)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
    %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc47)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc178)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc20)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc20)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc20)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc20)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc179)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    %34 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc50)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
    %36 = cir.call @wcscpy(%33, %35) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc51)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb9 loc(#loc46)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc43)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc193)
  ^bb11:  // pred: ^bb10
    %39 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc56)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
    %42 = cir.call @wcslen(%41) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc56)
    cir.store %42, %2 : !u64i, !cir.ptr<!u64i> loc(#loc180)
    %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc24)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc24)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc24)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc24)
    %49 = cir.alloca !u8i, !cir.ptr<!u8i>, %48 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc24)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc24)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc181)
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %53 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc60)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc62)
    cir.br ^bb12 loc(#loc55)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc39)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc16)
  } loc(#loc177)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc195)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc194)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc200)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc201)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc202)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc81)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc203)
    cir.br ^bb1 loc(#loc204)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc205)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc205)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc85)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc85)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc206)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc90)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc90)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc90)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc207)
    cir.br ^bb4 loc(#loc88)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc92)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc92)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc92)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc208)
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc84)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc209)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc210)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc210)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc96)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc96)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc211)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc212)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc103)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc104)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
    %23 = cir.call @wcslen(%22) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc103)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc198)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc74)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc74)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc74)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc74)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc74)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc74)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc74)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc74)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc199)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
    %34 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
    %36 = cir.call @wcscpy(%33, %35) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc107)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    cir.call @printWLine(%38) : (!cir.ptr<!s32i>) -> () loc(#loc109)
    cir.br ^bb9 loc(#loc102)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc99)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc213)
  ^bb11:  // pred: ^bb10
    %39 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc112)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc113)
    %42 = cir.call @wcslen(%41) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc112)
    cir.store %42, %2 : !u64i, !cir.ptr<!u64i> loc(#loc200)
    %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc78)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc78)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc78)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc78)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc78)
    %49 = cir.alloca !u8i, !cir.ptr<!u8i>, %48 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc78)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc78)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc201)
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc114)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc114)
    %53 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc115)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc115)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc116)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc117)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc117)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc118)
    cir.br ^bb12 loc(#loc111)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc95)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc95)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc70)
  } loc(#loc197)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc214)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc216)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc217)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc218)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc219)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc221)
    cir.br ^bb1 loc(#loc222)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc223)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc137)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc137)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc142)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc142)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc142)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
    cir.br ^bb4 loc(#loc140)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc144)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc144)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc226)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc227)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc228)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc228)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc148)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc148)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc229)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc230)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc155)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc156)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc156)
    %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc155)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc216)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc126)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc126)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc126)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc126)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc126)
    %30 = cir.binop(mul, %27, %29) : !u64i loc(#loc126)
    %31 = cir.alloca !u8i, !cir.ptr<!u8i>, %30 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc126)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc126)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc217)
    %33 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc157)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc158)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    %36 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc159)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc159)
    %38 = cir.call @strcpy(%35, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc157)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc160)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc160)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    cir.br ^bb9 loc(#loc154)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc151)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc231)
  ^bb11:  // pred: ^bb10
    %41 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc164)
    %42 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc165)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
    %44 = cir.call @strlen(%43) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc164)
    cir.store %44, %2 : !u64i, !cir.ptr<!u64i> loc(#loc218)
    %45 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc130)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc130)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc130)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc130)
    %51 = cir.binop(mul, %48, %50) : !u64i loc(#loc130)
    %52 = cir.alloca !u8i, !cir.ptr<!u8i>, %51 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc130)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc130)
    cir.store %53, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    %54 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc166)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc167)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc167)
    %57 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc168)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc168)
    %59 = cir.call @strcpy(%56, %58) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc166)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc169)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    cir.br ^bb12 loc(#loc163)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc147)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc147)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc122)
  } loc(#loc215)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:24)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:24)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/wchar.h":247:1)
#loc12 = loc("/usr/include/wchar.h":247:51)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":27:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":61:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:49)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:35)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:52)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:35)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:12)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":40:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:8)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:33)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":32:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":35:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":37:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":60:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:8)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":42:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":50:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":52:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":43:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":49:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:30)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:45)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:26)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:32)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":53:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":59:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:48)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:26)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":145:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":149:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":70:1)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":104:1)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:52)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:35)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:13)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:52)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:35)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:12)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:12)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:5)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":83:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:8)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:33)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":75:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":78:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":80:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:24)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:24)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":103:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:8)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:33)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":85:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":93:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":95:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":86:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":92:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:30)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:48)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:26)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:32)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:19)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:35)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:13)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":96:9)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":102:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:30)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:48)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:26)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:32)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:19)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:35)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:13)
#loc119 = loc("/usr/include/string.h":141:1)
#loc120 = loc("/usr/include/string.h":142:14)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":109:1)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":143:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:13)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:49)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:35)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:49)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:13)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:35)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:12)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:12)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":122:5)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:8)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:33)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":114:5)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":117:5)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":119:5)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:24)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:24)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:9)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:5)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":142:5)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:8)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:33)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":124:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":132:5)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":134:5)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":125:9)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":131:9)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:30)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:45)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:19)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:26)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:32)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:31)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":135:9)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":141:9)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:30)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:45)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:19)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:26)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:32)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:31)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:13)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc5, #loc6])
#loc173 = loc(fused[#loc7, #loc8])
#loc174 = loc(fused[#loc9, #loc10])
#loc175 = loc(fused[#loc11, #loc12])
#loc176 = loc(fused[#loc13, #loc14])
#loc177 = loc(fused[#loc15, #loc16])
#loc178 = loc(fused[#loc17, #loc18])
#loc179 = loc(fused[#loc19, #loc20])
#loc180 = loc(fused[#loc21, #loc22])
#loc181 = loc(fused[#loc23, #loc24])
#loc182 = loc(fused[#loc25, #loc26])
#loc183 = loc(fused[#loc28, #loc27])
#loc184 = loc(fused[#loc29, #loc30])
#loc185 = loc(fused[#loc31, #loc32])
#loc186 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc187 = loc(fused[#loc36, #loc3])
#loc188 = loc(fused[#loc37, #loc4])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc192 = loc(fused[#loc45, #loc46])
#loc193 = loc(fused[#loc54, #loc55])
#loc194 = loc(fused[#loc63, #loc64])
#loc195 = loc(fused[#loc65, #loc66])
#loc196 = loc(fused[#loc67, #loc68])
#loc197 = loc(fused[#loc69, #loc70])
#loc198 = loc(fused[#loc71, #loc72])
#loc199 = loc(fused[#loc73, #loc74])
#loc200 = loc(fused[#loc75, #loc76])
#loc201 = loc(fused[#loc77, #loc78])
#loc202 = loc(fused[#loc79, #loc80])
#loc203 = loc(fused[#loc82, #loc81])
#loc204 = loc(fused[#loc83, #loc84])
#loc205 = loc(fused[#loc85, #loc86])
#loc206 = loc(fused[#loc87, #loc88, #loc89, #loc84])
#loc207 = loc(fused[#loc91, #loc90])
#loc208 = loc(fused[#loc93, #loc92])
#loc209 = loc(fused[#loc94, #loc95])
#loc210 = loc(fused[#loc96, #loc97])
#loc211 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc212 = loc(fused[#loc101, #loc102])
#loc213 = loc(fused[#loc110, #loc111])
#loc214 = loc(fused[#loc119, #loc120])
#loc215 = loc(fused[#loc121, #loc122])
#loc216 = loc(fused[#loc123, #loc124])
#loc217 = loc(fused[#loc125, #loc126])
#loc218 = loc(fused[#loc127, #loc128])
#loc219 = loc(fused[#loc129, #loc130])
#loc220 = loc(fused[#loc131, #loc132])
#loc221 = loc(fused[#loc134, #loc133])
#loc222 = loc(fused[#loc135, #loc136])
#loc223 = loc(fused[#loc137, #loc138])
#loc224 = loc(fused[#loc139, #loc140, #loc141, #loc136])
#loc225 = loc(fused[#loc143, #loc142])
#loc226 = loc(fused[#loc145, #loc144])
#loc227 = loc(fused[#loc146, #loc147])
#loc228 = loc(fused[#loc148, #loc149])
#loc229 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc162, #loc163])
