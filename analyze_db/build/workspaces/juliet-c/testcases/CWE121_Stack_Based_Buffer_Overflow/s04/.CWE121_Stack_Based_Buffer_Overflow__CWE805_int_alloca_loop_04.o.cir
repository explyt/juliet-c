!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc141)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc145)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc144)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc13)
      cir.if %18 {
        %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc148)
      } loc(#loc147)
    } loc(#loc146)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc150)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc150)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc150)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc152)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc27)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc27)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc154)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc29)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc30)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc30)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc155)
            cir.condition(%29) loc(#loc31)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc34)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc34)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc36)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc37)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc157)
            } loc(#loc156)
            cir.yield loc(#loc26)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc39)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc40)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc158)
            cir.yield loc(#loc153)
          } loc(#loc153)
        } loc(#loc153)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc42)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc43)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc44)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc4)
  } loc(#loc142)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc160)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc161)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc49)
    cir.return loc(#loc46)
  } loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc59)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc59)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc59)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc59)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc59)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc166)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc59)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc61)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc61)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc61)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc166)
    cir.scope {
      %17 = cir.const #cir.int<0> : !s32i loc(#loc64)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc64)
      cir.if %18 {
        %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
        %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
      } loc(#loc168)
    } loc(#loc167)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc171)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc171)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc171)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc173)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc81)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc81)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc175)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc83)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc84)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc84)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc176)
            cir.condition(%29) loc(#loc85)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc87)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc88)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc88)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc88)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc90)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc91)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc178)
            } loc(#loc177)
            cir.yield loc(#loc80)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc93)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc94)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc179)
            cir.yield loc(#loc174)
          } loc(#loc174)
        } loc(#loc174)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc96)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc97)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc95)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc98)
      } loc(#loc172)
    } loc(#loc170)
    cir.return loc(#loc55)
  } loc(#loc163)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc181)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc182)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc104)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc104)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc104)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc104)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc183)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc106)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc106)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc106)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc106)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc106)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc106)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
    cir.scope {
      %17 = cir.const #cir.int<1> : !s32i loc(#loc109)
      %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc109)
      cir.if %18 {
        %19 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
        cir.store %19, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc188)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc188)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc188)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc190)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc123)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc123)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc192)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc125)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc126)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc126)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc193)
            cir.condition(%29) loc(#loc127)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc129)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc130)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc130)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc133)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc195)
            } loc(#loc194)
            cir.yield loc(#loc122)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc135)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc136)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc196)
            cir.yield loc(#loc191)
          } loc(#loc191)
        } loc(#loc191)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc138)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc139)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc140)
      } loc(#loc189)
    } loc(#loc187)
    cir.return loc(#loc100)
  } loc(#loc180)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":28:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":51:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":30:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":30:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":31:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":31:34)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":32:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":32:35)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":33:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":38:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":33:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":34:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":37:16)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":37:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":39:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":50:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":40:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":40:29)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":41:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":49:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":42:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":42:20)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":47:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:18)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:25)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:27)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":45:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:22)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:23)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":46:35)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:35)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":44:34)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":48:26)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":48:31)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":48:32)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":48:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":112:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":116:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":114:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":114:14)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":115:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":115:14)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":66:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":58:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":85:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":60:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":60:11)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":61:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":61:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":62:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":62:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":63:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":72:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":63:8)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":64:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":67:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":69:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":66:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":71:16)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":71:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":73:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":84:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":74:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":74:29)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":75:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":83:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":76:13)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":76:20)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":81:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:18)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:25)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:29)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:27)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":79:13)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:34)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:27)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:17)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:22)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:23)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":80:35)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:35)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":78:34)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":82:26)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":82:31)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":82:32)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":82:13)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":88:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":110:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":90:5)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":90:11)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":91:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":91:34)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":92:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":92:35)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":93:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":97:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":93:8)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":94:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":96:16)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":96:9)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":98:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":109:5)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":99:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":99:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":100:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":108:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":101:13)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":101:20)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:13)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":106:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:22)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:18)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:25)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:29)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:27)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":104:13)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:34)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:27)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:17)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:22)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:23)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":105:35)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:35)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":103:34)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":107:26)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":107:31)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":107:32)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_04.c":107:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc5, #loc6])
#loc144 = loc(fused[#loc7, #loc8])
#loc145 = loc(fused[#loc9, #loc10])
#loc146 = loc(fused[#loc11, #loc12])
#loc147 = loc(fused[#loc14, #loc12])
#loc148 = loc(fused[#loc16, #loc15])
#loc149 = loc(fused[#loc17, #loc18])
#loc150 = loc(fused[#loc19, #loc20])
#loc151 = loc(fused[#loc21, #loc22])
#loc152 = loc(fused[#loc23, #loc24])
#loc153 = loc(fused[#loc25, #loc26])
#loc154 = loc(fused[#loc28, #loc27])
#loc155 = loc(fused[#loc29, #loc30])
#loc156 = loc(fused[#loc32, #loc26])
#loc157 = loc(fused[#loc35, #loc38])
#loc158 = loc(fused[#loc40, #loc39])
#loc159 = loc(fused[#loc45, #loc46])
#loc160 = loc(fused[#loc47, #loc48])
#loc161 = loc(fused[#loc49, #loc50])
#loc162 = loc(fused[#loc51, #loc52])
#loc163 = loc(fused[#loc54, #loc55])
#loc164 = loc(fused[#loc56, #loc57])
#loc165 = loc(fused[#loc58, #loc59])
#loc166 = loc(fused[#loc60, #loc61])
#loc167 = loc(fused[#loc62, #loc63])
#loc168 = loc(fused[#loc65, #loc66, #loc67, #loc63])
#loc169 = loc(fused[#loc70, #loc69])
#loc170 = loc(fused[#loc71, #loc72])
#loc171 = loc(fused[#loc73, #loc74])
#loc172 = loc(fused[#loc75, #loc76])
#loc173 = loc(fused[#loc77, #loc78])
#loc174 = loc(fused[#loc79, #loc80])
#loc175 = loc(fused[#loc82, #loc81])
#loc176 = loc(fused[#loc83, #loc84])
#loc177 = loc(fused[#loc86, #loc80])
#loc178 = loc(fused[#loc89, #loc92])
#loc179 = loc(fused[#loc94, #loc93])
#loc180 = loc(fused[#loc99, #loc100])
#loc181 = loc(fused[#loc101, #loc102])
#loc182 = loc(fused[#loc103, #loc104])
#loc183 = loc(fused[#loc105, #loc106])
#loc184 = loc(fused[#loc107, #loc108])
#loc185 = loc(fused[#loc110, #loc108])
#loc186 = loc(fused[#loc112, #loc111])
#loc187 = loc(fused[#loc113, #loc114])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc117, #loc118])
#loc190 = loc(fused[#loc119, #loc120])
#loc191 = loc(fused[#loc121, #loc122])
#loc192 = loc(fused[#loc124, #loc123])
#loc193 = loc(fused[#loc125, #loc126])
#loc194 = loc(fused[#loc128, #loc122])
#loc195 = loc(fused[#loc131, #loc134])
#loc196 = loc(fused[#loc136, #loc135])
