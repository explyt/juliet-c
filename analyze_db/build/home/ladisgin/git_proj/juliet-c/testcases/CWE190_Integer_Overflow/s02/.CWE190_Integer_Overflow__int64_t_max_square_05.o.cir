!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private @printLongLongLine(!s64i) loc(#loc166)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc172)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc17)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc173)
    cir.br ^bb3 loc(#loc14)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc174)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc175)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc176)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc25)
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc8)
    %12 = cir.binop(mul, %10, %11) nsw : !s64i loc(#loc25)
    cir.store %12, %0 : !s64i, !cir.ptr<!s64i> loc(#loc168)
    %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc27)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc20)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc167)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc177)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc182)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc42)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc184)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc46)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc57)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc190)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc59)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc191)
    cir.br ^bb3 loc(#loc56)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc192)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc182)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc193)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc42)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    cir.br ^bb13 loc(#loc65)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc194)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc70)
    %13 = cir.call @imaxabs(%12) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc71)
    %14 = cir.cast(int_to_float, %13 : !s64i), !cir.long_double<!cir.f80> loc(#loc71)
    %15 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc72)
    %16 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc73)
    %17 = cir.cast(int_to_float, %16 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
    %18 = cir.call @sqrtl(%17) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc72)
    %19 = cir.cmp(le, %14, %18) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc195)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc196)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    %21 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc50)
    %22 = cir.binop(mul, %20, %21) nsw : !s64i loc(#loc78)
    cir.store %22, %0 : !s64i, !cir.ptr<!s64i> loc(#loc186)
    %23 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    cir.call @printLongLongLine(%23) : (!s64i) -> () loc(#loc80)
    cir.br ^bb11 loc(#loc76)
  ^bb10:  // pred: ^bb8
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc46)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc81)
    cir.br ^bb11 loc(#loc69)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc69)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc62)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc62)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc48)
  } loc(#loc185)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc88)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc200)
    cir.br ^bb1 loc(#loc201)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc202)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc94)
    cir.store %6, %1 : !s64i, !cir.ptr<!s64i> loc(#loc203)
    cir.br ^bb3 loc(#loc91)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc91)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc204)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc98)
    cir.brcond %9 ^bb6, ^bb12 loc(#loc205)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc206)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc102)
    %11 = cir.call @imaxabs(%10) : (!s64i) -> !s64i extra(#fn_attr1) loc(#loc103)
    %12 = cir.cast(int_to_float, %11 : !s64i), !cir.long_double<!cir.f80> loc(#loc103)
    %13 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc104)
    %14 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc105)
    %15 = cir.cast(int_to_float, %14 : !s64i), !cir.long_double<!cir.f80> loc(#loc105)
    %16 = cir.call @sqrtl(%15) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc104)
    %17 = cir.cmp(le, %12, %16) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc207)
    cir.brcond %17 ^bb8, ^bb9 loc(#loc208)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc110)
    %19 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %20 = cir.binop(mul, %18, %19) nsw : !s64i loc(#loc110)
    cir.store %20, %0 : !s64i, !cir.ptr<!s64i> loc(#loc198)
    %21 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc111)
    cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc112)
    cir.br ^bb10 loc(#loc108)
  ^bb9:  // pred: ^bb7
    %22 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc113)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc113)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb10 loc(#loc101)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc101)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc97)
  ^bb12:  // 2 preds: ^bb5, ^bb11
    cir.br ^bb13 loc(#loc97)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc83)
  } loc(#loc197)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc211)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc121)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc212)
    cir.br ^bb1 loc(#loc213)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc182)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc130)
    cir.br ^bb4 loc(#loc127)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc131)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc131)
    cir.store %9, %1 : !s64i, !cir.ptr<!s64i> loc(#loc215)
    cir.br ^bb4 loc(#loc124)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc216)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc135)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc135)
    cir.brcond %12 ^bb7, ^bb10 loc(#loc217)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc218)
  ^bb8:  // pred: ^bb7
    %13 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc139)
    %14 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc139)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc210)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc140)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc141)
    cir.br ^bb9 loc(#loc138)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc134)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc134)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc116)
  } loc(#loc209)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc148)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc222)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc152)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc154)
    %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc154)
    cir.store %7, %1 : !s64i, !cir.ptr<!s64i> loc(#loc225)
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc151)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc226)
  ^bb5:  // pred: ^bb4
    %8 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc165)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc158)
    cir.brcond %10 ^bb6, ^bb9 loc(#loc227)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc228)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc162)
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc145)
    %13 = cir.binop(mul, %11, %12) nsw : !s64i loc(#loc162)
    cir.store %13, %0 : !s64i, !cir.ptr<!s64i> loc(#loc220)
    %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc163)
    cir.call @printLongLongLine(%14) : (!s64i) -> () loc(#loc164)
    cir.br ^bb8 loc(#loc161)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc157)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc157)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc143)
  } loc(#loc219)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":26:1)
#loc2 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":26:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":31:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":48:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":44:13)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":44:37)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":33:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":33:13)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":34:12)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":34:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":35:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":39:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":35:8)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":38:16)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":38:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":40:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":47:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":40:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":41:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":42:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":46:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":44:30)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":45:31)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":45:13)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":154:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":160:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":156:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":156:14)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":157:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":157:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":158:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":158:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":159:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":159:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":27:1)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":27:26)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":67:19)
#loc43 = loc("/usr/include/inttypes.h":351:1)
#loc44 = loc("/usr/include/inttypes.h":351:74)
#loc45 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":79:23)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":55:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":82:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":74:13)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":74:37)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":57:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":57:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":58:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":58:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":59:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":63:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":59:8)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":62:16)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":62:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":81:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":64:8)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":65:5)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":68:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":70:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":80:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:31)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:13)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:40)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:46)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":72:55)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":73:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":76:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":78:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":74:30)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":75:31)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":75:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":79:13)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":85:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":107:1)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":99:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":99:37)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":87:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":87:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":88:12)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":88:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":89:5)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":93:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":89:8)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":90:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":92:16)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":92:9)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":94:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":106:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":94:8)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":95:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":105:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:31)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:13)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:40)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:46)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":97:55)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":98:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":101:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":103:9)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":99:30)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":100:31)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":100:13)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":104:23)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":104:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":110:1)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":132:1)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":128:13)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":128:37)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":112:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":112:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":113:12)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":113:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":114:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":123:5)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":114:8)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":115:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":118:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":120:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":117:19)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":117:9)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":122:16)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":122:9)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":124:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":131:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":124:8)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":125:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":126:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":130:9)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":128:30)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":129:31)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":129:13)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":135:1)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":152:1)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":148:13)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":148:37)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":137:5)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":137:13)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":138:12)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":138:5)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":139:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":143:5)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":139:8)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":140:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":142:16)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":142:9)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":144:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":151:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":144:8)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":145:5)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":146:9)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":150:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":148:30)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":149:31)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_05.c":149:13)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc9, #loc10])
#loc170 = loc(fused[#loc12, #loc11])
#loc171 = loc(fused[#loc13, #loc14])
#loc172 = loc(fused[#loc16, #loc14])
#loc173 = loc(fused[#loc18, #loc17])
#loc174 = loc(fused[#loc19, #loc20])
#loc175 = loc(fused[#loc22, #loc20])
#loc176 = loc(fused[#loc23, #loc24])
#loc177 = loc(fused[#loc28, #loc29])
#loc178 = loc(fused[#loc30, #loc31])
#loc179 = loc(fused[#loc32, #loc33])
#loc180 = loc(fused[#loc34, #loc35])
#loc181 = loc(fused[#loc36, #loc37])
#loc182 = loc(fused[#loc38, #loc39])
#loc183 = loc(fused[#loc40, #loc41])
#loc184 = loc(fused[#loc43, #loc44])
#loc185 = loc(fused[#loc47, #loc48])
#loc186 = loc(fused[#loc49, #loc50])
#loc187 = loc(fused[#loc51, #loc52])
#loc188 = loc(fused[#loc54, #loc53])
#loc189 = loc(fused[#loc55, #loc56])
#loc190 = loc(fused[#loc58, #loc56])
#loc191 = loc(fused[#loc60, #loc59])
#loc192 = loc(fused[#loc61, #loc62])
#loc193 = loc(fused[#loc64, #loc65, #loc66, #loc62])
#loc194 = loc(fused[#loc68, #loc69])
#loc195 = loc(fused[#loc71, #loc74])
#loc196 = loc(fused[#loc75, #loc76, #loc77, #loc69])
#loc197 = loc(fused[#loc82, #loc83])
#loc198 = loc(fused[#loc84, #loc85])
#loc199 = loc(fused[#loc86, #loc87])
#loc200 = loc(fused[#loc89, #loc88])
#loc201 = loc(fused[#loc90, #loc91])
#loc202 = loc(fused[#loc93, #loc91])
#loc203 = loc(fused[#loc95, #loc94])
#loc204 = loc(fused[#loc96, #loc97])
#loc205 = loc(fused[#loc99, #loc97])
#loc206 = loc(fused[#loc100, #loc101])
#loc207 = loc(fused[#loc103, #loc106])
#loc208 = loc(fused[#loc107, #loc108, #loc109, #loc101])
#loc209 = loc(fused[#loc115, #loc116])
#loc210 = loc(fused[#loc117, #loc118])
#loc211 = loc(fused[#loc119, #loc120])
#loc212 = loc(fused[#loc122, #loc121])
#loc213 = loc(fused[#loc123, #loc124])
#loc214 = loc(fused[#loc126, #loc127, #loc128, #loc124])
#loc215 = loc(fused[#loc132, #loc131])
#loc216 = loc(fused[#loc133, #loc134])
#loc217 = loc(fused[#loc136, #loc134])
#loc218 = loc(fused[#loc137, #loc138])
#loc219 = loc(fused[#loc142, #loc143])
#loc220 = loc(fused[#loc144, #loc145])
#loc221 = loc(fused[#loc146, #loc147])
#loc222 = loc(fused[#loc149, #loc148])
#loc223 = loc(fused[#loc150, #loc151])
#loc224 = loc(fused[#loc153, #loc151])
#loc225 = loc(fused[#loc155, #loc154])
#loc226 = loc(fused[#loc156, #loc157])
#loc227 = loc(fused[#loc159, #loc157])
#loc228 = loc(fused[#loc160, #loc161])
