!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc201)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc202)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc203)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc204)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc205)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc206)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc207)
  cir.func private @close(!s32i) -> !s32i loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc19)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc210)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_15.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc22)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_15_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc22)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc28)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc32)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc216)
            %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc217)
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc218)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc219)
            %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc220)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc41)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc41)
            cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc218)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc43)
            cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc219)
            cir.scope {
              cir.do {
                cir.scope {
                  %14 = cir.const #cir.int<2> : !s32i loc(#loc50)
                  %15 = cir.const #cir.int<1> : !s32i loc(#loc51)
                  %16 = cir.const #cir.int<6> : !s32i loc(#loc52)
                  %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
                  cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc223)
                  cir.scope {
                    %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc59)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc59)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc225)
                    cir.if %62 {
                      cir.break loc(#loc61)
                    } loc(#loc226)
                  } loc(#loc224)
                  %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc227)
                  %19 = cir.const #cir.int<0> : !s32i loc(#loc64)
                  %20 = cir.const #cir.int<16> : !u64i loc(#loc228)
                  cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc229)
                  %21 = cir.const #cir.int<2> : !s32i loc(#loc69)
                  %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc69)
                  %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc230)
                  %24 = cir.const #cir.int<0> : !s32i loc(#loc72)
                  %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc72)
                  %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc231)
                  %28 = cir.const #cir.int<27015> : !s32i loc(#loc76)
                  %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc76)
                  %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc77)
                  %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
                  cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc232)
                  cir.scope {
                    %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                    %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc234)
                    %61 = cir.const #cir.int<16> : !u64i loc(#loc235)
                    %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc235)
                    %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc88)
                    %64 = cir.const #cir.int<1> : !s32i loc(#loc89)
                    %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc89)
                    %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc236)
                    cir.if %66 {
                      cir.break loc(#loc91)
                    } loc(#loc237)
                  } loc(#loc233)
                  cir.scope {
                    %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
                    %60 = cir.const #cir.int<5> : !s32i loc(#loc95)
                    %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc96)
                    %62 = cir.const #cir.int<1> : !s32i loc(#loc97)
                    %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc97)
                    %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc239)
                    cir.if %64 {
                      cir.break loc(#loc99)
                    } loc(#loc240)
                  } loc(#loc238)
                  %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                  %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc101)
                  %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc102)
                  %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc103)
                  cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc241)
                  cir.scope {
                    %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc109)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc109)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc243)
                    cir.if %62 {
                      cir.break loc(#loc111)
                    } loc(#loc244)
                  } loc(#loc242)
                  %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
                  %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
                  %39 = cir.const #cir.int<3> : !s32i loc(#loc114)
                  %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc114)
                  %41 = cir.const #cir.int<4> : !u64i loc(#loc114)
                  %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc114)
                  %43 = cir.const #cir.int<2> : !s32i loc(#loc114)
                  %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc114)
                  %45 = cir.binop(add, %42, %44) : !u64i loc(#loc114)
                  %46 = cir.const #cir.int<1> : !s32i loc(#loc115)
                  %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc115)
                  %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc245)
                  %49 = cir.const #cir.int<0> : !s32i loc(#loc116)
                  %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc117)
                  %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc117)
                  cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc246)
                  cir.scope {
                    %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
                    %60 = cir.const #cir.int<1> : !s32i loc(#loc123)
                    %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc123)
                    %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc248)
                    %63 = cir.ternary(%62, true {
                      %64 = cir.const #true loc(#loc124)
                      cir.yield %64 : !cir.bool loc(#loc124)
                    }, false {
                      %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc125)
                      %65 = cir.const #cir.int<0> : !s32i loc(#loc126)
                      %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc249)
                      %67 = cir.ternary(%66, true {
                        %68 = cir.const #true loc(#loc124)
                        cir.yield %68 : !cir.bool loc(#loc124)
                      }, false {
                        %68 = cir.const #false loc(#loc124)
                        cir.yield %68 : !cir.bool loc(#loc124)
                      }) : (!cir.bool) -> !cir.bool loc(#loc124)
                      cir.yield %67 : !cir.bool loc(#loc124)
                    }) : (!cir.bool) -> !cir.bool loc(#loc124)
                    cir.if %63 {
                      cir.break loc(#loc128)
                    } loc(#loc250)
                  } loc(#loc247)
                  %52 = cir.const #cir.int<0> : !s32i loc(#loc129)
                  %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc129)
                  %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
                  %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc131)
                  %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc131)
                  cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc251)
                  %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc132)
                  %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc133)
                  cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
                } loc(#loc222)
                cir.yield loc(#loc47)
              } while {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc136)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc136)
                cir.condition(%15) loc(#loc136)
              } loc(#loc221)
            } loc(#loc221)
            cir.scope {
              %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc139)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc140)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc140)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc254)
              cir.if %17 {
                %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc142)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc143)
              } loc(#loc255)
            } loc(#loc253)
            cir.scope {
              %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc147)
              %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc147)
              %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc257)
              cir.if %17 {
                %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc149)
                %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc150)
              } loc(#loc258)
            } loc(#loc256)
          } loc(#loc215)
          cir.break loc(#loc151)
        } loc(#loc33)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc19)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc153)
          cir.break loc(#loc154)
        } loc(#loc152)
        cir.yield loc(#loc30)
      } loc(#loc30)
    } loc(#loc214)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc22)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc22)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc22)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc22)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc22)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc22)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc22)
          %11 = cir.const #cir.int<131> : !s32i loc(#loc22)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
          %13 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc22)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc22)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc22)
        } loc(#loc22)
      } loc(#loc22)
    } loc(#loc22)
    cir.return loc(#loc24)
  } loc(#loc211)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc260)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc157)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc159)
    cir.return loc(#loc156)
  } loc(#loc259)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc161)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc263)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc167)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc264)
    cir.scope {
      %4 = cir.const #cir.int<5> : !s32i loc(#loc171)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc173)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc173)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc174)
          cir.break loc(#loc175)
        } loc(#loc172)
        cir.case(default, []) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc177)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc178)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc177)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
          cir.break loc(#loc180)
        } loc(#loc176)
        cir.yield loc(#loc169)
      } loc(#loc169)
    } loc(#loc265)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc161)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc161)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc161)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc161)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc161)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc161)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc161)
          %11 = cir.const #cir.int<156> : !s32i loc(#loc161)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc161)
          %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc161)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc161)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc161)
        } loc(#loc161)
      } loc(#loc161)
    } loc(#loc161)
    cir.return loc(#loc163)
  } loc(#loc262)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc181)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc186)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc187)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %4 = cir.const #cir.int<6> : !s32i loc(#loc191)
      cir.switch (%4 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %5 = cir.const #cir.int<5> : !s32i loc(#loc193)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc194)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc193)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          cir.break loc(#loc196)
        } loc(#loc192)
        cir.case(default, []) {
          %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc198)
          %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc198)
          cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc199)
          cir.break loc(#loc200)
        } loc(#loc197)
        cir.yield loc(#loc189)
      } loc(#loc189)
    } loc(#loc270)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc181)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc181)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc181)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc181)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc181)
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc181)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc181)
          %11 = cir.const #cir.int<177> : !s32i loc(#loc181)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc181)
          %13 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc181)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc181)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc181)
        } loc(#loc181)
      } loc(#loc181)
    } loc(#loc181)
    cir.return loc(#loc183)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_15.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc18 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":127:19)
#loc20 = loc("/usr/include/assert.h":69:1)
#loc21 = loc("/usr/include/assert.h":71:43)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":131:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":47:1)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":132:1)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":49:5)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":49:9)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":51:13)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":51:12)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":51:5)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":52:5)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":129:5)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":52:12)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":54:5)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":55:5)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":123:5)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":60:9)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":60:13)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":61:9)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":61:28)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":62:9)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":62:31)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":63:9)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":63:31)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":64:9)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":64:41)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":65:9)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":108:17)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":66:9)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":107:9)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:35)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:44)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:57)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:28)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:13)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":75:68)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":76:13)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":79:13)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":76:17)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":76:33)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":77:13)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":78:17)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:20)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:21)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:30)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:33)
#loc66 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:47)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:13)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":80:48)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":81:34)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":81:13)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":82:39)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":82:13)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":83:38)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":83:32)
#loc78 = loc("/usr/include/netinet/in.h":250:15)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":83:13)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":83:46)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:13)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":87:13)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:22)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:54)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:55)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:64)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:78)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:17)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":84:84)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":85:13)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":86:17)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":88:13)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":91:13)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":88:24)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":88:38)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":88:17)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":88:57)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":89:13)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":90:17)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:35)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:49)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:55)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:28)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:13)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":92:59)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":93:13)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":96:13)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":93:17)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":93:33)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":94:13)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":95:17)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:31)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:45)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:58)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:76)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:79)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:26)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:13)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":98:80)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:13)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":102:13)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:17)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:31)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:44)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:47)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":99:61)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":100:13)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":101:17)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":104:39)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":104:25)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":104:13)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":106:25)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":106:20)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":106:13)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":106:36)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":108:16)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":109:9)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":112:9)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":109:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":109:29)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":110:9)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":111:26)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":111:13)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":113:9)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":116:9)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":113:13)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":113:29)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":114:9)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":115:26)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":115:13)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":124:5)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":125:5)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":127:9)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":128:9)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":180:1)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":184:1)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":182:5)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":182:14)
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":183:5)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":183:14)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":156:5)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":139:1)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":157:1)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":141:5)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":141:9)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":143:13)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":143:12)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":143:5)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":144:5)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":154:5)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":144:12)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":146:5)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":148:19)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":148:9)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":149:9)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":150:5)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":152:16)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":152:29)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":152:9)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":153:9)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":177:5)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":160:1)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":178:1)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":162:5)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":162:9)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":164:13)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":164:12)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":164:5)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":165:5)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":175:5)
#loc191 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":165:12)
#loc192 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":167:5)
#loc193 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":169:16)
#loc194 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":169:29)
#loc195 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":169:9)
#loc196 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":170:9)
#loc197 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":171:5)
#loc198 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":173:19)
#loc199 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":173:9)
#loc200 = loc("CWE617_Reachable_Assertion__listen_socket_15.c":174:9)
#loc201 = loc(fused[#loc1, #loc2])
#loc202 = loc(fused[#loc3, #loc4])
#loc203 = loc(fused[#loc5, #loc6])
#loc204 = loc(fused[#loc7, #loc8])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc13, #loc14])
#loc208 = loc(fused[#loc15, #loc16])
#loc209 = loc(fused[#loc17, #loc18])
#loc210 = loc(fused[#loc20, #loc21])
#loc211 = loc(fused[#loc23, #loc24])
#loc212 = loc(fused[#loc25, #loc26])
#loc213 = loc(fused[#loc29, #loc27])
#loc214 = loc(fused[#loc30, #loc31])
#loc215 = loc(fused[#loc34, #loc35])
#loc216 = loc(fused[#loc36, #loc37])
#loc217 = loc(fused[#loc38, #loc39])
#loc218 = loc(fused[#loc40, #loc41])
#loc219 = loc(fused[#loc42, #loc43])
#loc220 = loc(fused[#loc44, #loc45])
#loc221 = loc(fused[#loc46, #loc47])
#loc222 = loc(fused[#loc48, #loc49])
#loc223 = loc(fused[#loc54, #loc55])
#loc224 = loc(fused[#loc56, #loc57])
#loc225 = loc(fused[#loc58, #loc59])
#loc226 = loc(fused[#loc60, #loc57])
#loc227 = loc(fused[#loc62, #loc63])
#loc228 = loc(fused[#loc65, #loc66])
#loc229 = loc(fused[#loc67, #loc68])
#loc230 = loc(fused[#loc71, #loc69])
#loc231 = loc(fused[#loc75, #loc72])
#loc232 = loc(fused[#loc79, #loc80])
#loc233 = loc(fused[#loc81, #loc82])
#loc234 = loc(fused[#loc84, #loc85])
#loc235 = loc(fused[#loc86, #loc87])
#loc236 = loc(fused[#loc88, #loc89])
#loc237 = loc(fused[#loc90, #loc82])
#loc238 = loc(fused[#loc92, #loc93])
#loc239 = loc(fused[#loc96, #loc97])
#loc240 = loc(fused[#loc98, #loc93])
#loc241 = loc(fused[#loc104, #loc105])
#loc242 = loc(fused[#loc106, #loc107])
#loc243 = loc(fused[#loc108, #loc109])
#loc244 = loc(fused[#loc110, #loc107])
#loc245 = loc(fused[#loc114, #loc115])
#loc246 = loc(fused[#loc118, #loc119])
#loc247 = loc(fused[#loc120, #loc121])
#loc248 = loc(fused[#loc122, #loc123])
#loc249 = loc(fused[#loc125, #loc126])
#loc250 = loc(fused[#loc127, #loc121])
#loc251 = loc(fused[#loc131, #loc129])
#loc252 = loc(fused[#loc134, #loc135])
#loc253 = loc(fused[#loc137, #loc138])
#loc254 = loc(fused[#loc139, #loc140])
#loc255 = loc(fused[#loc141, #loc138])
#loc256 = loc(fused[#loc144, #loc145])
#loc257 = loc(fused[#loc146, #loc147])
#loc258 = loc(fused[#loc148, #loc145])
#loc259 = loc(fused[#loc155, #loc156])
#loc260 = loc(fused[#loc157, #loc158])
#loc261 = loc(fused[#loc159, #loc160])
#loc262 = loc(fused[#loc162, #loc163])
#loc263 = loc(fused[#loc164, #loc165])
#loc264 = loc(fused[#loc168, #loc166])
#loc265 = loc(fused[#loc169, #loc170])
#loc266 = loc(fused[#loc179, #loc178])
#loc267 = loc(fused[#loc182, #loc183])
#loc268 = loc(fused[#loc184, #loc185])
#loc269 = loc(fused[#loc188, #loc186])
#loc270 = loc(fused[#loc189, #loc190])
#loc271 = loc(fused[#loc195, #loc194])
