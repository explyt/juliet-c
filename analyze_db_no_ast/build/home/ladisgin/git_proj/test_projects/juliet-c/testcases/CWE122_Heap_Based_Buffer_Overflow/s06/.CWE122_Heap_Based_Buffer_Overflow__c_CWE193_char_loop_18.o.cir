!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func private  @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc131)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc133)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc135)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc136)
    cir.goto "source" loc(#loc137)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc19)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc21)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc138)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc139)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc140)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc141)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !s32i loc(#loc143)
      %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc30)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc34)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
      } loc(#loc144)
    } loc(#loc142)
    cir.scope {
      %9 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc146)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc147)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc148)
      %12 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc146)
      cir.store %12, %9 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc146)
      %13 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc42)
      %14 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc43)
      %15 = cir.call @strlen(%14) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc42)
      cir.store %15, %11 : !u64i, !cir.ptr<!u64i> loc(#loc149)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc48)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc48)
        cir.store %21, %10 : !u64i, !cir.ptr<!u64i> loc(#loc151)
        cir.for : cond {
          %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc50)
          %23 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc51)
          %24 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc52)
          %26 = cir.binop(add, %23, %25) : !u64i loc(#loc152)
          %27 = cir.cmp(lt, %22, %26) : !u64i, !s32i loc(#loc153)
          %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc53)
          cir.condition(%28) loc(#loc53)
        } body {
          cir.scope {
            %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc55)
            %23 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc56)
            %24 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %22 : !u64i), !cir.ptr<!s8i> loc(#loc56)
            %25 = cir.load %24 : !cir.ptr<!s8i>, !s8i loc(#loc56)
            %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
            %27 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !u64i), !cir.ptr<!s8i> loc(#loc59)
            cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc155)
          } loc(#loc154)
          cir.yield loc(#loc47)
        } step {
          %22 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc61)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc62)
          cir.store %23, %10 : !u64i, !cir.ptr<!u64i> loc(#loc156)
          cir.yield loc(#loc150)
        } loc(#loc150)
      } loc(#loc150)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
      cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc64)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc65)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc66)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc66)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc65)
    } loc(#loc145)
    cir.return loc(#loc12)
  } loc(#loc134)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc68)
  } loc(#loc157)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc75)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.goto "source" loc(#loc162)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc79)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc80)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc81)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc81)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc81)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc163)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc164)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc80)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    cir.scope {
      %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc91)
      %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !s32i loc(#loc168)
      %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc92)
      cir.if %15 {
        %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
        %17 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc96)
        cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc169)
    } loc(#loc167)
    cir.scope {
      %11 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc171)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc172)
      %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["sourceLen"] {alignment = 8 : i64} loc(#loc173)
      %14 = cir.const #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc171)
      cir.store %14, %11 : !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>> loc(#loc171)
      %15 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc104)
      %16 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc105)
      %17 = cir.call @strlen(%16) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc104)
      cir.store %17, %13 : !u64i, !cir.ptr<!u64i> loc(#loc174)
      cir.scope {
        %22 = cir.const #cir.int<0> : !s32i loc(#loc110)
        %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc110)
        cir.store %23, %12 : !u64i, !cir.ptr<!u64i> loc(#loc176)
        cir.for : cond {
          %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc112)
          %25 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc113)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc114)
          %28 = cir.binop(add, %25, %27) : !u64i loc(#loc177)
          %29 = cir.cmp(lt, %24, %28) : !u64i, !s32i loc(#loc178)
          %30 = cir.cast(int_to_bool, %29 : !s32i), !cir.bool loc(#loc115)
          cir.condition(%30) loc(#loc115)
        } body {
          cir.scope {
            %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %25 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc118)
            %26 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %24 : !u64i), !cir.ptr<!s8i> loc(#loc118)
            %27 = cir.load %26 : !cir.ptr<!s8i>, !s8i loc(#loc118)
            %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
            %29 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc120)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s8i>, %29 : !u64i), !cir.ptr<!s8i> loc(#loc121)
            cir.store %27, %30 : !s8i, !cir.ptr<!s8i> loc(#loc180)
          } loc(#loc179)
          cir.yield loc(#loc109)
        } step {
          %24 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc123)
          %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc124)
          cir.store %25, %12 : !u64i, !cir.ptr<!u64i> loc(#loc181)
          cir.yield loc(#loc175)
        } loc(#loc175)
      } loc(#loc175)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
      cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc126)
      %19 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc127)
      %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc128)
      %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
      cir.call @free(%21) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    } loc(#loc170)
    cir.return loc(#loc72)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":28:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":50:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":30:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":32:10)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":33:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:20)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:41)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":35:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:33)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:17)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:14)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:23)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:24)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:30)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":36:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":37:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":49:5)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":38:29)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:16)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":39:19)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:21)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":40:34)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":46:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:18)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:37)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:23)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":44:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:18)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:19)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":45:31)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:41)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":43:40)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":47:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":47:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":48:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":48:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":81:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":84:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":83:5)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":83:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":57:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":79:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":59:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":59:12)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":60:12)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":60:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":61:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":61:10)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":62:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:34)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:45)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:46)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":64:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":65:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":66:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":78:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":67:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":67:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:16)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":68:19)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:28)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":69:34)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":75:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:18)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:14)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:21)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:25)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:37)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":73:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:13)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:18)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":74:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:41)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":72:40)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":76:19)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":76:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":77:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_loop_18.c":77:14)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc13, #loc14])
#loc136 = loc(fused[#loc16, #loc15])
#loc137 = loc(fused[#loc17, #loc18])
#loc138 = loc(fused[#loc22, #loc23])
#loc139 = loc(fused[#loc21, #loc23])
#loc140 = loc(fused[#loc20, #loc24])
#loc141 = loc(fused[#loc25, #loc24])
#loc142 = loc(fused[#loc26, #loc27])
#loc143 = loc(fused[#loc28, #loc29])
#loc144 = loc(fused[#loc31, #loc27])
#loc145 = loc(fused[#loc35, #loc36])
#loc146 = loc(fused[#loc37, #loc38])
#loc147 = loc(fused[#loc39, #loc40])
#loc148 = loc(fused[#loc39, #loc41])
#loc149 = loc(fused[#loc44, #loc45])
#loc150 = loc(fused[#loc46, #loc47])
#loc151 = loc(fused[#loc49, #loc48])
#loc152 = loc(fused[#loc51, #loc52])
#loc153 = loc(fused[#loc50, #loc52])
#loc154 = loc(fused[#loc54, #loc47])
#loc155 = loc(fused[#loc57, #loc60])
#loc156 = loc(fused[#loc62, #loc61])
#loc157 = loc(fused[#loc67, #loc68])
#loc158 = loc(fused[#loc69, #loc70])
#loc159 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc73, #loc74])
#loc161 = loc(fused[#loc76, #loc75])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc83, #loc84])
#loc164 = loc(fused[#loc85, #loc84])
#loc165 = loc(fused[#loc80, #loc86])
#loc166 = loc(fused[#loc87, #loc86])
#loc167 = loc(fused[#loc88, #loc89])
#loc168 = loc(fused[#loc90, #loc91])
#loc169 = loc(fused[#loc93, #loc89])
#loc170 = loc(fused[#loc97, #loc98])
#loc171 = loc(fused[#loc99, #loc100])
#loc172 = loc(fused[#loc101, #loc102])
#loc173 = loc(fused[#loc101, #loc103])
#loc174 = loc(fused[#loc106, #loc107])
#loc175 = loc(fused[#loc108, #loc109])
#loc176 = loc(fused[#loc111, #loc110])
#loc177 = loc(fused[#loc113, #loc114])
#loc178 = loc(fused[#loc112, #loc114])
#loc179 = loc(fused[#loc116, #loc109])
#loc180 = loc(fused[#loc119, #loc122])
#loc181 = loc(fused[#loc124, #loc123])
