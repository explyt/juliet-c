!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":28:78)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":28:85)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":41:82)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":41:89)
#loc52 = loc(fused[#loc7, #loc8])
#loc62 = loc(fused[#loc28, #loc29])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc49)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc50)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc52)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc10)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc53)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc54)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc55)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc56)
    cir.br ^bb1 loc(#loc57)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc58)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc59)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc21)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc23)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc24)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc60)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc60)
  } loc(#loc51)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b_goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc28, #loc29])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc62)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc27)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc30)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc31)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc32)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc32)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc32)
    %7 = cir.const #cir.int<1> : !u64i loc(#loc63)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc64)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc65)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    cir.br ^bb1 loc(#loc67)
  ^bb1:  // pred: ^bb0
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc68)
    cir.brcond %14 ^bb2, ^bb3 loc(#loc69)
  ^bb2:  // pred: ^bb1
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %17 = cir.unary(minus, %16) nsw : !s32i, !s32i loc(#loc46)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
    cir.br ^bb3 loc(#loc40)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc40)
  ^bb4:  // pred: ^bb3
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    cir.store %18, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc70)
    %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    cir.return %19 : !cir.ptr<!s8i> loc(#loc70)
  } loc(#loc61)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":28:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":34:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":29:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":31:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":32:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":33:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":33:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":41:1)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":47:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":42:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:20)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:34)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:45)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:27)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:46)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":44:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":45:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":46:12)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_memcpy_61b.c":46:5)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc51 = loc(fused[#loc5, #loc6])
#loc53 = loc(fused[#loc12, #loc13])
#loc54 = loc(fused[#loc11, #loc13])
#loc55 = loc(fused[#loc10, #loc14])
#loc56 = loc(fused[#loc15, #loc14])
#loc57 = loc(fused[#loc16, #loc17])
#loc58 = loc(fused[#loc18, #loc19])
#loc59 = loc(fused[#loc20, #loc17])
#loc60 = loc(fused[#loc25, #loc24])
#loc61 = loc(fused[#loc26, #loc27])
#loc63 = loc(fused[#loc34, #loc35])
#loc64 = loc(fused[#loc36, #loc35])
#loc65 = loc(fused[#loc31, #loc37])
#loc66 = loc(fused[#loc38, #loc37])
#loc67 = loc(fused[#loc39, #loc40])
#loc68 = loc(fused[#loc41, #loc42])
#loc69 = loc(fused[#loc43, #loc40])
#loc70 = loc(fused[#loc48, #loc47])
