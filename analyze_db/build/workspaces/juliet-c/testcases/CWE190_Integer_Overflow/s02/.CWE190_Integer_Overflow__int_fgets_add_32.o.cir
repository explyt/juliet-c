!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc156)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc157)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc164)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc164)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc25)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc167)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc169)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc169)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc169)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc33)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc34)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc34)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc34)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc34)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc34)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc34)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc34)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc35)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc36)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc37)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc171)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc42)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          } loc(#loc172)
        } loc(#loc170)
      } loc(#loc168)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    } loc(#loc166)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc176)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc178)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc58)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc57)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc58)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc178)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc60)
      } loc(#loc177)
    } loc(#loc175)
    cir.return loc(#loc13)
  } loc(#loc161)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc180)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc181)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc179)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc184)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc185)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc185)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc188)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      %7 = cir.const #cir.int<2> : !s32i loc(#loc82)
      cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc84)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    } loc(#loc187)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc192)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc90)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.scope {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc194)
        %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc96)
        %9 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc96)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc194)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc98)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc68)
  } loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc196)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc197)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc198)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc197)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc198)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc108)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc201)
      %5 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc201)
      cir.scope {
        %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc203)
        %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc203)
        cir.store %10, %9 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc203)
        cir.scope {
          %11 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc121)
          %12 = cir.const #cir.int<3> : !s32i loc(#loc122)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc122)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc122)
          %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc122)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc122)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc122)
          %18 = cir.binop(add, %15, %17) : !u64i loc(#loc122)
          %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc122)
          %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc157)
          %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc123)
          %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc124)
          %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
          %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc125)
          %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc205)
          cir.if %25 {
            %26 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
            %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc130)
            cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc207)
          } else {
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc133)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc133)
            cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc134)
          } loc(#loc206)
        } loc(#loc204)
      } loc(#loc202)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %8 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
      cir.store %7, %8 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    } loc(#loc200)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc210)
      %5 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
      %6 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc142)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc146)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc212)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc151)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc152)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc214)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc153)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc154)
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc99)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc99)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc155)
        } loc(#loc213)
      } loc(#loc211)
    } loc(#loc209)
    cir.return loc(#loc101)
  } loc(#loc195)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":56:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":26:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":27:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":27:22)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":28:22)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":30:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":30:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":31:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":47:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:21)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":32:20)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":33:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":34:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":34:49)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":44:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:23)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:36)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:53)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:17)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":36:63)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":37:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":40:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":42:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:24)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":39:40)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":43:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:21)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:10)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":46:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":48:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:21)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":49:20)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":50:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":54:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:13)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:33)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":52:26)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":53:26)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":53:13)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":126:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":130:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":128:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":128:13)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":129:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":129:13)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":63:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":84:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":65:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":65:9)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":66:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":66:22)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":67:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":67:22)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":69:12)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":69:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":70:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":75:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:21)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":71:20)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":73:16)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":73:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:21)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:10)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":74:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":76:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":83:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:9)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:21)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":77:20)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":78:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":82:9)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:33)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":80:26)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":81:26)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":81:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":121:23)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":87:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":124:1)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":89:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":89:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":90:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":90:22)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":91:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":91:22)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":93:12)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":93:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":94:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":110:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:21)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":95:20)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":96:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":108:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":97:13)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":97:49)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":107:13)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:23)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:36)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:53)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:17)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":99:63)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":100:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":103:13)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":105:13)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:29)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:24)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":102:40)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":106:27)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":106:17)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:21)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:10)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":109:9)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":111:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":123:5)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:21)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":112:20)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":122:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:13)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":114:20)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":115:9)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":118:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":120:9)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:33)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":116:26)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":117:26)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":117:13)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_32.c":121:13)
#loc156 = loc(fused[#loc1, #loc2])
#loc157 = loc(fused[#loc3, #loc4])
#loc158 = loc(fused[#loc5, #loc6])
#loc159 = loc(fused[#loc7, #loc8])
#loc160 = loc(fused[#loc10, #loc11])
#loc161 = loc(fused[#loc12, #loc13])
#loc162 = loc(fused[#loc14, #loc15])
#loc163 = loc(fused[#loc16, #loc17])
#loc164 = loc(fused[#loc18, #loc19])
#loc165 = loc(fused[#loc21, #loc20])
#loc166 = loc(fused[#loc22, #loc23])
#loc167 = loc(fused[#loc24, #loc25])
#loc168 = loc(fused[#loc27, #loc28])
#loc169 = loc(fused[#loc29, #loc30])
#loc170 = loc(fused[#loc31, #loc32])
#loc171 = loc(fused[#loc36, #loc37])
#loc172 = loc(fused[#loc38, #loc39, #loc40, #loc32])
#loc173 = loc(fused[#loc43, #loc44])
#loc174 = loc(fused[#loc48, #loc46])
#loc175 = loc(fused[#loc49, #loc50])
#loc176 = loc(fused[#loc51, #loc52])
#loc177 = loc(fused[#loc54, #loc55])
#loc178 = loc(fused[#loc56, #loc57])
#loc179 = loc(fused[#loc61, #loc62])
#loc180 = loc(fused[#loc63, #loc64])
#loc181 = loc(fused[#loc65, #loc66])
#loc182 = loc(fused[#loc67, #loc68])
#loc183 = loc(fused[#loc69, #loc70])
#loc184 = loc(fused[#loc71, #loc72])
#loc185 = loc(fused[#loc73, #loc74])
#loc186 = loc(fused[#loc76, #loc75])
#loc187 = loc(fused[#loc77, #loc78])
#loc188 = loc(fused[#loc79, #loc80])
#loc189 = loc(fused[#loc83, #loc82])
#loc190 = loc(fused[#loc86, #loc84])
#loc191 = loc(fused[#loc87, #loc88])
#loc192 = loc(fused[#loc89, #loc90])
#loc193 = loc(fused[#loc92, #loc93])
#loc194 = loc(fused[#loc94, #loc95])
#loc195 = loc(fused[#loc100, #loc101])
#loc196 = loc(fused[#loc102, #loc103])
#loc197 = loc(fused[#loc104, #loc105])
#loc198 = loc(fused[#loc106, #loc107])
#loc199 = loc(fused[#loc109, #loc108])
#loc200 = loc(fused[#loc110, #loc111])
#loc201 = loc(fused[#loc112, #loc113])
#loc202 = loc(fused[#loc115, #loc116])
#loc203 = loc(fused[#loc117, #loc118])
#loc204 = loc(fused[#loc119, #loc120])
#loc205 = loc(fused[#loc124, #loc125])
#loc206 = loc(fused[#loc126, #loc127, #loc128, #loc120])
#loc207 = loc(fused[#loc131, #loc132])
#loc208 = loc(fused[#loc137, #loc135])
#loc209 = loc(fused[#loc138, #loc139])
#loc210 = loc(fused[#loc140, #loc141])
#loc211 = loc(fused[#loc143, #loc144])
#loc212 = loc(fused[#loc145, #loc146])
#loc213 = loc(fused[#loc147, #loc148, #loc149, #loc144])
#loc214 = loc(fused[#loc150, #loc151])
