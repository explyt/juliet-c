!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":26:23)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":26:29)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":44:24)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":44:30)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":198:10)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":198:14)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":198:20)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":198:32)
#true = #cir.bool<true> : !cir.bool
#loc316 = loc(fused[#loc9, #loc10])
#loc332 = loc(fused[#loc43, #loc44])
#loc381 = loc(fused[#loc187, #loc188])
#loc382 = loc(fused[#loc189, #loc190])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc312)
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc313)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc314)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc9, #loc10])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc316)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc317)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc13)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc319)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc19)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc320)
        cir.condition(%5) loc(#loc20)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc313)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc23)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc22)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc313)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc322)
        } loc(#loc321)
        cir.yield loc(#loc15)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc26)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc323)
        cir.yield loc(#loc318)
      } loc(#loc318)
    } loc(#loc318)
    cir.return loc(#loc8)
  } loc(#loc315)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc324)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc325)
  cir.func private @printIntLine(!s32i) loc(#loc326)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc327)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc328)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc329)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc330)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc43, #loc44])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc332)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc333)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc47)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc48)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc49)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc52)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc55)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc336)
        cir.condition(%9) loc(#loc56)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc338)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc60)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc60)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc338)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc339)
        } loc(#loc337)
        cir.yield loc(#loc51)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
        %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc64)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc340)
        cir.yield loc(#loc334)
      } loc(#loc334)
    } loc(#loc334)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc65)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc66)
    cir.return loc(#loc42)
  } loc(#loc331)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc341)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc338)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_12_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc344)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc344)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc73)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc347)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc348)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc81)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc347)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc83)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc348)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc84)
          %9 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc313)
          cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc349)
          cir.scope {
            %12 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc88)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc90)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc90)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc90)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc92)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc352)
            } loc(#loc351)
          } loc(#loc350)
          cir.scope {
            %12 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc96)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc98)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc98)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc98)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc100)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc355)
            } loc(#loc354)
          } loc(#loc353)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc104)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc104)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc106)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc107)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc107)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc105)
                cir.yield %19 : !cir.bool loc(#loc105)
              }, false {
                %19 = cir.const #false loc(#loc105)
                cir.yield %19 : !cir.bool loc(#loc105)
              }) : (!cir.bool) -> !cir.bool loc(#loc105)
              cir.yield %18 : !cir.bool loc(#loc105)
            }, false {
              %15 = cir.const #false loc(#loc105)
              cir.yield %15 : !cir.bool loc(#loc105)
            }) : (!cir.bool) -> !cir.bool loc(#loc105)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc109)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc110)
            } loc(#loc357)
          } loc(#loc356)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc113)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc113)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc115)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc116)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc116)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc114)
                cir.yield %19 : !cir.bool loc(#loc114)
              }, false {
                %19 = cir.const #false loc(#loc114)
                cir.yield %19 : !cir.bool loc(#loc114)
              }) : (!cir.bool) -> !cir.bool loc(#loc114)
              cir.yield %18 : !cir.bool loc(#loc114)
            }, false {
              %15 = cir.const #false loc(#loc114)
              cir.yield %15 : !cir.bool loc(#loc114)
            }) : (!cir.bool) -> !cir.bool loc(#loc114)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc118)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc119)
            } loc(#loc359)
          } loc(#loc358)
          %10 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc313)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc121)
        } loc(#loc346)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc361)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc362)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc125)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc361)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc127)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc362)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc130)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc130)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc130)
            cir.if %15 {
              cir.return loc(#loc132)
            } loc(#loc364)
          } loc(#loc363)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc135)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc136)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc137)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc137)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc137)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc139)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc367)
            } loc(#loc366)
          } loc(#loc365)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc145)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc145)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc145)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc147)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc370)
            } loc(#loc369)
          } loc(#loc368)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc151)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc151)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc153)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc154)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc154)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc152)
                cir.yield %19 : !cir.bool loc(#loc152)
              }, false {
                %19 = cir.const #false loc(#loc152)
                cir.yield %19 : !cir.bool loc(#loc152)
              }) : (!cir.bool) -> !cir.bool loc(#loc152)
              cir.yield %18 : !cir.bool loc(#loc152)
            }, false {
              %15 = cir.const #false loc(#loc152)
              cir.yield %15 : !cir.bool loc(#loc152)
            }) : (!cir.bool) -> !cir.bool loc(#loc152)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc156)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc157)
            } loc(#loc372)
          } loc(#loc371)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc160)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc160)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc162)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc163)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc163)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc161)
                cir.yield %19 : !cir.bool loc(#loc161)
              }, false {
                %19 = cir.const #false loc(#loc161)
                cir.yield %19 : !cir.bool loc(#loc161)
              }) : (!cir.bool) -> !cir.bool loc(#loc161)
              cir.yield %18 : !cir.bool loc(#loc161)
            }, false {
              %15 = cir.const #false loc(#loc161)
              cir.yield %15 : !cir.bool loc(#loc161)
            }) : (!cir.bool) -> !cir.bool loc(#loc161)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc165)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc166)
            } loc(#loc374)
          } loc(#loc373)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc167)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc168)
          %10 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc338)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc170)
        } loc(#loc360)
      } loc(#loc345)
    } loc(#loc343)
    cir.return loc(#loc70)
  } loc(#loc342)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc376)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc173)
    cir.return loc(#loc172)
  } loc(#loc375)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc377)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc378)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc379)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc184)
  cir.func @main(%arg0: !s32i loc(fused[#loc187, #loc188]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc189, #loc190])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc381)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc382)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc186)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc191)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc192)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc193)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc193)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc194)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc181)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc181)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc383)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_12_good() : () -> () loc(#loc196)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc182)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc182)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc183)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc183)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc199)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc384)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_12_bad() : () -> () loc(#loc200)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc184)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc184)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc202)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc203)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc385)
    cir.return %17 : !s32i loc(#loc385)
  } loc(#loc380)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc388)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc388)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc209)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc209)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc391)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc392)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc217)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc391)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc219)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc392)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc222)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc222)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc222)
            cir.if %15 {
              cir.return loc(#loc224)
            } loc(#loc394)
          } loc(#loc393)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc227)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc228)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc229)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc229)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc229)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc231)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc397)
            } loc(#loc396)
          } loc(#loc395)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc235)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc236)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc237)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc237)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc237)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc239)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc400)
            } loc(#loc399)
          } loc(#loc398)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc243)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc243)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc245)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc246)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc246)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc244)
                cir.yield %19 : !cir.bool loc(#loc244)
              }, false {
                %19 = cir.const #false loc(#loc244)
                cir.yield %19 : !cir.bool loc(#loc244)
              }) : (!cir.bool) -> !cir.bool loc(#loc244)
              cir.yield %18 : !cir.bool loc(#loc244)
            }, false {
              %15 = cir.const #false loc(#loc244)
              cir.yield %15 : !cir.bool loc(#loc244)
            }) : (!cir.bool) -> !cir.bool loc(#loc244)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc248)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc249)
            } loc(#loc402)
          } loc(#loc401)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc252)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc252)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc254)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc255)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc255)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc253)
                cir.yield %19 : !cir.bool loc(#loc253)
              }, false {
                %19 = cir.const #false loc(#loc253)
                cir.yield %19 : !cir.bool loc(#loc253)
              }) : (!cir.bool) -> !cir.bool loc(#loc253)
              cir.yield %18 : !cir.bool loc(#loc253)
            }, false {
              %15 = cir.const #false loc(#loc253)
              cir.yield %15 : !cir.bool loc(#loc253)
            }) : (!cir.bool) -> !cir.bool loc(#loc253)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc257)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc258)
            } loc(#loc404)
          } loc(#loc403)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc259)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc260)
          %10 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc338)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc261)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc262)
        } loc(#loc390)
      } else {
        cir.scope {
          %4 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc406)
          %5 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc407)
          %6 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc266)
          cir.store %6, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc406)
          %7 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc268)
          cir.store %7, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc407)
          cir.scope {
            %12 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
            %13 = cir.call @stdThreadLockCreate(%12) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc271)
            %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc271)
            %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc271)
            cir.if %15 {
              cir.return loc(#loc273)
            } loc(#loc409)
          } loc(#loc408)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc276)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc277)
            %14 = cir.call @stdThreadCreate(%12, %13, %4) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc278)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc278)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc278)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc280)
              cir.store %17, %4 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc412)
            } loc(#loc411)
          } loc(#loc410)
          cir.scope {
            %12 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc284)
            %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc285)
            %14 = cir.call @stdThreadCreate(%12, %13, %5) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc286)
            %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc286)
            %16 = cir.unary(not, %15) : !cir.bool, !cir.bool loc(#loc286)
            cir.if %16 {
              %17 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc288)
              cir.store %17, %5 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc415)
            } loc(#loc414)
          } loc(#loc413)
          cir.scope {
            %12 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc292)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc292)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc294)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc295)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc295)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc293)
                cir.yield %19 : !cir.bool loc(#loc293)
              }, false {
                %19 = cir.const #false loc(#loc293)
                cir.yield %19 : !cir.bool loc(#loc293)
              }) : (!cir.bool) -> !cir.bool loc(#loc293)
              cir.yield %18 : !cir.bool loc(#loc293)
            }, false {
              %15 = cir.const #false loc(#loc293)
              cir.yield %15 : !cir.bool loc(#loc293)
            }) : (!cir.bool) -> !cir.bool loc(#loc293)
            cir.if %14 {
              %15 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc297)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc298)
            } loc(#loc417)
          } loc(#loc416)
          cir.scope {
            %12 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc301)
            %13 = cir.cast(ptr_to_bool, %12 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc301)
            %14 = cir.ternary(%13, true {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc303)
              %16 = cir.call @stdThreadJoin(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc304)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc304)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc302)
                cir.yield %19 : !cir.bool loc(#loc302)
              }, false {
                %19 = cir.const #false loc(#loc302)
                cir.yield %19 : !cir.bool loc(#loc302)
              }) : (!cir.bool) -> !cir.bool loc(#loc302)
              cir.yield %18 : !cir.bool loc(#loc302)
            }, false {
              %15 = cir.const #false loc(#loc302)
              cir.yield %15 : !cir.bool loc(#loc302)
            }) : (!cir.bool) -> !cir.bool loc(#loc302)
            cir.if %14 {
              %15 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc306)
              %16 = cir.call @stdThreadDestroy(%15) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc307)
            } loc(#loc419)
          } loc(#loc418)
          %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc328)
          %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc308)
          cir.call @stdThreadLockDestroy(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc309)
          %10 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc338)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc310)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc311)
        } loc(#loc405)
      } loc(#loc389)
    } loc(#loc387)
    cir.return loc(#loc206)
  } loc(#loc386)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":22:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":22:22)
#loc5 = loc("../../testcasesupport/std_thread.h":14:1)
#loc6 = loc("../../testcasesupport/std_thread.h":14:74)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":26:1)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":42:1)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":28:5)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":28:9)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":27:1)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:5)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":41:5)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:14)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:10)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:17)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:21)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":39:5)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":40:19)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":40:29)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":40:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":38:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("../../testcasesupport/std_thread.h":18:1)
#loc34 = loc("../../testcasesupport/std_thread.h":18:44)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":24:1)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":24:34)
#loc37 = loc("../../testcasesupport/std_thread.h":19:1)
#loc38 = loc("../../testcasesupport/std_thread.h":19:45)
#loc39 = loc("../../testcasesupport/std_thread.h":20:1)
#loc40 = loc("../../testcasesupport/std_thread.h":20:45)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":44:1)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":55:1)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":46:5)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":46:9)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":45:1)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":49:26)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":49:5)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:5)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":53:5)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:14)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:10)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:17)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:21)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:19)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":51:5)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":23:1)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":23:23)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":52:20)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":52:31)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":52:9)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:31)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":50:30)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":54:26)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":54:5)
#loc67 = loc("../../testcasesupport/std_thread.h":21:1)
#loc68 = loc("../../testcasesupport/std_thread.h":21:45)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":59:1)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":115:1)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":61:5)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":114:5)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":61:8)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":61:33)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":62:5)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":85:5)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":87:5)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":63:9)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":84:9)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":64:13)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":64:33)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":65:13)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":65:33)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":66:23)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":66:13)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":67:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":70:13)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":67:34)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":67:45)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":67:18)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":68:13)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":69:27)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":69:17)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":71:13)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":74:13)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":71:34)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":71:45)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":71:18)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":72:13)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":73:27)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":73:17)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":75:13)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":78:13)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":75:17)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":75:25)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":75:42)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":75:28)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":76:13)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":77:34)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":77:17)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":79:13)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":82:13)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":79:17)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":79:25)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":79:42)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":79:28)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":80:13)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":81:34)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":81:17)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":83:26)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":83:13)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":88:9)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":113:9)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":89:13)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":89:33)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":90:13)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":90:33)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":91:13)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":94:13)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":91:18)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":92:13)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":93:17)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":95:13)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":98:13)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":95:34)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":95:46)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":95:18)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":96:13)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":97:27)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":97:17)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":99:13)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":102:13)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":99:34)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":99:46)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":99:18)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":100:13)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":101:27)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":101:17)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":103:13)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":106:13)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":103:17)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":103:25)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":103:42)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":103:28)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":104:13)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":105:34)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":105:17)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":107:13)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":110:13)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":107:17)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":107:25)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":107:42)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":107:28)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":108:13)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":109:34)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":109:17)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":111:34)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":111:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":112:26)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":112:13)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":184:1)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":187:1)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":186:5)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":186:11)
#loc175 = loc("/usr/include/stdlib.h":575:1)
#loc176 = loc("/usr/include/stdlib.h":575:41)
#loc177 = loc("/usr/include/time.h":76:1)
#loc178 = loc("/usr/include/time.h":76:38)
#loc179 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc180 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":203:15)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":205:15)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":208:15)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":210:15)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":198:1)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":213:1)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":199:1)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":201:27)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":201:22)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":201:5)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":203:5)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":204:5)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":204:61)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":205:5)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":208:5)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":209:5)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":209:60)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":210:5)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":212:12)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":212:5)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":122:1)
#loc206 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":182:1)
#loc207 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":124:5)
#loc208 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":181:5)
#loc209 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":124:8)
#loc210 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":124:33)
#loc211 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":125:5)
#loc212 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":152:5)
#loc213 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":154:5)
#loc214 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":126:9)
#loc215 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":151:9)
#loc216 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":127:13)
#loc217 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":127:33)
#loc218 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":128:13)
#loc219 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":128:33)
#loc220 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":129:13)
#loc221 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":132:13)
#loc222 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":129:18)
#loc223 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":130:13)
#loc224 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":131:17)
#loc225 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":133:13)
#loc226 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":136:13)
#loc227 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":133:34)
#loc228 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":133:46)
#loc229 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":133:18)
#loc230 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":134:13)
#loc231 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":135:27)
#loc232 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":135:17)
#loc233 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":137:13)
#loc234 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":140:13)
#loc235 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":137:34)
#loc236 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":137:46)
#loc237 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":137:18)
#loc238 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":138:13)
#loc239 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":139:27)
#loc240 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":139:17)
#loc241 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":141:13)
#loc242 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":144:13)
#loc243 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":141:17)
#loc244 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":141:25)
#loc245 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":141:42)
#loc246 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":141:28)
#loc247 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":142:13)
#loc248 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":143:34)
#loc249 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":143:17)
#loc250 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":145:13)
#loc251 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":148:13)
#loc252 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":145:17)
#loc253 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":145:25)
#loc254 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":145:42)
#loc255 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":145:28)
#loc256 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":146:13)
#loc257 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":147:34)
#loc258 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":147:17)
#loc259 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":149:34)
#loc260 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":149:13)
#loc261 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":150:26)
#loc262 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":150:13)
#loc263 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":155:9)
#loc264 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":180:9)
#loc265 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":156:13)
#loc266 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":156:33)
#loc267 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":157:13)
#loc268 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":157:33)
#loc269 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":158:13)
#loc270 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":161:13)
#loc271 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":158:18)
#loc272 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":159:13)
#loc273 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":160:17)
#loc274 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":162:13)
#loc275 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":165:13)
#loc276 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":162:34)
#loc277 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":162:46)
#loc278 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":162:18)
#loc279 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":163:13)
#loc280 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":164:27)
#loc281 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":164:17)
#loc282 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":166:13)
#loc283 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":169:13)
#loc284 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":166:34)
#loc285 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":166:46)
#loc286 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":166:18)
#loc287 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":167:13)
#loc288 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":168:27)
#loc289 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":168:17)
#loc290 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":170:13)
#loc291 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":173:13)
#loc292 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":170:17)
#loc293 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":170:25)
#loc294 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":170:42)
#loc295 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":170:28)
#loc296 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":171:13)
#loc297 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":172:34)
#loc298 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":172:17)
#loc299 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":174:13)
#loc300 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":177:13)
#loc301 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":174:17)
#loc302 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":174:25)
#loc303 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":174:42)
#loc304 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":174:28)
#loc305 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":175:13)
#loc306 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":176:34)
#loc307 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":176:17)
#loc308 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":178:34)
#loc309 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":178:13)
#loc310 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":179:26)
#loc311 = loc("CWE366_Race_Condition_Within_Thread__global_int_12.c":179:13)
#loc312 = loc(fused[#loc1, #loc2])
#loc313 = loc(fused[#loc3, #loc4])
#loc314 = loc(fused[#loc5, #loc6])
#loc315 = loc(fused[#loc7, #loc8])
#loc317 = loc(fused[#loc11, #loc12])
#loc318 = loc(fused[#loc14, #loc15])
#loc319 = loc(fused[#loc17, #loc16])
#loc320 = loc(fused[#loc18, #loc19])
#loc321 = loc(fused[#loc21, #loc15])
#loc322 = loc(fused[#loc24, #loc23])
#loc323 = loc(fused[#loc26, #loc25])
#loc324 = loc(fused[#loc27, #loc28])
#loc325 = loc(fused[#loc29, #loc30])
#loc326 = loc(fused[#loc31, #loc32])
#loc327 = loc(fused[#loc33, #loc34])
#loc328 = loc(fused[#loc35, #loc36])
#loc329 = loc(fused[#loc37, #loc38])
#loc330 = loc(fused[#loc39, #loc40])
#loc331 = loc(fused[#loc41, #loc42])
#loc333 = loc(fused[#loc45, #loc46])
#loc334 = loc(fused[#loc50, #loc51])
#loc335 = loc(fused[#loc53, #loc52])
#loc336 = loc(fused[#loc54, #loc55])
#loc337 = loc(fused[#loc57, #loc51])
#loc338 = loc(fused[#loc58, #loc59])
#loc339 = loc(fused[#loc62, #loc61])
#loc340 = loc(fused[#loc64, #loc63])
#loc341 = loc(fused[#loc67, #loc68])
#loc342 = loc(fused[#loc69, #loc70])
#loc343 = loc(fused[#loc71, #loc72])
#loc344 = loc(fused[#loc73, #loc74])
#loc345 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc346 = loc(fused[#loc78, #loc79])
#loc347 = loc(fused[#loc80, #loc81])
#loc348 = loc(fused[#loc82, #loc83])
#loc349 = loc(fused[#loc85, #loc84])
#loc350 = loc(fused[#loc86, #loc87])
#loc351 = loc(fused[#loc91, #loc87])
#loc352 = loc(fused[#loc93, #loc92])
#loc353 = loc(fused[#loc94, #loc95])
#loc354 = loc(fused[#loc99, #loc95])
#loc355 = loc(fused[#loc101, #loc100])
#loc356 = loc(fused[#loc102, #loc103])
#loc357 = loc(fused[#loc108, #loc103])
#loc358 = loc(fused[#loc111, #loc112])
#loc359 = loc(fused[#loc117, #loc112])
#loc360 = loc(fused[#loc122, #loc123])
#loc361 = loc(fused[#loc124, #loc125])
#loc362 = loc(fused[#loc126, #loc127])
#loc363 = loc(fused[#loc128, #loc129])
#loc364 = loc(fused[#loc131, #loc129])
#loc365 = loc(fused[#loc133, #loc134])
#loc366 = loc(fused[#loc138, #loc134])
#loc367 = loc(fused[#loc140, #loc139])
#loc368 = loc(fused[#loc141, #loc142])
#loc369 = loc(fused[#loc146, #loc142])
#loc370 = loc(fused[#loc148, #loc147])
#loc371 = loc(fused[#loc149, #loc150])
#loc372 = loc(fused[#loc155, #loc150])
#loc373 = loc(fused[#loc158, #loc159])
#loc374 = loc(fused[#loc164, #loc159])
#loc375 = loc(fused[#loc171, #loc172])
#loc376 = loc(fused[#loc173, #loc174])
#loc377 = loc(fused[#loc175, #loc176])
#loc378 = loc(fused[#loc177, #loc178])
#loc379 = loc(fused[#loc179, #loc180])
#loc380 = loc(fused[#loc185, #loc186])
#loc383 = loc(fused[#loc196, #loc197])
#loc384 = loc(fused[#loc200, #loc201])
#loc385 = loc(fused[#loc204, #loc203])
#loc386 = loc(fused[#loc205, #loc206])
#loc387 = loc(fused[#loc207, #loc208])
#loc388 = loc(fused[#loc209, #loc210])
#loc389 = loc(fused[#loc211, #loc212, #loc213, #loc208])
#loc390 = loc(fused[#loc214, #loc215])
#loc391 = loc(fused[#loc216, #loc217])
#loc392 = loc(fused[#loc218, #loc219])
#loc393 = loc(fused[#loc220, #loc221])
#loc394 = loc(fused[#loc223, #loc221])
#loc395 = loc(fused[#loc225, #loc226])
#loc396 = loc(fused[#loc230, #loc226])
#loc397 = loc(fused[#loc232, #loc231])
#loc398 = loc(fused[#loc233, #loc234])
#loc399 = loc(fused[#loc238, #loc234])
#loc400 = loc(fused[#loc240, #loc239])
#loc401 = loc(fused[#loc241, #loc242])
#loc402 = loc(fused[#loc247, #loc242])
#loc403 = loc(fused[#loc250, #loc251])
#loc404 = loc(fused[#loc256, #loc251])
#loc405 = loc(fused[#loc263, #loc264])
#loc406 = loc(fused[#loc265, #loc266])
#loc407 = loc(fused[#loc267, #loc268])
#loc408 = loc(fused[#loc269, #loc270])
#loc409 = loc(fused[#loc272, #loc270])
#loc410 = loc(fused[#loc274, #loc275])
#loc411 = loc(fused[#loc279, #loc275])
#loc412 = loc(fused[#loc281, #loc280])
#loc413 = loc(fused[#loc282, #loc283])
#loc414 = loc(fused[#loc287, #loc283])
#loc415 = loc(fused[#loc289, #loc288])
#loc416 = loc(fused[#loc290, #loc291])
#loc417 = loc(fused[#loc296, #loc291])
#loc418 = loc(fused[#loc299, #loc300])
#loc419 = loc(fused[#loc305, #loc300])
