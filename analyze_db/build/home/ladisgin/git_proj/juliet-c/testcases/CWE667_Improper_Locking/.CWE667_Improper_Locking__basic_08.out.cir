!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc51 = loc("CWE667_Improper_Locking__basic_08.c":126:10)
#loc52 = loc("CWE667_Improper_Locking__basic_08.c":126:14)
#loc53 = loc("CWE667_Improper_Locking__basic_08.c":126:20)
#loc54 = loc("CWE667_Improper_Locking__basic_08.c":126:32)
#loc164 = loc(fused[#loc51, #loc52])
#loc165 = loc(fused[#loc53, #loc54])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_08_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc150)
  cir.func no_proto @CWE667_Improper_Locking__basic_08_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc153)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc19)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @CWE667_Improper_Locking__basic_08_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc24)
          cir.scope {
            %9 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc27)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc27)
            %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc27)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc29)
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
            } loc(#loc157)
          } loc(#loc156)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc32)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc33)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc34)
        } loc(#loc155)
      } loc(#loc154)
    } loc(#loc152)
    cir.return loc(#loc16)
  } loc(#loc151)
  cir.func no_proto @CWE667_Improper_Locking__basic_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    cir.return loc(#loc36)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc161)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc48)
  cir.func @main(%arg0: !s32i loc(fused[#loc51, #loc52]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc53, #loc54])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc55)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc57)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc57)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc58)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %8 = cir.get_global @CWE667_Improper_Locking__basic_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE667_Improper_Locking__basic_08_good() : () -> () loc(#loc60)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc46)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc47)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %13 = cir.get_global @CWE667_Improper_Locking__basic_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE667_Improper_Locking__basic_08_bad() : () -> () loc(#loc64)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.return %2 : !s32i loc(#loc170)
  } loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc74)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc77)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc172)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc175)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc84)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc84)
      cir.if %2 {
        %3 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %3 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc92)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc92)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc93)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc96)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc96)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc96)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc98)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc98)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc99)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc100)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc101)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
            } loc(#loc179)
          } loc(#loc178)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc102)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc104)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc105)
          %9 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc74)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc74)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc106)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc107)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc108)
          %12 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc77)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc77)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc110)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc111)
        } loc(#loc177)
      } loc(#loc176)
    } loc(#loc174)
    cir.return loc(#loc81)
  } loc(#loc173)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc114)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc181)
    cir.return %2 : !s32i loc(#loc181)
  } loc(#loc180)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc184)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc120)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc120)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc125)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc125)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc129)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc129)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc129)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc131)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc131)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc132)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc133)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc134)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc133)
            } loc(#loc188)
          } loc(#loc187)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc135)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc135)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc136)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc137)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc138)
          %9 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc139)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc140)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc141)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc142)
          %12 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc143)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc143)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc144)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc145)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc146)
        } loc(#loc186)
      } loc(#loc185)
    } loc(#loc183)
    cir.return loc(#loc117)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_08.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_08.c":93:34)
#loc2 = loc("CWE667_Improper_Locking__basic_08.c":69:34)
#loc3 = loc("CWE667_Improper_Locking__basic_08.c":40:34)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_08.c":41:23)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_08.c":44:27)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_08.c":47:23)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_08.c":35:1)
#loc16 = loc("CWE667_Improper_Locking__basic_08.c":52:1)
#loc17 = loc("CWE667_Improper_Locking__basic_08.c":37:5)
#loc18 = loc("CWE667_Improper_Locking__basic_08.c":51:5)
#loc19 = loc("CWE667_Improper_Locking__basic_08.c":37:8)
#loc20 = loc("CWE667_Improper_Locking__basic_08.c":37:26)
#loc21 = loc("CWE667_Improper_Locking__basic_08.c":38:5)
#loc22 = loc("CWE667_Improper_Locking__basic_08.c":39:9)
#loc23 = loc("CWE667_Improper_Locking__basic_08.c":50:9)
#loc24 = loc("CWE667_Improper_Locking__basic_08.c":41:13)
#loc25 = loc("CWE667_Improper_Locking__basic_08.c":42:13)
#loc26 = loc("CWE667_Improper_Locking__basic_08.c":46:13)
#loc27 = loc("CWE667_Improper_Locking__basic_08.c":42:18)
#loc28 = loc("CWE667_Improper_Locking__basic_08.c":43:13)
#loc29 = loc("CWE667_Improper_Locking__basic_08.c":44:17)
#loc30 = loc("CWE667_Improper_Locking__basic_08.c":45:17)
#loc31 = loc("CWE667_Improper_Locking__basic_08.c":45:22)
#loc32 = loc("CWE667_Improper_Locking__basic_08.c":47:13)
#loc33 = loc("CWE667_Improper_Locking__basic_08.c":48:34)
#loc34 = loc("CWE667_Improper_Locking__basic_08.c":48:13)
#loc35 = loc("CWE667_Improper_Locking__basic_08.c":111:1)
#loc36 = loc("CWE667_Improper_Locking__basic_08.c":115:1)
#loc37 = loc("CWE667_Improper_Locking__basic_08.c":113:5)
#loc38 = loc("CWE667_Improper_Locking__basic_08.c":113:11)
#loc39 = loc("CWE667_Improper_Locking__basic_08.c":114:5)
#loc40 = loc("CWE667_Improper_Locking__basic_08.c":114:11)
#loc41 = loc("/usr/include/stdlib.h":575:1)
#loc42 = loc("/usr/include/stdlib.h":575:41)
#loc43 = loc("/usr/include/time.h":76:1)
#loc44 = loc("/usr/include/time.h":76:38)
#loc45 = loc("CWE667_Improper_Locking__basic_08.c":131:15)
#loc46 = loc("CWE667_Improper_Locking__basic_08.c":133:15)
#loc47 = loc("CWE667_Improper_Locking__basic_08.c":136:15)
#loc48 = loc("CWE667_Improper_Locking__basic_08.c":138:15)
#loc49 = loc("CWE667_Improper_Locking__basic_08.c":126:1)
#loc50 = loc("CWE667_Improper_Locking__basic_08.c":141:1)
#loc55 = loc("CWE667_Improper_Locking__basic_08.c":127:1)
#loc56 = loc("CWE667_Improper_Locking__basic_08.c":129:27)
#loc57 = loc("CWE667_Improper_Locking__basic_08.c":129:22)
#loc58 = loc("CWE667_Improper_Locking__basic_08.c":129:5)
#loc59 = loc("CWE667_Improper_Locking__basic_08.c":131:5)
#loc60 = loc("CWE667_Improper_Locking__basic_08.c":132:5)
#loc61 = loc("CWE667_Improper_Locking__basic_08.c":132:44)
#loc62 = loc("CWE667_Improper_Locking__basic_08.c":133:5)
#loc63 = loc("CWE667_Improper_Locking__basic_08.c":136:5)
#loc64 = loc("CWE667_Improper_Locking__basic_08.c":137:5)
#loc65 = loc("CWE667_Improper_Locking__basic_08.c":137:43)
#loc66 = loc("CWE667_Improper_Locking__basic_08.c":138:5)
#loc67 = loc("CWE667_Improper_Locking__basic_08.c":140:12)
#loc68 = loc("CWE667_Improper_Locking__basic_08.c":140:5)
#loc69 = loc("CWE667_Improper_Locking__basic_08.c":23:1)
#loc70 = loc("CWE667_Improper_Locking__basic_08.c":26:1)
#loc71 = loc("CWE667_Improper_Locking__basic_08.c":25:12)
#loc72 = loc("CWE667_Improper_Locking__basic_08.c":25:5)
#loc73 = loc("CWE667_Improper_Locking__basic_08.c":64:19)
#loc74 = loc("CWE667_Improper_Locking__basic_08.c":79:23)
#loc75 = loc("../../testcasesupport/std_thread.h":20:1)
#loc76 = loc("../../testcasesupport/std_thread.h":20:45)
#loc77 = loc("CWE667_Improper_Locking__basic_08.c":81:23)
#loc78 = loc("../../testcasesupport/std_thread.h":21:1)
#loc79 = loc("../../testcasesupport/std_thread.h":21:45)
#loc80 = loc("CWE667_Improper_Locking__basic_08.c":59:1)
#loc81 = loc("CWE667_Improper_Locking__basic_08.c":85:1)
#loc82 = loc("CWE667_Improper_Locking__basic_08.c":61:5)
#loc83 = loc("CWE667_Improper_Locking__basic_08.c":84:5)
#loc84 = loc("CWE667_Improper_Locking__basic_08.c":61:8)
#loc85 = loc("CWE667_Improper_Locking__basic_08.c":61:27)
#loc86 = loc("CWE667_Improper_Locking__basic_08.c":62:5)
#loc87 = loc("CWE667_Improper_Locking__basic_08.c":65:5)
#loc88 = loc("CWE667_Improper_Locking__basic_08.c":67:5)
#loc89 = loc("CWE667_Improper_Locking__basic_08.c":64:9)
#loc90 = loc("CWE667_Improper_Locking__basic_08.c":68:9)
#loc91 = loc("CWE667_Improper_Locking__basic_08.c":83:9)
#loc92 = loc("CWE667_Improper_Locking__basic_08.c":70:23)
#loc93 = loc("CWE667_Improper_Locking__basic_08.c":70:13)
#loc94 = loc("CWE667_Improper_Locking__basic_08.c":71:13)
#loc95 = loc("CWE667_Improper_Locking__basic_08.c":75:13)
#loc96 = loc("CWE667_Improper_Locking__basic_08.c":71:18)
#loc97 = loc("CWE667_Improper_Locking__basic_08.c":72:13)
#loc98 = loc("CWE667_Improper_Locking__basic_08.c":73:27)
#loc99 = loc("CWE667_Improper_Locking__basic_08.c":73:17)
#loc100 = loc("CWE667_Improper_Locking__basic_08.c":74:17)
#loc101 = loc("CWE667_Improper_Locking__basic_08.c":74:22)
#loc102 = loc("CWE667_Improper_Locking__basic_08.c":76:23)
#loc103 = loc("CWE667_Improper_Locking__basic_08.c":76:13)
#loc104 = loc("CWE667_Improper_Locking__basic_08.c":77:34)
#loc105 = loc("CWE667_Improper_Locking__basic_08.c":77:13)
#loc106 = loc("CWE667_Improper_Locking__basic_08.c":79:13)
#loc107 = loc("CWE667_Improper_Locking__basic_08.c":80:34)
#loc108 = loc("CWE667_Improper_Locking__basic_08.c":80:13)
#loc109 = loc("CWE667_Improper_Locking__basic_08.c":81:13)
#loc110 = loc("CWE667_Improper_Locking__basic_08.c":82:34)
#loc111 = loc("CWE667_Improper_Locking__basic_08.c":82:13)
#loc112 = loc("CWE667_Improper_Locking__basic_08.c":28:1)
#loc113 = loc("CWE667_Improper_Locking__basic_08.c":31:1)
#loc114 = loc("CWE667_Improper_Locking__basic_08.c":30:12)
#loc115 = loc("CWE667_Improper_Locking__basic_08.c":30:5)
#loc116 = loc("CWE667_Improper_Locking__basic_08.c":88:1)
#loc117 = loc("CWE667_Improper_Locking__basic_08.c":109:1)
#loc118 = loc("CWE667_Improper_Locking__basic_08.c":90:5)
#loc119 = loc("CWE667_Improper_Locking__basic_08.c":108:5)
#loc120 = loc("CWE667_Improper_Locking__basic_08.c":90:8)
#loc121 = loc("CWE667_Improper_Locking__basic_08.c":90:26)
#loc122 = loc("CWE667_Improper_Locking__basic_08.c":91:5)
#loc123 = loc("CWE667_Improper_Locking__basic_08.c":92:9)
#loc124 = loc("CWE667_Improper_Locking__basic_08.c":107:9)
#loc125 = loc("CWE667_Improper_Locking__basic_08.c":94:23)
#loc126 = loc("CWE667_Improper_Locking__basic_08.c":94:13)
#loc127 = loc("CWE667_Improper_Locking__basic_08.c":95:13)
#loc128 = loc("CWE667_Improper_Locking__basic_08.c":99:13)
#loc129 = loc("CWE667_Improper_Locking__basic_08.c":95:18)
#loc130 = loc("CWE667_Improper_Locking__basic_08.c":96:13)
#loc131 = loc("CWE667_Improper_Locking__basic_08.c":97:27)
#loc132 = loc("CWE667_Improper_Locking__basic_08.c":97:17)
#loc133 = loc("CWE667_Improper_Locking__basic_08.c":98:17)
#loc134 = loc("CWE667_Improper_Locking__basic_08.c":98:22)
#loc135 = loc("CWE667_Improper_Locking__basic_08.c":100:23)
#loc136 = loc("CWE667_Improper_Locking__basic_08.c":100:13)
#loc137 = loc("CWE667_Improper_Locking__basic_08.c":101:34)
#loc138 = loc("CWE667_Improper_Locking__basic_08.c":101:13)
#loc139 = loc("CWE667_Improper_Locking__basic_08.c":103:23)
#loc140 = loc("CWE667_Improper_Locking__basic_08.c":103:13)
#loc141 = loc("CWE667_Improper_Locking__basic_08.c":104:34)
#loc142 = loc("CWE667_Improper_Locking__basic_08.c":104:13)
#loc143 = loc("CWE667_Improper_Locking__basic_08.c":105:23)
#loc144 = loc("CWE667_Improper_Locking__basic_08.c":105:13)
#loc145 = loc("CWE667_Improper_Locking__basic_08.c":106:34)
#loc146 = loc("CWE667_Improper_Locking__basic_08.c":106:13)
#loc147 = loc(fused[#loc4, #loc5])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc10, #loc11])
#loc150 = loc(fused[#loc13, #loc14])
#loc151 = loc(fused[#loc15, #loc16])
#loc152 = loc(fused[#loc17, #loc18])
#loc153 = loc(fused[#loc19, #loc20])
#loc154 = loc(fused[#loc21, #loc18])
#loc155 = loc(fused[#loc22, #loc23])
#loc156 = loc(fused[#loc25, #loc26])
#loc157 = loc(fused[#loc28, #loc26])
#loc158 = loc(fused[#loc35, #loc36])
#loc159 = loc(fused[#loc37, #loc38])
#loc160 = loc(fused[#loc39, #loc40])
#loc161 = loc(fused[#loc41, #loc42])
#loc162 = loc(fused[#loc43, #loc44])
#loc163 = loc(fused[#loc49, #loc50])
#loc166 = loc(fused[#loc60, #loc61])
#loc167 = loc(fused[#loc64, #loc65])
#loc168 = loc(fused[#loc68, #loc67])
#loc169 = loc(fused[#loc69, #loc70])
#loc170 = loc(fused[#loc72, #loc71])
#loc171 = loc(fused[#loc75, #loc76])
#loc172 = loc(fused[#loc78, #loc79])
#loc173 = loc(fused[#loc80, #loc81])
#loc174 = loc(fused[#loc82, #loc83])
#loc175 = loc(fused[#loc84, #loc85])
#loc176 = loc(fused[#loc86, #loc87, #loc88, #loc83])
#loc177 = loc(fused[#loc90, #loc91])
#loc178 = loc(fused[#loc94, #loc95])
#loc179 = loc(fused[#loc97, #loc95])
#loc180 = loc(fused[#loc112, #loc113])
#loc181 = loc(fused[#loc115, #loc114])
#loc182 = loc(fused[#loc116, #loc117])
#loc183 = loc(fused[#loc118, #loc119])
#loc184 = loc(fused[#loc120, #loc121])
#loc185 = loc(fused[#loc122, #loc119])
#loc186 = loc(fused[#loc123, #loc124])
#loc187 = loc(fused[#loc127, #loc128])
#loc188 = loc(fused[#loc130, #loc128])
