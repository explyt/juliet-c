!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc72)
  cir.func  @_ZN41CWE369_Divide_by_Zero__int_zero_divide_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc75)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc10)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc79)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc79)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc18)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc80)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc20)
    } loc(#loc78)
    cir.return loc(#loc4)
  } loc(#loc73)
  cir.func internal private  @_ZN41CWE369_Divide_by_Zero__int_zero_divide_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc82)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc83)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc26)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc28)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %4 = cir.const #cir.int<7> : !s32i loc(#loc30)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc87)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc87)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc36)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc88)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc38)
    } loc(#loc86)
    cir.return loc(#loc22)
  } loc(#loc81)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc41)
  cir.func internal private  @_ZN41CWE369_Divide_by_Zero__int_zero_divide_33L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc92)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc47)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc49)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc51)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
      %6 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc96)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc98)
        cir.if %10 {
          %11 = cir.const #cir.int<100> : !s32i loc(#loc64)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %13 = cir.binop(div, %11, %12) : !s32i loc(#loc100)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc66)
        } else {
          %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc41)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc41)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
        } loc(#loc99)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc43)
  } loc(#loc90)
  cir.func  @_ZN41CWE369_Divide_by_Zero__int_zero_divide_334goodEv() extra(#fn_attr) {
    cir.call @_ZN41CWE369_Divide_by_Zero__int_zero_divide_33L7goodG2BEv() : () -> () loc(#loc70)
    cir.call @_ZN41CWE369_Divide_by_Zero__int_zero_divide_33L7goodB2GEv() : () -> () loc(#loc71)
    cir.return loc(#loc69)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":25:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":38:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":27:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":27:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":28:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":28:20)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":30:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":30:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":30:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":32:12)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":32:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":33:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":37:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":34:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":34:20)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":36:22)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":36:28)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":36:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":45:1)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":58:1)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":47:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":47:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":48:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":48:20)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":50:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":50:12)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":50:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":52:12)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":52:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":53:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":57:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":54:9)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":54:20)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":56:22)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":56:28)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":56:9)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":78:23)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":61:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":81:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":63:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":63:9)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":64:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":64:20)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":66:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":66:12)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":66:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":68:12)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":68:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":69:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":80:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":70:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":70:20)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":72:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":79:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":72:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":72:21)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":73:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":75:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":77:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":74:26)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":74:32)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":74:13)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":78:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":83:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":87:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":85:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_33.cpp":86:5)
#loc72 = loc(fused[#loc1, #loc2])
#loc73 = loc(fused[#loc3, #loc4])
#loc74 = loc(fused[#loc5, #loc6])
#loc75 = loc(fused[#loc7, #loc8])
#loc76 = loc(fused[#loc11, #loc9])
#loc77 = loc(fused[#loc13, #loc12])
#loc78 = loc(fused[#loc14, #loc15])
#loc79 = loc(fused[#loc16, #loc17])
#loc80 = loc(fused[#loc18, #loc19])
#loc81 = loc(fused[#loc21, #loc22])
#loc82 = loc(fused[#loc23, #loc24])
#loc83 = loc(fused[#loc25, #loc26])
#loc84 = loc(fused[#loc29, #loc27])
#loc85 = loc(fused[#loc31, #loc30])
#loc86 = loc(fused[#loc32, #loc33])
#loc87 = loc(fused[#loc34, #loc35])
#loc88 = loc(fused[#loc36, #loc37])
#loc89 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc42, #loc43])
#loc91 = loc(fused[#loc44, #loc45])
#loc92 = loc(fused[#loc46, #loc47])
#loc93 = loc(fused[#loc50, #loc48])
#loc94 = loc(fused[#loc52, #loc51])
#loc95 = loc(fused[#loc53, #loc54])
#loc96 = loc(fused[#loc55, #loc56])
#loc97 = loc(fused[#loc57, #loc58])
#loc98 = loc(fused[#loc59, #loc60])
#loc99 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc100 = loc(fused[#loc64, #loc65])
#loc101 = loc(fused[#loc68, #loc69])
