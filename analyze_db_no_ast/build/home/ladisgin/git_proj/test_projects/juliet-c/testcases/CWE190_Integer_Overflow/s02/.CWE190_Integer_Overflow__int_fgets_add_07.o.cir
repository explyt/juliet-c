!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc239)
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc240)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc241)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc242)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc243)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private  @printIntLine(!s32i) loc(#loc244)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc249)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc252)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc252)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc252)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc33)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc33)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc33)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc33)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc33)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc33)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc33)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc254)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc37)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc42)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc45)
            } loc(#loc255)
          } loc(#loc253)
        } loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc49)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc258)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc50)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc261)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc56)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc261)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc58)
        } loc(#loc260)
      } loc(#loc259)
    } loc(#loc257)
    cir.return loc(#loc15)
  } loc(#loc245)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fgets_add_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc263)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc266)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc60)
  } loc(#loc262)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc69)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc79)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc271)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc81)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc274)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc274)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc274)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc89)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc90)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc90)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc90)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc90)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc90)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc90)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc90)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc90)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc91)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc92)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc93)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc93)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc276)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc94)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc98)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc99)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc102)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc102)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc103)
            } loc(#loc277)
          } loc(#loc275)
        } loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc107)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc280)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc108)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc112)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc115)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc116)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc283)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc117)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc285)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc122)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc123)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc285)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc124)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc125)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc126)
          } loc(#loc284)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc279)
    cir.return loc(#loc72)
  } loc(#loc267)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc287)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc131)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc136)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc290)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc137)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc293)
          %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc293)
          cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc293)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc145)
            %10 = cir.const #cir.int<3> : !s32i loc(#loc146)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc146)
            %12 = cir.const #cir.int<4> : !u64i loc(#loc146)
            %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc146)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc146)
            %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc146)
            %16 = cir.binop(add, %13, %15) : !u64i loc(#loc146)
            %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc146)
            %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc241)
            %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc147)
            %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc148)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc149)
            %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !s32i loc(#loc295)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc150)
            cir.if %24 {
              %25 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc154)
              %26 = cir.call @atoi(%25) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc155)
              cir.store %26, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc158)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc158)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc159)
            } loc(#loc296)
          } loc(#loc294)
        } loc(#loc292)
      } loc(#loc291)
    } loc(#loc289)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc162)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc163)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc299)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc164)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc168)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc169)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !s32i loc(#loc302)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc170)
          cir.if %10 {
            %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc304)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %13 = cir.const #cir.int<1> : !s32i loc(#loc175)
            %14 = cir.binop(add, %12, %13) nsw : !s32i loc(#loc176)
            cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc304)
            %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc177)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc178)
          } else {
            %11 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc179)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc179)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc180)
          } loc(#loc303)
        } loc(#loc301)
      } loc(#loc300)
    } loc(#loc298)
    cir.return loc(#loc128)
  } loc(#loc286)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc306)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc185)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc189)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc190)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc309)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc191)
      cir.if %6 {
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc195)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc195)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc196)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc197)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
      } loc(#loc310)
    } loc(#loc308)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc202)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc313)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc203)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc316)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc209)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc208)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc209)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc316)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc210)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc211)
        } loc(#loc315)
      } loc(#loc314)
    } loc(#loc312)
    cir.return loc(#loc182)
  } loc(#loc305)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc318)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc216)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc221)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc321)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc222)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc224)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc323)
      } loc(#loc322)
    } loc(#loc320)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc239)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc228)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc229)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc325)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc230)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc328)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc235)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc236)
          cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc237)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc238)
        } loc(#loc327)
      } loc(#loc326)
    } loc(#loc324)
    cir.return loc(#loc213)
  } loc(#loc317)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":25:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":25:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":46:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":29:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":58:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":31:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":33:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":33:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":49:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":34:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":34:20)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":34:18)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":35:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":36:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":48:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":37:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":37:49)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":47:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:23)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:36)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:53)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:17)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:63)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":39:60)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":40:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":43:13)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":45:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":42:29)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":42:24)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":42:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":42:40)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":46:17)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":50:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":57:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":50:8)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":50:20)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":50:18)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":51:5)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":52:9)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":56:9)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":54:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":54:33)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":54:26)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":55:26)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":55:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":190:1)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":196:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":192:5)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":192:14)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":193:5)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":193:14)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":194:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":194:14)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":195:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":195:14)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":89:19)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":101:23)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":65:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":104:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":67:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":67:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":69:12)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":69:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":70:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":85:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":70:8)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":70:20)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":70:18)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":71:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":72:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":84:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":73:13)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":73:49)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":83:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:23)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:36)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:53)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:17)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:63)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":75:60)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":76:13)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":79:13)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":81:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":78:29)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":78:24)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":78:17)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":78:40)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":82:27)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":82:17)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":86:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":103:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":86:8)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":86:20)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":86:18)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":87:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":90:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":92:5)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":89:9)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":94:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":102:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":94:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":94:20)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":94:18)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":95:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":98:9)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":100:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":96:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":96:33)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":96:26)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":97:26)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":97:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":101:13)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":107:1)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":141:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":109:5)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":109:9)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":111:12)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":111:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":112:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":127:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":112:8)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":112:20)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":112:18)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":113:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":114:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":126:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":115:13)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":115:49)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:13)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":125:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:23)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:36)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:53)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:17)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:63)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":117:60)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":118:13)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":121:13)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":123:13)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":120:29)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":120:24)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":120:17)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":120:40)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":124:27)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":124:17)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":128:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":140:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":128:8)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":128:20)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":128:18)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":129:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":131:9)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":139:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":131:13)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":131:20)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":131:18)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":132:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":135:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":137:9)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":133:13)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":133:33)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":133:26)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":134:26)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":134:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":138:23)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":138:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":144:1)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":167:1)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":146:5)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":146:9)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":148:12)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":148:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":149:5)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":158:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":149:8)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":149:20)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":149:18)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":150:5)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":153:5)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":155:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":152:19)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":152:9)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":157:16)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":157:9)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":159:5)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":166:5)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":159:8)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":159:20)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":159:18)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":160:5)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":161:9)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":165:9)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":163:13)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":163:33)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":163:26)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":164:26)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":164:13)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":170:1)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":188:1)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":172:5)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":172:9)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":174:12)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":174:5)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":175:5)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":179:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":175:8)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":175:20)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":175:18)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":176:5)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":178:16)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":178:9)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":180:5)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":187:5)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":180:8)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":180:20)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":180:18)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":181:5)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":182:9)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":186:9)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":184:13)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":184:33)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":184:26)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":185:26)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_add_07.c":185:13)
#loc239 = loc(fused[#loc1, #loc2])
#loc240 = loc(fused[#loc3, #loc4])
#loc241 = loc(fused[#loc5, #loc6])
#loc242 = loc(fused[#loc7, #loc8])
#loc243 = loc(fused[#loc9, #loc10])
#loc244 = loc(fused[#loc12, #loc13])
#loc245 = loc(fused[#loc14, #loc15])
#loc246 = loc(fused[#loc16, #loc17])
#loc247 = loc(fused[#loc19, #loc18])
#loc248 = loc(fused[#loc20, #loc21])
#loc249 = loc(fused[#loc22, #loc23])
#loc250 = loc(fused[#loc25, #loc21])
#loc251 = loc(fused[#loc26, #loc27])
#loc252 = loc(fused[#loc28, #loc29])
#loc253 = loc(fused[#loc30, #loc31])
#loc254 = loc(fused[#loc35, #loc36])
#loc255 = loc(fused[#loc38, #loc39, #loc40, #loc31])
#loc256 = loc(fused[#loc43, #loc44])
#loc257 = loc(fused[#loc46, #loc47])
#loc258 = loc(fused[#loc48, #loc49])
#loc259 = loc(fused[#loc51, #loc47])
#loc260 = loc(fused[#loc52, #loc53])
#loc261 = loc(fused[#loc54, #loc55])
#loc262 = loc(fused[#loc59, #loc60])
#loc263 = loc(fused[#loc61, #loc62])
#loc264 = loc(fused[#loc63, #loc64])
#loc265 = loc(fused[#loc65, #loc66])
#loc266 = loc(fused[#loc67, #loc68])
#loc267 = loc(fused[#loc71, #loc72])
#loc268 = loc(fused[#loc73, #loc74])
#loc269 = loc(fused[#loc76, #loc75])
#loc270 = loc(fused[#loc77, #loc78])
#loc271 = loc(fused[#loc79, #loc80])
#loc272 = loc(fused[#loc82, #loc78])
#loc273 = loc(fused[#loc83, #loc84])
#loc274 = loc(fused[#loc85, #loc86])
#loc275 = loc(fused[#loc87, #loc88])
#loc276 = loc(fused[#loc92, #loc93])
#loc277 = loc(fused[#loc95, #loc96, #loc97, #loc88])
#loc278 = loc(fused[#loc100, #loc101])
#loc279 = loc(fused[#loc104, #loc105])
#loc280 = loc(fused[#loc106, #loc107])
#loc281 = loc(fused[#loc109, #loc110, #loc111, #loc105])
#loc282 = loc(fused[#loc113, #loc114])
#loc283 = loc(fused[#loc115, #loc116])
#loc284 = loc(fused[#loc118, #loc119, #loc120, #loc114])
#loc285 = loc(fused[#loc121, #loc122])
#loc286 = loc(fused[#loc127, #loc128])
#loc287 = loc(fused[#loc129, #loc130])
#loc288 = loc(fused[#loc132, #loc131])
#loc289 = loc(fused[#loc133, #loc134])
#loc290 = loc(fused[#loc135, #loc136])
#loc291 = loc(fused[#loc138, #loc134])
#loc292 = loc(fused[#loc139, #loc140])
#loc293 = loc(fused[#loc141, #loc142])
#loc294 = loc(fused[#loc143, #loc144])
#loc295 = loc(fused[#loc148, #loc149])
#loc296 = loc(fused[#loc151, #loc152, #loc153, #loc144])
#loc297 = loc(fused[#loc156, #loc157])
#loc298 = loc(fused[#loc160, #loc161])
#loc299 = loc(fused[#loc162, #loc163])
#loc300 = loc(fused[#loc165, #loc161])
#loc301 = loc(fused[#loc166, #loc167])
#loc302 = loc(fused[#loc168, #loc169])
#loc303 = loc(fused[#loc171, #loc172, #loc173, #loc167])
#loc304 = loc(fused[#loc174, #loc175])
#loc305 = loc(fused[#loc181, #loc182])
#loc306 = loc(fused[#loc183, #loc184])
#loc307 = loc(fused[#loc186, #loc185])
#loc308 = loc(fused[#loc187, #loc188])
#loc309 = loc(fused[#loc189, #loc190])
#loc310 = loc(fused[#loc192, #loc193, #loc194, #loc188])
#loc311 = loc(fused[#loc198, #loc197])
#loc312 = loc(fused[#loc199, #loc200])
#loc313 = loc(fused[#loc201, #loc202])
#loc314 = loc(fused[#loc204, #loc200])
#loc315 = loc(fused[#loc205, #loc206])
#loc316 = loc(fused[#loc207, #loc208])
#loc317 = loc(fused[#loc212, #loc213])
#loc318 = loc(fused[#loc214, #loc215])
#loc319 = loc(fused[#loc217, #loc216])
#loc320 = loc(fused[#loc218, #loc219])
#loc321 = loc(fused[#loc220, #loc221])
#loc322 = loc(fused[#loc223, #loc219])
#loc323 = loc(fused[#loc225, #loc224])
#loc324 = loc(fused[#loc226, #loc227])
#loc325 = loc(fused[#loc228, #loc229])
#loc326 = loc(fused[#loc231, #loc227])
#loc327 = loc(fused[#loc232, #loc233])
#loc328 = loc(fused[#loc234, #loc235])
