!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_scanf(!cir.ptr<!s8i>, ...) -> !s32i loc(#loc81)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%99s" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"scanf failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc85)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc88)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc89)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc88)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc88)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc19)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc89)
          cir.scope {
            %7 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc3)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc3)
            %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
            %11 = cir.call @__isoc99_scanf(%9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc22)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc24)
            %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc91)
            cir.if %13 {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc6)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc6)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc26)
            } loc(#loc92)
          } loc(#loc90)
        } loc(#loc87)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc8)
  } loc(#loc83)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc33)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc38)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc39)
      %2 = cir.cmp(ne, %0, %1) : !s32i, !cir.bool loc(#loc98)
      cir.if %2 {
        %3 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc101)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc102)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc101)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc101)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc49)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
          cir.scope {
            %7 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc52)
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc53)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc53)
            %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
            %11 = cir.call @__isoc99_scanf(%9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc52)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc55)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc55)
            %14 = cir.cmp(eq, %11, %13) : !s32i, !cir.bool loc(#loc104)
            cir.if %14 {
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc57)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc57)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc58)
            } loc(#loc105)
          } loc(#loc103)
        } loc(#loc100)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc35)
  } loc(#loc96)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc63)
      %1 = cir.const #cir.int<5> : !s32i loc(#loc64)
      %2 = cir.cmp(eq, %0, %1) : !s32i, !cir.bool loc(#loc108)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc111)
          %4 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc112)
          %5 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc111)
          cir.store %5, %3 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc111)
          %6 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc71)
          cir.store %6, %4 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc112)
          cir.scope {
            %7 = cir.get_global @__isoc99_scanf : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc74)
            %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc75)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc75)
            %10 = cir.load %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
            %11 = cir.call @__isoc99_scanf(%9, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc74)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc77)
            %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc77)
            %14 = cir.cmp(eq, %11, %13) : !s32i, !cir.bool loc(#loc114)
            cir.if %14 {
              %15 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc79)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc79)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc80)
            } loc(#loc115)
          } loc(#loc113)
        } loc(#loc110)
      } loc(#loc109)
    } loc(#loc107)
    cir.return loc(#loc60)
  } loc(#loc106)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":0:0)
#loc1 = loc("/usr/include/stdio.h":466:1)
#loc2 = loc("/usr/include/stdio.h":466:12)
#loc3 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":40:23)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":42:27)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":29:1)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":46:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":31:5)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":45:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":31:8)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":31:27)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":32:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":33:9)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":44:9)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":36:13)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":36:36)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":37:13)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":37:27)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":40:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":43:13)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":40:17)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":40:33)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":40:42)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":41:13)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":42:17)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":95:1)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":99:1)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":97:5)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":97:11)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":98:5)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":98:11)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":58:19)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":53:1)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":74:1)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":55:5)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":73:5)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":55:8)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":55:27)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":56:5)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":59:5)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":61:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":58:9)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":62:9)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":72:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":65:13)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":65:36)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":66:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":66:27)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":68:13)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":71:13)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":68:17)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":68:23)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":68:33)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":68:42)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":69:13)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":70:27)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":70:17)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":77:1)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":93:1)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":79:5)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":92:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":79:8)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":79:27)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":80:5)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":81:9)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":91:9)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":84:13)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":84:36)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":85:13)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":85:27)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":87:13)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":90:13)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":87:17)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":87:23)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":87:33)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":87:42)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":88:13)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":89:27)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_scanf_06.c":89:17)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc4, #loc5])
#loc83 = loc(fused[#loc7, #loc8])
#loc84 = loc(fused[#loc9, #loc10])
#loc85 = loc(fused[#loc11, #loc12])
#loc86 = loc(fused[#loc13, #loc10])
#loc87 = loc(fused[#loc14, #loc15])
#loc88 = loc(fused[#loc16, #loc17])
#loc89 = loc(fused[#loc18, #loc19])
#loc90 = loc(fused[#loc20, #loc21])
#loc91 = loc(fused[#loc22, #loc24])
#loc92 = loc(fused[#loc25, #loc21])
#loc93 = loc(fused[#loc27, #loc28])
#loc94 = loc(fused[#loc29, #loc30])
#loc95 = loc(fused[#loc31, #loc32])
#loc96 = loc(fused[#loc34, #loc35])
#loc97 = loc(fused[#loc36, #loc37])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc40, #loc41, #loc42, #loc37])
#loc100 = loc(fused[#loc44, #loc45])
#loc101 = loc(fused[#loc46, #loc47])
#loc102 = loc(fused[#loc48, #loc49])
#loc103 = loc(fused[#loc50, #loc51])
#loc104 = loc(fused[#loc52, #loc55])
#loc105 = loc(fused[#loc56, #loc51])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc63, #loc64])
#loc109 = loc(fused[#loc65, #loc62])
#loc110 = loc(fused[#loc66, #loc67])
#loc111 = loc(fused[#loc68, #loc69])
#loc112 = loc(fused[#loc70, #loc71])
#loc113 = loc(fused[#loc72, #loc73])
#loc114 = loc(fused[#loc74, #loc77])
#loc115 = loc(fused[#loc78, #loc73])
