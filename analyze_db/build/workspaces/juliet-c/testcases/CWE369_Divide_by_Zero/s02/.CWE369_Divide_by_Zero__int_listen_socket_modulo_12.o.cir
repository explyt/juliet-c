!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc486)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc487)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc488)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc489)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc490)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc491)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc492)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc493)
  cir.func private @close(!s32i) -> !s32i loc(#loc494)
  cir.func private @printIntLine(!s32i) loc(#loc495)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc496)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc23)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc498)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc499)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc501)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc501)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc504)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc505)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc506)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc507)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc508)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc45)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc506)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc47)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc47)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc507)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc54)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc55)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc56)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc57)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc511)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc62)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc63)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc63)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc513)
                  cir.if %64 {
                    cir.break loc(#loc65)
                  } loc(#loc514)
                } loc(#loc512)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc515)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc68)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc516)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc517)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc73)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc73)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc518)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc76)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc76)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc519)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc80)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc80)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc81)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc520)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc87)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc522)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc523)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc523)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc92)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc93)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc93)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc524)
                  cir.if %68 {
                    cir.break loc(#loc95)
                  } loc(#loc525)
                } loc(#loc521)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc98)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc99)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc100)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc101)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc101)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc527)
                  cir.if %66 {
                    cir.break loc(#loc103)
                  } loc(#loc528)
                } loc(#loc526)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc105)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc106)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc107)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc529)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc113)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc113)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc531)
                  cir.if %64 {
                    cir.break loc(#loc115)
                  } loc(#loc532)
                } loc(#loc530)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc117)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc117)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc118)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc118)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc118)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc118)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc118)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc118)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc118)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc119)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc533)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc120)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc121)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc121)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc534)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc127)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc127)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc536)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc128)
                    cir.yield %66 : !cir.bool loc(#loc128)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc129)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc130)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc537)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc128)
                      cir.yield %70 : !cir.bool loc(#loc128)
                    }, false {
                      %70 = cir.const #false loc(#loc128)
                      cir.yield %70 : !cir.bool loc(#loc128)
                    }) : (!cir.bool) -> !cir.bool loc(#loc128)
                    cir.yield %69 : !cir.bool loc(#loc128)
                  }) : (!cir.bool) -> !cir.bool loc(#loc128)
                  cir.if %65 {
                    cir.break loc(#loc132)
                  } loc(#loc538)
                } loc(#loc535)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc133)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc133)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc135)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc135)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc539)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc136)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc137)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc540)
              } loc(#loc510)
              cir.yield loc(#loc51)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc140)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc140)
              cir.condition(%17) loc(#loc140)
            } loc(#loc509)
          } loc(#loc509)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc144)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc144)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc542)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc147)
            } loc(#loc543)
          } loc(#loc541)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc150)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc151)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc545)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc153)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc154)
            } loc(#loc546)
          } loc(#loc544)
        } loc(#loc503)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc155)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc547)
      } loc(#loc502)
    } loc(#loc500)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc549)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc549)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc159)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc159)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc164)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc551)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc166)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc170)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc553)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc174)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc555)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc176)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc23)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc23)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc177)
          } loc(#loc554)
        } loc(#loc552)
      } loc(#loc550)
    } loc(#loc548)
    cir.return loc(#loc25)
  } loc(#loc497)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc557)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc180)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc558)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc182)
    cir.return loc(#loc179)
  } loc(#loc556)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc560)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc189)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc561)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc563)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc563)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc193)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc193)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc566)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc567)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc568)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc569)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc570)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc205)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc205)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc568)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc207)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc207)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc569)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc214)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc215)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc216)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc217)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc573)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc222)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc223)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc223)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc575)
                  cir.if %64 {
                    cir.break loc(#loc225)
                  } loc(#loc576)
                } loc(#loc574)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc577)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc228)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc578)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc579)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc233)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc233)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc580)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc235)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc235)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc581)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc237)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc237)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc238)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc582)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc243)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc584)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc585)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc585)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc248)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc249)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc249)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc586)
                  cir.if %68 {
                    cir.break loc(#loc251)
                  } loc(#loc587)
                } loc(#loc583)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc254)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc255)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc256)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc257)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc257)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc589)
                  cir.if %66 {
                    cir.break loc(#loc259)
                  } loc(#loc590)
                } loc(#loc588)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc260)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc261)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc262)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc263)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc591)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc268)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc269)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc269)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc593)
                  cir.if %64 {
                    cir.break loc(#loc271)
                  } loc(#loc594)
                } loc(#loc592)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc273)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc273)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc274)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc274)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc274)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc274)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc274)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc274)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc274)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc275)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc275)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc595)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc276)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc277)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc277)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc596)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc283)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc283)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc598)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc284)
                    cir.yield %66 : !cir.bool loc(#loc284)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc285)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc286)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc599)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc284)
                      cir.yield %70 : !cir.bool loc(#loc284)
                    }, false {
                      %70 = cir.const #false loc(#loc284)
                      cir.yield %70 : !cir.bool loc(#loc284)
                    }) : (!cir.bool) -> !cir.bool loc(#loc284)
                    cir.yield %69 : !cir.bool loc(#loc284)
                  }) : (!cir.bool) -> !cir.bool loc(#loc284)
                  cir.if %65 {
                    cir.break loc(#loc288)
                  } loc(#loc600)
                } loc(#loc597)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc289)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc289)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc291)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc291)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc601)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc292)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc293)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc602)
              } loc(#loc572)
              cir.yield loc(#loc211)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc296)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc296)
              cir.condition(%17) loc(#loc296)
            } loc(#loc571)
          } loc(#loc571)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc299)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc300)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc300)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc604)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc302)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc303)
            } loc(#loc605)
          } loc(#loc603)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc306)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc307)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc307)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc607)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc309)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc310)
            } loc(#loc608)
          } loc(#loc606)
        } loc(#loc565)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc610)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc611)
          %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc612)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc613)
          %11 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc614)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc318)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc318)
          cir.store %13, %9 : !s32i, !cir.ptr<!s32i> loc(#loc612)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc320)
          %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc320)
          cir.store %15, %10 : !s32i, !cir.ptr<!s32i> loc(#loc613)
          cir.scope {
            cir.do {
              cir.scope {
                %16 = cir.const #cir.int<2> : !s32i loc(#loc327)
                %17 = cir.const #cir.int<1> : !s32i loc(#loc328)
                %18 = cir.const #cir.int<6> : !s32i loc(#loc329)
                %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc330)
                cir.store %19, %9 : !s32i, !cir.ptr<!s32i> loc(#loc617)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc335)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc336)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc336)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc619)
                  cir.if %64 {
                    cir.break loc(#loc338)
                  } loc(#loc620)
                } loc(#loc618)
                %20 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc621)
                %21 = cir.const #cir.int<0> : !s32i loc(#loc341)
                %22 = cir.const #cir.int<16> : !u64i loc(#loc622)
                cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc623)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc346)
                %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc346)
                %25 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc74)
                cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc624)
                %26 = cir.const #cir.int<0> : !s32i loc(#loc348)
                %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc348)
                %28 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc77)
                %29 = cir.get_member %28[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc78)
                cir.store %27, %29 : !u32i, !cir.ptr<!u32i> loc(#loc625)
                %30 = cir.const #cir.int<27015> : !s32i loc(#loc350)
                %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc350)
                %32 = cir.call @htons(%31) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc351)
                %33 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc82)
                cir.store %32, %33 : !u16i, !cir.ptr<!u16i> loc(#loc626)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc356)
                  %62 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc628)
                  %63 = cir.const #cir.int<16> : !u64i loc(#loc629)
                  %64 = cir.cast(integral, %63 : !u64i), !u32i loc(#loc629)
                  %65 = cir.call @bind(%61, %62, %64) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc361)
                  %66 = cir.const #cir.int<1> : !s32i loc(#loc362)
                  %67 = cir.unary(minus, %66) nsw : !s32i, !s32i loc(#loc362)
                  %68 = cir.cmp(eq, %65, %67) : !s32i, !cir.bool loc(#loc630)
                  cir.if %68 {
                    cir.break loc(#loc364)
                  } loc(#loc631)
                } loc(#loc627)
                cir.scope {
                  %61 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                  %62 = cir.const #cir.int<5> : !s32i loc(#loc368)
                  %63 = cir.call @listen(%61, %62) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc369)
                  %64 = cir.const #cir.int<1> : !s32i loc(#loc370)
                  %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc370)
                  %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc633)
                  cir.if %66 {
                    cir.break loc(#loc372)
                  } loc(#loc634)
                } loc(#loc632)
                %34 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc373)
                %35 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc374)
                %36 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc375)
                %37 = cir.call @accept(%34, %35, %36) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc376)
                cir.store %37, %10 : !s32i, !cir.ptr<!s32i> loc(#loc635)
                cir.scope {
                  %61 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc381)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc382)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc382)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc637)
                  cir.if %64 {
                    cir.break loc(#loc384)
                  } loc(#loc638)
                } loc(#loc636)
                %38 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc385)
                %39 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc386)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc386)
                %41 = cir.const #cir.int<3> : !s32i loc(#loc387)
                %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc387)
                %43 = cir.const #cir.int<4> : !u64i loc(#loc387)
                %44 = cir.binop(mul, %42, %43) : !u64i loc(#loc387)
                %45 = cir.const #cir.int<2> : !s32i loc(#loc387)
                %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc387)
                %47 = cir.binop(add, %44, %46) : !u64i loc(#loc387)
                %48 = cir.const #cir.int<1> : !s32i loc(#loc388)
                %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc388)
                %50 = cir.binop(sub, %47, %49) : !u64i loc(#loc639)
                %51 = cir.const #cir.int<0> : !s32i loc(#loc389)
                %52 = cir.call @recv(%38, %40, %50, %51) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc390)
                %53 = cir.cast(integral, %52 : !s64i), !s32i loc(#loc390)
                cir.store %53, %7 : !s32i, !cir.ptr<!s32i> loc(#loc640)
                cir.scope {
                  %61 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc395)
                  %62 = cir.const #cir.int<1> : !s32i loc(#loc396)
                  %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc396)
                  %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc642)
                  %65 = cir.ternary(%64, true {
                    %66 = cir.const #true loc(#loc397)
                    cir.yield %66 : !cir.bool loc(#loc397)
                  }, false {
                    %66 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc398)
                    %67 = cir.const #cir.int<0> : !s32i loc(#loc399)
                    %68 = cir.cmp(eq, %66, %67) : !s32i, !cir.bool loc(#loc643)
                    %69 = cir.ternary(%68, true {
                      %70 = cir.const #true loc(#loc397)
                      cir.yield %70 : !cir.bool loc(#loc397)
                    }, false {
                      %70 = cir.const #false loc(#loc397)
                      cir.yield %70 : !cir.bool loc(#loc397)
                    }) : (!cir.bool) -> !cir.bool loc(#loc397)
                    cir.yield %69 : !cir.bool loc(#loc397)
                  }) : (!cir.bool) -> !cir.bool loc(#loc397)
                  cir.if %65 {
                    cir.break loc(#loc401)
                  } loc(#loc644)
                } loc(#loc641)
                %54 = cir.const #cir.int<0> : !s32i loc(#loc402)
                %55 = cir.cast(integral, %54 : !s32i), !s8i loc(#loc402)
                %56 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc403)
                %57 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc404)
                %58 = cir.ptr_stride(%57 : !cir.ptr<!s8i>, %56 : !s32i), !cir.ptr<!s8i> loc(#loc404)
                cir.store %55, %58 : !s8i, !cir.ptr<!s8i> loc(#loc645)
                %59 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc405)
                %60 = cir.call @atoi(%59) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc406)
                cir.store %60, %0 : !s32i, !cir.ptr<!s32i> loc(#loc646)
              } loc(#loc616)
              cir.yield loc(#loc324)
            } while {
              %16 = cir.const #cir.int<0> : !s32i loc(#loc409)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc409)
              cir.condition(%17) loc(#loc409)
            } loc(#loc615)
          } loc(#loc615)
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc412)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc413)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc413)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc648)
            cir.if %19 {
              %20 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc415)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc416)
            } loc(#loc649)
          } loc(#loc647)
          cir.scope {
            %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc419)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc420)
            %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc420)
            %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc651)
            cir.if %19 {
              %20 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc422)
              %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc423)
            } loc(#loc652)
          } loc(#loc650)
        } loc(#loc609)
      } loc(#loc564)
    } loc(#loc562)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc654)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc654)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc426)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc426)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc433)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc434)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc657)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc438)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc439)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc659)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc440)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc441)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc441)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc442)
          } loc(#loc658)
        } loc(#loc656)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc445)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc446)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !cir.bool loc(#loc661)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc450)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc451)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc663)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc452)
          } else {
            %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc453)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc453)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc454)
          } loc(#loc662)
        } loc(#loc660)
      } loc(#loc655)
    } loc(#loc653)
    cir.return loc(#loc185)
  } loc(#loc559)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc665)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc459)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc460)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc666)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc668)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc668)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc464)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc464)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc469)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc670)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc471)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc671)
      } loc(#loc669)
    } loc(#loc667)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc673)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc673)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc475)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc475)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc480)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc481)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc675)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc482)
      } else {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc483)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc484)
        %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc676)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc485)
      } loc(#loc674)
    } loc(#loc672)
    cir.return loc(#loc456)
  } loc(#loc664)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc4 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc5 = loc("/usr/include/netinet/in.h":402:1)
#loc6 = loc("/usr/include/netinet/in.h":403:40)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc15 = loc("/usr/include/stdlib.h":105:1)
#loc16 = loc("/usr/include/stdlib.h":106:33)
#loc17 = loc("/usr/include/unistd.h":358:1)
#loc18 = loc("/usr/include/unistd.h":358:27)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":140:23)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":44:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":143:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":46:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":46:9)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":48:13)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":48:12)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":48:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":49:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":125:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":49:8)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":49:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":50:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":120:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":122:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":51:9)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":119:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":56:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":56:17)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":57:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":57:32)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":58:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":58:35)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":59:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":59:35)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":60:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":60:45)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":61:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":104:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":62:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":103:13)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:39)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:48)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:61)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:32)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:17)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":71:72)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":72:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":75:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":72:21)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":72:37)
#loc64 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":73:17)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":74:21)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:24)
#loc67 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:25)
#loc68 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:34)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:37)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:51)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:17)
#loc72 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":76:52)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":77:38)
#loc74 = loc("/usr/include/netinet/in.h":249:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":77:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":78:43)
#loc77 = loc("/usr/include/netinet/in.h":251:20)
#loc78 = loc("/usr/include/netinet/in.h":33:15)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":78:17)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":79:42)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":79:36)
#loc82 = loc("/usr/include/netinet/in.h":250:15)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":79:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":79:50)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:17)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":83:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:26)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:58)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:59)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:68)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:82)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":80:88)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":81:17)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":82:21)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":84:17)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":87:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":84:28)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":84:42)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":84:21)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":84:61)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":85:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":86:21)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:39)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:53)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:59)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:32)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":88:63)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":89:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":92:17)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":89:21)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":89:37)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":90:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":91:21)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:35)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:49)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:62)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:80)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:83)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:30)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:17)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":94:84)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":98:17)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:21)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:35)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:48)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:51)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":95:65)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":96:17)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":97:21)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":100:43)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":100:29)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":100:17)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":102:29)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":102:24)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":102:17)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":102:40)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":104:20)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":105:13)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":108:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":105:17)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":105:33)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":106:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":107:30)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":107:17)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":109:13)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":112:13)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":109:17)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":109:33)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":110:13)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":111:30)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":111:17)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":124:16)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":124:9)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":126:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":142:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":126:8)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":126:33)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":127:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":130:5)
#loc163 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":132:5)
#loc164 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":129:22)
#loc165 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":129:28)
#loc166 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":129:9)
#loc167 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":134:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":141:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":134:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":134:21)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":135:9)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":137:9)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":139:9)
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":136:26)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":136:32)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":136:13)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":140:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":357:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":361:1)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":359:5)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":359:13)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":360:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":360:13)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":152:1)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":325:1)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":154:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":154:9)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":156:13)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":156:12)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":156:5)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":157:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":300:5)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":157:8)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":157:33)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":158:5)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":228:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":230:5)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":159:9)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":227:9)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":164:13)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":164:17)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":165:13)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":165:32)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":166:13)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":166:35)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":167:13)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":167:35)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":168:13)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":168:45)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":169:13)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":212:21)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":170:13)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":211:13)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:39)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:48)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:61)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:32)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:17)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":179:72)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":180:17)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":183:17)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":180:21)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":180:37)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":181:17)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":182:21)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:24)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:25)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:34)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:37)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:51)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:17)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":184:52)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":185:38)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":185:17)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":186:43)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":186:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":187:42)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":187:36)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":187:17)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":187:50)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:17)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":191:17)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:26)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:58)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:59)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:68)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:82)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:21)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":188:88)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":189:17)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":190:21)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":192:17)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":195:17)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":192:28)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":192:42)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":192:21)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":192:61)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":193:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":194:21)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:39)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:53)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:59)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:32)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:17)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":196:63)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":197:17)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":200:17)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":197:21)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":197:37)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":198:17)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":199:21)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:35)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:49)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:62)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:80)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:83)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:30)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:17)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":202:84)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:17)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":206:17)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:21)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:35)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:48)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:51)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":203:65)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":204:17)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":205:21)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":208:43)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":208:29)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":208:17)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":210:29)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":210:24)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":210:17)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":210:40)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":212:20)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":213:13)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":216:13)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":213:17)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":213:33)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":214:13)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":215:30)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":215:17)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":217:13)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":220:13)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":217:17)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":217:33)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":218:13)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":219:30)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":219:17)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":231:9)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":299:9)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":236:13)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":236:17)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":237:13)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":237:32)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":238:13)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":238:35)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":239:13)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":239:35)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":240:13)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":240:45)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":241:13)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":284:21)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":242:13)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":283:13)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:39)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:48)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:61)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:32)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:17)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":251:72)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":252:17)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":255:17)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":252:21)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":252:37)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":253:17)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":254:21)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:24)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:25)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:34)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:37)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:51)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:17)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":256:52)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":257:38)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":257:17)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":258:43)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":258:17)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":259:42)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":259:36)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":259:17)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":259:50)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:17)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":263:17)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:26)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:58)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:59)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:68)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:82)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:21)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":260:88)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":261:17)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":262:21)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":264:17)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":267:17)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":264:28)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":264:42)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":264:21)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":264:61)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":265:17)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":266:21)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:39)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:53)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:59)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:32)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:17)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":268:63)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":269:17)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":272:17)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":269:21)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":269:37)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":270:17)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":271:21)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:35)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:49)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:62)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:80)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:83)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:30)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:17)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":274:84)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:17)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":278:17)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:21)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:35)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:48)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:51)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":275:65)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":276:17)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":277:21)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":280:43)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":280:29)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":280:17)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":282:29)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":282:24)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":282:17)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":282:40)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":284:20)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":285:13)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":288:13)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":285:17)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":285:33)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":286:13)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":287:30)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":287:17)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":289:13)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":292:13)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":289:17)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":289:33)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":290:13)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":291:30)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":291:17)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":301:5)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":324:5)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":301:8)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":301:33)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":302:5)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":312:5)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":314:5)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":304:9)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":311:9)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":304:13)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":304:21)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":305:9)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":307:9)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":309:9)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":306:26)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":306:32)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":306:13)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":310:23)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":310:13)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":316:9)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":323:9)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":316:13)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":316:21)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":317:9)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":319:9)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":321:9)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":318:26)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":318:32)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":318:13)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":322:23)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":322:13)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":330:1)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":355:1)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":332:5)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":332:9)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":334:13)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":334:12)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":334:5)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":335:5)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":344:5)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":335:8)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":335:33)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":336:5)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":339:5)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":341:5)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":338:16)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":338:9)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":343:16)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":343:9)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":345:5)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":354:5)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":345:8)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":345:33)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":346:5)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":349:5)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":351:5)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":348:22)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":348:28)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":348:9)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":353:22)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":353:28)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_12.c":353:9)
#loc486 = loc(fused[#loc1, #loc2])
#loc487 = loc(fused[#loc3, #loc4])
#loc488 = loc(fused[#loc5, #loc6])
#loc489 = loc(fused[#loc7, #loc8])
#loc490 = loc(fused[#loc9, #loc10])
#loc491 = loc(fused[#loc11, #loc12])
#loc492 = loc(fused[#loc13, #loc14])
#loc493 = loc(fused[#loc15, #loc16])
#loc494 = loc(fused[#loc17, #loc18])
#loc495 = loc(fused[#loc19, #loc20])
#loc496 = loc(fused[#loc21, #loc22])
#loc497 = loc(fused[#loc24, #loc25])
#loc498 = loc(fused[#loc26, #loc27])
#loc499 = loc(fused[#loc30, #loc28])
#loc500 = loc(fused[#loc31, #loc32])
#loc501 = loc(fused[#loc33, #loc34])
#loc502 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc503 = loc(fused[#loc38, #loc39])
#loc504 = loc(fused[#loc40, #loc41])
#loc505 = loc(fused[#loc42, #loc43])
#loc506 = loc(fused[#loc44, #loc45])
#loc507 = loc(fused[#loc46, #loc47])
#loc508 = loc(fused[#loc48, #loc49])
#loc509 = loc(fused[#loc50, #loc51])
#loc510 = loc(fused[#loc52, #loc53])
#loc511 = loc(fused[#loc58, #loc59])
#loc512 = loc(fused[#loc60, #loc61])
#loc513 = loc(fused[#loc62, #loc63])
#loc514 = loc(fused[#loc64, #loc61])
#loc515 = loc(fused[#loc66, #loc67])
#loc516 = loc(fused[#loc69, #loc70])
#loc517 = loc(fused[#loc71, #loc72])
#loc518 = loc(fused[#loc75, #loc73])
#loc519 = loc(fused[#loc79, #loc76])
#loc520 = loc(fused[#loc83, #loc84])
#loc521 = loc(fused[#loc85, #loc86])
#loc522 = loc(fused[#loc88, #loc89])
#loc523 = loc(fused[#loc90, #loc91])
#loc524 = loc(fused[#loc92, #loc93])
#loc525 = loc(fused[#loc94, #loc86])
#loc526 = loc(fused[#loc96, #loc97])
#loc527 = loc(fused[#loc100, #loc101])
#loc528 = loc(fused[#loc102, #loc97])
#loc529 = loc(fused[#loc108, #loc109])
#loc530 = loc(fused[#loc110, #loc111])
#loc531 = loc(fused[#loc112, #loc113])
#loc532 = loc(fused[#loc114, #loc111])
#loc533 = loc(fused[#loc118, #loc119])
#loc534 = loc(fused[#loc122, #loc123])
#loc535 = loc(fused[#loc124, #loc125])
#loc536 = loc(fused[#loc126, #loc127])
#loc537 = loc(fused[#loc129, #loc130])
#loc538 = loc(fused[#loc131, #loc125])
#loc539 = loc(fused[#loc135, #loc133])
#loc540 = loc(fused[#loc138, #loc139])
#loc541 = loc(fused[#loc141, #loc142])
#loc542 = loc(fused[#loc143, #loc144])
#loc543 = loc(fused[#loc145, #loc142])
#loc544 = loc(fused[#loc148, #loc149])
#loc545 = loc(fused[#loc150, #loc151])
#loc546 = loc(fused[#loc152, #loc149])
#loc547 = loc(fused[#loc156, #loc155])
#loc548 = loc(fused[#loc157, #loc158])
#loc549 = loc(fused[#loc159, #loc160])
#loc550 = loc(fused[#loc161, #loc162, #loc163, #loc158])
#loc551 = loc(fused[#loc164, #loc165])
#loc552 = loc(fused[#loc167, #loc168])
#loc553 = loc(fused[#loc169, #loc170])
#loc554 = loc(fused[#loc171, #loc172, #loc173, #loc168])
#loc555 = loc(fused[#loc174, #loc175])
#loc556 = loc(fused[#loc178, #loc179])
#loc557 = loc(fused[#loc180, #loc181])
#loc558 = loc(fused[#loc182, #loc183])
#loc559 = loc(fused[#loc184, #loc185])
#loc560 = loc(fused[#loc186, #loc187])
#loc561 = loc(fused[#loc190, #loc188])
#loc562 = loc(fused[#loc191, #loc192])
#loc563 = loc(fused[#loc193, #loc194])
#loc564 = loc(fused[#loc195, #loc196, #loc197, #loc192])
#loc565 = loc(fused[#loc198, #loc199])
#loc566 = loc(fused[#loc200, #loc201])
#loc567 = loc(fused[#loc202, #loc203])
#loc568 = loc(fused[#loc204, #loc205])
#loc569 = loc(fused[#loc206, #loc207])
#loc570 = loc(fused[#loc208, #loc209])
#loc571 = loc(fused[#loc210, #loc211])
#loc572 = loc(fused[#loc212, #loc213])
#loc573 = loc(fused[#loc218, #loc219])
#loc574 = loc(fused[#loc220, #loc221])
#loc575 = loc(fused[#loc222, #loc223])
#loc576 = loc(fused[#loc224, #loc221])
#loc577 = loc(fused[#loc226, #loc227])
#loc578 = loc(fused[#loc229, #loc230])
#loc579 = loc(fused[#loc231, #loc232])
#loc580 = loc(fused[#loc234, #loc233])
#loc581 = loc(fused[#loc236, #loc235])
#loc582 = loc(fused[#loc239, #loc240])
#loc583 = loc(fused[#loc241, #loc242])
#loc584 = loc(fused[#loc244, #loc245])
#loc585 = loc(fused[#loc246, #loc247])
#loc586 = loc(fused[#loc248, #loc249])
#loc587 = loc(fused[#loc250, #loc242])
#loc588 = loc(fused[#loc252, #loc253])
#loc589 = loc(fused[#loc256, #loc257])
#loc590 = loc(fused[#loc258, #loc253])
#loc591 = loc(fused[#loc264, #loc265])
#loc592 = loc(fused[#loc266, #loc267])
#loc593 = loc(fused[#loc268, #loc269])
#loc594 = loc(fused[#loc270, #loc267])
#loc595 = loc(fused[#loc274, #loc275])
#loc596 = loc(fused[#loc278, #loc279])
#loc597 = loc(fused[#loc280, #loc281])
#loc598 = loc(fused[#loc282, #loc283])
#loc599 = loc(fused[#loc285, #loc286])
#loc600 = loc(fused[#loc287, #loc281])
#loc601 = loc(fused[#loc291, #loc289])
#loc602 = loc(fused[#loc294, #loc295])
#loc603 = loc(fused[#loc297, #loc298])
#loc604 = loc(fused[#loc299, #loc300])
#loc605 = loc(fused[#loc301, #loc298])
#loc606 = loc(fused[#loc304, #loc305])
#loc607 = loc(fused[#loc306, #loc307])
#loc608 = loc(fused[#loc308, #loc305])
#loc609 = loc(fused[#loc311, #loc312])
#loc610 = loc(fused[#loc313, #loc314])
#loc611 = loc(fused[#loc315, #loc316])
#loc612 = loc(fused[#loc317, #loc318])
#loc613 = loc(fused[#loc319, #loc320])
#loc614 = loc(fused[#loc321, #loc322])
#loc615 = loc(fused[#loc323, #loc324])
#loc616 = loc(fused[#loc325, #loc326])
#loc617 = loc(fused[#loc331, #loc332])
#loc618 = loc(fused[#loc333, #loc334])
#loc619 = loc(fused[#loc335, #loc336])
#loc620 = loc(fused[#loc337, #loc334])
#loc621 = loc(fused[#loc339, #loc340])
#loc622 = loc(fused[#loc342, #loc343])
#loc623 = loc(fused[#loc344, #loc345])
#loc624 = loc(fused[#loc347, #loc346])
#loc625 = loc(fused[#loc349, #loc348])
#loc626 = loc(fused[#loc352, #loc353])
#loc627 = loc(fused[#loc354, #loc355])
#loc628 = loc(fused[#loc357, #loc358])
#loc629 = loc(fused[#loc359, #loc360])
#loc630 = loc(fused[#loc361, #loc362])
#loc631 = loc(fused[#loc363, #loc355])
#loc632 = loc(fused[#loc365, #loc366])
#loc633 = loc(fused[#loc369, #loc370])
#loc634 = loc(fused[#loc371, #loc366])
#loc635 = loc(fused[#loc377, #loc378])
#loc636 = loc(fused[#loc379, #loc380])
#loc637 = loc(fused[#loc381, #loc382])
#loc638 = loc(fused[#loc383, #loc380])
#loc639 = loc(fused[#loc387, #loc388])
#loc640 = loc(fused[#loc391, #loc392])
#loc641 = loc(fused[#loc393, #loc394])
#loc642 = loc(fused[#loc395, #loc396])
#loc643 = loc(fused[#loc398, #loc399])
#loc644 = loc(fused[#loc400, #loc394])
#loc645 = loc(fused[#loc404, #loc402])
#loc646 = loc(fused[#loc407, #loc408])
#loc647 = loc(fused[#loc410, #loc411])
#loc648 = loc(fused[#loc412, #loc413])
#loc649 = loc(fused[#loc414, #loc411])
#loc650 = loc(fused[#loc417, #loc418])
#loc651 = loc(fused[#loc419, #loc420])
#loc652 = loc(fused[#loc421, #loc418])
#loc653 = loc(fused[#loc424, #loc425])
#loc654 = loc(fused[#loc426, #loc427])
#loc655 = loc(fused[#loc428, #loc429, #loc430, #loc425])
#loc656 = loc(fused[#loc431, #loc432])
#loc657 = loc(fused[#loc433, #loc434])
#loc658 = loc(fused[#loc435, #loc436, #loc437, #loc432])
#loc659 = loc(fused[#loc438, #loc439])
#loc660 = loc(fused[#loc443, #loc444])
#loc661 = loc(fused[#loc445, #loc446])
#loc662 = loc(fused[#loc447, #loc448, #loc449, #loc444])
#loc663 = loc(fused[#loc450, #loc451])
#loc664 = loc(fused[#loc455, #loc456])
#loc665 = loc(fused[#loc457, #loc458])
#loc666 = loc(fused[#loc461, #loc459])
#loc667 = loc(fused[#loc462, #loc463])
#loc668 = loc(fused[#loc464, #loc465])
#loc669 = loc(fused[#loc466, #loc467, #loc468, #loc463])
#loc670 = loc(fused[#loc470, #loc469])
#loc671 = loc(fused[#loc472, #loc471])
#loc672 = loc(fused[#loc473, #loc474])
#loc673 = loc(fused[#loc475, #loc476])
#loc674 = loc(fused[#loc477, #loc478, #loc479, #loc474])
#loc675 = loc(fused[#loc480, #loc481])
#loc676 = loc(fused[#loc483, #loc484])
