!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc1)
  cir.func private @printDoubleLine(!cir.double) loc(#loc51)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc53)
    cir.br ^bb1 loc(#loc54)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc10)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc12)
    %4 = cir.cast(int_to_float, %3 : !s32i), !cir.double loc(#loc12)
    %5 = cir.call @sqrt(%4) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc10)
    cir.store %5, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc55)
    %6 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc15)
    cir.call @printDoubleLine(%6) : (!cir.double) -> () loc(#loc16)
    cir.br ^bb2 loc(#loc9)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc5)
  } loc(#loc52)
  cir.func no_proto @CWE391_Unchecked_Error_Condition__sqrt_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc57)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc18)
  } loc(#loc56)
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc58)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc25)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc60)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc62)
    cir.br ^bb1 loc(#loc63)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %2 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc35)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    %3 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc36)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc38)
    %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc38)
    %7 = cir.call @sqrt(%6) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc36)
    cir.store %7, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc65)
    cir.br ^bb2 loc(#loc66)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc43)
    %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    %10 = cir.const #cir.int<33> : !s32i loc(#loc44)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc67)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc68)
  ^bb3:  // pred: ^bb2
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc25)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc25)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc47)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc48)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc42)
  ^bb5:  // pred: ^bb4
    %16 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc49)
    cir.call @printDoubleLine(%16) : (!cir.double) -> () loc(#loc50)
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc29)
  } loc(#loc61)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE391_Unchecked_Error_Condition/CWE391_Unchecked_Error_Condition__sqrt_01.c":0:0)
#loc1 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc4 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":24:1)
#loc5 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":32:1)
#loc6 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":27:9)
#loc7 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":27:16)
#loc8 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":26:5)
#loc9 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":31:5)
#loc10 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":28:32)
#loc11 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":28:46)
#loc12 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":28:45)
#loc13 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":28:9)
#loc14 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":28:47)
#loc15 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":30:25)
#loc16 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":30:9)
#loc17 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":54:1)
#loc18 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":57:1)
#loc19 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":56:5)
#loc20 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":56:11)
#loc21 = loc("/usr/include/errno.h":37:1)
#loc22 = loc("/usr/include/errno.h":37:45)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc24 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc25 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":47:23)
#loc26 = loc("/usr/include/stdlib.h":756:1)
#loc27 = loc("/usr/include/stdlib.h":756:70)
#loc28 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":38:1)
#loc29 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":52:1)
#loc30 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":41:9)
#loc31 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":41:16)
#loc32 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":40:5)
#loc33 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":51:5)
#loc34 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":42:17)
#loc35 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":42:9)
#loc36 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":43:32)
#loc37 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":43:46)
#loc38 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":43:45)
#loc39 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":43:9)
#loc40 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":43:47)
#loc41 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":45:9)
#loc42 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":49:9)
#loc43 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":45:13)
#loc44 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":45:22)
#loc45 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":46:9)
#loc46 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":47:13)
#loc47 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":48:13)
#loc48 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":48:18)
#loc49 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":50:25)
#loc50 = loc("CWE391_Unchecked_Error_Condition__sqrt_01.c":50:9)
#loc51 = loc(fused[#loc2, #loc3])
#loc52 = loc(fused[#loc4, #loc5])
#loc53 = loc(fused[#loc6, #loc7])
#loc54 = loc(fused[#loc8, #loc9])
#loc55 = loc(fused[#loc13, #loc14])
#loc56 = loc(fused[#loc17, #loc18])
#loc57 = loc(fused[#loc19, #loc20])
#loc58 = loc(fused[#loc21, #loc22])
#loc59 = loc(fused[#loc23, #loc24])
#loc60 = loc(fused[#loc26, #loc27])
#loc61 = loc(fused[#loc28, #loc29])
#loc62 = loc(fused[#loc30, #loc31])
#loc63 = loc(fused[#loc32, #loc33])
#loc64 = loc(fused[#loc35, #loc34])
#loc65 = loc(fused[#loc39, #loc40])
#loc66 = loc(fused[#loc41, #loc42])
#loc67 = loc(fused[#loc43, #loc44])
#loc68 = loc(fused[#loc45, #loc42])
