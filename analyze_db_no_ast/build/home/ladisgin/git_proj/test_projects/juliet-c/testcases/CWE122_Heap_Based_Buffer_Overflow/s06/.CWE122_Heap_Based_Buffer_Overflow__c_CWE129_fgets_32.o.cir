!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc333)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc334)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc335)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc336)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc337)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc338)
  cir.func private  @printIntLine(!s32i) loc(#loc339)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc340)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc342)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc343)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc344)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc343)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc344)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc28)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc347)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc347)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc349)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc349)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc349)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc42)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc42)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc42)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc42)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc42)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc42)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc42)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc42)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc334)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc43)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc44)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc351)
          %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc46)
          cir.if %27 {
            %28 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc50)
            %29 = cir.call @atoi(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc51)
            cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc353)
          } else {
            %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc54)
          } loc(#loc352)
        } loc(#loc350)
      } loc(#loc348)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc56)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    } loc(#loc346)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc356)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc61)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc62)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc356)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc358)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc359)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc70)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc70)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc360)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc361)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc362)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc359)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc76)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc364)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc77)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc79)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc80)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc81)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc79)
          } loc(#loc365)
        } loc(#loc363)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc84)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc367)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc87)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc368)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc88)
            cir.condition(%24) loc(#loc88)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc90)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc93)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc370)
            } loc(#loc369)
            cir.yield loc(#loc83)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc95)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc371)
            cir.yield loc(#loc366)
          } loc(#loc366)
        } loc(#loc366)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc99)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc373)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc100)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc104)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc105)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc107)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc375)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc110)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc377)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc113)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc378)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc114)
                cir.condition(%32) loc(#loc114)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc116)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc118)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc119)
                } loc(#loc379)
                cir.yield loc(#loc109)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc121)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc380)
                cir.yield loc(#loc376)
              } loc(#loc376)
            } loc(#loc376)
          } else {
            %24 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc122)
          } loc(#loc374)
        } loc(#loc372)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc123)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc124)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc123)
      } loc(#loc357)
    } loc(#loc355)
    cir.return loc(#loc20)
  } loc(#loc341)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc382)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc127)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc383)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc129)
    cir.return loc(#loc126)
  } loc(#loc381)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc385)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc386)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc387)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc386)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc387)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc140)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc388)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc390)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc146)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc390)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc147)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc391)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc149)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc392)
    } loc(#loc389)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc394)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc394)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc396)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc397)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc163)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc164)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc164)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc398)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc399)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc400)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc397)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc169)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc170)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc170)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc402)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc171)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc173)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc174)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc175)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc173)
          } loc(#loc403)
        } loc(#loc401)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc178)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc405)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc180)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc181)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc406)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc182)
            cir.condition(%24) loc(#loc182)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc184)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc186)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc187)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc408)
            } loc(#loc407)
            cir.yield loc(#loc177)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc188)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc189)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc409)
            cir.yield loc(#loc404)
          } loc(#loc404)
        } loc(#loc404)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc193)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc411)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc194)
          cir.if %23 {
            %24 = cir.const #cir.int<1> : !s32i loc(#loc198)
            %25 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
            %26 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc201)
            cir.store %24, %27 : !s32i, !cir.ptr<!s32i> loc(#loc413)
            cir.scope {
              %28 = cir.const #cir.int<0> : !s32i loc(#loc204)
              cir.store %28, %8 : !s32i, !cir.ptr<!s32i> loc(#loc415)
              cir.for : cond {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc206)
                %30 = cir.const #cir.int<10> : !s32i loc(#loc207)
                %31 = cir.cmp(lt, %29, %30) : !s32i, !s32i loc(#loc416)
                %32 = cir.cast(int_to_bool, %31 : !s32i), !cir.bool loc(#loc208)
                cir.condition(%32) loc(#loc208)
              } body {
                cir.scope {
                  %29 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc210)
                  %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc211)
                  %31 = cir.ptr_stride(%29 : !cir.ptr<!s32i>, %30 : !s32i), !cir.ptr<!s32i> loc(#loc212)
                  %32 = cir.load %31 : !cir.ptr<!s32i>, !s32i loc(#loc210)
                  cir.call @printIntLine(%32) : (!s32i) -> () loc(#loc213)
                } loc(#loc417)
                cir.yield loc(#loc203)
              } step {
                %29 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                %30 = cir.unary(inc, %29) : !s32i, !s32i loc(#loc215)
                cir.store %30, %8 : !s32i, !cir.ptr<!s32i> loc(#loc418)
                cir.yield loc(#loc414)
              } loc(#loc414)
            } loc(#loc414)
          } else {
            %24 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc216)
            %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc216)
            cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc217)
          } loc(#loc412)
        } loc(#loc410)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc218)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc219)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc219)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc218)
      } loc(#loc395)
    } loc(#loc393)
    cir.return loc(#loc132)
  } loc(#loc384)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc220)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc420)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc421)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc422)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc421)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc422)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc229)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc230)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc423)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc425)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc235)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc236)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc425)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc427)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc427)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc427)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc243)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc244)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc244)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc244)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc244)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc244)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc244)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc244)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc244)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc334)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc245)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc246)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc247)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc247)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc429)
          %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc248)
          cir.if %27 {
            %28 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc252)
            %29 = cir.call @atoi(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc253)
            cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc431)
          } else {
            %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc256)
            %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc256)
            cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc257)
          } loc(#loc430)
        } loc(#loc428)
      } loc(#loc426)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc258)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc259)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc432)
    } loc(#loc424)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc434)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc265)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc434)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc436)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc437)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc272)
        %11 = cir.const #cir.int<10> : !s32i loc(#loc273)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc273)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc438)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc439)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc272)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc440)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc437)
        cir.scope {
          %20 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc278)
          %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc279)
          %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc279)
          %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !s32i loc(#loc442)
          %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc280)
          cir.if %24 {
            %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc282)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc283)
            %27 = cir.unary(minus, %26) : !s32i, !s32i loc(#loc284)
            cir.call @exit(%27) : (!s32i) -> () extra(#fn_attr) loc(#loc282)
          } loc(#loc443)
        } loc(#loc441)
        cir.scope {
          %20 = cir.const #cir.int<0> : !s32i loc(#loc287)
          cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc445)
          cir.for : cond {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc289)
            %22 = cir.const #cir.int<10> : !s32i loc(#loc290)
            %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc446)
            %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc291)
            cir.condition(%24) loc(#loc291)
          } body {
            cir.scope {
              %21 = cir.const #cir.int<0> : !s32i loc(#loc293)
              %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc294)
              %23 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc296)
              cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc448)
            } loc(#loc447)
            cir.yield loc(#loc286)
          } step {
            %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc297)
            %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc298)
            cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc449)
            cir.yield loc(#loc444)
          } loc(#loc444)
        } loc(#loc444)
        cir.scope {
          %20 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
          %21 = cir.const #cir.int<0> : !s32i loc(#loc302)
          %22 = cir.cmp(ge, %20, %21) : !s32i, !s32i loc(#loc451)
          %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc303)
          %24 = cir.ternary(%23, true {
            %25 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc305)
            %26 = cir.const #cir.int<10> : !s32i loc(#loc306)
            %27 = cir.cmp(lt, %25, %26) : !s32i, !s32i loc(#loc452)
            %28 = cir.cast(int_to_bool, %27 : !s32i), !cir.bool loc(#loc308)
            %29 = cir.ternary(%28, true {
              %30 = cir.const #true loc(#loc304)
              cir.yield %30 : !cir.bool loc(#loc304)
            }, false {
              %30 = cir.const #false loc(#loc304)
              cir.yield %30 : !cir.bool loc(#loc304)
            }) : (!cir.bool) -> !cir.bool loc(#loc304)
            cir.yield %29 : !cir.bool loc(#loc304)
          }, false {
            %25 = cir.const #false loc(#loc304)
            cir.yield %25 : !cir.bool loc(#loc304)
          }) : (!cir.bool) -> !cir.bool loc(#loc304)
          cir.if %24 {
            %25 = cir.const #cir.int<1> : !s32i loc(#loc312)
            %26 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc313)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc314)
            %28 = cir.ptr_stride(%26 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc315)
            cir.store %25, %28 : !s32i, !cir.ptr<!s32i> loc(#loc454)
            cir.scope {
              %29 = cir.const #cir.int<0> : !s32i loc(#loc318)
              cir.store %29, %8 : !s32i, !cir.ptr<!s32i> loc(#loc456)
              cir.for : cond {
                %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc320)
                %31 = cir.const #cir.int<10> : !s32i loc(#loc321)
                %32 = cir.cmp(lt, %30, %31) : !s32i, !s32i loc(#loc457)
                %33 = cir.cast(int_to_bool, %32 : !s32i), !cir.bool loc(#loc322)
                cir.condition(%33) loc(#loc322)
              } body {
                cir.scope {
                  %30 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc324)
                  %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc325)
                  %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !s32i), !cir.ptr<!s32i> loc(#loc326)
                  %33 = cir.load %32 : !cir.ptr<!s32i>, !s32i loc(#loc324)
                  cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc327)
                } loc(#loc458)
                cir.yield loc(#loc317)
              } step {
                %30 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc328)
                %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc329)
                cir.store %31, %8 : !s32i, !cir.ptr<!s32i> loc(#loc459)
                cir.yield loc(#loc455)
              } loc(#loc455)
            } loc(#loc455)
          } else {
            %25 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc220)
            %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc220)
            cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc330)
          } loc(#loc453)
        } loc(#loc450)
        %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc331)
        %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc332)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc332)
        cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc331)
      } loc(#loc435)
    } loc(#loc433)
    cir.return loc(#loc222)
  } loc(#loc419)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":43:27)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":72:27)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":77:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":27:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":27:22)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":28:22)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":30:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":31:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":47:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:9)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":32:20)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":45:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":34:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":34:49)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":44:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:23)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:36)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:53)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:17)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:63)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":36:60)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":37:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":40:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":42:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:29)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:24)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:17)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":39:40)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":43:17)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:10)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":46:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":48:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":76:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":49:20)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":50:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":75:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":51:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":51:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:58)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:35)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:42)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:47)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":52:57)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:43)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:27)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:40)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":53:39)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:13)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":58:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:18)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:29)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":56:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:29)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":57:25)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:34)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":55:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":73:13)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:25)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":61:22)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":62:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":69:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":71:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":63:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":68:17)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:25)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:28)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:32)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:30)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":66:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:41)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:42)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":67:21)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:37)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":65:36)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":72:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":74:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":74:18)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":184:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":188:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":186:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":186:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":187:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":187:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":84:1)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":127:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":86:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":86:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":87:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":87:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":88:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":88:22)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:12)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":90:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":91:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":97:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:21)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":92:20)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":95:16)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":95:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:21)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:10)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":96:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":98:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":126:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:21)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":99:20)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":100:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":125:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":101:13)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":101:17)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:58)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:35)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:42)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:47)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":102:57)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:17)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:24)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:33)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:34)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:40)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":103:39)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:13)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":108:13)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:22)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:18)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:25)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:29)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:27)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":106:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:29)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:17)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:24)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":107:25)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:34)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":105:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:13)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":123:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:17)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:25)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":111:22)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":112:13)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":119:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":121:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:32)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":113:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":118:17)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:28)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:32)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:30)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":116:17)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:34)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:41)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:42)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":117:21)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:37)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":115:36)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":122:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":122:17)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":124:13)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":124:18)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":177:27)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":130:1)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":182:1)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":132:5)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":132:9)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":133:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":133:22)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":134:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":134:22)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:12)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":136:5)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":137:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":153:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:9)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:21)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":138:20)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":139:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":151:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":140:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":140:49)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:13)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":150:13)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:23)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:36)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:53)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:17)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:63)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":142:60)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":143:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":146:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":148:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:29)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:24)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:17)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":145:40)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":149:27)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":149:17)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:21)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:10)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":152:9)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":154:5)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":181:5)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:9)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:21)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":155:20)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":156:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":180:9)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":157:13)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":157:17)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:13)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:58)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:35)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:42)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:47)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":158:57)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:13)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:43)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:17)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:27)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:24)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:33)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:34)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:40)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":159:39)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":164:13)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:22)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:18)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:25)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:29)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:27)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":162:13)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:29)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:17)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:24)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":163:25)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:34)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":161:33)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:13)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":178:13)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:17)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:25)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:22)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:27)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:30)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:38)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:40)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":166:35)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":167:13)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":174:13)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":176:13)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:32)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:17)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:24)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":168:28)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:17)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":173:17)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:25)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:21)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:28)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:32)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:30)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":171:17)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:34)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:41)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:42)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":172:21)
#loc328 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:37)
#loc329 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":170:36)
#loc330 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":177:17)
#loc331 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":179:13)
#loc332 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_32.c":179:18)
#loc333 = loc(fused[#loc1, #loc2])
#loc334 = loc(fused[#loc3, #loc4])
#loc335 = loc(fused[#loc5, #loc6])
#loc336 = loc(fused[#loc7, #loc8])
#loc337 = loc(fused[#loc10, #loc11])
#loc338 = loc(fused[#loc12, #loc13])
#loc339 = loc(fused[#loc14, #loc15])
#loc340 = loc(fused[#loc17, #loc18])
#loc341 = loc(fused[#loc19, #loc20])
#loc342 = loc(fused[#loc21, #loc22])
#loc343 = loc(fused[#loc23, #loc24])
#loc344 = loc(fused[#loc25, #loc26])
#loc345 = loc(fused[#loc29, #loc27])
#loc346 = loc(fused[#loc30, #loc31])
#loc347 = loc(fused[#loc32, #loc33])
#loc348 = loc(fused[#loc35, #loc36])
#loc349 = loc(fused[#loc37, #loc38])
#loc350 = loc(fused[#loc39, #loc40])
#loc351 = loc(fused[#loc44, #loc45])
#loc352 = loc(fused[#loc47, #loc48, #loc49, #loc40])
#loc353 = loc(fused[#loc52, #loc53])
#loc354 = loc(fused[#loc57, #loc55])
#loc355 = loc(fused[#loc58, #loc59])
#loc356 = loc(fused[#loc60, #loc61])
#loc357 = loc(fused[#loc63, #loc64])
#loc358 = loc(fused[#loc65, #loc66])
#loc359 = loc(fused[#loc67, #loc68])
#loc360 = loc(fused[#loc71, #loc72])
#loc361 = loc(fused[#loc70, #loc72])
#loc362 = loc(fused[#loc69, #loc68])
#loc363 = loc(fused[#loc73, #loc74])
#loc364 = loc(fused[#loc75, #loc76])
#loc365 = loc(fused[#loc78, #loc74])
#loc366 = loc(fused[#loc82, #loc83])
#loc367 = loc(fused[#loc85, #loc84])
#loc368 = loc(fused[#loc86, #loc87])
#loc369 = loc(fused[#loc89, #loc83])
#loc370 = loc(fused[#loc91, #loc90])
#loc371 = loc(fused[#loc95, #loc94])
#loc372 = loc(fused[#loc96, #loc97])
#loc373 = loc(fused[#loc98, #loc99])
#loc374 = loc(fused[#loc101, #loc102, #loc103, #loc97])
#loc375 = loc(fused[#loc105, #loc104])
#loc376 = loc(fused[#loc108, #loc109])
#loc377 = loc(fused[#loc111, #loc110])
#loc378 = loc(fused[#loc112, #loc113])
#loc379 = loc(fused[#loc115, #loc109])
#loc380 = loc(fused[#loc121, #loc120])
#loc381 = loc(fused[#loc125, #loc126])
#loc382 = loc(fused[#loc127, #loc128])
#loc383 = loc(fused[#loc129, #loc130])
#loc384 = loc(fused[#loc131, #loc132])
#loc385 = loc(fused[#loc133, #loc134])
#loc386 = loc(fused[#loc135, #loc136])
#loc387 = loc(fused[#loc137, #loc138])
#loc388 = loc(fused[#loc141, #loc139])
#loc389 = loc(fused[#loc142, #loc143])
#loc390 = loc(fused[#loc144, #loc145])
#loc391 = loc(fused[#loc148, #loc147])
#loc392 = loc(fused[#loc151, #loc149])
#loc393 = loc(fused[#loc152, #loc153])
#loc394 = loc(fused[#loc154, #loc155])
#loc395 = loc(fused[#loc157, #loc158])
#loc396 = loc(fused[#loc159, #loc160])
#loc397 = loc(fused[#loc161, #loc162])
#loc398 = loc(fused[#loc165, #loc166])
#loc399 = loc(fused[#loc164, #loc166])
#loc400 = loc(fused[#loc163, #loc162])
#loc401 = loc(fused[#loc167, #loc168])
#loc402 = loc(fused[#loc169, #loc170])
#loc403 = loc(fused[#loc172, #loc168])
#loc404 = loc(fused[#loc176, #loc177])
#loc405 = loc(fused[#loc179, #loc178])
#loc406 = loc(fused[#loc180, #loc181])
#loc407 = loc(fused[#loc183, #loc177])
#loc408 = loc(fused[#loc185, #loc184])
#loc409 = loc(fused[#loc189, #loc188])
#loc410 = loc(fused[#loc190, #loc191])
#loc411 = loc(fused[#loc192, #loc193])
#loc412 = loc(fused[#loc195, #loc196, #loc197, #loc191])
#loc413 = loc(fused[#loc199, #loc198])
#loc414 = loc(fused[#loc202, #loc203])
#loc415 = loc(fused[#loc205, #loc204])
#loc416 = loc(fused[#loc206, #loc207])
#loc417 = loc(fused[#loc209, #loc203])
#loc418 = loc(fused[#loc215, #loc214])
#loc419 = loc(fused[#loc221, #loc222])
#loc420 = loc(fused[#loc223, #loc224])
#loc421 = loc(fused[#loc225, #loc226])
#loc422 = loc(fused[#loc227, #loc228])
#loc423 = loc(fused[#loc231, #loc229])
#loc424 = loc(fused[#loc232, #loc233])
#loc425 = loc(fused[#loc234, #loc235])
#loc426 = loc(fused[#loc237, #loc238])
#loc427 = loc(fused[#loc239, #loc240])
#loc428 = loc(fused[#loc241, #loc242])
#loc429 = loc(fused[#loc246, #loc247])
#loc430 = loc(fused[#loc249, #loc250, #loc251, #loc242])
#loc431 = loc(fused[#loc254, #loc255])
#loc432 = loc(fused[#loc260, #loc258])
#loc433 = loc(fused[#loc261, #loc262])
#loc434 = loc(fused[#loc263, #loc264])
#loc435 = loc(fused[#loc266, #loc267])
#loc436 = loc(fused[#loc268, #loc269])
#loc437 = loc(fused[#loc270, #loc271])
#loc438 = loc(fused[#loc274, #loc275])
#loc439 = loc(fused[#loc273, #loc275])
#loc440 = loc(fused[#loc272, #loc271])
#loc441 = loc(fused[#loc276, #loc277])
#loc442 = loc(fused[#loc278, #loc279])
#loc443 = loc(fused[#loc281, #loc277])
#loc444 = loc(fused[#loc285, #loc286])
#loc445 = loc(fused[#loc288, #loc287])
#loc446 = loc(fused[#loc289, #loc290])
#loc447 = loc(fused[#loc292, #loc286])
#loc448 = loc(fused[#loc294, #loc293])
#loc449 = loc(fused[#loc298, #loc297])
#loc450 = loc(fused[#loc299, #loc300])
#loc451 = loc(fused[#loc301, #loc302])
#loc452 = loc(fused[#loc305, #loc307])
#loc453 = loc(fused[#loc309, #loc310, #loc311, #loc300])
#loc454 = loc(fused[#loc313, #loc312])
#loc455 = loc(fused[#loc316, #loc317])
#loc456 = loc(fused[#loc319, #loc318])
#loc457 = loc(fused[#loc320, #loc321])
#loc458 = loc(fused[#loc323, #loc317])
#loc459 = loc(fused[#loc329, #loc328])
