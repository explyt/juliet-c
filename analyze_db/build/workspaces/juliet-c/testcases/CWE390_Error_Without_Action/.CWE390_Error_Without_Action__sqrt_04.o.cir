!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__errno_location() -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc100)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc3)
  cir.func private @printDoubleLine(!cir.double) loc(#loc101)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %2 ^bb2, ^bb9 loc(#loc105)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc106)
  ^bb3:  // pred: ^bb2
    %3 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc17)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc18)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc20)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc20)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc18)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc108)
    cir.br ^bb4 loc(#loc109)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc25)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc26)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc111)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc24)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc24)
  ^bb7:  // pred: ^bb6
    %14 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc28)
    cir.call @printDoubleLine(%14) : (!cir.double) -> () loc(#loc29)
    cir.br ^bb8 loc(#loc15)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc11)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc11)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc7)
  } loc(#loc102)
  cir.func no_proto @CWE390_Error_Without_Action__sqrt_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sqrt() failed\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc39)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc116)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc48)
    cir.brcond %2 ^bb2, ^bb3 loc(#loc120)
  ^bb2:  // pred: ^bb1
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb10 loc(#loc50)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc121)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %6 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc56)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc122)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc57)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc59)
    %10 = cir.cast(int_to_float, %9 : !s32i), !cir.double loc(#loc59)
    %11 = cir.call @sqrt(%10) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc57)
    cir.store %11, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc123)
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %12 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc64)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %14 = cir.const #cir.int<33> : !s32i loc(#loc65)
    %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc125)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc39)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc68)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc69)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc68)
    cir.br ^bb7 loc(#loc63)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc63)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc70)
    cir.call @printDoubleLine(%20) : (!cir.double) -> () loc(#loc71)
    cir.br ^bb9 loc(#loc54)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc47)
  ^bb10:  // 2 preds: ^bb2, ^bb9
    cir.br ^bb11 loc(#loc47)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc43)
  } loc(#loc117)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber"] {alignment = 8 : i64} loc(#loc128)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %2 ^bb2, ^bb9 loc(#loc130)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %3 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %4 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc83)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %5 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc84)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc86)
    %8 = cir.cast(int_to_float, %7 : !s32i), !cir.double loc(#loc86)
    %9 = cir.call @sqrt(%8) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc84)
    cir.store %9, %0 : !cir.double, !cir.ptr<!cir.double> loc(#loc133)
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @__errno_location() : () -> !cir.ptr<!s32i> side_effect(const) extra(#fn_attr) loc(#loc91)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %12 = cir.const #cir.int<33> : !s32i loc(#loc92)
    %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc135)
    cir.brcond %13 ^bb5, ^bb6 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc96)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc97)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc96)
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc90)
  ^bb7:  // pred: ^bb6
    %18 = cir.load %0 : !cir.ptr<!cir.double>, !cir.double loc(#loc98)
    cir.call @printDoubleLine(%18) : (!cir.double) -> () loc(#loc99)
    cir.br ^bb8 loc(#loc81)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc77)
  ^bb9:  // 2 preds: ^bb1, ^bb8
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc73)
  } loc(#loc127)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE390_Error_Without_Action/CWE390_Error_Without_Action__sqrt_04.c":0:0)
#loc1 = loc("/usr/include/errno.h":37:1)
#loc2 = loc("/usr/include/errno.h":37:45)
#loc3 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":38:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":38:41)
#loc6 = loc("CWE390_Error_Without_Action__sqrt_04.c":29:1)
#loc7 = loc("CWE390_Error_Without_Action__sqrt_04.c":45:1)
#loc8 = loc("CWE390_Error_Without_Action__sqrt_04.c":34:13)
#loc9 = loc("CWE390_Error_Without_Action__sqrt_04.c":34:20)
#loc10 = loc("CWE390_Error_Without_Action__sqrt_04.c":31:5)
#loc11 = loc("CWE390_Error_Without_Action__sqrt_04.c":44:5)
#loc12 = loc("CWE390_Error_Without_Action__sqrt_04.c":31:8)
#loc13 = loc("CWE390_Error_Without_Action__sqrt_04.c":32:5)
#loc14 = loc("CWE390_Error_Without_Action__sqrt_04.c":33:9)
#loc15 = loc("CWE390_Error_Without_Action__sqrt_04.c":43:9)
#loc16 = loc("CWE390_Error_Without_Action__sqrt_04.c":35:21)
#loc17 = loc("CWE390_Error_Without_Action__sqrt_04.c":35:13)
#loc18 = loc("CWE390_Error_Without_Action__sqrt_04.c":36:36)
#loc19 = loc("CWE390_Error_Without_Action__sqrt_04.c":36:50)
#loc20 = loc("CWE390_Error_Without_Action__sqrt_04.c":36:49)
#loc21 = loc("CWE390_Error_Without_Action__sqrt_04.c":36:13)
#loc22 = loc("CWE390_Error_Without_Action__sqrt_04.c":36:51)
#loc23 = loc("CWE390_Error_Without_Action__sqrt_04.c":38:13)
#loc24 = loc("CWE390_Error_Without_Action__sqrt_04.c":41:13)
#loc25 = loc("CWE390_Error_Without_Action__sqrt_04.c":38:17)
#loc26 = loc("CWE390_Error_Without_Action__sqrt_04.c":38:26)
#loc27 = loc("CWE390_Error_Without_Action__sqrt_04.c":39:13)
#loc28 = loc("CWE390_Error_Without_Action__sqrt_04.c":42:29)
#loc29 = loc("CWE390_Error_Without_Action__sqrt_04.c":42:13)
#loc30 = loc("CWE390_Error_Without_Action__sqrt_04.c":96:1)
#loc31 = loc("CWE390_Error_Without_Action__sqrt_04.c":100:1)
#loc32 = loc("CWE390_Error_Without_Action__sqrt_04.c":98:5)
#loc33 = loc("CWE390_Error_Without_Action__sqrt_04.c":98:11)
#loc34 = loc("CWE390_Error_Without_Action__sqrt_04.c":99:5)
#loc35 = loc("CWE390_Error_Without_Action__sqrt_04.c":99:11)
#loc36 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE390_Error_Without_Action__sqrt_04.c":57:19)
#loc39 = loc("CWE390_Error_Without_Action__sqrt_04.c":68:27)
#loc40 = loc("/usr/include/stdlib.h":756:1)
#loc41 = loc("/usr/include/stdlib.h":756:70)
#loc42 = loc("CWE390_Error_Without_Action__sqrt_04.c":52:1)
#loc43 = loc("CWE390_Error_Without_Action__sqrt_04.c":74:1)
#loc44 = loc("CWE390_Error_Without_Action__sqrt_04.c":62:13)
#loc45 = loc("CWE390_Error_Without_Action__sqrt_04.c":62:20)
#loc46 = loc("CWE390_Error_Without_Action__sqrt_04.c":54:5)
#loc47 = loc("CWE390_Error_Without_Action__sqrt_04.c":73:5)
#loc48 = loc("CWE390_Error_Without_Action__sqrt_04.c":54:8)
#loc49 = loc("CWE390_Error_Without_Action__sqrt_04.c":55:5)
#loc50 = loc("CWE390_Error_Without_Action__sqrt_04.c":58:5)
#loc51 = loc("CWE390_Error_Without_Action__sqrt_04.c":60:5)
#loc52 = loc("CWE390_Error_Without_Action__sqrt_04.c":57:9)
#loc53 = loc("CWE390_Error_Without_Action__sqrt_04.c":61:9)
#loc54 = loc("CWE390_Error_Without_Action__sqrt_04.c":72:9)
#loc55 = loc("CWE390_Error_Without_Action__sqrt_04.c":63:21)
#loc56 = loc("CWE390_Error_Without_Action__sqrt_04.c":63:13)
#loc57 = loc("CWE390_Error_Without_Action__sqrt_04.c":64:36)
#loc58 = loc("CWE390_Error_Without_Action__sqrt_04.c":64:50)
#loc59 = loc("CWE390_Error_Without_Action__sqrt_04.c":64:49)
#loc60 = loc("CWE390_Error_Without_Action__sqrt_04.c":64:13)
#loc61 = loc("CWE390_Error_Without_Action__sqrt_04.c":64:51)
#loc62 = loc("CWE390_Error_Without_Action__sqrt_04.c":66:13)
#loc63 = loc("CWE390_Error_Without_Action__sqrt_04.c":70:13)
#loc64 = loc("CWE390_Error_Without_Action__sqrt_04.c":66:17)
#loc65 = loc("CWE390_Error_Without_Action__sqrt_04.c":66:26)
#loc66 = loc("CWE390_Error_Without_Action__sqrt_04.c":67:13)
#loc67 = loc("CWE390_Error_Without_Action__sqrt_04.c":68:17)
#loc68 = loc("CWE390_Error_Without_Action__sqrt_04.c":69:17)
#loc69 = loc("CWE390_Error_Without_Action__sqrt_04.c":69:22)
#loc70 = loc("CWE390_Error_Without_Action__sqrt_04.c":71:29)
#loc71 = loc("CWE390_Error_Without_Action__sqrt_04.c":71:13)
#loc72 = loc("CWE390_Error_Without_Action__sqrt_04.c":77:1)
#loc73 = loc("CWE390_Error_Without_Action__sqrt_04.c":94:1)
#loc74 = loc("CWE390_Error_Without_Action__sqrt_04.c":82:13)
#loc75 = loc("CWE390_Error_Without_Action__sqrt_04.c":82:20)
#loc76 = loc("CWE390_Error_Without_Action__sqrt_04.c":79:5)
#loc77 = loc("CWE390_Error_Without_Action__sqrt_04.c":93:5)
#loc78 = loc("CWE390_Error_Without_Action__sqrt_04.c":79:8)
#loc79 = loc("CWE390_Error_Without_Action__sqrt_04.c":80:5)
#loc80 = loc("CWE390_Error_Without_Action__sqrt_04.c":81:9)
#loc81 = loc("CWE390_Error_Without_Action__sqrt_04.c":92:9)
#loc82 = loc("CWE390_Error_Without_Action__sqrt_04.c":83:21)
#loc83 = loc("CWE390_Error_Without_Action__sqrt_04.c":83:13)
#loc84 = loc("CWE390_Error_Without_Action__sqrt_04.c":84:36)
#loc85 = loc("CWE390_Error_Without_Action__sqrt_04.c":84:50)
#loc86 = loc("CWE390_Error_Without_Action__sqrt_04.c":84:49)
#loc87 = loc("CWE390_Error_Without_Action__sqrt_04.c":84:13)
#loc88 = loc("CWE390_Error_Without_Action__sqrt_04.c":84:51)
#loc89 = loc("CWE390_Error_Without_Action__sqrt_04.c":86:13)
#loc90 = loc("CWE390_Error_Without_Action__sqrt_04.c":90:13)
#loc91 = loc("CWE390_Error_Without_Action__sqrt_04.c":86:17)
#loc92 = loc("CWE390_Error_Without_Action__sqrt_04.c":86:26)
#loc93 = loc("CWE390_Error_Without_Action__sqrt_04.c":87:13)
#loc94 = loc("CWE390_Error_Without_Action__sqrt_04.c":88:27)
#loc95 = loc("CWE390_Error_Without_Action__sqrt_04.c":88:17)
#loc96 = loc("CWE390_Error_Without_Action__sqrt_04.c":89:17)
#loc97 = loc("CWE390_Error_Without_Action__sqrt_04.c":89:22)
#loc98 = loc("CWE390_Error_Without_Action__sqrt_04.c":91:29)
#loc99 = loc("CWE390_Error_Without_Action__sqrt_04.c":91:13)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc4, #loc5])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc13, #loc11])
#loc106 = loc(fused[#loc14, #loc15])
#loc107 = loc(fused[#loc17, #loc16])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc26])
#loc111 = loc(fused[#loc27, #loc24])
#loc112 = loc(fused[#loc30, #loc31])
#loc113 = loc(fused[#loc32, #loc33])
#loc114 = loc(fused[#loc34, #loc35])
#loc115 = loc(fused[#loc36, #loc37])
#loc116 = loc(fused[#loc40, #loc41])
#loc117 = loc(fused[#loc42, #loc43])
#loc118 = loc(fused[#loc44, #loc45])
#loc119 = loc(fused[#loc46, #loc47])
#loc120 = loc(fused[#loc49, #loc50, #loc51, #loc47])
#loc121 = loc(fused[#loc53, #loc54])
#loc122 = loc(fused[#loc56, #loc55])
#loc123 = loc(fused[#loc60, #loc61])
#loc124 = loc(fused[#loc62, #loc63])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc66, #loc63])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc74, #loc75])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc79, #loc77])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc83, #loc82])
#loc133 = loc(fused[#loc87, #loc88])
#loc134 = loc(fused[#loc89, #loc90])
#loc135 = loc(fused[#loc91, #loc92])
#loc136 = loc(fused[#loc93, #loc90])
