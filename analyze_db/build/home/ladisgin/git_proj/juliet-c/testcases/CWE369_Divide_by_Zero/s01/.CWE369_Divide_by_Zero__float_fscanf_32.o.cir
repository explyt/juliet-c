!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc124)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%f\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc126)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc129)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc130)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc131)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc132)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc133)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc132)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc133)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc22)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc134)
    cir.br ^bb1 loc(#loc135)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc11)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc26)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc128)
    %9 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc27)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc125)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %14 = cir.call @__isoc99_fscanf(%11, %13, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc27)
    %15 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc29)
    %16 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc30)
    cir.store %15, %16 : !cir.float, !cir.ptr<!cir.float> loc(#loc136)
    cir.br ^bb2 loc(#loc25)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc137)
  ^bb3:  // pred: ^bb2
    %17 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc13)
    %18 = cir.load %17 : !cir.ptr<!cir.float>, !cir.float loc(#loc34)
    cir.store %18, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc129)
    cir.br ^bb4 loc(#loc138)
  ^bb4:  // pred: ^bb3
    %19 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc37)
    %20 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc38)
    %21 = cir.cast(floating, %20 : !cir.float), !cir.double loc(#loc38)
    %22 = cir.binop(div, %19, %21) : !cir.double loc(#loc139)
    %23 = cir.cast(float_to_int, %22 : !cir.double), !s32i loc(#loc139)
    cir.store %23, %2 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc40)
    cir.br ^bb5 loc(#loc36)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc33)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc9)
  } loc(#loc127)
  cir.func no_proto @CWE369_Divide_by_Zero__float_fscanf_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    cir.return loc(#loc42)
  } loc(#loc140)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc145)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc146)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc147)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc148)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc148)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc149)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc61)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc50)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc65)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc144)
    %9 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc66)
    cir.store %9, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc152)
    %10 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc68)
    %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc69)
    cir.store %10, %11 : !cir.float, !cir.ptr<!cir.float> loc(#loc153)
    cir.br ^bb2 loc(#loc64)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // pred: ^bb2
    %12 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc52)
    %13 = cir.load %12 : !cir.ptr<!cir.float>, !cir.float loc(#loc73)
    cir.store %13, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc145)
    cir.br ^bb4 loc(#loc155)
  ^bb4:  // pred: ^bb3
    %14 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc76)
    %15 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc77)
    %16 = cir.cast(floating, %15 : !cir.float), !cir.double loc(#loc77)
    %17 = cir.binop(div, %14, %16) : !cir.double loc(#loc156)
    %18 = cir.cast(float_to_int, %17 : !cir.double), !s32i loc(#loc156)
    cir.store %18, %2 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc78)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc79)
    cir.br ^bb5 loc(#loc75)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc72)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc48)
  } loc(#loc143)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc157)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc82)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc160)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc161)
    %3 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc162)
    %4 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc163)
    %5 = cir.alloca !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc164)
    cir.store %3, %4 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc163)
    cir.store %3, %5 : !cir.ptr<!cir.float>, !cir.ptr<!cir.ptr<!cir.float>> loc(#loc164)
    %6 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc97)
    cir.store %6, %3 : !cir.float, !cir.ptr<!cir.float> loc(#loc165)
    cir.br ^bb1 loc(#loc166)
  ^bb1:  // pred: ^bb0
    %7 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc86)
    %8 = cir.load %7 : !cir.ptr<!cir.float>, !cir.float loc(#loc101)
    cir.store %8, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc159)
    %9 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc102)
    %10 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc125)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc103)
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc104)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc104)
    %14 = cir.call @__isoc99_fscanf(%11, %13, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!cir.float>) -> !s32i loc(#loc102)
    %15 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc105)
    %16 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc106)
    cir.store %15, %16 : !cir.float, !cir.ptr<!cir.float> loc(#loc167)
    cir.br ^bb2 loc(#loc100)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc168)
  ^bb3:  // pred: ^bb2
    %17 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.float>>, !cir.ptr<!cir.float> loc(#loc88)
    %18 = cir.load %17 : !cir.ptr<!cir.float>, !cir.float loc(#loc110)
    cir.store %18, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc160)
    cir.br ^bb4 loc(#loc169)
  ^bb4:  // pred: ^bb3
    %19 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc113)
    %20 = cir.cast(floating, %19 : !cir.float), !cir.double loc(#loc113)
    %21 = cir.fabs %20 : !cir.double loc(#loc113)
    %22 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc114)
    %23 = cir.cmp(gt, %21, %22) : !cir.double, !cir.bool loc(#loc170)
    cir.brcond %23 ^bb5, ^bb6 loc(#loc171)
  ^bb5:  // pred: ^bb4
    %24 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc119)
    %25 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc120)
    %26 = cir.cast(floating, %25 : !cir.float), !cir.double loc(#loc120)
    %27 = cir.binop(div, %24, %26) : !cir.double loc(#loc172)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s32i loc(#loc172)
    cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc121)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc122)
    cir.br ^bb7 loc(#loc117)
  ^bb6:  // pred: ^bb4
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc82)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    cir.br ^bb7 loc(#loc112)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc112)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc109)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc84)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_fscanf_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":34:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":24:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":45:1)
#loc10 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":32:9)
#loc11 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":32:23)
#loc12 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":38:9)
#loc13 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":38:23)
#loc14 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":41:13)
#loc15 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":41:44)
#loc16 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":26:5)
#loc17 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":26:11)
#loc18 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":27:5)
#loc19 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":27:24)
#loc20 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":28:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":28:24)
#loc22 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":30:12)
#loc23 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":30:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":31:5)
#loc25 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":36:5)
#loc26 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":32:22)
#loc27 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":34:9)
#loc28 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":34:17)
#loc29 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":35:21)
#loc30 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":35:10)
#loc31 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":35:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":37:5)
#loc33 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":44:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":38:22)
#loc35 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":39:9)
#loc36 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":43:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":41:32)
#loc38 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":41:40)
#loc39 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":42:26)
#loc40 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":42:13)
#loc41 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":104:1)
#loc42 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":108:1)
#loc43 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":106:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":106:13)
#loc45 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":107:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":107:13)
#loc47 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":52:1)
#loc48 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":73:1)
#loc49 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":60:9)
#loc50 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":60:23)
#loc51 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":66:9)
#loc52 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":66:23)
#loc53 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":69:13)
#loc54 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":69:44)
#loc55 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":54:5)
#loc56 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":54:11)
#loc57 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":55:5)
#loc58 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":55:24)
#loc59 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":56:5)
#loc60 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":56:24)
#loc61 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":58:12)
#loc62 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":58:5)
#loc63 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":59:5)
#loc64 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":64:5)
#loc65 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":60:22)
#loc66 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":62:16)
#loc67 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":62:9)
#loc68 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":63:21)
#loc69 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":63:10)
#loc70 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":63:9)
#loc71 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":65:5)
#loc72 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":72:5)
#loc73 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":66:22)
#loc74 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":67:9)
#loc75 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":71:9)
#loc76 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":69:32)
#loc77 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":69:40)
#loc78 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":70:26)
#loc79 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":70:13)
#loc80 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc82 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":99:23)
#loc83 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":76:1)
#loc84 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":102:1)
#loc85 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":84:9)
#loc86 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":84:23)
#loc87 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":90:9)
#loc88 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":90:23)
#loc89 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":94:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":94:44)
#loc91 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":78:5)
#loc92 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":78:11)
#loc93 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":79:5)
#loc94 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":79:24)
#loc95 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":80:5)
#loc96 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":80:24)
#loc97 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":82:12)
#loc98 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":82:5)
#loc99 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":83:5)
#loc100 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":88:5)
#loc101 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":84:22)
#loc102 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":86:9)
#loc103 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":86:17)
#loc104 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":86:24)
#loc105 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":87:21)
#loc106 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":87:10)
#loc107 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":87:9)
#loc108 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":89:5)
#loc109 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":101:5)
#loc110 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":90:22)
#loc111 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":92:9)
#loc112 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":100:9)
#loc113 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":92:17)
#loc114 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":92:25)
#loc115 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":92:12)
#loc116 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":93:9)
#loc117 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":96:9)
#loc118 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":98:9)
#loc119 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":94:32)
#loc120 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":94:40)
#loc121 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":95:26)
#loc122 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":95:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_fscanf_32.c":99:13)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc6, #loc7])
#loc127 = loc(fused[#loc8, #loc9])
#loc128 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc12, #loc13])
#loc130 = loc(fused[#loc14, #loc15])
#loc131 = loc(fused[#loc16, #loc17])
#loc132 = loc(fused[#loc18, #loc19])
#loc133 = loc(fused[#loc20, #loc21])
#loc134 = loc(fused[#loc23, #loc22])
#loc135 = loc(fused[#loc24, #loc25])
#loc136 = loc(fused[#loc31, #loc29])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc41, #loc42])
#loc141 = loc(fused[#loc43, #loc44])
#loc142 = loc(fused[#loc45, #loc46])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc49, #loc50])
#loc145 = loc(fused[#loc51, #loc52])
#loc146 = loc(fused[#loc53, #loc54])
#loc147 = loc(fused[#loc55, #loc56])
#loc148 = loc(fused[#loc57, #loc58])
#loc149 = loc(fused[#loc59, #loc60])
#loc150 = loc(fused[#loc62, #loc61])
#loc151 = loc(fused[#loc63, #loc64])
#loc152 = loc(fused[#loc67, #loc66])
#loc153 = loc(fused[#loc70, #loc68])
#loc154 = loc(fused[#loc71, #loc72])
#loc155 = loc(fused[#loc74, #loc75])
#loc156 = loc(fused[#loc76, #loc77])
#loc157 = loc(fused[#loc80, #loc81])
#loc158 = loc(fused[#loc83, #loc84])
#loc159 = loc(fused[#loc85, #loc86])
#loc160 = loc(fused[#loc87, #loc88])
#loc161 = loc(fused[#loc89, #loc90])
#loc162 = loc(fused[#loc91, #loc92])
#loc163 = loc(fused[#loc93, #loc94])
#loc164 = loc(fused[#loc95, #loc96])
#loc165 = loc(fused[#loc98, #loc97])
#loc166 = loc(fused[#loc99, #loc100])
#loc167 = loc(fused[#loc107, #loc105])
#loc168 = loc(fused[#loc108, #loc109])
#loc169 = loc(fused[#loc111, #loc112])
#loc170 = loc(fused[#loc115, #loc114])
#loc171 = loc(fused[#loc116, #loc117, #loc118, #loc112])
#loc172 = loc(fused[#loc119, #loc120])
