!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc81)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc82)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc83)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printFloatLine(!cir.float) loc(#loc85)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc87)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc88)
    cir.goto "sink" loc(#loc89)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc20)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc17)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc17)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc88)
    cir.scope {
      %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc23)
      %7 = cir.const #cir.int<256> : !s32i loc(#loc24)
      %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc82)
      %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
      %10 = cir.call @fgets(%6, %7, %9) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc26)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc27)
      %13 = cir.cmp(ne, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc91)
      cir.if %13 {
        %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc31)
        %15 = cir.call @atof(%14) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc32)
        cir.store %15, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc93)
      } else {
        %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc35)
      } loc(#loc92)
    } loc(#loc90)
    %4 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc36)
    %5 = cir.cast(floating, %4 : !cir.double), !cir.float loc(#loc36)
    cir.call @printFloatLine(%5) : (!cir.float) -> () loc(#loc37)
    cir.return loc(#loc13)
  } loc(#loc86)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc95)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc39)
  } loc(#loc94)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Value is too small or large to be represented as a float\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc97)
    %1 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc98)
    cir.goto "sink" loc(#loc99)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc51)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %3 = cir.cast(int_to_float, %2 : !s32i), !cir.double loc(#loc48)
    cir.store %3, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc98)
    cir.scope {
      %4 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc54)
      %5 = cir.const #cir.int<256> : !s32i loc(#loc55)
      %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc82)
      %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc56)
      %8 = cir.call @fgets(%4, %5, %7) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc57)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc58)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc58)
      %11 = cir.cmp(ne, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc101)
      cir.if %11 {
        %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc62)
        %13 = cir.call @atof(%12) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc63)
        cir.store %13, %1 : !cir.double, !cir.ptr<!cir.double> loc(#loc103)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc66)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc67)
      } loc(#loc102)
    } loc(#loc100)
    cir.scope {
      %4 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc70)
      %5 = cir.const #cir.fp<3.40282347E+38> : !cir.float loc(#loc71)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc71)
      %7 = cir.cmp(gt, %4, %6) : !cir.double, !cir.bool loc(#loc105)
      %8 = cir.ternary(%7, true {
        %9 = cir.const #true loc(#loc72)
        cir.yield %9 : !cir.bool loc(#loc72)
      }, false {
        %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc73)
        %10 = cir.const #cir.fp<1.17549435E-38> : !cir.float loc(#loc74)
        %11 = cir.cast(floating, %10 : !cir.float), !cir.double loc(#loc74)
        %12 = cir.cmp(lt, %9, %11) : !cir.double, !cir.bool loc(#loc106)
        %13 = cir.ternary(%12, true {
          %14 = cir.const #true loc(#loc72)
          cir.yield %14 : !cir.bool loc(#loc72)
        }, false {
          %14 = cir.const #false loc(#loc72)
          cir.yield %14 : !cir.bool loc(#loc72)
        }) : (!cir.bool) -> !cir.bool loc(#loc72)
        cir.yield %13 : !cir.bool loc(#loc72)
      }) : (!cir.bool) -> !cir.bool loc(#loc72)
      cir.if %8 {
        %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc42)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc42)
        cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } else {
        %9 = cir.load %1 : !cir.ptr<!cir.double>, !cir.double loc(#loc79)
        %10 = cir.cast(floating, %9 : !cir.double), !cir.float loc(#loc79)
        cir.call @printFloatLine(%10) : (!cir.float) -> () loc(#loc80)
      } loc(#loc107)
    } loc(#loc104)
    cir.return loc(#loc44)
  } loc(#loc96)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":102:1)
#loc6 = loc("/usr/include/stdlib.h":103:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":42:23)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":22:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":22:39)
#loc12 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":23:1)
#loc13 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":47:1)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":28:9)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":28:41)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":29:9)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":29:31)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":25:5)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":25:10)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":26:1)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":43:9)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:19)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:32)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:49)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":35:59)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":36:9)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":39:9)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":41:9)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":38:33)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":38:28)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":38:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":38:44)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":42:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":45:31)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":45:9)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":87:1)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":90:1)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":89:5)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":89:11)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":78:23)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":54:1)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":85:1)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":59:9)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":59:41)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":60:9)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":60:31)
#loc49 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":56:5)
#loc50 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":56:10)
#loc51 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":57:1)
#loc52 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:9)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":74:9)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:19)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:32)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:49)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:13)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":66:59)
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":67:9)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":70:9)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":72:9)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":69:33)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":69:28)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":69:13)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":69:44)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":73:23)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":73:13)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:9)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":83:9)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:13)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:28)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:36)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:39)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":76:54)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":77:9)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":79:9)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":81:9)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":78:13)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":82:35)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2float_18.c":82:13)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc7, #loc8])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc12, #loc13])
#loc87 = loc(fused[#loc14, #loc15])
#loc88 = loc(fused[#loc16, #loc17])
#loc89 = loc(fused[#loc18, #loc19])
#loc90 = loc(fused[#loc21, #loc22])
#loc91 = loc(fused[#loc26, #loc27])
#loc92 = loc(fused[#loc28, #loc29, #loc30, #loc22])
#loc93 = loc(fused[#loc33, #loc34])
#loc94 = loc(fused[#loc38, #loc39])
#loc95 = loc(fused[#loc40, #loc41])
#loc96 = loc(fused[#loc43, #loc44])
#loc97 = loc(fused[#loc45, #loc46])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc52, #loc53])
#loc101 = loc(fused[#loc57, #loc58])
#loc102 = loc(fused[#loc59, #loc60, #loc61, #loc53])
#loc103 = loc(fused[#loc64, #loc65])
#loc104 = loc(fused[#loc68, #loc69])
#loc105 = loc(fused[#loc70, #loc71])
#loc106 = loc(fused[#loc73, #loc74])
#loc107 = loc(fused[#loc75, #loc76, #loc77, #loc69])
