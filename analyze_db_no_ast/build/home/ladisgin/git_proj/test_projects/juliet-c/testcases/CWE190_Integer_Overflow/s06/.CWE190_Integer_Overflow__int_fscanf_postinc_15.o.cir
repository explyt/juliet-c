!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fscanf_postinc_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc188)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc189)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc190)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func private  @printIntLine(!s32i) loc(#loc191)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_postinc_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc19)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc189)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
        cir.break loc(#loc22)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc23)
        cir.break loc(#loc24)
      }
      ] loc(#loc17)
    } loc(#loc195)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc27)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc198)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
          %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc33)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc198)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc35)
        } loc(#loc197)
        cir.break loc(#loc36)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc37)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc37)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        cir.break loc(#loc39)
      }
      ] loc(#loc25)
    } loc(#loc196)
    cir.return loc(#loc12)
  } loc(#loc192)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_postinc_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc200)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc206)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc55)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc59)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc60)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc189)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc62)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc62)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
        cir.break loc(#loc63)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc65)
        cir.break loc(#loc66)
      }
      ] loc(#loc57)
    } loc(#loc208)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc69)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc70)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc70)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc71)
        cir.break loc(#loc72)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc76)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc211)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc77)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc84)
            cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc86)
          } else {
            %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc212)
        } loc(#loc210)
        cir.break loc(#loc88)
      }
      ] loc(#loc67)
    } loc(#loc209)
    cir.return loc(#loc52)
  } loc(#loc205)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc97)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc98)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc189)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc99)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc100)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc100)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc98)
        cir.break loc(#loc101)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc103)
        cir.break loc(#loc104)
      }
      ] loc(#loc95)
    } loc(#loc218)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc107)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc111)
          %5 = cir.cmp(lt, %3, %4) : !s32i, !s32i loc(#loc221)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc112)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %9 = cir.unary(inc, %8) : !s32i, !s32i loc(#loc119)
            cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc223)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc121)
          } else {
            %7 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc122)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc122)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc123)
          } loc(#loc222)
        } loc(#loc220)
        cir.break loc(#loc124)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc126)
        cir.break loc(#loc127)
      }
      ] loc(#loc105)
    } loc(#loc219)
    cir.return loc(#loc90)
  } loc(#loc215)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc132)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc136)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc137)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc137)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc138)
        cir.break loc(#loc139)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc140)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
        cir.break loc(#loc142)
      }
      ] loc(#loc134)
    } loc(#loc228)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc145)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc151)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc152)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc153)
        } loc(#loc231)
        cir.break loc(#loc154)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc156)
        cir.break loc(#loc157)
      }
      ] loc(#loc143)
    } loc(#loc230)
    cir.return loc(#loc129)
  } loc(#loc225)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc235)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc166)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc167)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc238)
        cir.break loc(#loc169)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc171)
        cir.break loc(#loc172)
      }
      ] loc(#loc164)
    } loc(#loc237)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc175)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %5 = cir.unary(inc, %4) : !s32i, !s32i loc(#loc181)
          cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc179)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc241)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc182)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc183)
        } loc(#loc240)
        cir.break loc(#loc184)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc185)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc185)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc186)
        cir.break loc(#loc187)
      }
      ] loc(#loc173)
    } loc(#loc239)
    cir.return loc(#loc159)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int_fscanf_postinc_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":31:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":35:19)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":22:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":53:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":24:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":24:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":26:12)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":37:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":27:12)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":31:9)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":31:16)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":32:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":35:9)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":38:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":52:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":38:12)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":41:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":46:5)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":44:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":44:22)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":43:13)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":43:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":45:22)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":45:9)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":47:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":50:19)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":50:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":51:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":205:1)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":211:1)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":207:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":207:14)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":208:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":208:14)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":209:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":209:14)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":210:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":210:14)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":92:23)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":60:1)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":96:1)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":62:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":62:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":64:12)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":65:5)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":75:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":65:12)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":69:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":69:16)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":69:23)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":70:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":73:19)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":73:9)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":74:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":76:5)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":95:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":76:12)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":80:19)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":80:9)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":81:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":84:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":93:9)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":84:13)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":84:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":84:18)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":85:9)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":89:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":91:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":87:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":87:26)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":86:17)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":86:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":88:26)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":88:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":92:13)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":94:9)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":99:1)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":135:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":101:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":101:9)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":103:12)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":103:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":104:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":114:5)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":104:12)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":108:9)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":108:16)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":108:23)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":109:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":112:19)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":112:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":113:9)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":115:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":134:5)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":115:12)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":119:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":128:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":119:13)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":119:20)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":119:18)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":120:9)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":124:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":126:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":122:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":122:26)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":121:17)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":121:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":123:26)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":123:13)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":127:23)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":127:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":129:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":132:19)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":132:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":133:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":138:1)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":169:1)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":140:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":140:9)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":142:12)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":142:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":143:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":153:5)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":143:12)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":147:19)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":147:9)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":148:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":151:16)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":151:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":152:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":154:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":168:5)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":154:12)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":157:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":162:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":160:9)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":160:22)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":159:13)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":159:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":161:22)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":161:9)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":163:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":166:19)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":166:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":167:9)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":172:1)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":203:1)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":174:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":174:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":176:12)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":176:5)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":177:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":187:5)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":177:12)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":181:16)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":181:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":182:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":185:19)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":185:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":186:9)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":188:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":202:5)
#loc175 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":188:12)
#loc176 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":191:5)
#loc177 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":196:5)
#loc178 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":194:9)
#loc179 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":194:22)
#loc180 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":193:13)
#loc181 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":193:9)
#loc182 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":195:22)
#loc183 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":195:9)
#loc184 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":197:5)
#loc185 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":200:19)
#loc186 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":200:9)
#loc187 = loc("CWE190_Integer_Overflow__int_fscanf_postinc_15.c":201:9)
#loc188 = loc(fused[#loc1, #loc2])
#loc189 = loc(fused[#loc3, #loc4])
#loc190 = loc(fused[#loc6, #loc7])
#loc191 = loc(fused[#loc9, #loc10])
#loc192 = loc(fused[#loc11, #loc12])
#loc193 = loc(fused[#loc13, #loc14])
#loc194 = loc(fused[#loc16, #loc15])
#loc195 = loc(fused[#loc17, #loc18])
#loc196 = loc(fused[#loc25, #loc26])
#loc197 = loc(fused[#loc28, #loc29])
#loc198 = loc(fused[#loc30, #loc31])
#loc199 = loc(fused[#loc33, #loc32])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc44, #loc45])
#loc203 = loc(fused[#loc46, #loc47])
#loc204 = loc(fused[#loc48, #loc49])
#loc205 = loc(fused[#loc51, #loc52])
#loc206 = loc(fused[#loc53, #loc54])
#loc207 = loc(fused[#loc56, #loc55])
#loc208 = loc(fused[#loc57, #loc58])
#loc209 = loc(fused[#loc67, #loc68])
#loc210 = loc(fused[#loc73, #loc74])
#loc211 = loc(fused[#loc75, #loc76])
#loc212 = loc(fused[#loc78, #loc79, #loc80, #loc74])
#loc213 = loc(fused[#loc81, #loc82])
#loc214 = loc(fused[#loc84, #loc83])
#loc215 = loc(fused[#loc89, #loc90])
#loc216 = loc(fused[#loc91, #loc92])
#loc217 = loc(fused[#loc94, #loc93])
#loc218 = loc(fused[#loc95, #loc96])
#loc219 = loc(fused[#loc105, #loc106])
#loc220 = loc(fused[#loc108, #loc109])
#loc221 = loc(fused[#loc110, #loc111])
#loc222 = loc(fused[#loc113, #loc114, #loc115, #loc109])
#loc223 = loc(fused[#loc116, #loc117])
#loc224 = loc(fused[#loc119, #loc118])
#loc225 = loc(fused[#loc128, #loc129])
#loc226 = loc(fused[#loc130, #loc131])
#loc227 = loc(fused[#loc133, #loc132])
#loc228 = loc(fused[#loc134, #loc135])
#loc229 = loc(fused[#loc141, #loc140])
#loc230 = loc(fused[#loc143, #loc144])
#loc231 = loc(fused[#loc146, #loc147])
#loc232 = loc(fused[#loc148, #loc149])
#loc233 = loc(fused[#loc151, #loc150])
#loc234 = loc(fused[#loc158, #loc159])
#loc235 = loc(fused[#loc160, #loc161])
#loc236 = loc(fused[#loc163, #loc162])
#loc237 = loc(fused[#loc164, #loc165])
#loc238 = loc(fused[#loc168, #loc167])
#loc239 = loc(fused[#loc173, #loc174])
#loc240 = loc(fused[#loc176, #loc177])
#loc241 = loc(fused[#loc178, #loc179])
#loc242 = loc(fused[#loc181, #loc180])
