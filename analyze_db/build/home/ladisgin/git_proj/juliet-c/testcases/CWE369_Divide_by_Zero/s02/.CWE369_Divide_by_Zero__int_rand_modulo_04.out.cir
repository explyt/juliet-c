!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":36:16)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":162:10)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":162:14)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":162:20)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":162:32)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":58:16)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":88:16)
#loc191 = loc(fused[#loc47, #loc48])
#loc192 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private @printIntLine(!s32i) loc(#loc172)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    cir.br ^bb1 loc(#loc176)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc177)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc16)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb5(%20 : !u32i) loc(#loc16)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb5(%36 : !u32i) loc(#loc16)
  ^bb5(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":36:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %40 ^bb10, ^bb11 loc(#loc180)
  ^bb10:  // pred: ^bb9
    %41 = cir.const #cir.int<100> : !s32i loc(#loc22)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    %43 = cir.binop(rem, %41, %42) : !s32i loc(#loc181)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc24)
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc19)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc173)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc26)
  } loc(#loc182)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc187)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc188)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_04_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_rand_modulo_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call @CWE369_Divide_by_Zero__int_rand_modulo_04_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.return %17 : !s32i loc(#loc195)
  } loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc66)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc72)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc200)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc78)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc78)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc78)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc78)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc78)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc78)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc78)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc78)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc78)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc78)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc78)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc78)
    cir.br ^bb5(%20 : !u32i) loc(#loc78)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc78)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc78)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc78)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc78)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc78)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc78)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc78)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc78)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc78)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc78)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc78)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc78)
    cir.br ^bb5(%36 : !u32i) loc(#loc78)
  ^bb5(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":58:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc78)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb7 loc(#loc75)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc75)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc202)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %40 ^bb10, ^bb11 loc(#loc203)
  ^bb10:  // pred: ^bb9
    %41 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
    %42 = cir.cast(array_to_ptrdecay, %41 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%42) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb17 loc(#loc84)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc204)
  ^bb12:  // pred: ^bb11
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %45 ^bb13, ^bb14 loc(#loc206)
  ^bb13:  // pred: ^bb12
    %46 = cir.const #cir.int<100> : !s32i loc(#loc94)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %48 = cir.binop(rem, %46, %47) : !s32i loc(#loc207)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc96)
    cir.br ^bb15 loc(#loc92)
  ^bb14:  // pred: ^bb12
    %49 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc66)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    cir.br ^bb15 loc(#loc88)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc88)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc81)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc81)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc68)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc103)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
    cir.br ^bb1 loc(#loc211)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc107)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc212)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc109)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc109)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc109)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc109)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc109)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc109)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc109)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc109)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc109)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc109)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc109)
    cir.br ^bb5(%20 : !u32i) loc(#loc109)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc109)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc109)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc109)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc109)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc109)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc109)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc109)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc109)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc109)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc109)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc109)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc109)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc109)
    cir.br ^bb5(%36 : !u32i) loc(#loc109)
  ^bb5(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":88:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc109)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb7 loc(#loc106)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc214)
  ^bb9:  // pred: ^bb8
    %39 = cir.const #cir.int<1> : !s32i loc(#loc113)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %40 ^bb10, ^bb16 loc(#loc215)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc216)
  ^bb11:  // pred: ^bb10
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %43 = cir.cmp(ne, %41, %42) : !s32i, !cir.bool loc(#loc217)
    cir.brcond %43 ^bb12, ^bb13 loc(#loc218)
  ^bb12:  // pred: ^bb11
    %44 = cir.const #cir.int<100> : !s32i loc(#loc122)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
    %46 = cir.binop(rem, %44, %45) : !s32i loc(#loc219)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc124)
    cir.br ^bb14 loc(#loc120)
  ^bb13:  // pred: ^bb11
    %47 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc125)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    cir.br ^bb14 loc(#loc116)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc116)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc112)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc112)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc99)
  } loc(#loc208)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc131)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc132)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.br ^bb1 loc(#loc223)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc136)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc224)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc140)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    cir.br ^bb4 loc(#loc138)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<7> : !s32i loc(#loc142)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.br ^bb4 loc(#loc135)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc135)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc226)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<1> : !s32i loc(#loc146)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc146)
    cir.brcond %9 ^bb7, ^bb8 loc(#loc227)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.int<100> : !s32i loc(#loc148)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc149)
    %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc228)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc150)
    cir.br ^bb8 loc(#loc145)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc145)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc128)
  } loc(#loc220)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc156)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    cir.br ^bb1 loc(#loc232)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc160)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc233)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<7> : !s32i loc(#loc162)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.br ^bb3 loc(#loc159)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc159)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc235)
  ^bb5:  // pred: ^bb4
    %6 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc166)
    cir.brcond %7 ^bb6, ^bb7 loc(#loc236)
  ^bb6:  // pred: ^bb5
    %8 = cir.const #cir.int<100> : !s32i loc(#loc168)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc237)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc170)
    cir.br ^bb7 loc(#loc165)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc165)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc152)
  } loc(#loc229)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":28:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":43:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":30:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":30:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":32:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":32:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":32:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":33:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":37:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":33:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":34:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":36:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":38:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":42:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":38:8)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":39:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":41:22)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":41:28)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":41:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":145:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":151:1)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":147:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":147:14)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":148:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":148:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":149:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":149:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":150:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":150:14)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":167:15)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":169:15)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":172:15)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":174:15)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":162:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":177:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":163:1)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":165:27)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":165:22)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":165:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":167:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":168:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":168:52)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":169:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":172:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":173:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":173:51)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":174:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":176:12)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":176:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":63:19)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":74:23)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":50:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":77:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":52:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":52:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":54:13)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":54:12)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":54:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":55:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":59:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":55:8)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":56:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":58:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":60:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":76:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":60:8)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":61:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":64:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":66:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":63:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":68:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":75:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":68:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":68:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":69:9)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":71:9)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":73:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":70:26)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":70:32)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":70:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":74:13)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":80:1)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":102:1)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":82:5)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":82:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":84:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":84:12)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":84:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":85:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":89:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":85:8)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":86:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":88:9)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":90:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":101:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":90:8)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":91:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":93:9)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":100:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":93:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":93:21)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":94:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":96:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":98:9)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":95:26)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":95:32)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":95:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":99:23)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":99:13)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":105:1)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":125:1)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":107:5)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":107:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":109:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":109:12)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":109:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":110:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":119:5)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":110:8)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":111:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":114:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":116:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":113:19)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":113:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":118:16)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":118:9)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":120:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":124:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":120:8)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":121:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":123:22)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":123:28)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":123:9)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":128:1)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":143:1)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":130:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":130:9)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":132:13)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":132:12)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":132:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":133:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":137:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":133:8)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":134:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":136:16)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":136:9)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":138:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":142:5)
#loc166 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":138:8)
#loc167 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":139:5)
#loc168 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":141:22)
#loc169 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":141:28)
#loc170 = loc("CWE369_Divide_by_Zero__int_rand_modulo_04.c":141:9)
#loc171 = loc(fused[#loc1, #loc2])
#loc172 = loc(fused[#loc3, #loc4])
#loc173 = loc(fused[#loc5, #loc6])
#loc174 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc11, #loc9])
#loc176 = loc(fused[#loc12, #loc13])
#loc177 = loc(fused[#loc15, #loc13])
#loc178 = loc(fused[#loc17, #loc16])
#loc179 = loc(fused[#loc18, #loc19])
#loc180 = loc(fused[#loc21, #loc19])
#loc181 = loc(fused[#loc22, #loc23])
#loc182 = loc(fused[#loc25, #loc26])
#loc183 = loc(fused[#loc27, #loc28])
#loc184 = loc(fused[#loc29, #loc30])
#loc185 = loc(fused[#loc31, #loc32])
#loc186 = loc(fused[#loc33, #loc34])
#loc187 = loc(fused[#loc35, #loc36])
#loc188 = loc(fused[#loc37, #loc38])
#loc189 = loc(fused[#loc39, #loc40])
#loc190 = loc(fused[#loc45, #loc46])
#loc193 = loc(fused[#loc56, #loc57])
#loc194 = loc(fused[#loc60, #loc61])
#loc195 = loc(fused[#loc64, #loc63])
#loc196 = loc(fused[#loc67, #loc68])
#loc197 = loc(fused[#loc69, #loc70])
#loc198 = loc(fused[#loc73, #loc71])
#loc199 = loc(fused[#loc74, #loc75])
#loc200 = loc(fused[#loc77, #loc75])
#loc201 = loc(fused[#loc79, #loc78])
#loc202 = loc(fused[#loc80, #loc81])
#loc203 = loc(fused[#loc83, #loc84, #loc85, #loc81])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc89, #loc90])
#loc206 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc207 = loc(fused[#loc94, #loc95])
#loc208 = loc(fused[#loc98, #loc99])
#loc209 = loc(fused[#loc100, #loc101])
#loc210 = loc(fused[#loc104, #loc102])
#loc211 = loc(fused[#loc105, #loc106])
#loc212 = loc(fused[#loc108, #loc106])
#loc213 = loc(fused[#loc110, #loc109])
#loc214 = loc(fused[#loc111, #loc112])
#loc215 = loc(fused[#loc114, #loc112])
#loc216 = loc(fused[#loc115, #loc116])
#loc217 = loc(fused[#loc117, #loc118])
#loc218 = loc(fused[#loc119, #loc120, #loc121, #loc116])
#loc219 = loc(fused[#loc122, #loc123])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc129, #loc130])
#loc222 = loc(fused[#loc133, #loc131])
#loc223 = loc(fused[#loc134, #loc135])
#loc224 = loc(fused[#loc137, #loc138, #loc139, #loc135])
#loc225 = loc(fused[#loc143, #loc142])
#loc226 = loc(fused[#loc144, #loc145])
#loc227 = loc(fused[#loc147, #loc145])
#loc228 = loc(fused[#loc148, #loc149])
#loc229 = loc(fused[#loc151, #loc152])
#loc230 = loc(fused[#loc153, #loc154])
#loc231 = loc(fused[#loc157, #loc155])
#loc232 = loc(fused[#loc158, #loc159])
#loc233 = loc(fused[#loc161, #loc159])
#loc234 = loc(fused[#loc163, #loc162])
#loc235 = loc(fused[#loc164, #loc165])
#loc236 = loc(fused[#loc167, #loc165])
#loc237 = loc(fused[#loc168, #loc169])
