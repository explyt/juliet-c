!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":94:10)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":94:14)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":94:20)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":94:32)
#loc189 = loc(fused[#loc82, #loc83])
#loc190 = loc(fused[#loc84, #loc85])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc155)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc156)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc157)
  cir.func private @printIntLine(!s32i) loc(#loc158)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc159)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc16)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc18)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
      cir.yield %20 : !u32i loc(#loc18)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc18)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc18)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc18)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc18)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc18)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc18)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc18)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc18)
      cir.yield %24 : !u32i loc(#loc18)
    }) : (!cir.bool) -> !u32i loc(#loc18)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc18)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.scope {
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc165)
      %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc166)
      %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.store %12, %10 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      cir.scope {
        %13 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc168)
        %14 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc169)
        %15 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc32)
        %16 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc33)
        %18 = cir.const #cir.int<4> : !u64i loc(#loc170)
        %19 = cir.binop(mul, %17, %18) : !u64i loc(#loc171)
        %20 = cir.call @malloc(%19) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc32)
        %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc172)
        cir.store %21, %14 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc173)
        cir.scope {
          %29 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
          %30 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
          %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc41)
          %32 = cir.cmp(eq, %29, %31) : !cir.ptr<!s32i>, !cir.bool loc(#loc175)
          cir.if %32 {
            %33 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc43)
            %34 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %35 = cir.unary(minus, %34) : !s32i, !s32i loc(#loc45)
            cir.call @exit(%35) : (!s32i) -> () extra(#fn_attr) loc(#loc43)
          } loc(#loc176)
        } loc(#loc174)
        cir.scope {
          %29 = cir.const #cir.int<0> : !s32i loc(#loc48)
          %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc48)
          cir.store %30, %13 : !u64i, !cir.ptr<!u64i> loc(#loc178)
          cir.for : cond {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %32 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc51)
            %34 = cir.cmp(lt, %31, %33) : !u64i, !cir.bool loc(#loc179)
            cir.condition(%34) loc(#loc52)
          } body {
            cir.scope {
              %31 = cir.const #cir.int<0> : !s32i loc(#loc54)
              %32 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
              %33 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc56)
              %34 = cir.ptr_stride(%32 : !cir.ptr<!s32i>, %33 : !u64i), !cir.ptr<!s32i> loc(#loc57)
              cir.store %31, %34 : !s32i, !cir.ptr<!s32i> loc(#loc181)
            } loc(#loc180)
            cir.yield loc(#loc47)
          } step {
            %31 = cir.load %13 : !cir.ptr<!u64i>, !u64i loc(#loc58)
            %32 = cir.unary(inc, %31) : !u64i, !u64i loc(#loc59)
            cir.store %32, %13 : !u64i, !cir.ptr<!u64i> loc(#loc182)
            cir.yield loc(#loc177)
          } loc(#loc177)
        } loc(#loc177)
        %22 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc61)
        %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc62)
        %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc60)
        cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc63)
        %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
        %27 = cir.load %14 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc65)
        cir.call @free(%28) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc167)
    } loc(#loc164)
    cir.return loc(#loc12)
  } loc(#loc160)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    cir.return loc(#loc67)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc185)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc186)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc79)
  cir.func @main(%arg0: !s32i loc(fused[#loc82, #loc83]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc84, #loc85])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc81)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc86)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc87)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc88)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc88)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc89)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc76)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %8 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_good() : () -> () loc(#loc91)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc77)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc78)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %13 = cir.get_global @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31_bad() : () -> () loc(#loc95)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc79)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc98)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc104)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc105)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc107)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc199)
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc200)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc199)
      %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc114)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc200)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc202)
        %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc203)
        %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc121)
        %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc122)
        %13 = cir.const #cir.int<4> : !u64i loc(#loc204)
        %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc205)
        %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc121)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc206)
        cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
        cir.scope {
          %24 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc129)
          %25 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc130)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc130)
          %27 = cir.cmp(eq, %24, %26) : !cir.ptr<!s32i>, !cir.bool loc(#loc209)
          cir.if %27 {
            %28 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc132)
            %29 = cir.const #cir.int<1> : !s32i loc(#loc133)
            %30 = cir.unary(minus, %29) : !s32i, !s32i loc(#loc134)
            cir.call @exit(%30) : (!s32i) -> () extra(#fn_attr) loc(#loc132)
          } loc(#loc210)
        } loc(#loc208)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc137)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc137)
          cir.store %25, %8 : !u64i, !cir.ptr<!u64i> loc(#loc212)
          cir.for : cond {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc139)
            %27 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc140)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc213)
            cir.condition(%29) loc(#loc141)
          } body {
            cir.scope {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc143)
              %27 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc144)
              %28 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc145)
              %29 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %28 : !u64i), !cir.ptr<!s32i> loc(#loc146)
              cir.store %26, %29 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            } loc(#loc214)
            cir.yield loc(#loc136)
          } step {
            %26 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc147)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc148)
            cir.store %27, %8 : !u64i, !cir.ptr<!u64i> loc(#loc216)
            cir.yield loc(#loc211)
          } loc(#loc211)
        } loc(#loc211)
        %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc150)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc151)
        %20 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc149)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc152)
        %21 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
        %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
        cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc153)
      } loc(#loc201)
    } loc(#loc198)
    cir.return loc(#loc101)
  } loc(#loc194)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":21:1)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":46:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":23:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":23:9)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":25:13)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":25:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":25:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":27:12)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":27:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":28:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":45:5)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":29:9)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":29:24)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":30:9)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":30:20)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":31:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":44:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":32:13)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":32:20)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":33:13)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":33:18)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:32)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:39)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:46)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:56)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:57)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":36:13)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:13)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:47)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:17)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:31)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:37)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:38)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:44)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":37:43)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:13)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":41:13)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:22)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:18)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:25)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:37)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:27)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":39:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":40:33)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":40:17)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":40:28)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":40:29)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:44)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":38:43)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":42:26)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":42:37)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":42:38)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":42:13)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":43:13)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":43:18)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":80:1)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":83:1)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":82:5)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":82:13)
#loc70 = loc("/usr/include/stdlib.h":575:1)
#loc71 = loc("/usr/include/stdlib.h":575:41)
#loc72 = loc("/usr/include/time.h":76:1)
#loc73 = loc("/usr/include/time.h":76:38)
#loc74 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc75 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":99:15)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":101:15)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":104:15)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":106:15)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":94:1)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":109:1)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":95:1)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":97:27)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":97:22)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":97:5)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":99:5)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":100:5)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":100:69)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":101:5)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":104:5)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":105:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":105:68)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":106:5)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":108:12)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":108:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":53:1)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":78:1)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":55:5)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":55:9)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":57:13)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":57:12)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":57:5)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":59:12)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":59:5)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":60:5)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":77:5)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":61:9)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":61:24)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":62:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":62:20)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":63:9)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":76:9)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":64:13)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":64:20)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":65:13)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":65:18)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:32)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:39)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:46)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:56)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:57)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":68:13)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:13)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:47)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:17)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:31)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:37)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:38)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:44)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":69:43)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:13)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":73:13)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:22)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:18)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:25)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:37)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:27)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":71:13)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":72:33)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":72:17)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":72:28)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":72:29)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:44)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":70:43)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":74:26)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":74:37)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":74:38)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":74:13)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":75:13)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_31.c":75:18)
#loc155 = loc(fused[#loc1, #loc2])
#loc156 = loc(fused[#loc3, #loc4])
#loc157 = loc(fused[#loc5, #loc6])
#loc158 = loc(fused[#loc7, #loc8])
#loc159 = loc(fused[#loc9, #loc10])
#loc160 = loc(fused[#loc11, #loc12])
#loc161 = loc(fused[#loc13, #loc14])
#loc162 = loc(fused[#loc17, #loc15])
#loc163 = loc(fused[#loc19, #loc18])
#loc164 = loc(fused[#loc20, #loc21])
#loc165 = loc(fused[#loc22, #loc23])
#loc166 = loc(fused[#loc24, #loc25])
#loc167 = loc(fused[#loc26, #loc27])
#loc168 = loc(fused[#loc28, #loc29])
#loc169 = loc(fused[#loc30, #loc31])
#loc170 = loc(fused[#loc34, #loc35])
#loc171 = loc(fused[#loc33, #loc35])
#loc172 = loc(fused[#loc32, #loc36])
#loc173 = loc(fused[#loc37, #loc36])
#loc174 = loc(fused[#loc38, #loc39])
#loc175 = loc(fused[#loc40, #loc41])
#loc176 = loc(fused[#loc42, #loc39])
#loc177 = loc(fused[#loc46, #loc47])
#loc178 = loc(fused[#loc49, #loc48])
#loc179 = loc(fused[#loc50, #loc51])
#loc180 = loc(fused[#loc53, #loc47])
#loc181 = loc(fused[#loc55, #loc54])
#loc182 = loc(fused[#loc59, #loc58])
#loc183 = loc(fused[#loc66, #loc67])
#loc184 = loc(fused[#loc68, #loc69])
#loc185 = loc(fused[#loc70, #loc71])
#loc186 = loc(fused[#loc72, #loc73])
#loc187 = loc(fused[#loc74, #loc75])
#loc188 = loc(fused[#loc80, #loc81])
#loc191 = loc(fused[#loc91, #loc92])
#loc192 = loc(fused[#loc95, #loc96])
#loc193 = loc(fused[#loc99, #loc98])
#loc194 = loc(fused[#loc100, #loc101])
#loc195 = loc(fused[#loc102, #loc103])
#loc196 = loc(fused[#loc106, #loc104])
#loc197 = loc(fused[#loc108, #loc107])
#loc198 = loc(fused[#loc109, #loc110])
#loc199 = loc(fused[#loc111, #loc112])
#loc200 = loc(fused[#loc113, #loc114])
#loc201 = loc(fused[#loc115, #loc116])
#loc202 = loc(fused[#loc117, #loc118])
#loc203 = loc(fused[#loc119, #loc120])
#loc204 = loc(fused[#loc123, #loc124])
#loc205 = loc(fused[#loc122, #loc124])
#loc206 = loc(fused[#loc121, #loc125])
#loc207 = loc(fused[#loc126, #loc125])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc129, #loc130])
#loc210 = loc(fused[#loc131, #loc128])
#loc211 = loc(fused[#loc135, #loc136])
#loc212 = loc(fused[#loc138, #loc137])
#loc213 = loc(fused[#loc139, #loc140])
#loc214 = loc(fused[#loc142, #loc136])
#loc215 = loc(fused[#loc144, #loc143])
#loc216 = loc(fused[#loc148, #loc147])
