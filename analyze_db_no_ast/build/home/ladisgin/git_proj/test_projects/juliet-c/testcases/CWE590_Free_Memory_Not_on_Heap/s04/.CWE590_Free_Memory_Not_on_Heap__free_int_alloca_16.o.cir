!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc109)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc110)
  cir.func no_proto  @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc113)
    cir.scope {
      cir.while {
        %9 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%10) loc(#loc13)
      } do {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc116)
          %10 = cir.const #cir.int<100> : !s32i loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc17)
          %12 = cir.const #cir.int<4> : !u64i loc(#loc17)
          %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc17)
          %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc17)
          %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc17)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc17)
          cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc116)
          cir.scope {
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc118)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc24)
              %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc24)
              cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc120)
              cir.for : cond {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc26)
                %22 = cir.const #cir.int<100> : !s32i loc(#loc27)
                %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc27)
                %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc121)
                %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc28)
                cir.condition(%25) loc(#loc28)
              } body {
                cir.scope {
                  %21 = cir.const #cir.int<5> : !s32i loc(#loc30)
                  %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc31)
                  %23 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc32)
                  %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc33)
                  cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc123)
                } loc(#loc122)
                cir.yield loc(#loc23)
              } step {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc34)
                %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc35)
                cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc124)
                cir.yield loc(#loc119)
              } loc(#loc119)
            } loc(#loc119)
          } loc(#loc117)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
          cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc125)
        } loc(#loc115)
        cir.break loc(#loc38)
      } loc(#loc114)
    } loc(#loc114)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc40)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc42)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc43)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc44)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc44)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc43)
    cir.return loc(#loc6)
  } loc(#loc111)
  cir.func no_proto  @CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc126)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc128)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc129)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"malloc() failed\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc53)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc60)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc133)
    cir.scope {
      cir.while {
        %9 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc64)
        cir.condition(%10) loc(#loc64)
      } do {
        cir.scope {
          %9 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc136)
          %10 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc69)
          %11 = cir.const #cir.int<100> : !s32i loc(#loc70)
          %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc70)
          %13 = cir.const #cir.int<4> : !u64i loc(#loc137)
          %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc138)
          %15 = cir.call @malloc(%14) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc69)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc139)
          cir.store %16, %9 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc136)
          cir.scope {
            %18 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc76)
            %21 = cir.cmp(eq, %18, %20) : !cir.ptr<!s32i>, !s32i loc(#loc141)
            %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc77)
            cir.if %22 {
              %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc53)
              %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc53)
              cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc79)
              %25 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc80)
              %26 = cir.const #cir.int<1> : !s32i loc(#loc81)
              cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc80)
            } loc(#loc142)
          } loc(#loc140)
          cir.scope {
            %18 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc144)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc88)
              %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc88)
              cir.store %20, %18 : !u64i, !cir.ptr<!u64i> loc(#loc146)
              cir.for : cond {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc90)
                %22 = cir.const #cir.int<100> : !s32i loc(#loc91)
                %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc91)
                %24 = cir.cmp(lt, %21, %23) : !u64i, !s32i loc(#loc147)
                %25 = cir.cast(int_to_bool, %24 : !s32i), !cir.bool loc(#loc92)
                cir.condition(%25) loc(#loc92)
              } body {
                cir.scope {
                  %21 = cir.const #cir.int<5> : !s32i loc(#loc94)
                  %22 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
                  %23 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc96)
                  %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc97)
                  cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc149)
                } loc(#loc148)
                cir.yield loc(#loc87)
              } step {
                %21 = cir.load %18 : !cir.ptr<!u64i>, !u64i loc(#loc98)
                %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc99)
                cir.store %22, %18 : !u64i, !cir.ptr<!u64i> loc(#loc150)
                cir.yield loc(#loc145)
              } loc(#loc145)
            } loc(#loc145)
          } loc(#loc143)
          %17 = cir.load %9 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
          cir.store %17, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
        } loc(#loc135)
        cir.break loc(#loc102)
      } loc(#loc134)
    } loc(#loc134)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc103)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc104)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!s32i>, %3 : !s32i), !cir.ptr<!s32i> loc(#loc105)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc103)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc106)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc107)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc108)
    cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    cir.return loc(#loc57)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE590_Free_Memory_Not_on_Heap/s04/CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":23:1)
#loc6 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":46:1)
#loc7 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":25:5)
#loc8 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":25:11)
#loc9 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":26:12)
#loc10 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":26:5)
#loc11 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":27:5)
#loc12 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":42:5)
#loc13 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":27:11)
#loc14 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":29:9)
#loc15 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":40:9)
#loc16 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":31:13)
#loc17 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":31:39)
#loc18 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":32:13)
#loc19 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":38:13)
#loc20 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":33:17)
#loc21 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":33:24)
#loc22 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:17)
#loc23 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":37:17)
#loc24 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:26)
#loc25 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:22)
#loc26 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:29)
#loc27 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:33)
#loc28 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:31)
#loc29 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":35:17)
#loc30 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:37)
#loc31 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:21)
#loc32 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:32)
#loc33 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":36:33)
#loc34 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:39)
#loc35 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":34:38)
#loc36 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":39:20)
#loc37 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":39:13)
#loc38 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":41:9)
#loc39 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:18)
#loc40 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:23)
#loc41 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:24)
#loc42 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":43:5)
#loc43 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":45:5)
#loc44 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":45:10)
#loc45 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":83:1)
#loc46 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":86:1)
#loc47 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":85:5)
#loc48 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":85:13)
#loc49 = loc("/usr/include/stdlib.h":672:1)
#loc50 = loc("/usr/include/stdlib.h":672:45)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":64:27)
#loc54 = loc("/usr/include/stdlib.h":756:1)
#loc55 = loc("/usr/include/stdlib.h":756:70)
#loc56 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":53:1)
#loc57 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":81:1)
#loc58 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":55:5)
#loc59 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":55:11)
#loc60 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":56:12)
#loc61 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":56:5)
#loc62 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":57:5)
#loc63 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":77:5)
#loc64 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":57:11)
#loc65 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":59:9)
#loc66 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":75:9)
#loc67 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:13)
#loc68 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:61)
#loc69 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:39)
#loc70 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:46)
#loc71 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:50)
#loc72 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":61:60)
#loc73 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:13)
#loc74 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":66:13)
#loc75 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:17)
#loc76 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:31)
#loc77 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":62:28)
#loc78 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":63:13)
#loc79 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":64:17)
#loc80 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":65:17)
#loc81 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":65:22)
#loc82 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":67:13)
#loc83 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":73:13)
#loc84 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":68:17)
#loc85 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":68:24)
#loc86 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:17)
#loc87 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":72:17)
#loc88 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:26)
#loc89 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:22)
#loc90 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:29)
#loc91 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:33)
#loc92 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:31)
#loc93 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":70:17)
#loc94 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:37)
#loc95 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:21)
#loc96 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:32)
#loc97 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":71:33)
#loc98 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:39)
#loc99 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":69:38)
#loc100 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":74:20)
#loc101 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":74:13)
#loc102 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":76:9)
#loc103 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:18)
#loc104 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:23)
#loc105 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:24)
#loc106 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":78:5)
#loc107 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":80:5)
#loc108 = loc("CWE590_Free_Memory_Not_on_Heap__free_int_alloca_16.c":80:10)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc5, #loc6])
#loc112 = loc(fused[#loc7, #loc8])
#loc113 = loc(fused[#loc10, #loc9])
#loc114 = loc(fused[#loc11, #loc12])
#loc115 = loc(fused[#loc14, #loc15])
#loc116 = loc(fused[#loc16, #loc17])
#loc117 = loc(fused[#loc18, #loc19])
#loc118 = loc(fused[#loc20, #loc21])
#loc119 = loc(fused[#loc22, #loc23])
#loc120 = loc(fused[#loc25, #loc24])
#loc121 = loc(fused[#loc26, #loc27])
#loc122 = loc(fused[#loc29, #loc23])
#loc123 = loc(fused[#loc31, #loc30])
#loc124 = loc(fused[#loc35, #loc34])
#loc125 = loc(fused[#loc37, #loc36])
#loc126 = loc(fused[#loc45, #loc46])
#loc127 = loc(fused[#loc47, #loc48])
#loc128 = loc(fused[#loc49, #loc50])
#loc129 = loc(fused[#loc51, #loc52])
#loc130 = loc(fused[#loc54, #loc55])
#loc131 = loc(fused[#loc56, #loc57])
#loc132 = loc(fused[#loc58, #loc59])
#loc133 = loc(fused[#loc61, #loc60])
#loc134 = loc(fused[#loc62, #loc63])
#loc135 = loc(fused[#loc65, #loc66])
#loc136 = loc(fused[#loc67, #loc68])
#loc137 = loc(fused[#loc71, #loc72])
#loc138 = loc(fused[#loc70, #loc72])
#loc139 = loc(fused[#loc69, #loc68])
#loc140 = loc(fused[#loc73, #loc74])
#loc141 = loc(fused[#loc75, #loc76])
#loc142 = loc(fused[#loc78, #loc74])
#loc143 = loc(fused[#loc82, #loc83])
#loc144 = loc(fused[#loc84, #loc85])
#loc145 = loc(fused[#loc86, #loc87])
#loc146 = loc(fused[#loc89, #loc88])
#loc147 = loc(fused[#loc90, #loc91])
#loc148 = loc(fused[#loc93, #loc87])
#loc149 = loc(fused[#loc95, #loc94])
#loc150 = loc(fused[#loc99, #loc98])
#loc151 = loc(fused[#loc101, #loc100])
