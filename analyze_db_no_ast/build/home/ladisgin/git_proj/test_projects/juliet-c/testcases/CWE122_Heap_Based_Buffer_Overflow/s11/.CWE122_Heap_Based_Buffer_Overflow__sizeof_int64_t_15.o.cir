!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc122)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc123)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func private  @printLongLongLine(!s64i) loc(#loc125)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc16)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc129)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%7 : !s32i) [
      case (equal, 6) {
        %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc131)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc132)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc133)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc29)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !s32i loc(#loc135)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc30)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc32)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc33)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc34)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc32)
          } loc(#loc136)
        } loc(#loc134)
        %12 = cir.const #cir.int<2147483643> : !s64i loc(#loc35)
        %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
        cir.store %12, %13 : !s64i, !cir.ptr<!s64i> loc(#loc137)
        cir.break loc(#loc38)
      },
      case (default) {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc39)
        cir.break loc(#loc40)
      }
      ] loc(#loc18)
    } loc(#loc130)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc41)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc43)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc44)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc45)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc45)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc44)
    cir.return loc(#loc13)
  } loc(#loc127)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc139)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc140)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc138)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc142)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc56)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc143)
    cir.scope {
      %7 = cir.const #cir.int<5> : !s32i loc(#loc60)
      cir.switch (%7 : !s32i) [
      case (equal, 6) {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc62)
        cir.break loc(#loc63)
      },
      case (default) {
        %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc64)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc145)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc64)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc146)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc147)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc71)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc72)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc72)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !s32i loc(#loc149)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc73)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc75)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc76)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc77)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc75)
          } loc(#loc150)
        } loc(#loc148)
        %12 = cir.const #cir.int<2147483643> : !s64i loc(#loc78)
        %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc79)
        cir.store %12, %13 : !s64i, !cir.ptr<!s64i> loc(#loc151)
        cir.break loc(#loc81)
      }
      ] loc(#loc58)
    } loc(#loc144)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc82)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc83)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc84)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc85)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc86)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc86)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    cir.return loc(#loc53)
  } loc(#loc141)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc91)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc154)
    cir.scope {
      %7 = cir.const #cir.int<6> : !s32i loc(#loc95)
      cir.switch (%7 : !s32i) [
      case (equal, 6) {
        %8 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc96)
        %9 = cir.const #cir.int<8> : !u64i loc(#loc156)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc157)
        cir.store %11, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc158)
        cir.scope {
          %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc103)
          %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc104)
          %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s64i>, !s32i loc(#loc160)
          %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc105)
          cir.if %18 {
            %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
            %20 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc109)
            cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
          } loc(#loc161)
        } loc(#loc159)
        %12 = cir.const #cir.int<2147483643> : !s64i loc(#loc110)
        %13 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc111)
        cir.store %12, %13 : !s64i, !cir.ptr<!s64i> loc(#loc162)
        cir.break loc(#loc113)
      },
      case (default) {
        %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc114)
        %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc114)
        cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc115)
        cir.break loc(#loc116)
      }
      ] loc(#loc93)
    } loc(#loc155)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc117)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc118)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc119)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc120)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc121)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc121)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc120)
    cir.return loc(#loc88)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":37:19)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":21:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":43:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":23:15)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":25:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":25:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":26:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":39:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":26:12)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:45)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":31:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:18)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:27)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:28)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:34)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":32:33)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":34:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":38:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":41:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":42:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":42:10)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":97:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":101:1)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":99:5)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":99:14)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":100:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":100:14)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":50:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":71:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":52:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":52:15)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":54:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":54:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":55:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":67:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":55:12)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":59:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":59:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":60:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:34)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:46)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:47)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":63:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:21)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:27)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:28)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":64:33)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:17)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:10)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":65:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":66:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:24)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":69:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":70:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":70:10)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":74:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":95:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":76:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":76:15)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":78:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":78:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":79:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":91:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":79:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:34)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:46)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:47)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":83:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:37)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:21)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:18)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:28)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:34)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":84:33)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:10)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":85:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":86:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":89:19)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":89:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":90:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:23)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":93:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":94:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_15.c":94:10)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc5, #loc6])
#loc125 = loc(fused[#loc8, #loc9])
#loc126 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc12, #loc13])
#loc128 = loc(fused[#loc14, #loc15])
#loc129 = loc(fused[#loc17, #loc16])
#loc130 = loc(fused[#loc18, #loc19])
#loc131 = loc(fused[#loc22, #loc23])
#loc132 = loc(fused[#loc21, #loc24])
#loc133 = loc(fused[#loc25, #loc24])
#loc134 = loc(fused[#loc26, #loc27])
#loc135 = loc(fused[#loc28, #loc29])
#loc136 = loc(fused[#loc31, #loc27])
#loc137 = loc(fused[#loc37, #loc35])
#loc138 = loc(fused[#loc46, #loc47])
#loc139 = loc(fused[#loc48, #loc49])
#loc140 = loc(fused[#loc50, #loc51])
#loc141 = loc(fused[#loc52, #loc53])
#loc142 = loc(fused[#loc54, #loc55])
#loc143 = loc(fused[#loc57, #loc56])
#loc144 = loc(fused[#loc58, #loc59])
#loc145 = loc(fused[#loc65, #loc66])
#loc146 = loc(fused[#loc64, #loc67])
#loc147 = loc(fused[#loc68, #loc67])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc71, #loc72])
#loc150 = loc(fused[#loc74, #loc70])
#loc151 = loc(fused[#loc80, #loc78])
#loc152 = loc(fused[#loc87, #loc88])
#loc153 = loc(fused[#loc89, #loc90])
#loc154 = loc(fused[#loc92, #loc91])
#loc155 = loc(fused[#loc93, #loc94])
#loc156 = loc(fused[#loc97, #loc98])
#loc157 = loc(fused[#loc96, #loc99])
#loc158 = loc(fused[#loc100, #loc99])
#loc159 = loc(fused[#loc101, #loc102])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc106, #loc102])
#loc162 = loc(fused[#loc112, #loc110])
