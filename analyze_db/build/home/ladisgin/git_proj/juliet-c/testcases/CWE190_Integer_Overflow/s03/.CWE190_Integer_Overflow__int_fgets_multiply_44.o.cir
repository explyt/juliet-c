!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:21)
#loc6 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:25)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:25)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:29)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:25)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:29)
#loc147 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc64, #loc65])
#loc181 = loc(fused[#loc92, #loc93])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc147)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc149)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc150)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc146)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc152)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc153)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc26)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc157)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %2 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc159)
    %3 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    cir.store %3, %2 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc159)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc35)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc157)
    cir.store %5, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc157)
    cir.br ^bb2 loc(#loc162)
  ^bb2:  // pred: ^bb1
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc41)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc42)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc42)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc42)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc42)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc42)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc42)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc42)
    %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc42)
    %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc43)
    %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc44)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc45)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
    %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc163)
    cir.brcond %20 ^bb3, ^bb4 loc(#loc164)
  ^bb3:  // pred: ^bb2
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc49)
    %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc50)
    cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb5 loc(#loc47)
  ^bb4:  // pred: ^bb2
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc26)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb5 loc(#loc40)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc40)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc38)
  ^bb7:  // pred: ^bb6
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc54)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    cir.call %25(%26) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc54)
    cir.return loc(#loc28)
  } loc(#loc156)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc166)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc64, #loc65])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc170)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb1 loc(#loc172)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc72)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc173)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc174)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc67)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc74)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc76)
    cir.br ^bb3 loc(#loc70)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc70)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc63)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc82)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc177)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc85)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc87)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc87)
    cir.return loc(#loc78)
  } loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc89)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc92, #loc93])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc181)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb1 loc(#loc183)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc184)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc185)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc186)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc106)
    %8 = cir.binop(div, %6, %7) : !s32i loc(#loc187)
    %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc188)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc189)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc95)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc111)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc112)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc113)
    cir.br ^bb6 loc(#loc109)
  ^bb5:  // pred: ^bb3
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc89)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    cir.br ^bb6 loc(#loc103)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc103)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc98)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc98)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc91)
  } loc(#loc180)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc191)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc192)
    %2 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc193)
    %3 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc122)
    cir.store %3, %2 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc193)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc123)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb1 loc(#loc195)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc191)
    cir.store %5, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc191)
    cir.br ^bb2 loc(#loc196)
  ^bb2:  // pred: ^bb1
    %6 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc129)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc130)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc130)
    %9 = cir.const #cir.int<4> : !u64i loc(#loc130)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc130)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc130)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc130)
    %13 = cir.binop(add, %10, %12) : !u64i loc(#loc130)
    %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc130)
    %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc131)
    %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc132)
    %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc133)
    %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc133)
    %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc197)
    cir.brcond %20 ^bb3, ^bb4 loc(#loc198)
  ^bb3:  // pred: ^bb2
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
    %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc138)
    cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb5 loc(#loc135)
  ^bb4:  // pred: ^bb2
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc141)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb5 loc(#loc128)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc128)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc126)
  ^bb7:  // pred: ^bb6
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    cir.call %25(%26) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc143)
    cir.return loc(#loc116)
  } loc(#loc190)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":32:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:9)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:29)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":25:1)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":31:5)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:8)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":26:15)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":29:22)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":30:22)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":30:9)
#loc18 = loc("/usr/include/stdio.h":654:1)
#loc19 = loc("/usr/include/stdio.h":655:59)
#loc20 = loc("/usr/include/stdio.h":149:1)
#loc21 = loc("/usr/include/stdio.h":149:14)
#loc22 = loc("/usr/include/stdlib.h":105:1)
#loc23 = loc("/usr/include/stdlib.h":106:33)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":51:23)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":34:1)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":56:1)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":42:9)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":42:45)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":36:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":36:9)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":38:5)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":38:29)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":40:12)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":40:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":41:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":53:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":52:9)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:19)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:32)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:49)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:13)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":44:59)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":45:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":48:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":50:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:25)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:20)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:13)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":47:36)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":51:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":55:5)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":55:13)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":124:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":128:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":126:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":126:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":127:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":127:13)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":63:1)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":71:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:29)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":64:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":70:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:8)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":65:15)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":66:5)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":68:22)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":69:22)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":69:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":73:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":82:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":75:5)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":75:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":76:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":76:29)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":78:12)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":78:5)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":80:12)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":80:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":81:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":81:13)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":97:23)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":85:1)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":100:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:13)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:33)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":86:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":99:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:8)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":87:15)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":88:5)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":98:9)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:21)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:29)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":90:30)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":91:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":94:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":96:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":92:26)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":93:26)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":93:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":97:13)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":102:1)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":122:1)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":109:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":109:45)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":104:5)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":104:9)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":105:5)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":105:29)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":107:12)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":107:5)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":108:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":120:5)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":119:9)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:19)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:32)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:49)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":111:59)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":112:9)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":115:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":117:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:25)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:20)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:13)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":114:36)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":118:23)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":118:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":121:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_44.c":121:13)
#loc145 = loc(fused[#loc1, #loc2])
#loc146 = loc(fused[#loc3, #loc4])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc10, #loc11])
#loc150 = loc(fused[#loc12, #loc13])
#loc151 = loc(fused[#loc14, #loc11])
#loc152 = loc(fused[#loc18, #loc19])
#loc153 = loc(fused[#loc20, #loc21])
#loc154 = loc(fused[#loc22, #loc23])
#loc155 = loc(fused[#loc24, #loc25])
#loc156 = loc(fused[#loc27, #loc28])
#loc157 = loc(fused[#loc29, #loc30])
#loc158 = loc(fused[#loc31, #loc32])
#loc159 = loc(fused[#loc33, #loc34])
#loc160 = loc(fused[#loc36, #loc35])
#loc161 = loc(fused[#loc37, #loc38])
#loc162 = loc(fused[#loc39, #loc40])
#loc163 = loc(fused[#loc44, #loc45])
#loc164 = loc(fused[#loc46, #loc47, #loc48, #loc40])
#loc165 = loc(fused[#loc51, #loc52])
#loc166 = loc(fused[#loc56, #loc57])
#loc167 = loc(fused[#loc58, #loc59])
#loc168 = loc(fused[#loc60, #loc61])
#loc169 = loc(fused[#loc62, #loc63])
#loc171 = loc(fused[#loc66, #loc67])
#loc172 = loc(fused[#loc69, #loc70])
#loc173 = loc(fused[#loc71, #loc72])
#loc174 = loc(fused[#loc73, #loc70])
#loc175 = loc(fused[#loc77, #loc78])
#loc176 = loc(fused[#loc79, #loc80])
#loc177 = loc(fused[#loc81, #loc82])
#loc178 = loc(fused[#loc84, #loc83])
#loc179 = loc(fused[#loc86, #loc85])
#loc180 = loc(fused[#loc90, #loc91])
#loc182 = loc(fused[#loc94, #loc95])
#loc183 = loc(fused[#loc97, #loc98])
#loc184 = loc(fused[#loc99, #loc100])
#loc185 = loc(fused[#loc101, #loc98])
#loc186 = loc(fused[#loc102, #loc103])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc104, #loc107])
#loc189 = loc(fused[#loc108, #loc109, #loc110, #loc103])
#loc190 = loc(fused[#loc115, #loc116])
#loc191 = loc(fused[#loc117, #loc118])
#loc192 = loc(fused[#loc119, #loc120])
#loc193 = loc(fused[#loc121, #loc122])
#loc194 = loc(fused[#loc124, #loc123])
#loc195 = loc(fused[#loc125, #loc126])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc132, #loc133])
#loc198 = loc(fused[#loc134, #loc135, #loc136, #loc128])
#loc199 = loc(fused[#loc139, #loc140])
