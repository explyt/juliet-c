!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":24:22)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":24:26)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":29:16)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":66:27)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":66:31)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":105:27)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":105:31)
#loc230 = loc(fused[#loc7, #loc8])
#loc266 = loc(fused[#loc92, #loc93])
#loc294 = loc(fused[#loc163, #loc164])
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc227)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc228)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc7, #loc8])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc230)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc6)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc231)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc227)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc232)
  ^bb2:  // pred: ^bb1
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc14)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %8 ^bb3, ^bb4 loc(#loc14)
  ^bb3:  // pred: ^bb2
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
    cir.br ^bb5(%20 : !u32i) loc(#loc14)
  ^bb4:  // pred: ^bb2
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc14)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc14)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc14)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc14)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc14)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc14)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc14)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc14)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc14)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc14)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc14)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc14)
    cir.br ^bb5(%36 : !u32i) loc(#loc14)
  ^bb5(%37: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":29:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc14)
  ^bb6:  // pred: ^bb5
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc14)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    cir.br ^bb7 loc(#loc11)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc11)
  ^bb8:  // pred: ^bb7
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    %40 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc234)
    cir.return %40 : !s32i loc(#loc234)
  } loc(#loc229)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc235)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc236)
  cir.func private @printIntLine(!s32i) loc(#loc237)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc238)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc242)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc35)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %6 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc227)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %8 = cir.call @badSource(%7) : (!s32i) -> !s32i loc(#loc40)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    cir.br ^bb1 loc(#loc246)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc45)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc46)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc46)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc247)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc248)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc45)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc249)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc250)
    cir.br ^bb2 loc(#loc251)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc53)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc252)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc253)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc56)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc58)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc56)
    cir.br ^bb4 loc(#loc52)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc52)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc254)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc61)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc255)
    cir.br ^bb7 loc(#loc254)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc63)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc64)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc256)
    cir.brcond %28 ^bb8, ^bb12 loc(#loc65)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc257)
  ^bb9:  // pred: ^bb8
    %29 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc69)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc70)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc71)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc72)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc259)
    cir.br ^bb7 loc(#loc254)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc60)
  ^bb13:  // pred: ^bb12
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc73)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc75)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc76)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc77)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc77)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb14 loc(#loc44)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc27)
  } loc(#loc239)
  cir.func no_proto @CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc261)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc81)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc262)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc83)
    cir.return loc(#loc80)
  } loc(#loc260)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc263)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc264)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc89)
  cir.func internal private @goodG2B1Source(%arg0: !s32i loc(fused[#loc92, #loc93])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc266)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc91)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb1 loc(#loc267)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc263)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc97)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc268)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc89)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc89)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc101)
    cir.br ^bb4 loc(#loc99)
  ^bb3:  // pred: ^bb1
    %7 = cir.const #cir.int<20> : !s32i loc(#loc102)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.br ^bb4 loc(#loc96)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc96)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc270)
    %9 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc270)
    cir.return %9 : !s32i loc(#loc270)
  } loc(#loc265)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc274)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc115)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc275)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc117)
    %6 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc263)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %8 = cir.call @goodG2B1Source(%7) : (!s32i) -> !s32i loc(#loc120)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.br ^bb1 loc(#loc278)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc125)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc126)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc279)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc280)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc125)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc281)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc282)
    cir.br ^bb2 loc(#loc283)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc133)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc134)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc284)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc285)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc136)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc137)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc138)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc136)
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc132)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc286)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc141)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc141)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc287)
    cir.br ^bb7 loc(#loc286)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc143)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc144)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc144)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc288)
    cir.brcond %28 ^bb8, ^bb12 loc(#loc145)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc289)
  ^bb9:  // pred: ^bb8
    %29 = cir.const #cir.int<0> : !s32i loc(#loc147)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc149)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc150)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    cir.br ^bb10 loc(#loc140)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc140)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc151)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc152)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc291)
    cir.br ^bb7 loc(#loc286)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc140)
  ^bb13:  // pred: ^bb12
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc153)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc154)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc155)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc156)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc157)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc157)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc158)
    cir.br ^bb14 loc(#loc124)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc107)
  } loc(#loc271)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc292)
  cir.func internal private @goodG2B2Source(%arg0: !s32i loc(fused[#loc163, #loc164])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc162)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.br ^bb1 loc(#loc295)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc292)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc168)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc296)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<20> : !s32i loc(#loc170)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.br ^bb3 loc(#loc167)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc167)
  ^bb4:  // pred: ^bb3
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc298)
    cir.return %7 : !s32i loc(#loc298)
  } loc(#loc293)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc301)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc302)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc183)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc303)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %6 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc292)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    %8 = cir.call @goodG2B2Source(%7) : (!s32i) -> !s32i loc(#loc188)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    cir.br ^bb1 loc(#loc306)
  ^bb1:  // pred: ^bb0
    %9 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc193)
    %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc194)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc194)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc307)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc308)
    %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc193)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc309)
    cir.store %15, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc310)
    cir.br ^bb2 loc(#loc311)
  ^bb2:  // pred: ^bb1
    %16 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc201)
    %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc202)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc202)
    %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc312)
    cir.brcond %19 ^bb3, ^bb4 loc(#loc313)
  ^bb3:  // pred: ^bb2
    %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc204)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc205)
    %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc206)
    cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc204)
    cir.br ^bb4 loc(#loc200)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc200)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc314)
  ^bb6:  // pred: ^bb5
    %23 = cir.const #cir.int<0> : !s32i loc(#loc209)
    %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc209)
    cir.store %24, %0 : !u64i, !cir.ptr<!u64i> loc(#loc315)
    cir.br ^bb7 loc(#loc314)
  ^bb7:  // 2 preds: ^bb6, ^bb11
    %25 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc211)
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc212)
    %28 = cir.cmp(lt, %25, %27) : !u64i, !cir.bool loc(#loc316)
    cir.brcond %28 ^bb8, ^bb12 loc(#loc213)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc317)
  ^bb9:  // pred: ^bb8
    %29 = cir.const #cir.int<0> : !s32i loc(#loc215)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc216)
    %31 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc217)
    %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc218)
    cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc318)
    cir.br ^bb10 loc(#loc208)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc208)
  ^bb11:  // pred: ^bb10
    %33 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc219)
    %34 = cir.unary(inc, %33) : !u64i, !u64i loc(#loc220)
    cir.store %34, %0 : !u64i, !cir.ptr<!u64i> loc(#loc319)
    cir.br ^bb7 loc(#loc314)
  ^bb12:  // pred: ^bb7
    cir.br ^bb13 loc(#loc208)
  ^bb13:  // pred: ^bb12
    %35 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc221)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc222)
    %37 = cir.ptr_stride(%35 : !cir.ptr<!s32i>, %36 : !s32i), !cir.ptr<!s32i> loc(#loc223)
    %38 = cir.load %37 : !cir.ptr<!s32i>, !s32i loc(#loc221)
    cir.call @printIntLine(%38) : (!s32i) -> () loc(#loc224)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc225)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc225)
    cir.call @free(%40) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc226)
    cir.br ^bb14 loc(#loc192)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc175)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":0:0)
#loc1 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":22:1)
#loc2 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":24:1)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":32:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":25:1)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":26:5)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":30:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":26:8)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":27:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":29:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":31:12)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":31:5)
#loc18 = loc("/usr/include/stdlib.h":672:1)
#loc19 = loc("/usr/include/stdlib.h":672:45)
#loc20 = loc("/usr/include/stdlib.h":756:1)
#loc21 = loc("/usr/include/stdlib.h":756:70)
#loc22 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("/usr/include/stdlib.h":687:1)
#loc25 = loc("/usr/include/stdlib.h":687:32)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":34:1)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":55:1)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":42:9)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":42:16)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":43:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":43:14)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":36:5)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":36:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":38:13)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":38:12)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":38:5)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":39:17)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":39:5)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":40:22)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":40:12)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":40:5)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":40:26)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":41:5)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":54:5)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:28)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:35)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:42)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:52)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:53)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":46:9)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:9)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:43)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:13)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:27)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:34)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:40)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":47:39)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:9)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":51:9)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:18)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:14)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:21)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:33)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:23)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":49:9)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":50:29)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":50:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":50:24)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":50:25)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:40)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":48:39)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":52:22)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":52:33)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":52:34)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":52:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":53:14)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":53:9)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":138:1)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":142:1)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":140:5)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":140:14)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":141:5)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":141:14)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":62:1)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":62:29)
#loc87 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc88 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":71:19)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":66:1)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":79:1)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":67:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":68:5)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":77:5)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":68:8)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":69:5)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":72:5)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":74:5)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":71:9)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":76:16)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":76:9)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":78:12)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":78:5)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":81:1)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":102:1)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":89:9)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":89:16)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":90:9)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":90:14)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":83:5)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":83:9)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":85:13)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":85:12)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":85:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":86:22)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":86:5)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":87:27)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":87:12)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":87:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":87:31)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":88:5)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":101:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:28)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:35)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:42)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:52)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:53)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":93:9)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:9)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:43)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:13)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:27)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:33)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:34)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:40)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":94:39)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:9)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":98:9)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:18)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:14)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:21)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:33)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:23)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":96:9)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":97:29)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":97:13)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":97:24)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":97:25)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:40)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":95:39)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":99:22)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":99:33)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":99:34)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":99:9)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":100:14)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":100:9)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":63:1)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":63:29)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":105:1)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":113:1)
#loc165 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":106:1)
#loc166 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":107:5)
#loc167 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":111:5)
#loc168 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":107:8)
#loc169 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":108:5)
#loc170 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":110:16)
#loc171 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":110:9)
#loc172 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":112:12)
#loc173 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":112:5)
#loc174 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":115:1)
#loc175 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":136:1)
#loc176 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":123:9)
#loc177 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":123:16)
#loc178 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":124:9)
#loc179 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":124:14)
#loc180 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":117:5)
#loc181 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":117:9)
#loc182 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":119:13)
#loc183 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":119:12)
#loc184 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":119:5)
#loc185 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":120:22)
#loc186 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":120:5)
#loc187 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":121:27)
#loc188 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":121:12)
#loc189 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":121:5)
#loc190 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":121:31)
#loc191 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":122:5)
#loc192 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":135:5)
#loc193 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:28)
#loc194 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:35)
#loc195 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:42)
#loc196 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:52)
#loc197 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:53)
#loc198 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":127:9)
#loc199 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:9)
#loc200 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:43)
#loc201 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:13)
#loc202 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:27)
#loc203 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:33)
#loc204 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:34)
#loc205 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:40)
#loc206 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":128:39)
#loc207 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:9)
#loc208 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":132:9)
#loc209 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:18)
#loc210 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:14)
#loc211 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:21)
#loc212 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:33)
#loc213 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:23)
#loc214 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":130:9)
#loc215 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":131:29)
#loc216 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":131:13)
#loc217 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":131:24)
#loc218 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":131:25)
#loc219 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:40)
#loc220 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":129:39)
#loc221 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":133:22)
#loc222 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":133:33)
#loc223 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":133:34)
#loc224 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":133:9)
#loc225 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":134:14)
#loc226 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__malloc_rand_21.c":134:9)
#loc227 = loc(fused[#loc1, #loc2])
#loc228 = loc(fused[#loc3, #loc4])
#loc229 = loc(fused[#loc5, #loc6])
#loc231 = loc(fused[#loc10, #loc11])
#loc232 = loc(fused[#loc13, #loc11])
#loc233 = loc(fused[#loc15, #loc14])
#loc234 = loc(fused[#loc17, #loc16])
#loc235 = loc(fused[#loc18, #loc19])
#loc236 = loc(fused[#loc20, #loc21])
#loc237 = loc(fused[#loc22, #loc23])
#loc238 = loc(fused[#loc24, #loc25])
#loc239 = loc(fused[#loc26, #loc27])
#loc240 = loc(fused[#loc28, #loc29])
#loc241 = loc(fused[#loc30, #loc31])
#loc242 = loc(fused[#loc32, #loc33])
#loc243 = loc(fused[#loc36, #loc34])
#loc244 = loc(fused[#loc38, #loc37])
#loc245 = loc(fused[#loc41, #loc42])
#loc246 = loc(fused[#loc43, #loc44])
#loc247 = loc(fused[#loc47, #loc48])
#loc248 = loc(fused[#loc46, #loc48])
#loc249 = loc(fused[#loc45, #loc49])
#loc250 = loc(fused[#loc50, #loc49])
#loc251 = loc(fused[#loc51, #loc52])
#loc252 = loc(fused[#loc53, #loc54])
#loc253 = loc(fused[#loc55, #loc52])
#loc254 = loc(fused[#loc59, #loc60])
#loc255 = loc(fused[#loc62, #loc61])
#loc256 = loc(fused[#loc63, #loc64])
#loc257 = loc(fused[#loc66, #loc60])
#loc258 = loc(fused[#loc68, #loc67])
#loc259 = loc(fused[#loc72, #loc71])
#loc260 = loc(fused[#loc79, #loc80])
#loc261 = loc(fused[#loc81, #loc82])
#loc262 = loc(fused[#loc83, #loc84])
#loc263 = loc(fused[#loc85, #loc86])
#loc264 = loc(fused[#loc87, #loc88])
#loc265 = loc(fused[#loc90, #loc91])
#loc267 = loc(fused[#loc95, #loc96])
#loc268 = loc(fused[#loc98, #loc99, #loc100, #loc96])
#loc269 = loc(fused[#loc103, #loc102])
#loc270 = loc(fused[#loc105, #loc104])
#loc271 = loc(fused[#loc106, #loc107])
#loc272 = loc(fused[#loc108, #loc109])
#loc273 = loc(fused[#loc110, #loc111])
#loc274 = loc(fused[#loc112, #loc113])
#loc275 = loc(fused[#loc116, #loc114])
#loc276 = loc(fused[#loc118, #loc117])
#loc277 = loc(fused[#loc121, #loc122])
#loc278 = loc(fused[#loc123, #loc124])
#loc279 = loc(fused[#loc127, #loc128])
#loc280 = loc(fused[#loc126, #loc128])
#loc281 = loc(fused[#loc125, #loc129])
#loc282 = loc(fused[#loc130, #loc129])
#loc283 = loc(fused[#loc131, #loc132])
#loc284 = loc(fused[#loc133, #loc134])
#loc285 = loc(fused[#loc135, #loc132])
#loc286 = loc(fused[#loc139, #loc140])
#loc287 = loc(fused[#loc142, #loc141])
#loc288 = loc(fused[#loc143, #loc144])
#loc289 = loc(fused[#loc146, #loc140])
#loc290 = loc(fused[#loc148, #loc147])
#loc291 = loc(fused[#loc152, #loc151])
#loc292 = loc(fused[#loc159, #loc160])
#loc293 = loc(fused[#loc161, #loc162])
#loc295 = loc(fused[#loc166, #loc167])
#loc296 = loc(fused[#loc169, #loc167])
#loc297 = loc(fused[#loc171, #loc170])
#loc298 = loc(fused[#loc173, #loc172])
#loc299 = loc(fused[#loc174, #loc175])
#loc300 = loc(fused[#loc176, #loc177])
#loc301 = loc(fused[#loc178, #loc179])
#loc302 = loc(fused[#loc180, #loc181])
#loc303 = loc(fused[#loc184, #loc182])
#loc304 = loc(fused[#loc186, #loc185])
#loc305 = loc(fused[#loc189, #loc190])
#loc306 = loc(fused[#loc191, #loc192])
#loc307 = loc(fused[#loc195, #loc196])
#loc308 = loc(fused[#loc194, #loc196])
#loc309 = loc(fused[#loc193, #loc197])
#loc310 = loc(fused[#loc198, #loc197])
#loc311 = loc(fused[#loc199, #loc200])
#loc312 = loc(fused[#loc201, #loc202])
#loc313 = loc(fused[#loc203, #loc200])
#loc314 = loc(fused[#loc207, #loc208])
#loc315 = loc(fused[#loc210, #loc209])
#loc316 = loc(fused[#loc211, #loc212])
#loc317 = loc(fused[#loc214, #loc208])
#loc318 = loc(fused[#loc216, #loc215])
#loc319 = loc(fused[#loc220, #loc219])
