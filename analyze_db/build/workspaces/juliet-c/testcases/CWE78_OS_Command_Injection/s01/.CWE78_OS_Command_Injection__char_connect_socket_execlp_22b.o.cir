!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc22 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":61:76)
#loc23 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":61:83)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":145:81)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":145:88)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":161:81)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":161:88)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc206 = loc(fused[#loc22, #loc23])
#loc262 = loc(fused[#loc166, #loc167])
#loc268 = loc(fused[#loc184, #loc185])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_badGlobal : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc197)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc198)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc9)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc200)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc201)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc202)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc203)
  cir.func private @close(!s32i) -> !s32i loc(#loc204)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc22, #loc23])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc21)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc24)
    cir.scope {
      %4 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_badGlobal : !cir.ptr<!s32i> loc(#loc196)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc27)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc27)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc210)
          %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc211)
          %9 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc212)
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc213)
          %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc214)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc38)
          %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc38)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc213)
          %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc41)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
          %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc41)
          cir.store %16, %11 : !u64i, !cir.ptr<!u64i> loc(#loc214)
          cir.scope {
            cir.do {
              cir.scope {
                %17 = cir.const #cir.int<2> : !s32i loc(#loc47)
                %18 = cir.const #cir.int<1> : !s32i loc(#loc48)
                %19 = cir.const #cir.int<6> : !s32i loc(#loc49)
                %20 = cir.call @socket(%17, %18, %19) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
                cir.store %20, %10 : !s32i, !cir.ptr<!s32i> loc(#loc217)
                cir.scope {
                  %71 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc55)
                  %72 = cir.const #cir.int<1> : !s32i loc(#loc56)
                  %73 = cir.unary(minus, %72) nsw : !s32i, !s32i loc(#loc56)
                  %74 = cir.cmp(eq, %71, %73) : !s32i, !cir.bool loc(#loc219)
                  cir.if %74 {
                    cir.break loc(#loc58)
                  } loc(#loc220)
                } loc(#loc218)
                %21 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc221)
                %22 = cir.const #cir.int<0> : !s32i loc(#loc61)
                %23 = cir.const #cir.int<16> : !u64i loc(#loc222)
                cir.libc.memset %23 bytes from %21 set to %22 : !cir.ptr<!void>, !s32i, !u64i loc(#loc223)
                %24 = cir.const #cir.int<2> : !s32i loc(#loc66)
                %25 = cir.cast(integral, %24 : !s32i), !u16i loc(#loc66)
                %26 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
                cir.store %25, %26 : !u16i, !cir.ptr<!u16i> loc(#loc224)
                %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc9)
                %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc9)
                %29 = cir.call @inet_addr(%28) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc69)
                %30 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
                %31 = cir.get_member %30[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
                cir.store %29, %31 : !u32i, !cir.ptr<!u32i> loc(#loc225)
                %32 = cir.const #cir.int<27015> : !s32i loc(#loc74)
                %33 = cir.cast(integral, %32 : !s32i), !u16i loc(#loc74)
                %34 = cir.call @htons(%33) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc75)
                %35 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
                cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc226)
                cir.scope {
                  %71 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                  %72 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc228)
                  %73 = cir.const #cir.int<16> : !u64i loc(#loc229)
                  %74 = cir.cast(integral, %73 : !u64i), !u32i loc(#loc229)
                  %75 = cir.call @connect(%71, %72, %74) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc86)
                  %76 = cir.const #cir.int<1> : !s32i loc(#loc87)
                  %77 = cir.unary(minus, %76) nsw : !s32i, !s32i loc(#loc87)
                  %78 = cir.cmp(eq, %75, %77) : !s32i, !cir.bool loc(#loc230)
                  cir.if %78 {
                    cir.break loc(#loc89)
                  } loc(#loc231)
                } loc(#loc227)
                %36 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc90)
                %37 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
                %38 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc92)
                %39 = cir.ptr_stride(%37 : !cir.ptr<!s8i>, %38 : !u64i), !cir.ptr<!s8i> loc(#loc93)
                %40 = cir.cast(bitcast, %39 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc232)
                %41 = cir.const #cir.int<1> : !u64i loc(#loc233)
                %42 = cir.const #cir.int<100> : !s32i loc(#loc98)
                %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc98)
                %44 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc99)
                %45 = cir.binop(sub, %43, %44) : !u64i loc(#loc234)
                %46 = cir.const #cir.int<1> : !s32i loc(#loc100)
                %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc100)
                %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc235)
                %49 = cir.binop(mul, %41, %48) : !u64i loc(#loc236)
                %50 = cir.const #cir.int<0> : !s32i loc(#loc102)
                %51 = cir.call @recv(%36, %40, %49, %50) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc103)
                %52 = cir.cast(integral, %51 : !s64i), !s32i loc(#loc103)
                cir.store %52, %7 : !s32i, !cir.ptr<!s32i> loc(#loc237)
                cir.scope {
                  %71 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
                  %72 = cir.const #cir.int<1> : !s32i loc(#loc109)
                  %73 = cir.unary(minus, %72) nsw : !s32i, !s32i loc(#loc109)
                  %74 = cir.cmp(eq, %71, %73) : !s32i, !cir.bool loc(#loc239)
                  %75 = cir.ternary(%74, true {
                    %76 = cir.const #true loc(#loc110)
                    cir.yield %76 : !cir.bool loc(#loc110)
                  }, false {
                    %76 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                    %77 = cir.const #cir.int<0> : !s32i loc(#loc112)
                    %78 = cir.cmp(eq, %76, %77) : !s32i, !cir.bool loc(#loc240)
                    %79 = cir.ternary(%78, true {
                      %80 = cir.const #true loc(#loc110)
                      cir.yield %80 : !cir.bool loc(#loc110)
                    }, false {
                      %80 = cir.const #false loc(#loc110)
                      cir.yield %80 : !cir.bool loc(#loc110)
                    }) : (!cir.bool) -> !cir.bool loc(#loc110)
                    cir.yield %79 : !cir.bool loc(#loc110)
                  }) : (!cir.bool) -> !cir.bool loc(#loc110)
                  cir.if %75 {
                    cir.break loc(#loc114)
                  } loc(#loc241)
                } loc(#loc238)
                %53 = cir.const #cir.int<0> : !s32i loc(#loc115)
                %54 = cir.cast(integral, %53 : !s32i), !s8i loc(#loc115)
                %55 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc116)
                %56 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc117)
                %57 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %58 = cir.cast(integral, %57 : !s32i), !u64i loc(#loc118)
                %59 = cir.const #cir.int<1> : !u64i loc(#loc242)
                %60 = cir.binop(div, %58, %59) : !u64i loc(#loc243)
                %61 = cir.binop(add, %56, %60) : !u64i loc(#loc244)
                %62 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %61 : !u64i), !cir.ptr<!s8i> loc(#loc121)
                cir.store %54, %62 : !s8i, !cir.ptr<!s8i> loc(#loc245)
                %63 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc122)
                %64 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
                %65 = cir.const #cir.int<13> : !s32i loc(#loc124)
                %66 = cir.call @strchr(%64, %65) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc122)
                cir.store %66, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc246)
                cir.scope {
                  %71 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc129)
                  %72 = cir.cast(ptr_to_bool, %71 : !cir.ptr<!s8i>), !cir.bool loc(#loc129)
                  cir.if %72 {
                    %73 = cir.const #cir.int<0> : !s32i loc(#loc131)
                    %74 = cir.cast(integral, %73 : !s32i), !s8i loc(#loc131)
                    %75 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
                    cir.store %74, %75 : !s8i, !cir.ptr<!s8i> loc(#loc249)
                  } loc(#loc248)
                } loc(#loc247)
                %67 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc134)
                %68 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
                %69 = cir.const #cir.int<10> : !s32i loc(#loc136)
                %70 = cir.call @strchr(%68, %69) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc134)
                cir.store %70, %9 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
                cir.scope {
                  %71 = cir.load %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc141)
                  %72 = cir.cast(ptr_to_bool, %71 : !cir.ptr<!s8i>), !cir.bool loc(#loc141)
                  cir.if %72 {
                    %73 = cir.const #cir.int<0> : !s32i loc(#loc143)
                    %74 = cir.cast(integral, %73 : !s32i), !s8i loc(#loc143)
                    %75 = cir.load deref %9 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
                    cir.store %74, %75 : !s8i, !cir.ptr<!s8i> loc(#loc253)
                  } loc(#loc252)
                } loc(#loc251)
              } loc(#loc216)
              cir.yield loc(#loc44)
            } while {
              %17 = cir.const #cir.int<0> : !s32i loc(#loc146)
              %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc146)
              cir.condition(%18) loc(#loc146)
            } loc(#loc215)
          } loc(#loc215)
          cir.scope {
            %17 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc150)
            %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc150)
            %20 = cir.cmp(ne, %17, %19) : !s32i, !cir.bool loc(#loc255)
            cir.if %20 {
              %21 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc152)
              %22 = cir.call @close(%21) : (!s32i) -> !s32i loc(#loc153)
            } loc(#loc256)
          } loc(#loc254)
        } loc(#loc209)
      } loc(#loc208)
    } loc(#loc207)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc257)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc257)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc257)
  } loc(#loc205)
  cir.global "private" external @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B1Global : !s32i {alignment = 4 : i64} loc(#loc258)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc259)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc160)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc163)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B1Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc166, #loc167])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc165)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc168)
    cir.scope {
      %4 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc258)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc171)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc160)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc160)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc175)
      } else {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc176)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
        %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc163)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc163)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc176)
      } loc(#loc264)
    } loc(#loc263)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc178)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc265)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc265)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc265)
  } loc(#loc261)
  cir.global "private" external @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B2Global : !s32i {alignment = 4 : i64} loc(#loc266)
  cir.func @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B2Source(%arg0: !cir.ptr<!s8i> loc(fused[#loc184, #loc185])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc268)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc183)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc186)
    cir.scope {
      %4 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc266)
      %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc189)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc189)
      cir.if %6 {
        %7 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc191)
        %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc192)
        %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc193)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc193)
        %11 = cir.call @strcat(%8, %10) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc191)
      } loc(#loc270)
    } loc(#loc269)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc194)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc271)
    cir.return %3 : !cir.ptr<!s8i> loc(#loc271)
  } loc(#loc267)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":59:1)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":59:12)
#loc3 = loc("/usr/include/string.h":407:1)
#loc4 = loc("/usr/include/string.h":408:33)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc7 = loc("/usr/include/arpa/inet.h":34:1)
#loc8 = loc("/usr/include/arpa/inet.h":34:47)
#loc9 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":92:53)
#loc10 = loc("/usr/include/netinet/in.h":402:1)
#loc11 = loc("/usr/include/netinet/in.h":403:40)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc13 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc14 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc15 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc16 = loc("/usr/include/string.h":246:1)
#loc17 = loc("/usr/include/string.h":247:33)
#loc18 = loc("/usr/include/unistd.h":358:1)
#loc19 = loc("/usr/include/unistd.h":358:27)
#loc20 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":61:1)
#loc21 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":134:1)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":62:1)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":63:5)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":132:5)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":63:8)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":64:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":65:9)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":131:9)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":70:13)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":70:17)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":71:13)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":71:32)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":72:13)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":72:19)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":73:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":73:36)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":74:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":74:41)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":74:30)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":74:37)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":75:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":120:21)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":76:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":119:13)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:40)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:49)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:62)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:33)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:17)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":85:73)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":86:17)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":89:17)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":86:21)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":86:38)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":87:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":88:21)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:24)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:25)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:34)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:37)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:51)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":90:52)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":91:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":91:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":92:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":92:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":92:63)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":93:42)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":93:36)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":93:17)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":93:50)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:17)
#loc80 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":97:17)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:29)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:62)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:63)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:72)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:86)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:21)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":94:92)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":95:17)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":96:21)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:35)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:59)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:66)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:64)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:50)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:73)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:76)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:87)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:92)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:98)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:108)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:109)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:112)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:30)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:17)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":101:113)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:17)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":105:17)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:21)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:35)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:48)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:51)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":102:65)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":103:17)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":104:21)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:61)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:22)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:32)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:45)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:56)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":107:57)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":109:27)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":109:34)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":109:40)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":109:17)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":109:44)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":110:17)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":113:17)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":110:21)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":111:17)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":112:32)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":112:22)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":112:21)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":114:27)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":114:34)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":114:40)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":114:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":114:44)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":115:17)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":118:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":115:21)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":116:17)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":117:32)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":117:22)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":117:21)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":120:20)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":121:13)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":124:13)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":121:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":121:34)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":122:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":123:30)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":123:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":133:12)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":133:5)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":141:1)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":141:12)
#loc158 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc159 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":150:19)
#loc161 = loc("/usr/include/string.h":149:1)
#loc162 = loc("/usr/include/string.h":150:14)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":155:22)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":145:1)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":158:1)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":146:1)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":147:5)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":156:5)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":147:8)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":148:5)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":151:5)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":153:5)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":150:9)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":155:9)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":155:16)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":157:12)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":157:5)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":142:1)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":142:12)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":161:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":169:1)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":162:1)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":163:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":167:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":163:8)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":164:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":166:9)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":166:16)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":166:22)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":168:12)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_22b.c":168:5)
#loc196 = loc(fused[#loc1, #loc2])
#loc197 = loc(fused[#loc3, #loc4])
#loc198 = loc(fused[#loc5, #loc6])
#loc199 = loc(fused[#loc7, #loc8])
#loc200 = loc(fused[#loc10, #loc11])
#loc201 = loc(fused[#loc12, #loc13])
#loc202 = loc(fused[#loc14, #loc15])
#loc203 = loc(fused[#loc16, #loc17])
#loc204 = loc(fused[#loc18, #loc19])
#loc205 = loc(fused[#loc20, #loc21])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc28, #loc26])
#loc209 = loc(fused[#loc29, #loc30])
#loc210 = loc(fused[#loc31, #loc32])
#loc211 = loc(fused[#loc33, #loc34])
#loc212 = loc(fused[#loc35, #loc36])
#loc213 = loc(fused[#loc37, #loc38])
#loc214 = loc(fused[#loc39, #loc40])
#loc215 = loc(fused[#loc43, #loc44])
#loc216 = loc(fused[#loc45, #loc46])
#loc217 = loc(fused[#loc51, #loc52])
#loc218 = loc(fused[#loc53, #loc54])
#loc219 = loc(fused[#loc55, #loc56])
#loc220 = loc(fused[#loc57, #loc54])
#loc221 = loc(fused[#loc59, #loc60])
#loc222 = loc(fused[#loc62, #loc63])
#loc223 = loc(fused[#loc64, #loc65])
#loc224 = loc(fused[#loc68, #loc66])
#loc225 = loc(fused[#loc72, #loc73])
#loc226 = loc(fused[#loc77, #loc78])
#loc227 = loc(fused[#loc79, #loc80])
#loc228 = loc(fused[#loc82, #loc83])
#loc229 = loc(fused[#loc84, #loc85])
#loc230 = loc(fused[#loc86, #loc87])
#loc231 = loc(fused[#loc88, #loc80])
#loc232 = loc(fused[#loc94, #loc95])
#loc233 = loc(fused[#loc96, #loc97])
#loc234 = loc(fused[#loc98, #loc99])
#loc235 = loc(fused[#loc98, #loc100])
#loc236 = loc(fused[#loc96, #loc101])
#loc237 = loc(fused[#loc104, #loc105])
#loc238 = loc(fused[#loc106, #loc107])
#loc239 = loc(fused[#loc108, #loc109])
#loc240 = loc(fused[#loc111, #loc112])
#loc241 = loc(fused[#loc113, #loc107])
#loc242 = loc(fused[#loc119, #loc120])
#loc243 = loc(fused[#loc118, #loc120])
#loc244 = loc(fused[#loc117, #loc120])
#loc245 = loc(fused[#loc116, #loc115])
#loc246 = loc(fused[#loc125, #loc126])
#loc247 = loc(fused[#loc127, #loc128])
#loc248 = loc(fused[#loc130, #loc128])
#loc249 = loc(fused[#loc133, #loc131])
#loc250 = loc(fused[#loc137, #loc138])
#loc251 = loc(fused[#loc139, #loc140])
#loc252 = loc(fused[#loc142, #loc140])
#loc253 = loc(fused[#loc145, #loc143])
#loc254 = loc(fused[#loc147, #loc148])
#loc255 = loc(fused[#loc149, #loc150])
#loc256 = loc(fused[#loc151, #loc148])
#loc257 = loc(fused[#loc155, #loc154])
#loc258 = loc(fused[#loc156, #loc157])
#loc259 = loc(fused[#loc158, #loc159])
#loc260 = loc(fused[#loc161, #loc162])
#loc261 = loc(fused[#loc164, #loc165])
#loc263 = loc(fused[#loc169, #loc170])
#loc264 = loc(fused[#loc172, #loc173, #loc174, #loc170])
#loc265 = loc(fused[#loc179, #loc178])
#loc266 = loc(fused[#loc180, #loc181])
#loc267 = loc(fused[#loc182, #loc183])
#loc269 = loc(fused[#loc187, #loc188])
#loc270 = loc(fused[#loc190, #loc188])
#loc271 = loc(fused[#loc195, #loc194])
