!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":101:10)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":101:14)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":101:20)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":101:32)
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global external dsolocal @CWE191_Integer_Underflow__int64_t_rand_sub_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc106)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_22_badSink(!s64i) loc(#loc108)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc13)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc13)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc13)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc13)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc13)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc13)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc13)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc13)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc13)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc13)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc13)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc13)
      cir.yield %32 : !u64i loc(#loc13)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc13)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc13)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc13)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc13)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc13)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc13)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc13)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc13)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc13)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc13)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc13)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc13)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc13)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc13)
      cir.yield %36 : !u64i loc(#loc13)
    }) : (!cir.bool) -> !u64i loc(#loc13)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc13)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %9 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_badGlobal : !cir.ptr<!s32i> loc(#loc106)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_badSink(%10) : (!s64i) -> () loc(#loc18)
    cir.return loc(#loc8)
  } loc(#loc109)
  cir.global external dsolocal @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc114)
  cir.global external dsolocal @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc115)
  cir.global external dsolocal @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodG2BGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc116)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc118)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    cir.return loc(#loc26)
  } loc(#loc117)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc121)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc122)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc126)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc52)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_good : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc128)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc129)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    cir.return %17 : !s32i loc(#loc129)
  } loc(#loc124)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G1Sink(!s64i) loc(#loc130)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc69)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc133)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc71)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc71)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc71)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc71)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc71)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc71)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc71)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc71)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc71)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc71)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc71)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc71)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc71)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc71)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc71)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc71)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc71)
      cir.yield %32 : !u64i loc(#loc71)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc71)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc71)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc71)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc71)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc71)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc71)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc71)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc71)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc71)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc71)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc71)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc71)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc71)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc71)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc71)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc71)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc71)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc71)
      cir.yield %36 : !u64i loc(#loc71)
    }) : (!cir.bool) -> !u64i loc(#loc71)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc71)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %9 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G1Global : !cir.ptr<!s32i> loc(#loc114)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc75)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G1Sink(%10) : (!s64i) -> () loc(#loc76)
    cir.return loc(#loc66)
  } loc(#loc131)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G2Sink(!s64i) loc(#loc136)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc83)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc85)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc85)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc85)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc85)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc85)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc85)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc85)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc85)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc85)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc85)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc85)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc85)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc85)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc85)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc85)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc85)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc85)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc85)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc85)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc85)
      cir.yield %32 : !u64i loc(#loc85)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc85)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc85)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc85)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc85)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc85)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc85)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc85)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc85)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc85)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc85)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc85)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc85)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc85)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc85)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc85)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc85)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc85)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc85)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc85)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc85)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc85)
      cir.yield %36 : !u64i loc(#loc85)
    }) : (!cir.bool) -> !u64i loc(#loc85)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc85)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %9 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G2Global : !cir.ptr<!s32i> loc(#loc115)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc89)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodB2G2Sink(%10) : (!s64i) -> () loc(#loc90)
    cir.return loc(#loc80)
  } loc(#loc137)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodG2BSink(!s64i) loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc144)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc97)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc145)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc100)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc100)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc146)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %6 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodG2BGlobal : !cir.ptr<!s32i> loc(#loc116)
    cir.store %5, %6 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc104)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_22_goodG2BSink(%7) : (!s64i) -> () loc(#loc105)
    cir.return loc(#loc94)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":23:63)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":25:72)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":27:1)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":35:1)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":29:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":30:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":32:21)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":33:63)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":33:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":34:59)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":34:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":42:1)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":42:68)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":43:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":43:68)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":44:1)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":44:67)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":85:1)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":90:1)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":87:5)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":87:14)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":88:5)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":88:14)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":89:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":89:13)
#loc33 = loc("/usr/include/stdlib.h":575:1)
#loc34 = loc("/usr/include/stdlib.h":575:41)
#loc35 = loc("/usr/include/time.h":76:1)
#loc36 = loc("/usr/include/time.h":76:38)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":106:15)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":108:15)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":111:15)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":113:15)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":101:1)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":116:1)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":102:1)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":104:27)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":104:22)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":104:5)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":106:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":107:5)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":107:56)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":108:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":111:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":112:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":112:55)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":113:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":115:12)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":115:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":47:1)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":47:77)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":49:1)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":57:1)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":51:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":51:13)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":52:12)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":52:5)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":54:21)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":54:5)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":55:68)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":55:5)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":56:64)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":56:5)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":60:1)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":60:77)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":62:1)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":70:1)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":64:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":64:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":65:12)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":65:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":67:21)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":67:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":68:68)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":68:5)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":69:64)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":69:5)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":73:1)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":73:76)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":75:1)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":83:1)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":77:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":77:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":78:12)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":78:5)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":80:13)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":80:12)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":80:5)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":81:67)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":81:5)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":82:63)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_22a.c":82:5)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc5, #loc6])
#loc109 = loc(fused[#loc7, #loc8])
#loc110 = loc(fused[#loc9, #loc10])
#loc111 = loc(fused[#loc12, #loc11])
#loc112 = loc(fused[#loc14, #loc13])
#loc113 = loc(fused[#loc16, #loc15])
#loc114 = loc(fused[#loc19, #loc20])
#loc115 = loc(fused[#loc21, #loc22])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc25, #loc26])
#loc118 = loc(fused[#loc27, #loc28])
#loc119 = loc(fused[#loc29, #loc30])
#loc120 = loc(fused[#loc31, #loc32])
#loc121 = loc(fused[#loc33, #loc34])
#loc122 = loc(fused[#loc35, #loc36])
#loc123 = loc(fused[#loc37, #loc38])
#loc124 = loc(fused[#loc43, #loc44])
#loc127 = loc(fused[#loc54, #loc55])
#loc128 = loc(fused[#loc58, #loc59])
#loc129 = loc(fused[#loc62, #loc61])
#loc130 = loc(fused[#loc63, #loc64])
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc67, #loc68])
#loc133 = loc(fused[#loc70, #loc69])
#loc134 = loc(fused[#loc72, #loc71])
#loc135 = loc(fused[#loc74, #loc73])
#loc136 = loc(fused[#loc77, #loc78])
#loc137 = loc(fused[#loc79, #loc80])
#loc138 = loc(fused[#loc81, #loc82])
#loc139 = loc(fused[#loc84, #loc83])
#loc140 = loc(fused[#loc86, #loc85])
#loc141 = loc(fused[#loc88, #loc87])
#loc142 = loc(fused[#loc91, #loc92])
#loc143 = loc(fused[#loc93, #loc94])
#loc144 = loc(fused[#loc95, #loc96])
#loc145 = loc(fused[#loc98, #loc97])
#loc146 = loc(fused[#loc101, #loc99])
#loc147 = loc(fused[#loc103, #loc102])
