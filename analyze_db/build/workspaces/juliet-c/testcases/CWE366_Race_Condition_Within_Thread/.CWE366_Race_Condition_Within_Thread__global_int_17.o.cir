!s32i = !cir.int<s, 32>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":26:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":26:29)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":44:24)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":44:30)
#true = #cir.bool<true> : !cir.bool
#loc195 = loc(fused[#loc7, #loc8])
#loc234 = loc(fused[#loc103, #loc104])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc192)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc193)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc195)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%5) loc(#loc18)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc192)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc20)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc192)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc13)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %4 = cir.unary(inc, %3) nsw : !s32i, !s32i loc(#loc24)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc202)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.return loc(#loc6)
  } loc(#loc194)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc203)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc204)
  cir.func private @printIntLine(!s32i) loc(#loc205)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc207)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc37)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc210)
        cir.condition(%4) loc(#loc41)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc213)
            %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc214)
            %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc46)
            cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc213)
            %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc48)
            cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc214)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc192)
            cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc215)
            cir.scope {
              %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc53)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
              %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc55)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc55)
              %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc55)
              cir.if %14 {
                %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc57)
                cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc218)
              } loc(#loc217)
            } loc(#loc216)
            cir.scope {
              %10 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc61)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc62)
              %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc63)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc63)
              %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc63)
              cir.if %14 {
                %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc65)
                cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc221)
              } loc(#loc220)
            } loc(#loc219)
            cir.scope {
              %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc69)
              %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc69)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
                %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc72)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc72)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc70)
                  cir.yield %17 : !cir.bool loc(#loc70)
                }, false {
                  %17 = cir.const #false loc(#loc70)
                  cir.yield %17 : !cir.bool loc(#loc70)
                }) : (!cir.bool) -> !cir.bool loc(#loc70)
                cir.yield %16 : !cir.bool loc(#loc70)
              }, false {
                %13 = cir.const #false loc(#loc70)
                cir.yield %13 : !cir.bool loc(#loc70)
              }) : (!cir.bool) -> !cir.bool loc(#loc70)
              cir.if %12 {
                %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc74)
                %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc75)
              } loc(#loc223)
            } loc(#loc222)
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc78)
              %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc78)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
                %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc81)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc81)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc79)
                  cir.yield %17 : !cir.bool loc(#loc79)
                }, false {
                  %17 = cir.const #false loc(#loc79)
                  cir.yield %17 : !cir.bool loc(#loc79)
                }) : (!cir.bool) -> !cir.bool loc(#loc79)
                cir.yield %16 : !cir.bool loc(#loc79)
              }, false {
                %13 = cir.const #false loc(#loc79)
                cir.yield %13 : !cir.bool loc(#loc79)
              }) : (!cir.bool) -> !cir.bool loc(#loc79)
              cir.if %12 {
                %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc83)
                %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc84)
              } loc(#loc225)
            } loc(#loc224)
            %8 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc192)
            %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc86)
          } loc(#loc212)
        } loc(#loc211)
        cir.yield loc(#loc36)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc88)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
        cir.yield loc(#loc208)
      } loc(#loc208)
    } loc(#loc208)
    cir.return loc(#loc32)
  } loc(#loc206)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_17_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc228)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc91)
    cir.return loc(#loc90)
  } loc(#loc227)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc229)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc230)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc231)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc232)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc103, #loc104])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc235)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc107)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc230)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc108)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc109)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc112)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc115)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc238)
        cir.condition(%9) loc(#loc116)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc240)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc120)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc240)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc241)
        } loc(#loc239)
        cir.yield loc(#loc111)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %8 = cir.unary(inc, %7) nsw : !s32i, !s32i loc(#loc124)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc242)
        cir.yield loc(#loc236)
      } loc(#loc236)
    } loc(#loc236)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc230)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc125)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc126)
    cir.return loc(#loc102)
  } loc(#loc233)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc243)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc240)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc245)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc138)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc248)
        cir.condition(%4) loc(#loc139)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc251)
            %3 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc252)
            %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc144)
            cir.store %4, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc251)
            %5 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc146)
            cir.store %5, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc252)
            cir.scope {
              %10 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc230)
              %11 = cir.call @stdThreadLockCreate(%10) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc149)
              %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc149)
              %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc149)
              cir.if %13 {
                cir.return loc(#loc151)
              } loc(#loc254)
            } loc(#loc253)
            cir.scope {
              %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc154)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc155)
              %12 = cir.call @stdThreadCreate(%10, %11, %2) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc156)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc156)
              %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc156)
              cir.if %14 {
                %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc158)
                cir.store %15, %2 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc257)
              } loc(#loc256)
            } loc(#loc255)
            cir.scope {
              %10 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc162)
              %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc163)
              %12 = cir.call @stdThreadCreate(%10, %11, %3) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc164)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc164)
              %14 = cir.unary(not, %13) : !cir.bool, !cir.bool loc(#loc164)
              cir.if %14 {
                %15 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc166)
                cir.store %15, %3 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc260)
              } loc(#loc259)
            } loc(#loc258)
            cir.scope {
              %10 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc170)
              %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc170)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc172)
                %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc173)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc173)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc171)
                  cir.yield %17 : !cir.bool loc(#loc171)
                }, false {
                  %17 = cir.const #false loc(#loc171)
                  cir.yield %17 : !cir.bool loc(#loc171)
                }) : (!cir.bool) -> !cir.bool loc(#loc171)
                cir.yield %16 : !cir.bool loc(#loc171)
              }, false {
                %13 = cir.const #false loc(#loc171)
                cir.yield %13 : !cir.bool loc(#loc171)
              }) : (!cir.bool) -> !cir.bool loc(#loc171)
              cir.if %12 {
                %13 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc175)
                %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc176)
              } loc(#loc262)
            } loc(#loc261)
            cir.scope {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc179)
              %11 = cir.cast(ptr_to_bool, %10 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc179)
              %12 = cir.ternary(%11, true {
                %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc181)
                %14 = cir.call @stdThreadJoin(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc182)
                %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc182)
                %16 = cir.ternary(%15, true {
                  %17 = cir.const #true loc(#loc180)
                  cir.yield %17 : !cir.bool loc(#loc180)
                }, false {
                  %17 = cir.const #false loc(#loc180)
                  cir.yield %17 : !cir.bool loc(#loc180)
                }) : (!cir.bool) -> !cir.bool loc(#loc180)
                cir.yield %16 : !cir.bool loc(#loc180)
              }, false {
                %13 = cir.const #false loc(#loc180)
                cir.yield %13 : !cir.bool loc(#loc180)
              }) : (!cir.bool) -> !cir.bool loc(#loc180)
              cir.if %12 {
                %13 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc184)
                %14 = cir.call @stdThreadDestroy(%13) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc185)
              } loc(#loc264)
            } loc(#loc263)
            %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc230)
            %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc186)
            cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc187)
            %8 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc240)
            %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc188)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc189)
          } loc(#loc250)
        } loc(#loc249)
        cir.yield loc(#loc134)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc190)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc191)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        cir.yield loc(#loc246)
      } loc(#loc246)
    } loc(#loc246)
    cir.return loc(#loc130)
  } loc(#loc244)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_17.c":0:0)
#loc1 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":22:1)
#loc2 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":22:22)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":26:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":42:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":28:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":28:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":27:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":41:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":39:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":40:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":40:29)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":40:9)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:31)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":38:30)
#loc25 = loc("../../testcasesupport/std_thread.h":15:1)
#loc26 = loc("../../testcasesupport/std_thread.h":15:35)
#loc27 = loc("../../testcasesupport/std_thread.h":16:1)
#loc28 = loc("../../testcasesupport/std_thread.h":16:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc31 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":59:1)
#loc32 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":87:1)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":61:5)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":61:9)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:5)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":86:5)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:13)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:9)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:16)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:20)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:18)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":63:5)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":64:9)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":85:9)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":65:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":65:33)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":66:13)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":66:33)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":67:23)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":67:13)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":68:13)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":71:13)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":68:34)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":68:45)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":68:18)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":69:13)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":70:27)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":70:17)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":72:13)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":75:13)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":72:34)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":72:45)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":72:18)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":73:13)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":74:27)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":74:17)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":76:13)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":79:13)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":76:17)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":76:25)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":76:42)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":76:28)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":77:13)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":78:34)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":78:17)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":80:13)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":83:13)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":80:17)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":80:25)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":80:42)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":80:28)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":81:13)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":82:34)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":82:17)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":84:26)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":84:13)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:24)
#loc88 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":62:23)
#loc89 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":128:1)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":131:1)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":130:5)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":130:11)
#loc93 = loc("../../testcasesupport/std_thread.h":18:1)
#loc94 = loc("../../testcasesupport/std_thread.h":18:44)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":24:1)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":24:34)
#loc97 = loc("../../testcasesupport/std_thread.h":19:1)
#loc98 = loc("../../testcasesupport/std_thread.h":19:45)
#loc99 = loc("../../testcasesupport/std_thread.h":20:1)
#loc100 = loc("../../testcasesupport/std_thread.h":20:45)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":44:1)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":55:1)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":46:5)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":46:9)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":45:1)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":49:26)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":49:5)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":53:5)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:14)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:10)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:17)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:21)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:19)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":51:5)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":23:1)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":23:23)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":52:20)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":52:31)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":52:9)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:31)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":50:30)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":54:26)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":54:5)
#loc127 = loc("../../testcasesupport/std_thread.h":21:1)
#loc128 = loc("../../testcasesupport/std_thread.h":21:45)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":94:1)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":126:1)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":96:5)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":96:9)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:5)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":125:5)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:13)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:9)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:16)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:20)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:18)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":98:5)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":99:9)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":124:9)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":100:13)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":100:33)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":101:13)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":101:33)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":102:13)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":105:13)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":102:18)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":103:13)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":104:17)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":106:13)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":109:13)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":106:34)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":106:46)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":106:18)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":107:13)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":108:27)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":108:17)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":110:13)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":113:13)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":110:34)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":110:46)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":110:18)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":111:13)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":112:27)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":112:17)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":114:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":117:13)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":114:17)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":114:25)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":114:42)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":114:28)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":115:13)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":116:34)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":116:17)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":118:13)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":121:13)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":118:17)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":118:25)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":118:42)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":118:28)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":119:13)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":120:34)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":120:17)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":122:34)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":122:13)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":123:26)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":123:13)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:24)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_17.c":97:23)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc5, #loc6])
#loc196 = loc(fused[#loc9, #loc10])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc15, #loc14])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc19, #loc13])
#loc201 = loc(fused[#loc22, #loc21])
#loc202 = loc(fused[#loc24, #loc23])
#loc203 = loc(fused[#loc25, #loc26])
#loc204 = loc(fused[#loc27, #loc28])
#loc205 = loc(fused[#loc29, #loc30])
#loc206 = loc(fused[#loc31, #loc32])
#loc207 = loc(fused[#loc33, #loc34])
#loc208 = loc(fused[#loc35, #loc36])
#loc209 = loc(fused[#loc38, #loc37])
#loc210 = loc(fused[#loc39, #loc40])
#loc211 = loc(fused[#loc42, #loc36])
#loc212 = loc(fused[#loc43, #loc44])
#loc213 = loc(fused[#loc45, #loc46])
#loc214 = loc(fused[#loc47, #loc48])
#loc215 = loc(fused[#loc50, #loc49])
#loc216 = loc(fused[#loc51, #loc52])
#loc217 = loc(fused[#loc56, #loc52])
#loc218 = loc(fused[#loc58, #loc57])
#loc219 = loc(fused[#loc59, #loc60])
#loc220 = loc(fused[#loc64, #loc60])
#loc221 = loc(fused[#loc66, #loc65])
#loc222 = loc(fused[#loc67, #loc68])
#loc223 = loc(fused[#loc73, #loc68])
#loc224 = loc(fused[#loc76, #loc77])
#loc225 = loc(fused[#loc82, #loc77])
#loc226 = loc(fused[#loc88, #loc87])
#loc227 = loc(fused[#loc89, #loc90])
#loc228 = loc(fused[#loc91, #loc92])
#loc229 = loc(fused[#loc93, #loc94])
#loc230 = loc(fused[#loc95, #loc96])
#loc231 = loc(fused[#loc97, #loc98])
#loc232 = loc(fused[#loc99, #loc100])
#loc233 = loc(fused[#loc101, #loc102])
#loc235 = loc(fused[#loc105, #loc106])
#loc236 = loc(fused[#loc110, #loc111])
#loc237 = loc(fused[#loc113, #loc112])
#loc238 = loc(fused[#loc114, #loc115])
#loc239 = loc(fused[#loc117, #loc111])
#loc240 = loc(fused[#loc118, #loc119])
#loc241 = loc(fused[#loc122, #loc121])
#loc242 = loc(fused[#loc124, #loc123])
#loc243 = loc(fused[#loc127, #loc128])
#loc244 = loc(fused[#loc129, #loc130])
#loc245 = loc(fused[#loc131, #loc132])
#loc246 = loc(fused[#loc133, #loc134])
#loc247 = loc(fused[#loc136, #loc135])
#loc248 = loc(fused[#loc137, #loc138])
#loc249 = loc(fused[#loc140, #loc134])
#loc250 = loc(fused[#loc141, #loc142])
#loc251 = loc(fused[#loc143, #loc144])
#loc252 = loc(fused[#loc145, #loc146])
#loc253 = loc(fused[#loc147, #loc148])
#loc254 = loc(fused[#loc150, #loc148])
#loc255 = loc(fused[#loc152, #loc153])
#loc256 = loc(fused[#loc157, #loc153])
#loc257 = loc(fused[#loc159, #loc158])
#loc258 = loc(fused[#loc160, #loc161])
#loc259 = loc(fused[#loc165, #loc161])
#loc260 = loc(fused[#loc167, #loc166])
#loc261 = loc(fused[#loc168, #loc169])
#loc262 = loc(fused[#loc174, #loc169])
#loc263 = loc(fused[#loc177, #loc178])
#loc264 = loc(fused[#loc183, #loc178])
#loc265 = loc(fused[#loc191, #loc190])
