!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":94:10)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":94:14)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":94:20)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":94:32)
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc129 = loc(fused[#loc45, #loc46])
#loc130 = loc(fused[#loc47, #loc48])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc111)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_09_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc111)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc117)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc15)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc117)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc119)
            %9 = cir.cast(bool_to_int, %8 : !cir.bool), !s32i loc(#loc119)
            %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc20)
            %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
            %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc22)
            %13 = cir.const #cir.int<5> : !s32i loc(#loc23)
            %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc120)
            %15 = cir.cast(bool_to_int, %14 : !cir.bool), !s32i loc(#loc120)
            %16 = cir.binop(and, %9, %15) : !s32i loc(#loc121)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc26)
            cir.if %17 {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc5)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc5)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc28)
            } loc(#loc122)
          } loc(#loc118)
        } loc(#loc116)
      } loc(#loc115)
    } loc(#loc114)
    cir.return loc(#loc7)
  } loc(#loc113)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_09_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc123)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc126)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc42)
  cir.func @main(%arg0: !s32i loc(fused[#loc45, #loc46]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc47, #loc48])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc130)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc44)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc49)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc49)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc50)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc51)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc51)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc52)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc39)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %8 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_09_good() : () -> () loc(#loc54)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc40)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc41)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %13 = cir.get_global @CWE476_NULL_Pointer_Dereference__binary_if_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc132)
    cir.call @CWE476_NULL_Pointer_Dereference__binary_if_09_bad() : () -> () loc(#loc58)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc42)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc61)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    cir.return %17 : !s32i loc(#loc133)
  } loc(#loc128)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc134)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc65)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc134)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc70)
      cir.if %2 {
        %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc74)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc139)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc78)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc81)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc82)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc82)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc141)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc84)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %13 = cir.const #cir.int<5> : !s32i loc(#loc86)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc142)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc83)
                cir.yield %16 : !cir.bool loc(#loc83)
              }, false {
                %16 = cir.const #false loc(#loc83)
                cir.yield %16 : !cir.bool loc(#loc83)
              }) : (!cir.bool) -> !cir.bool loc(#loc83)
              cir.yield %15 : !cir.bool loc(#loc83)
            }, false {
              %10 = cir.const #false loc(#loc83)
              cir.yield %10 : !cir.bool loc(#loc83)
            }) : (!cir.bool) -> !cir.bool loc(#loc83)
            cir.if %9 {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc88)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc88)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc89)
            } loc(#loc143)
          } loc(#loc140)
        } loc(#loc138)
      } loc(#loc137)
    } loc(#loc136)
    cir.return loc(#loc67)
  } loc(#loc135)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc111)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc94)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc148)
          %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc99)
          cir.store %4, %3 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc148)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc102)
            %6 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
            %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc103)
            %8 = cir.cmp(ne, %5, %7) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc150)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %11 = cir.get_member %10[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc21)
              %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %13 = cir.const #cir.int<5> : !s32i loc(#loc107)
              %14 = cir.cmp(eq, %12, %13) : !s32i, !cir.bool loc(#loc151)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc104)
                cir.yield %16 : !cir.bool loc(#loc104)
              }, false {
                %16 = cir.const #false loc(#loc104)
                cir.yield %16 : !cir.bool loc(#loc104)
              }) : (!cir.bool) -> !cir.bool loc(#loc104)
              cir.yield %15 : !cir.bool loc(#loc104)
            }, false {
              %10 = cir.const #false loc(#loc104)
              cir.yield %10 : !cir.bool loc(#loc104)
            }) : (!cir.bool) -> !cir.bool loc(#loc104)
            cir.if %9 {
              %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc109)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc109)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc110)
            } loc(#loc152)
          } loc(#loc149)
        } loc(#loc147)
      } loc(#loc146)
    } loc(#loc145)
    cir.return loc(#loc91)
  } loc(#loc144)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":30:27)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":20:1)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":34:1)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":22:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":33:5)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":22:8)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":23:5)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":24:9)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":32:9)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":25:13)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":25:51)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:13)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":31:13)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:18)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:42)
#loc20 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:51)
#loc21 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:73)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:83)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:17)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:84)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":28:48)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":29:13)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":30:17)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":79:1)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":83:1)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":81:5)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":81:11)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":82:5)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":82:11)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":99:15)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":101:15)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":104:15)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":106:15)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":94:1)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":109:1)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":95:1)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":97:27)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":97:22)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":97:5)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":99:5)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":100:5)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":100:56)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":101:5)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":104:5)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":105:5)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":105:55)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":106:5)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":108:12)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":108:5)
#loc63 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc64 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":46:19)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":41:1)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":60:1)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":43:5)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":59:5)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":43:8)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":44:5)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":47:5)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":49:5)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":46:9)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":50:9)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":58:9)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":51:13)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":51:51)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:13)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":57:13)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:18)
#loc82 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:42)
#loc83 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:48)
#loc84 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:52)
#loc85 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:74)
#loc86 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":54:84)
#loc87 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":55:13)
#loc88 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":56:27)
#loc89 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":56:17)
#loc90 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":63:1)
#loc91 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":77:1)
#loc92 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":65:5)
#loc93 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":76:5)
#loc94 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":65:8)
#loc95 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":66:5)
#loc96 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":67:9)
#loc97 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":75:9)
#loc98 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":68:13)
#loc99 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":68:51)
#loc100 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:13)
#loc101 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":74:13)
#loc102 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:18)
#loc103 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:42)
#loc104 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:48)
#loc105 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:52)
#loc106 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:74)
#loc107 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":71:84)
#loc108 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":72:13)
#loc109 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":73:27)
#loc110 = loc("CWE476_NULL_Pointer_Dereference__binary_if_09.c":73:17)
#loc111 = loc(fused[#loc1, #loc2])
#loc112 = loc(fused[#loc3, #loc4])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc8, #loc9])
#loc115 = loc(fused[#loc11, #loc9])
#loc116 = loc(fused[#loc12, #loc13])
#loc117 = loc(fused[#loc14, #loc15])
#loc118 = loc(fused[#loc16, #loc17])
#loc119 = loc(fused[#loc18, #loc19])
#loc120 = loc(fused[#loc20, #loc23])
#loc121 = loc(fused[#loc24, #loc25])
#loc122 = loc(fused[#loc27, #loc17])
#loc123 = loc(fused[#loc29, #loc30])
#loc124 = loc(fused[#loc31, #loc32])
#loc125 = loc(fused[#loc33, #loc34])
#loc126 = loc(fused[#loc35, #loc36])
#loc127 = loc(fused[#loc37, #loc38])
#loc128 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc54, #loc55])
#loc132 = loc(fused[#loc58, #loc59])
#loc133 = loc(fused[#loc62, #loc61])
#loc134 = loc(fused[#loc63, #loc64])
#loc135 = loc(fused[#loc66, #loc67])
#loc136 = loc(fused[#loc68, #loc69])
#loc137 = loc(fused[#loc71, #loc72, #loc73, #loc69])
#loc138 = loc(fused[#loc75, #loc76])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc79, #loc80])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc84, #loc86])
#loc143 = loc(fused[#loc87, #loc80])
#loc144 = loc(fused[#loc90, #loc91])
#loc145 = loc(fused[#loc92, #loc93])
#loc146 = loc(fused[#loc95, #loc93])
#loc147 = loc(fused[#loc96, #loc97])
#loc148 = loc(fused[#loc98, #loc99])
#loc149 = loc(fused[#loc100, #loc101])
#loc150 = loc(fused[#loc102, #loc103])
#loc151 = loc(fused[#loc105, #loc107])
#loc152 = loc(fused[#loc108, #loc101])
