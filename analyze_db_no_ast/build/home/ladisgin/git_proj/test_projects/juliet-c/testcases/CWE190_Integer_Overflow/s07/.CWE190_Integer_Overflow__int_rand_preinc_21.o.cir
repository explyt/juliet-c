!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":25:21)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":25:25)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":59:26)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":59:30)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":94:26)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":94:30)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":124:25)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":124:29)
#loc163 = loc(fused[#loc9, #loc10])
#loc181 = loc(fused[#loc52, #loc53])
#loc196 = loc(fused[#loc93, #loc94])
#loc211 = loc(fused[#loc132, #loc133])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc159)
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc160)
  cir.func private  @printIntLine(!s32i) loc(#loc161)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc9, #loc10])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc163)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc11)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc160)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc167)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc20)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc167)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc23)
        } loc(#loc166)
      } loc(#loc165)
    } loc(#loc164)
    cir.return loc(#loc8)
  } loc(#loc162)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_preinc_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc30)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc30)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc30)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc30)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc30)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc30)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc30)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc30)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc30)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc30)
      cir.yield %22 : !u32i loc(#loc30)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc30)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc30)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc30)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc30)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc30)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc30)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc30)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc30)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc30)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc30)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc30)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc30)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc30)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc30)
      cir.yield %26 : !u32i loc(#loc30)
    }) : (!cir.bool) -> !u32i loc(#loc30)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc30)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %9 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc160)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @badSink(%10) : (!s32i) -> () loc(#loc35)
    cir.return loc(#loc25)
  } loc(#loc169)
  cir.func no_proto  @CWE190_Integer_Overflow__int_rand_preinc_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc37)
  } loc(#loc174)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc178)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc179)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc52, #loc53])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc181)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc178)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc57)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc48)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc48)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc61)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc65)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc185)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc66)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc187)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %10 = cir.unary(inc, %9) : !s32i, !s32i loc(#loc72)
            cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc187)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc75)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          } loc(#loc186)
        } loc(#loc184)
      } loc(#loc183)
    } loc(#loc182)
    cir.return loc(#loc51)
  } loc(#loc180)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc83)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc83)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc83)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc83)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc83)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc83)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc83)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc83)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc83)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc83)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc83)
      cir.yield %22 : !u32i loc(#loc83)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc83)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc83)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc83)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc83)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc83)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc83)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc83)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc83)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc83)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc83)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc83)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc83)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc83)
      cir.yield %26 : !u32i loc(#loc83)
    }) : (!cir.bool) -> !u32i loc(#loc83)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc83)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %9 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc178)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.call @goodB2G1Sink(%10) : (!s32i) -> () loc(#loc88)
    cir.return loc(#loc78)
  } loc(#loc189)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc93, #loc94])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc196)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc194)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc98)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc103)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !s32i loc(#loc200)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc104)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %10 = cir.unary(inc, %9) : !s32i, !s32i loc(#loc110)
            cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc202)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc113)
          } else {
            %8 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc201)
        } loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.return loc(#loc92)
  } loc(#loc195)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc120)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc122)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc122)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc122)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc122)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc122)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc122)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc122)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc122)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc122)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc122)
      cir.yield %22 : !u32i loc(#loc122)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc122)
      %13 = cir.const #cir.int<30> : !s32i loc(#loc122)
      %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc122)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc122)
      %17 = cir.const #cir.int<15> : !s32i loc(#loc122)
      %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc122)
      %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc122)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc122)
      %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc122)
      %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc122)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc122)
      %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc122)
      %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc122)
      cir.yield %26 : !u32i loc(#loc122)
    }) : (!cir.bool) -> !u32i loc(#loc122)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc122)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %9 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc194)
    cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc208)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    cir.call @goodB2G2Sink(%10) : (!s32i) -> () loc(#loc127)
    cir.return loc(#loc117)
  } loc(#loc204)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc209)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc132, #loc133])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc211)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc209)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc137)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
          %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc143)
          cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc215)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc145)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc146)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc212)
    cir.return loc(#loc131)
  } loc(#loc210)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc151)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc153)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc155)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc209)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc158)
    cir.return loc(#loc148)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_rand_preinc_21.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":23:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":23:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":36:1)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":26:1)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":35:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":27:8)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":28:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":29:9)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":34:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":32:13)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":32:26)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":31:13)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":31:15)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":33:26)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":33:13)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":38:1)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":47:1)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":40:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":40:9)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":42:12)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":42:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":44:12)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":44:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":45:17)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":45:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":46:13)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":46:5)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":148:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":153:1)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":150:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":150:14)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":151:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":151:14)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":152:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":152:13)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":54:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":54:29)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":64:19)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":77:23)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":59:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":80:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":60:1)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":61:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":79:5)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":61:8)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":62:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":65:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":67:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":64:9)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":69:9)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":78:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":69:13)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":69:20)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":69:18)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":70:9)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":74:9)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":76:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":72:13)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":72:26)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":71:13)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":71:15)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":73:26)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":73:13)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":77:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":82:1)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":91:1)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":84:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":84:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":86:12)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":86:5)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":88:12)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":88:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":89:22)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":89:5)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":90:18)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":90:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":55:1)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":55:29)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":94:1)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":110:1)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":95:1)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":96:5)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":109:5)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":96:8)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":97:5)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":99:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":108:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":99:13)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":99:20)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":99:18)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":100:9)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":104:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":106:9)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":102:13)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":102:26)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":101:13)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":101:15)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":103:26)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":103:13)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":107:23)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":107:13)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":112:1)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":121:1)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":114:5)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":114:9)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":116:12)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":116:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":118:12)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":118:5)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":119:22)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":119:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":120:18)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":120:5)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":56:1)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":56:28)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":124:1)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":135:1)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":125:1)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":126:5)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":134:5)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":126:8)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":127:5)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":128:9)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":133:9)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":131:13)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":131:26)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":130:13)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":130:15)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":132:26)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":132:13)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":137:1)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":146:1)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":139:5)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":139:9)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":141:12)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":141:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":143:12)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":143:5)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":144:21)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":144:5)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":145:17)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_preinc_21.c":145:5)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc164 = loc(fused[#loc12, #loc13])
#loc165 = loc(fused[#loc15, #loc13])
#loc166 = loc(fused[#loc16, #loc17])
#loc167 = loc(fused[#loc18, #loc19])
#loc168 = loc(fused[#loc20, #loc21])
#loc169 = loc(fused[#loc24, #loc25])
#loc170 = loc(fused[#loc26, #loc27])
#loc171 = loc(fused[#loc29, #loc28])
#loc172 = loc(fused[#loc31, #loc30])
#loc173 = loc(fused[#loc33, #loc32])
#loc174 = loc(fused[#loc36, #loc37])
#loc175 = loc(fused[#loc38, #loc39])
#loc176 = loc(fused[#loc40, #loc41])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc46, #loc47])
#loc180 = loc(fused[#loc50, #loc51])
#loc182 = loc(fused[#loc55, #loc56])
#loc183 = loc(fused[#loc58, #loc59, #loc60, #loc56])
#loc184 = loc(fused[#loc62, #loc63])
#loc185 = loc(fused[#loc64, #loc65])
#loc186 = loc(fused[#loc67, #loc68, #loc69, #loc63])
#loc187 = loc(fused[#loc70, #loc71])
#loc188 = loc(fused[#loc72, #loc73])
#loc189 = loc(fused[#loc77, #loc78])
#loc190 = loc(fused[#loc79, #loc80])
#loc191 = loc(fused[#loc82, #loc81])
#loc192 = loc(fused[#loc84, #loc83])
#loc193 = loc(fused[#loc86, #loc85])
#loc194 = loc(fused[#loc89, #loc90])
#loc195 = loc(fused[#loc91, #loc92])
#loc197 = loc(fused[#loc96, #loc97])
#loc198 = loc(fused[#loc99, #loc97])
#loc199 = loc(fused[#loc100, #loc101])
#loc200 = loc(fused[#loc102, #loc103])
#loc201 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc202 = loc(fused[#loc108, #loc109])
#loc203 = loc(fused[#loc110, #loc111])
#loc204 = loc(fused[#loc116, #loc117])
#loc205 = loc(fused[#loc118, #loc119])
#loc206 = loc(fused[#loc121, #loc120])
#loc207 = loc(fused[#loc123, #loc122])
#loc208 = loc(fused[#loc125, #loc124])
#loc209 = loc(fused[#loc128, #loc129])
#loc210 = loc(fused[#loc130, #loc131])
#loc212 = loc(fused[#loc135, #loc136])
#loc213 = loc(fused[#loc138, #loc136])
#loc214 = loc(fused[#loc139, #loc140])
#loc215 = loc(fused[#loc141, #loc142])
#loc216 = loc(fused[#loc143, #loc144])
#loc217 = loc(fused[#loc147, #loc148])
#loc218 = loc(fused[#loc149, #loc150])
#loc219 = loc(fused[#loc152, #loc151])
#loc220 = loc(fused[#loc154, #loc153])
#loc221 = loc(fused[#loc156, #loc155])
