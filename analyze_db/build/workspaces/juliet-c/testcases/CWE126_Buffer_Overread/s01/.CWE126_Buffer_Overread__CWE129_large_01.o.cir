!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_large_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc90)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_large_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc97)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc97)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc97)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc99)
        cir.if %8 {
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc27)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc28)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc29)
        } loc(#loc100)
      } loc(#loc98)
    } loc(#loc96)
    cir.return loc(#loc7)
  } loc(#loc92)
  cir.func no_proto @CWE126_Buffer_Overread__CWE129_large_01_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc101)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc105)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc106)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc43)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc109)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc109)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc109)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc111)
        cir.if %8 {
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %10 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc57)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc57)
          %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc58)
        } else {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc59)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc59)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
        } loc(#loc112)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc37)
  } loc(#loc104)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc67)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc69)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    cir.scope {
      %4 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc118)
      %5 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc118)
      cir.store %5, %4 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc118)
      cir.scope {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc78)
        %8 = cir.cmp(ge, %6, %7) : !s32i, !cir.bool loc(#loc120)
        %9 = cir.ternary(%8, true {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %11 = cir.const #cir.int<10> : !s32i loc(#loc81)
          %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc121)
          %13 = cir.ternary(%12, true {
            %14 = cir.const #true loc(#loc79)
            cir.yield %14 : !cir.bool loc(#loc79)
          }, false {
            %14 = cir.const #false loc(#loc79)
            cir.yield %14 : !cir.bool loc(#loc79)
          }) : (!cir.bool) -> !cir.bool loc(#loc79)
          cir.yield %13 : !cir.bool loc(#loc79)
        }, false {
          %10 = cir.const #false loc(#loc79)
          cir.yield %10 : !cir.bool loc(#loc79)
        }) : (!cir.bool) -> !cir.bool loc(#loc79)
        cir.if %9 {
          %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %11 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc87)
          %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc87)
          %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc87)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc88)
        } else {
          %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc61)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc61)
          cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc89)
        } loc(#loc122)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc63)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_large_01.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":39:23)
#loc6 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":22:1)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":42:1)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":24:5)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":24:9)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":26:13)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":26:12)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":26:5)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":28:12)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":28:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":29:5)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":41:5)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":30:9)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":30:30)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":33:9)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":40:9)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":33:13)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":33:21)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":34:9)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":36:9)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":38:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":35:33)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":35:26)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":35:13)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":39:13)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":94:1)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":98:1)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":96:5)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":96:13)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":97:5)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":97:13)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":49:1)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":70:1)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":51:5)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":51:9)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":53:13)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":53:12)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":53:5)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":56:12)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":56:5)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":57:5)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":69:5)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":58:9)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":58:30)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":61:9)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":68:9)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":61:13)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":61:21)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":62:9)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":64:9)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":66:9)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":63:33)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":63:26)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":63:13)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":67:23)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":67:13)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":89:23)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":73:1)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":92:1)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":75:5)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":75:9)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":77:13)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":77:12)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":77:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":79:12)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":79:5)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":80:5)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":91:5)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":81:9)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":81:30)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:9)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":90:9)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:13)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:21)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:23)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:26)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:34)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":83:36)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":84:9)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":86:9)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":88:9)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":85:33)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":85:26)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":85:13)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_large_01.c":89:13)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc6, #loc7])
#loc93 = loc(fused[#loc8, #loc9])
#loc94 = loc(fused[#loc12, #loc10])
#loc95 = loc(fused[#loc14, #loc13])
#loc96 = loc(fused[#loc15, #loc16])
#loc97 = loc(fused[#loc17, #loc18])
#loc98 = loc(fused[#loc19, #loc20])
#loc99 = loc(fused[#loc21, #loc22])
#loc100 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc101 = loc(fused[#loc30, #loc31])
#loc102 = loc(fused[#loc32, #loc33])
#loc103 = loc(fused[#loc34, #loc35])
#loc104 = loc(fused[#loc36, #loc37])
#loc105 = loc(fused[#loc38, #loc39])
#loc106 = loc(fused[#loc42, #loc40])
#loc107 = loc(fused[#loc44, #loc43])
#loc108 = loc(fused[#loc45, #loc46])
#loc109 = loc(fused[#loc47, #loc48])
#loc110 = loc(fused[#loc49, #loc50])
#loc111 = loc(fused[#loc51, #loc52])
#loc112 = loc(fused[#loc53, #loc54, #loc55, #loc50])
#loc113 = loc(fused[#loc62, #loc63])
#loc114 = loc(fused[#loc64, #loc65])
#loc115 = loc(fused[#loc68, #loc66])
#loc116 = loc(fused[#loc70, #loc69])
#loc117 = loc(fused[#loc71, #loc72])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc75, #loc76])
#loc120 = loc(fused[#loc77, #loc78])
#loc121 = loc(fused[#loc80, #loc82])
#loc122 = loc(fused[#loc83, #loc84, #loc85, #loc76])
