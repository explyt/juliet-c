!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc108)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc11)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc11)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc11)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc11)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc11)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc11)
      cir.yield %32 : !u64i loc(#loc11)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc11)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc11)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc11)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc11)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc11)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc11)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc11)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc11)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc11)
      cir.yield %36 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
    %9 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData : !cir.ptr<!s64i> loc(#loc109)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc114)
    %10 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc115)
    cir.call %10() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_multiply_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc116)
  cir.func private @printLongLongLine(!s64i) loc(#loc119)
  cir.func no_proto internal private @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_badData : !cir.ptr<!s64i> loc(#loc109)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc28)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc32)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc32)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc123)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc125)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc36)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc35)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc35)
        %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc36)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc125)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc37)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc38)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc26)
  } loc(#loc120)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc126)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc45)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc47)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc47)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc49)
    %5 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData : !cir.ptr<!s64i> loc(#loc126)
    cir.store %4, %5 : !s64i, !cir.ptr<!s64i> loc(#loc131)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc132)
    cir.call %6() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc42)
  } loc(#loc127)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodG2BData : !cir.ptr<!s64i> loc(#loc126)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc56)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc59)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc60)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc136)
      cir.if %6 {
        %7 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc138)
        %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc63)
        %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc63)
        %11 = cir.binop(mul, %8, %10) nsw : !s64i loc(#loc64)
        cir.store %11, %7 : !s64i, !cir.ptr<!s64i> loc(#loc138)
        %12 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc65)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc66)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc54)
  } loc(#loc133)
  cir.global "private" internal dsolocal @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData = #cir.int<0> : !s64i {alignment = 8 : i64} loc(#loc139)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc73)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc142)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc75)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc75)
    %6 = cir.ternary(%5, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc75)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc75)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc75)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc75)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc75)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc75)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc75)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc75)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc75)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc75)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc75)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc75)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc75)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc75)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc75)
      cir.yield %32 : !u64i loc(#loc75)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc75)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc75)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc75)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc75)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc75)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc75)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc75)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc75)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc75)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc75)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc75)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc75)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc75)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc75)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc75)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc75)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc75)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc75)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc75)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc75)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc75)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc75)
      cir.yield %36 : !u64i loc(#loc75)
    }) : (!cir.bool) -> !u64i loc(#loc75)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc75)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc143)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
    %9 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData : !cir.ptr<!s64i> loc(#loc139)
    cir.store %8, %9 : !s64i, !cir.ptr<!s64i> loc(#loc144)
    %10 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc145)
    cir.call %10() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc79)
    cir.return loc(#loc70)
  } loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.get_global @CWE190_Integer_Overflow__int64_t_rand_multiply_45_goodB2GData : !cir.ptr<!s64i> loc(#loc139)
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc148)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc91)
      %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc91)
      %6 = cir.cmp(gt, %3, %5) : !s64i, !cir.bool loc(#loc150)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc95)
          %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc96)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc97)
          %10 = cir.cast(integral, %9 : !s32i), !s64i loc(#loc97)
          %11 = cir.binop(div, %8, %10) : !s64i loc(#loc153)
          %12 = cir.cmp(lt, %7, %11) : !s64i, !cir.bool loc(#loc154)
          cir.if %12 {
            %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc156)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc104)
            %15 = cir.const #cir.int<2> : !s32i loc(#loc103)
            %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc103)
            %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc104)
            cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc156)
            %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc105)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc106)
          } else {
            %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc83)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc83)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          } loc(#loc155)
        } loc(#loc152)
      } loc(#loc151)
    } loc(#loc149)
    cir.return loc(#loc85)
  } loc(#loc147)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":20:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":20:16)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":37:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":45:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":39:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":39:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":40:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":40:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":42:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":42:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":43:65)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":43:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":44:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":44:13)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":102:1)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":106:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":104:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":104:13)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":105:5)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":105:13)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":26:1)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":35:1)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":28:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":28:20)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":34:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:8)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":29:15)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":30:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:33)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":32:26)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":33:27)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":33:9)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":21:1)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":21:16)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":63:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":71:1)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":65:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":65:13)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":66:12)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":66:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":68:12)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":68:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":69:69)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":69:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":70:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":70:17)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":52:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":61:1)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":54:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":54:20)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":60:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:8)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":55:15)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":56:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:33)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":58:26)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":59:27)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":59:9)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":22:1)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":22:16)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":92:1)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":100:1)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":94:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":94:13)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":95:12)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":95:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":97:21)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":97:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":98:69)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":98:5)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":99:5)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":99:17)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":87:23)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":74:1)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":90:1)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":76:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":76:20)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":89:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:8)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":77:15)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":78:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:9)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":88:9)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:13)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:21)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:31)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":80:32)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":81:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":84:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":86:9)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:13)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:37)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":82:30)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":83:31)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":83:13)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_45.c":87:13)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc7, #loc8])
#loc112 = loc(fused[#loc10, #loc9])
#loc113 = loc(fused[#loc12, #loc11])
#loc114 = loc(fused[#loc14, #loc13])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc17, #loc18])
#loc117 = loc(fused[#loc19, #loc20])
#loc118 = loc(fused[#loc21, #loc22])
#loc119 = loc(fused[#loc23, #loc24])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc29, #loc30])
#loc123 = loc(fused[#loc31, #loc32])
#loc124 = loc(fused[#loc33, #loc30])
#loc125 = loc(fused[#loc34, #loc35])
#loc126 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc41, #loc42])
#loc128 = loc(fused[#loc43, #loc44])
#loc129 = loc(fused[#loc46, #loc45])
#loc130 = loc(fused[#loc48, #loc47])
#loc131 = loc(fused[#loc50, #loc49])
#loc132 = loc(fused[#loc51, #loc52])
#loc133 = loc(fused[#loc53, #loc54])
#loc134 = loc(fused[#loc55, #loc56])
#loc135 = loc(fused[#loc57, #loc58])
#loc136 = loc(fused[#loc59, #loc60])
#loc137 = loc(fused[#loc61, #loc58])
#loc138 = loc(fused[#loc62, #loc63])
#loc139 = loc(fused[#loc67, #loc68])
#loc140 = loc(fused[#loc69, #loc70])
#loc141 = loc(fused[#loc71, #loc72])
#loc142 = loc(fused[#loc74, #loc73])
#loc143 = loc(fused[#loc76, #loc75])
#loc144 = loc(fused[#loc78, #loc77])
#loc145 = loc(fused[#loc79, #loc80])
#loc146 = loc(fused[#loc81, #loc82])
#loc147 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc86, #loc87])
#loc149 = loc(fused[#loc88, #loc89])
#loc150 = loc(fused[#loc90, #loc91])
#loc151 = loc(fused[#loc92, #loc89])
#loc152 = loc(fused[#loc93, #loc94])
#loc153 = loc(fused[#loc96, #loc97])
#loc154 = loc(fused[#loc95, #loc98])
#loc155 = loc(fused[#loc99, #loc100, #loc101, #loc94])
#loc156 = loc(fused[#loc102, #loc103])
