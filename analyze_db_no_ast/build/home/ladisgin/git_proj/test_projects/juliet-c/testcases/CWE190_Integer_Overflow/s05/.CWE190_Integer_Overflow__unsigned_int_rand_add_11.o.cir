!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func no_proto private  @globalReturnsTrue(...) -> !s32i loc(#loc170)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc171)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc172)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_add_11_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc174)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc11)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc175)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc177)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc177)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc18)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc18)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc18)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc18)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc18)
          cir.yield %25 : !u32i loc(#loc18)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc18)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc18)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc18)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc18)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc18)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc18)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc18)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc18)
          cir.yield %29 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc18)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc179)
      } loc(#loc178)
    } loc(#loc176)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc181)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc181)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc22)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc28)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc185)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc184)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc30)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc31)
        } loc(#loc183)
      } loc(#loc182)
    } loc(#loc180)
    cir.return loc(#loc8)
  } loc(#loc173)
  cir.func no_proto  @CWE190_Integer_Overflow__unsigned_int_rand_add_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc188)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc186)
  cir.func no_proto private  @globalReturnsFalse(...) -> !s32i loc(#loc191)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc192)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc52)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc52)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc195)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc197)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc197)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc56)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc56)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc59)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc59)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc59)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc59)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc59)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc59)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc59)
          cir.yield %25 : !u32i loc(#loc59)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc59)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc59)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc59)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc59)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc59)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc59)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc59)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc59)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc59)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc59)
          cir.yield %29 : !u32i loc(#loc59)
        }) : (!cir.bool) -> !u32i loc(#loc59)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc59)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc59)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc199)
      } loc(#loc198)
    } loc(#loc196)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc201)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc201)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc63)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc63)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc72)
          %10 = cir.const #cir.int<2> : !u32i loc(#loc72)
          %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc72)
          %12 = cir.const #cir.int<1> : !u32i loc(#loc72)
          %13 = cir.binop(add, %11, %12) : !u32i loc(#loc72)
          %14 = cir.cmp(lt, %7, %13) : !u32i, !s32i loc(#loc204)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc73)
          cir.if %15 {
            %16 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc206)
            %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc79)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc78)
            %20 = cir.binop(add, %17, %19) : !u32i loc(#loc207)
            cir.store %20, %16 : !u32i, !cir.ptr<!u32i> loc(#loc206)
            %21 = cir.load %16 : !cir.ptr<!u32i>, !u32i loc(#loc80)
            cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc81)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc47)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc205)
        } loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.return loc(#loc49)
  } loc(#loc193)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc87)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc210)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc212)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc212)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc91)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc91)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc94)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc94)
        %11 = cir.ternary(%10, true {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc94)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc94)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc94)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc94)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc94)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc94)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc94)
          cir.yield %25 : !u32i loc(#loc94)
        }, false {
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc94)
          %16 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc94)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc94)
          %20 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc94)
          %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc94)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc94)
          %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc94)
          %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc94)
          %27 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc94)
          %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc94)
          cir.yield %29 : !u32i loc(#loc94)
        }) : (!cir.bool) -> !u32i loc(#loc94)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc94)
        %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc94)
        cir.store %13, %0 : !u32i, !cir.ptr<!u32i> loc(#loc214)
      } loc(#loc213)
    } loc(#loc211)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc216)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc216)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc98)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc103)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc104)
          %10 = cir.const #cir.int<2> : !u32i loc(#loc104)
          %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc104)
          %12 = cir.const #cir.int<1> : !u32i loc(#loc104)
          %13 = cir.binop(add, %11, %12) : !u32i loc(#loc104)
          %14 = cir.cmp(lt, %7, %13) : !u32i, !s32i loc(#loc219)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc105)
          cir.if %15 {
            %16 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc221)
            %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
            %18 = cir.const #cir.int<1> : !s32i loc(#loc110)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc110)
            %20 = cir.binop(add, %17, %19) : !u32i loc(#loc222)
            cir.store %20, %16 : !u32i, !cir.ptr<!u32i> loc(#loc221)
            %21 = cir.load %16 : !cir.ptr<!u32i>, !u32i loc(#loc112)
            cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc113)
          } else {
            %16 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc220)
        } loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.return loc(#loc84)
  } loc(#loc208)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc120)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc225)
    cir.scope {
      %3 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc227)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc227)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc124)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc129)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc129)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc130)
      } else {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc131)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc131)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc231)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc231)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc135)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc135)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc234)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc142)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc141)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc141)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc235)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc234)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc143)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc144)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc117)
  } loc(#loc223)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc237)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc149)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc149)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc238)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc240)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc240)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc153)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc153)
      cir.if %6 {
        %7 = cir.const #cir.int<2> : !s32i loc(#loc156)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc156)
        cir.store %8, %0 : !u32i, !cir.ptr<!u32i> loc(#loc242)
      } loc(#loc241)
    } loc(#loc239)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc244)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc244)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc160)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc247)
          %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc167)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc166)
          %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc166)
          %11 = cir.binop(add, %8, %10) : !u32i loc(#loc248)
          cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc247)
          %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc168)
          cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc169)
        } loc(#loc246)
      } loc(#loc245)
    } loc(#loc243)
    cir.return loc(#loc146)
  } loc(#loc236)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":22:1)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":39:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":24:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":24:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":26:8)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":26:26)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":29:30)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":29:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":31:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":31:8)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":31:26)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":32:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":37:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":35:13)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":35:42)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":35:35)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":36:31)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":145:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":151:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":147:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":147:14)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":148:5)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":148:14)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":149:5)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":149:14)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":150:5)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":150:14)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":58:19)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":70:23)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":46:1)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":73:1)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":48:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":48:18)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":49:12)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":49:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":50:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":54:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":50:8)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":50:26)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":51:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":53:30)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":53:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":55:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":72:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":55:8)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":55:27)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":56:5)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":59:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":61:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":58:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":63:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":71:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":63:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":63:20)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":63:18)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":64:9)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":67:9)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":69:9)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":65:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":65:42)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":65:35)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":66:31)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":66:13)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":70:13)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":76:1)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":98:1)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":78:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":78:18)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":79:12)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":79:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":80:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":84:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":80:8)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":80:26)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":81:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":83:30)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":83:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":85:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":97:5)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":85:8)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":85:26)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":86:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":88:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":96:9)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":88:13)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":88:20)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":88:18)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":89:9)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":92:9)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":94:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":90:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":90:42)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":90:35)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":91:31)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":91:13)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":95:23)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":95:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":101:1)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":123:1)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":103:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":103:18)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":104:12)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":104:5)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":105:5)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":114:5)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":105:8)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":105:27)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":106:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":109:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":111:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":108:19)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":108:9)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":113:16)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":113:9)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":115:5)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":122:5)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":115:8)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":115:26)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":116:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":117:9)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":121:9)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":119:13)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":119:42)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":119:35)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":120:31)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":120:13)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":126:1)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":143:1)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":128:5)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":128:18)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":129:12)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":129:5)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":130:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":134:5)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":130:8)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":130:26)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":131:5)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":133:16)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":133:9)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":135:5)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":142:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":135:8)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":135:26)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":136:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":137:9)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":141:9)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":139:13)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":139:42)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":139:35)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":140:31)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_rand_add_11.c":140:13)
#loc170 = loc(fused[#loc1, #loc2])
#loc171 = loc(fused[#loc3, #loc4])
#loc172 = loc(fused[#loc5, #loc6])
#loc173 = loc(fused[#loc7, #loc8])
#loc174 = loc(fused[#loc9, #loc10])
#loc175 = loc(fused[#loc12, #loc11])
#loc176 = loc(fused[#loc13, #loc14])
#loc177 = loc(fused[#loc15, #loc16])
#loc178 = loc(fused[#loc17, #loc14])
#loc179 = loc(fused[#loc19, #loc18])
#loc180 = loc(fused[#loc20, #loc21])
#loc181 = loc(fused[#loc22, #loc23])
#loc182 = loc(fused[#loc24, #loc21])
#loc183 = loc(fused[#loc25, #loc26])
#loc184 = loc(fused[#loc27, #loc28])
#loc185 = loc(fused[#loc29, #loc28])
#loc186 = loc(fused[#loc32, #loc33])
#loc187 = loc(fused[#loc34, #loc35])
#loc188 = loc(fused[#loc36, #loc37])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc42, #loc43])
#loc192 = loc(fused[#loc44, #loc45])
#loc193 = loc(fused[#loc48, #loc49])
#loc194 = loc(fused[#loc50, #loc51])
#loc195 = loc(fused[#loc53, #loc52])
#loc196 = loc(fused[#loc54, #loc55])
#loc197 = loc(fused[#loc56, #loc57])
#loc198 = loc(fused[#loc58, #loc55])
#loc199 = loc(fused[#loc60, #loc59])
#loc200 = loc(fused[#loc61, #loc62])
#loc201 = loc(fused[#loc63, #loc64])
#loc202 = loc(fused[#loc65, #loc66, #loc67, #loc62])
#loc203 = loc(fused[#loc69, #loc70])
#loc204 = loc(fused[#loc71, #loc72])
#loc205 = loc(fused[#loc74, #loc75, #loc76, #loc70])
#loc206 = loc(fused[#loc77, #loc78])
#loc207 = loc(fused[#loc79, #loc78])
#loc208 = loc(fused[#loc83, #loc84])
#loc209 = loc(fused[#loc85, #loc86])
#loc210 = loc(fused[#loc88, #loc87])
#loc211 = loc(fused[#loc89, #loc90])
#loc212 = loc(fused[#loc91, #loc92])
#loc213 = loc(fused[#loc93, #loc90])
#loc214 = loc(fused[#loc95, #loc94])
#loc215 = loc(fused[#loc96, #loc97])
#loc216 = loc(fused[#loc98, #loc99])
#loc217 = loc(fused[#loc100, #loc97])
#loc218 = loc(fused[#loc101, #loc102])
#loc219 = loc(fused[#loc103, #loc104])
#loc220 = loc(fused[#loc106, #loc107, #loc108, #loc102])
#loc221 = loc(fused[#loc109, #loc110])
#loc222 = loc(fused[#loc111, #loc110])
#loc223 = loc(fused[#loc116, #loc117])
#loc224 = loc(fused[#loc118, #loc119])
#loc225 = loc(fused[#loc121, #loc120])
#loc226 = loc(fused[#loc122, #loc123])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc126, #loc127, #loc128, #loc123])
#loc229 = loc(fused[#loc132, #loc131])
#loc230 = loc(fused[#loc133, #loc134])
#loc231 = loc(fused[#loc135, #loc136])
#loc232 = loc(fused[#loc137, #loc134])
#loc233 = loc(fused[#loc138, #loc139])
#loc234 = loc(fused[#loc140, #loc141])
#loc235 = loc(fused[#loc142, #loc141])
#loc236 = loc(fused[#loc145, #loc146])
#loc237 = loc(fused[#loc147, #loc148])
#loc238 = loc(fused[#loc150, #loc149])
#loc239 = loc(fused[#loc151, #loc152])
#loc240 = loc(fused[#loc153, #loc154])
#loc241 = loc(fused[#loc155, #loc152])
#loc242 = loc(fused[#loc157, #loc156])
#loc243 = loc(fused[#loc158, #loc159])
#loc244 = loc(fused[#loc160, #loc161])
#loc245 = loc(fused[#loc162, #loc159])
#loc246 = loc(fused[#loc163, #loc164])
#loc247 = loc(fused[#loc165, #loc166])
#loc248 = loc(fused[#loc167, #loc166])
