!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc59 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":145:10)
#loc60 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":145:14)
#loc61 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":145:20)
#loc62 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":145:32)
#true = #cir.bool<true> : !cir.bool
#loc189 = loc(fused[#loc59, #loc60])
#loc190 = loc(fused[#loc61, #loc62])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc167)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc168)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc169)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc172)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc167)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc18)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc177)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc178)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc25)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc25)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc178)
          cir.scope {
            %9 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc28)
            %10 = cir.const #cir.int<256> : !s32i loc(#loc29)
            %11 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %12 = cir.load %11 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %13 = cir.call @fgets(%9, %10, %12) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %16 = cir.cmp(ne, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
            cir.if %16 {
              %17 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc36)
              %18 = cir.call @atof(%17) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc37)
              cir.store %18, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc182)
            } else {
              %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc181)
          } loc(#loc179)
          %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc41)
          %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc41)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc42)
        } loc(#loc176)
      } loc(#loc175)
    } loc(#loc174)
    cir.return loc(#loc15)
  } loc(#loc173)
  cir.func no_proto @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc186)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc187)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc53)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc56)
  cir.func @main(%arg0: !s32i loc(fused[#loc59, #loc60]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc61, #loc62])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc189)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc190)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc58)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc63)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc64)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc65)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc65)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc66)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc53)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %8 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_good() : () -> () loc(#loc68)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc54)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc55)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %13 = cir.get_global @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call @CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05_bad() : () -> () loc(#loc72)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc56)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc193)
    cir.return %17 : !s32i loc(#loc193)
  } loc(#loc188)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Value is too small or large to be represented as an int\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc80)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc194)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc85)
      cir.if %2 {
        %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc79)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc79)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } else {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc199)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc200)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc95)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc95)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc200)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc98)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc99)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc100)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc101)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc202)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc106)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc107)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc204)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc110)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc110)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc111)
            } loc(#loc203)
          } loc(#loc201)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc114)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc115)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc115)
            %10 = cir.cmp(gt, %7, %9) : !cir.double, !cir.bool loc(#loc206)
            %11 = cir.ternary(%10, true {
              %12 = cir.const #true loc(#loc116)
              cir.yield %12 : !cir.bool loc(#loc116)
            }, false {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc117)
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc118)
              %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc118)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc118)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc118)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc118)
              %18 = cir.cmp(lt, %12, %17) : !cir.double, !cir.bool loc(#loc207)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc116)
                cir.yield %20 : !cir.bool loc(#loc116)
              }, false {
                %20 = cir.const #false loc(#loc116)
                cir.yield %20 : !cir.bool loc(#loc116)
              }) : (!cir.bool) -> !cir.bool loc(#loc116)
              cir.yield %19 : !cir.bool loc(#loc116)
            }) : (!cir.bool) -> !cir.bool loc(#loc116)
            cir.if %11 {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc80)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc80)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc122)
            } else {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc123)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc123)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc124)
            } loc(#loc208)
          } loc(#loc205)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc82)
  } loc(#loc195)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc167)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc129)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 256>, !cir.ptr<!cir.array<!s8i x 256>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc213)
          %4 = cir.alloca !cir.double, !cir.ptr<!cir.double>, ["doubleNumber", init] {alignment = 8 : i64} loc(#loc214)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc136)
          %6 = cir.cast(int_to_float, %5 : !s32i), !cir.double loc(#loc136)
          cir.store %6, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc214)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc139)
            %8 = cir.const #cir.int<256> : !s32i loc(#loc140)
            %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
            %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc141)
            %11 = cir.call @fgets(%7, %8, %10) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc142)
            %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc143)
            %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc143)
            %14 = cir.cmp(ne, %11, %13) : !cir.ptr<!s8i>, !cir.bool loc(#loc216)
            cir.if %14 {
              %15 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 256>>), !cir.ptr<!s8i> loc(#loc147)
              %16 = cir.call @atof(%15) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc148)
              cir.store %16, %4 : !cir.double, !cir.ptr<!cir.double> loc(#loc218)
            } else {
              %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc151)
              %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc151)
              cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc152)
            } loc(#loc217)
          } loc(#loc215)
          cir.scope {
            %7 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc155)
            %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc156)
            %9 = cir.cast(int_to_float, %8 : !s32i), !cir.double loc(#loc156)
            %10 = cir.cmp(gt, %7, %9) : !cir.double, !cir.bool loc(#loc220)
            %11 = cir.ternary(%10, true {
              %12 = cir.const #true loc(#loc157)
              cir.yield %12 : !cir.bool loc(#loc157)
            }, false {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc158)
              %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc159)
              %14 = cir.unary(minus, %13) : !s32i, !s32i loc(#loc159)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc159)
              %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc159)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc159)
              %18 = cir.cmp(lt, %12, %17) : !cir.double, !cir.bool loc(#loc221)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc157)
                cir.yield %20 : !cir.bool loc(#loc157)
              }, false {
                %20 = cir.const #false loc(#loc157)
                cir.yield %20 : !cir.bool loc(#loc157)
              }) : (!cir.bool) -> !cir.bool loc(#loc157)
              cir.yield %19 : !cir.bool loc(#loc157)
            }) : (!cir.bool) -> !cir.bool loc(#loc157)
            cir.if %11 {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc163)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc163)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc164)
            } else {
              %12 = cir.load %4 : !cir.ptr<!cir.double>, !cir.double loc(#loc165)
              %13 = cir.cast(float_to_int, %12 : !cir.double), !s32i loc(#loc165)
              cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc166)
            } loc(#loc222)
          } loc(#loc219)
        } loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.return loc(#loc126)
  } loc(#loc209)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE681_Incorrect_Conversion_Between_Numeric_Types/CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":0:0)
#loc1 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":23:1)
#loc2 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":102:1)
#loc8 = loc("/usr/include/stdlib.h":103:33)
#loc9 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":43:27)
#loc12 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":28:1)
#loc15 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":49:1)
#loc16 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":30:5)
#loc17 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":48:5)
#loc18 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":30:8)
#loc19 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":31:5)
#loc20 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":32:9)
#loc21 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":47:9)
#loc22 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":33:13)
#loc23 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":33:45)
#loc24 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":34:13)
#loc25 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":34:35)
#loc26 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:13)
#loc27 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":44:13)
#loc28 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:23)
#loc29 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:36)
#loc30 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:53)
#loc31 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:17)
#loc32 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":36:63)
#loc33 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":37:13)
#loc34 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":40:13)
#loc35 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":42:13)
#loc36 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":39:37)
#loc37 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":39:32)
#loc38 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":39:17)
#loc39 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":39:48)
#loc40 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":43:17)
#loc41 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":46:31)
#loc42 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":46:13)
#loc43 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":130:1)
#loc44 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":134:1)
#loc45 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":132:5)
#loc46 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":132:11)
#loc47 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":133:5)
#loc48 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":133:11)
#loc49 = loc("/usr/include/stdlib.h":575:1)
#loc50 = loc("/usr/include/stdlib.h":575:41)
#loc51 = loc("/usr/include/time.h":76:1)
#loc52 = loc("/usr/include/time.h":76:38)
#loc53 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":150:15)
#loc54 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":152:15)
#loc55 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":155:15)
#loc56 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":157:15)
#loc57 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":145:1)
#loc58 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":160:1)
#loc63 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":146:1)
#loc64 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":148:27)
#loc65 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":148:22)
#loc66 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":148:5)
#loc67 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":150:5)
#loc68 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":151:5)
#loc69 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":151:75)
#loc70 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":152:5)
#loc71 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":155:5)
#loc72 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":156:5)
#loc73 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":156:74)
#loc74 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":157:5)
#loc75 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":159:12)
#loc76 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":159:5)
#loc77 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":24:1)
#loc78 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":24:26)
#loc79 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":61:19)
#loc80 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":85:27)
#loc81 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":56:1)
#loc82 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":93:1)
#loc83 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":58:5)
#loc84 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":92:5)
#loc85 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":58:8)
#loc86 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":59:5)
#loc87 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":62:5)
#loc88 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":64:5)
#loc89 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":61:9)
#loc90 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":65:9)
#loc91 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":91:9)
#loc92 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":66:13)
#loc93 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":66:45)
#loc94 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":67:13)
#loc95 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":67:35)
#loc96 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:13)
#loc97 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":81:13)
#loc98 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:23)
#loc99 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:36)
#loc100 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:53)
#loc101 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:17)
#loc102 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":73:63)
#loc103 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":74:13)
#loc104 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":77:13)
#loc105 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":79:13)
#loc106 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":76:37)
#loc107 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":76:32)
#loc108 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":76:17)
#loc109 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":76:48)
#loc110 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":80:27)
#loc111 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":80:17)
#loc112 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:13)
#loc113 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":90:13)
#loc114 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:17)
#loc115 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:32)
#loc116 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:40)
#loc117 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:43)
#loc118 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":83:58)
#loc119 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":84:13)
#loc120 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":86:13)
#loc121 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":88:13)
#loc122 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":85:17)
#loc123 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":89:35)
#loc124 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":89:17)
#loc125 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":96:1)
#loc126 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":128:1)
#loc127 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":98:5)
#loc128 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":127:5)
#loc129 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":98:8)
#loc130 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":99:5)
#loc131 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":100:9)
#loc132 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":126:9)
#loc133 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":101:13)
#loc134 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":101:45)
#loc135 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":102:13)
#loc136 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":102:35)
#loc137 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:13)
#loc138 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":116:13)
#loc139 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:23)
#loc140 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:36)
#loc141 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:53)
#loc142 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:17)
#loc143 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":108:63)
#loc144 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":109:13)
#loc145 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":112:13)
#loc146 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":114:13)
#loc147 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":111:37)
#loc148 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":111:32)
#loc149 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":111:17)
#loc150 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":111:48)
#loc151 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":115:27)
#loc152 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":115:17)
#loc153 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:13)
#loc154 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":125:13)
#loc155 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:17)
#loc156 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:32)
#loc157 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:40)
#loc158 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:43)
#loc159 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":118:58)
#loc160 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":119:13)
#loc161 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":121:13)
#loc162 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":123:13)
#loc163 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":120:27)
#loc164 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":120:17)
#loc165 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":124:35)
#loc166 = loc("CWE681_Incorrect_Conversion_Between_Numeric_Types__double2int_05.c":124:17)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc5, #loc6])
#loc170 = loc(fused[#loc7, #loc8])
#loc171 = loc(fused[#loc9, #loc10])
#loc172 = loc(fused[#loc12, #loc13])
#loc173 = loc(fused[#loc14, #loc15])
#loc174 = loc(fused[#loc16, #loc17])
#loc175 = loc(fused[#loc19, #loc17])
#loc176 = loc(fused[#loc20, #loc21])
#loc177 = loc(fused[#loc22, #loc23])
#loc178 = loc(fused[#loc24, #loc25])
#loc179 = loc(fused[#loc26, #loc27])
#loc180 = loc(fused[#loc31, #loc32])
#loc181 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc182 = loc(fused[#loc38, #loc39])
#loc183 = loc(fused[#loc43, #loc44])
#loc184 = loc(fused[#loc45, #loc46])
#loc185 = loc(fused[#loc47, #loc48])
#loc186 = loc(fused[#loc49, #loc50])
#loc187 = loc(fused[#loc51, #loc52])
#loc188 = loc(fused[#loc57, #loc58])
#loc191 = loc(fused[#loc68, #loc69])
#loc192 = loc(fused[#loc72, #loc73])
#loc193 = loc(fused[#loc76, #loc75])
#loc194 = loc(fused[#loc77, #loc78])
#loc195 = loc(fused[#loc81, #loc82])
#loc196 = loc(fused[#loc83, #loc84])
#loc197 = loc(fused[#loc86, #loc87, #loc88, #loc84])
#loc198 = loc(fused[#loc90, #loc91])
#loc199 = loc(fused[#loc92, #loc93])
#loc200 = loc(fused[#loc94, #loc95])
#loc201 = loc(fused[#loc96, #loc97])
#loc202 = loc(fused[#loc101, #loc102])
#loc203 = loc(fused[#loc103, #loc104, #loc105, #loc97])
#loc204 = loc(fused[#loc108, #loc109])
#loc205 = loc(fused[#loc112, #loc113])
#loc206 = loc(fused[#loc114, #loc115])
#loc207 = loc(fused[#loc117, #loc118])
#loc208 = loc(fused[#loc119, #loc120, #loc121, #loc113])
#loc209 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc127, #loc128])
#loc211 = loc(fused[#loc130, #loc128])
#loc212 = loc(fused[#loc131, #loc132])
#loc213 = loc(fused[#loc133, #loc134])
#loc214 = loc(fused[#loc135, #loc136])
#loc215 = loc(fused[#loc137, #loc138])
#loc216 = loc(fused[#loc142, #loc143])
#loc217 = loc(fused[#loc144, #loc145, #loc146, #loc138])
#loc218 = loc(fused[#loc149, #loc150])
#loc219 = loc(fused[#loc153, #loc154])
#loc220 = loc(fused[#loc155, #loc156])
#loc221 = loc(fused[#loc158, #loc159])
#loc222 = loc(fused[#loc160, #loc161, #loc162, #loc154])
