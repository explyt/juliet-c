!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":172:10)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":172:14)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":172:20)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":172:32)
#true = #cir.bool<true> : !cir.bool
#loc348 = loc(fused[#loc121, #loc122])
#loc349 = loc(fused[#loc123, #loc124])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc301)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc302)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc303)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc304)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc305)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc306)
  cir.func private @printIntLine(!s32i) loc(#loc307)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc308)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc310)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc313)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc313)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc313)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc32)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc33)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc33)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc33)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc33)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc33)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc33)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc33)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc33)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc302)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc34)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc35)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc36)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc36)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc315)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc40)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc41)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc317)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc44)
        } loc(#loc316)
      } loc(#loc314)
    } loc(#loc312)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc319)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc320)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc51)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc52)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc52)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc321)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc322)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc51)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc323)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc320)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc58)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc325)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc60)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc61)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc62)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc60)
        } loc(#loc326)
      } loc(#loc324)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc65)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc328)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc68)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc329)
          cir.condition(%18) loc(#loc69)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc72)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc74)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc331)
          } loc(#loc330)
          cir.yield loc(#loc64)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc76)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc332)
          cir.yield loc(#loc327)
        } loc(#loc327)
      } loc(#loc327)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc79)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc334)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc84)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc87)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc336)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc90)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc93)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc339)
              cir.condition(%25) loc(#loc94)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc96)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc97)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc98)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc99)
              } loc(#loc340)
              cir.yield loc(#loc89)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc101)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
              cir.yield loc(#loc337)
            } loc(#loc337)
          } loc(#loc337)
        } else {
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        } loc(#loc335)
      } loc(#loc333)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc103)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc104)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc103)
    } loc(#loc318)
    cir.return loc(#loc20)
  } loc(#loc309)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc343)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc107)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc344)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc109)
    cir.return loc(#loc106)
  } loc(#loc342)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc345)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc346)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc116)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc117)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc118)
  cir.func @main(%arg0: !s32i loc(fused[#loc121, #loc122]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc123, #loc124])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc348)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc349)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc120)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc125)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc126)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc127)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc127)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc128)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc115)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc115)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc350)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_good() : () -> () loc(#loc130)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc116)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc116)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc132)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc117)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc117)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc351)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01_bad() : () -> () loc(#loc134)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc118)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc118)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc352)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc352)
    cir.return %17 : !s32i loc(#loc352)
  } loc(#loc347)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc354)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc144)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc355)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc146)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc356)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc358)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc359)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc154)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc155)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc155)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc360)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc361)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc154)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc362)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc359)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc161)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc364)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc163)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc164)
          %22 = cir.unary(minus, %21) : !s32i, !s32i loc(#loc165)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc163)
        } loc(#loc365)
      } loc(#loc363)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc168)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc367)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc171)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc368)
          cir.condition(%19) loc(#loc172)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc174)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc175)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc176)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc177)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc370)
          } loc(#loc369)
          cir.yield loc(#loc167)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc178)
          %18 = cir.unary(inc, %17) : !s32i, !s32i loc(#loc179)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc371)
          cir.yield loc(#loc366)
        } loc(#loc366)
      } loc(#loc366)
      cir.scope {
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc183)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc373)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc187)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc188)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc189)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc190)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc375)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc193)
            cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc377)
            cir.for : cond {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc195)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc196)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc378)
              cir.condition(%26) loc(#loc197)
            } body {
              cir.scope {
                %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc199)
                %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc200)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc201)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc199)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc202)
              } loc(#loc379)
              cir.yield loc(#loc192)
            } step {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc203)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc204)
              cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc380)
              cir.yield loc(#loc376)
            } loc(#loc376)
          } loc(#loc376)
        } else {
          %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc205)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc205)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc206)
        } loc(#loc374)
      } loc(#loc372)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc207)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc208)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc208)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc207)
    } loc(#loc357)
    cir.return loc(#loc140)
  } loc(#loc353)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc209)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc382)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc214)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc215)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc383)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc385)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc385)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc385)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc223)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc224)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc224)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc224)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc224)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc224)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc224)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc224)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc224)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc302)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc225)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc226)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc227)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc227)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc387)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc231)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc232)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc389)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc235)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc235)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc236)
        } loc(#loc388)
      } loc(#loc386)
    } loc(#loc384)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc391)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc392)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc243)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc244)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc244)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc393)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc394)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc243)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc395)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc392)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc249)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc250)
        %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc250)
        %18 = cir.cmp(eq, %15, %17) : !cir.ptr<!s32i>, !cir.bool loc(#loc397)
        cir.if %18 {
          %19 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc252)
          %20 = cir.const #cir.int<1> : !s32i loc(#loc253)
          %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc254)
          cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc252)
        } loc(#loc398)
      } loc(#loc396)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc257)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc400)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc260)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc401)
          cir.condition(%18) loc(#loc261)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc263)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc264)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc266)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc403)
          } loc(#loc402)
          cir.yield loc(#loc256)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc267)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc268)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc404)
          cir.yield loc(#loc399)
        } loc(#loc399)
      } loc(#loc399)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc271)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc272)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc406)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc274)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc275)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc407)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc273)
            cir.yield %23 : !cir.bool loc(#loc273)
          }, false {
            %23 = cir.const #false loc(#loc273)
            cir.yield %23 : !cir.bool loc(#loc273)
          }) : (!cir.bool) -> !cir.bool loc(#loc273)
          cir.yield %22 : !cir.bool loc(#loc273)
        }, false {
          %19 = cir.const #false loc(#loc273)
          cir.yield %19 : !cir.bool loc(#loc273)
        }) : (!cir.bool) -> !cir.bool loc(#loc273)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc280)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc281)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc282)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc283)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc409)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc286)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc411)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc288)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc289)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc412)
              cir.condition(%26) loc(#loc290)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc292)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc293)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc294)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc292)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc295)
              } loc(#loc413)
              cir.yield loc(#loc285)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc296)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc297)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc414)
              cir.yield loc(#loc410)
            } loc(#loc410)
          } loc(#loc410)
        } else {
          %19 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc209)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc209)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc298)
        } loc(#loc408)
      } loc(#loc405)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc299)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc300)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc300)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc299)
    } loc(#loc390)
    cir.return loc(#loc211)
  } loc(#loc381)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":39:23)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":64:23)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":24:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":68:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":26:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":28:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":28:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":28:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":29:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":41:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":30:45)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":40:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:19)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:32)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:49)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":32:59)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":33:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":36:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":38:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":35:25)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":35:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":35:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":35:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":39:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":42:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":67:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":43:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":43:13)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:54)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:31)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:38)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:43)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":44:53)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:39)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:23)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:30)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:36)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":45:35)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":50:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:18)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:14)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:21)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:25)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:23)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":48:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":49:25)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":49:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":49:20)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":49:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:30)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":47:29)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":53:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":65:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":53:13)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":53:21)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":54:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":61:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":63:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":55:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":55:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":55:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":55:24)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":60:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:21)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:24)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:28)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":58:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":59:30)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":59:37)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":59:38)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":59:17)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:33)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":57:32)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":64:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":66:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":66:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":157:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":161:1)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":159:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":159:13)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":160:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":160:13)
#loc111 = loc("/usr/include/stdlib.h":575:1)
#loc112 = loc("/usr/include/stdlib.h":575:41)
#loc113 = loc("/usr/include/time.h":76:1)
#loc114 = loc("/usr/include/time.h":76:38)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":177:15)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":179:15)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":182:15)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":184:15)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":172:1)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":187:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":173:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":175:27)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":175:22)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":175:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":177:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":178:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":178:63)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":179:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":182:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":183:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":183:62)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":184:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":186:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":186:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":75:1)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":109:1)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":77:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":77:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":79:13)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":79:12)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":79:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":82:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":82:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":83:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":108:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":84:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":84:13)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:9)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:54)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:31)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:38)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:43)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":85:53)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:39)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:13)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:29)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:30)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:36)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":86:35)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":91:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:18)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:14)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:21)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:25)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:23)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":89:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":90:25)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":90:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":90:20)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":90:21)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:30)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":88:29)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":94:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":106:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":94:13)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":94:21)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":95:9)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":102:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":104:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":96:28)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":96:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":96:20)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":96:24)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:13)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":101:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:21)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:17)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:28)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:26)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":99:13)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":100:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":100:37)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":100:38)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":100:17)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:33)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":98:32)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":105:23)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":105:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":107:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":107:14)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":151:23)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":112:1)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":155:1)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":114:5)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":114:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":116:13)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":116:12)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":116:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":117:5)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":129:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":118:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":118:45)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":128:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:19)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:32)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:49)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":120:59)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":121:9)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":124:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":126:9)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":123:25)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":123:20)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":123:13)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":123:36)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":127:23)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":127:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":130:5)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":154:5)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":131:9)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":131:13)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:9)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:54)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:31)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:38)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:43)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":132:53)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:9)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:39)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:23)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:29)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:30)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:36)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":133:35)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:9)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":138:9)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:18)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:14)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:21)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:25)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:23)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":136:9)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":137:25)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":137:13)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":137:20)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":137:21)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:30)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":135:29)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:9)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":152:9)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:13)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:21)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:23)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:26)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:34)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":140:36)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":141:9)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":148:9)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":150:9)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":142:28)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":142:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":142:20)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":142:24)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:13)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":147:13)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:21)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:17)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:24)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:28)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:26)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":145:13)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":146:30)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":146:37)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":146:38)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":146:17)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:33)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":144:32)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":151:13)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":153:9)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_01.c":153:14)
#loc301 = loc(fused[#loc1, #loc2])
#loc302 = loc(fused[#loc3, #loc4])
#loc303 = loc(fused[#loc5, #loc6])
#loc304 = loc(fused[#loc7, #loc8])
#loc305 = loc(fused[#loc10, #loc11])
#loc306 = loc(fused[#loc12, #loc13])
#loc307 = loc(fused[#loc14, #loc15])
#loc308 = loc(fused[#loc17, #loc18])
#loc309 = loc(fused[#loc19, #loc20])
#loc310 = loc(fused[#loc21, #loc22])
#loc311 = loc(fused[#loc25, #loc23])
#loc312 = loc(fused[#loc26, #loc27])
#loc313 = loc(fused[#loc28, #loc29])
#loc314 = loc(fused[#loc30, #loc31])
#loc315 = loc(fused[#loc35, #loc36])
#loc316 = loc(fused[#loc37, #loc38, #loc39, #loc31])
#loc317 = loc(fused[#loc42, #loc43])
#loc318 = loc(fused[#loc45, #loc46])
#loc319 = loc(fused[#loc47, #loc48])
#loc320 = loc(fused[#loc49, #loc50])
#loc321 = loc(fused[#loc53, #loc54])
#loc322 = loc(fused[#loc52, #loc54])
#loc323 = loc(fused[#loc51, #loc50])
#loc324 = loc(fused[#loc55, #loc56])
#loc325 = loc(fused[#loc57, #loc58])
#loc326 = loc(fused[#loc59, #loc56])
#loc327 = loc(fused[#loc63, #loc64])
#loc328 = loc(fused[#loc66, #loc65])
#loc329 = loc(fused[#loc67, #loc68])
#loc330 = loc(fused[#loc70, #loc64])
#loc331 = loc(fused[#loc72, #loc71])
#loc332 = loc(fused[#loc76, #loc75])
#loc333 = loc(fused[#loc77, #loc78])
#loc334 = loc(fused[#loc79, #loc80])
#loc335 = loc(fused[#loc81, #loc82, #loc83, #loc78])
#loc336 = loc(fused[#loc85, #loc84])
#loc337 = loc(fused[#loc88, #loc89])
#loc338 = loc(fused[#loc91, #loc90])
#loc339 = loc(fused[#loc92, #loc93])
#loc340 = loc(fused[#loc95, #loc89])
#loc341 = loc(fused[#loc101, #loc100])
#loc342 = loc(fused[#loc105, #loc106])
#loc343 = loc(fused[#loc107, #loc108])
#loc344 = loc(fused[#loc109, #loc110])
#loc345 = loc(fused[#loc111, #loc112])
#loc346 = loc(fused[#loc113, #loc114])
#loc347 = loc(fused[#loc119, #loc120])
#loc350 = loc(fused[#loc130, #loc131])
#loc351 = loc(fused[#loc134, #loc135])
#loc352 = loc(fused[#loc138, #loc137])
#loc353 = loc(fused[#loc139, #loc140])
#loc354 = loc(fused[#loc141, #loc142])
#loc355 = loc(fused[#loc145, #loc143])
#loc356 = loc(fused[#loc147, #loc146])
#loc357 = loc(fused[#loc148, #loc149])
#loc358 = loc(fused[#loc150, #loc151])
#loc359 = loc(fused[#loc152, #loc153])
#loc360 = loc(fused[#loc156, #loc157])
#loc361 = loc(fused[#loc155, #loc157])
#loc362 = loc(fused[#loc154, #loc153])
#loc363 = loc(fused[#loc158, #loc159])
#loc364 = loc(fused[#loc160, #loc161])
#loc365 = loc(fused[#loc162, #loc159])
#loc366 = loc(fused[#loc166, #loc167])
#loc367 = loc(fused[#loc169, #loc168])
#loc368 = loc(fused[#loc170, #loc171])
#loc369 = loc(fused[#loc173, #loc167])
#loc370 = loc(fused[#loc175, #loc174])
#loc371 = loc(fused[#loc179, #loc178])
#loc372 = loc(fused[#loc180, #loc181])
#loc373 = loc(fused[#loc182, #loc183])
#loc374 = loc(fused[#loc184, #loc185, #loc186, #loc181])
#loc375 = loc(fused[#loc188, #loc187])
#loc376 = loc(fused[#loc191, #loc192])
#loc377 = loc(fused[#loc194, #loc193])
#loc378 = loc(fused[#loc195, #loc196])
#loc379 = loc(fused[#loc198, #loc192])
#loc380 = loc(fused[#loc204, #loc203])
#loc381 = loc(fused[#loc210, #loc211])
#loc382 = loc(fused[#loc212, #loc213])
#loc383 = loc(fused[#loc216, #loc214])
#loc384 = loc(fused[#loc217, #loc218])
#loc385 = loc(fused[#loc219, #loc220])
#loc386 = loc(fused[#loc221, #loc222])
#loc387 = loc(fused[#loc226, #loc227])
#loc388 = loc(fused[#loc228, #loc229, #loc230, #loc222])
#loc389 = loc(fused[#loc233, #loc234])
#loc390 = loc(fused[#loc237, #loc238])
#loc391 = loc(fused[#loc239, #loc240])
#loc392 = loc(fused[#loc241, #loc242])
#loc393 = loc(fused[#loc245, #loc246])
#loc394 = loc(fused[#loc244, #loc246])
#loc395 = loc(fused[#loc243, #loc242])
#loc396 = loc(fused[#loc247, #loc248])
#loc397 = loc(fused[#loc249, #loc250])
#loc398 = loc(fused[#loc251, #loc248])
#loc399 = loc(fused[#loc255, #loc256])
#loc400 = loc(fused[#loc258, #loc257])
#loc401 = loc(fused[#loc259, #loc260])
#loc402 = loc(fused[#loc262, #loc256])
#loc403 = loc(fused[#loc264, #loc263])
#loc404 = loc(fused[#loc268, #loc267])
#loc405 = loc(fused[#loc269, #loc270])
#loc406 = loc(fused[#loc271, #loc272])
#loc407 = loc(fused[#loc274, #loc276])
#loc408 = loc(fused[#loc277, #loc278, #loc279, #loc270])
#loc409 = loc(fused[#loc281, #loc280])
#loc410 = loc(fused[#loc284, #loc285])
#loc411 = loc(fused[#loc287, #loc286])
#loc412 = loc(fused[#loc288, #loc289])
#loc413 = loc(fused[#loc291, #loc285])
#loc414 = loc(fused[#loc297, #loc296])
