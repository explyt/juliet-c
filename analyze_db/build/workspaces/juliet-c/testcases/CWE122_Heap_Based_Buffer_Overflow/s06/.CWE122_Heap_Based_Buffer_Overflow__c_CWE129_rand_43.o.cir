!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":25:23)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":25:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":70:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":70:32)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":112:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":112:32)
#true = #cir.bool<true> : !cir.bool
#loc245 = loc(fused[#loc5, #loc6])
#loc280 = loc(fused[#loc89, #loc90])
#loc310 = loc(fused[#loc163, #loc164])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc243)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc245)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      cir.yield %19 : !u32i loc(#loc8)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc8)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc8)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc8)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc8)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc8)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc8)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc8)
      cir.yield %23 : !u32i loc(#loc8)
    }) : (!cir.bool) -> !u32i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc9)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.return loc(#loc4)
  } loc(#loc244)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc247)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc248)
  cir.func private @printIntLine(!s32i) loc(#loc249)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc18)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc251)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc26)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L9badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc28)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc256)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc257)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc35)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc36)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc36)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc258)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc259)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc35)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc260)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc257)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc41)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc42)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc262)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc45)
          %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc46)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
        } loc(#loc263)
      } loc(#loc261)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc49)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc265)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc52)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc266)
          cir.condition(%18) loc(#loc266)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc56)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc57)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc268)
          } loc(#loc267)
          cir.yield loc(#loc48)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc58)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc59)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc269)
          cir.yield loc(#loc264)
        } loc(#loc264)
      } loc(#loc264)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc271)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc68)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc70)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc273)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc73)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc275)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc76)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc276)
              cir.condition(%25) loc(#loc276)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc78)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc79)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc80)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc81)
              } loc(#loc277)
              cir.yield loc(#loc72)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc83)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc278)
              cir.yield loc(#loc274)
            } loc(#loc274)
          } loc(#loc274)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc18)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc18)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc84)
        } loc(#loc272)
      } loc(#loc270)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc85)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc86)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc86)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc85)
    } loc(#loc255)
    cir.return loc(#loc22)
  } loc(#loc252)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc89, #loc90])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc280)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc91)
    %1 = cir.const #cir.int<7> : !s32i loc(#loc92)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.return loc(#loc88)
  } loc(#loc279)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc283)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc98)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc99)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L13goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc101)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc286)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc287)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc108)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc109)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc109)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc288)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc289)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc290)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc287)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc115)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc292)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc117)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc119)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
        } loc(#loc293)
      } loc(#loc291)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc122)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc295)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc125)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc296)
          cir.condition(%18) loc(#loc296)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc127)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc129)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc130)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          } loc(#loc297)
          cir.yield loc(#loc121)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc132)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc299)
          cir.yield loc(#loc294)
        } loc(#loc294)
      } loc(#loc294)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc136)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc301)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc140)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc141)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc143)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc146)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc149)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc306)
              cir.condition(%25) loc(#loc306)
            } body {
              cir.scope {
                %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
                %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc152)
                %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc153)
                %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc151)
                cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc154)
              } loc(#loc307)
              cir.yield loc(#loc145)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc155)
              %24 = cir.unary(inc, %23) nsw : !s32i, !s32i loc(#loc156)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc308)
              cir.yield loc(#loc304)
            } loc(#loc304)
          } loc(#loc304)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc157)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc157)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        } loc(#loc302)
      } loc(#loc300)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc159)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc160)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc159)
    } loc(#loc285)
    cir.return loc(#loc95)
  } loc(#loc282)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc163, #loc164])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc310)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc165)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc166)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc166)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc166)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc166)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc166)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc166)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc166)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc166)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc166)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc166)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc166)
      cir.yield %19 : !u32i loc(#loc166)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc166)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc166)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc166)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc166)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc166)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc166)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc166)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc166)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc166)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc166)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc166)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc166)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc166)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc166)
      cir.yield %23 : !u32i loc(#loc166)
    }) : (!cir.bool) -> !u32i loc(#loc166)
    %6 = cir.cast(integral, %5 : !u32i), !s32i loc(#loc166)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
    cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc311)
    cir.return loc(#loc162)
  } loc(#loc309)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc168)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc174)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L13goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc176)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc316)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc317)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc183)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc184)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc184)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc318)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc319)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc183)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc320)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc317)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc189)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc190)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc322)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc192)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc193)
          %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc194)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc192)
        } loc(#loc323)
      } loc(#loc321)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc197)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc325)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc200)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc326)
          cir.condition(%18) loc(#loc326)
        } body {
          cir.scope {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc202)
            %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc203)
            %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc204)
            %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc205)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc328)
          } loc(#loc327)
          cir.yield loc(#loc196)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc207)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc329)
          cir.yield loc(#loc324)
        } loc(#loc324)
      } loc(#loc324)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc210)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc211)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc331)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc214)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc332)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc212)
            cir.yield %23 : !cir.bool loc(#loc212)
          }, false {
            %23 = cir.const #false loc(#loc212)
            cir.yield %23 : !cir.bool loc(#loc212)
          }) : (!cir.bool) -> !cir.bool loc(#loc212)
          cir.yield %22 : !cir.bool loc(#loc212)
        }, false {
          %19 = cir.const #false loc(#loc212)
          cir.yield %19 : !cir.bool loc(#loc212)
        }) : (!cir.bool) -> !cir.bool loc(#loc212)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc219)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc220)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc221)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc222)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc334)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc225)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc336)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc227)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc228)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc337)
              cir.condition(%26) loc(#loc337)
            } body {
              cir.scope {
                %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
                %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc232)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc230)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc233)
              } loc(#loc338)
              cir.yield loc(#loc224)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc234)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc235)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc339)
              cir.yield loc(#loc335)
            } loc(#loc335)
          } loc(#loc335)
        } else {
          %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc168)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc168)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc236)
        } loc(#loc333)
      } loc(#loc330)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc237)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc238)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc238)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc237)
    } loc(#loc315)
    cir.return loc(#loc170)
  } loc(#loc312)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L7goodG2BEv() : () -> () loc(#loc241)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43L7goodB2GEv() : () -> () loc(#loc242)
    cir.return loc(#loc240)
  } loc(#loc340)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":25:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":29:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":26:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":28:12)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":28:5)
#loc10 = loc("/usr/include/stdlib.h":672:1)
#loc11 = loc("/usr/include/stdlib.h":672:45)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":59:23)
#loc19 = loc("/usr/include/stdlib.h":687:1)
#loc20 = loc("/usr/include/stdlib.h":687:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":31:1)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":63:1)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":33:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":33:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":35:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":35:12)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":35:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":36:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":37:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":62:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":38:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":38:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:54)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:38)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":39:53)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:39)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:13)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:29)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:30)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":40:35)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":45:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:18)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:21)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:25)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":43:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":44:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":44:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":44:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":44:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":42:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":48:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":60:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":48:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":48:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":49:9)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":56:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":58:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":50:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":50:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":50:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":50:24)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":55:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:21)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:24)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":53:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":54:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":54:37)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":54:38)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":54:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":52:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":59:13)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":61:9)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":61:14)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":70:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":75:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":71:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":74:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":74:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":77:1)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":109:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":79:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":79:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":81:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":81:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":81:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":82:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":83:5)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":108:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":84:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":84:13)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:54)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:38)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":85:53)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:39)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:23)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:29)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:30)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:36)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":86:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":91:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:18)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:21)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:25)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":89:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":90:25)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":90:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":90:20)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":90:21)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:30)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":88:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":94:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":106:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":94:13)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":94:21)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":95:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":102:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":104:9)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":96:28)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":96:13)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":96:20)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":96:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":101:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:21)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:17)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:24)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:28)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":99:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":100:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":100:37)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":100:38)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":100:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:33)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":98:32)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":105:23)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":105:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":107:9)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":107:14)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":112:1)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":116:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":113:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":115:12)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":115:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":145:23)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":118:1)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":149:1)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":120:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":120:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":122:13)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":122:12)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":122:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":123:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":124:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":148:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":125:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":125:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:54)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:31)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:38)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:43)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":126:53)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:9)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:39)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:23)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:29)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:30)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:36)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":127:35)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":132:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:18)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:14)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:21)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:25)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":130:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":131:25)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":131:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":131:20)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":131:21)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:30)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":129:29)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:9)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":146:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:13)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:21)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:23)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:26)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:34)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":134:36)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":135:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":142:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":144:9)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":136:28)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":136:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":136:20)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":136:24)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:13)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":141:13)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:21)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:17)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:24)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:28)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":139:13)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":140:30)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":140:37)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":140:38)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":140:17)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:33)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":138:32)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":145:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":147:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":147:14)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":151:1)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":155:1)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":153:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_43.cpp":154:5)
#loc243 = loc(fused[#loc1, #loc2])
#loc244 = loc(fused[#loc3, #loc4])
#loc246 = loc(fused[#loc9, #loc8])
#loc247 = loc(fused[#loc10, #loc11])
#loc248 = loc(fused[#loc12, #loc13])
#loc249 = loc(fused[#loc14, #loc15])
#loc250 = loc(fused[#loc16, #loc17])
#loc251 = loc(fused[#loc19, #loc20])
#loc252 = loc(fused[#loc21, #loc22])
#loc253 = loc(fused[#loc23, #loc24])
#loc254 = loc(fused[#loc27, #loc25])
#loc255 = loc(fused[#loc29, #loc30])
#loc256 = loc(fused[#loc31, #loc32])
#loc257 = loc(fused[#loc33, #loc34])
#loc258 = loc(fused[#loc37, #loc38])
#loc259 = loc(fused[#loc36, #loc38])
#loc260 = loc(fused[#loc35, #loc34])
#loc261 = loc(fused[#loc39, #loc40])
#loc262 = loc(fused[#loc41, #loc42])
#loc263 = loc(fused[#loc43, #loc40])
#loc264 = loc(fused[#loc47, #loc48])
#loc265 = loc(fused[#loc50, #loc49])
#loc266 = loc(fused[#loc51, #loc52])
#loc267 = loc(fused[#loc53, #loc48])
#loc268 = loc(fused[#loc55, #loc54])
#loc269 = loc(fused[#loc59, #loc58])
#loc270 = loc(fused[#loc60, #loc61])
#loc271 = loc(fused[#loc62, #loc63])
#loc272 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc273 = loc(fused[#loc68, #loc67])
#loc274 = loc(fused[#loc71, #loc72])
#loc275 = loc(fused[#loc74, #loc73])
#loc276 = loc(fused[#loc75, #loc76])
#loc277 = loc(fused[#loc77, #loc72])
#loc278 = loc(fused[#loc83, #loc82])
#loc279 = loc(fused[#loc87, #loc88])
#loc281 = loc(fused[#loc93, #loc92])
#loc282 = loc(fused[#loc94, #loc95])
#loc283 = loc(fused[#loc96, #loc97])
#loc284 = loc(fused[#loc100, #loc98])
#loc285 = loc(fused[#loc102, #loc103])
#loc286 = loc(fused[#loc104, #loc105])
#loc287 = loc(fused[#loc106, #loc107])
#loc288 = loc(fused[#loc110, #loc111])
#loc289 = loc(fused[#loc109, #loc111])
#loc290 = loc(fused[#loc108, #loc107])
#loc291 = loc(fused[#loc112, #loc113])
#loc292 = loc(fused[#loc114, #loc115])
#loc293 = loc(fused[#loc116, #loc113])
#loc294 = loc(fused[#loc120, #loc121])
#loc295 = loc(fused[#loc123, #loc122])
#loc296 = loc(fused[#loc124, #loc125])
#loc297 = loc(fused[#loc126, #loc121])
#loc298 = loc(fused[#loc128, #loc127])
#loc299 = loc(fused[#loc132, #loc131])
#loc300 = loc(fused[#loc133, #loc134])
#loc301 = loc(fused[#loc135, #loc136])
#loc302 = loc(fused[#loc137, #loc138, #loc139, #loc134])
#loc303 = loc(fused[#loc141, #loc140])
#loc304 = loc(fused[#loc144, #loc145])
#loc305 = loc(fused[#loc147, #loc146])
#loc306 = loc(fused[#loc148, #loc149])
#loc307 = loc(fused[#loc150, #loc145])
#loc308 = loc(fused[#loc156, #loc155])
#loc309 = loc(fused[#loc161, #loc162])
#loc311 = loc(fused[#loc167, #loc166])
#loc312 = loc(fused[#loc169, #loc170])
#loc313 = loc(fused[#loc171, #loc172])
#loc314 = loc(fused[#loc175, #loc173])
#loc315 = loc(fused[#loc177, #loc178])
#loc316 = loc(fused[#loc179, #loc180])
#loc317 = loc(fused[#loc181, #loc182])
#loc318 = loc(fused[#loc185, #loc186])
#loc319 = loc(fused[#loc184, #loc186])
#loc320 = loc(fused[#loc183, #loc182])
#loc321 = loc(fused[#loc187, #loc188])
#loc322 = loc(fused[#loc189, #loc190])
#loc323 = loc(fused[#loc191, #loc188])
#loc324 = loc(fused[#loc195, #loc196])
#loc325 = loc(fused[#loc198, #loc197])
#loc326 = loc(fused[#loc199, #loc200])
#loc327 = loc(fused[#loc201, #loc196])
#loc328 = loc(fused[#loc203, #loc202])
#loc329 = loc(fused[#loc207, #loc206])
#loc330 = loc(fused[#loc208, #loc209])
#loc331 = loc(fused[#loc210, #loc211])
#loc332 = loc(fused[#loc213, #loc215])
#loc333 = loc(fused[#loc216, #loc217, #loc218, #loc209])
#loc334 = loc(fused[#loc220, #loc219])
#loc335 = loc(fused[#loc223, #loc224])
#loc336 = loc(fused[#loc226, #loc225])
#loc337 = loc(fused[#loc227, #loc228])
#loc338 = loc(fused[#loc229, #loc224])
#loc339 = loc(fused[#loc235, #loc234])
#loc340 = loc(fused[#loc239, #loc240])
