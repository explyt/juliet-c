!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int64_t_rand_postinc_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc69)
  cir.func private  @printLongLongLine(!s64i) loc(#loc70)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_postinc_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc72)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc73)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc74)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc76)
      %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      %10 = cir.unary(inc, %9) : !s64i, !s64i loc(#loc18)
      cir.store %10, %0 : !s64i, !cir.ptr<!s64i> loc(#loc77)
      %11 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
      cir.store %11, %8 : !s64i, !cir.ptr<!s64i> loc(#loc76)
      %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc19)
      cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc20)
    } loc(#loc75)
    cir.return loc(#loc6)
  } loc(#loc71)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_postinc_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc79)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc80)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc78)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc31)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc83)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc33)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc84)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc86)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc39)
      %6 = cir.unary(inc, %5) : !s64i, !s64i loc(#loc40)
      cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc87)
      %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc38)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc86)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc41)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc42)
    } loc(#loc85)
    cir.return loc(#loc28)
  } loc(#loc81)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc90)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc50)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc91)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc52)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc52)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc52)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc52)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc52)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc52)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc52)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc52)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc52)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc52)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc52)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc52)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc52)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc52)
      cir.yield %29 : !u64i loc(#loc52)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc52)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc52)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc52)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc52)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc52)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc52)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc52)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc52)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc52)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc52)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc52)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc52)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc52)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc52)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc52)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc52)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc52)
      cir.yield %33 : !u64i loc(#loc52)
    }) : (!cir.bool) -> !u64i loc(#loc52)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc52)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc92)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc56)
      %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc57)
      %10 = cir.cmp(lt, %8, %9) : !s64i, !s32i loc(#loc94)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc58)
      cir.if %11 {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc96)
        %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
        %14 = cir.unary(inc, %13) : !s64i, !s64i loc(#loc65)
        cir.store %14, %0 : !s64i, !cir.ptr<!s64i> loc(#loc97)
        %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc63)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc96)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc66)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc67)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc45)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc45)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc68)
      } loc(#loc95)
    } loc(#loc93)
    cir.return loc(#loc47)
  } loc(#loc89)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s06/CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":34:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":24:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":25:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":27:21)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":27:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":31:9)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":31:26)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":30:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":30:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":32:27)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":32:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":75:1)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":79:1)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":77:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":77:13)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":78:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":78:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":41:1)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":53:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":43:5)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":43:13)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":44:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":46:12)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":46:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":47:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":52:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":50:9)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":50:26)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":49:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":49:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":51:27)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":51:9)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":71:19)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":56:1)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":73:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":58:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":58:13)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":59:12)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":59:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":61:21)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":61:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":63:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":72:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":63:9)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":63:16)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":63:14)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":64:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":68:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":70:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":66:9)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":66:26)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":65:13)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":65:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":67:27)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":67:9)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_postinc_01.c":71:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc7, #loc8])
#loc73 = loc(fused[#loc10, #loc9])
#loc74 = loc(fused[#loc12, #loc11])
#loc75 = loc(fused[#loc13, #loc14])
#loc76 = loc(fused[#loc15, #loc16])
#loc77 = loc(fused[#loc18, #loc17])
#loc78 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc23, #loc24])
#loc80 = loc(fused[#loc25, #loc26])
#loc81 = loc(fused[#loc27, #loc28])
#loc82 = loc(fused[#loc29, #loc30])
#loc83 = loc(fused[#loc32, #loc31])
#loc84 = loc(fused[#loc34, #loc33])
#loc85 = loc(fused[#loc35, #loc36])
#loc86 = loc(fused[#loc37, #loc38])
#loc87 = loc(fused[#loc40, #loc39])
#loc88 = loc(fused[#loc43, #loc44])
#loc89 = loc(fused[#loc46, #loc47])
#loc90 = loc(fused[#loc48, #loc49])
#loc91 = loc(fused[#loc51, #loc50])
#loc92 = loc(fused[#loc53, #loc52])
#loc93 = loc(fused[#loc54, #loc55])
#loc94 = loc(fused[#loc56, #loc57])
#loc95 = loc(fused[#loc59, #loc60, #loc61, #loc55])
#loc96 = loc(fused[#loc62, #loc63])
#loc97 = loc(fused[#loc65, #loc64])
