!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":35:16)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":57:16)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":87:16)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc153)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb1 loc(#loc158)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc14)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc159)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc160)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc17)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb5(%21 : !u32i) loc(#loc17)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb5(%37 : !u32i) loc(#loc17)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":35:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc162)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc21)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc22)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc163)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc164)
  ^bb10:  // pred: ^bb9
    %43 = cir.const #cir.int<100> : !s32i loc(#loc24)
    %44 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %45 = cir.binop(div, %43, %44) : !s32i loc(#loc165)
    cir.call @printIntLine(%45) : (!s32i) -> () loc(#loc26)
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc20)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc6)
  } loc(#loc155)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_divide_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc169)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc170)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc28)
  } loc(#loc166)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc46)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc50)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc51)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc176)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc177)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc53)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc53)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc53)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc53)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc53)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc53)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc53)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc53)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc53)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc53)
    cir.br ^bb5(%21 : !u32i) loc(#loc53)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc53)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc53)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc53)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc53)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc53)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc53)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc53)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc53)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc53)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc53)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc53)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc53)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc53)
    cir.br ^bb5(%37 : !u32i) loc(#loc53)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":57:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc53)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc53)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb7 loc(#loc49)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc49)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %42 = cir.cmp(ne, %40, %41) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %42 ^bb10, ^bb11 loc(#loc181)
  ^bb10:  // pred: ^bb9
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc39)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.br ^bb17 loc(#loc60)
  ^bb11:  // pred: ^bb9
    cir.br ^bb12 loc(#loc182)
  ^bb12:  // pred: ^bb11
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %46 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %47 = cir.cmp(ne, %45, %46) : !s32i, !cir.bool loc(#loc183)
    cir.brcond %47 ^bb13, ^bb14 loc(#loc184)
  ^bb13:  // pred: ^bb12
    %48 = cir.const #cir.int<100> : !s32i loc(#loc70)
    %49 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %50 = cir.binop(div, %48, %49) : !s32i loc(#loc185)
    cir.call @printIntLine(%50) : (!s32i) -> () loc(#loc72)
    cir.br ^bb15 loc(#loc68)
  ^bb14:  // pred: ^bb12
    %51 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc40)
    %52 = cir.cast(array_to_ptrdecay, %51 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%52) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb15 loc(#loc64)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc64)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc56)
  ^bb17:  // 2 preds: ^bb10, ^bb16
    cir.br ^bb18 loc(#loc56)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc42)
  } loc(#loc172)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    cir.br ^bb1 loc(#loc189)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc84)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc191)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc86)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc86)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc86)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc86)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc86)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc86)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc86)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc86)
    cir.br ^bb5(%21 : !u32i) loc(#loc86)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc86)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc86)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc86)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc86)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc86)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc86)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc86)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc86)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc86)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc86)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc86)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc86)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc86)
    cir.br ^bb5(%37 : !u32i) loc(#loc86)
  ^bb5(%38: !u32i loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":87:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc86)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc86)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.br ^bb7 loc(#loc82)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc82)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc193)
  ^bb9:  // pred: ^bb8
    %40 = cir.const #cir.int<5> : !s32i loc(#loc90)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc91)
    %42 = cir.cmp(eq, %40, %41) : !s32i, !cir.bool loc(#loc194)
    cir.brcond %42 ^bb10, ^bb16 loc(#loc195)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc196)
  ^bb11:  // pred: ^bb10
    %43 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %45 = cir.cmp(ne, %43, %44) : !s32i, !cir.bool loc(#loc197)
    cir.brcond %45 ^bb12, ^bb13 loc(#loc198)
  ^bb12:  // pred: ^bb11
    %46 = cir.const #cir.int<100> : !s32i loc(#loc100)
    %47 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    %48 = cir.binop(div, %46, %47) : !s32i loc(#loc199)
    cir.call @printIntLine(%48) : (!s32i) -> () loc(#loc102)
    cir.br ^bb14 loc(#loc98)
  ^bb13:  // pred: ^bb11
    %49 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc103)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%50) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb14 loc(#loc94)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc94)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc89)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc89)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc75)
  } loc(#loc186)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc110)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc114)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc115)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc204)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc119)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc119)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb4 loc(#loc117)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<7> : !s32i loc(#loc121)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc113)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc207)
  ^bb6:  // pred: ^bb5
    %9 = cir.const #cir.int<5> : !s32i loc(#loc125)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc126)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc208)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc209)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<100> : !s32i loc(#loc128)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %14 = cir.binop(div, %12, %13) : !s32i loc(#loc210)
    cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc130)
    cir.br ^bb8 loc(#loc124)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc124)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc106)
  } loc(#loc200)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc212)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc136)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc140)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc141)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc215)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc216)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<7> : !s32i loc(#loc143)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc218)
  ^bb5:  // pred: ^bb4
    %7 = cir.const #cir.int<5> : !s32i loc(#loc147)
    %8 = cir.const #cir.int<5> : !s32i loc(#loc148)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %9 ^bb6, ^bb7 loc(#loc220)
  ^bb6:  // pred: ^bb5
    %10 = cir.const #cir.int<100> : !s32i loc(#loc150)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %12 = cir.binop(div, %10, %11) : !s32i loc(#loc221)
    cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc152)
    cir.br ^bb7 loc(#loc146)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc146)
  ^bb8:  // pred: ^bb7
    cir.return loc(#loc132)
  } loc(#loc211)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":27:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":42:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":29:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":29:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":31:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":31:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":31:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":32:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":36:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":32:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":32:27)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":33:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":35:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":37:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":41:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":37:8)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":37:27)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":38:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":40:22)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":40:28)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":40:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":144:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":150:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":146:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":146:14)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":147:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":147:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":148:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":148:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":149:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":149:14)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":62:19)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":73:23)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":49:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":76:1)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":51:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":51:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":53:13)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":53:12)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":53:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":54:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":58:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":54:8)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":54:27)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":55:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":57:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":59:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":75:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":59:8)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":59:27)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":60:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":63:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":65:5)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":62:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":67:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":74:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":67:13)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":67:21)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":68:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":70:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":72:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":69:26)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":69:32)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":69:13)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":73:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":79:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":101:1)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":81:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":81:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":83:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":83:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":83:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":84:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":88:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":84:8)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":84:27)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":85:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":87:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":89:5)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":100:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":89:8)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":89:27)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":90:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":92:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":99:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":92:13)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":92:21)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":93:9)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":95:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":97:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":94:26)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":94:32)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":94:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":98:23)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":98:13)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":104:1)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":124:1)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":106:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":106:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":108:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":108:12)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":108:5)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":109:5)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":118:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":109:8)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":109:27)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":110:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":113:5)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":115:5)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":112:19)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":112:9)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":117:16)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":117:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":119:5)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":123:5)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":119:8)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":119:27)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":120:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":122:22)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":122:28)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":122:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":127:1)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":142:1)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":129:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":129:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":131:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":131:12)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":131:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":132:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":136:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":132:8)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":132:27)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":133:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":135:16)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":135:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":137:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":141:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":137:8)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":137:27)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":138:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":140:22)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":140:28)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_06.c":140:9)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc11, #loc9])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc16, #loc13])
#loc161 = loc(fused[#loc18, #loc17])
#loc162 = loc(fused[#loc19, #loc20])
#loc163 = loc(fused[#loc21, #loc22])
#loc164 = loc(fused[#loc23, #loc20])
#loc165 = loc(fused[#loc24, #loc25])
#loc166 = loc(fused[#loc27, #loc28])
#loc167 = loc(fused[#loc29, #loc30])
#loc168 = loc(fused[#loc31, #loc32])
#loc169 = loc(fused[#loc33, #loc34])
#loc170 = loc(fused[#loc35, #loc36])
#loc171 = loc(fused[#loc37, #loc38])
#loc172 = loc(fused[#loc41, #loc42])
#loc173 = loc(fused[#loc43, #loc44])
#loc174 = loc(fused[#loc47, #loc45])
#loc175 = loc(fused[#loc48, #loc49])
#loc176 = loc(fused[#loc50, #loc51])
#loc177 = loc(fused[#loc52, #loc49])
#loc178 = loc(fused[#loc54, #loc53])
#loc179 = loc(fused[#loc55, #loc56])
#loc180 = loc(fused[#loc57, #loc58])
#loc181 = loc(fused[#loc59, #loc60, #loc61, #loc56])
#loc182 = loc(fused[#loc63, #loc64])
#loc183 = loc(fused[#loc65, #loc66])
#loc184 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc185 = loc(fused[#loc70, #loc71])
#loc186 = loc(fused[#loc74, #loc75])
#loc187 = loc(fused[#loc76, #loc77])
#loc188 = loc(fused[#loc80, #loc78])
#loc189 = loc(fused[#loc81, #loc82])
#loc190 = loc(fused[#loc83, #loc84])
#loc191 = loc(fused[#loc85, #loc82])
#loc192 = loc(fused[#loc87, #loc86])
#loc193 = loc(fused[#loc88, #loc89])
#loc194 = loc(fused[#loc90, #loc91])
#loc195 = loc(fused[#loc92, #loc89])
#loc196 = loc(fused[#loc93, #loc94])
#loc197 = loc(fused[#loc95, #loc96])
#loc198 = loc(fused[#loc97, #loc98, #loc99, #loc94])
#loc199 = loc(fused[#loc100, #loc101])
#loc200 = loc(fused[#loc105, #loc106])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc111, #loc109])
#loc203 = loc(fused[#loc112, #loc113])
#loc204 = loc(fused[#loc114, #loc115])
#loc205 = loc(fused[#loc116, #loc117, #loc118, #loc113])
#loc206 = loc(fused[#loc122, #loc121])
#loc207 = loc(fused[#loc123, #loc124])
#loc208 = loc(fused[#loc125, #loc126])
#loc209 = loc(fused[#loc127, #loc124])
#loc210 = loc(fused[#loc128, #loc129])
#loc211 = loc(fused[#loc131, #loc132])
#loc212 = loc(fused[#loc133, #loc134])
#loc213 = loc(fused[#loc137, #loc135])
#loc214 = loc(fused[#loc138, #loc139])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc142, #loc139])
#loc217 = loc(fused[#loc144, #loc143])
#loc218 = loc(fused[#loc145, #loc146])
#loc219 = loc(fused[#loc147, #loc148])
#loc220 = loc(fused[#loc149, #loc146])
#loc221 = loc(fused[#loc150, #loc151])
