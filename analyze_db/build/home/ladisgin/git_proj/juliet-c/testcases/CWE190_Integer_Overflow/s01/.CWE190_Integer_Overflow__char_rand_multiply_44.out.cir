!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":22:26)
#loc28 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":39:18)
#loc50 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":111:10)
#loc51 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":111:14)
#loc52 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":111:20)
#loc53 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":111:32)
#loc70 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":49:25)
#loc71 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":49:30)
#loc98 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":70:25)
#loc99 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":70:30)
#loc129 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":93:18)
#loc135 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc50, #loc51])
#loc154 = loc(fused[#loc52, #loc53])
#loc159 = loc(fused[#loc70, #loc71])
#loc170 = loc(fused[#loc98, #loc99])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printHexCharLine(!s8i) loc(#loc133)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc136)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc135)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc9)
    cir.br ^bb1 loc(#loc137)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc12)
    %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc12)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc138)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc139)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc15)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc15)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc15)
    cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc136)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc16)
    cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc134)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc140)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc142)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc143)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc143)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc26)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc26)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc144)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc28)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc28)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc28)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc28)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc28)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc28)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc28)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc28)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc28)
    cir.br ^bb3(%20 : !u32i) loc(#loc28)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc28)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc28)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc28)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc28)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc28)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc28)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc28)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc28)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc28)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc28)
    cir.br ^bb3(%36 : !u32i) loc(#loc28)
  ^bb3(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":39:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc28)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc28)
    cir.store %39, %0 : !s8i, !cir.ptr<!s8i> loc(#loc145)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc30)
    %41 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.call %40(%41) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc30)
    cir.return loc(#loc21)
  } loc(#loc141)
  cir.func no_proto @CWE190_Integer_Overflow__char_rand_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc147)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc146)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc149)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc150)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc151)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_44_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__char_rand_multiply_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE190_Integer_Overflow__char_rand_multiply_44_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.return %17 : !s32i loc(#loc157)
  } loc(#loc152)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc70, #loc71])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc160)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc159)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc74)
    cir.br ^bb1 loc(#loc161)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc77)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc162)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc163)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc80)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc80)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc80)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc80)
    cir.store %10, %0 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    %11 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc81)
    cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc82)
    cir.br ^bb3 loc(#loc76)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc69)
  } loc(#loc158)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc165)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc166)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc88)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc166)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc89)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc89)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc167)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc91)
    %6 = cir.cast(integral, %5 : !s32i), !s8i loc(#loc91)
    cir.store %6, %0 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc93)
    %8 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc94)
    cir.call %7(%8) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc93)
    cir.return loc(#loc84)
  } loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc95)
  cir.func internal private @goodB2GSink(%arg0: !s8i loc(fused[#loc98, #loc99])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc171)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc170)
    cir.store %arg0, %1 : !s8i, !cir.ptr<!s8i> loc(#loc102)
    cir.br ^bb1 loc(#loc172)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc105)
    %3 = cir.cast(integral, %2 : !s8i), !s32i loc(#loc105)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
    %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc173)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc174)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc175)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc110)
    %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc110)
    %8 = cir.const #cir.int<127> : !s32i loc(#loc111)
    %9 = cir.const #cir.int<2> : !s32i loc(#loc112)
    %10 = cir.binop(div, %8, %9) : !s32i loc(#loc176)
    %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc177)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc178)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc117)
    %13 = cir.cast(integral, %12 : !s8i), !s32i loc(#loc117)
    %14 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc117)
    %16 = cir.cast(integral, %15 : !s32i), !s8i loc(#loc117)
    cir.store %16, %0 : !s8i, !cir.ptr<!s8i> loc(#loc171)
    %17 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc118)
    cir.call @printHexCharLine(%17) : (!s8i) -> () loc(#loc119)
    cir.br ^bb6 loc(#loc115)
  ^bb5:  // pred: ^bb3
    %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc95)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc95)
    cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    cir.br ^bb6 loc(#loc109)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc109)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc104)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc104)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc97)
  } loc(#loc169)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc126)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s8i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>> loc(#loc181)
    %3 = cir.const #cir.int<32> : !s32i loc(#loc127)
    %4 = cir.cast(integral, %3 : !s32i), !s8i loc(#loc127)
    cir.store %4, %0 : !s8i, !cir.ptr<!s8i> loc(#loc182)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc129)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc129)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc129)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc129)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc129)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc129)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc129)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc129)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc129)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc129)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc129)
    cir.br ^bb3(%20 : !u32i) loc(#loc129)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc129)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc129)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc129)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc129)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc129)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc129)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc129)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc129)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc129)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc129)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc129)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc129)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc129)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc129)
    cir.br ^bb3(%36 : !u32i) loc(#loc129)
  ^bb3(%37: !u32i loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":93:18)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc129)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc129)
    %39 = cir.cast(integral, %38 : !s32i), !s8i loc(#loc129)
    cir.store %39, %0 : !s8i, !cir.ptr<!s8i> loc(#loc183)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s8i)>>>, !cir.ptr<!cir.func<!void (!s8i)>> loc(#loc131)
    %41 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    cir.call %40(%41) : (!cir.ptr<!cir.func<!void (!s8i)>>, !s8i) -> () loc(#loc131)
    cir.return loc(#loc122)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__char_rand_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc3 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":27:9)
#loc8 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":27:30)
#loc9 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":24:8)
#loc13 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":24:15)
#loc14 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":27:23)
#loc16 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":28:26)
#loc17 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":28:9)
#loc18 = loc("/usr/include/stdlib.h":573:1)
#loc19 = loc("/usr/include/stdlib.h":573:24)
#loc20 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":32:1)
#loc21 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":42:1)
#loc22 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":34:10)
#loc24 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":36:5)
#loc25 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":36:30)
#loc26 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":37:12)
#loc27 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":37:5)
#loc29 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":39:5)
#loc30 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":41:5)
#loc31 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":41:13)
#loc32 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":97:1)
#loc33 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":101:1)
#loc34 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":99:5)
#loc35 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":99:13)
#loc36 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":100:5)
#loc37 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":100:13)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":116:15)
#loc45 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":118:15)
#loc46 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":121:15)
#loc47 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":123:15)
#loc48 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":111:1)
#loc49 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":126:1)
#loc54 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":112:1)
#loc55 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":114:27)
#loc56 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":114:22)
#loc57 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":116:5)
#loc59 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":117:5)
#loc60 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":117:57)
#loc61 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":118:5)
#loc62 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":121:5)
#loc63 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":122:5)
#loc64 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":122:56)
#loc65 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":123:5)
#loc66 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":125:12)
#loc67 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":125:5)
#loc68 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":49:1)
#loc69 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":57:1)
#loc72 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":54:9)
#loc73 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":54:30)
#loc74 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":50:1)
#loc75 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":51:5)
#loc76 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":56:5)
#loc77 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":51:8)
#loc78 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":51:15)
#loc79 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":52:5)
#loc80 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":54:23)
#loc81 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":55:26)
#loc82 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":55:9)
#loc83 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":59:1)
#loc84 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":67:1)
#loc85 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":61:5)
#loc86 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":61:10)
#loc87 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":62:5)
#loc88 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":62:30)
#loc89 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":63:12)
#loc90 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":63:5)
#loc91 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":65:12)
#loc92 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":65:5)
#loc93 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":66:5)
#loc94 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":66:13)
#loc95 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":82:23)
#loc96 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":70:1)
#loc97 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":85:1)
#loc100 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":77:13)
#loc101 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":77:34)
#loc102 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":71:1)
#loc103 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":72:5)
#loc104 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":84:5)
#loc105 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":72:8)
#loc106 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":72:15)
#loc107 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":73:5)
#loc108 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":75:9)
#loc109 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":83:9)
#loc110 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":75:13)
#loc111 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":75:21)
#loc112 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":75:30)
#loc113 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":75:31)
#loc114 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":76:9)
#loc115 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":79:9)
#loc116 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":81:9)
#loc117 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":77:27)
#loc118 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":78:30)
#loc119 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":78:13)
#loc120 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":82:13)
#loc121 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":87:1)
#loc122 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":95:1)
#loc123 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":89:5)
#loc124 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":89:10)
#loc125 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":90:5)
#loc126 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":90:30)
#loc127 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":91:12)
#loc128 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":91:5)
#loc130 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":93:5)
#loc131 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":94:5)
#loc132 = loc("CWE190_Integer_Overflow__char_rand_multiply_44.c":94:13)
#loc133 = loc(fused[#loc1, #loc2])
#loc134 = loc(fused[#loc3, #loc4])
#loc136 = loc(fused[#loc7, #loc8])
#loc137 = loc(fused[#loc10, #loc11])
#loc138 = loc(fused[#loc12, #loc13])
#loc139 = loc(fused[#loc14, #loc11])
#loc140 = loc(fused[#loc18, #loc19])
#loc141 = loc(fused[#loc20, #loc21])
#loc142 = loc(fused[#loc22, #loc23])
#loc143 = loc(fused[#loc24, #loc25])
#loc144 = loc(fused[#loc27, #loc26])
#loc145 = loc(fused[#loc29, #loc28])
#loc146 = loc(fused[#loc32, #loc33])
#loc147 = loc(fused[#loc34, #loc35])
#loc148 = loc(fused[#loc36, #loc37])
#loc149 = loc(fused[#loc38, #loc39])
#loc150 = loc(fused[#loc40, #loc41])
#loc151 = loc(fused[#loc42, #loc43])
#loc152 = loc(fused[#loc48, #loc49])
#loc155 = loc(fused[#loc59, #loc60])
#loc156 = loc(fused[#loc63, #loc64])
#loc157 = loc(fused[#loc67, #loc66])
#loc158 = loc(fused[#loc68, #loc69])
#loc160 = loc(fused[#loc72, #loc73])
#loc161 = loc(fused[#loc75, #loc76])
#loc162 = loc(fused[#loc77, #loc78])
#loc163 = loc(fused[#loc79, #loc76])
#loc164 = loc(fused[#loc83, #loc84])
#loc165 = loc(fused[#loc85, #loc86])
#loc166 = loc(fused[#loc87, #loc88])
#loc167 = loc(fused[#loc90, #loc89])
#loc168 = loc(fused[#loc92, #loc91])
#loc169 = loc(fused[#loc96, #loc97])
#loc171 = loc(fused[#loc100, #loc101])
#loc172 = loc(fused[#loc103, #loc104])
#loc173 = loc(fused[#loc105, #loc106])
#loc174 = loc(fused[#loc107, #loc104])
#loc175 = loc(fused[#loc108, #loc109])
#loc176 = loc(fused[#loc111, #loc112])
#loc177 = loc(fused[#loc110, #loc113])
#loc178 = loc(fused[#loc114, #loc115, #loc116, #loc109])
#loc179 = loc(fused[#loc121, #loc122])
#loc180 = loc(fused[#loc123, #loc124])
#loc181 = loc(fused[#loc125, #loc126])
#loc182 = loc(fused[#loc128, #loc127])
#loc183 = loc(fused[#loc130, #loc129])
