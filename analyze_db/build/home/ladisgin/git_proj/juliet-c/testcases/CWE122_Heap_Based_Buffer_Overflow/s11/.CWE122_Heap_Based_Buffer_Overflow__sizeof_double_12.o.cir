!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc115)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc117)
  cir.func private @printDoubleLine(!cir.double) loc(#loc118)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc119)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc122)
    cir.br ^bb1 loc(#loc123)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc124)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc124)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc125)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc126)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc127)
    cir.store %9, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc128)
    cir.br ^bb3 loc(#loc129)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc31)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc32)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!cir.double>, !cir.bool loc(#loc130)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc131)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc34)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc36)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc34)
    cir.br ^bb5 loc(#loc30)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc30)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc37)
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc38)
    cir.store %17, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc132)
    cir.br ^bb12 loc(#loc22)
  ^bb7:  // pred: ^bb1
    %19 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc40)
    %20 = cir.const #cir.int<8> : !u64i loc(#loc133)
    %21 = cir.call @malloc(%20) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc40)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc134)
    cir.store %22, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc135)
    cir.br ^bb8 loc(#loc136)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc47)
    %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc48)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc48)
    %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!cir.double>, !cir.bool loc(#loc137)
    cir.brcond %26 ^bb9, ^bb10 loc(#loc138)
  ^bb9:  // pred: ^bb8
    %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc50)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc52)
    cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc50)
    cir.br ^bb10 loc(#loc46)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc46)
  ^bb11:  // pred: ^bb10
    %30 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc53)
    %31 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc54)
    cir.store %30, %31 : !cir.double, !cir.ptr<!cir.double> loc(#loc139)
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc18)
  ^bb13:  // pred: ^bb12
    %32 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc56)
    %33 = cir.load %32 : !cir.ptr<!cir.double>, !cir.double loc(#loc57)
    cir.call @printDoubleLine(%33) : (!cir.double) -> () loc(#loc58)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc59)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc59)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc60)
    cir.return loc(#loc12)
  } loc(#loc120)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    cir.return loc(#loc62)
  } loc(#loc140)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc143)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc69)
    cir.store %1, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc144)
    cir.br ^bb1 loc(#loc145)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc146)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc146)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc73)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc147)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc78)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc148)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc149)
    cir.store %9, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc150)
    cir.br ^bb3 loc(#loc151)
  ^bb3:  // pred: ^bb2
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc85)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc86)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!cir.double>, !cir.bool loc(#loc152)
    cir.brcond %13 ^bb4, ^bb5 loc(#loc153)
  ^bb4:  // pred: ^bb3
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc88)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc90)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc88)
    cir.br ^bb5 loc(#loc84)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc84)
  ^bb6:  // pred: ^bb5
    %17 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc91)
    %18 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc92)
    cir.store %17, %18 : !cir.double, !cir.ptr<!cir.double> loc(#loc154)
    cir.br ^bb12 loc(#loc76)
  ^bb7:  // pred: ^bb1
    %19 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc94)
    %20 = cir.const #cir.int<8> : !u64i loc(#loc155)
    %21 = cir.call @malloc(%20) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc156)
    cir.store %22, %0 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc157)
    cir.br ^bb8 loc(#loc158)
  ^bb8:  // pred: ^bb7
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc101)
    %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc102)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc102)
    %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!cir.double>, !cir.bool loc(#loc159)
    cir.brcond %26 ^bb9, ^bb10 loc(#loc160)
  ^bb9:  // pred: ^bb8
    %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc104)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc106)
    cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
    cir.br ^bb10 loc(#loc100)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc100)
  ^bb11:  // pred: ^bb10
    %30 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc107)
    %31 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc108)
    cir.store %30, %31 : !cir.double, !cir.ptr<!cir.double> loc(#loc161)
    cir.br ^bb12 loc(#loc72)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc72)
  ^bb13:  // pred: ^bb12
    %32 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc110)
    %33 = cir.load %32 : !cir.ptr<!cir.double>, !cir.double loc(#loc111)
    cir.call @printDoubleLine(%33) : (!cir.double) -> () loc(#loc112)
    %34 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc113)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc113)
    cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc114)
    cir.return loc(#loc66)
  } loc(#loc142)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":21:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":44:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":23:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":23:14)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":25:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":25:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":40:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":26:8)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":26:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":33:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":35:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":30:26)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":30:33)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":30:44)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":30:45)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":30:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:21)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":31:33)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":32:17)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":32:10)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":32:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":37:26)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":37:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":37:45)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":37:46)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":37:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:37)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:21)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:27)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:34)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":38:33)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":39:17)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":39:10)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":39:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":42:22)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":42:21)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":42:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":43:10)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":43:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":76:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":79:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":78:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":78:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":52:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":74:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":54:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":54:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":56:12)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":56:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":57:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":70:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":57:8)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":57:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":58:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":63:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":65:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":60:26)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":60:33)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":60:45)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":60:46)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":60:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:37)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:13)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:21)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:27)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:28)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:34)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":61:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":62:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":62:10)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":62:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":67:26)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":67:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":67:45)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":67:46)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":67:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:37)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:21)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:27)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:28)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:34)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":68:33)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":69:17)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":69:10)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":69:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":72:22)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":72:21)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":72:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":73:10)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_12.c":73:5)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc120 = loc(fused[#loc11, #loc12])
#loc121 = loc(fused[#loc13, #loc14])
#loc122 = loc(fused[#loc16, #loc15])
#loc123 = loc(fused[#loc17, #loc18])
#loc124 = loc(fused[#loc19, #loc20])
#loc125 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc126 = loc(fused[#loc25, #loc26])
#loc127 = loc(fused[#loc24, #loc27])
#loc128 = loc(fused[#loc28, #loc27])
#loc129 = loc(fused[#loc29, #loc30])
#loc130 = loc(fused[#loc31, #loc32])
#loc131 = loc(fused[#loc33, #loc30])
#loc132 = loc(fused[#loc39, #loc37])
#loc133 = loc(fused[#loc41, #loc42])
#loc134 = loc(fused[#loc40, #loc43])
#loc135 = loc(fused[#loc44, #loc43])
#loc136 = loc(fused[#loc45, #loc46])
#loc137 = loc(fused[#loc47, #loc48])
#loc138 = loc(fused[#loc49, #loc46])
#loc139 = loc(fused[#loc55, #loc53])
#loc140 = loc(fused[#loc61, #loc62])
#loc141 = loc(fused[#loc63, #loc64])
#loc142 = loc(fused[#loc65, #loc66])
#loc143 = loc(fused[#loc67, #loc68])
#loc144 = loc(fused[#loc70, #loc69])
#loc145 = loc(fused[#loc71, #loc72])
#loc146 = loc(fused[#loc73, #loc74])
#loc147 = loc(fused[#loc75, #loc76, #loc77, #loc72])
#loc148 = loc(fused[#loc79, #loc80])
#loc149 = loc(fused[#loc78, #loc81])
#loc150 = loc(fused[#loc82, #loc81])
#loc151 = loc(fused[#loc83, #loc84])
#loc152 = loc(fused[#loc85, #loc86])
#loc153 = loc(fused[#loc87, #loc84])
#loc154 = loc(fused[#loc93, #loc91])
#loc155 = loc(fused[#loc95, #loc96])
#loc156 = loc(fused[#loc94, #loc97])
#loc157 = loc(fused[#loc98, #loc97])
#loc158 = loc(fused[#loc99, #loc100])
#loc159 = loc(fused[#loc101, #loc102])
#loc160 = loc(fused[#loc103, #loc100])
#loc161 = loc(fused[#loc109, #loc107])
