!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_03.c":169:10)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_03.c":169:14)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_03.c":169:20)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_03.c":169:32)
#true = #cir.bool<true> : !cir.bool
#loc225 = loc(fused[#loc50, #loc51])
#loc226 = loc(fused[#loc52, #loc53])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc203)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc208)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc210)
      } loc(#loc209)
    } loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc212)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc215)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc25)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc215)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc27)
        } loc(#loc214)
      } loc(#loc213)
    } loc(#loc211)
    cir.return loc(#loc4)
  } loc(#loc204)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc218)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc219)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc216)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc221)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc222)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc223)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc226)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_max_square_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call @CWE190_Integer_Overflow__int_max_square_03_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_max_square_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call @CWE190_Integer_Overflow__int_max_square_03_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc229)
    cir.return %17 : !s32i loc(#loc229)
  } loc(#loc224)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc75)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc79)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc234)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc86)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc238)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc91)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc95)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc95)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc95)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc241)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
            %13 = cir.abs %12 poison : !s32i loc(#loc98)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc98)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc99)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc100)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc100)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc99)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc99)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc242)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc96)
              cir.yield %22 : !cir.bool loc(#loc96)
            }, false {
              %22 = cir.const #false loc(#loc96)
              cir.yield %22 : !cir.bool loc(#loc96)
            }) : (!cir.bool) -> !cir.bool loc(#loc96)
            cir.yield %21 : !cir.bool loc(#loc96)
          }, false {
            %12 = cir.const #false loc(#loc96)
            cir.yield %12 : !cir.bool loc(#loc96)
          }) : (!cir.bool) -> !cir.bool loc(#loc96)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc107)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc244)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc109)
          } else {
            %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc70)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc70)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          } loc(#loc243)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    cir.return loc(#loc72)
  } loc(#loc230)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc115)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc119)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc120)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc249)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc122)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc126)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc127)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc253)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc132)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc132)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc132)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc132)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc256)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
            %13 = cir.abs %12 poison : !s32i loc(#loc135)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc135)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc136)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc137)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc137)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc136)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc136)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc257)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc133)
              cir.yield %22 : !cir.bool loc(#loc133)
            }, false {
              %22 = cir.const #false loc(#loc133)
              cir.yield %22 : !cir.bool loc(#loc133)
            }) : (!cir.bool) -> !cir.bool loc(#loc133)
            cir.yield %21 : !cir.bool loc(#loc133)
          }, false {
            %12 = cir.const #false loc(#loc133)
            cir.yield %12 : !cir.bool loc(#loc133)
          }) : (!cir.bool) -> !cir.bool loc(#loc133)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc144)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc259)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc145)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc146)
          } else {
            %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc147)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc147)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc148)
          } loc(#loc258)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc112)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc153)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc157)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc264)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc163)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc164)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc168)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc169)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc268)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc271)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc175)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc176)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc177)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc150)
  } loc(#loc260)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc273)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc182)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc186)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc187)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc276)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc189)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc278)
      } loc(#loc277)
    } loc(#loc275)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc193)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc194)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc280)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc283)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc200)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc200)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc283)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc201)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc202)
        } loc(#loc282)
      } loc(#loc281)
    } loc(#loc279)
    cir.return loc(#loc179)
  } loc(#loc272)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_03.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_03.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_max_square_03.c":42:1)
#loc5 = loc("CWE190_Integer_Overflow__int_max_square_03.c":26:5)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_03.c":26:9)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_03.c":28:12)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_03.c":28:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_03.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_03.c":33:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_03.c":29:8)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_03.c":29:11)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_03.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_03.c":32:16)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_03.c":32:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_03.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_03.c":41:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_03.c":34:8)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_03.c":34:11)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_03.c":35:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_03.c":36:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_03.c":40:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_03.c":38:13)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_03.c":38:33)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_03.c":38:26)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_03.c":39:26)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_03.c":39:13)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_03.c":152:1)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_03.c":158:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_03.c":154:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_03.c":154:14)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_03.c":155:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_03.c":155:14)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_03.c":156:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_03.c":156:14)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_03.c":157:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_03.c":157:14)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_03.c":174:15)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_03.c":176:15)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_03.c":179:15)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_03.c":181:15)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_03.c":169:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_03.c":184:1)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_03.c":170:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_03.c":172:27)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_03.c":172:22)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_03.c":172:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_03.c":174:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_03.c":175:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_03.c":175:53)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_03.c":176:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_03.c":179:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_03.c":180:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_03.c":180:52)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_03.c":181:5)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_03.c":183:12)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_03.c":183:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_03.c":62:19)
#loc69 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_03.c":74:23)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_03.c":49:1)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_03.c":77:1)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_03.c":51:5)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_03.c":51:9)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_03.c":53:12)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_03.c":53:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_03.c":54:5)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_03.c":58:5)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_03.c":54:8)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_03.c":54:11)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_03.c":55:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_03.c":57:16)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_03.c":57:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_03.c":59:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_03.c":76:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_03.c":59:8)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_03.c":59:11)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_03.c":60:5)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_03.c":63:5)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_03.c":65:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_03.c":62:9)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:9)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_03.c":75:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:13)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:20)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:28)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:35)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:31)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:49)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:62)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_03.c":67:69)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_03.c":68:9)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_03.c":71:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_03.c":73:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_03.c":69:13)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_03.c":69:33)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_03.c":69:26)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_03.c":70:26)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_03.c":70:13)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_03.c":74:13)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_03.c":80:1)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_03.c":103:1)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_03.c":82:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_03.c":82:9)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_03.c":84:12)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_03.c":84:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_03.c":85:5)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_03.c":89:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_03.c":85:8)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_03.c":85:11)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_03.c":86:5)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_03.c":88:16)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_03.c":88:9)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_03.c":90:5)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_03.c":102:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_03.c":90:8)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_03.c":90:11)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_03.c":91:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:9)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_03.c":101:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:13)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:20)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:28)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:35)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:31)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:49)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:62)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_03.c":93:69)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_03.c":94:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_03.c":97:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_03.c":99:9)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_03.c":95:13)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_03.c":95:33)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_03.c":95:26)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_03.c":96:26)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_03.c":96:13)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_03.c":100:23)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_03.c":100:13)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_03.c":106:1)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_03.c":129:1)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_03.c":108:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_03.c":108:9)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_03.c":110:12)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_03.c":110:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_03.c":111:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_03.c":120:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_03.c":111:8)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_03.c":111:11)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_03.c":112:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_03.c":115:5)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_03.c":117:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_03.c":114:19)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_03.c":114:9)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_03.c":119:16)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_03.c":119:9)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_03.c":121:5)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_03.c":128:5)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_03.c":121:8)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_03.c":121:11)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_03.c":122:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_03.c":123:9)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_03.c":127:9)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_03.c":125:13)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_03.c":125:33)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_03.c":125:26)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_03.c":126:26)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_03.c":126:13)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_03.c":132:1)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_03.c":150:1)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_03.c":134:5)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_03.c":134:9)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_03.c":136:12)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_03.c":136:5)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_03.c":137:5)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_03.c":141:5)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_03.c":137:8)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_03.c":137:11)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_03.c":138:5)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_03.c":140:16)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_03.c":140:9)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_03.c":142:5)
#loc192 = loc("CWE190_Integer_Overflow__int_max_square_03.c":149:5)
#loc193 = loc("CWE190_Integer_Overflow__int_max_square_03.c":142:8)
#loc194 = loc("CWE190_Integer_Overflow__int_max_square_03.c":142:11)
#loc195 = loc("CWE190_Integer_Overflow__int_max_square_03.c":143:5)
#loc196 = loc("CWE190_Integer_Overflow__int_max_square_03.c":144:9)
#loc197 = loc("CWE190_Integer_Overflow__int_max_square_03.c":148:9)
#loc198 = loc("CWE190_Integer_Overflow__int_max_square_03.c":146:13)
#loc199 = loc("CWE190_Integer_Overflow__int_max_square_03.c":146:33)
#loc200 = loc("CWE190_Integer_Overflow__int_max_square_03.c":146:26)
#loc201 = loc("CWE190_Integer_Overflow__int_max_square_03.c":147:26)
#loc202 = loc("CWE190_Integer_Overflow__int_max_square_03.c":147:13)
#loc203 = loc(fused[#loc1, #loc2])
#loc204 = loc(fused[#loc3, #loc4])
#loc205 = loc(fused[#loc5, #loc6])
#loc206 = loc(fused[#loc8, #loc7])
#loc207 = loc(fused[#loc9, #loc10])
#loc208 = loc(fused[#loc11, #loc12])
#loc209 = loc(fused[#loc13, #loc10])
#loc210 = loc(fused[#loc15, #loc14])
#loc211 = loc(fused[#loc16, #loc17])
#loc212 = loc(fused[#loc18, #loc19])
#loc213 = loc(fused[#loc20, #loc17])
#loc214 = loc(fused[#loc21, #loc22])
#loc215 = loc(fused[#loc23, #loc24])
#loc216 = loc(fused[#loc28, #loc29])
#loc217 = loc(fused[#loc30, #loc31])
#loc218 = loc(fused[#loc32, #loc33])
#loc219 = loc(fused[#loc34, #loc35])
#loc220 = loc(fused[#loc36, #loc37])
#loc221 = loc(fused[#loc38, #loc39])
#loc222 = loc(fused[#loc40, #loc41])
#loc223 = loc(fused[#loc42, #loc43])
#loc224 = loc(fused[#loc48, #loc49])
#loc227 = loc(fused[#loc59, #loc60])
#loc228 = loc(fused[#loc63, #loc64])
#loc229 = loc(fused[#loc67, #loc66])
#loc230 = loc(fused[#loc71, #loc72])
#loc231 = loc(fused[#loc73, #loc74])
#loc232 = loc(fused[#loc76, #loc75])
#loc233 = loc(fused[#loc77, #loc78])
#loc234 = loc(fused[#loc79, #loc80])
#loc235 = loc(fused[#loc81, #loc78])
#loc236 = loc(fused[#loc83, #loc82])
#loc237 = loc(fused[#loc84, #loc85])
#loc238 = loc(fused[#loc86, #loc87])
#loc239 = loc(fused[#loc88, #loc89, #loc90, #loc85])
#loc240 = loc(fused[#loc92, #loc93])
#loc241 = loc(fused[#loc94, #loc95])
#loc242 = loc(fused[#loc98, #loc101])
#loc243 = loc(fused[#loc102, #loc103, #loc104, #loc93])
#loc244 = loc(fused[#loc105, #loc106])
#loc245 = loc(fused[#loc111, #loc112])
#loc246 = loc(fused[#loc113, #loc114])
#loc247 = loc(fused[#loc116, #loc115])
#loc248 = loc(fused[#loc117, #loc118])
#loc249 = loc(fused[#loc119, #loc120])
#loc250 = loc(fused[#loc121, #loc118])
#loc251 = loc(fused[#loc123, #loc122])
#loc252 = loc(fused[#loc124, #loc125])
#loc253 = loc(fused[#loc126, #loc127])
#loc254 = loc(fused[#loc128, #loc125])
#loc255 = loc(fused[#loc129, #loc130])
#loc256 = loc(fused[#loc131, #loc132])
#loc257 = loc(fused[#loc135, #loc138])
#loc258 = loc(fused[#loc139, #loc140, #loc141, #loc130])
#loc259 = loc(fused[#loc142, #loc143])
#loc260 = loc(fused[#loc149, #loc150])
#loc261 = loc(fused[#loc151, #loc152])
#loc262 = loc(fused[#loc154, #loc153])
#loc263 = loc(fused[#loc155, #loc156])
#loc264 = loc(fused[#loc157, #loc158])
#loc265 = loc(fused[#loc159, #loc160, #loc161, #loc156])
#loc266 = loc(fused[#loc165, #loc164])
#loc267 = loc(fused[#loc166, #loc167])
#loc268 = loc(fused[#loc168, #loc169])
#loc269 = loc(fused[#loc170, #loc167])
#loc270 = loc(fused[#loc171, #loc172])
#loc271 = loc(fused[#loc173, #loc174])
#loc272 = loc(fused[#loc178, #loc179])
#loc273 = loc(fused[#loc180, #loc181])
#loc274 = loc(fused[#loc183, #loc182])
#loc275 = loc(fused[#loc184, #loc185])
#loc276 = loc(fused[#loc186, #loc187])
#loc277 = loc(fused[#loc188, #loc185])
#loc278 = loc(fused[#loc190, #loc189])
#loc279 = loc(fused[#loc191, #loc192])
#loc280 = loc(fused[#loc193, #loc194])
#loc281 = loc(fused[#loc195, #loc192])
#loc282 = loc(fused[#loc196, #loc197])
#loc283 = loc(fused[#loc198, #loc199])
