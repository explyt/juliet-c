!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc188)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc189)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc191)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc193)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc194)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc16)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc195)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc197)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc22)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc23)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc7)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc7)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc22)
    cir.br ^bb3 loc(#loc19)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc19)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc198)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc26)
    cir.brcond %15 ^bb6, ^bb11 loc(#loc199)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc200)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc30)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc30)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc201)
    cir.brcond %19 ^bb8, ^bb9 loc(#loc202)
  ^bb8:  // pred: ^bb7
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc33)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc33)
    %22 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc33)
    %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc33)
    cir.store %24, %0 : !s16i, !cir.ptr<!s16i> loc(#loc193)
    %25 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc34)
    %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc34)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc35)
    cir.br ^bb9 loc(#loc29)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc29)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc25)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc11)
  } loc(#loc192)
  cir.func no_proto @CWE191_Integer_Underflow__short_fscanf_multiply_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc204)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc205)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc206)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc207)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc203)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc208)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc209)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc211)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc212)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc58)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc213)
    cir.br ^bb1 loc(#loc214)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc62)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc215)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc64)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc65)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc66)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc66)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc64)
    cir.br ^bb3 loc(#loc61)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc208)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc69)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc69)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc217)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    cir.br ^bb17 loc(#loc71)
  ^bb7:  // pred: ^bb5
    cir.br ^bb8 loc(#loc218)
  ^bb8:  // pred: ^bb7
    %18 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc76)
    %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc76)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc77)
    %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc219)
    cir.brcond %21 ^bb9, ^bb15 loc(#loc220)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc221)
  ^bb10:  // pred: ^bb9
    %22 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc81)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc81)
    %24 = cir.const #cir.int<32767> : !s32i loc(#loc82)
    %25 = cir.unary(minus, %24) nsw : !s32i, !s32i loc(#loc82)
    %26 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc82)
    %28 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %29 = cir.binop(div, %27, %28) : !s32i loc(#loc222)
    %30 = cir.cmp(gt, %23, %29) : !s32i, !cir.bool loc(#loc223)
    cir.brcond %30 ^bb11, ^bb12 loc(#loc224)
  ^bb11:  // pred: ^bb10
    %31 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc88)
    %32 = cir.cast(integral, %31 : !s16i), !s32i loc(#loc88)
    %33 = cir.const #cir.int<2> : !s32i loc(#loc55)
    %34 = cir.binop(mul, %32, %33) nsw : !s32i loc(#loc88)
    %35 = cir.cast(integral, %34 : !s32i), !s16i loc(#loc88)
    cir.store %35, %0 : !s16i, !cir.ptr<!s16i> loc(#loc211)
    %36 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc89)
    %37 = cir.cast(integral, %36 : !s16i), !s32i loc(#loc89)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc90)
    cir.br ^bb13 loc(#loc86)
  ^bb12:  // pred: ^bb10
    %38 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc51)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    cir.br ^bb13 loc(#loc80)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc80)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc75)
  ^bb15:  // 2 preds: ^bb8, ^bb14
    cir.br ^bb16 loc(#loc75)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc68)
  ^bb17:  // 2 preds: ^bb6, ^bb16
    cir.br ^bb18 loc(#loc68)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc53)
  } loc(#loc210)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc226)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc227)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc98)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc228)
    cir.br ^bb1 loc(#loc229)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc102)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc104)
    %8 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc190)
    %9 = cir.load %8 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc106)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc106)
    %12 = cir.call @__isoc99_fscanf(%9, %11, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc104)
    cir.br ^bb3 loc(#loc101)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc231)
  ^bb5:  // pred: ^bb4
    %13 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc109)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc109)
    cir.brcond %15 ^bb6, ^bb16 loc(#loc232)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc233)
  ^bb7:  // pred: ^bb6
    %16 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc113)
    %17 = cir.cast(integral, %16 : !s16i), !s32i loc(#loc113)
    %18 = cir.const #cir.int<0> : !s32i loc(#loc114)
    %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc234)
    cir.brcond %19 ^bb8, ^bb14 loc(#loc235)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc236)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc118)
    %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc118)
    %22 = cir.const #cir.int<32767> : !s32i loc(#loc119)
    %23 = cir.unary(minus, %22) nsw : !s32i, !s32i loc(#loc119)
    %24 = cir.const #cir.int<1> : !s32i loc(#loc119)
    %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc119)
    %26 = cir.const #cir.int<2> : !s32i loc(#loc120)
    %27 = cir.binop(div, %25, %26) : !s32i loc(#loc237)
    %28 = cir.cmp(gt, %21, %27) : !s32i, !cir.bool loc(#loc238)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc239)
  ^bb10:  // pred: ^bb9
    %29 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc125)
    %30 = cir.cast(integral, %29 : !s16i), !s32i loc(#loc125)
    %31 = cir.const #cir.int<2> : !s32i loc(#loc95)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc125)
    %33 = cir.cast(integral, %32 : !s32i), !s16i loc(#loc125)
    cir.store %33, %0 : !s16i, !cir.ptr<!s16i> loc(#loc226)
    %34 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc126)
    %35 = cir.cast(integral, %34 : !s16i), !s32i loc(#loc126)
    cir.call @printIntLine(%35) : (!s32i) -> () loc(#loc127)
    cir.br ^bb12 loc(#loc123)
  ^bb11:  // pred: ^bb9
    %36 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc128)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc128)
    cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc129)
    cir.br ^bb12 loc(#loc117)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc117)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc112)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc112)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc108)
  ^bb16:  // 2 preds: ^bb5, ^bb15
    cir.br ^bb17 loc(#loc108)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc93)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc241)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc242)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc136)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc136)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc243)
    cir.br ^bb1 loc(#loc244)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc208)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc140)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc140)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc245)
  ^bb2:  // pred: ^bb1
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb4 loc(#loc142)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc146)
    %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc147)
    %11 = cir.cast(integral, %10 : !s32i), !s16i loc(#loc147)
    cir.store %11, %1 : !s16i, !cir.ptr<!s16i> loc(#loc246)
    cir.br ^bb4 loc(#loc139)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc139)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc247)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc151)
    cir.brcond %14 ^bb7, ^bb12 loc(#loc248)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc249)
  ^bb8:  // pred: ^bb7
    %15 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc155)
    %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc155)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc156)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc250)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc251)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc158)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc158)
    %21 = cir.const #cir.int<2> : !s32i loc(#loc133)
    %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc158)
    %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc158)
    cir.store %23, %0 : !s16i, !cir.ptr<!s16i> loc(#loc241)
    %24 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc159)
    %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc159)
    cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc160)
    cir.br ^bb10 loc(#loc154)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc154)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc150)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc150)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc131)
  } loc(#loc240)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc253)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc254)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc167)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc167)
    cir.store %3, %1 : !s16i, !cir.ptr<!s16i> loc(#loc255)
    cir.br ^bb1 loc(#loc256)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %5 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc171)
    cir.brcond %6 ^bb2, ^bb3 loc(#loc257)
  ^bb2:  // pred: ^bb1
    %7 = cir.const #cir.int<2> : !s32i loc(#loc173)
    %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc174)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc174)
    cir.store %9, %1 : !s16i, !cir.ptr<!s16i> loc(#loc258)
    cir.br ^bb3 loc(#loc170)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc170)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc259)
  ^bb5:  // pred: ^bb4
    %10 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc188)
    %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc178)
    %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc178)
    cir.brcond %12 ^bb6, ^bb11 loc(#loc260)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc261)
  ^bb7:  // pred: ^bb6
    %13 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc182)
    %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc182)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc183)
    %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc262)
    cir.brcond %16 ^bb8, ^bb9 loc(#loc263)
  ^bb8:  // pred: ^bb7
    %17 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc185)
    %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc185)
    %19 = cir.const #cir.int<2> : !s32i loc(#loc164)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc185)
    %21 = cir.cast(integral, %20 : !s32i), !s16i loc(#loc185)
    cir.store %21, %0 : !s16i, !cir.ptr<!s16i> loc(#loc253)
    %22 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc186)
    %23 = cir.cast(integral, %22 : !s16i), !s32i loc(#loc186)
    cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc187)
    cir.br ^bb9 loc(#loc181)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc181)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc177)
  ^bb11:  // 2 preds: ^bb5, ^bb10
    cir.br ^bb12 loc(#loc177)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc162)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__short_fscanf_multiply_05.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":23:25)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":35:24)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":28:1)
#loc11 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":46:1)
#loc12 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":42:13)
#loc13 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":42:35)
#loc14 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":30:5)
#loc15 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":30:11)
#loc16 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":31:12)
#loc17 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":31:5)
#loc18 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":32:5)
#loc19 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":36:5)
#loc20 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":32:8)
#loc21 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":35:9)
#loc23 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":35:17)
#loc24 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":37:5)
#loc25 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":45:5)
#loc26 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":37:8)
#loc27 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":38:5)
#loc28 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":39:9)
#loc29 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":44:9)
#loc30 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":39:12)
#loc31 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":39:19)
#loc32 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":40:9)
#loc33 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":42:28)
#loc34 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":43:26)
#loc35 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":43:13)
#loc36 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":160:1)
#loc37 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":166:1)
#loc38 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":162:5)
#loc39 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":162:14)
#loc40 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":163:5)
#loc41 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":163:14)
#loc42 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":164:5)
#loc43 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":164:14)
#loc44 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":165:5)
#loc45 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":165:14)
#loc46 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":24:1)
#loc47 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":24:26)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc50 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":65:19)
#loc51 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":79:27)
#loc52 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":53:1)
#loc53 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":83:1)
#loc54 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":74:17)
#loc55 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":74:39)
#loc56 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":55:5)
#loc57 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":55:11)
#loc58 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":56:12)
#loc59 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":56:5)
#loc60 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":57:5)
#loc61 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":61:5)
#loc62 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":57:8)
#loc63 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":58:5)
#loc64 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":60:9)
#loc65 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":60:17)
#loc66 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":60:24)
#loc67 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":62:5)
#loc68 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":82:5)
#loc69 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":62:8)
#loc70 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":63:5)
#loc71 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":66:5)
#loc72 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":68:5)
#loc73 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":65:9)
#loc74 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":69:9)
#loc75 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":81:9)
#loc76 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":69:12)
#loc77 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":69:19)
#loc78 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":70:9)
#loc79 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":72:13)
#loc80 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":80:13)
#loc81 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":72:17)
#loc82 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":72:25)
#loc83 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":72:34)
#loc84 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":72:35)
#loc85 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":73:13)
#loc86 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":76:13)
#loc87 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":78:13)
#loc88 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":74:32)
#loc89 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":75:30)
#loc90 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":75:17)
#loc91 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":79:17)
#loc92 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":86:1)
#loc93 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":111:1)
#loc94 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":102:17)
#loc95 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":102:39)
#loc96 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":88:5)
#loc97 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":88:11)
#loc98 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":89:12)
#loc99 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":89:5)
#loc100 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":90:5)
#loc101 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":94:5)
#loc102 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":90:8)
#loc103 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":91:5)
#loc104 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":93:9)
#loc105 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":93:17)
#loc106 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":93:24)
#loc107 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":95:5)
#loc108 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":110:5)
#loc109 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":95:8)
#loc110 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":96:5)
#loc111 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":97:9)
#loc112 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":109:9)
#loc113 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":97:12)
#loc114 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":97:19)
#loc115 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":98:9)
#loc116 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":100:13)
#loc117 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":108:13)
#loc118 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":100:17)
#loc119 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":100:25)
#loc120 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":100:34)
#loc121 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":100:35)
#loc122 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":101:13)
#loc123 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":104:13)
#loc124 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":106:13)
#loc125 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":102:32)
#loc126 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":103:30)
#loc127 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":103:17)
#loc128 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":107:27)
#loc129 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":107:17)
#loc130 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":114:1)
#loc131 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":137:1)
#loc132 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":133:13)
#loc133 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":133:35)
#loc134 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":116:5)
#loc135 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":116:11)
#loc136 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":117:12)
#loc137 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":117:5)
#loc138 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":118:5)
#loc139 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":127:5)
#loc140 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":118:8)
#loc141 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":119:5)
#loc142 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":122:5)
#loc143 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":124:5)
#loc144 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":121:19)
#loc145 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":121:9)
#loc146 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":126:17)
#loc147 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":126:16)
#loc148 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":126:9)
#loc149 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":128:5)
#loc150 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":136:5)
#loc151 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":128:8)
#loc152 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":129:5)
#loc153 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":130:9)
#loc154 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":135:9)
#loc155 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":130:12)
#loc156 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":130:19)
#loc157 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":131:9)
#loc158 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":133:28)
#loc159 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":134:26)
#loc160 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":134:13)
#loc161 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":140:1)
#loc162 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":158:1)
#loc163 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":154:13)
#loc164 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":154:35)
#loc165 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":142:5)
#loc166 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":142:11)
#loc167 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":143:12)
#loc168 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":143:5)
#loc169 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":144:5)
#loc170 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":148:5)
#loc171 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":144:8)
#loc172 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":145:5)
#loc173 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":147:17)
#loc174 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":147:16)
#loc175 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":147:9)
#loc176 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":149:5)
#loc177 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":157:5)
#loc178 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":149:8)
#loc179 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":150:5)
#loc180 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":151:9)
#loc181 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":156:9)
#loc182 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":151:12)
#loc183 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":151:19)
#loc184 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":152:9)
#loc185 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":154:28)
#loc186 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":155:26)
#loc187 = loc("CWE191_Integer_Underflow__short_fscanf_multiply_05.c":155:13)
#loc188 = loc(fused[#loc1, #loc2])
#loc189 = loc(fused[#loc3, #loc4])
#loc190 = loc(fused[#loc5, #loc6])
#loc191 = loc(fused[#loc8, #loc9])
#loc192 = loc(fused[#loc10, #loc11])
#loc193 = loc(fused[#loc12, #loc13])
#loc194 = loc(fused[#loc14, #loc15])
#loc195 = loc(fused[#loc17, #loc16])
#loc196 = loc(fused[#loc18, #loc19])
#loc197 = loc(fused[#loc21, #loc19])
#loc198 = loc(fused[#loc24, #loc25])
#loc199 = loc(fused[#loc27, #loc25])
#loc200 = loc(fused[#loc28, #loc29])
#loc201 = loc(fused[#loc30, #loc31])
#loc202 = loc(fused[#loc32, #loc29])
#loc203 = loc(fused[#loc36, #loc37])
#loc204 = loc(fused[#loc38, #loc39])
#loc205 = loc(fused[#loc40, #loc41])
#loc206 = loc(fused[#loc42, #loc43])
#loc207 = loc(fused[#loc44, #loc45])
#loc208 = loc(fused[#loc46, #loc47])
#loc209 = loc(fused[#loc48, #loc49])
#loc210 = loc(fused[#loc52, #loc53])
#loc211 = loc(fused[#loc54, #loc55])
#loc212 = loc(fused[#loc56, #loc57])
#loc213 = loc(fused[#loc59, #loc58])
#loc214 = loc(fused[#loc60, #loc61])
#loc215 = loc(fused[#loc63, #loc61])
#loc216 = loc(fused[#loc67, #loc68])
#loc217 = loc(fused[#loc70, #loc71, #loc72, #loc68])
#loc218 = loc(fused[#loc74, #loc75])
#loc219 = loc(fused[#loc76, #loc77])
#loc220 = loc(fused[#loc78, #loc75])
#loc221 = loc(fused[#loc79, #loc80])
#loc222 = loc(fused[#loc82, #loc83])
#loc223 = loc(fused[#loc81, #loc84])
#loc224 = loc(fused[#loc85, #loc86, #loc87, #loc80])
#loc225 = loc(fused[#loc92, #loc93])
#loc226 = loc(fused[#loc94, #loc95])
#loc227 = loc(fused[#loc96, #loc97])
#loc228 = loc(fused[#loc99, #loc98])
#loc229 = loc(fused[#loc100, #loc101])
#loc230 = loc(fused[#loc103, #loc101])
#loc231 = loc(fused[#loc107, #loc108])
#loc232 = loc(fused[#loc110, #loc108])
#loc233 = loc(fused[#loc111, #loc112])
#loc234 = loc(fused[#loc113, #loc114])
#loc235 = loc(fused[#loc115, #loc112])
#loc236 = loc(fused[#loc116, #loc117])
#loc237 = loc(fused[#loc119, #loc120])
#loc238 = loc(fused[#loc118, #loc121])
#loc239 = loc(fused[#loc122, #loc123, #loc124, #loc117])
#loc240 = loc(fused[#loc130, #loc131])
#loc241 = loc(fused[#loc132, #loc133])
#loc242 = loc(fused[#loc134, #loc135])
#loc243 = loc(fused[#loc137, #loc136])
#loc244 = loc(fused[#loc138, #loc139])
#loc245 = loc(fused[#loc141, #loc142, #loc143, #loc139])
#loc246 = loc(fused[#loc148, #loc146])
#loc247 = loc(fused[#loc149, #loc150])
#loc248 = loc(fused[#loc152, #loc150])
#loc249 = loc(fused[#loc153, #loc154])
#loc250 = loc(fused[#loc155, #loc156])
#loc251 = loc(fused[#loc157, #loc154])
#loc252 = loc(fused[#loc161, #loc162])
#loc253 = loc(fused[#loc163, #loc164])
#loc254 = loc(fused[#loc165, #loc166])
#loc255 = loc(fused[#loc168, #loc167])
#loc256 = loc(fused[#loc169, #loc170])
#loc257 = loc(fused[#loc172, #loc170])
#loc258 = loc(fused[#loc175, #loc173])
#loc259 = loc(fused[#loc176, #loc177])
#loc260 = loc(fused[#loc179, #loc177])
#loc261 = loc(fused[#loc180, #loc181])
#loc262 = loc(fused[#loc182, #loc183])
#loc263 = loc(fused[#loc184, #loc181])
