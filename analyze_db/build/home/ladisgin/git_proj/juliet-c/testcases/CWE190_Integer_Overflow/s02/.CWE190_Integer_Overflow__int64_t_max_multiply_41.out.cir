!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":22:29)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":107:10)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":107:14)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":107:20)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":107:32)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":66:25)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":66:33)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":46:25)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":46:33)
#loc127 = loc(fused[#loc5, #loc6])
#loc143 = loc(fused[#loc46, #loc47])
#loc144 = loc(fused[#loc48, #loc49])
#loc149 = loc(fused[#loc67, #loc68])
#loc163 = loc(fused[#loc102, #loc103])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc125)
  cir.func internal private @badSink(%arg0: !s64i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc127)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc9)
    cir.br ^bb1 loc(#loc129)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc13)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc130)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc8)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc15)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc16)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc126)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc22)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc134)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc24)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
    cir.call @badSink(%3) : (!s64i) -> () loc(#loc27)
    cir.return loc(#loc19)
  } loc(#loc132)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc40)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc43)
  cir.func @main(%arg0: !s32i loc(fused[#loc46, #loc47]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc48, #loc49])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc45)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc50)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc51)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc52)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc52)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc53)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %8 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_multiply_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__int64_t_max_multiply_41_good() : () -> () loc(#loc55)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc41)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc42)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.get_global @CWE190_Integer_Overflow__int64_t_max_multiply_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE190_Integer_Overflow__int64_t_max_multiply_41_bad() : () -> () loc(#loc59)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc43)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc64)
  cir.func internal private @goodB2GSink(%arg0: !s64i loc(fused[#loc67, #loc68])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc150)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc149)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc71)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc74)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc75)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc152)
    cir.brcond %5 ^bb2, ^bb8 loc(#loc153)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc154)
  ^bb3:  // pred: ^bb2
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc79)
    %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc80)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc81)
    %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc81)
    %10 = cir.binop(div, %7, %9) : !s64i loc(#loc155)
    %11 = cir.cmp(lt, %6, %10) : !s64i, !cir.bool loc(#loc156)
    cir.brcond %11 ^bb4, ^bb5 loc(#loc157)
  ^bb4:  // pred: ^bb3
    %12 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc86)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc70)
    %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc70)
    %15 = cir.binop(mul, %12, %14) nsw : !s64i loc(#loc86)
    cir.store %15, %0 : !s64i, !cir.ptr<!s64i> loc(#loc150)
    %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc87)
    cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc88)
    cir.br ^bb6 loc(#loc84)
  ^bb5:  // pred: ^bb3
    %17 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc64)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc78)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc73)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc73)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc66)
  } loc(#loc148)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc94)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc160)
    %2 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc96)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc161)
    %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc98)
    cir.call @goodB2GSink(%3) : (!s64i) -> () loc(#loc99)
    cir.return loc(#loc91)
  } loc(#loc158)
  cir.func internal private @goodG2BSink(%arg0: !s64i loc(fused[#loc102, #loc103])) extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc164)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc163)
    cir.store %arg0, %1 : !s64i, !cir.ptr<!s64i> loc(#loc106)
    cir.br ^bb1 loc(#loc165)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc109)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc110)
    %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc166)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc167)
  ^bb2:  // pred: ^bb1
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc112)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc105)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc105)
    %9 = cir.binop(mul, %6, %8) nsw : !s64i loc(#loc112)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc164)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc113)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc114)
    cir.br ^bb3 loc(#loc108)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc108)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc101)
  } loc(#loc162)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc169)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc119)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc170)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc121)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc121)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc171)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
    cir.call @goodG2BSink(%4) : (!s64i) -> () loc(#loc124)
    cir.return loc(#loc116)
  } loc(#loc168)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_multiply_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":27:9)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":27:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":24:8)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":24:15)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":27:26)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":28:27)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":28:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":32:1)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":39:1)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":34:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":34:13)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":35:12)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":35:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":37:12)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":37:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":38:13)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":38:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":92:1)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":96:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":94:5)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":94:13)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":95:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":95:13)
#loc34 = loc("/usr/include/stdlib.h":575:1)
#loc35 = loc("/usr/include/stdlib.h":575:41)
#loc36 = loc("/usr/include/time.h":76:1)
#loc37 = loc("/usr/include/time.h":76:38)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":112:15)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":114:15)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":117:15)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":119:15)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":107:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":122:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":108:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":110:27)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":110:22)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":110:5)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":112:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":113:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":113:59)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":114:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":117:5)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":118:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":118:58)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":119:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":121:12)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":121:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":78:23)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":66:1)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":81:1)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":73:13)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":73:37)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":67:1)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":68:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":80:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":68:8)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":68:15)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":69:5)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":71:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":79:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":71:13)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":71:21)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":71:31)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":71:32)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":72:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":75:9)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":77:9)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":73:30)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":74:31)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":74:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":78:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":83:1)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":90:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":85:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":85:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":86:12)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":86:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":88:12)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":88:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":89:17)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":89:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":46:1)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":54:1)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":51:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":51:33)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":47:1)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":48:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":53:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":48:8)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":48:15)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":49:5)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":51:26)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":52:27)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":52:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":56:1)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":63:1)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":58:5)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":58:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":59:12)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":59:5)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":61:12)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":61:5)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":62:17)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_multiply_41.c":62:5)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc7, #loc8])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc14, #loc11])
#loc132 = loc(fused[#loc18, #loc19])
#loc133 = loc(fused[#loc20, #loc21])
#loc134 = loc(fused[#loc23, #loc22])
#loc135 = loc(fused[#loc25, #loc24])
#loc136 = loc(fused[#loc28, #loc29])
#loc137 = loc(fused[#loc30, #loc31])
#loc138 = loc(fused[#loc32, #loc33])
#loc139 = loc(fused[#loc34, #loc35])
#loc140 = loc(fused[#loc36, #loc37])
#loc141 = loc(fused[#loc38, #loc39])
#loc142 = loc(fused[#loc44, #loc45])
#loc145 = loc(fused[#loc55, #loc56])
#loc146 = loc(fused[#loc59, #loc60])
#loc147 = loc(fused[#loc63, #loc62])
#loc148 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc69, #loc70])
#loc151 = loc(fused[#loc72, #loc73])
#loc152 = loc(fused[#loc74, #loc75])
#loc153 = loc(fused[#loc76, #loc73])
#loc154 = loc(fused[#loc77, #loc78])
#loc155 = loc(fused[#loc80, #loc81])
#loc156 = loc(fused[#loc79, #loc82])
#loc157 = loc(fused[#loc83, #loc84, #loc85, #loc78])
#loc158 = loc(fused[#loc90, #loc91])
#loc159 = loc(fused[#loc92, #loc93])
#loc160 = loc(fused[#loc95, #loc94])
#loc161 = loc(fused[#loc97, #loc96])
#loc162 = loc(fused[#loc100, #loc101])
#loc164 = loc(fused[#loc104, #loc105])
#loc165 = loc(fused[#loc107, #loc108])
#loc166 = loc(fused[#loc109, #loc110])
#loc167 = loc(fused[#loc111, #loc108])
#loc168 = loc(fused[#loc115, #loc116])
#loc169 = loc(fused[#loc117, #loc118])
#loc170 = loc(fused[#loc120, #loc119])
#loc171 = loc(fused[#loc122, #loc121])
