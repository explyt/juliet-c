!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc161)
  cir.func private @printIntLine(!s32i) loc(#loc162)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_preinc_05_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc15)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc25)
          %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc25)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc172)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
        } loc(#loc171)
      } loc(#loc170)
    } loc(#loc169)
    cir.return loc(#loc6)
  } loc(#loc163)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_preinc_05_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc178)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc174)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc179)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc180)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc49)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc53)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc53)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
      } loc(#loc185)
    } loc(#loc184)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc59)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc63)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc67)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc190)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
            %10 = cir.unary(inc, %9) nsw : !s32i, !s32i loc(#loc73)
            cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc192)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc76)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc191)
        } loc(#loc189)
      } loc(#loc188)
    } loc(#loc187)
    cir.return loc(#loc46)
  } loc(#loc181)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc82)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
      } loc(#loc198)
    } loc(#loc197)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc92)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc92)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
          %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc203)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc205)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
            %10 = cir.unary(inc, %9) nsw : !s32i, !s32i loc(#loc103)
            cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc205)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc106)
          } else {
            %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc107)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc79)
  } loc(#loc194)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc209)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc179)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc123)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      } loc(#loc211)
    } loc(#loc210)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc133)
          %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc133)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc217)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc216)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc136)
        } loc(#loc215)
      } loc(#loc214)
    } loc(#loc213)
    cir.return loc(#loc110)
  } loc(#loc207)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc141)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc147)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      } loc(#loc222)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc161)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc151)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc157)
          cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc228)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc227)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc159)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc160)
        } loc(#loc226)
      } loc(#loc225)
    } loc(#loc224)
    cir.return loc(#loc138)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__int_max_preinc_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":23:25)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":28:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":47:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":30:5)
#loc8 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":30:9)
#loc9 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":32:12)
#loc10 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":32:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":33:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":37:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":33:8)
#loc14 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":36:16)
#loc16 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":36:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":38:5)
#loc18 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":46:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":38:8)
#loc20 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":39:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":40:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":45:9)
#loc23 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":43:13)
#loc24 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":43:26)
#loc25 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":42:13)
#loc26 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":42:15)
#loc27 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":44:26)
#loc28 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":44:13)
#loc29 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":161:1)
#loc30 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":167:1)
#loc31 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":163:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":163:14)
#loc33 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":164:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":164:14)
#loc35 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":165:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":165:14)
#loc37 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":166:5)
#loc38 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":166:14)
#loc39 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":24:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":24:26)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":67:19)
#loc44 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":80:23)
#loc45 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":54:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":83:1)
#loc47 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":56:5)
#loc48 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":56:9)
#loc49 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":58:12)
#loc50 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":58:5)
#loc51 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":59:5)
#loc52 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":59:8)
#loc54 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":60:5)
#loc55 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":62:16)
#loc56 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":62:9)
#loc57 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":82:5)
#loc59 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":64:8)
#loc60 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":68:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":70:5)
#loc63 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":67:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":72:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":81:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":72:13)
#loc67 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":72:20)
#loc68 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":73:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":77:9)
#loc70 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":79:9)
#loc71 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":75:13)
#loc72 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":75:26)
#loc73 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":74:13)
#loc74 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":74:15)
#loc75 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":76:26)
#loc76 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":76:13)
#loc77 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":80:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":86:1)
#loc79 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":110:1)
#loc80 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":88:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":88:9)
#loc82 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":90:12)
#loc83 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":90:5)
#loc84 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":91:5)
#loc85 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":95:5)
#loc86 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":91:8)
#loc87 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":92:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":94:16)
#loc89 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":94:9)
#loc90 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":96:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":109:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":96:8)
#loc93 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":97:5)
#loc94 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":99:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":108:9)
#loc96 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":99:13)
#loc97 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":99:20)
#loc98 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":100:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":104:9)
#loc100 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":106:9)
#loc101 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":102:13)
#loc102 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":102:26)
#loc103 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":101:13)
#loc104 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":101:15)
#loc105 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":103:26)
#loc106 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":103:13)
#loc107 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":107:23)
#loc108 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":107:13)
#loc109 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":113:1)
#loc110 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":137:1)
#loc111 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":115:5)
#loc112 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":115:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":117:12)
#loc114 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":117:5)
#loc115 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":118:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":127:5)
#loc117 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":118:8)
#loc118 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":119:5)
#loc119 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":122:5)
#loc120 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":124:5)
#loc121 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":121:19)
#loc122 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":121:9)
#loc123 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":126:16)
#loc124 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":126:9)
#loc125 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":128:5)
#loc126 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":136:5)
#loc127 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":128:8)
#loc128 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":129:5)
#loc129 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":130:9)
#loc130 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":135:9)
#loc131 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":133:13)
#loc132 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":133:26)
#loc133 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":132:13)
#loc134 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":132:15)
#loc135 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":134:26)
#loc136 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":134:13)
#loc137 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":140:1)
#loc138 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":159:1)
#loc139 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":142:5)
#loc140 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":142:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":144:12)
#loc142 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":144:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":145:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":149:5)
#loc145 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":145:8)
#loc146 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":146:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":148:16)
#loc148 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":148:9)
#loc149 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":150:5)
#loc150 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":158:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":150:8)
#loc152 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":151:5)
#loc153 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":152:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":157:9)
#loc155 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":155:13)
#loc156 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":155:26)
#loc157 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":154:13)
#loc158 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":154:15)
#loc159 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":156:26)
#loc160 = loc("CWE190_Integer_Overflow__int_max_preinc_05.c":156:13)
#loc161 = loc(fused[#loc1, #loc2])
#loc162 = loc(fused[#loc3, #loc4])
#loc163 = loc(fused[#loc5, #loc6])
#loc164 = loc(fused[#loc7, #loc8])
#loc165 = loc(fused[#loc10, #loc9])
#loc166 = loc(fused[#loc11, #loc12])
#loc167 = loc(fused[#loc14, #loc12])
#loc168 = loc(fused[#loc16, #loc15])
#loc169 = loc(fused[#loc17, #loc18])
#loc170 = loc(fused[#loc20, #loc18])
#loc171 = loc(fused[#loc21, #loc22])
#loc172 = loc(fused[#loc23, #loc24])
#loc173 = loc(fused[#loc25, #loc26])
#loc174 = loc(fused[#loc29, #loc30])
#loc175 = loc(fused[#loc31, #loc32])
#loc176 = loc(fused[#loc33, #loc34])
#loc177 = loc(fused[#loc35, #loc36])
#loc178 = loc(fused[#loc37, #loc38])
#loc179 = loc(fused[#loc39, #loc40])
#loc180 = loc(fused[#loc41, #loc42])
#loc181 = loc(fused[#loc45, #loc46])
#loc182 = loc(fused[#loc47, #loc48])
#loc183 = loc(fused[#loc50, #loc49])
#loc184 = loc(fused[#loc51, #loc52])
#loc185 = loc(fused[#loc54, #loc52])
#loc186 = loc(fused[#loc56, #loc55])
#loc187 = loc(fused[#loc57, #loc58])
#loc188 = loc(fused[#loc60, #loc61, #loc62, #loc58])
#loc189 = loc(fused[#loc64, #loc65])
#loc190 = loc(fused[#loc66, #loc67])
#loc191 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc192 = loc(fused[#loc71, #loc72])
#loc193 = loc(fused[#loc73, #loc74])
#loc194 = loc(fused[#loc78, #loc79])
#loc195 = loc(fused[#loc80, #loc81])
#loc196 = loc(fused[#loc83, #loc82])
#loc197 = loc(fused[#loc84, #loc85])
#loc198 = loc(fused[#loc87, #loc85])
#loc199 = loc(fused[#loc89, #loc88])
#loc200 = loc(fused[#loc90, #loc91])
#loc201 = loc(fused[#loc93, #loc91])
#loc202 = loc(fused[#loc94, #loc95])
#loc203 = loc(fused[#loc96, #loc97])
#loc204 = loc(fused[#loc98, #loc99, #loc100, #loc95])
#loc205 = loc(fused[#loc101, #loc102])
#loc206 = loc(fused[#loc103, #loc104])
#loc207 = loc(fused[#loc109, #loc110])
#loc208 = loc(fused[#loc111, #loc112])
#loc209 = loc(fused[#loc114, #loc113])
#loc210 = loc(fused[#loc115, #loc116])
#loc211 = loc(fused[#loc118, #loc119, #loc120, #loc116])
#loc212 = loc(fused[#loc124, #loc123])
#loc213 = loc(fused[#loc125, #loc126])
#loc214 = loc(fused[#loc128, #loc126])
#loc215 = loc(fused[#loc129, #loc130])
#loc216 = loc(fused[#loc131, #loc132])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc137, #loc138])
#loc219 = loc(fused[#loc139, #loc140])
#loc220 = loc(fused[#loc142, #loc141])
#loc221 = loc(fused[#loc143, #loc144])
#loc222 = loc(fused[#loc146, #loc144])
#loc223 = loc(fused[#loc148, #loc147])
#loc224 = loc(fused[#loc149, #loc150])
#loc225 = loc(fused[#loc152, #loc150])
#loc226 = loc(fused[#loc153, #loc154])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc157, #loc158])
