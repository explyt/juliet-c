!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":109:10)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":109:14)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":109:20)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":109:32)
#loc162 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc57, #loc58])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc141)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc143)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_32_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc146)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc147)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc146)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc148)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc150)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc150)
      %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc24)
      %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc142)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc25)
      %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
      %13 = cir.call @__isoc99_fscanf(%10, %12, %5) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc24)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    } loc(#loc149)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc153)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc153)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc34)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc35)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc154)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc36)
    } loc(#loc152)
    cir.return loc(#loc9)
  } loc(#loc144)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fscanf_divide_32_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc155)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc158)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc159)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc62)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_divide_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_divide_32_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fscanf_divide_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE369_Divide_by_Zero__int_fscanf_divide_32_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %17 : !s32i loc(#loc166)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc170)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc82)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc173)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc87)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc89)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc91)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc175)
    } loc(#loc172)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc177)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc98)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      %8 = cir.const #cir.int<100> : !s32i loc(#loc99)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc100)
      %10 = cir.binop(div, %8, %9) : !s32i loc(#loc178)
      cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc101)
    } loc(#loc176)
    cir.return loc(#loc74)
  } loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc102)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc181)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc182)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc181)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc112)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc185)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      %8 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc119)
      %9 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc142)
      %10 = cir.load %9 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc120)
      %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc121)
      %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc121)
      %13 = cir.call @__isoc99_fscanf(%10, %12, %5) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc119)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    } loc(#loc184)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc188)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc188)
      cir.scope {
        %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %9 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %10 = cir.cmp(ne, %8, %9) : !s32i, !cir.bool loc(#loc190)
        cir.if %10 {
          %11 = cir.const #cir.int<100> : !s32i loc(#loc137)
          %12 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %13 = cir.binop(div, %11, %12) : !s32i loc(#loc192)
          cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc139)
        } else {
          %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc102)
          %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc140)
        } loc(#loc191)
      } loc(#loc189)
    } loc(#loc187)
    cir.return loc(#loc104)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fscanf_divide_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":22:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":40:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":24:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":24:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":25:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":25:22)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":26:22)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":34:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:21)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":30:20)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":32:16)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:21)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:10)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":33:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":35:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":39:5)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:21)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":36:20)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:22)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:28)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":38:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":95:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":99:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":97:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":97:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":98:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":98:13)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":114:15)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":116:15)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":119:15)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":121:15)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":109:1)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":124:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":110:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":112:27)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":112:22)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":112:5)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":114:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":115:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":115:54)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":116:5)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":119:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":120:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":120:53)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":121:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":123:12)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":123:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":47:1)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":65:1)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":49:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":49:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":50:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":50:22)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":51:5)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":51:22)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:12)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":53:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":54:5)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":59:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:21)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":55:20)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":57:16)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":57:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:21)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:10)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":58:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":60:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":64:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:9)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:21)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":61:20)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:22)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:28)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":63:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":90:23)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":68:1)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":93:1)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":70:5)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":70:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":71:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":71:22)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":72:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":72:22)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:13)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:12)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":74:5)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":75:5)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":80:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:21)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":76:20)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:16)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":78:23)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:21)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:10)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":79:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":81:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":92:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:9)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:21)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":82:20)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":91:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":84:21)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":85:9)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":87:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":89:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:26)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:32)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":86:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_divide_32.c":90:13)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc6, #loc7])
#loc144 = loc(fused[#loc8, #loc9])
#loc145 = loc(fused[#loc10, #loc11])
#loc146 = loc(fused[#loc12, #loc13])
#loc147 = loc(fused[#loc14, #loc15])
#loc148 = loc(fused[#loc18, #loc16])
#loc149 = loc(fused[#loc19, #loc20])
#loc150 = loc(fused[#loc21, #loc22])
#loc151 = loc(fused[#loc28, #loc26])
#loc152 = loc(fused[#loc29, #loc30])
#loc153 = loc(fused[#loc31, #loc32])
#loc154 = loc(fused[#loc34, #loc35])
#loc155 = loc(fused[#loc37, #loc38])
#loc156 = loc(fused[#loc39, #loc40])
#loc157 = loc(fused[#loc41, #loc42])
#loc158 = loc(fused[#loc43, #loc44])
#loc159 = loc(fused[#loc45, #loc46])
#loc160 = loc(fused[#loc47, #loc48])
#loc161 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc64, #loc65])
#loc165 = loc(fused[#loc68, #loc69])
#loc166 = loc(fused[#loc72, #loc71])
#loc167 = loc(fused[#loc73, #loc74])
#loc168 = loc(fused[#loc75, #loc76])
#loc169 = loc(fused[#loc77, #loc78])
#loc170 = loc(fused[#loc79, #loc80])
#loc171 = loc(fused[#loc83, #loc81])
#loc172 = loc(fused[#loc84, #loc85])
#loc173 = loc(fused[#loc86, #loc87])
#loc174 = loc(fused[#loc90, #loc89])
#loc175 = loc(fused[#loc93, #loc91])
#loc176 = loc(fused[#loc94, #loc95])
#loc177 = loc(fused[#loc96, #loc97])
#loc178 = loc(fused[#loc99, #loc100])
#loc179 = loc(fused[#loc103, #loc104])
#loc180 = loc(fused[#loc105, #loc106])
#loc181 = loc(fused[#loc107, #loc108])
#loc182 = loc(fused[#loc109, #loc110])
#loc183 = loc(fused[#loc113, #loc111])
#loc184 = loc(fused[#loc114, #loc115])
#loc185 = loc(fused[#loc116, #loc117])
#loc186 = loc(fused[#loc124, #loc122])
#loc187 = loc(fused[#loc125, #loc126])
#loc188 = loc(fused[#loc127, #loc128])
#loc189 = loc(fused[#loc130, #loc131])
#loc190 = loc(fused[#loc132, #loc133])
#loc191 = loc(fused[#loc134, #loc135, #loc136, #loc131])
#loc192 = loc(fused[#loc137, #loc138])
