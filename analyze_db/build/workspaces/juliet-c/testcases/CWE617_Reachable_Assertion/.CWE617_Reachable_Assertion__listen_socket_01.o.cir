!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc159)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc160)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc161)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc162)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc163)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc164)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc165)
  cir.func private @close(!s32i) -> !s32i loc(#loc166)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_01.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_01_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc169)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc25)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc172)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc173)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc174)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc175)
      %8 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc176)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc34)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc34)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc174)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc36)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc43)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc44)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc45)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc46)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc179)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc51)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc52)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc181)
              cir.if %61 {
                cir.break loc(#loc54)
              } loc(#loc182)
            } loc(#loc180)
            %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc183)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc57)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc184)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc185)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc62)
            %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc63)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc186)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc65)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc66)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc67)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc187)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc69)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc69)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc70)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc188)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc76)
              %59 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc190)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc191)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc191)
              %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc81)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc82)
              %64 = cir.unary(minus, %63) nsw : !s32i, !s32i loc(#loc82)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc192)
              cir.if %65 {
                cir.break loc(#loc84)
              } loc(#loc193)
            } loc(#loc189)
            cir.scope {
              %58 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %59 = cir.const #cir.int<5> : !s32i loc(#loc88)
              %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc89)
              %61 = cir.const #cir.int<1> : !s32i loc(#loc90)
              %62 = cir.unary(minus, %61) nsw : !s32i, !s32i loc(#loc90)
              %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc195)
              cir.if %63 {
                cir.break loc(#loc92)
              } loc(#loc196)
            } loc(#loc194)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc93)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc94)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc95)
            %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc96)
            cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc197)
            cir.scope {
              %58 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc101)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc102)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc102)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc199)
              cir.if %61 {
                cir.break loc(#loc104)
              } loc(#loc200)
            } loc(#loc198)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc106)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc106)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc107)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc107)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc107)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc107)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc107)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc107)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc107)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc108)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc108)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc201)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc109)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc110)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc110)
            cir.store %50, %4 : !s32i, !cir.ptr<!s32i> loc(#loc202)
            cir.scope {
              %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc116)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc204)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc117)
                cir.yield %63 : !cir.bool loc(#loc117)
              }, false {
                %63 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc119)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc205)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc117)
                  cir.yield %67 : !cir.bool loc(#loc117)
                }, false {
                  %67 = cir.const #false loc(#loc117)
                  cir.yield %67 : !cir.bool loc(#loc117)
                }) : (!cir.bool) -> !cir.bool loc(#loc117)
                cir.yield %66 : !cir.bool loc(#loc117)
              }) : (!cir.bool) -> !cir.bool loc(#loc117)
              cir.if %62 {
                cir.break loc(#loc121)
              } loc(#loc206)
            } loc(#loc203)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc122)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc122)
            %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc123)
            %54 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc124)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc207)
            %56 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc126)
            cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          } loc(#loc178)
          cir.yield loc(#loc40)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc129)
          cir.condition(%14) loc(#loc129)
        } loc(#loc177)
      } loc(#loc177)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc132)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc133)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc133)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc210)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc135)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc136)
        } loc(#loc211)
      } loc(#loc209)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc140)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc213)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc143)
        } loc(#loc214)
      } loc(#loc212)
    } loc(#loc171)
    %3 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.scope {
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %5 = cir.const #cir.int<5> : !s32i loc(#loc19)
        %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc19)
        cir.if %6 {
        } else {
          %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
          %11 = cir.const #cir.int<122> : !s32i loc(#loc19)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc19)
          %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
          %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @__assert_fail(%8, %10, %12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc19)
    cir.return loc(#loc21)
  } loc(#loc168)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc216)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc146)
    cir.return loc(#loc145)
  } loc(#loc215)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc148)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc153)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc154)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc156)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc156)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc148)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc148)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc148)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc148)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc148)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc148)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc148)
          %14 = cir.const #cir.int<138> : !s32i loc(#loc148)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc148)
          %16 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc148)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc148)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc148)
        } loc(#loc148)
      } loc(#loc148)
    } loc(#loc148)
    cir.return loc(#loc150)
  } loc(#loc217)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_01.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":69:1)
#loc18 = loc("/usr/include/assert.h":71:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":122:5)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":47:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":123:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":49:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":49:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":51:13)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":51:12)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":51:5)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":52:5)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":120:5)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":57:9)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":57:13)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":58:9)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":58:28)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":59:9)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":59:31)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":60:9)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":60:31)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":61:9)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":61:41)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":62:9)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":105:17)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":63:9)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":104:9)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:35)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:44)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:57)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:28)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:13)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":72:68)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":73:13)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":76:13)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":73:17)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":73:33)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":74:13)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":75:17)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:20)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:21)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:30)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:33)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:47)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:13)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":77:48)
#loc62 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":78:34)
#loc63 = loc("/usr/include/netinet/in.h":249:5)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":78:13)
#loc65 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":79:39)
#loc66 = loc("/usr/include/netinet/in.h":251:20)
#loc67 = loc("/usr/include/netinet/in.h":33:15)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":79:13)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":80:38)
#loc70 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":80:32)
#loc71 = loc("/usr/include/netinet/in.h":250:15)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":80:13)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":80:46)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:13)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":84:13)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:22)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:54)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:55)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:64)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:78)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:17)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":81:84)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":82:13)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":83:17)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":85:13)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":88:13)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":85:24)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":85:38)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":85:17)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":85:57)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":86:13)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":87:17)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:35)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:49)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:55)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:28)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:13)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":89:59)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":90:13)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":93:13)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":90:17)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":90:33)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":91:13)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":92:17)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:31)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:45)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:58)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:76)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:79)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:26)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:13)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":95:80)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:13)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":99:13)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:17)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:31)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:44)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:47)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":96:61)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":97:13)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":98:17)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":101:39)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":101:25)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":101:13)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":103:25)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":103:20)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":103:13)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":103:36)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":105:16)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":106:9)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":109:9)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":106:13)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":106:29)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":107:9)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":108:26)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":108:13)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":110:9)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":113:9)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":110:13)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":110:29)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":111:9)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":112:26)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":112:13)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":141:1)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":144:1)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":143:5)
#loc147 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":143:13)
#loc148 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":138:5)
#loc149 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":130:1)
#loc150 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":139:1)
#loc151 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":132:5)
#loc152 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":132:9)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":134:13)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":134:12)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":134:5)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":136:12)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":136:25)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_01.c":136:5)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc7, #loc8])
#loc163 = loc(fused[#loc9, #loc10])
#loc164 = loc(fused[#loc11, #loc12])
#loc165 = loc(fused[#loc13, #loc14])
#loc166 = loc(fused[#loc15, #loc16])
#loc167 = loc(fused[#loc17, #loc18])
#loc168 = loc(fused[#loc20, #loc21])
#loc169 = loc(fused[#loc22, #loc23])
#loc170 = loc(fused[#loc26, #loc24])
#loc171 = loc(fused[#loc27, #loc28])
#loc172 = loc(fused[#loc29, #loc30])
#loc173 = loc(fused[#loc31, #loc32])
#loc174 = loc(fused[#loc33, #loc34])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc37, #loc38])
#loc177 = loc(fused[#loc39, #loc40])
#loc178 = loc(fused[#loc41, #loc42])
#loc179 = loc(fused[#loc47, #loc48])
#loc180 = loc(fused[#loc49, #loc50])
#loc181 = loc(fused[#loc51, #loc52])
#loc182 = loc(fused[#loc53, #loc50])
#loc183 = loc(fused[#loc55, #loc56])
#loc184 = loc(fused[#loc58, #loc59])
#loc185 = loc(fused[#loc60, #loc61])
#loc186 = loc(fused[#loc64, #loc62])
#loc187 = loc(fused[#loc68, #loc65])
#loc188 = loc(fused[#loc72, #loc73])
#loc189 = loc(fused[#loc74, #loc75])
#loc190 = loc(fused[#loc77, #loc78])
#loc191 = loc(fused[#loc79, #loc80])
#loc192 = loc(fused[#loc81, #loc82])
#loc193 = loc(fused[#loc83, #loc75])
#loc194 = loc(fused[#loc85, #loc86])
#loc195 = loc(fused[#loc89, #loc90])
#loc196 = loc(fused[#loc91, #loc86])
#loc197 = loc(fused[#loc97, #loc98])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc103, #loc100])
#loc201 = loc(fused[#loc107, #loc108])
#loc202 = loc(fused[#loc111, #loc112])
#loc203 = loc(fused[#loc113, #loc114])
#loc204 = loc(fused[#loc115, #loc116])
#loc205 = loc(fused[#loc118, #loc119])
#loc206 = loc(fused[#loc120, #loc114])
#loc207 = loc(fused[#loc124, #loc122])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc130, #loc131])
#loc210 = loc(fused[#loc132, #loc133])
#loc211 = loc(fused[#loc134, #loc131])
#loc212 = loc(fused[#loc137, #loc138])
#loc213 = loc(fused[#loc139, #loc140])
#loc214 = loc(fused[#loc141, #loc138])
#loc215 = loc(fused[#loc144, #loc145])
#loc216 = loc(fused[#loc146, #loc147])
#loc217 = loc(fused[#loc149, #loc150])
#loc218 = loc(fused[#loc151, #loc152])
#loc219 = loc(fused[#loc155, #loc153])
#loc220 = loc(fused[#loc158, #loc157])
