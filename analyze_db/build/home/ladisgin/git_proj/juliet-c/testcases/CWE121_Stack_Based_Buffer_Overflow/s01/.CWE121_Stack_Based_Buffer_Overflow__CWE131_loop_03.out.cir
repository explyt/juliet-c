!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":111:10)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":111:14)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":111:20)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":111:32)
#loc184 = loc(fused[#loc60, #loc61])
#loc185 = loc(fused[#loc62, #loc63])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc160)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc163)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc165)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc14)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc14)
        %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc14)
        cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc167)
      } loc(#loc166)
    } loc(#loc164)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc169)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc170)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc169)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc169)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc24)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc24)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc172)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc26)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc27)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc27)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc173)
          cir.condition(%14) loc(#loc28)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc31)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc31)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc33)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc34)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc175)
          } loc(#loc174)
          cir.yield loc(#loc23)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc37)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc176)
          cir.yield loc(#loc171)
        } loc(#loc171)
      } loc(#loc171)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc38)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc39)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc40)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc38)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc41)
    } loc(#loc168)
    cir.return loc(#loc4)
  } loc(#loc161)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    cir.return loc(#loc43)
  } loc(#loc177)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc180)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc181)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc182)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc185)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc67)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc187)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc188)
    cir.return %17 : !s32i loc(#loc188)
  } loc(#loc183)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc78)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc190)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc83)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc191)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc87)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc193)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc78)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc78)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc92)
      } else {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc93)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc93)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc93)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc93)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc93)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc93)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc93)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc195)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc197)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc198)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc197)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc197)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc103)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc103)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc200)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc105)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc106)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc106)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc201)
          cir.condition(%14) loc(#loc107)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc110)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc110)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc112)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc113)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc203)
          } loc(#loc202)
          cir.yield loc(#loc102)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc115)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc116)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc204)
          cir.yield loc(#loc199)
        } loc(#loc199)
      } loc(#loc199)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc119)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc120)
    } loc(#loc196)
    cir.return loc(#loc80)
  } loc(#loc189)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc125)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc129)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc130)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc209)
      cir.if %4 {
        %5 = cir.const #cir.int<10> : !s32i loc(#loc132)
        %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc132)
        %7 = cir.const #cir.int<4> : !u64i loc(#loc132)
        %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc132)
        %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc132)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc132)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
        cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc211)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc213)
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc214)
      %4 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc213)
      cir.store %4, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc213)
      cir.scope {
        %9 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc142)
        cir.store %10, %3 : !u64i, !cir.ptr<!u64i> loc(#loc216)
        cir.for : cond {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc144)
          %12 = cir.const #cir.int<10> : !s32i loc(#loc145)
          %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc145)
          %14 = cir.cmp(lt, %11, %13) : !u64i, !cir.bool loc(#loc217)
          cir.condition(%14) loc(#loc146)
        } body {
          cir.scope {
            %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc148)
            %12 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc149)
            %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !u64i), !cir.ptr<!s32i> loc(#loc149)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc149)
            %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
            %16 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc151)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !u64i), !cir.ptr<!s32i> loc(#loc152)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc219)
          } loc(#loc218)
          cir.yield loc(#loc141)
        } step {
          %11 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc154)
          %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc155)
          cir.store %12, %3 : !u64i, !cir.ptr<!u64i> loc(#loc220)
          cir.yield loc(#loc215)
        } loc(#loc215)
      } loc(#loc215)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %6 = cir.const #cir.int<0> : !s32i loc(#loc157)
      %7 = cir.ptr_stride(%5 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc158)
      %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc159)
    } loc(#loc212)
    cir.return loc(#loc122)
  } loc(#loc205)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":40:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":23:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":23:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":24:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":24:5)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":25:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":29:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":25:8)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":25:11)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":26:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":28:23)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":28:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":30:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":39:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":31:9)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":31:28)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":32:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":32:16)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":37:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:18)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:14)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:21)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:25)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:23)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":35:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:30)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:23)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:18)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:19)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":36:31)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:30)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":34:29)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":38:22)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":38:27)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":38:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":38:9)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":95:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":99:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":97:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":97:14)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":98:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":98:14)
#loc48 = loc("/usr/include/stdlib.h":575:1)
#loc49 = loc("/usr/include/stdlib.h":575:41)
#loc50 = loc("/usr/include/time.h":76:1)
#loc51 = loc("/usr/include/time.h":76:38)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":116:15)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":118:15)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":121:15)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":123:15)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":111:1)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":126:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":112:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":114:27)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":114:22)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":114:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":116:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":117:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":117:61)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":118:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":121:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":122:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":122:60)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":123:5)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":125:12)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":125:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":54:19)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":47:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":71:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":49:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":49:11)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":50:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":50:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":51:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":60:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":51:8)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":51:11)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":52:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":55:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":57:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":54:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":59:23)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":59:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":61:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":70:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":62:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":62:28)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":63:9)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":63:16)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":68:9)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:18)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:14)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:21)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:25)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:23)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":66:9)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:30)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:23)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:13)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:18)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:19)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":67:31)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:30)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":65:29)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":69:22)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":69:27)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":69:28)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":69:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":74:1)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":93:1)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":76:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":76:11)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":77:12)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":77:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":78:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":82:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":78:8)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":78:11)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":79:5)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":81:23)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":81:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":83:5)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":92:5)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":84:9)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":84:28)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":85:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":85:16)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:9)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":90:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:18)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:14)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:21)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:25)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:23)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":88:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:30)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:23)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:13)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:18)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:19)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":89:31)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:30)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":87:29)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":91:22)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":91:27)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":91:28)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_loop_03.c":91:9)
#loc160 = loc(fused[#loc1, #loc2])
#loc161 = loc(fused[#loc3, #loc4])
#loc162 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc8, #loc7])
#loc164 = loc(fused[#loc9, #loc10])
#loc165 = loc(fused[#loc11, #loc12])
#loc166 = loc(fused[#loc13, #loc10])
#loc167 = loc(fused[#loc15, #loc14])
#loc168 = loc(fused[#loc16, #loc17])
#loc169 = loc(fused[#loc18, #loc19])
#loc170 = loc(fused[#loc20, #loc21])
#loc171 = loc(fused[#loc22, #loc23])
#loc172 = loc(fused[#loc25, #loc24])
#loc173 = loc(fused[#loc26, #loc27])
#loc174 = loc(fused[#loc29, #loc23])
#loc175 = loc(fused[#loc32, #loc35])
#loc176 = loc(fused[#loc37, #loc36])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc46, #loc47])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc50, #loc51])
#loc182 = loc(fused[#loc52, #loc53])
#loc183 = loc(fused[#loc58, #loc59])
#loc186 = loc(fused[#loc69, #loc70])
#loc187 = loc(fused[#loc73, #loc74])
#loc188 = loc(fused[#loc77, #loc76])
#loc189 = loc(fused[#loc79, #loc80])
#loc190 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc84, #loc83])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc87, #loc88])
#loc194 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc195 = loc(fused[#loc94, #loc93])
#loc196 = loc(fused[#loc95, #loc96])
#loc197 = loc(fused[#loc97, #loc98])
#loc198 = loc(fused[#loc99, #loc100])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc104, #loc103])
#loc201 = loc(fused[#loc105, #loc106])
#loc202 = loc(fused[#loc108, #loc102])
#loc203 = loc(fused[#loc111, #loc114])
#loc204 = loc(fused[#loc116, #loc115])
#loc205 = loc(fused[#loc121, #loc122])
#loc206 = loc(fused[#loc123, #loc124])
#loc207 = loc(fused[#loc126, #loc125])
#loc208 = loc(fused[#loc127, #loc128])
#loc209 = loc(fused[#loc129, #loc130])
#loc210 = loc(fused[#loc131, #loc128])
#loc211 = loc(fused[#loc133, #loc132])
#loc212 = loc(fused[#loc134, #loc135])
#loc213 = loc(fused[#loc136, #loc137])
#loc214 = loc(fused[#loc138, #loc139])
#loc215 = loc(fused[#loc140, #loc141])
#loc216 = loc(fused[#loc143, #loc142])
#loc217 = loc(fused[#loc144, #loc145])
#loc218 = loc(fused[#loc147, #loc141])
#loc219 = loc(fused[#loc150, #loc153])
#loc220 = loc(fused[#loc155, #loc154])
