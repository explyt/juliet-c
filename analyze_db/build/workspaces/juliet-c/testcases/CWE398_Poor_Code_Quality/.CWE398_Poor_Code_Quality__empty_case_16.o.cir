!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc51)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc54)
    cir.br ^bb1 loc(#loc55)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc55)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %2 ^bb3, ^bb14 loc(#loc12)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc56)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc57)
  ^bb5:  // pred: ^bb4
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc17)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc58)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.br ^bb6 loc(#loc59)
  ^bb6:  // pred: ^bb5
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.br ^bb7 loc(#loc18)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %6 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc18)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc22)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc19)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc15)
  ^bb12:  // pred: ^bb11
    %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb14 loc(#loc24)
  ^bb13:  // no predecessors
    cir.br ^bb2 loc(#loc11)
  ^bb14:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb15 loc(#loc11)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc53)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc61)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc26)
  } loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc63)
    cir.br ^bb1 loc(#loc64)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc64)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %1 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc37)
    cir.brcond %2 ^bb3, ^bb14 loc(#loc37)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc66)
  ^bb5:  // pred: ^bb4
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc41)
    %4 = cir.const #cir.int<3> : !s32i loc(#loc42)
    %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc67)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc63)
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // pred: ^bb5
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.br ^bb7 loc(#loc43)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %6 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc43)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc46)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc29)
    %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc47)
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc40)
  ^bb12:  // pred: ^bb11
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc30)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb14 loc(#loc50)
  ^bb13:  // no predecessors
    cir.br ^bb2 loc(#loc36)
  ^bb14:  // 2 preds: ^bb2, ^bb12
    cir.br ^bb15 loc(#loc36)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc32)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":33:19)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":20:1)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":36:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":26:13)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":26:32)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":22:5)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":35:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":22:11)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":23:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":25:9)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":32:9)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":26:22)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":26:31)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":27:13)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":31:13)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":27:21)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":29:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":30:17)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":33:9)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":34:9)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":62:1)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":65:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":64:5)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":64:11)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":53:27)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":57:19)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":43:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":60:1)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":49:13)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":49:32)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":45:5)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":59:5)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":45:11)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":46:5)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":48:9)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":56:9)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":49:22)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":49:31)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":50:13)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":55:13)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":50:21)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":52:13)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":53:17)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":54:17)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":57:9)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_16.c":58:9)
#loc51 = loc(fused[#loc1, #loc2])
#loc52 = loc(fused[#loc3, #loc4])
#loc53 = loc(fused[#loc6, #loc7])
#loc54 = loc(fused[#loc8, #loc9])
#loc55 = loc(fused[#loc10, #loc11])
#loc56 = loc(fused[#loc13, #loc11])
#loc57 = loc(fused[#loc14, #loc15])
#loc58 = loc(fused[#loc16, #loc17])
#loc59 = loc(fused[#loc18, #loc19])
#loc60 = loc(fused[#loc25, #loc26])
#loc61 = loc(fused[#loc27, #loc28])
#loc62 = loc(fused[#loc31, #loc32])
#loc63 = loc(fused[#loc33, #loc34])
#loc64 = loc(fused[#loc35, #loc36])
#loc65 = loc(fused[#loc38, #loc36])
#loc66 = loc(fused[#loc39, #loc40])
#loc67 = loc(fused[#loc41, #loc42])
#loc68 = loc(fused[#loc43, #loc44])
