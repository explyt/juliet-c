!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":24:60)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":24:69)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":43:64)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":43:73)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":58:64)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":58:73)
#loc133 = loc(fused[#loc15, #loc16])
#loc145 = loc(fused[#loc53, #loc54])
#loc157 = loc(fused[#loc92, #loc93])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc126)
  cir.func private @calloc(!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc127)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc128)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc131)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_badSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc15, #loc16])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc133)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc19)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc18)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc134)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc136)
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc137)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc27)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc27)
      cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc136)
      %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc29)
      %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc30)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc138)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc139)
      %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc29)
      cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
      cir.scope {
        %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc36)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc37)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc141)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc40)
          %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc41)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
        } loc(#loc142)
      } loc(#loc140)
      %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc42)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc42)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc43)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc43)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc44)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc45)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc46)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc135)
    cir.return loc(#loc14)
  } loc(#loc132)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc143)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc53, #loc54])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc146)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc57)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc56)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc146)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc148)
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc149)
      %6 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc65)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc66)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc66)
      %9 = cir.call @strlen(%8) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc65)
      cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc148)
      %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc67)
      %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc68)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc69)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc150)
      %15 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc70)
      %17 = cir.call @calloc(%14, %16) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc67)
      cir.store %17, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc149)
      cir.scope {
        %28 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
        %29 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
        %30 = cir.cmp(eq, %28, %29) : !cir.ptr<!void>, !cir.bool loc(#loc152)
        cir.if %30 {
          %31 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc76)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc77)
          %33 = cir.unary(minus, %32) : !s32i, !s32i loc(#loc78)
          cir.call @exit(%33) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
        } loc(#loc153)
      } loc(#loc151)
      %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc79)
      %19 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc80)
      %21 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc81)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc81)
      %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc79)
      %24 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc82)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc82)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc83)
      %26 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
      %27 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc85)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    } loc(#loc147)
    cir.return loc(#loc52)
  } loc(#loc144)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc154)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc155)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE135_63b_goodB2GSink(%arg0: !cir.ptr<!cir.ptr<!void>> loc(fused[#loc92, #loc93])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc157)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc158)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc96)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc95)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc97)
    cir.store %3, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc158)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc160)
      %5 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc161)
      %6 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc104)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc105)
      %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc105)
      %9 = cir.call @wcslen(%8) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc104)
      cir.store %9, %4 : !u64i, !cir.ptr<!u64i> loc(#loc160)
      %10 = cir.get_global @calloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i, !u64i)>> loc(#loc106)
      %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc107)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc108)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc108)
      %14 = cir.binop(add, %11, %13) : !u64i loc(#loc162)
      %15 = cir.const #cir.int<4> : !u64i loc(#loc163)
      %16 = cir.call @calloc(%14, %15) : (!u64i, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
      cir.store %16, %5 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc161)
      cir.scope {
        %26 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc113)
        %27 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc114)
        %28 = cir.cmp(eq, %26, %27) : !cir.ptr<!void>, !cir.bool loc(#loc165)
        cir.if %28 {
          %29 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc116)
          %30 = cir.const #cir.int<1> : !s32i loc(#loc117)
          %31 = cir.unary(minus, %30) : !s32i, !s32i loc(#loc118)
          cir.call @exit(%31) : (!s32i) -> () extra(#fn_attr) loc(#loc116)
        } loc(#loc166)
      } loc(#loc164)
      %17 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc119)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc119)
      %19 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc120)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc120)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc121)
      %22 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc122)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc122)
      cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc123)
      %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc124)
      %25 = cir.load %5 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc125)
      cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc124)
    } loc(#loc159)
    cir.return loc(#loc91)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":0:0)
#loc1 = loc("/usr/include/string.h":407:1)
#loc2 = loc("/usr/include/string.h":408:33)
#loc3 = loc("/usr/include/stdlib.h":675:1)
#loc4 = loc("/usr/include/stdlib.h":676:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/stdlib.h":687:1)
#loc12 = loc("/usr/include/stdlib.h":687:32)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":24:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":36:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":26:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":26:20)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":25:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":26:19)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":35:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":29:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":29:45)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:64)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":29:26)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":29:41)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:46)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:49)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":30:63)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:37)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:13)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:27)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:28)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:34)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":31:33)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":32:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":32:28)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":32:15)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":33:27)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":33:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":34:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":34:14)
#loc49 = loc("/usr/include/string.h":141:1)
#loc50 = loc("/usr/include/string.h":142:14)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":43:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":55:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":45:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":45:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":44:1)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":45:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":46:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":54:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":48:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":48:45)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:50)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":48:26)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":48:41)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:31)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:46)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":49:49)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":50:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":51:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":51:22)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":51:28)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":52:27)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":52:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":53:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":53:14)
#loc86 = loc("/usr/include/wchar.h":247:1)
#loc87 = loc("/usr/include/wchar.h":247:51)
#loc88 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc89 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":58:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":70:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":60:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":60:20)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":59:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":60:19)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":61:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":69:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":63:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":63:48)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:64)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":63:26)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":63:44)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:31)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:38)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:46)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:49)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":64:63)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:9)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:37)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:21)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:27)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:28)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:34)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":65:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":66:22)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":66:28)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":66:15)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":67:31)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":67:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":68:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_63b.c":68:14)
#loc126 = loc(fused[#loc1, #loc2])
#loc127 = loc(fused[#loc3, #loc4])
#loc128 = loc(fused[#loc5, #loc6])
#loc129 = loc(fused[#loc7, #loc8])
#loc130 = loc(fused[#loc9, #loc10])
#loc131 = loc(fused[#loc11, #loc12])
#loc132 = loc(fused[#loc13, #loc14])
#loc134 = loc(fused[#loc17, #loc18])
#loc135 = loc(fused[#loc21, #loc22])
#loc136 = loc(fused[#loc23, #loc24])
#loc137 = loc(fused[#loc25, #loc26])
#loc138 = loc(fused[#loc30, #loc31])
#loc139 = loc(fused[#loc32, #loc33])
#loc140 = loc(fused[#loc34, #loc35])
#loc141 = loc(fused[#loc36, #loc37])
#loc142 = loc(fused[#loc38, #loc35])
#loc143 = loc(fused[#loc49, #loc50])
#loc144 = loc(fused[#loc51, #loc52])
#loc146 = loc(fused[#loc55, #loc56])
#loc147 = loc(fused[#loc59, #loc60])
#loc148 = loc(fused[#loc61, #loc62])
#loc149 = loc(fused[#loc63, #loc64])
#loc150 = loc(fused[#loc68, #loc69])
#loc151 = loc(fused[#loc71, #loc72])
#loc152 = loc(fused[#loc73, #loc74])
#loc153 = loc(fused[#loc75, #loc72])
#loc154 = loc(fused[#loc86, #loc87])
#loc155 = loc(fused[#loc88, #loc89])
#loc156 = loc(fused[#loc90, #loc91])
#loc158 = loc(fused[#loc94, #loc95])
#loc159 = loc(fused[#loc98, #loc99])
#loc160 = loc(fused[#loc100, #loc101])
#loc161 = loc(fused[#loc102, #loc103])
#loc162 = loc(fused[#loc107, #loc108])
#loc163 = loc(fused[#loc109, #loc110])
#loc164 = loc(fused[#loc111, #loc112])
#loc165 = loc(fused[#loc113, #loc114])
#loc166 = loc(fused[#loc115, #loc112])
