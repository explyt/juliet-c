!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":22:21)
#loc6 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":22:34)
#loc35 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":48:25)
#loc36 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":48:38)
#loc63 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":68:25)
#loc64 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":68:38)
#loc93 = loc(fused[#loc5, #loc6])
#loc106 = loc(fused[#loc35, #loc36])
#loc117 = loc(fused[#loc63, #loc64])
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_min_sub_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc91)
  cir.func internal private @badSink(%arg0: !u32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc95)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc12)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc11)
      %5 = cir.binop(sub, %2, %4) : !u32i loc(#loc96)
      cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc95)
      %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc13)
      cir.call @printUnsignedLine(%6) : (!u32i) -> () loc(#loc14)
    } loc(#loc94)
    cir.return loc(#loc4)
  } loc(#loc92)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_min_sub_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc99)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!u32i)>> loc(#loc20)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>> loc(#loc99)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc21)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc23)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc101)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, !cir.ptr<!cir.func<(!u32i)>> loc(#loc25)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!u32i)>>, !u32i) -> () loc(#loc25)
    cir.return loc(#loc16)
  } loc(#loc97)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_min_sub_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc102)
  cir.func internal private @goodG2BSink(%arg0: !u32i loc(fused[#loc35, #loc36])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc106)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc37)
    cir.scope {
      %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
      %2 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc42)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc41)
      %5 = cir.binop(sub, %2, %4) : !u32i loc(#loc109)
      cir.store %5, %1 : !u32i, !cir.ptr<!u32i> loc(#loc108)
      %6 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc43)
      cir.call @printUnsignedLine(%6) : (!u32i) -> () loc(#loc44)
    } loc(#loc107)
    cir.return loc(#loc34)
  } loc(#loc105)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!u32i)>> loc(#loc50)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>> loc(#loc112)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc51)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc51)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc113)
    %5 = cir.const #cir.int<2> : !s32i loc(#loc53)
    %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc54)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc54)
    cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc114)
    %8 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, !cir.ptr<!cir.func<(!u32i)>> loc(#loc56)
    %9 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc57)
    cir.call %8(%9) : (!cir.ptr<!cir.func<(!u32i)>>, !u32i) -> () loc(#loc56)
    cir.return loc(#loc46)
  } loc(#loc110)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc60)
  cir.func internal private @goodB2GSink(%arg0: !u32i loc(fused[#loc63, #loc64])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc117)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc65)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc68)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc69)
      %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc69)
      %4 = cir.cmp(gt, %1, %3) : !u32i, !cir.bool loc(#loc119)
      cir.if %4 {
        %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc121)
        %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc75)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc74)
        %9 = cir.binop(sub, %6, %8) : !u32i loc(#loc122)
        cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc121)
        %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc76)
        cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc77)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc60)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc78)
      } loc(#loc120)
    } loc(#loc118)
    cir.return loc(#loc62)
  } loc(#loc116)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!u32i)>> loc(#loc84)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!u32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>> loc(#loc125)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc85)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc85)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc126)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc87)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc127)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!u32i)>>>, !cir.ptr<!cir.func<(!u32i)>> loc(#loc89)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc90)
    cir.call %7(%8) : (!cir.ptr<!cir.func<(!u32i)>>, !u32i) -> () loc(#loc89)
    cir.return loc(#loc80)
  } loc(#loc123)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":22:1)
#loc4 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":29:1)
#loc7 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":23:1)
#loc8 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":24:5)
#loc9 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":28:5)
#loc10 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":26:9)
#loc11 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":26:38)
#loc12 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":26:31)
#loc13 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":27:27)
#loc14 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":27:9)
#loc15 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":31:1)
#loc16 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":41:1)
#loc17 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":33:5)
#loc18 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":33:18)
#loc19 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":35:5)
#loc20 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":35:38)
#loc21 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":36:12)
#loc22 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":36:5)
#loc23 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":38:12)
#loc24 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":38:5)
#loc25 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":40:5)
#loc26 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":40:13)
#loc27 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":92:1)
#loc28 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":96:1)
#loc29 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":94:5)
#loc30 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":94:13)
#loc31 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":95:5)
#loc32 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":95:13)
#loc33 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":48:1)
#loc34 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":55:1)
#loc37 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":49:1)
#loc38 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":50:5)
#loc39 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":54:5)
#loc40 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":52:9)
#loc41 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":52:38)
#loc42 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":52:31)
#loc43 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":53:27)
#loc44 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":53:9)
#loc45 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":57:1)
#loc46 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":65:1)
#loc47 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":59:5)
#loc48 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":59:18)
#loc49 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":60:38)
#loc51 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":61:12)
#loc52 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":61:5)
#loc53 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":63:13)
#loc54 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":63:12)
#loc55 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":63:5)
#loc56 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":64:5)
#loc57 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":64:13)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc60 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":78:19)
#loc61 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":68:1)
#loc62 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":80:1)
#loc65 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":69:1)
#loc66 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":71:5)
#loc67 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":79:5)
#loc68 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":71:9)
#loc69 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":71:16)
#loc70 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":72:5)
#loc71 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":75:5)
#loc72 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":77:5)
#loc73 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":73:9)
#loc74 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":73:38)
#loc75 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":73:31)
#loc76 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":74:27)
#loc77 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":74:9)
#loc78 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":78:9)
#loc79 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":82:1)
#loc80 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":90:1)
#loc81 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":84:5)
#loc82 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":84:18)
#loc83 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":85:5)
#loc84 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":85:38)
#loc85 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":86:12)
#loc86 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":86:5)
#loc87 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":88:12)
#loc88 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":88:5)
#loc89 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":89:5)
#loc90 = loc("CWE191_Integer_Underflow__unsigned_int_min_sub_44.c":89:13)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc8, #loc9])
#loc95 = loc(fused[#loc10, #loc11])
#loc96 = loc(fused[#loc12, #loc11])
#loc97 = loc(fused[#loc15, #loc16])
#loc98 = loc(fused[#loc17, #loc18])
#loc99 = loc(fused[#loc19, #loc20])
#loc100 = loc(fused[#loc22, #loc21])
#loc101 = loc(fused[#loc24, #loc23])
#loc102 = loc(fused[#loc27, #loc28])
#loc103 = loc(fused[#loc29, #loc30])
#loc104 = loc(fused[#loc31, #loc32])
#loc105 = loc(fused[#loc33, #loc34])
#loc107 = loc(fused[#loc38, #loc39])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc42, #loc41])
#loc110 = loc(fused[#loc45, #loc46])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc49, #loc50])
#loc113 = loc(fused[#loc52, #loc51])
#loc114 = loc(fused[#loc55, #loc53])
#loc115 = loc(fused[#loc58, #loc59])
#loc116 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc66, #loc67])
#loc119 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc75, #loc74])
#loc123 = loc(fused[#loc79, #loc80])
#loc124 = loc(fused[#loc81, #loc82])
#loc125 = loc(fused[#loc83, #loc84])
#loc126 = loc(fused[#loc86, #loc85])
#loc127 = loc(fused[#loc88, #loc87])
