!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc165)
  cir.func private @__isoc23_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc166)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc168)
  cir.func private @printIntLine(!s32i) loc(#loc169)
  cir.func @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_103badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc21)
      cir.if %5 {
        %6 = cir.get_global @__isoc23_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc23)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc167)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc24)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc23_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc23)
      } loc(#loc174)
    } loc(#loc173)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc176)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc177)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc178)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc32)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc179)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc180)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc181)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc37)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc182)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc182)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc183)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc43)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc185)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc45)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc46)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc186)
          cir.condition(%24) loc(#loc186)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc48)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc50)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc51)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc188)
          } loc(#loc187)
          cir.yield loc(#loc42)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc53)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc189)
          cir.yield loc(#loc184)
        } loc(#loc184)
      } loc(#loc184)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc56)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc54)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc57)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc58)
      cir.delete.array %18 : <!s32i> loc(#loc58)
    } loc(#loc175)
    cir.return loc(#loc13)
  } loc(#loc170)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc190)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc63)
  cir.func internal private @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10L8goodG2B1Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc69)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.scope {
      %3 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc190)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc73)
      cir.if %5 {
        %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc63)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc63)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc78)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
      } loc(#loc196)
    } loc(#loc195)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc199)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc200)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc201)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc87)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc202)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc203)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc204)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc91)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc92)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc205)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc205)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc206)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc98)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc98)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc208)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc101)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc209)
          cir.condition(%24) loc(#loc209)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc103)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc104)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc105)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc106)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc211)
          } loc(#loc210)
          cir.yield loc(#loc97)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc107)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc108)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc212)
          cir.yield loc(#loc207)
        } loc(#loc207)
      } loc(#loc207)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc109)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc110)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc111)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc112)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      cir.delete.array %18 : <!s32i> loc(#loc113)
    } loc(#loc198)
    cir.return loc(#loc65)
  } loc(#loc192)
  cir.func internal private @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10L8goodG2B2Ev() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc214)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc119)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc215)
    cir.scope {
      %3 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc165)
      %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc125)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc217)
    } loc(#loc216)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc220)
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc221)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc222)
      %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc134)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc223)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc224)
      cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc225)
      %10 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc138)
      %11 = cir.call @_Znam(%10) : (!u64i) -> !cir.ptr<!void> loc(#loc139)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc226)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc226)
      cir.store %13, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc227)
      cir.scope {
        %19 = cir.const #cir.int<0> : !s32i loc(#loc145)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc145)
        cir.store %20, %4 : !u64i, !cir.ptr<!u64i> loc(#loc229)
        cir.for : cond {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc147)
          %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc148)
          %24 = cir.cmp(lt, %21, %23) : !u64i, !cir.bool loc(#loc230)
          cir.condition(%24) loc(#loc230)
        } body {
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc150)
            %22 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc151)
            %23 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc152)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc153)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          } loc(#loc231)
          cir.yield loc(#loc144)
        } step {
          %21 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc154)
          %22 = cir.unary(inc, %21) : !u64i, !u64i loc(#loc155)
          cir.store %22, %4 : !u64i, !cir.ptr<!u64i> loc(#loc233)
          cir.yield loc(#loc228)
        } loc(#loc228)
      } loc(#loc228)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %15 = cir.const #cir.int<0> : !s32i loc(#loc157)
      %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc158)
      %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc156)
      cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc159)
      %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
      cir.delete.array %18 : <!s32i> loc(#loc160)
    } loc(#loc219)
    cir.return loc(#loc115)
  } loc(#loc213)
  cir.func @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_104goodEv() extra(#fn_attr) {
    cir.call @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10L8goodG2B1Ev() : () -> () loc(#loc163)
    cir.call @_ZN57CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10L8goodG2B2Ev() : () -> () loc(#loc164)
    cir.return loc(#loc162)
  } loc(#loc234)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdio.h":442:1)
#loc4 = loc("/usr/include/stdio.h":444:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":32:23)
#loc8 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc9 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc10 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":24:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":47:1)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":26:5)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":26:9)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":28:13)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":28:12)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":28:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":29:5)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":33:5)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":29:8)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":30:5)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":32:9)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":32:16)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":34:5)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":46:5)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":35:9)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":35:16)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":35:26)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":36:9)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":36:14)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":38:21)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":38:28)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":38:38)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":38:9)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":39:37)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":24:6)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":39:28)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":39:46)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":39:9)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:9)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":43:9)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:18)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:14)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:21)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":41:9)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":42:29)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":42:13)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":42:24)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":42:25)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:40)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":40:39)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":44:22)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":44:33)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":44:34)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":44:9)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":45:19)
#loc59 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc60 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc61 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc62 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":62:19)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":54:1)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":82:1)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":56:5)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":56:9)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":58:13)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":58:12)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":58:5)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":59:5)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":68:5)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":59:8)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":60:5)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":63:5)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":65:5)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":62:9)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":67:16)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":67:9)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":69:5)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":81:5)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":70:9)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":70:16)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":70:26)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":71:9)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":71:14)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":73:21)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":73:28)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":73:38)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":73:9)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":74:37)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":54:13)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":74:28)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":74:46)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":74:9)
#loc96 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:9)
#loc97 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":78:9)
#loc98 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:18)
#loc99 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:14)
#loc100 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:21)
#loc101 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:33)
#loc102 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":76:9)
#loc103 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":77:29)
#loc104 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":77:13)
#loc105 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":77:24)
#loc106 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":77:25)
#loc107 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:40)
#loc108 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":75:39)
#loc109 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":79:22)
#loc110 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":79:33)
#loc111 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":79:34)
#loc112 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":79:9)
#loc113 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":80:19)
#loc114 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":85:1)
#loc115 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":108:1)
#loc116 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":87:5)
#loc117 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":87:9)
#loc118 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":89:13)
#loc119 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":89:12)
#loc120 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":89:5)
#loc121 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":90:5)
#loc122 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":94:5)
#loc123 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":90:8)
#loc124 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":91:5)
#loc125 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":93:16)
#loc126 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":93:9)
#loc127 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":95:5)
#loc128 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":107:5)
#loc129 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":96:9)
#loc130 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":96:16)
#loc131 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":96:26)
#loc132 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":97:9)
#loc133 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":97:14)
#loc134 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":99:21)
#loc135 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":99:28)
#loc136 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":99:38)
#loc137 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":99:9)
#loc138 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":100:37)
#loc139 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":85:13)
#loc140 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":100:28)
#loc141 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":100:46)
#loc142 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":100:9)
#loc143 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:9)
#loc144 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":104:9)
#loc145 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:18)
#loc146 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:14)
#loc147 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:21)
#loc148 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:33)
#loc149 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":102:9)
#loc150 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":103:29)
#loc151 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":103:13)
#loc152 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":103:24)
#loc153 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":103:25)
#loc154 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:40)
#loc155 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":101:39)
#loc156 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":105:22)
#loc157 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":105:33)
#loc158 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":105:34)
#loc159 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":105:9)
#loc160 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":106:19)
#loc161 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":110:1)
#loc162 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":114:1)
#loc163 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":112:5)
#loc164 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_fscanf_10.cpp":113:5)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc8, #loc9])
#loc169 = loc(fused[#loc10, #loc11])
#loc170 = loc(fused[#loc12, #loc13])
#loc171 = loc(fused[#loc14, #loc15])
#loc172 = loc(fused[#loc18, #loc16])
#loc173 = loc(fused[#loc19, #loc20])
#loc174 = loc(fused[#loc22, #loc20])
#loc175 = loc(fused[#loc25, #loc26])
#loc176 = loc(fused[#loc27, #loc28])
#loc177 = loc(fused[#loc27, #loc29])
#loc178 = loc(fused[#loc30, #loc31])
#loc179 = loc(fused[#loc33, #loc34])
#loc180 = loc(fused[#loc32, #loc34])
#loc181 = loc(fused[#loc35, #loc34])
#loc182 = loc(fused[#loc38, #loc39])
#loc183 = loc(fused[#loc40, #loc39])
#loc184 = loc(fused[#loc41, #loc42])
#loc185 = loc(fused[#loc44, #loc43])
#loc186 = loc(fused[#loc45, #loc46])
#loc187 = loc(fused[#loc47, #loc42])
#loc188 = loc(fused[#loc49, #loc48])
#loc189 = loc(fused[#loc53, #loc52])
#loc190 = loc(fused[#loc59, #loc60])
#loc191 = loc(fused[#loc61, #loc62])
#loc192 = loc(fused[#loc64, #loc65])
#loc193 = loc(fused[#loc66, #loc67])
#loc194 = loc(fused[#loc70, #loc68])
#loc195 = loc(fused[#loc71, #loc72])
#loc196 = loc(fused[#loc74, #loc75, #loc76, #loc72])
#loc197 = loc(fused[#loc79, #loc78])
#loc198 = loc(fused[#loc80, #loc81])
#loc199 = loc(fused[#loc82, #loc83])
#loc200 = loc(fused[#loc82, #loc84])
#loc201 = loc(fused[#loc85, #loc86])
#loc202 = loc(fused[#loc88, #loc89])
#loc203 = loc(fused[#loc87, #loc89])
#loc204 = loc(fused[#loc90, #loc89])
#loc205 = loc(fused[#loc93, #loc94])
#loc206 = loc(fused[#loc95, #loc94])
#loc207 = loc(fused[#loc96, #loc97])
#loc208 = loc(fused[#loc99, #loc98])
#loc209 = loc(fused[#loc100, #loc101])
#loc210 = loc(fused[#loc102, #loc97])
#loc211 = loc(fused[#loc104, #loc103])
#loc212 = loc(fused[#loc108, #loc107])
#loc213 = loc(fused[#loc114, #loc115])
#loc214 = loc(fused[#loc116, #loc117])
#loc215 = loc(fused[#loc120, #loc118])
#loc216 = loc(fused[#loc121, #loc122])
#loc217 = loc(fused[#loc124, #loc122])
#loc218 = loc(fused[#loc126, #loc125])
#loc219 = loc(fused[#loc127, #loc128])
#loc220 = loc(fused[#loc129, #loc130])
#loc221 = loc(fused[#loc129, #loc131])
#loc222 = loc(fused[#loc132, #loc133])
#loc223 = loc(fused[#loc135, #loc136])
#loc224 = loc(fused[#loc134, #loc136])
#loc225 = loc(fused[#loc137, #loc136])
#loc226 = loc(fused[#loc140, #loc141])
#loc227 = loc(fused[#loc142, #loc141])
#loc228 = loc(fused[#loc143, #loc144])
#loc229 = loc(fused[#loc146, #loc145])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc149, #loc144])
#loc232 = loc(fused[#loc151, #loc150])
#loc233 = loc(fused[#loc155, #loc154])
#loc234 = loc(fused[#loc161, #loc162])
