!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":133:10)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":133:14)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":133:20)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":133:32)
#loc243 = loc(fused[#loc77, #loc78])
#loc244 = loc(fused[#loc79, #loc80])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc215)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc217)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc218)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc219)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc219)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc221)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc223)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc18)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc19)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc20)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc21)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc224)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc226)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc227)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc29)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc30)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc30)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc30)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc228)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc34)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc35)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc35)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc37)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc229)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc40)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc40)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc231)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc42)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc43)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc43)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc232)
          cir.condition(%46) loc(#loc44)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc46)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc47)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc47)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc49)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc50)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc234)
          } loc(#loc233)
          cir.yield loc(#loc39)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc52)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc53)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc235)
          cir.yield loc(#loc230)
        } loc(#loc230)
      } loc(#loc230)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc54)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc54)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc55)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc56)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc57)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc56)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc58)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc236)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    } loc(#loc225)
    cir.return loc(#loc4)
  } loc(#loc216)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc63)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    cir.return loc(#loc62)
  } loc(#loc237)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc240)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc74)
  cir.func @main(%arg0: !s32i loc(fused[#loc77, #loc78]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc79, #loc80])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc76)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc81)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc82)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc83)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc83)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc84)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_good() : () -> () loc(#loc86)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc72)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc73)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06_bad() : () -> () loc(#loc90)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc74)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc93)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc95)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc101)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc101)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc101)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc101)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc101)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc251)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc101)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc103)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc103)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc103)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc103)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc103)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc103)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc106)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc107)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc253)
      cir.if %19 {
        %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc95)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc95)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc111)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc255)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc114)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc114)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc116)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc117)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc256)
      } loc(#loc254)
    } loc(#loc252)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc258)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc259)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc124)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc125)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc126)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc126)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc126)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc260)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc130)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc130)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc131)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc132)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc131)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc133)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc133)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc261)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc136)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc136)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc263)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc138)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc139)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc139)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc264)
          cir.condition(%46) loc(#loc140)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc142)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc143)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc143)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc143)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc145)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc146)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc266)
          } loc(#loc265)
          cir.yield loc(#loc135)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc148)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc149)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc267)
          cir.yield loc(#loc262)
        } loc(#loc262)
      } loc(#loc262)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc150)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc150)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc152)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc153)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc152)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc154)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc268)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    } loc(#loc257)
    cir.return loc(#loc97)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc270)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc271)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc162)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc162)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc162)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc162)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc162)
    %7 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc272)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc162)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
    cir.store %9, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc271)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc164)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc164)
    %12 = cir.const #cir.int<1> : !u64i loc(#loc164)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc164)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc164)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc164)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc164)
    cir.store %16, %7 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc272)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc167)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc168)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc274)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc170)
        cir.store %20, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc276)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc172)
        %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc172)
        %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc173)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc174)
        %25 = cir.ptr_stride(%23 : !cir.ptr<!s8i>, %24 : !s32i), !cir.ptr<!s8i> loc(#loc175)
        cir.store %22, %25 : !s8i, !cir.ptr<!s8i> loc(#loc277)
      } loc(#loc275)
    } loc(#loc273)
    cir.scope {
      %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc279)
      %18 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc280)
      %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc182)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc182)
      %21 = cir.const #cir.int<67> : !s32i loc(#loc183)
      %22 = cir.const #cir.int<100> : !s32i loc(#loc184)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc185)
      %24 = cir.binop(sub, %22, %23) nsw : !s32i loc(#loc184)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc184)
      cir.libc.memset %25 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc281)
      %26 = cir.const #cir.int<0> : !s32i loc(#loc188)
      %27 = cir.cast(integral, %26 : !s32i), !s8i loc(#loc188)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc189)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc190)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc189)
      %31 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc191)
      %32 = cir.ptr_stride(%31 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc191)
      cir.store %27, %32 : !s8i, !cir.ptr<!s8i> loc(#loc282)
      cir.scope {
        %41 = cir.const #cir.int<0> : !s32i loc(#loc194)
        %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc194)
        cir.store %42, %17 : !u64i, !cir.ptr<!u64i> loc(#loc284)
        cir.for : cond {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc196)
          %44 = cir.const #cir.int<100> : !s32i loc(#loc197)
          %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc197)
          %46 = cir.cmp(lt, %43, %45) : !u64i, !cir.bool loc(#loc285)
          cir.condition(%46) loc(#loc198)
        } body {
          cir.scope {
            %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc200)
            %44 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc201)
            %45 = cir.ptr_stride(%44 : !cir.ptr<!s8i>, %43 : !u64i), !cir.ptr<!s8i> loc(#loc201)
            %46 = cir.load %45 : !cir.ptr<!s8i>, !s8i loc(#loc201)
            %47 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc202)
            %48 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc203)
            %49 = cir.ptr_stride(%47 : !cir.ptr<!s8i>, %48 : !u64i), !cir.ptr<!s8i> loc(#loc204)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc287)
          } loc(#loc286)
          cir.yield loc(#loc193)
        } step {
          %43 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc206)
          %44 = cir.unary(inc, %43) : !u64i, !u64i loc(#loc207)
          cir.store %44, %17 : !u64i, !cir.ptr<!u64i> loc(#loc288)
          cir.yield loc(#loc283)
        } loc(#loc283)
      } loc(#loc283)
      %33 = cir.const #cir.int<0> : !s32i loc(#loc208)
      %34 = cir.cast(integral, %33 : !s32i), !s8i loc(#loc208)
      %35 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc209)
      %36 = cir.const #cir.int<100> : !s32i loc(#loc210)
      %37 = cir.const #cir.int<1> : !s32i loc(#loc211)
      %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc210)
      %39 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc212)
      cir.store %34, %39 : !s8i, !cir.ptr<!s8i> loc(#loc289)
      %40 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc213)
      cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc214)
    } loc(#loc278)
    cir.return loc(#loc158)
  } loc(#loc269)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s03/CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":27:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":52:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":29:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":29:12)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":30:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":30:36)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":31:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":31:37)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":38:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":32:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":33:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":36:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":36:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:19)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:14)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":37:15)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":39:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":51:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":40:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":40:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":41:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":41:24)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":42:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":43:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":48:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:18)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:14)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:21)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:23)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":46:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:30)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:23)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:18)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:19)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":47:31)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":45:30)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:14)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:18)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":49:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":50:19)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":50:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":117:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":121:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":119:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":119:14)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":120:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":120:14)
#loc67 = loc("/usr/include/stdlib.h":575:1)
#loc68 = loc("/usr/include/stdlib.h":575:41)
#loc69 = loc("/usr/include/time.h":76:1)
#loc70 = loc("/usr/include/time.h":76:38)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":138:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":140:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":143:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":145:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":133:1)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":148:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":134:1)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":136:27)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":136:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":136:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":138:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":139:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":139:73)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":140:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":143:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":144:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":144:72)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":145:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":147:12)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":147:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":67:19)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":59:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":88:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":61:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":61:12)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":62:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":62:36)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":63:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":63:37)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":74:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:8)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":64:27)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":65:5)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":68:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":70:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":67:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":72:16)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":72:9)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:19)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:14)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":73:15)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":75:5)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":87:5)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":76:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":76:16)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":77:9)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":77:24)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:16)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:24)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:29)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:33)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:9)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":78:34)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:25)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:16)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:20)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":79:9)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:9)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":84:9)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:18)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:14)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:21)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:25)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:23)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":82:9)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:30)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:23)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:18)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:19)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":83:31)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:31)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":81:30)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:23)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:9)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:14)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:18)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":85:19)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":86:19)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":86:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":91:1)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":115:1)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":93:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":93:12)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":94:5)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":94:36)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":95:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":95:37)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":101:5)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:8)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":96:27)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":97:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":99:16)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":99:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:19)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:14)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":100:15)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":102:5)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":114:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":103:9)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":103:16)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":104:9)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":104:24)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:16)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:24)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:29)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:33)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:9)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":105:34)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:25)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:16)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:20)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":106:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":111:9)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:18)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:14)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:21)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:25)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:23)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":109:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:30)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:23)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:13)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:18)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:19)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":110:31)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:31)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":108:30)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:23)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:9)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:14)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:18)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":112:19)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":113:19)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_char_alloca_loop_06.c":113:9)
#loc215 = loc(fused[#loc1, #loc2])
#loc216 = loc(fused[#loc3, #loc4])
#loc217 = loc(fused[#loc5, #loc6])
#loc218 = loc(fused[#loc7, #loc8])
#loc219 = loc(fused[#loc9, #loc10])
#loc220 = loc(fused[#loc11, #loc12])
#loc221 = loc(fused[#loc13, #loc14])
#loc222 = loc(fused[#loc15, #loc12])
#loc223 = loc(fused[#loc17, #loc16])
#loc224 = loc(fused[#loc19, #loc18])
#loc225 = loc(fused[#loc22, #loc23])
#loc226 = loc(fused[#loc24, #loc25])
#loc227 = loc(fused[#loc26, #loc27])
#loc228 = loc(fused[#loc32, #loc33])
#loc229 = loc(fused[#loc37, #loc34])
#loc230 = loc(fused[#loc38, #loc39])
#loc231 = loc(fused[#loc41, #loc40])
#loc232 = loc(fused[#loc42, #loc43])
#loc233 = loc(fused[#loc45, #loc39])
#loc234 = loc(fused[#loc48, #loc51])
#loc235 = loc(fused[#loc53, #loc52])
#loc236 = loc(fused[#loc55, #loc54])
#loc237 = loc(fused[#loc61, #loc62])
#loc238 = loc(fused[#loc63, #loc64])
#loc239 = loc(fused[#loc65, #loc66])
#loc240 = loc(fused[#loc67, #loc68])
#loc241 = loc(fused[#loc69, #loc70])
#loc242 = loc(fused[#loc75, #loc76])
#loc245 = loc(fused[#loc86, #loc87])
#loc246 = loc(fused[#loc90, #loc91])
#loc247 = loc(fused[#loc94, #loc93])
#loc248 = loc(fused[#loc96, #loc97])
#loc249 = loc(fused[#loc98, #loc99])
#loc250 = loc(fused[#loc100, #loc101])
#loc251 = loc(fused[#loc102, #loc103])
#loc252 = loc(fused[#loc104, #loc105])
#loc253 = loc(fused[#loc106, #loc107])
#loc254 = loc(fused[#loc108, #loc109, #loc110, #loc105])
#loc255 = loc(fused[#loc113, #loc112])
#loc256 = loc(fused[#loc115, #loc114])
#loc257 = loc(fused[#loc118, #loc119])
#loc258 = loc(fused[#loc120, #loc121])
#loc259 = loc(fused[#loc122, #loc123])
#loc260 = loc(fused[#loc128, #loc129])
#loc261 = loc(fused[#loc133, #loc130])
#loc262 = loc(fused[#loc134, #loc135])
#loc263 = loc(fused[#loc137, #loc136])
#loc264 = loc(fused[#loc138, #loc139])
#loc265 = loc(fused[#loc141, #loc135])
#loc266 = loc(fused[#loc144, #loc147])
#loc267 = loc(fused[#loc149, #loc148])
#loc268 = loc(fused[#loc151, #loc150])
#loc269 = loc(fused[#loc157, #loc158])
#loc270 = loc(fused[#loc159, #loc160])
#loc271 = loc(fused[#loc161, #loc162])
#loc272 = loc(fused[#loc163, #loc164])
#loc273 = loc(fused[#loc165, #loc166])
#loc274 = loc(fused[#loc167, #loc168])
#loc275 = loc(fused[#loc169, #loc166])
#loc276 = loc(fused[#loc171, #loc170])
#loc277 = loc(fused[#loc173, #loc172])
#loc278 = loc(fused[#loc176, #loc177])
#loc279 = loc(fused[#loc178, #loc179])
#loc280 = loc(fused[#loc180, #loc181])
#loc281 = loc(fused[#loc186, #loc187])
#loc282 = loc(fused[#loc191, #loc188])
#loc283 = loc(fused[#loc192, #loc193])
#loc284 = loc(fused[#loc195, #loc194])
#loc285 = loc(fused[#loc196, #loc197])
#loc286 = loc(fused[#loc199, #loc193])
#loc287 = loc(fused[#loc202, #loc205])
#loc288 = loc(fused[#loc207, #loc206])
#loc289 = loc(fused[#loc209, #loc208])
