!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":25:21)
#loc8 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":25:25)
#loc53 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":59:26)
#loc54 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":59:30)
#loc101 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":96:26)
#loc102 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":96:30)
#loc147 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":128:25)
#loc148 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":128:29)
#loc180 = loc(fused[#loc7, #loc8])
#loc199 = loc(fused[#loc53, #loc54])
#loc217 = loc(fused[#loc101, #loc102])
#loc235 = loc(fused[#loc147, #loc148])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global "private"  internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc177)
  cir.func private  @printIntLine(!s32i) loc(#loc178)
  cir.func internal private  @badSink(%arg0: !s32i loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc180)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc177)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc17)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc184)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc186)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc21)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc22)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc186)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc23)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc24)
          } loc(#loc185)
        } loc(#loc183)
      } loc(#loc182)
    } loc(#loc181)
    cir.return loc(#loc6)
  } loc(#loc179)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_21_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc29)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %4 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc177)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @badSink(%5) : (!s32i) -> () loc(#loc36)
    cir.return loc(#loc26)
  } loc(#loc187)
  cir.func no_proto  @CWE190_Integer_Overflow__int_max_multiply_21_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc195)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc38)
  } loc(#loc192)
  cir.global "private"  internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc196)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc49)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc50)
  cir.func internal private  @goodB2G1Sink(%arg0: !s32i loc(fused[#loc53, #loc54])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc199)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc196)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc58)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc49)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc49)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc66)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc203)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc67)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc72)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc73)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc206)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc207)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc75)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc209)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc80)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc81)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc209)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc83)
              } else {
                %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc50)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc50)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc84)
              } loc(#loc208)
            } loc(#loc205)
          } loc(#loc204)
        } loc(#loc202)
      } loc(#loc201)
    } loc(#loc200)
    cir.return loc(#loc52)
  } loc(#loc198)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc211)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc91)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc93)
    %4 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc196)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    cir.call @goodB2G1Sink(%5) : (!s32i) -> () loc(#loc96)
    cir.return loc(#loc86)
  } loc(#loc210)
  cir.global "private"  internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc215)
  cir.func internal private  @goodB2G2Sink(%arg0: !s32i loc(fused[#loc101, #loc102])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc217)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc215)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc106)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc111)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc221)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc112)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
              %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc117)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc118)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc224)
              %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc225)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc120)
              cir.if %13 {
                %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc227)
                %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
                %16 = cir.const #cir.int<2> : !s32i loc(#loc125)
                %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc126)
                cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc227)
                %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc127)
                cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc128)
              } else {
                %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc129)
                %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc129)
                cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc130)
              } loc(#loc226)
            } loc(#loc223)
          } loc(#loc222)
        } loc(#loc220)
      } loc(#loc219)
    } loc(#loc218)
    cir.return loc(#loc100)
  } loc(#loc216)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc135)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc137)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %4 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc215)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    cir.call @goodB2G2Sink(%5) : (!s32i) -> () loc(#loc142)
    cir.return loc(#loc132)
  } loc(#loc228)
  cir.global "private"  internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc233)
  cir.func internal private  @goodG2BSink(%arg0: !s32i loc(fused[#loc147, #loc148])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc235)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc233)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc152)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc152)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc157)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc239)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc158)
          cir.if %7 {
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc241)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc161)
            %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc162)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc241)
            %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc163)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc164)
          } loc(#loc240)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc236)
    cir.return loc(#loc146)
  } loc(#loc234)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc244)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc171)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc233)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc176)
    cir.return loc(#loc166)
  } loc(#loc242)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_multiply_21.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":23:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":36:1)
#loc9 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":26:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":35:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":27:8)
#loc13 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":29:19)
#loc18 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":29:17)
#loc19 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":30:9)
#loc20 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":32:13)
#loc21 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":32:33)
#loc22 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":32:26)
#loc23 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":33:26)
#loc24 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":33:13)
#loc25 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":38:1)
#loc26 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":47:1)
#loc27 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":40:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":40:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":42:12)
#loc30 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":42:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":44:12)
#loc32 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":44:5)
#loc33 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":45:17)
#loc34 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":45:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":46:13)
#loc36 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":152:1)
#loc38 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":157:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":154:5)
#loc40 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":154:14)
#loc41 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":155:5)
#loc42 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":155:14)
#loc43 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":156:5)
#loc44 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":156:13)
#loc45 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":54:1)
#loc46 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":54:29)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":64:19)
#loc50 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":78:27)
#loc51 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":59:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":82:1)
#loc55 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":60:1)
#loc56 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":61:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":81:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":61:8)
#loc59 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":62:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":67:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":64:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":68:9)
#loc64 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":80:9)
#loc65 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":68:12)
#loc66 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":68:19)
#loc67 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":68:17)
#loc68 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:13)
#loc70 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":79:13)
#loc71 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:17)
#loc72 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:25)
#loc73 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:33)
#loc74 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:34)
#loc75 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":71:22)
#loc76 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":72:13)
#loc77 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":75:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":77:13)
#loc79 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":73:17)
#loc80 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":73:37)
#loc81 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":73:30)
#loc82 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":74:30)
#loc83 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":74:17)
#loc84 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":78:17)
#loc85 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":84:1)
#loc86 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":93:1)
#loc87 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":86:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":86:9)
#loc89 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":88:12)
#loc90 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":88:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":90:12)
#loc92 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":90:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":91:22)
#loc94 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":91:5)
#loc95 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":92:18)
#loc96 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":92:5)
#loc97 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":55:1)
#loc98 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":55:29)
#loc99 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":96:1)
#loc100 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":114:1)
#loc103 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":97:1)
#loc104 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":98:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":113:5)
#loc106 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":98:8)
#loc107 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":99:5)
#loc108 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":100:9)
#loc109 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":112:9)
#loc110 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":100:12)
#loc111 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":100:19)
#loc112 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":100:17)
#loc113 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":101:9)
#loc114 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:13)
#loc115 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":111:13)
#loc116 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:17)
#loc117 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:25)
#loc118 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:33)
#loc119 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:34)
#loc120 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":103:22)
#loc121 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":104:13)
#loc122 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":107:13)
#loc123 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":109:13)
#loc124 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":105:17)
#loc125 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":105:37)
#loc126 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":105:30)
#loc127 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":106:30)
#loc128 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":106:17)
#loc129 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":110:27)
#loc130 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":110:17)
#loc131 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":116:1)
#loc132 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":125:1)
#loc133 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":118:5)
#loc134 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":118:9)
#loc135 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":120:12)
#loc136 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":120:5)
#loc137 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":122:12)
#loc138 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":122:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":123:22)
#loc140 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":123:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":124:18)
#loc142 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":124:5)
#loc143 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":56:1)
#loc144 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":56:28)
#loc145 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":128:1)
#loc146 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":139:1)
#loc149 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":129:1)
#loc150 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":130:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":138:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":130:8)
#loc153 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":131:5)
#loc154 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":132:9)
#loc155 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":137:9)
#loc156 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":132:12)
#loc157 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":132:19)
#loc158 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":132:17)
#loc159 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":133:9)
#loc160 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":135:13)
#loc161 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":135:33)
#loc162 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":135:26)
#loc163 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":136:26)
#loc164 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":136:13)
#loc165 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":141:1)
#loc166 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":150:1)
#loc167 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":143:5)
#loc168 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":143:9)
#loc169 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":145:12)
#loc170 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":145:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":147:12)
#loc172 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":147:5)
#loc173 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":148:21)
#loc174 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":148:5)
#loc175 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":149:17)
#loc176 = loc("CWE190_Integer_Overflow__int_max_multiply_21.c":149:5)
#loc177 = loc(fused[#loc1, #loc2])
#loc178 = loc(fused[#loc3, #loc4])
#loc179 = loc(fused[#loc5, #loc6])
#loc181 = loc(fused[#loc10, #loc11])
#loc182 = loc(fused[#loc13, #loc11])
#loc183 = loc(fused[#loc14, #loc15])
#loc184 = loc(fused[#loc16, #loc17])
#loc185 = loc(fused[#loc19, #loc15])
#loc186 = loc(fused[#loc20, #loc21])
#loc187 = loc(fused[#loc25, #loc26])
#loc188 = loc(fused[#loc27, #loc28])
#loc189 = loc(fused[#loc30, #loc29])
#loc190 = loc(fused[#loc32, #loc31])
#loc191 = loc(fused[#loc34, #loc33])
#loc192 = loc(fused[#loc37, #loc38])
#loc193 = loc(fused[#loc39, #loc40])
#loc194 = loc(fused[#loc41, #loc42])
#loc195 = loc(fused[#loc43, #loc44])
#loc196 = loc(fused[#loc45, #loc46])
#loc197 = loc(fused[#loc47, #loc48])
#loc198 = loc(fused[#loc51, #loc52])
#loc200 = loc(fused[#loc56, #loc57])
#loc201 = loc(fused[#loc59, #loc60, #loc61, #loc57])
#loc202 = loc(fused[#loc63, #loc64])
#loc203 = loc(fused[#loc65, #loc66])
#loc204 = loc(fused[#loc68, #loc64])
#loc205 = loc(fused[#loc69, #loc70])
#loc206 = loc(fused[#loc72, #loc73])
#loc207 = loc(fused[#loc71, #loc74])
#loc208 = loc(fused[#loc76, #loc77, #loc78, #loc70])
#loc209 = loc(fused[#loc79, #loc80])
#loc210 = loc(fused[#loc85, #loc86])
#loc211 = loc(fused[#loc87, #loc88])
#loc212 = loc(fused[#loc90, #loc89])
#loc213 = loc(fused[#loc92, #loc91])
#loc214 = loc(fused[#loc94, #loc93])
#loc215 = loc(fused[#loc97, #loc98])
#loc216 = loc(fused[#loc99, #loc100])
#loc218 = loc(fused[#loc104, #loc105])
#loc219 = loc(fused[#loc107, #loc105])
#loc220 = loc(fused[#loc108, #loc109])
#loc221 = loc(fused[#loc110, #loc111])
#loc222 = loc(fused[#loc113, #loc109])
#loc223 = loc(fused[#loc114, #loc115])
#loc224 = loc(fused[#loc117, #loc118])
#loc225 = loc(fused[#loc116, #loc119])
#loc226 = loc(fused[#loc121, #loc122, #loc123, #loc115])
#loc227 = loc(fused[#loc124, #loc125])
#loc228 = loc(fused[#loc131, #loc132])
#loc229 = loc(fused[#loc133, #loc134])
#loc230 = loc(fused[#loc136, #loc135])
#loc231 = loc(fused[#loc138, #loc137])
#loc232 = loc(fused[#loc140, #loc139])
#loc233 = loc(fused[#loc143, #loc144])
#loc234 = loc(fused[#loc145, #loc146])
#loc236 = loc(fused[#loc150, #loc151])
#loc237 = loc(fused[#loc153, #loc151])
#loc238 = loc(fused[#loc154, #loc155])
#loc239 = loc(fused[#loc156, #loc157])
#loc240 = loc(fused[#loc159, #loc155])
#loc241 = loc(fused[#loc160, #loc161])
#loc242 = loc(fused[#loc165, #loc166])
#loc243 = loc(fused[#loc167, #loc168])
#loc244 = loc(fused[#loc170, #loc169])
#loc245 = loc(fused[#loc172, #loc171])
#loc246 = loc(fused[#loc174, #loc173])
