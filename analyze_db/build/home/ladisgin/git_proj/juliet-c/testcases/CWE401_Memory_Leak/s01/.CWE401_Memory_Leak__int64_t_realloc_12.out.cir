!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc84 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":148:10)
#loc85 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":148:14)
#loc86 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":148:20)
#loc87 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":148:32)
#loc243 = loc(fused[#loc84, #loc85])
#loc244 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_realloc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc212)
  cir.func private @realloc(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc213)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc214)
  cir.func private @printLongLongLine(!s64i) loc(#loc215)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc216)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_realloc_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc15)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc219)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc19)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
      cir.if %5 {
        %6 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc24)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc25)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc25)
        %9 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc26)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc223)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc224)
        %13 = cir.call @realloc(%8, %12) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc225)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc226)
        cir.scope {
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc33)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc34)
          %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s64i>, !cir.bool loc(#loc228)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc37)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc38)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
          } loc(#loc229)
        } loc(#loc227)
        %15 = cir.const #cir.int<5> : !s64i loc(#loc39)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc40)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc41)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc42)
        cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc230)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc44)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !s32i), !cir.ptr<!s64i> loc(#loc45)
        %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc43)
        cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc46)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc47)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc47)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc47)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc47)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc47)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc47)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc47)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc231)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc49)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc50)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc51)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc52)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc232)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc53)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc54)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc55)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc53)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc56)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc234)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc234)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc59)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc59)
      cir.if %5 {
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc64)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc65)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc65)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc64)
      } loc(#loc235)
    } loc(#loc233)
    cir.return loc(#loc12)
  } loc(#loc217)
  cir.func no_proto @CWE401_Memory_Leak__int64_t_realloc_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc68)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc238)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    cir.return loc(#loc67)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc239)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc240)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc81)
  cir.func @main(%arg0: !s32i loc(fused[#loc84, #loc85]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc86, #loc87])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc243)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc244)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc88)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc89)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc90)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc90)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc91)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc78)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %8 = cir.get_global @CWE401_Memory_Leak__int64_t_realloc_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE401_Memory_Leak__int64_t_realloc_12_good() : () -> () loc(#loc93)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc80)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %13 = cir.get_global @CWE401_Memory_Leak__int64_t_realloc_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE401_Memory_Leak__int64_t_realloc_12_bad() : () -> () loc(#loc97)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc81)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc247)
    cir.return %17 : !s32i loc(#loc247)
  } loc(#loc242)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc106)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc250)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc252)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc252)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc110)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc110)
      cir.if %5 {
        %6 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc115)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc116)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc116)
        %9 = cir.const #cir.int<100> : !s32i loc(#loc117)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc117)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc254)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc255)
        %13 = cir.call @realloc(%8, %12) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc115)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc256)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc257)
        cir.scope {
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc124)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc125)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc125)
          %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s64i>, !cir.bool loc(#loc259)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc127)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc128)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc129)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc127)
          } loc(#loc260)
        } loc(#loc258)
        %15 = cir.const #cir.int<5> : !s64i loc(#loc130)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc131)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc132)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc133)
        cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc261)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc134)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc135)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !s32i), !cir.ptr<!s64i> loc(#loc136)
        %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc134)
        cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc137)
      } else {
        %6 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc138)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc139)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc139)
        %9 = cir.const #cir.int<100> : !s32i loc(#loc140)
        %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc140)
        %11 = cir.const #cir.int<8> : !u64i loc(#loc262)
        %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc263)
        %13 = cir.call @realloc(%8, %12) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
        %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc264)
        cir.store %14, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc265)
        cir.scope {
          %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc147)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc148)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc148)
          %26 = cir.cmp(eq, %23, %25) : !cir.ptr<!s64i>, !cir.bool loc(#loc267)
          cir.if %26 {
            %27 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
            %28 = cir.const #cir.int<1> : !s32i loc(#loc151)
            %29 = cir.unary(minus, %28) : !s32i, !s32i loc(#loc152)
            cir.call @exit(%29) : (!s32i) -> () extra(#fn_attr) loc(#loc150)
          } loc(#loc268)
        } loc(#loc266)
        %15 = cir.const #cir.int<5> : !s64i loc(#loc153)
        %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc154)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc155)
        %18 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %17 : !s32i), !cir.ptr<!s64i> loc(#loc156)
        cir.store %15, %18 : !s64i, !cir.ptr<!s64i> loc(#loc269)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc157)
        %20 = cir.const #cir.int<0> : !s32i loc(#loc158)
        %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !s32i), !cir.ptr<!s64i> loc(#loc159)
        %22 = cir.load %21 : !cir.ptr<!s64i>, !s64i loc(#loc157)
        cir.call @printLongLongLine(%22) : (!s64i) -> () loc(#loc160)
      } loc(#loc253)
    } loc(#loc251)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc271)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc271)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc163)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc163)
      cir.if %5 {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc168)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc169)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc169)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc168)
      } else {
        %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc170)
        %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc171)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc171)
        cir.call @free(%8) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc170)
      } loc(#loc272)
    } loc(#loc270)
    cir.return loc(#loc103)
  } loc(#loc248)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc274)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc176)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc275)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc277)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc277)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc180)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc180)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc185)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc185)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc185)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc185)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc185)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc185)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc185)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc279)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc187)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc188)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc189)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc190)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc280)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc191)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc192)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc193)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc191)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc194)
      } else {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc195)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc195)
        %8 = cir.const #cir.int<8> : !u64i loc(#loc195)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc195)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc195)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc195)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc195)
        cir.store %12, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc281)
        %13 = cir.const #cir.int<5> : !s64i loc(#loc197)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc198)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc199)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s64i>, %15 : !s32i), !cir.ptr<!s64i> loc(#loc200)
        cir.store %13, %16 : !s64i, !cir.ptr<!s64i> loc(#loc282)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc201)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc202)
        %19 = cir.ptr_stride(%17 : !cir.ptr<!s64i>, %18 : !s32i), !cir.ptr<!s64i> loc(#loc203)
        %20 = cir.load %19 : !cir.ptr<!s64i>, !s64i loc(#loc201)
        cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc204)
      } loc(#loc278)
    } loc(#loc276)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc284)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc284)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc207)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc207)
      cir.if %5 {
      } else {
      } loc(#loc285)
    } loc(#loc283)
    cir.return loc(#loc173)
  } loc(#loc273)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int64_t_realloc_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":683:1)
#loc4 = loc("/usr/include/stdlib.h":684:14)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":24:1)
#loc12 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":55:1)
#loc13 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":26:5)
#loc14 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":26:15)
#loc15 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":27:12)
#loc16 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":27:5)
#loc17 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":28:5)
#loc18 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":44:5)
#loc19 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":28:8)
#loc20 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":28:33)
#loc21 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":29:5)
#loc22 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":36:5)
#loc23 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":38:5)
#loc24 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:27)
#loc25 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:35)
#loc26 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:41)
#loc27 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:45)
#loc28 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:59)
#loc29 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:60)
#loc30 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":31:9)
#loc31 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:9)
#loc32 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:37)
#loc33 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:13)
#loc34 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:21)
#loc35 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:27)
#loc36 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:28)
#loc37 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:34)
#loc38 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":32:33)
#loc39 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":34:19)
#loc40 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":34:9)
#loc41 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":34:14)
#loc42 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":34:15)
#loc43 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":35:27)
#loc44 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":35:32)
#loc45 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":35:33)
#loc46 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":35:9)
#loc47 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":40:27)
#loc48 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":40:9)
#loc49 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":42:19)
#loc50 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":42:9)
#loc51 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":42:14)
#loc52 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":42:15)
#loc53 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":43:27)
#loc54 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":43:32)
#loc55 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":43:33)
#loc56 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":43:9)
#loc57 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":45:5)
#loc58 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":54:5)
#loc59 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":45:8)
#loc60 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":45:33)
#loc61 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":46:5)
#loc62 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":49:5)
#loc63 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":51:5)
#loc64 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":53:9)
#loc65 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":53:14)
#loc66 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":133:1)
#loc67 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":137:1)
#loc68 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":135:5)
#loc69 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":135:13)
#loc70 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":136:5)
#loc71 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":136:13)
#loc72 = loc("/usr/include/stdlib.h":575:1)
#loc73 = loc("/usr/include/stdlib.h":575:41)
#loc74 = loc("/usr/include/time.h":76:1)
#loc75 = loc("/usr/include/time.h":76:38)
#loc76 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc77 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc78 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":153:15)
#loc79 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":155:15)
#loc80 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":158:15)
#loc81 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":160:15)
#loc82 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":148:1)
#loc83 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":163:1)
#loc88 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":149:1)
#loc89 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":151:27)
#loc90 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":151:22)
#loc91 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":151:5)
#loc92 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":153:5)
#loc93 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":154:5)
#loc94 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":154:49)
#loc95 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":155:5)
#loc96 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":158:5)
#loc97 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":159:5)
#loc98 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":159:48)
#loc99 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":160:5)
#loc100 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":162:12)
#loc101 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":162:5)
#loc102 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":64:1)
#loc103 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":96:1)
#loc104 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":66:5)
#loc105 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":66:15)
#loc106 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":67:12)
#loc107 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":67:5)
#loc108 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":68:5)
#loc109 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":85:5)
#loc110 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":68:8)
#loc111 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":68:33)
#loc112 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":69:5)
#loc113 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":76:5)
#loc114 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":78:5)
#loc115 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:27)
#loc116 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:35)
#loc117 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:41)
#loc118 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:45)
#loc119 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:59)
#loc120 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:60)
#loc121 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":71:9)
#loc122 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:9)
#loc123 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:37)
#loc124 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:13)
#loc125 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:21)
#loc126 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:27)
#loc127 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:28)
#loc128 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:34)
#loc129 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":72:33)
#loc130 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":74:19)
#loc131 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":74:9)
#loc132 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":74:14)
#loc133 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":74:15)
#loc134 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":75:27)
#loc135 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":75:32)
#loc136 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":75:33)
#loc137 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":75:9)
#loc138 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:27)
#loc139 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:35)
#loc140 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:41)
#loc141 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:45)
#loc142 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:59)
#loc143 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:60)
#loc144 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":80:9)
#loc145 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:9)
#loc146 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:37)
#loc147 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:13)
#loc148 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:21)
#loc149 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:27)
#loc150 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:28)
#loc151 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:34)
#loc152 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":81:33)
#loc153 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":83:19)
#loc154 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":83:9)
#loc155 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":83:14)
#loc156 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":83:15)
#loc157 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":84:27)
#loc158 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":84:32)
#loc159 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":84:33)
#loc160 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":84:9)
#loc161 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":86:5)
#loc162 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":95:5)
#loc163 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":86:8)
#loc164 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":86:33)
#loc165 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":87:5)
#loc166 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":90:5)
#loc167 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":92:5)
#loc168 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":89:9)
#loc169 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":89:14)
#loc170 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":94:9)
#loc171 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":94:14)
#loc172 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":101:1)
#loc173 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":131:1)
#loc174 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":103:5)
#loc175 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":103:15)
#loc176 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":104:12)
#loc177 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":104:5)
#loc178 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":105:5)
#loc179 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":120:5)
#loc180 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":105:8)
#loc181 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":105:33)
#loc182 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":106:5)
#loc183 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":112:5)
#loc184 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":114:5)
#loc185 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":108:27)
#loc186 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":108:9)
#loc187 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":110:19)
#loc188 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":110:9)
#loc189 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":110:14)
#loc190 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":110:15)
#loc191 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":111:27)
#loc192 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":111:32)
#loc193 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":111:33)
#loc194 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":111:9)
#loc195 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":116:27)
#loc196 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":116:9)
#loc197 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":118:19)
#loc198 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":118:9)
#loc199 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":118:14)
#loc200 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":118:15)
#loc201 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":119:27)
#loc202 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":119:32)
#loc203 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":119:33)
#loc204 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":119:9)
#loc205 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":121:5)
#loc206 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":130:5)
#loc207 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":121:8)
#loc208 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":121:33)
#loc209 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":122:5)
#loc210 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":125:5)
#loc211 = loc("CWE401_Memory_Leak__int64_t_realloc_12.c":127:5)
#loc212 = loc(fused[#loc1, #loc2])
#loc213 = loc(fused[#loc3, #loc4])
#loc214 = loc(fused[#loc5, #loc6])
#loc215 = loc(fused[#loc7, #loc8])
#loc216 = loc(fused[#loc9, #loc10])
#loc217 = loc(fused[#loc11, #loc12])
#loc218 = loc(fused[#loc13, #loc14])
#loc219 = loc(fused[#loc16, #loc15])
#loc220 = loc(fused[#loc17, #loc18])
#loc221 = loc(fused[#loc19, #loc20])
#loc222 = loc(fused[#loc21, #loc22, #loc23, #loc18])
#loc223 = loc(fused[#loc27, #loc28])
#loc224 = loc(fused[#loc26, #loc28])
#loc225 = loc(fused[#loc24, #loc29])
#loc226 = loc(fused[#loc30, #loc29])
#loc227 = loc(fused[#loc31, #loc32])
#loc228 = loc(fused[#loc33, #loc34])
#loc229 = loc(fused[#loc35, #loc32])
#loc230 = loc(fused[#loc40, #loc39])
#loc231 = loc(fused[#loc48, #loc47])
#loc232 = loc(fused[#loc50, #loc49])
#loc233 = loc(fused[#loc57, #loc58])
#loc234 = loc(fused[#loc59, #loc60])
#loc235 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc236 = loc(fused[#loc66, #loc67])
#loc237 = loc(fused[#loc68, #loc69])
#loc238 = loc(fused[#loc70, #loc71])
#loc239 = loc(fused[#loc72, #loc73])
#loc240 = loc(fused[#loc74, #loc75])
#loc241 = loc(fused[#loc76, #loc77])
#loc242 = loc(fused[#loc82, #loc83])
#loc245 = loc(fused[#loc93, #loc94])
#loc246 = loc(fused[#loc97, #loc98])
#loc247 = loc(fused[#loc101, #loc100])
#loc248 = loc(fused[#loc102, #loc103])
#loc249 = loc(fused[#loc104, #loc105])
#loc250 = loc(fused[#loc107, #loc106])
#loc251 = loc(fused[#loc108, #loc109])
#loc252 = loc(fused[#loc110, #loc111])
#loc253 = loc(fused[#loc112, #loc113, #loc114, #loc109])
#loc254 = loc(fused[#loc118, #loc119])
#loc255 = loc(fused[#loc117, #loc119])
#loc256 = loc(fused[#loc115, #loc120])
#loc257 = loc(fused[#loc121, #loc120])
#loc258 = loc(fused[#loc122, #loc123])
#loc259 = loc(fused[#loc124, #loc125])
#loc260 = loc(fused[#loc126, #loc123])
#loc261 = loc(fused[#loc131, #loc130])
#loc262 = loc(fused[#loc141, #loc142])
#loc263 = loc(fused[#loc140, #loc142])
#loc264 = loc(fused[#loc138, #loc143])
#loc265 = loc(fused[#loc144, #loc143])
#loc266 = loc(fused[#loc145, #loc146])
#loc267 = loc(fused[#loc147, #loc148])
#loc268 = loc(fused[#loc149, #loc146])
#loc269 = loc(fused[#loc154, #loc153])
#loc270 = loc(fused[#loc161, #loc162])
#loc271 = loc(fused[#loc163, #loc164])
#loc272 = loc(fused[#loc165, #loc166, #loc167, #loc162])
#loc273 = loc(fused[#loc172, #loc173])
#loc274 = loc(fused[#loc174, #loc175])
#loc275 = loc(fused[#loc177, #loc176])
#loc276 = loc(fused[#loc178, #loc179])
#loc277 = loc(fused[#loc180, #loc181])
#loc278 = loc(fused[#loc182, #loc183, #loc184, #loc179])
#loc279 = loc(fused[#loc186, #loc185])
#loc280 = loc(fused[#loc188, #loc187])
#loc281 = loc(fused[#loc196, #loc195])
#loc282 = loc(fused[#loc198, #loc197])
#loc283 = loc(fused[#loc205, #loc206])
#loc284 = loc(fused[#loc207, #loc208])
#loc285 = loc(fused[#loc209, #loc210, #loc211, #loc206])
