!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc234)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc235)
  cir.func private  @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc236)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc237)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printIntLine(!s32i) loc(#loc238)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc242)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc241)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc242)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc22)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc245)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc247)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc247)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc247)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc35)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc36)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc36)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc36)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc36)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc36)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc36)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc36)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc36)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc235)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc38)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc39)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc39)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc249)
          %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc40)
          cir.if %27 {
            %28 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
            %29 = cir.call @atoi(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc45)
            cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc251)
          } else {
            %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
            %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
            cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc48)
          } loc(#loc250)
        } loc(#loc248)
      } loc(#loc246)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    } loc(#loc244)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc254)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc56)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc254)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc256)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc257)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc257)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc257)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc66)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc259)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc67)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc71)
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc73)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc73)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc261)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc76)
              cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc263)
              cir.for : cond {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc78)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc79)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc264)
                %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc80)
                cir.condition(%23) loc(#loc80)
              } body {
                cir.scope {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc82)
                  %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc83)
                  %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc83)
                  %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc83)
                  cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc84)
                } loc(#loc265)
                cir.yield loc(#loc75)
              } step {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc86)
                cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc266)
                cir.yield loc(#loc262)
              } loc(#loc262)
            } loc(#loc262)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc12)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc260)
        } loc(#loc258)
      } loc(#loc255)
    } loc(#loc253)
    cir.return loc(#loc14)
  } loc(#loc239)
  cir.func no_proto  @CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc268)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc90)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc269)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc92)
    cir.return loc(#loc89)
  } loc(#loc267)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc271)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc272)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc273)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc272)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc273)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc103)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc276)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc109)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc276)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc110)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc277)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc112)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    } loc(#loc275)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc280)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc119)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc280)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc282)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc283)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc283)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc283)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc285)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc130)
          cir.if %14 {
            %15 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %17 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc136)
            %18 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc136)
            cir.store %15, %18 : !s32i, !cir.ptr<!s32i> loc(#loc287)
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc139)
              cir.store %19, %8 : !s32i, !cir.ptr<!s32i> loc(#loc289)
              cir.for : cond {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                %21 = cir.const #cir.int<10> : !s32i loc(#loc142)
                %22 = cir.cmp(lt, %20, %21) : !s32i, !s32i loc(#loc290)
                %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc143)
                cir.condition(%23) loc(#loc143)
              } body {
                cir.scope {
                  %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                  %21 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc146)
                  %22 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc146)
                  %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc146)
                  cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc147)
                } loc(#loc291)
                cir.yield loc(#loc138)
              } step {
                %20 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc149)
                cir.store %21, %8 : !s32i, !cir.ptr<!s32i> loc(#loc292)
                cir.yield loc(#loc288)
              } loc(#loc288)
            } loc(#loc288)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc150)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc150)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc151)
          } loc(#loc286)
        } loc(#loc284)
      } loc(#loc281)
    } loc(#loc279)
    cir.return loc(#loc95)
  } loc(#loc270)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc152)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc294)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc295)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc296)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc295)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc296)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc161)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc162)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc299)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc167)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc168)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc299)
      cir.scope {
        %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc301)
        %11 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc301)
        cir.store %11, %10 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc301)
        cir.scope {
          %12 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc175)
          %13 = cir.const #cir.int<3> : !s32i loc(#loc176)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc176)
          %15 = cir.const #cir.int<4> : !u64i loc(#loc176)
          %16 = cir.binop(mul, %14, %15) : !u64i loc(#loc176)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc176)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc176)
          %19 = cir.binop(add, %16, %18) : !u64i loc(#loc176)
          %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc176)
          %21 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc235)
          %22 = cir.load %21 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc177)
          %23 = cir.call @fgets(%12, %20, %22) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc178)
          %24 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc179)
          %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc179)
          %26 = cir.cmp(ne, %23, %25) : !cir.ptr<!s8i>, !s32i loc(#loc303)
          %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc180)
          cir.if %27 {
            %28 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc184)
            %29 = cir.call @atoi(%28) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc185)
            cir.store %29, %5 : !s32i, !cir.ptr<!s32i> loc(#loc305)
          } else {
            %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc188)
            %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc188)
            cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc189)
          } loc(#loc304)
        } loc(#loc302)
      } loc(#loc300)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc190)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc191)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc306)
    } loc(#loc298)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc308)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc197)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc308)
      cir.scope {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc310)
        %9 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc311)
        %10 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc311)
        cir.store %10, %9 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc311)
        cir.scope {
          %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %12 = cir.const #cir.int<0> : !s32i loc(#loc207)
          %13 = cir.cmp(ge, %11, %12) : !s32i, !s32i loc(#loc313)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc208)
          %15 = cir.ternary(%14, true {
            %16 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc210)
            %17 = cir.const #cir.int<10> : !s32i loc(#loc211)
            %18 = cir.cmp(lt, %16, %17) : !s32i, !s32i loc(#loc314)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc213)
            %20 = cir.ternary(%19, true {
              %21 = cir.const #true loc(#loc209)
              cir.yield %21 : !cir.bool loc(#loc209)
            }, false {
              %21 = cir.const #false loc(#loc209)
              cir.yield %21 : !cir.bool loc(#loc209)
            }) : (!cir.bool) -> !cir.bool loc(#loc209)
            cir.yield %20 : !cir.bool loc(#loc209)
          }, false {
            %16 = cir.const #false loc(#loc209)
            cir.yield %16 : !cir.bool loc(#loc209)
          }) : (!cir.bool) -> !cir.bool loc(#loc209)
          cir.if %15 {
            %16 = cir.const #cir.int<1> : !s32i loc(#loc217)
            %17 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc218)
            %18 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc219)
            %19 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc219)
            cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc316)
            cir.scope {
              %20 = cir.const #cir.int<0> : !s32i loc(#loc222)
              cir.store %20, %8 : !s32i, !cir.ptr<!s32i> loc(#loc318)
              cir.for : cond {
                %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc224)
                %22 = cir.const #cir.int<10> : !s32i loc(#loc225)
                %23 = cir.cmp(lt, %21, %22) : !s32i, !s32i loc(#loc319)
                %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc226)
                cir.condition(%24) loc(#loc226)
              } body {
                cir.scope {
                  %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc228)
                  %22 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc229)
                  %23 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc229)
                  %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc229)
                  cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc230)
                } loc(#loc320)
                cir.yield loc(#loc221)
              } step {
                %21 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc232)
                cir.store %22, %8 : !s32i, !cir.ptr<!s32i> loc(#loc321)
                cir.yield loc(#loc317)
              } loc(#loc317)
            } loc(#loc317)
          } else {
            %16 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc152)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc152)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc233)
          } loc(#loc315)
        } loc(#loc312)
      } loc(#loc309)
    } loc(#loc307)
    cir.return loc(#loc154)
  } loc(#loc293)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":43:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":66:27)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":24:1)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":70:1)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":26:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":27:22)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":28:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":28:22)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":30:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":30:12)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":30:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":31:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":47:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":32:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":32:21)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":32:20)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":33:9)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":45:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":34:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":34:49)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":44:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:23)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:36)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:53)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:17)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:63)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":36:60)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":37:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":40:13)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":42:13)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":39:29)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":39:24)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":39:17)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":39:40)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":43:17)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":46:21)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":46:10)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":46:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":48:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":69:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":49:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":49:21)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":49:20)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":50:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":68:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":51:13)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":51:17)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":52:13)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":52:34)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":55:13)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":67:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":55:17)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":55:25)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":55:22)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":56:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":63:13)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":65:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":57:32)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":57:24)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":57:17)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:17)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":62:17)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:25)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:21)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:28)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:32)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:30)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":60:17)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":61:41)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":61:34)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":61:21)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:37)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":59:36)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":66:17)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":163:1)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":167:1)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":165:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":165:13)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":166:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":166:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":77:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":113:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":79:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":79:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":80:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":80:22)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":81:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":81:22)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":83:13)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":83:12)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":83:5)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":84:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":90:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":85:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":85:21)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":85:20)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":88:16)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":88:9)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":89:21)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":89:10)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":89:9)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":91:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":112:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":92:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":92:21)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":92:20)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":93:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":111:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":94:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":94:17)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":95:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":95:34)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":98:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":110:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":98:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":98:25)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":98:22)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":99:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":106:13)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":108:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":100:32)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":100:24)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":100:17)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":105:17)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:25)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:21)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:28)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:32)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:30)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":103:17)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":104:41)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":104:34)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":104:21)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:37)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":102:36)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":109:27)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":109:17)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":157:27)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":116:1)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":161:1)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":118:5)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":118:9)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":119:5)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":119:22)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":120:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":120:22)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":122:13)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":122:12)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":122:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":123:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":139:5)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":124:9)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":124:21)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":124:20)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":125:9)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":137:9)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":126:13)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":126:49)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:13)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":136:13)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:23)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:36)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:53)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:17)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:63)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":128:60)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":129:13)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":132:13)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":134:13)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":131:29)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":131:24)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":131:17)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":131:40)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":135:27)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":135:17)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":138:21)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":138:10)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":138:9)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":140:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":160:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":141:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":141:21)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":141:20)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":142:9)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":159:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":143:13)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":143:17)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":144:13)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":144:34)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:13)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":158:13)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:17)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:25)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:22)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:27)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:30)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:38)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:40)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":146:35)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":147:13)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":154:13)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":156:13)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":148:32)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":148:24)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":148:17)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:17)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":153:17)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:25)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:21)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:28)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:32)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:30)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":151:17)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":152:41)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":152:34)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":152:21)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:37)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":150:36)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_fgets_32.c":157:17)
#loc234 = loc(fused[#loc1, #loc2])
#loc235 = loc(fused[#loc3, #loc4])
#loc236 = loc(fused[#loc5, #loc6])
#loc237 = loc(fused[#loc7, #loc8])
#loc238 = loc(fused[#loc10, #loc11])
#loc239 = loc(fused[#loc13, #loc14])
#loc240 = loc(fused[#loc15, #loc16])
#loc241 = loc(fused[#loc17, #loc18])
#loc242 = loc(fused[#loc19, #loc20])
#loc243 = loc(fused[#loc23, #loc21])
#loc244 = loc(fused[#loc24, #loc25])
#loc245 = loc(fused[#loc26, #loc27])
#loc246 = loc(fused[#loc29, #loc30])
#loc247 = loc(fused[#loc31, #loc32])
#loc248 = loc(fused[#loc33, #loc34])
#loc249 = loc(fused[#loc38, #loc39])
#loc250 = loc(fused[#loc41, #loc42, #loc43, #loc34])
#loc251 = loc(fused[#loc46, #loc47])
#loc252 = loc(fused[#loc51, #loc49])
#loc253 = loc(fused[#loc52, #loc53])
#loc254 = loc(fused[#loc54, #loc55])
#loc255 = loc(fused[#loc57, #loc58])
#loc256 = loc(fused[#loc59, #loc60])
#loc257 = loc(fused[#loc61, #loc62])
#loc258 = loc(fused[#loc63, #loc64])
#loc259 = loc(fused[#loc65, #loc66])
#loc260 = loc(fused[#loc68, #loc69, #loc70, #loc64])
#loc261 = loc(fused[#loc73, #loc71])
#loc262 = loc(fused[#loc74, #loc75])
#loc263 = loc(fused[#loc77, #loc76])
#loc264 = loc(fused[#loc78, #loc79])
#loc265 = loc(fused[#loc81, #loc75])
#loc266 = loc(fused[#loc86, #loc85])
#loc267 = loc(fused[#loc88, #loc89])
#loc268 = loc(fused[#loc90, #loc91])
#loc269 = loc(fused[#loc92, #loc93])
#loc270 = loc(fused[#loc94, #loc95])
#loc271 = loc(fused[#loc96, #loc97])
#loc272 = loc(fused[#loc98, #loc99])
#loc273 = loc(fused[#loc100, #loc101])
#loc274 = loc(fused[#loc104, #loc102])
#loc275 = loc(fused[#loc105, #loc106])
#loc276 = loc(fused[#loc107, #loc108])
#loc277 = loc(fused[#loc111, #loc110])
#loc278 = loc(fused[#loc114, #loc112])
#loc279 = loc(fused[#loc115, #loc116])
#loc280 = loc(fused[#loc117, #loc118])
#loc281 = loc(fused[#loc120, #loc121])
#loc282 = loc(fused[#loc122, #loc123])
#loc283 = loc(fused[#loc124, #loc125])
#loc284 = loc(fused[#loc126, #loc127])
#loc285 = loc(fused[#loc128, #loc129])
#loc286 = loc(fused[#loc131, #loc132, #loc133, #loc127])
#loc287 = loc(fused[#loc136, #loc134])
#loc288 = loc(fused[#loc137, #loc138])
#loc289 = loc(fused[#loc140, #loc139])
#loc290 = loc(fused[#loc141, #loc142])
#loc291 = loc(fused[#loc144, #loc138])
#loc292 = loc(fused[#loc149, #loc148])
#loc293 = loc(fused[#loc153, #loc154])
#loc294 = loc(fused[#loc155, #loc156])
#loc295 = loc(fused[#loc157, #loc158])
#loc296 = loc(fused[#loc159, #loc160])
#loc297 = loc(fused[#loc163, #loc161])
#loc298 = loc(fused[#loc164, #loc165])
#loc299 = loc(fused[#loc166, #loc167])
#loc300 = loc(fused[#loc169, #loc170])
#loc301 = loc(fused[#loc171, #loc172])
#loc302 = loc(fused[#loc173, #loc174])
#loc303 = loc(fused[#loc178, #loc179])
#loc304 = loc(fused[#loc181, #loc182, #loc183, #loc174])
#loc305 = loc(fused[#loc186, #loc187])
#loc306 = loc(fused[#loc192, #loc190])
#loc307 = loc(fused[#loc193, #loc194])
#loc308 = loc(fused[#loc195, #loc196])
#loc309 = loc(fused[#loc198, #loc199])
#loc310 = loc(fused[#loc200, #loc201])
#loc311 = loc(fused[#loc202, #loc203])
#loc312 = loc(fused[#loc204, #loc205])
#loc313 = loc(fused[#loc206, #loc207])
#loc314 = loc(fused[#loc210, #loc212])
#loc315 = loc(fused[#loc214, #loc215, #loc216, #loc205])
#loc316 = loc(fused[#loc219, #loc217])
#loc317 = loc(fused[#loc220, #loc221])
#loc318 = loc(fused[#loc223, #loc222])
#loc319 = loc(fused[#loc224, #loc225])
#loc320 = loc(fused[#loc227, #loc221])
#loc321 = loc(fused[#loc232, #loc231])
