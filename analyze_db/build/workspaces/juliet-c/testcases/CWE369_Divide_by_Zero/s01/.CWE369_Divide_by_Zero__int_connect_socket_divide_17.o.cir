!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc311)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc312)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc313)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc314)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc315)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc316)
  cir.func private @close(!s32i) -> !s32i loc(#loc317)
  cir.func private @printIntLine(!s32i) loc(#loc318)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc320)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc321)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc322)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc26)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc323)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc30)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc325)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc33)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc326)
        cir.condition(%8) loc(#loc34)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc329)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc330)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc331)
            %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc332)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc43)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc43)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc331)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc50)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc51)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc52)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc53)
                  cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc335)
                  cir.scope {
                    %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc59)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc59)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc337)
                    cir.if %57 {
                      cir.break loc(#loc61)
                    } loc(#loc338)
                  } loc(#loc336)
                  %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc339)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc64)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc340)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc341)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc69)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc69)
                  %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc342)
                  %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
                  %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
                  %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc72)
                  %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc343)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc77)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc77)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc78)
                  %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc344)
                  cir.scope {
                    %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc84)
                    %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc346)
                    %56 = cir.const #cir.int<16> : !u64i loc(#loc347)
                    %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc347)
                    %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc89)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc90)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc90)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc348)
                    cir.if %61 {
                      cir.break loc(#loc92)
                    } loc(#loc349)
                  } loc(#loc345)
                  %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                  %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc94)
                  %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
                  %34 = cir.const #cir.int<3> : !s32i loc(#loc95)
                  %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc95)
                  %36 = cir.const #cir.int<4> : !u64i loc(#loc95)
                  %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc95)
                  %38 = cir.const #cir.int<2> : !s32i loc(#loc95)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc95)
                  %40 = cir.binop(add, %37, %39) : !u64i loc(#loc95)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc96)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc96)
                  %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc350)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc97)
                  %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc98)
                  %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc98)
                  cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc351)
                  cir.scope {
                    %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc104)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc104)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc353)
                    %58 = cir.ternary(%57, true {
                      %59 = cir.const #true loc(#loc105)
                      cir.yield %59 : !cir.bool loc(#loc105)
                    }, false {
                      %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc106)
                      %60 = cir.const #cir.int<0> : !s32i loc(#loc107)
                      %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc354)
                      %62 = cir.ternary(%61, true {
                        %63 = cir.const #true loc(#loc105)
                        cir.yield %63 : !cir.bool loc(#loc105)
                      }, false {
                        %63 = cir.const #false loc(#loc105)
                        cir.yield %63 : !cir.bool loc(#loc105)
                      }) : (!cir.bool) -> !cir.bool loc(#loc105)
                      cir.yield %62 : !cir.bool loc(#loc105)
                    }) : (!cir.bool) -> !cir.bool loc(#loc105)
                    cir.if %58 {
                      cir.break loc(#loc109)
                    } loc(#loc355)
                  } loc(#loc352)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc110)
                  %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc110)
                  %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc111)
                  %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc112)
                  %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc112)
                  cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc356)
                  %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc113)
                  %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc114)
                  cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc357)
                } loc(#loc334)
                cir.yield loc(#loc47)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc117)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc117)
                cir.condition(%13) loc(#loc117)
              } loc(#loc333)
            } loc(#loc333)
            cir.scope {
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc121)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc121)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc359)
              cir.if %15 {
                %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc123)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc124)
              } loc(#loc360)
            } loc(#loc358)
          } loc(#loc328)
        } loc(#loc327)
        cir.yield loc(#loc29)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc126)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc361)
        cir.yield loc(#loc324)
      } loc(#loc324)
    } loc(#loc324)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc129)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc363)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc132)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc364)
        cir.condition(%8) loc(#loc133)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc135)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc366)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc137)
        } loc(#loc365)
        cir.yield loc(#loc128)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc139)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc367)
        cir.yield loc(#loc362)
      } loc(#loc362)
    } loc(#loc362)
    cir.return loc(#loc19)
  } loc(#loc319)
  cir.func no_proto @CWE369_Divide_by_Zero__int_connect_socket_divide_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc369)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc142)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc370)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc144)
    cir.return loc(#loc141)
  } loc(#loc368)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc371)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc148)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc373)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc374)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc375)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc157)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc376)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc161)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc378)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc379)
        cir.condition(%8) loc(#loc165)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc382)
            %7 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc383)
            %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc384)
            %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc385)
            %10 = cir.const #cir.int<1> : !s32i loc(#loc174)
            %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc174)
            cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc384)
            cir.scope {
              cir.do {
                cir.scope {
                  %12 = cir.const #cir.int<2> : !s32i loc(#loc181)
                  %13 = cir.const #cir.int<1> : !s32i loc(#loc182)
                  %14 = cir.const #cir.int<6> : !s32i loc(#loc183)
                  %15 = cir.call @socket(%12, %13, %14) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc184)
                  cir.store %15, %8 : !s32i, !cir.ptr<!s32i> loc(#loc388)
                  cir.scope {
                    %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc189)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc190)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc190)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc390)
                    cir.if %57 {
                      cir.break loc(#loc192)
                    } loc(#loc391)
                  } loc(#loc389)
                  %16 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc392)
                  %17 = cir.const #cir.int<0> : !s32i loc(#loc195)
                  %18 = cir.const #cir.int<16> : !u64i loc(#loc393)
                  cir.libc.memset %18 bytes from %16 set to %17 : !cir.ptr<!void>, !s32i, !u64i loc(#loc394)
                  %19 = cir.const #cir.int<2> : !s32i loc(#loc200)
                  %20 = cir.cast(integral, %19 : !s32i), !u16i loc(#loc200)
                  %21 = cir.get_member %7[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
                  cir.store %20, %21 : !u16i, !cir.ptr<!u16i> loc(#loc395)
                  %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc202)
                  %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc202)
                  %24 = cir.call @inet_addr(%23) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc203)
                  %25 = cir.get_member %7[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc73)
                  %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc74)
                  cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc396)
                  %27 = cir.const #cir.int<27015> : !s32i loc(#loc206)
                  %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc206)
                  %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc207)
                  %30 = cir.get_member %7[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
                  cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc397)
                  cir.scope {
                    %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc212)
                    %55 = cir.cast(bitcast, %7 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc399)
                    %56 = cir.const #cir.int<16> : !u64i loc(#loc400)
                    %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc400)
                    %58 = cir.call @connect(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc217)
                    %59 = cir.const #cir.int<1> : !s32i loc(#loc218)
                    %60 = cir.unary(minus, %59) nsw : !s32i, !s32i loc(#loc218)
                    %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc401)
                    cir.if %61 {
                      cir.break loc(#loc220)
                    } loc(#loc402)
                  } loc(#loc398)
                  %31 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc221)
                  %32 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc222)
                  %33 = cir.cast(bitcast, %32 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc222)
                  %34 = cir.const #cir.int<3> : !s32i loc(#loc223)
                  %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc223)
                  %36 = cir.const #cir.int<4> : !u64i loc(#loc223)
                  %37 = cir.binop(mul, %35, %36) : !u64i loc(#loc223)
                  %38 = cir.const #cir.int<2> : !s32i loc(#loc223)
                  %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc223)
                  %40 = cir.binop(add, %37, %39) : !u64i loc(#loc223)
                  %41 = cir.const #cir.int<1> : !s32i loc(#loc224)
                  %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc224)
                  %43 = cir.binop(sub, %40, %42) : !u64i loc(#loc403)
                  %44 = cir.const #cir.int<0> : !s32i loc(#loc225)
                  %45 = cir.call @recv(%31, %33, %43, %44) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc226)
                  %46 = cir.cast(integral, %45 : !s64i), !s32i loc(#loc226)
                  cir.store %46, %6 : !s32i, !cir.ptr<!s32i> loc(#loc404)
                  cir.scope {
                    %54 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc231)
                    %55 = cir.const #cir.int<1> : !s32i loc(#loc232)
                    %56 = cir.unary(minus, %55) nsw : !s32i, !s32i loc(#loc232)
                    %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc406)
                    %58 = cir.ternary(%57, true {
                      %59 = cir.const #true loc(#loc233)
                      cir.yield %59 : !cir.bool loc(#loc233)
                    }, false {
                      %59 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc234)
                      %60 = cir.const #cir.int<0> : !s32i loc(#loc235)
                      %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc407)
                      %62 = cir.ternary(%61, true {
                        %63 = cir.const #true loc(#loc233)
                        cir.yield %63 : !cir.bool loc(#loc233)
                      }, false {
                        %63 = cir.const #false loc(#loc233)
                        cir.yield %63 : !cir.bool loc(#loc233)
                      }) : (!cir.bool) -> !cir.bool loc(#loc233)
                      cir.yield %62 : !cir.bool loc(#loc233)
                    }) : (!cir.bool) -> !cir.bool loc(#loc233)
                    cir.if %58 {
                      cir.break loc(#loc237)
                    } loc(#loc408)
                  } loc(#loc405)
                  %47 = cir.const #cir.int<0> : !s32i loc(#loc238)
                  %48 = cir.cast(integral, %47 : !s32i), !s8i loc(#loc238)
                  %49 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc239)
                  %50 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc240)
                  %51 = cir.ptr_stride(%50 : !cir.ptr<!s8i>, %49 : !s32i), !cir.ptr<!s8i> loc(#loc240)
                  cir.store %48, %51 : !s8i, !cir.ptr<!s8i> loc(#loc409)
                  %52 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc241)
                  %53 = cir.call @atoi(%52) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc242)
                  cir.store %53, %2 : !s32i, !cir.ptr<!s32i> loc(#loc410)
                } loc(#loc387)
                cir.yield loc(#loc178)
              } while {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc245)
                %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc245)
                cir.condition(%13) loc(#loc245)
              } loc(#loc386)
            } loc(#loc386)
            cir.scope {
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc248)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc249)
              %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc249)
              %15 = cir.cmp(ne, %12, %14) : !s32i, !cir.bool loc(#loc412)
              cir.if %15 {
                %16 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                %17 = cir.call @close(%16) : (!s32i) -> !s32i loc(#loc252)
              } loc(#loc413)
            } loc(#loc411)
          } loc(#loc381)
        } loc(#loc380)
        cir.yield loc(#loc160)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc253)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc254)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc414)
        cir.yield loc(#loc377)
      } loc(#loc377)
    } loc(#loc377)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc257)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc416)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc259)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc260)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc417)
        cir.condition(%8) loc(#loc261)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc265)
            %7 = cir.const #cir.int<0> : !s32i loc(#loc266)
            %8 = cir.cmp(ne, %6, %7) : !s32i, !cir.bool loc(#loc420)
            cir.if %8 {
              %9 = cir.const #cir.int<100> : !s32i loc(#loc270)
              %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc271)
              %11 = cir.binop(div, %9, %10) : !s32i loc(#loc422)
              cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc272)
            } else {
              %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc148)
              %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc148)
              cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc273)
            } loc(#loc421)
          } loc(#loc419)
        } loc(#loc418)
        cir.yield loc(#loc256)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc275)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc423)
        cir.yield loc(#loc415)
      } loc(#loc415)
    } loc(#loc415)
    cir.return loc(#loc150)
  } loc(#loc372)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc425)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc426)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc427)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc283)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc284)
    cir.store %4, %2 : !s32i, !cir.ptr<!s32i> loc(#loc428)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc288)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc430)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc290)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc291)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc431)
        cir.condition(%8) loc(#loc292)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<7> : !s32i loc(#loc294)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc433)
        } loc(#loc432)
        cir.yield loc(#loc287)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc296)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc297)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc434)
        cir.yield loc(#loc429)
      } loc(#loc429)
    } loc(#loc429)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc300)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc436)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc302)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc303)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc437)
        cir.condition(%8) loc(#loc304)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<100> : !s32i loc(#loc306)
          %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc307)
          %8 = cir.binop(div, %6, %7) : !s32i loc(#loc439)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc308)
        } loc(#loc438)
        cir.yield loc(#loc299)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc309)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc310)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc440)
        cir.yield loc(#loc435)
      } loc(#loc435)
    } loc(#loc435)
    cir.return loc(#loc277)
  } loc(#loc424)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":78:53)
#loc6 = loc("/usr/include/netinet/in.h":402:1)
#loc7 = loc("/usr/include/netinet/in.h":403:40)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc18 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":44:1)
#loc19 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":114:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":46:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":46:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":46:11)
#loc23 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":47:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":47:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":49:13)
#loc26 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":49:12)
#loc27 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":49:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":108:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:16)
#loc33 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:20)
#loc34 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:18)
#loc35 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":51:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":52:9)
#loc37 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":107:9)
#loc38 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":57:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":57:17)
#loc40 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":58:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":58:32)
#loc42 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":59:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":59:36)
#loc44 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":60:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":60:45)
#loc46 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":61:13)
#loc47 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":96:21)
#loc48 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":62:13)
#loc49 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":95:13)
#loc50 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:40)
#loc51 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:49)
#loc52 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:62)
#loc53 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:33)
#loc54 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":71:73)
#loc56 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":72:17)
#loc57 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":75:17)
#loc58 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":72:21)
#loc59 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":72:38)
#loc60 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":73:17)
#loc61 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":74:21)
#loc62 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:24)
#loc63 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:25)
#loc64 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:34)
#loc65 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:37)
#loc66 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:51)
#loc67 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:17)
#loc68 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":76:52)
#loc69 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":77:38)
#loc70 = loc("/usr/include/netinet/in.h":249:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":77:17)
#loc72 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":78:43)
#loc73 = loc("/usr/include/netinet/in.h":251:20)
#loc74 = loc("/usr/include/netinet/in.h":33:15)
#loc75 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":78:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":78:63)
#loc77 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":79:42)
#loc78 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":79:36)
#loc79 = loc("/usr/include/netinet/in.h":250:15)
#loc80 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":79:17)
#loc81 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":79:50)
#loc82 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:17)
#loc83 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":83:17)
#loc84 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:29)
#loc85 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:62)
#loc86 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:63)
#loc87 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:72)
#loc88 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:86)
#loc89 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:21)
#loc90 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":80:92)
#loc91 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":81:17)
#loc92 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":82:21)
#loc93 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:35)
#loc94 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:50)
#loc95 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:63)
#loc96 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:81)
#loc97 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:84)
#loc98 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:30)
#loc99 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:17)
#loc100 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":86:85)
#loc101 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":90:17)
#loc103 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:21)
#loc104 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:35)
#loc105 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:48)
#loc106 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:51)
#loc107 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":87:65)
#loc108 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":88:17)
#loc109 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":89:21)
#loc110 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":92:43)
#loc111 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":92:29)
#loc112 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":92:17)
#loc113 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":94:29)
#loc114 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":94:24)
#loc115 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":94:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":94:40)
#loc117 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":96:20)
#loc118 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":97:13)
#loc119 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":100:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":97:17)
#loc121 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":97:34)
#loc122 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":98:13)
#loc123 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":99:30)
#loc124 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":99:17)
#loc125 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:24)
#loc126 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":50:23)
#loc127 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":113:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:13)
#loc130 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:9)
#loc131 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:16)
#loc132 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:20)
#loc133 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:18)
#loc134 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":110:5)
#loc135 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":112:22)
#loc136 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":112:28)
#loc137 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":112:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:24)
#loc139 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":109:23)
#loc140 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":219:1)
#loc141 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":223:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":221:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":221:13)
#loc144 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":222:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":222:13)
#loc146 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc147 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc148 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":195:23)
#loc149 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":121:1)
#loc150 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":198:1)
#loc151 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":123:5)
#loc152 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":123:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":123:11)
#loc154 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":124:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":124:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":126:13)
#loc157 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":126:12)
#loc158 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":126:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:5)
#loc160 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":185:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:13)
#loc162 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:9)
#loc163 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:16)
#loc164 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:20)
#loc165 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:18)
#loc166 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":128:5)
#loc167 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":129:9)
#loc168 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":184:9)
#loc169 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":134:13)
#loc170 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":134:17)
#loc171 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":135:13)
#loc172 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":135:32)
#loc173 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":136:13)
#loc174 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":136:36)
#loc175 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":137:13)
#loc176 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":137:45)
#loc177 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":138:13)
#loc178 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":173:21)
#loc179 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":139:13)
#loc180 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":172:13)
#loc181 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:40)
#loc182 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:49)
#loc183 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:62)
#loc184 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:33)
#loc185 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:17)
#loc186 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":148:73)
#loc187 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":149:17)
#loc188 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":152:17)
#loc189 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":149:21)
#loc190 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":149:38)
#loc191 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":150:17)
#loc192 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":151:21)
#loc193 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:24)
#loc194 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:25)
#loc195 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:34)
#loc196 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:37)
#loc197 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:51)
#loc198 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:17)
#loc199 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":153:52)
#loc200 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":154:38)
#loc201 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":154:17)
#loc202 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":155:53)
#loc203 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":155:43)
#loc204 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":155:17)
#loc205 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":155:63)
#loc206 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":156:42)
#loc207 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":156:36)
#loc208 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":156:17)
#loc209 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":156:50)
#loc210 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:17)
#loc211 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":160:17)
#loc212 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:29)
#loc213 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:62)
#loc214 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:63)
#loc215 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:72)
#loc216 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:86)
#loc217 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:21)
#loc218 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":157:92)
#loc219 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":158:17)
#loc220 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":159:21)
#loc221 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:35)
#loc222 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:50)
#loc223 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:63)
#loc224 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:81)
#loc225 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:84)
#loc226 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:30)
#loc227 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:17)
#loc228 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":163:85)
#loc229 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":167:17)
#loc231 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:21)
#loc232 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:35)
#loc233 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:48)
#loc234 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:51)
#loc235 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":164:65)
#loc236 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":165:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":166:21)
#loc238 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":169:43)
#loc239 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":169:29)
#loc240 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":169:17)
#loc241 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":171:29)
#loc242 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":171:24)
#loc243 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":171:17)
#loc244 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":171:40)
#loc245 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":173:20)
#loc246 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":174:13)
#loc247 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":177:13)
#loc248 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":174:17)
#loc249 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":174:34)
#loc250 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":175:13)
#loc251 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":176:30)
#loc252 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":176:17)
#loc253 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:24)
#loc254 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":127:23)
#loc255 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:5)
#loc256 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":197:5)
#loc257 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:13)
#loc258 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:9)
#loc259 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:16)
#loc260 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:20)
#loc261 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:18)
#loc262 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":187:5)
#loc263 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":189:9)
#loc264 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":196:9)
#loc265 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":189:13)
#loc266 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":189:21)
#loc267 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":190:9)
#loc268 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":192:9)
#loc269 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":194:9)
#loc270 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":191:26)
#loc271 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":191:32)
#loc272 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":191:13)
#loc273 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":195:13)
#loc274 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:24)
#loc275 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":186:23)
#loc276 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":201:1)
#loc277 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":217:1)
#loc278 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":203:5)
#loc279 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":203:9)
#loc280 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":203:11)
#loc281 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":204:5)
#loc282 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":204:9)
#loc283 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":206:13)
#loc284 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":206:12)
#loc285 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":206:5)
#loc286 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:5)
#loc287 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":211:5)
#loc288 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:13)
#loc289 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:9)
#loc290 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:16)
#loc291 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:20)
#loc292 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:18)
#loc293 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":208:5)
#loc294 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":210:16)
#loc295 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":210:9)
#loc296 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:24)
#loc297 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":207:23)
#loc298 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:5)
#loc299 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":216:5)
#loc300 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:13)
#loc301 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:9)
#loc302 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:16)
#loc303 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:20)
#loc304 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:18)
#loc305 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":213:5)
#loc306 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":215:22)
#loc307 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":215:28)
#loc308 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":215:9)
#loc309 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:24)
#loc310 = loc("CWE369_Divide_by_Zero__int_connect_socket_divide_17.c":212:23)
#loc311 = loc(fused[#loc1, #loc2])
#loc312 = loc(fused[#loc3, #loc4])
#loc313 = loc(fused[#loc6, #loc7])
#loc314 = loc(fused[#loc8, #loc9])
#loc315 = loc(fused[#loc10, #loc11])
#loc316 = loc(fused[#loc12, #loc13])
#loc317 = loc(fused[#loc14, #loc15])
#loc318 = loc(fused[#loc16, #loc17])
#loc319 = loc(fused[#loc18, #loc19])
#loc320 = loc(fused[#loc20, #loc21])
#loc321 = loc(fused[#loc20, #loc22])
#loc322 = loc(fused[#loc23, #loc24])
#loc323 = loc(fused[#loc27, #loc25])
#loc324 = loc(fused[#loc28, #loc29])
#loc325 = loc(fused[#loc31, #loc30])
#loc326 = loc(fused[#loc32, #loc33])
#loc327 = loc(fused[#loc35, #loc29])
#loc328 = loc(fused[#loc36, #loc37])
#loc329 = loc(fused[#loc38, #loc39])
#loc330 = loc(fused[#loc40, #loc41])
#loc331 = loc(fused[#loc42, #loc43])
#loc332 = loc(fused[#loc44, #loc45])
#loc333 = loc(fused[#loc46, #loc47])
#loc334 = loc(fused[#loc48, #loc49])
#loc335 = loc(fused[#loc54, #loc55])
#loc336 = loc(fused[#loc56, #loc57])
#loc337 = loc(fused[#loc58, #loc59])
#loc338 = loc(fused[#loc60, #loc57])
#loc339 = loc(fused[#loc62, #loc63])
#loc340 = loc(fused[#loc65, #loc66])
#loc341 = loc(fused[#loc67, #loc68])
#loc342 = loc(fused[#loc71, #loc69])
#loc343 = loc(fused[#loc75, #loc76])
#loc344 = loc(fused[#loc80, #loc81])
#loc345 = loc(fused[#loc82, #loc83])
#loc346 = loc(fused[#loc85, #loc86])
#loc347 = loc(fused[#loc87, #loc88])
#loc348 = loc(fused[#loc89, #loc90])
#loc349 = loc(fused[#loc91, #loc83])
#loc350 = loc(fused[#loc95, #loc96])
#loc351 = loc(fused[#loc99, #loc100])
#loc352 = loc(fused[#loc101, #loc102])
#loc353 = loc(fused[#loc103, #loc104])
#loc354 = loc(fused[#loc106, #loc107])
#loc355 = loc(fused[#loc108, #loc102])
#loc356 = loc(fused[#loc112, #loc110])
#loc357 = loc(fused[#loc115, #loc116])
#loc358 = loc(fused[#loc118, #loc119])
#loc359 = loc(fused[#loc120, #loc121])
#loc360 = loc(fused[#loc122, #loc119])
#loc361 = loc(fused[#loc126, #loc125])
#loc362 = loc(fused[#loc127, #loc128])
#loc363 = loc(fused[#loc130, #loc129])
#loc364 = loc(fused[#loc131, #loc132])
#loc365 = loc(fused[#loc134, #loc128])
#loc366 = loc(fused[#loc135, #loc136])
#loc367 = loc(fused[#loc139, #loc138])
#loc368 = loc(fused[#loc140, #loc141])
#loc369 = loc(fused[#loc142, #loc143])
#loc370 = loc(fused[#loc144, #loc145])
#loc371 = loc(fused[#loc146, #loc147])
#loc372 = loc(fused[#loc149, #loc150])
#loc373 = loc(fused[#loc151, #loc152])
#loc374 = loc(fused[#loc151, #loc153])
#loc375 = loc(fused[#loc154, #loc155])
#loc376 = loc(fused[#loc158, #loc156])
#loc377 = loc(fused[#loc159, #loc160])
#loc378 = loc(fused[#loc162, #loc161])
#loc379 = loc(fused[#loc163, #loc164])
#loc380 = loc(fused[#loc166, #loc160])
#loc381 = loc(fused[#loc167, #loc168])
#loc382 = loc(fused[#loc169, #loc170])
#loc383 = loc(fused[#loc171, #loc172])
#loc384 = loc(fused[#loc173, #loc174])
#loc385 = loc(fused[#loc175, #loc176])
#loc386 = loc(fused[#loc177, #loc178])
#loc387 = loc(fused[#loc179, #loc180])
#loc388 = loc(fused[#loc185, #loc186])
#loc389 = loc(fused[#loc187, #loc188])
#loc390 = loc(fused[#loc189, #loc190])
#loc391 = loc(fused[#loc191, #loc188])
#loc392 = loc(fused[#loc193, #loc194])
#loc393 = loc(fused[#loc196, #loc197])
#loc394 = loc(fused[#loc198, #loc199])
#loc395 = loc(fused[#loc201, #loc200])
#loc396 = loc(fused[#loc204, #loc205])
#loc397 = loc(fused[#loc208, #loc209])
#loc398 = loc(fused[#loc210, #loc211])
#loc399 = loc(fused[#loc213, #loc214])
#loc400 = loc(fused[#loc215, #loc216])
#loc401 = loc(fused[#loc217, #loc218])
#loc402 = loc(fused[#loc219, #loc211])
#loc403 = loc(fused[#loc223, #loc224])
#loc404 = loc(fused[#loc227, #loc228])
#loc405 = loc(fused[#loc229, #loc230])
#loc406 = loc(fused[#loc231, #loc232])
#loc407 = loc(fused[#loc234, #loc235])
#loc408 = loc(fused[#loc236, #loc230])
#loc409 = loc(fused[#loc240, #loc238])
#loc410 = loc(fused[#loc243, #loc244])
#loc411 = loc(fused[#loc246, #loc247])
#loc412 = loc(fused[#loc248, #loc249])
#loc413 = loc(fused[#loc250, #loc247])
#loc414 = loc(fused[#loc254, #loc253])
#loc415 = loc(fused[#loc255, #loc256])
#loc416 = loc(fused[#loc258, #loc257])
#loc417 = loc(fused[#loc259, #loc260])
#loc418 = loc(fused[#loc262, #loc256])
#loc419 = loc(fused[#loc263, #loc264])
#loc420 = loc(fused[#loc265, #loc266])
#loc421 = loc(fused[#loc267, #loc268, #loc269, #loc264])
#loc422 = loc(fused[#loc270, #loc271])
#loc423 = loc(fused[#loc275, #loc274])
#loc424 = loc(fused[#loc276, #loc277])
#loc425 = loc(fused[#loc278, #loc279])
#loc426 = loc(fused[#loc278, #loc280])
#loc427 = loc(fused[#loc281, #loc282])
#loc428 = loc(fused[#loc285, #loc283])
#loc429 = loc(fused[#loc286, #loc287])
#loc430 = loc(fused[#loc289, #loc288])
#loc431 = loc(fused[#loc290, #loc291])
#loc432 = loc(fused[#loc293, #loc287])
#loc433 = loc(fused[#loc295, #loc294])
#loc434 = loc(fused[#loc297, #loc296])
#loc435 = loc(fused[#loc298, #loc299])
#loc436 = loc(fused[#loc301, #loc300])
#loc437 = loc(fused[#loc302, #loc303])
#loc438 = loc(fused[#loc305, #loc299])
#loc439 = loc(fused[#loc306, #loc307])
#loc440 = loc(fused[#loc310, #loc309])
