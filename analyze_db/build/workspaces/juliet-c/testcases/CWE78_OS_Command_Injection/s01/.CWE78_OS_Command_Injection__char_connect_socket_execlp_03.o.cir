!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B2.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc222)
  cir.global "private" constant cir_private @__const.goodG2B1.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc223)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_03_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc224)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc225)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc227)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc13)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc228)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc229)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc230)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc231)
  cir.func private @close(!s32i) -> !s32i loc(#loc232)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc26)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc27)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc235)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc224)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_03_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc224)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc224)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc32)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc236)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc36)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc37)
      %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc238)
      cir.if %15 {
        cir.scope {
          %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc241)
          %17 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc242)
          %18 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc243)
          %19 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc244)
          %20 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc245)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc48)
          cir.store %22, %19 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          %23 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc51)
          %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
          %25 = cir.call @strlen(%24) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc51)
          cir.store %25, %20 : !u64i, !cir.ptr<!u64i> loc(#loc245)
          cir.scope {
            cir.do {
              cir.scope {
                %26 = cir.const #cir.int<2> : !s32i loc(#loc57)
                %27 = cir.const #cir.int<1> : !s32i loc(#loc58)
                %28 = cir.const #cir.int<6> : !s32i loc(#loc59)
                %29 = cir.call @socket(%26, %27, %28) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc60)
                cir.store %29, %19 : !s32i, !cir.ptr<!s32i> loc(#loc248)
                cir.scope {
                  %80 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                  %81 = cir.const #cir.int<1> : !s32i loc(#loc66)
                  %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc66)
                  %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc250)
                  cir.if %83 {
                    cir.break loc(#loc68)
                  } loc(#loc251)
                } loc(#loc249)
                %30 = cir.cast(bitcast, %17 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc252)
                %31 = cir.const #cir.int<0> : !s32i loc(#loc71)
                %32 = cir.const #cir.int<16> : !u64i loc(#loc253)
                cir.libc.memset %32 bytes from %30 set to %31 : !cir.ptr<!void>, !s32i, !u64i loc(#loc254)
                %33 = cir.const #cir.int<2> : !s32i loc(#loc76)
                %34 = cir.cast(integral, %33 : !s32i), !u16i loc(#loc76)
                %35 = cir.get_member %17[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc77)
                cir.store %34, %35 : !u16i, !cir.ptr<!u16i> loc(#loc255)
                %36 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc13)
                %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc13)
                %38 = cir.call @inet_addr(%37) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc79)
                %39 = cir.get_member %17[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc80)
                %40 = cir.get_member %39[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc81)
                cir.store %38, %40 : !u32i, !cir.ptr<!u32i> loc(#loc256)
                %41 = cir.const #cir.int<27015> : !s32i loc(#loc84)
                %42 = cir.cast(integral, %41 : !s32i), !u16i loc(#loc84)
                %43 = cir.call @htons(%42) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc85)
                %44 = cir.get_member %17[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
                cir.store %43, %44 : !u16i, !cir.ptr<!u16i> loc(#loc257)
                cir.scope {
                  %80 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc91)
                  %81 = cir.cast(bitcast, %17 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc259)
                  %82 = cir.const #cir.int<16> : !u64i loc(#loc260)
                  %83 = cir.cast(integral, %82 : !u64i), !u32i loc(#loc260)
                  %84 = cir.call @connect(%80, %81, %83) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc96)
                  %85 = cir.const #cir.int<1> : !s32i loc(#loc97)
                  %86 = cir.unary(minus, %85) nsw : !s32i, !s32i loc(#loc97)
                  %87 = cir.cmp(eq, %84, %86) : !s32i, !cir.bool loc(#loc261)
                  cir.if %87 {
                    cir.break loc(#loc99)
                  } loc(#loc262)
                } loc(#loc258)
                %45 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc100)
                %46 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
                %47 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc102)
                %48 = cir.ptr_stride(%46 : !cir.ptr<!s8i>, %47 : !u64i), !cir.ptr<!s8i> loc(#loc103)
                %49 = cir.cast(bitcast, %48 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc263)
                %50 = cir.const #cir.int<1> : !u64i loc(#loc264)
                %51 = cir.const #cir.int<100> : !s32i loc(#loc108)
                %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc108)
                %53 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc109)
                %54 = cir.binop(sub, %52, %53) : !u64i loc(#loc265)
                %55 = cir.const #cir.int<1> : !s32i loc(#loc110)
                %56 = cir.cast(integral, %55 : !s32i), !u64i loc(#loc110)
                %57 = cir.binop(sub, %54, %56) : !u64i loc(#loc266)
                %58 = cir.binop(mul, %50, %57) : !u64i loc(#loc267)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc112)
                %60 = cir.call @recv(%45, %49, %58, %59) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc113)
                %61 = cir.cast(integral, %60 : !s64i), !s32i loc(#loc113)
                cir.store %61, %16 : !s32i, !cir.ptr<!s32i> loc(#loc268)
                cir.scope {
                  %80 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc118)
                  %81 = cir.const #cir.int<1> : !s32i loc(#loc119)
                  %82 = cir.unary(minus, %81) nsw : !s32i, !s32i loc(#loc119)
                  %83 = cir.cmp(eq, %80, %82) : !s32i, !cir.bool loc(#loc270)
                  %84 = cir.ternary(%83, true {
                    %85 = cir.const #true loc(#loc120)
                    cir.yield %85 : !cir.bool loc(#loc120)
                  }, false {
                    %85 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc121)
                    %86 = cir.const #cir.int<0> : !s32i loc(#loc122)
                    %87 = cir.cmp(eq, %85, %86) : !s32i, !cir.bool loc(#loc271)
                    %88 = cir.ternary(%87, true {
                      %89 = cir.const #true loc(#loc120)
                      cir.yield %89 : !cir.bool loc(#loc120)
                    }, false {
                      %89 = cir.const #false loc(#loc120)
                      cir.yield %89 : !cir.bool loc(#loc120)
                    }) : (!cir.bool) -> !cir.bool loc(#loc120)
                    cir.yield %88 : !cir.bool loc(#loc120)
                  }) : (!cir.bool) -> !cir.bool loc(#loc120)
                  cir.if %84 {
                    cir.break loc(#loc124)
                  } loc(#loc272)
                } loc(#loc269)
                %62 = cir.const #cir.int<0> : !s32i loc(#loc125)
                %63 = cir.cast(integral, %62 : !s32i), !s8i loc(#loc125)
                %64 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
                %65 = cir.load %20 : !cir.ptr<!u64i>, !u64i loc(#loc127)
                %66 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc128)
                %67 = cir.cast(integral, %66 : !s32i), !u64i loc(#loc128)
                %68 = cir.const #cir.int<1> : !u64i loc(#loc273)
                %69 = cir.binop(div, %67, %68) : !u64i loc(#loc274)
                %70 = cir.binop(add, %65, %69) : !u64i loc(#loc275)
                %71 = cir.ptr_stride(%64 : !cir.ptr<!s8i>, %70 : !u64i), !cir.ptr<!s8i> loc(#loc131)
                cir.store %63, %71 : !s8i, !cir.ptr<!s8i> loc(#loc276)
                %72 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc132)
                %73 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
                %74 = cir.const #cir.int<13> : !s32i loc(#loc134)
                %75 = cir.call @strchr(%73, %74) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc132)
                cir.store %75, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc277)
                cir.scope {
                  %80 = cir.load %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
                  %81 = cir.cast(ptr_to_bool, %80 : !cir.ptr<!s8i>), !cir.bool loc(#loc139)
                  cir.if %81 {
                    %82 = cir.const #cir.int<0> : !s32i loc(#loc141)
                    %83 = cir.cast(integral, %82 : !s32i), !s8i loc(#loc141)
                    %84 = cir.load deref %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc142)
                    cir.store %83, %84 : !s8i, !cir.ptr<!s8i> loc(#loc280)
                  } loc(#loc279)
                } loc(#loc278)
                %76 = cir.get_global @strchr : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i>>> loc(#loc144)
                %77 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
                %78 = cir.const #cir.int<10> : !s32i loc(#loc146)
                %79 = cir.call @strchr(%77, %78) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> side_effect(pure) extra(#fn_attr) loc(#loc144)
                cir.store %79, %18 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc281)
                cir.scope {
                  %80 = cir.load %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
                  %81 = cir.cast(ptr_to_bool, %80 : !cir.ptr<!s8i>), !cir.bool loc(#loc151)
                  cir.if %81 {
                    %82 = cir.const #cir.int<0> : !s32i loc(#loc153)
                    %83 = cir.cast(integral, %82 : !s32i), !s8i loc(#loc153)
                    %84 = cir.load deref %18 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc154)
                    cir.store %83, %84 : !s8i, !cir.ptr<!s8i> loc(#loc284)
                  } loc(#loc283)
                } loc(#loc282)
              } loc(#loc247)
              cir.yield loc(#loc54)
            } while {
              %26 = cir.const #cir.int<0> : !s32i loc(#loc156)
              %27 = cir.cast(int_to_bool, %26 : !s32i), !cir.bool loc(#loc156)
              cir.condition(%27) loc(#loc156)
            } loc(#loc246)
          } loc(#loc246)
          cir.scope {
            %26 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc159)
            %27 = cir.const #cir.int<1> : !s32i loc(#loc160)
            %28 = cir.unary(minus, %27) nsw : !s32i, !s32i loc(#loc160)
            %29 = cir.cmp(ne, %26, %28) : !s32i, !cir.bool loc(#loc286)
            cir.if %29 {
              %30 = cir.load %19 : !cir.ptr<!s32i>, !s32i loc(#loc162)
              %31 = cir.call @close(%30) : (!s32i) -> !s32i loc(#loc163)
            } loc(#loc287)
          } loc(#loc285)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc237)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc26)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc26)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc164)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc164)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc27)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc27)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc165)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc167)
    cir.return loc(#loc29)
  } loc(#loc234)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc289)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc170)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc290)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc172)
    cir.return loc(#loc169)
  } loc(#loc288)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc176)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc292)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc179)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc294)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc223)
    %2 = cir.get_global @__const.goodG2B1.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc223)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc223)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc184)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc295)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc188)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc189)
      %15 = cir.cmp(ne, %13, %14) : !s32i, !cir.bool loc(#loc297)
      cir.if %15 {
        %16 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
        %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
        cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc193)
      } else {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc194)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc195)
        %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc179)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc179)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
      } loc(#loc298)
    } loc(#loc296)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc196)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc196)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc197)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc197)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc198)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc198)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc199)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc200)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc201)
    cir.return loc(#loc181)
  } loc(#loc293)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc300)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc222)
    %2 = cir.get_global @__const.goodG2B2.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc222)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc222)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc301)
    cir.scope {
      %13 = cir.const #cir.int<5> : !s32i loc(#loc210)
      %14 = cir.const #cir.int<5> : !s32i loc(#loc211)
      %15 = cir.cmp(eq, %13, %14) : !s32i, !cir.bool loc(#loc303)
      cir.if %15 {
        %16 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc213)
        %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc214)
        %18 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc215)
        %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc215)
        %20 = cir.call @strcat(%17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc213)
      } loc(#loc304)
    } loc(#loc302)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc216)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc216)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc217)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc217)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc218)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc218)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc219)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc220)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc221)
    cir.return loc(#loc203)
  } loc(#loc299)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":176:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":176:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":154:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":154:28)
#loc5 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":68:5)
#loc6 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":68:28)
#loc7 = loc("/usr/include/string.h":407:1)
#loc8 = loc("/usr/include/string.h":408:33)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc11 = loc("/usr/include/arpa/inet.h":34:1)
#loc12 = loc("/usr/include/arpa/inet.h":34:47)
#loc13 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":99:53)
#loc14 = loc("/usr/include/netinet/in.h":402:1)
#loc15 = loc("/usr/include/netinet/in.h":403:40)
#loc16 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:1)
#loc17 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":126:75)
#loc18 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc19 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc20 = loc("/usr/include/string.h":246:1)
#loc21 = loc("/usr/include/string.h":247:33)
#loc22 = loc("/usr/include/unistd.h":358:1)
#loc23 = loc("/usr/include/unistd.h":358:27)
#loc24 = loc("/usr/include/unistd.h":605:1)
#loc25 = loc("/usr/include/unistd.h":606:14)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:12)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:38)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":65:1)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":144:1)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":67:5)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":67:12)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":69:12)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":69:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":70:5)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":139:5)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":70:8)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":70:11)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":71:5)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":72:9)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":138:9)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":77:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":77:17)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":78:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":78:32)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":79:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":79:19)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":80:13)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":80:36)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":81:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":81:41)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":81:30)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":81:37)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":82:13)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":127:21)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":83:13)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":126:13)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:40)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:49)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:62)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:33)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":92:73)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":93:17)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":96:17)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":93:21)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":93:38)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":94:17)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":95:21)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:24)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:25)
#loc71 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:34)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:37)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:51)
#loc74 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:17)
#loc75 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":97:52)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":98:38)
#loc77 = loc("/usr/include/netinet/in.h":249:5)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":98:17)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":99:43)
#loc80 = loc("/usr/include/netinet/in.h":251:20)
#loc81 = loc("/usr/include/netinet/in.h":33:15)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":99:17)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":99:63)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":100:42)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":100:36)
#loc86 = loc("/usr/include/netinet/in.h":250:15)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":100:17)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":100:50)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:17)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":104:17)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:29)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:62)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:63)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:72)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:86)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:21)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":101:92)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":102:17)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":103:21)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:35)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:59)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:66)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:64)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:50)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:73)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:76)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:87)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:92)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:98)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:108)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:109)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:112)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:30)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:17)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":108:113)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:17)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":112:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:21)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:35)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:48)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:51)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":109:65)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":110:17)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":111:21)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:61)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:17)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:22)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:32)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:45)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:56)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":114:57)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":116:27)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":116:34)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":116:40)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":116:17)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":116:44)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":117:17)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":120:17)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":117:21)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":118:17)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":119:32)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":119:22)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":119:21)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":121:27)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":121:34)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":121:40)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":121:17)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":121:44)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":122:17)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":125:17)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":122:21)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":123:17)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":124:32)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":124:22)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":124:21)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":127:20)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":128:13)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":131:13)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":128:17)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":128:34)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":129:13)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":130:30)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":130:17)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:25)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:52)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:66)
#loc167 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":143:5)
#loc168 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":189:1)
#loc169 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":193:1)
#loc170 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":191:5)
#loc171 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":191:14)
#loc172 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":192:5)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":192:14)
#loc174 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc175 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":159:19)
#loc177 = loc("/usr/include/string.h":149:1)
#loc178 = loc("/usr/include/string.h":150:14)
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":164:22)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":151:1)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":170:1)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":153:5)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":153:12)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":155:12)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":155:5)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":156:5)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":165:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":156:8)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":156:11)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":157:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":160:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":162:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":159:9)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":164:9)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":164:16)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:12)
#loc197 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:25)
#loc198 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:38)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:52)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:66)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":169:5)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":173:1)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":187:1)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":175:5)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":175:12)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":177:12)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":177:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":178:5)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":182:5)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":178:8)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":178:11)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":179:5)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":181:9)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":181:16)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":181:22)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:12)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:25)
#loc218 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:38)
#loc219 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:52)
#loc220 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:66)
#loc221 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_03.c":186:5)
#loc222 = loc(fused[#loc1, #loc2])
#loc223 = loc(fused[#loc3, #loc4])
#loc224 = loc(fused[#loc5, #loc6])
#loc225 = loc(fused[#loc7, #loc8])
#loc226 = loc(fused[#loc9, #loc10])
#loc227 = loc(fused[#loc11, #loc12])
#loc228 = loc(fused[#loc14, #loc15])
#loc229 = loc(fused[#loc16, #loc17])
#loc230 = loc(fused[#loc18, #loc19])
#loc231 = loc(fused[#loc20, #loc21])
#loc232 = loc(fused[#loc22, #loc23])
#loc233 = loc(fused[#loc24, #loc25])
#loc234 = loc(fused[#loc28, #loc29])
#loc235 = loc(fused[#loc30, #loc31])
#loc236 = loc(fused[#loc33, #loc32])
#loc237 = loc(fused[#loc34, #loc35])
#loc238 = loc(fused[#loc36, #loc37])
#loc239 = loc(fused[#loc38, #loc35])
#loc240 = loc(fused[#loc39, #loc40])
#loc241 = loc(fused[#loc41, #loc42])
#loc242 = loc(fused[#loc43, #loc44])
#loc243 = loc(fused[#loc45, #loc46])
#loc244 = loc(fused[#loc47, #loc48])
#loc245 = loc(fused[#loc49, #loc50])
#loc246 = loc(fused[#loc53, #loc54])
#loc247 = loc(fused[#loc55, #loc56])
#loc248 = loc(fused[#loc61, #loc62])
#loc249 = loc(fused[#loc63, #loc64])
#loc250 = loc(fused[#loc65, #loc66])
#loc251 = loc(fused[#loc67, #loc64])
#loc252 = loc(fused[#loc69, #loc70])
#loc253 = loc(fused[#loc72, #loc73])
#loc254 = loc(fused[#loc74, #loc75])
#loc255 = loc(fused[#loc78, #loc76])
#loc256 = loc(fused[#loc82, #loc83])
#loc257 = loc(fused[#loc87, #loc88])
#loc258 = loc(fused[#loc89, #loc90])
#loc259 = loc(fused[#loc92, #loc93])
#loc260 = loc(fused[#loc94, #loc95])
#loc261 = loc(fused[#loc96, #loc97])
#loc262 = loc(fused[#loc98, #loc90])
#loc263 = loc(fused[#loc104, #loc105])
#loc264 = loc(fused[#loc106, #loc107])
#loc265 = loc(fused[#loc108, #loc109])
#loc266 = loc(fused[#loc108, #loc110])
#loc267 = loc(fused[#loc106, #loc111])
#loc268 = loc(fused[#loc114, #loc115])
#loc269 = loc(fused[#loc116, #loc117])
#loc270 = loc(fused[#loc118, #loc119])
#loc271 = loc(fused[#loc121, #loc122])
#loc272 = loc(fused[#loc123, #loc117])
#loc273 = loc(fused[#loc129, #loc130])
#loc274 = loc(fused[#loc128, #loc130])
#loc275 = loc(fused[#loc127, #loc130])
#loc276 = loc(fused[#loc126, #loc125])
#loc277 = loc(fused[#loc135, #loc136])
#loc278 = loc(fused[#loc137, #loc138])
#loc279 = loc(fused[#loc140, #loc138])
#loc280 = loc(fused[#loc143, #loc141])
#loc281 = loc(fused[#loc147, #loc148])
#loc282 = loc(fused[#loc149, #loc150])
#loc283 = loc(fused[#loc152, #loc150])
#loc284 = loc(fused[#loc155, #loc153])
#loc285 = loc(fused[#loc157, #loc158])
#loc286 = loc(fused[#loc159, #loc160])
#loc287 = loc(fused[#loc161, #loc158])
#loc288 = loc(fused[#loc168, #loc169])
#loc289 = loc(fused[#loc170, #loc171])
#loc290 = loc(fused[#loc172, #loc173])
#loc291 = loc(fused[#loc174, #loc175])
#loc292 = loc(fused[#loc177, #loc178])
#loc293 = loc(fused[#loc180, #loc181])
#loc294 = loc(fused[#loc182, #loc183])
#loc295 = loc(fused[#loc185, #loc184])
#loc296 = loc(fused[#loc186, #loc187])
#loc297 = loc(fused[#loc188, #loc189])
#loc298 = loc(fused[#loc190, #loc191, #loc192, #loc187])
#loc299 = loc(fused[#loc202, #loc203])
#loc300 = loc(fused[#loc204, #loc205])
#loc301 = loc(fused[#loc207, #loc206])
#loc302 = loc(fused[#loc208, #loc209])
#loc303 = loc(fused[#loc210, #loc211])
#loc304 = loc(fused[#loc212, #loc209])
