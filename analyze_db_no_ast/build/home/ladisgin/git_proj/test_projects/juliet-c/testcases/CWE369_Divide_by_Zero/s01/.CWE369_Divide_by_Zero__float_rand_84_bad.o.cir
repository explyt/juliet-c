!s32i = !cir.int<s, 32>
!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad = !cir.struct<class "CWE369_Divide_by_Zero__float_rand_84::CWE369_Divide_by_Zero__float_rand_84_bad" {!cir.float} #cir.record.decl.ast>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":24:43)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":24:84)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":24:90)
#loc18 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":31:43)
#loc30 = loc(fused[#loc6, #loc7])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_84_bad.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc28)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badC2Ef(%arg0: !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":24:43), %arg1: !cir.float loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc30)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>> loc(#loc8)
    cir.store %arg1, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>>, !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> -> !cir.ptr<!cir.float> loc(#loc10)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc31)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc12)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc12)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc12)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc12)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc12)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc12)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc12)
      cir.yield %28 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc12)
    %11 = cir.cast(int_to_float, %10 : !s32i), !cir.float loc(#loc12)
    %12 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> -> !cir.ptr<!cir.float> loc(#loc10)
    cir.store %11, %12 : !cir.float, !cir.ptr<!cir.float> loc(#loc32)
    cir.return loc(#loc4)
  } loc(#loc29)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badC1Ef(!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>, !cir.float) alias(@_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badC2Ef) loc(#loc29)
  cir.func private  @printIntLine(!s32i) loc(#loc33)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badD2Ev(%arg0: !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":31:43)) extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>>, ["this", init] {alignment = 8 : i64} loc(#loc18)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>> loc(#loc19)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>>, !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> loc(#loc18)
    cir.scope {
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc36)
      %3 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc24)
      %4 = cir.get_member %1[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad> -> !cir.ptr<!cir.float> loc(#loc10)
      %5 = cir.load %4 : !cir.ptr<!cir.float>, !cir.float loc(#loc25)
      %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc25)
      %7 = cir.binop(div, %3, %6) : !cir.double loc(#loc37)
      %8 = cir.cast(float_to_int, %7 : !cir.double), !s32i loc(#loc37)
      cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc36)
      %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc27)
    } loc(#loc35)
    cir.return loc(#loc17)
  } loc(#loc34)
  cir.func  @_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badD1Ev(!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_843A3ACWE369_Divide_by_Zero__float_rand_84_bad>) alias(@_ZN36CWE369_Divide_by_Zero__float_rand_8440CWE369_Divide_by_Zero__float_rand_84_badD2Ev) loc(#loc34)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_84_bad.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":29:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":25:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":26:12)
#loc10 = loc("./CWE369_Divide_by_Zero__float_rand_84.h":34:11)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":28:19)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":28:5)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc16 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":31:1)
#loc17 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":38:1)
#loc19 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":32:1)
#loc20 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":33:5)
#loc21 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":37:5)
#loc22 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":35:9)
#loc23 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":35:40)
#loc24 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":35:28)
#loc25 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":35:36)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":36:22)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_84_bad.cpp":36:9)
#loc28 = loc(fused[#loc1, #loc2])
#loc29 = loc(fused[#loc3, #loc4])
#loc31 = loc(fused[#loc11, #loc9])
#loc32 = loc(fused[#loc13, #loc12])
#loc33 = loc(fused[#loc14, #loc15])
#loc34 = loc(fused[#loc16, #loc17])
#loc35 = loc(fused[#loc20, #loc21])
#loc36 = loc(fused[#loc22, #loc23])
#loc37 = loc(fused[#loc24, #loc25])
