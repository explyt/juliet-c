!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc43 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":102:10)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":102:14)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":102:20)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":102:32)
#loc127 = loc(fused[#loc43, #loc44])
#loc128 = loc(fused[#loc45, #loc46])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc110)
  cir.func private @printIntLine(!s32i) loc(#loc111)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc113)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc114)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc11)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc115)
    cir.goto "source" loc(#loc116)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc15)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc16)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc16)
    %8 = cir.ternary(%7, true {
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc16)
      %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc16)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
      %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc16)
      cir.yield %27 : !u32i loc(#loc16)
    }, false {
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc16)
      %18 = cir.const #cir.int<30> : !s32i loc(#loc16)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc16)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc16)
      %22 = cir.const #cir.int<15> : !s32i loc(#loc16)
      %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc16)
      %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc16)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
      %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc16)
      %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc16)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc16)
      %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc16)
      cir.yield %31 : !u32i loc(#loc16)
    }) : (!cir.bool) -> !u32i loc(#loc16)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc16)
    cir.store %10, %0 : !s16i, !cir.ptr<!s16i> loc(#loc117)
    cir.goto "sink" loc(#loc118)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc20)
    %11 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc21)
    %12 = cir.unary(inc, %11) : !s16i, !s16i loc(#loc21)
    cir.store %12, %0 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc10)
    cir.store %13, %1 : !s16i, !cir.ptr<!s16i> loc(#loc114)
    %14 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc23)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc24)
    cir.return loc(#loc6)
  } loc(#loc112)
  cir.func no_proto @CWE190_Integer_Overflow__short_rand_preinc_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc29)
    cir.return loc(#loc26)
  } loc(#loc120)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc123)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc40)
  cir.func @main(%arg0: !s32i loc(fused[#loc43, #loc44]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc45, #loc46])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc128)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc42)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc47)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc48)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc49)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc49)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc50)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc37)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc51)
    %8 = cir.get_global @CWE190_Integer_Overflow__short_rand_preinc_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call @CWE190_Integer_Overflow__short_rand_preinc_18_good() : () -> () loc(#loc52)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc38)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc39)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %13 = cir.get_global @CWE190_Integer_Overflow__short_rand_preinc_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call @CWE190_Integer_Overflow__short_rand_preinc_18_bad() : () -> () loc(#loc56)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc40)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc40)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.return %17 : !s32i loc(#loc131)
  } loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc133)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc66)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc134)
    cir.goto "source" loc(#loc135)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc70)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc71)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc71)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc71)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc71)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc71)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc71)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc71)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc71)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc71)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc71)
      cir.yield %21 : !u32i loc(#loc71)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc71)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc71)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc71)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc71)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc71)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc71)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc71)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc71)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc71)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc71)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc71)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc71)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc71)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc71)
      cir.yield %25 : !u32i loc(#loc71)
    }) : (!cir.bool) -> !u32i loc(#loc71)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc71)
    %9 = cir.cast(integral, %8 : !s32i), !s16i loc(#loc71)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc136)
    cir.goto "sink" loc(#loc137)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc75)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc78)
      %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc78)
      %12 = cir.const #cir.int<32767> : !s32i loc(#loc79)
      %13 = cir.cmp(lt, %11, %12) : !s32i, !cir.bool loc(#loc139)
      cir.if %13 {
        %14 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc141)
        %15 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc85)
        %16 = cir.unary(inc, %15) : !s16i, !s16i loc(#loc85)
        cir.store %16, %0 : !s16i, !cir.ptr<!s16i> loc(#loc142)
        %17 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc84)
        cir.store %17, %14 : !s16i, !cir.ptr<!s16i> loc(#loc141)
        %18 = cir.load %14 : !cir.ptr<!s16i>, !s16i loc(#loc87)
        %19 = cir.cast(integral, %18 : !s16i), !s32i loc(#loc87)
        cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc88)
      } else {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
      } loc(#loc140)
    } loc(#loc138)
    cir.return loc(#loc63)
  } loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc144)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc145)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc96)
    %3 = cir.cast(integral, %2 : !s32i), !s16i loc(#loc96)
    cir.store %3, %0 : !s16i, !cir.ptr<!s16i> loc(#loc146)
    cir.goto "source" loc(#loc147)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc100)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc101)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc101)
    cir.store %5, %0 : !s16i, !cir.ptr<!s16i> loc(#loc148)
    cir.goto "sink" loc(#loc149)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc105)
    %6 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc106)
    %7 = cir.unary(inc, %6) : !s16i, !s16i loc(#loc106)
    cir.store %7, %0 : !s16i, !cir.ptr<!s16i> loc(#loc150)
    %8 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc95)
    cir.store %8, %1 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    %9 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc108)
    %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc108)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc109)
    cir.return loc(#loc91)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s07/CWE190_Integer_Overflow__short_rand_preinc_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":38:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":24:11)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":35:9)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":35:24)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":25:12)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":25:5)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":26:10)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":27:1)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":29:19)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":30:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":30:10)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":31:1)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":34:9)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":34:11)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":36:22)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":87:1)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":91:1)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":89:5)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":89:13)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":90:5)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":90:13)
#loc31 = loc("/usr/include/stdlib.h":575:1)
#loc32 = loc("/usr/include/stdlib.h":575:41)
#loc33 = loc("/usr/include/time.h":76:1)
#loc34 = loc("/usr/include/time.h":76:38)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":107:15)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":109:15)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":112:15)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":114:15)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":102:1)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":117:1)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":103:1)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":105:27)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":105:22)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":105:5)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":107:5)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":108:5)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":108:56)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":109:5)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":112:5)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":113:5)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":113:55)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":114:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":116:12)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":116:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":64:19)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":45:1)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":66:1)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":47:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":47:11)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":48:12)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":48:5)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":49:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":49:10)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":50:1)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":52:19)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":52:5)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":53:5)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":53:10)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":54:1)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":56:5)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":65:5)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":56:9)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":56:16)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":57:5)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":61:5)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":63:5)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":59:9)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":59:24)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":58:9)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":58:11)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":60:22)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":60:9)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":64:9)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":69:1)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":85:1)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":71:5)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":71:11)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":82:9)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":82:24)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":72:12)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":72:5)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":73:5)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":73:10)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":74:1)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":76:12)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":76:5)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":77:5)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":77:10)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":78:1)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":81:9)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":81:11)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":83:22)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_preinc_18.c":83:9)
#loc110 = loc(fused[#loc1, #loc2])
#loc111 = loc(fused[#loc3, #loc4])
#loc112 = loc(fused[#loc5, #loc6])
#loc113 = loc(fused[#loc7, #loc8])
#loc114 = loc(fused[#loc9, #loc10])
#loc115 = loc(fused[#loc12, #loc11])
#loc116 = loc(fused[#loc13, #loc14])
#loc117 = loc(fused[#loc17, #loc16])
#loc118 = loc(fused[#loc18, #loc19])
#loc119 = loc(fused[#loc21, #loc22])
#loc120 = loc(fused[#loc25, #loc26])
#loc121 = loc(fused[#loc27, #loc28])
#loc122 = loc(fused[#loc29, #loc30])
#loc123 = loc(fused[#loc31, #loc32])
#loc124 = loc(fused[#loc33, #loc34])
#loc125 = loc(fused[#loc35, #loc36])
#loc126 = loc(fused[#loc41, #loc42])
#loc129 = loc(fused[#loc52, #loc53])
#loc130 = loc(fused[#loc56, #loc57])
#loc131 = loc(fused[#loc60, #loc59])
#loc132 = loc(fused[#loc62, #loc63])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc67, #loc66])
#loc135 = loc(fused[#loc68, #loc69])
#loc136 = loc(fused[#loc72, #loc71])
#loc137 = loc(fused[#loc73, #loc74])
#loc138 = loc(fused[#loc76, #loc77])
#loc139 = loc(fused[#loc78, #loc79])
#loc140 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc141 = loc(fused[#loc83, #loc84])
#loc142 = loc(fused[#loc85, #loc86])
#loc143 = loc(fused[#loc90, #loc91])
#loc144 = loc(fused[#loc92, #loc93])
#loc145 = loc(fused[#loc94, #loc95])
#loc146 = loc(fused[#loc97, #loc96])
#loc147 = loc(fused[#loc98, #loc99])
#loc148 = loc(fused[#loc102, #loc101])
#loc149 = loc(fused[#loc103, #loc104])
#loc150 = loc(fused[#loc106, #loc107])
