!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc146 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":160:10)
#loc147 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":160:14)
#loc148 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":160:20)
#loc149 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":160:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc248 = loc(fused[#loc146, #loc147])
#loc249 = loc(fused[#loc148, #loc149])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc192)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc193)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc5)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc194)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc195)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc196)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @close(!s32i) -> !s32i loc(#loc198)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__connect_socket_32.c\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc18)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__connect_socket_32_bad()\00" : !cir.array<!s8i x 57>> : !cir.array<!s8i x 57> {alignment = 1 : i64} loc(#loc18)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc202)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc203)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc202)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc203)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc28)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc206)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc206)
      cir.scope {
        %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc208)
        %11 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc209)
        %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc210)
        %13 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc211)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc42)
        cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc210)
        cir.scope {
          cir.do {
            %16 = cir.const #cir.int<2> : !s32i loc(#loc47)
            %17 = cir.const #cir.int<1> : !s32i loc(#loc48)
            %18 = cir.const #cir.int<6> : !s32i loc(#loc49)
            %19 = cir.call @socket(%16, %17, %18) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc50)
            cir.store %19, %12 : !s32i, !cir.ptr<!s32i> loc(#loc213)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc55)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc56)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc56)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc215)
              cir.if %61 {
                cir.break loc(#loc58)
              } loc(#loc216)
            } loc(#loc214)
            %20 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc217)
            %21 = cir.const #cir.int<0> : !s32i loc(#loc61)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc218)
            cir.libc.memset %22 bytes from %20 set to %21 : !cir.ptr<!void>, !s32i, !u64i loc(#loc219)
            %23 = cir.const #cir.int<2> : !s32i loc(#loc66)
            %24 = cir.cast(integral, %23 : !s32i), !u16i loc(#loc66)
            %25 = cir.get_member %11[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc67)
            cir.store %24, %25 : !u16i, !cir.ptr<!u16i> loc(#loc220)
            %26 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc5)
            %27 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc5)
            %28 = cir.call @inet_addr(%27) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc69)
            %29 = cir.get_member %11[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc70)
            %30 = cir.get_member %29[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc71)
            cir.store %28, %30 : !u32i, !cir.ptr<!u32i> loc(#loc221)
            %31 = cir.const #cir.int<27015> : !s32i loc(#loc74)
            %32 = cir.cast(integral, %31 : !s32i), !u16i loc(#loc74)
            %33 = cir.call @htons(%32) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc75)
            %34 = cir.get_member %11[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc76)
            cir.store %33, %34 : !u16i, !cir.ptr<!u16i> loc(#loc222)
            cir.scope {
              %58 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc81)
              %59 = cir.cast(bitcast, %11 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc224)
              %60 = cir.const #cir.int<16> : !u64i loc(#loc225)
              %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc225)
              %62 = cir.call @connect(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc86)
              %63 = cir.const #cir.int<1> : !s32i loc(#loc87)
              %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc87)
              %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc226)
              cir.if %65 {
                cir.break loc(#loc89)
              } loc(#loc227)
            } loc(#loc223)
            %35 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %36 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc91)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc91)
            %38 = cir.const #cir.int<3> : !s32i loc(#loc92)
            %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc92)
            %40 = cir.const #cir.int<4> : !u64i loc(#loc92)
            %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc92)
            %42 = cir.const #cir.int<2> : !s32i loc(#loc92)
            %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc92)
            %44 = cir.binop(add, %41, %43) : !u64i loc(#loc92)
            %45 = cir.const #cir.int<1> : !s32i loc(#loc93)
            %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc93)
            %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc228)
            %48 = cir.const #cir.int<0> : !s32i loc(#loc94)
            %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc95)
            %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc95)
            cir.store %50, %10 : !s32i, !cir.ptr<!s32i> loc(#loc229)
            cir.scope {
              %58 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc100)
              %59 = cir.const #cir.int<1> : !s32i loc(#loc101)
              %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc101)
              %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc231)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc102)
                cir.yield %63 : !cir.bool loc(#loc102)
              }, false {
                %63 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc103)
                %64 = cir.const #cir.int<0> : !s32i loc(#loc104)
                %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc232)
                %66 = cir.ternary(%65, true {
                  %67 = cir.const #true loc(#loc102)
                  cir.yield %67 : !cir.bool loc(#loc102)
                }, false {
                  %67 = cir.const #false loc(#loc102)
                  cir.yield %67 : !cir.bool loc(#loc102)
                }) : (!cir.bool) -> !cir.bool loc(#loc102)
                cir.yield %66 : !cir.bool loc(#loc102)
              }) : (!cir.bool) -> !cir.bool loc(#loc102)
              cir.if %62 {
                cir.break loc(#loc106)
              } loc(#loc233)
            } loc(#loc230)
            %51 = cir.const #cir.int<0> : !s32i loc(#loc107)
            %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc107)
            %53 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc108)
            %54 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc109)
            %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc109)
            cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc234)
            %56 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc110)
            %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc111)
            cir.store %57, %5 : !s32i, !cir.ptr<!s32i> loc(#loc235)
            cir.yield loc(#loc46)
          } while {
            %16 = cir.const #cir.int<0> : !s32i loc(#loc114)
            %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc114)
            cir.condition(%17) loc(#loc114)
          } loc(#loc212)
        } loc(#loc212)
        cir.scope {
          %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc117)
          %17 = cir.const #cir.int<1> : !s32i loc(#loc118)
          %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc118)
          %19 = cir.cmp(ne, %16, %18) : !s32i, !cir.bool loc(#loc237)
          cir.if %19 {
            %20 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %21 = cir.call @close(%20) : (!s32i) -> !s32i loc(#loc121)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc207)
      %8 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc122)
      %9 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
      cir.store %8, %9 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    } loc(#loc205)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc241)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc129)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc241)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc18)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc18)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc18)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc18)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc18)
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc18)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc18)
            %16 = cir.const #cir.int<117> : !s32i loc(#loc18)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
            %18 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 57>> loc(#loc18)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 57>>), !cir.ptr<!s8i> loc(#loc18)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc18)
          } loc(#loc18)
        } loc(#loc18)
      } loc(#loc18)
    } loc(#loc240)
    cir.return loc(#loc20)
  } loc(#loc200)
  cir.func no_proto @CWE617_Reachable_Assertion__connect_socket_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc243)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc132)
    cir.return loc(#loc131)
  } loc(#loc242)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc244)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc245)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc246)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc140)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc143)
  cir.func @main(%arg0: !s32i loc(fused[#loc146, #loc147]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc148, #loc149])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc249)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc145)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc150)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc151)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc152)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc152)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc153)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc140)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc140)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc154)
    %8 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_32_good : !cir.ptr<!cir.func<!void ()>> loc(#loc250)
    cir.call @CWE617_Reachable_Assertion__connect_socket_32_good() : () -> () loc(#loc155)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc141)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc157)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc142)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc142)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc158)
    %13 = cir.get_global @CWE617_Reachable_Assertion__connect_socket_32_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call @CWE617_Reachable_Assertion__connect_socket_32_bad() : () -> () loc(#loc159)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc143)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc143)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc161)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc162)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc252)
    cir.return %17 : !s32i loc(#loc252)
  } loc(#loc247)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc164)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc254)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc255)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc256)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc255)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc256)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc173)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc174)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc259)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc179)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc180)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc259)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc181)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc182)
      %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc181)
      cir.store %10, %5 : !s32i, !cir.ptr<!s32i> loc(#loc260)
      %11 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %12 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
      cir.store %11, %12 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    } loc(#loc258)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc263)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc190)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc191)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc263)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc164)
      cir.scope {
        cir.scope {
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %10 = cir.const #cir.int<5> : !s32i loc(#loc164)
          %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc164)
          cir.if %11 {
          } else {
            %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc164)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc164)
            %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc164)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc164)
            %16 = cir.const #cir.int<142> : !s32i loc(#loc164)
            %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc164)
            %18 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc164)
            %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc164)
            cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc164)
          } loc(#loc164)
        } loc(#loc164)
      } loc(#loc164)
    } loc(#loc262)
    cir.return loc(#loc166)
  } loc(#loc253)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__connect_socket_32.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/arpa/inet.h":34:1)
#loc4 = loc("/usr/include/arpa/inet.h":34:47)
#loc5 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":82:53)
#loc6 = loc("/usr/include/netinet/in.h":404:1)
#loc7 = loc("/usr/include/netinet/in.h":405:40)
#loc8 = loc("/usr/include/sys/socket.h":126:1)
#loc9 = loc("/usr/include/sys/socket.h":126:75)
#loc10 = loc("/usr/include/sys/socket.h":145:1)
#loc11 = loc("/usr/include/sys/socket.h":145:68)
#loc12 = loc("/usr/include/stdlib.h":105:1)
#loc13 = loc("/usr/include/stdlib.h":106:33)
#loc14 = loc("/usr/include/unistd.h":358:1)
#loc15 = loc("/usr/include/unistd.h":358:27)
#loc16 = loc("/usr/include/assert.h":67:1)
#loc17 = loc("/usr/include/assert.h":69:43)
#loc18 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":117:9)
#loc19 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":47:1)
#loc20 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":119:1)
#loc21 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":49:5)
#loc22 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":49:9)
#loc23 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":50:5)
#loc24 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":50:22)
#loc25 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":51:5)
#loc26 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":51:22)
#loc27 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":53:13)
#loc28 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":53:12)
#loc29 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":53:5)
#loc30 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":54:5)
#loc31 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":113:5)
#loc32 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":55:9)
#loc33 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":55:21)
#loc34 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":55:20)
#loc35 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":56:9)
#loc36 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":111:9)
#loc37 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":61:13)
#loc38 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":61:17)
#loc39 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":62:13)
#loc40 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":62:32)
#loc41 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":63:13)
#loc42 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":63:36)
#loc43 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":64:13)
#loc44 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":64:45)
#loc45 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":65:13)
#loc46 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":100:21)
#loc47 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:40)
#loc48 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:49)
#loc49 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:62)
#loc50 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:33)
#loc51 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:17)
#loc52 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":75:73)
#loc53 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":76:17)
#loc54 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":79:17)
#loc55 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":76:21)
#loc56 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":76:38)
#loc57 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":77:17)
#loc58 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":78:21)
#loc59 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:24)
#loc60 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:25)
#loc61 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:34)
#loc62 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:37)
#loc63 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:51)
#loc64 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:17)
#loc65 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":80:52)
#loc66 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":81:38)
#loc67 = loc("/usr/include/netinet/in.h":249:5)
#loc68 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":81:17)
#loc69 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":82:43)
#loc70 = loc("/usr/include/netinet/in.h":251:20)
#loc71 = loc("/usr/include/netinet/in.h":33:15)
#loc72 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":82:17)
#loc73 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":82:63)
#loc74 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":83:42)
#loc75 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":83:36)
#loc76 = loc("/usr/include/netinet/in.h":250:15)
#loc77 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":83:17)
#loc78 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":83:50)
#loc79 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:17)
#loc80 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":87:17)
#loc81 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:29)
#loc82 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:62)
#loc83 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:63)
#loc84 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:72)
#loc85 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:86)
#loc86 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:21)
#loc87 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":84:92)
#loc88 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":85:17)
#loc89 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":86:21)
#loc90 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:35)
#loc91 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:50)
#loc92 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:63)
#loc93 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:81)
#loc94 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:84)
#loc95 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:30)
#loc96 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:17)
#loc97 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":90:85)
#loc98 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:17)
#loc99 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":94:17)
#loc100 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:21)
#loc101 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:35)
#loc102 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:48)
#loc103 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:51)
#loc104 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":91:65)
#loc105 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":92:17)
#loc106 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":93:21)
#loc107 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":96:43)
#loc108 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":96:29)
#loc109 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":96:17)
#loc110 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":98:29)
#loc111 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":98:24)
#loc112 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":98:17)
#loc113 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":98:40)
#loc114 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":100:20)
#loc115 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":101:13)
#loc116 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":104:13)
#loc117 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":101:17)
#loc118 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":101:34)
#loc119 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":102:13)
#loc120 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":103:30)
#loc121 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":103:17)
#loc122 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":112:21)
#loc123 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":112:10)
#loc124 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":112:9)
#loc125 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":114:5)
#loc126 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":118:5)
#loc127 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":115:9)
#loc128 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":115:21)
#loc129 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":115:20)
#loc130 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":146:1)
#loc131 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":149:1)
#loc132 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":148:5)
#loc133 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":148:13)
#loc134 = loc("/usr/include/stdlib.h":575:1)
#loc135 = loc("/usr/include/stdlib.h":575:41)
#loc136 = loc("/usr/include/time.h":76:1)
#loc137 = loc("/usr/include/time.h":76:38)
#loc138 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc139 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc140 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":165:15)
#loc141 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":167:15)
#loc142 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":170:15)
#loc143 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":172:15)
#loc144 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":160:1)
#loc145 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":175:1)
#loc150 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":161:1)
#loc151 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":163:27)
#loc152 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":163:22)
#loc153 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":163:5)
#loc154 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":165:5)
#loc155 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":166:5)
#loc156 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":166:56)
#loc157 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":167:5)
#loc158 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":170:5)
#loc159 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":171:5)
#loc160 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":171:55)
#loc161 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":172:5)
#loc162 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":174:12)
#loc163 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":174:5)
#loc164 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":142:9)
#loc165 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":126:1)
#loc166 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":144:1)
#loc167 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":128:5)
#loc168 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":128:9)
#loc169 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":129:5)
#loc170 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":129:22)
#loc171 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":130:5)
#loc172 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":130:22)
#loc173 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":132:13)
#loc174 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":132:12)
#loc175 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":132:5)
#loc176 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":133:5)
#loc177 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":138:5)
#loc178 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":134:9)
#loc179 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":134:21)
#loc180 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":134:20)
#loc181 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":136:16)
#loc182 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":136:29)
#loc183 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":136:9)
#loc184 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":137:21)
#loc185 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":137:10)
#loc186 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":137:9)
#loc187 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":139:5)
#loc188 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":143:5)
#loc189 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":140:9)
#loc190 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":140:21)
#loc191 = loc("CWE617_Reachable_Assertion__connect_socket_32.c":140:20)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc3, #loc4])
#loc194 = loc(fused[#loc6, #loc7])
#loc195 = loc(fused[#loc8, #loc9])
#loc196 = loc(fused[#loc10, #loc11])
#loc197 = loc(fused[#loc12, #loc13])
#loc198 = loc(fused[#loc14, #loc15])
#loc199 = loc(fused[#loc16, #loc17])
#loc200 = loc(fused[#loc19, #loc20])
#loc201 = loc(fused[#loc21, #loc22])
#loc202 = loc(fused[#loc23, #loc24])
#loc203 = loc(fused[#loc25, #loc26])
#loc204 = loc(fused[#loc29, #loc27])
#loc205 = loc(fused[#loc30, #loc31])
#loc206 = loc(fused[#loc32, #loc33])
#loc207 = loc(fused[#loc35, #loc36])
#loc208 = loc(fused[#loc37, #loc38])
#loc209 = loc(fused[#loc39, #loc40])
#loc210 = loc(fused[#loc41, #loc42])
#loc211 = loc(fused[#loc43, #loc44])
#loc212 = loc(fused[#loc45, #loc46])
#loc213 = loc(fused[#loc51, #loc52])
#loc214 = loc(fused[#loc53, #loc54])
#loc215 = loc(fused[#loc55, #loc56])
#loc216 = loc(fused[#loc57, #loc54])
#loc217 = loc(fused[#loc59, #loc60])
#loc218 = loc(fused[#loc62, #loc63])
#loc219 = loc(fused[#loc64, #loc65])
#loc220 = loc(fused[#loc68, #loc66])
#loc221 = loc(fused[#loc72, #loc73])
#loc222 = loc(fused[#loc77, #loc78])
#loc223 = loc(fused[#loc79, #loc80])
#loc224 = loc(fused[#loc82, #loc83])
#loc225 = loc(fused[#loc84, #loc85])
#loc226 = loc(fused[#loc86, #loc87])
#loc227 = loc(fused[#loc88, #loc80])
#loc228 = loc(fused[#loc92, #loc93])
#loc229 = loc(fused[#loc96, #loc97])
#loc230 = loc(fused[#loc98, #loc99])
#loc231 = loc(fused[#loc100, #loc101])
#loc232 = loc(fused[#loc103, #loc104])
#loc233 = loc(fused[#loc105, #loc99])
#loc234 = loc(fused[#loc109, #loc107])
#loc235 = loc(fused[#loc112, #loc113])
#loc236 = loc(fused[#loc115, #loc116])
#loc237 = loc(fused[#loc117, #loc118])
#loc238 = loc(fused[#loc119, #loc116])
#loc239 = loc(fused[#loc124, #loc122])
#loc240 = loc(fused[#loc125, #loc126])
#loc241 = loc(fused[#loc127, #loc128])
#loc242 = loc(fused[#loc130, #loc131])
#loc243 = loc(fused[#loc132, #loc133])
#loc244 = loc(fused[#loc134, #loc135])
#loc245 = loc(fused[#loc136, #loc137])
#loc246 = loc(fused[#loc138, #loc139])
#loc247 = loc(fused[#loc144, #loc145])
#loc250 = loc(fused[#loc155, #loc156])
#loc251 = loc(fused[#loc159, #loc160])
#loc252 = loc(fused[#loc163, #loc162])
#loc253 = loc(fused[#loc165, #loc166])
#loc254 = loc(fused[#loc167, #loc168])
#loc255 = loc(fused[#loc169, #loc170])
#loc256 = loc(fused[#loc171, #loc172])
#loc257 = loc(fused[#loc175, #loc173])
#loc258 = loc(fused[#loc176, #loc177])
#loc259 = loc(fused[#loc178, #loc179])
#loc260 = loc(fused[#loc183, #loc182])
#loc261 = loc(fused[#loc186, #loc184])
#loc262 = loc(fused[#loc187, #loc188])
#loc263 = loc(fused[#loc189, #loc190])
