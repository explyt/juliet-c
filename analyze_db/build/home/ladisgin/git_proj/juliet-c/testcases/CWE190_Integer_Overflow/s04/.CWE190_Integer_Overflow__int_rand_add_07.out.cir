!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc54 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":172:10)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":172:14)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":172:20)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":172:32)
#loc218 = loc(fused[#loc54, #loc55])
#loc219 = loc(fused[#loc56, #loc57])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc194)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc195)
  cir.func private @printIntLine(!s32i) loc(#loc196)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_07_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc201)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          cir.yield %23 : !u32i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
          cir.yield %27 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc18)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc205)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc208)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc28)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc29)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc208)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc30)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc31)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc8)
  } loc(#loc197)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_add_07_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc211)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc33)
  } loc(#loc209)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc214)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc215)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc51)
  cir.func @main(%arg0: !s32i loc(fused[#loc54, #loc55]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc56, #loc57])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc53)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc58)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc59)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc60)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc60)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc61)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc48)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE190_Integer_Overflow__int_rand_add_07_good() : () -> () loc(#loc63)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc49)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc50)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_rand_add_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE190_Integer_Overflow__int_rand_add_07_bad() : () -> () loc(#loc67)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc70)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc82)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc83)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc227)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc85)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc85)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc85)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc85)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc85)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc85)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc85)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc85)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc85)
          cir.yield %23 : !u32i loc(#loc85)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc85)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc85)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc85)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc85)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc85)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc85)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc85)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc85)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc85)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc85)
          cir.yield %27 : !u32i loc(#loc85)
        }) : (!cir.bool) -> !u32i loc(#loc85)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc85)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc89)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc90)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc231)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc72)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc94)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc97)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc98)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc234)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc236)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc104)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc236)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc105)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc106)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc73)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc73)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc107)
          } loc(#loc235)
        } loc(#loc233)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc75)
  } loc(#loc223)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc112)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc117)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc241)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc119)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc119)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
          cir.yield %23 : !u32i loc(#loc119)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc119)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc119)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc119)
          cir.yield %27 : !u32i loc(#loc119)
        }) : (!cir.bool) -> !u32i loc(#loc119)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc119)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc123)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc124)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc245)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc129)
          %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc248)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %11 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %12 = cir.binop(add, %10, %11) nsw : !s32i loc(#loc135)
            cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc250)
            %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc137)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc138)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc138)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc139)
          } loc(#loc249)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.return loc(#loc109)
  } loc(#loc237)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc144)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc149)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc255)
      cir.if %5 {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc153)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc153)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc154)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc155)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc257)
      } loc(#loc256)
    } loc(#loc254)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc160)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc259)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc262)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc165)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc166)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc262)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc167)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc168)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc258)
    cir.return loc(#loc141)
  } loc(#loc251)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc264)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc173)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc265)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc178)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc267)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc180)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
      } loc(#loc268)
    } loc(#loc266)
    cir.scope {
      %2 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc194)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc184)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc185)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc271)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc274)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc190)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc191)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc274)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc193)
        } loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.return loc(#loc170)
  } loc(#loc263)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_add_07.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":23:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":27:1)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":45:1)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":29:5)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":29:9)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":31:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":31:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":36:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":32:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":32:20)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":35:16)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":35:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":37:8)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":37:20)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":38:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":43:9)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":41:13)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":41:33)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":41:26)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":42:26)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":155:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":161:1)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":157:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":157:14)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":158:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":158:14)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":159:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":159:14)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":160:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":160:14)
#loc42 = loc("/usr/include/stdlib.h":575:1)
#loc43 = loc("/usr/include/stdlib.h":575:41)
#loc44 = loc("/usr/include/time.h":76:1)
#loc45 = loc("/usr/include/time.h":76:38)
#loc46 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":177:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":179:15)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":182:15)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":184:15)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":172:1)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":187:1)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":173:1)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":175:27)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":175:22)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":175:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":177:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":178:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":178:51)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":179:5)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":182:5)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":183:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":183:50)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":184:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":186:12)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":186:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":65:19)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":77:23)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":52:1)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":80:1)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":54:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":54:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":56:12)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":56:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":57:5)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":61:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":57:8)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":57:20)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":58:5)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":60:16)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":60:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":62:5)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":79:5)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":62:8)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":62:20)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":63:5)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":66:5)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":68:5)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":65:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":70:9)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":78:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":70:13)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":70:20)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":71:9)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":74:9)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":76:9)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":72:13)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":72:33)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":72:26)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":73:26)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":73:13)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":77:13)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":83:1)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":106:1)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":85:5)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":85:9)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":87:12)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":87:5)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":88:5)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":92:5)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":88:8)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":88:20)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":89:5)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":91:16)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":91:9)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":93:5)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":105:5)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":93:8)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":93:20)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":94:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":96:9)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":104:9)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":96:13)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":96:20)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":97:9)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":100:9)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":102:9)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":98:13)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":98:33)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":98:26)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":99:26)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":99:13)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":103:23)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":103:13)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":109:1)
#loc141 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":132:1)
#loc142 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":111:5)
#loc143 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":111:9)
#loc144 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":113:12)
#loc145 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":113:5)
#loc146 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":114:5)
#loc147 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":123:5)
#loc148 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":114:8)
#loc149 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":114:20)
#loc150 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":115:5)
#loc151 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":118:5)
#loc152 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":120:5)
#loc153 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":117:19)
#loc154 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":117:9)
#loc155 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":122:16)
#loc156 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":122:9)
#loc157 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":124:5)
#loc158 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":131:5)
#loc159 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":124:8)
#loc160 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":124:20)
#loc161 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":125:5)
#loc162 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":126:9)
#loc163 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":130:9)
#loc164 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":128:13)
#loc165 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":128:33)
#loc166 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":128:26)
#loc167 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":129:26)
#loc168 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":129:13)
#loc169 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":135:1)
#loc170 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":153:1)
#loc171 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":137:5)
#loc172 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":137:9)
#loc173 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":139:12)
#loc174 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":139:5)
#loc175 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":140:5)
#loc176 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":144:5)
#loc177 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":140:8)
#loc178 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":140:20)
#loc179 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":141:5)
#loc180 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":143:16)
#loc181 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":143:9)
#loc182 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":145:5)
#loc183 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":152:5)
#loc184 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":145:8)
#loc185 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":145:20)
#loc186 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":146:5)
#loc187 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":147:9)
#loc188 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":151:9)
#loc189 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":149:13)
#loc190 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":149:33)
#loc191 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":149:26)
#loc192 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":150:26)
#loc193 = loc("CWE190_Integer_Overflow__int_rand_add_07.c":150:13)
#loc194 = loc(fused[#loc1, #loc2])
#loc195 = loc(fused[#loc3, #loc4])
#loc196 = loc(fused[#loc5, #loc6])
#loc197 = loc(fused[#loc7, #loc8])
#loc198 = loc(fused[#loc9, #loc10])
#loc199 = loc(fused[#loc12, #loc11])
#loc200 = loc(fused[#loc13, #loc14])
#loc201 = loc(fused[#loc15, #loc16])
#loc202 = loc(fused[#loc17, #loc14])
#loc203 = loc(fused[#loc19, #loc18])
#loc204 = loc(fused[#loc20, #loc21])
#loc205 = loc(fused[#loc22, #loc23])
#loc206 = loc(fused[#loc24, #loc21])
#loc207 = loc(fused[#loc25, #loc26])
#loc208 = loc(fused[#loc27, #loc28])
#loc209 = loc(fused[#loc32, #loc33])
#loc210 = loc(fused[#loc34, #loc35])
#loc211 = loc(fused[#loc36, #loc37])
#loc212 = loc(fused[#loc38, #loc39])
#loc213 = loc(fused[#loc40, #loc41])
#loc214 = loc(fused[#loc42, #loc43])
#loc215 = loc(fused[#loc44, #loc45])
#loc216 = loc(fused[#loc46, #loc47])
#loc217 = loc(fused[#loc52, #loc53])
#loc220 = loc(fused[#loc63, #loc64])
#loc221 = loc(fused[#loc67, #loc68])
#loc222 = loc(fused[#loc71, #loc70])
#loc223 = loc(fused[#loc74, #loc75])
#loc224 = loc(fused[#loc76, #loc77])
#loc225 = loc(fused[#loc79, #loc78])
#loc226 = loc(fused[#loc80, #loc81])
#loc227 = loc(fused[#loc82, #loc83])
#loc228 = loc(fused[#loc84, #loc81])
#loc229 = loc(fused[#loc86, #loc85])
#loc230 = loc(fused[#loc87, #loc88])
#loc231 = loc(fused[#loc89, #loc90])
#loc232 = loc(fused[#loc91, #loc92, #loc93, #loc88])
#loc233 = loc(fused[#loc95, #loc96])
#loc234 = loc(fused[#loc97, #loc98])
#loc235 = loc(fused[#loc99, #loc100, #loc101, #loc96])
#loc236 = loc(fused[#loc102, #loc103])
#loc237 = loc(fused[#loc108, #loc109])
#loc238 = loc(fused[#loc110, #loc111])
#loc239 = loc(fused[#loc113, #loc112])
#loc240 = loc(fused[#loc114, #loc115])
#loc241 = loc(fused[#loc116, #loc117])
#loc242 = loc(fused[#loc118, #loc115])
#loc243 = loc(fused[#loc120, #loc119])
#loc244 = loc(fused[#loc121, #loc122])
#loc245 = loc(fused[#loc123, #loc124])
#loc246 = loc(fused[#loc125, #loc122])
#loc247 = loc(fused[#loc126, #loc127])
#loc248 = loc(fused[#loc128, #loc129])
#loc249 = loc(fused[#loc130, #loc131, #loc132, #loc127])
#loc250 = loc(fused[#loc133, #loc134])
#loc251 = loc(fused[#loc140, #loc141])
#loc252 = loc(fused[#loc142, #loc143])
#loc253 = loc(fused[#loc145, #loc144])
#loc254 = loc(fused[#loc146, #loc147])
#loc255 = loc(fused[#loc148, #loc149])
#loc256 = loc(fused[#loc150, #loc151, #loc152, #loc147])
#loc257 = loc(fused[#loc156, #loc155])
#loc258 = loc(fused[#loc157, #loc158])
#loc259 = loc(fused[#loc159, #loc160])
#loc260 = loc(fused[#loc161, #loc158])
#loc261 = loc(fused[#loc162, #loc163])
#loc262 = loc(fused[#loc164, #loc165])
#loc263 = loc(fused[#loc169, #loc170])
#loc264 = loc(fused[#loc171, #loc172])
#loc265 = loc(fused[#loc174, #loc173])
#loc266 = loc(fused[#loc175, #loc176])
#loc267 = loc(fused[#loc177, #loc178])
#loc268 = loc(fused[#loc179, #loc176])
#loc269 = loc(fused[#loc181, #loc180])
#loc270 = loc(fused[#loc182, #loc183])
#loc271 = loc(fused[#loc184, #loc185])
#loc272 = loc(fused[#loc186, #loc183])
#loc273 = loc(fused[#loc187, #loc188])
#loc274 = loc(fused[#loc189, #loc190])
