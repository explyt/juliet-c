!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc154)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc155)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc156)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc157)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc16)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc16)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc160)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc161)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc162)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc163)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc24)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc165)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc166)
    } loc(#loc164)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc33)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc34)
        %13 = cir.const #cir.int<100> : !s32i loc(#loc35)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc36)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc35)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc35)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc169)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc39)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc39)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc40)
        %20 = cir.const #cir.int<100> : !s32i loc(#loc41)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc42)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc41)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc43)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc170)
      } loc(#loc168)
    } loc(#loc167)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc172)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc172)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc172)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc48)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc49)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc50)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc48)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc51)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc52)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc53)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc54)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc54)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc53)
    } loc(#loc171)
    cir.return loc(#loc12)
  } loc(#loc158)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc57)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc59)
    cir.return loc(#loc56)
  } loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc66)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc67)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc67)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc178)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc179)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc66)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc180)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc181)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc75)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc183)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc77)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc79)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc77)
      } loc(#loc184)
    } loc(#loc182)
    cir.scope {
      %8 = cir.const #cir.int<0> : !s32i loc(#loc82)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc82)
      cir.if %9 {
        %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc61)
        %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc86)
      } else {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc87)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc87)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc88)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc89)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc89)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc89)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc187)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc93)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc93)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc95)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc96)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc95)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc97)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc188)
      } loc(#loc186)
    } loc(#loc185)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc190)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc190)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc190)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc102)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc103)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc104)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc102)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc106)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc107)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc107)
    } loc(#loc189)
    cir.return loc(#loc63)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc113)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc114)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc114)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc193)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc194)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc113)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc196)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
      %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
      %11 = cir.cmp(eq, %8, %10) : !cir.ptr<!s8i>, !cir.bool loc(#loc198)
      cir.if %11 {
        %12 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc124)
        %13 = cir.const #cir.int<1> : !s32i loc(#loc125)
        %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc126)
        cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc124)
      } loc(#loc199)
    } loc(#loc197)
    cir.scope {
      %8 = cir.const #cir.int<1> : !s32i loc(#loc129)
      %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc129)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc131)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
        %12 = cir.const #cir.int<65> : !s32i loc(#loc132)
        %13 = cir.const #cir.int<50> : !s32i loc(#loc133)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc134)
        %15 = cir.binop(sub, %13, %14) nsw : !s32i loc(#loc133)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc133)
        cir.libc.memset %16 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc202)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc137)
        %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc137)
        %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc138)
        %20 = cir.const #cir.int<50> : !s32i loc(#loc139)
        %21 = cir.const #cir.int<1> : !s32i loc(#loc140)
        %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc139)
        %23 = cir.ptr_stride(%19 : !cir.ptr<!s8i>, %22 : !s32i), !cir.ptr<!s8i> loc(#loc141)
        cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc203)
      } loc(#loc201)
    } loc(#loc200)
    cir.scope {
      %8 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc205)
      %9 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc205)
      cir.store %9, %8 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc205)
      %10 = cir.get_global @strcat : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc146)
      %11 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc147)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
      %13 = cir.call @strcat(%11, %12) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc146)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc150)
      %15 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc151)
      %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc152)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc152)
      cir.call @free(%17) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc151)
    } loc(#loc204)
    cir.return loc(#loc110)
  } loc(#loc191)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s10/CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":149:1)
#loc6 = loc("/usr/include/string.h":150:14)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":30:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":32:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":32:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:20)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:27)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:31)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:42)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:43)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":33:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":34:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":35:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":40:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":35:8)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":36:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:16)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:22)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:31)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":38:32)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":39:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":39:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":39:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":39:18)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":39:19)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":47:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":42:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":42:25)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":44:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":44:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":44:22)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":45:19)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":46:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":46:14)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":101:1)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":105:1)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":103:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":103:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":104:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":104:14)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":63:19)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":55:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":78:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":57:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":57:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:27)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:42)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:43)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":58:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:33)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:17)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:23)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:24)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:30)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":59:29)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":60:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":70:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":60:8)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":61:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":64:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":66:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":63:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:16)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:22)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":68:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":69:22)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":69:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":69:14)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":69:17)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":69:18)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":71:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":77:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":72:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":72:25)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":74:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":74:16)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":74:22)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":75:19)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":75:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":76:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":76:14)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":81:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":99:1)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":83:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":83:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:20)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:31)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:42)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:43)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":84:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:33)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:17)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:23)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:30)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":85:29)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":86:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":91:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":86:8)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":87:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:16)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:22)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:27)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:30)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:9)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":89:31)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":90:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":90:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":90:14)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":90:17)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":90:18)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":92:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":98:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":93:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":93:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":95:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":95:16)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":95:22)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":96:19)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":96:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":97:9)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_src_char_cat_04.c":97:14)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc7, #loc8])
#loc157 = loc(fused[#loc9, #loc10])
#loc158 = loc(fused[#loc11, #loc12])
#loc159 = loc(fused[#loc13, #loc14])
#loc160 = loc(fused[#loc17, #loc18])
#loc161 = loc(fused[#loc16, #loc18])
#loc162 = loc(fused[#loc15, #loc19])
#loc163 = loc(fused[#loc20, #loc19])
#loc164 = loc(fused[#loc21, #loc22])
#loc165 = loc(fused[#loc23, #loc24])
#loc166 = loc(fused[#loc25, #loc22])
#loc167 = loc(fused[#loc29, #loc30])
#loc168 = loc(fused[#loc32, #loc30])
#loc169 = loc(fused[#loc37, #loc38])
#loc170 = loc(fused[#loc40, #loc39])
#loc171 = loc(fused[#loc44, #loc45])
#loc172 = loc(fused[#loc46, #loc47])
#loc173 = loc(fused[#loc55, #loc56])
#loc174 = loc(fused[#loc57, #loc58])
#loc175 = loc(fused[#loc59, #loc60])
#loc176 = loc(fused[#loc62, #loc63])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc68, #loc69])
#loc179 = loc(fused[#loc67, #loc69])
#loc180 = loc(fused[#loc66, #loc70])
#loc181 = loc(fused[#loc71, #loc70])
#loc182 = loc(fused[#loc72, #loc73])
#loc183 = loc(fused[#loc74, #loc75])
#loc184 = loc(fused[#loc76, #loc73])
#loc185 = loc(fused[#loc80, #loc81])
#loc186 = loc(fused[#loc83, #loc84, #loc85, #loc81])
#loc187 = loc(fused[#loc91, #loc92])
#loc188 = loc(fused[#loc94, #loc93])
#loc189 = loc(fused[#loc98, #loc99])
#loc190 = loc(fused[#loc100, #loc101])
#loc191 = loc(fused[#loc109, #loc110])
#loc192 = loc(fused[#loc111, #loc112])
#loc193 = loc(fused[#loc115, #loc116])
#loc194 = loc(fused[#loc114, #loc116])
#loc195 = loc(fused[#loc113, #loc117])
#loc196 = loc(fused[#loc118, #loc117])
#loc197 = loc(fused[#loc119, #loc120])
#loc198 = loc(fused[#loc121, #loc122])
#loc199 = loc(fused[#loc123, #loc120])
#loc200 = loc(fused[#loc127, #loc128])
#loc201 = loc(fused[#loc130, #loc128])
#loc202 = loc(fused[#loc135, #loc136])
#loc203 = loc(fused[#loc138, #loc137])
#loc204 = loc(fused[#loc142, #loc143])
#loc205 = loc(fused[#loc144, #loc145])
