!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"x == 0\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"x was 0\0A\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc71)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc72)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc15)
    cir.brcond %3 ^bb3, ^bb16 loc(#loc15)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc74)
  ^bb4:  // pred: ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc19)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc75)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc23)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc77)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc21)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc21)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc78)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc5)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc27)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc80)
  ^bb11:  // pred: ^bb10
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %15 ^bb12, ^bb13 loc(#loc81)
  ^bb12:  // pred: ^bb11
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc6)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc33)
    cir.br ^bb13 loc(#loc30)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc30)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc17)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc34)
  ^bb16:  // 2 preds: ^bb2, ^bb15
    cir.br ^bb17 loc(#loc14)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc8)
  } loc(#loc70)
  cir.func no_proto @CWE483_Incorrect_Block_Delimitation__semicolon_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc83)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc36)
  } loc(#loc82)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["y", init] {alignment = 4 : i64} loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc87)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %3 ^bb3, ^bb14 loc(#loc47)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc88)
  ^bb4:  // pred: ^bb3
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc50)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc51)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc89)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.br ^bb5 loc(#loc90)
  ^bb5:  // pred: ^bb4
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc91)
    cir.brcond %10 ^bb6, ^bb7 loc(#loc92)
  ^bb6:  // pred: ^bb5
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc57)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc59)
    cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.br ^bb7 loc(#loc53)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc53)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc63)
    cir.brcond %15 ^bb10, ^bb11 loc(#loc95)
  ^bb10:  // pred: ^bb9
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc65)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc62)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc49)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc67)
  ^bb14:  // 2 preds: ^bb2, ^bb13
    cir.br ^bb15 loc(#loc46)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc40)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE483_Incorrect_Block_Delimitation/CWE483_Incorrect_Block_Delimitation__semicolon_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":30:27)
#loc6 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":35:27)
#loc7 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":20:1)
#loc8 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":40:1)
#loc9 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:13)
#loc10 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:32)
#loc11 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":26:13)
#loc12 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":26:21)
#loc13 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":22:5)
#loc14 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":39:5)
#loc15 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":22:11)
#loc16 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":24:9)
#loc17 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":37:9)
#loc18 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:22)
#loc19 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":25:31)
#loc20 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:13)
#loc21 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:24)
#loc22 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:17)
#loc23 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":28:22)
#loc24 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":29:13)
#loc25 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":32:13)
#loc26 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":30:17)
#loc27 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":31:21)
#loc28 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":31:17)
#loc29 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":33:13)
#loc30 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":36:13)
#loc31 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":33:17)
#loc32 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":34:13)
#loc33 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":35:17)
#loc34 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":38:9)
#loc35 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":69:1)
#loc36 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":72:1)
#loc37 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":71:5)
#loc38 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":71:11)
#loc39 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":47:1)
#loc40 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":67:1)
#loc41 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:13)
#loc42 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:32)
#loc43 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":53:13)
#loc44 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":53:21)
#loc45 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":49:5)
#loc46 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":66:5)
#loc47 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":49:11)
#loc48 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":51:9)
#loc49 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":64:9)
#loc50 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:22)
#loc51 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":52:31)
#loc52 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:13)
#loc53 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":59:13)
#loc54 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:17)
#loc55 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":55:22)
#loc56 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":56:13)
#loc57 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":57:27)
#loc58 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":57:17)
#loc59 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":58:21)
#loc60 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":58:17)
#loc61 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":60:13)
#loc62 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":63:13)
#loc63 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":60:17)
#loc64 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":61:13)
#loc65 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":62:27)
#loc66 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":62:17)
#loc67 = loc("CWE483_Incorrect_Block_Delimitation__semicolon_16.c":65:9)
#loc68 = loc(fused[#loc1, #loc2])
#loc69 = loc(fused[#loc3, #loc4])
#loc70 = loc(fused[#loc7, #loc8])
#loc71 = loc(fused[#loc9, #loc10])
#loc72 = loc(fused[#loc11, #loc12])
#loc73 = loc(fused[#loc13, #loc14])
#loc74 = loc(fused[#loc16, #loc17])
#loc75 = loc(fused[#loc18, #loc19])
#loc76 = loc(fused[#loc20, #loc21])
#loc77 = loc(fused[#loc22, #loc23])
#loc78 = loc(fused[#loc24, #loc25])
#loc79 = loc(fused[#loc28, #loc27])
#loc80 = loc(fused[#loc29, #loc30])
#loc81 = loc(fused[#loc32, #loc30])
#loc82 = loc(fused[#loc35, #loc36])
#loc83 = loc(fused[#loc37, #loc38])
#loc84 = loc(fused[#loc39, #loc40])
#loc85 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc43, #loc44])
#loc87 = loc(fused[#loc45, #loc46])
#loc88 = loc(fused[#loc48, #loc49])
#loc89 = loc(fused[#loc50, #loc51])
#loc90 = loc(fused[#loc52, #loc53])
#loc91 = loc(fused[#loc54, #loc55])
#loc92 = loc(fused[#loc56, #loc53])
#loc93 = loc(fused[#loc60, #loc59])
#loc94 = loc(fused[#loc61, #loc62])
#loc95 = loc(fused[#loc64, #loc62])
