!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":105:10)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":105:14)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":105:20)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":105:32)
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc44, #loc45])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc108)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc112)
    cir.br ^bb1 loc(#loc113)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %3 ^bb2, ^bb11 loc(#loc114)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc115)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc19)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc116)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc117)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %7 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc20)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc23)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc17)
  ^bb10:  // pred: ^bb9
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc7)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc25)
    cir.br ^bb11 loc(#loc13)
  ^bb11:  // 2 preds: ^bb1, ^bb10
    cir.br ^bb12 loc(#loc13)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc111)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc118)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc121)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc122)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc36)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc38)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc39)
  cir.func @main(%arg0: !s32i loc(fused[#loc42, #loc43]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc44, #loc45])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc46)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc46)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc47)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc48)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc48)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc49)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc36)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %8 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_05_good : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call @CWE398_Poor_Code_Quality__empty_case_05_good() : () -> () loc(#loc51)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc37)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc37)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc38)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc54)
    %13 = cir.get_global @CWE398_Poor_Code_Quality__empty_case_05_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call @CWE398_Poor_Code_Quality__empty_case_05_bad() : () -> () loc(#loc55)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc39)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc39)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc58)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc128)
    cir.return %17 : !s32i loc(#loc128)
  } loc(#loc123)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc129)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc64)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc129)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc71)
    cir.brcond %3 ^bb2, ^bb3 loc(#loc133)
  ^bb2:  // pred: ^bb1
    %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc62)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    cir.br ^bb12 loc(#loc73)
  ^bb3:  // pred: ^bb1
    cir.br ^bb4 loc(#loc134)
  ^bb4:  // pred: ^bb3
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc78)
    %7 = cir.const #cir.int<3> : !s32i loc(#loc79)
    %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc135)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    cir.br ^bb5 loc(#loc136)
  ^bb5:  // pred: ^bb4
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.br ^bb6 loc(#loc80)
  ^bb6:  // pred: ^bb5
    cir.switch.flat %9 : !s32i, ^bb9 [
      0: ^bb8
    ] loc(#loc80)
  ^bb7:  // no predecessors
    cir.br ^bb8 loc(#loc83)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc63)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // 2 preds: ^bb6, ^bb8
    cir.br ^bb10 loc(#loc81)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc77)
  ^bb11:  // pred: ^bb10
    %12 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc64)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb12 loc(#loc70)
  ^bb12:  // 2 preds: ^bb2, ^bb11
    cir.br ^bb13 loc(#loc70)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc66)
  } loc(#loc130)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %1 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc108)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc93)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc93)
    cir.brcond %3 ^bb2, ^bb11 loc(#loc140)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc141)
  ^bb3:  // pred: ^bb2
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc97)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc98)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc142)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb4 loc(#loc143)
  ^bb4:  // pred: ^bb3
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
    cir.br ^bb5 loc(#loc99)
  ^bb5:  // pred: ^bb4
    cir.switch.flat %7 : !s32i, ^bb8 [
      0: ^bb7
    ] loc(#loc99)
  ^bb6:  // no predecessors
    cir.br ^bb7 loc(#loc102)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc103)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb8 loc(#loc105)
  ^bb8:  // 2 preds: ^bb5, ^bb7
    cir.br ^bb9 loc(#loc100)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc96)
  ^bb10:  // pred: ^bb9
    %10 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc106)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc107)
    cir.br ^bb11 loc(#loc92)
  ^bb11:  // 2 preds: ^bb1, ^bb10
    cir.br ^bb12 loc(#loc92)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc88)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_05.c":0:0)
#loc1 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":21:1)
#loc2 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":21:25)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":39:19)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":26:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":41:1)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":32:13)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":32:32)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":28:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":40:5)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":28:8)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":29:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":31:9)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":38:9)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":32:22)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":32:31)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":33:13)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":37:13)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":33:21)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":35:13)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":36:17)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":39:9)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":90:1)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":94:1)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":92:5)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":92:11)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":93:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":93:11)
#loc32 = loc("/usr/include/stdlib.h":575:1)
#loc33 = loc("/usr/include/stdlib.h":575:41)
#loc34 = loc("/usr/include/time.h":76:1)
#loc35 = loc("/usr/include/time.h":76:38)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":110:15)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":112:15)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":115:15)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":117:15)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":105:1)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":120:1)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":106:1)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":108:27)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":108:22)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":108:5)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":110:5)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":111:5)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":111:50)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":112:5)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":115:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":116:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":116:49)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":117:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":119:12)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":119:5)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":22:1)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":22:26)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":53:19)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":63:27)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":67:19)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":48:1)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":69:1)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":59:13)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":59:32)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":50:5)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":68:5)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":50:8)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":51:5)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":54:5)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":56:5)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":53:9)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":58:9)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":66:9)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":59:22)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":59:31)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":60:13)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":65:13)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":60:21)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":62:13)
#loc84 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":63:17)
#loc85 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":64:17)
#loc86 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":67:9)
#loc87 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":72:1)
#loc88 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":88:1)
#loc89 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":78:13)
#loc90 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":78:32)
#loc91 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":74:5)
#loc92 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":87:5)
#loc93 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":74:8)
#loc94 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":75:5)
#loc95 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":77:9)
#loc96 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":85:9)
#loc97 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":78:22)
#loc98 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":78:31)
#loc99 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":79:13)
#loc100 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":84:13)
#loc101 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":79:21)
#loc102 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":81:13)
#loc103 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":82:27)
#loc104 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":82:17)
#loc105 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":83:17)
#loc106 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":86:19)
#loc107 = loc("CWE398_Poor_Code_Quality__empty_case_05.c":86:9)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc8, #loc9])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc15, #loc13])
#loc115 = loc(fused[#loc16, #loc17])
#loc116 = loc(fused[#loc18, #loc19])
#loc117 = loc(fused[#loc20, #loc21])
#loc118 = loc(fused[#loc26, #loc27])
#loc119 = loc(fused[#loc28, #loc29])
#loc120 = loc(fused[#loc30, #loc31])
#loc121 = loc(fused[#loc32, #loc33])
#loc122 = loc(fused[#loc34, #loc35])
#loc123 = loc(fused[#loc40, #loc41])
#loc126 = loc(fused[#loc51, #loc52])
#loc127 = loc(fused[#loc55, #loc56])
#loc128 = loc(fused[#loc59, #loc58])
#loc129 = loc(fused[#loc60, #loc61])
#loc130 = loc(fused[#loc65, #loc66])
#loc131 = loc(fused[#loc67, #loc68])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc72, #loc73, #loc74, #loc70])
#loc134 = loc(fused[#loc76, #loc77])
#loc135 = loc(fused[#loc78, #loc79])
#loc136 = loc(fused[#loc80, #loc81])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc91, #loc92])
#loc140 = loc(fused[#loc94, #loc92])
#loc141 = loc(fused[#loc95, #loc96])
#loc142 = loc(fused[#loc97, #loc98])
#loc143 = loc(fused[#loc99, #loc100])
