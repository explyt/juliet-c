!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":104:10)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":104:14)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":104:20)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":104:32)
#loc199 = loc(fused[#loc68, #loc69])
#loc200 = loc(fused[#loc70, #loc71])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc173)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc174)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc175)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc176)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc179)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc180)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc182)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc22)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc22)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc183)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc184)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc185)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc182)
      cir.scope {
        %31 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %32 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %34 = cir.cmp(eq, %31, %33) : !cir.ptr<!s32i>, !cir.bool loc(#loc187)
        cir.if %34 {
          %35 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc32)
          cir.call @exit(%37) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc188)
      } loc(#loc186)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %17 = cir.const #cir.int<65> : !s32i loc(#loc34)
      %18 = cir.const #cir.int<50> : !s32i loc(#loc35)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc35)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc35)
      %22 = cir.call @wmemset(%16, %17, %21) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc38)
      %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
      %25 = cir.const #cir.int<50> : !s32i loc(#loc40)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc40)
      %28 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc42)
      cir.store %23, %28 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      %29 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
      cir.store %30, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc190)
    } loc(#loc181)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc46)
    %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc47)
    %6 = cir.ptr_stride(%5 : !cir.ptr<!cir.ptr<!void>>, %4 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc47)
    cir.store %3, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc191)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc48)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_badSink(%7) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc49)
    cir.return loc(#loc10)
  } loc(#loc177)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc192)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc195)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc196)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc197)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc64)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc65)
  cir.func @main(%arg0: !s32i loc(fused[#loc68, #loc69]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc70, #loc71])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc67)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc72)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc73)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc74)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc74)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc75)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc62)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_good() : () -> () loc(#loc77)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc63)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc64)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66_bad() : () -> () loc(#loc81)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc65)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc84)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %17 : !s32i loc(#loc203)
  } loc(#loc198)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc204)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc207)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc94)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc208)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc210)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc100)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc101)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc101)
      %12 = cir.const #cir.int<1> : !u64i loc(#loc211)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc212)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc100)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc213)
      cir.store %15, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc210)
      cir.scope {
        %32 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc106)
        %33 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
        %34 = cir.cast(bitcast, %33 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
        %35 = cir.cmp(eq, %32, %34) : !cir.ptr<!s8i>, !cir.bool loc(#loc215)
        cir.if %35 {
          %36 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc109)
          %37 = cir.const #cir.int<1> : !s32i loc(#loc110)
          %38 = cir.unary(minus, %37) : !s32i, !s32i loc(#loc111)
          cir.call @exit(%38) : (!s32i) -> () extra(#fn_attr) loc(#loc109)
        } loc(#loc216)
      } loc(#loc214)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc112)
      %18 = cir.const #cir.int<65> : !s32i loc(#loc113)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc114)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc115)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc114)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc114)
      cir.libc.memset %22 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc217)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc118)
      %25 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %26 = cir.const #cir.int<50> : !s32i loc(#loc120)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc121)
      %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc120)
      %29 = cir.ptr_stride(%25 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc122)
      cir.store %24, %29 : !s8i, !cir.ptr<!s8i> loc(#loc218)
      %30 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc123)
      %31 = cir.cast(bitcast, %30 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc123)
      cir.store %31, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    } loc(#loc209)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc125)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc126)
    %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    %6 = cir.ptr_stride(%5 : !cir.ptr<!cir.ptr<!void>>, %4 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    cir.store %3, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc220)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc128)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodG2BSink(%7) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc129)
    cir.return loc(#loc89)
  } loc(#loc205)
  cir.func private @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(!cir.ptr<!cir.ptr<!void>>) loc(#loc221)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.array<!cir.ptr<!void> x 5>, !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc224)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
    cir.scope {
      %8 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc227)
      %9 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
      %10 = cir.const #cir.int<50> : !s32i loc(#loc145)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc145)
      %12 = cir.const #cir.int<4> : !u64i loc(#loc228)
      %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc229)
      %14 = cir.call @malloc(%13) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc230)
      cir.store %15, %8 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc227)
      cir.scope {
        %31 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc150)
        %32 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc151)
        %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc151)
        %34 = cir.cmp(eq, %31, %33) : !cir.ptr<!s32i>, !cir.bool loc(#loc232)
        cir.if %34 {
          %35 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc153)
          %36 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %37 = cir.unary(minus, %36) : !s32i, !s32i loc(#loc155)
          cir.call @exit(%37) : (!s32i) -> () extra(#fn_attr) loc(#loc153)
        } loc(#loc233)
      } loc(#loc231)
      %16 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc156)
      %17 = cir.const #cir.int<65> : !s32i loc(#loc157)
      %18 = cir.const #cir.int<50> : !s32i loc(#loc158)
      %19 = cir.const #cir.int<1> : !s32i loc(#loc159)
      %20 = cir.binop(sub, %18, %19) nsw : !s32i loc(#loc158)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc158)
      %22 = cir.call @wmemset(%16, %17, %21) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc160)
      %23 = cir.const #cir.int<0> : !s32i loc(#loc161)
      %24 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc162)
      %25 = cir.const #cir.int<50> : !s32i loc(#loc163)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc164)
      %27 = cir.binop(sub, %25, %26) nsw : !s32i loc(#loc163)
      %28 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %27 : !s32i), !cir.ptr<!s32i> loc(#loc165)
      cir.store %23, %28 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      %29 = cir.load %8 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc166)
      %30 = cir.cast(bitcast, %29 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc166)
      cir.store %30, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    } loc(#loc226)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc168)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc169)
    %5 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    %6 = cir.ptr_stride(%5 : !cir.ptr<!cir.ptr<!void>>, %4 : !s32i), !cir.ptr<!cir.ptr<!void>> loc(#loc170)
    cir.store %3, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc236)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!cir.ptr<!void> x 5>>), !cir.ptr<!cir.ptr<!void>> loc(#loc171)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_66b_goodB2GSink(%7) : (!cir.ptr<!cir.ptr<!void>>) -> () loc(#loc172)
    cir.return loc(#loc133)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":25:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":25:78)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":27:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":29:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":29:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":30:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":30:23)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":31:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":32:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":39:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:71)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":33:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":34:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":35:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":36:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":38:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":38:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:20)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:15)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":41:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":42:59)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":42:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":89:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":93:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":91:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":91:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":92:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":92:13)
#loc56 = loc("/usr/include/stdlib.h":575:1)
#loc57 = loc("/usr/include/stdlib.h":575:41)
#loc58 = loc("/usr/include/time.h":76:1)
#loc59 = loc("/usr/include/time.h":76:38)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":109:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":111:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":114:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":116:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":104:1)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":119:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":105:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":107:27)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":107:22)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":107:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":109:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":110:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":110:55)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":111:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":114:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":115:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":115:54)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":116:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":118:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":118:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":50:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":50:82)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":52:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":67:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":54:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":54:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":55:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":55:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":56:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":56:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":57:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":64:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:63)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:41)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:48)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:51)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":58:62)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:47)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:13)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:31)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:38)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:44)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":59:43)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:32)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:37)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:40)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":60:41)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:32)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:24)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:27)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":61:28)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":63:24)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":63:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:20)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:15)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":65:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":66:63)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":66:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":70:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":70:82)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":72:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":87:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":74:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":74:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":75:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":75:23)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":76:12)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":76:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":77:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":84:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:71)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:46)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:53)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:56)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":78:70)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:46)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:13)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:36)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:37)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:43)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":79:42)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:17)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:32)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:38)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:41)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":80:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:31)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:23)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:26)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":81:27)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":83:24)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":83:9)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:20)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:15)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":85:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":86:63)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_66a.c":86:5)
#loc173 = loc(fused[#loc1, #loc2])
#loc174 = loc(fused[#loc3, #loc4])
#loc175 = loc(fused[#loc5, #loc6])
#loc176 = loc(fused[#loc7, #loc8])
#loc177 = loc(fused[#loc9, #loc10])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc13, #loc14])
#loc180 = loc(fused[#loc16, #loc15])
#loc181 = loc(fused[#loc17, #loc18])
#loc182 = loc(fused[#loc19, #loc20])
#loc183 = loc(fused[#loc23, #loc24])
#loc184 = loc(fused[#loc22, #loc24])
#loc185 = loc(fused[#loc21, #loc20])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc27, #loc28])
#loc188 = loc(fused[#loc29, #loc26])
#loc189 = loc(fused[#loc39, #loc38])
#loc190 = loc(fused[#loc44, #loc43])
#loc191 = loc(fused[#loc47, #loc45])
#loc192 = loc(fused[#loc50, #loc51])
#loc193 = loc(fused[#loc52, #loc53])
#loc194 = loc(fused[#loc54, #loc55])
#loc195 = loc(fused[#loc56, #loc57])
#loc196 = loc(fused[#loc58, #loc59])
#loc197 = loc(fused[#loc60, #loc61])
#loc198 = loc(fused[#loc66, #loc67])
#loc201 = loc(fused[#loc77, #loc78])
#loc202 = loc(fused[#loc81, #loc82])
#loc203 = loc(fused[#loc85, #loc84])
#loc204 = loc(fused[#loc86, #loc87])
#loc205 = loc(fused[#loc88, #loc89])
#loc206 = loc(fused[#loc90, #loc91])
#loc207 = loc(fused[#loc92, #loc93])
#loc208 = loc(fused[#loc95, #loc94])
#loc209 = loc(fused[#loc96, #loc97])
#loc210 = loc(fused[#loc98, #loc99])
#loc211 = loc(fused[#loc102, #loc103])
#loc212 = loc(fused[#loc101, #loc103])
#loc213 = loc(fused[#loc100, #loc99])
#loc214 = loc(fused[#loc104, #loc105])
#loc215 = loc(fused[#loc106, #loc107])
#loc216 = loc(fused[#loc108, #loc105])
#loc217 = loc(fused[#loc116, #loc117])
#loc218 = loc(fused[#loc119, #loc118])
#loc219 = loc(fused[#loc124, #loc123])
#loc220 = loc(fused[#loc127, #loc125])
#loc221 = loc(fused[#loc130, #loc131])
#loc222 = loc(fused[#loc132, #loc133])
#loc223 = loc(fused[#loc134, #loc135])
#loc224 = loc(fused[#loc136, #loc137])
#loc225 = loc(fused[#loc139, #loc138])
#loc226 = loc(fused[#loc140, #loc141])
#loc227 = loc(fused[#loc142, #loc143])
#loc228 = loc(fused[#loc146, #loc147])
#loc229 = loc(fused[#loc145, #loc147])
#loc230 = loc(fused[#loc144, #loc143])
#loc231 = loc(fused[#loc148, #loc149])
#loc232 = loc(fused[#loc150, #loc151])
#loc233 = loc(fused[#loc152, #loc149])
#loc234 = loc(fused[#loc162, #loc161])
#loc235 = loc(fused[#loc167, #loc166])
#loc236 = loc(fused[#loc170, #loc168])
