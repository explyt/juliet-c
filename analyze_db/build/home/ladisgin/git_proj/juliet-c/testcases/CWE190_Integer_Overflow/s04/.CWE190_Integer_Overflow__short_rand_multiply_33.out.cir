!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc17 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":31:19)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":73:19)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":110:10)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":110:14)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":110:20)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":110:32)
#loc164 = loc(fused[#loc104, #loc105])
#loc165 = loc(fused[#loc106, #loc107])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc120)
  cir.func private @printIntLine(!s32i) loc(#loc121)
  cir.func @_ZN47CWE190_Integer_Overflow__short_rand_multiply_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc123)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc124)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc125)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc126)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc14)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc15)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc127)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc17)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc17)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
    cir.br ^bb3(%21 : !u32i) loc(#loc17)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc17)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc17)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc17)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc17)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc17)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc17)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc17)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc17)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc17)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc17)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc17)
    cir.br ^bb3(%37 : !u32i) loc(#loc17)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":31:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc17)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc17)
    cir.store %40, %2 : !s16i, !cir.ptr<!s16i> loc(#loc128)
    cir.br ^bb5 loc(#loc129)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc8)
    %42 = cir.load %41 : !cir.ptr<!s16i>, !s16i loc(#loc8)
    cir.store %42, %0 : !s16i, !cir.ptr<!s16i> loc(#loc123)
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc23)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc23)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc131)
    cir.brcond %46 ^bb7, ^bb8 loc(#loc132)
  ^bb7:  // pred: ^bb6
    %47 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc26)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc26)
    %49 = cir.const #cir.int<2> : !s32i loc(#loc10)
    %50 = cir.binop(mul, %48, %49) nsw : !s32i loc(#loc26)
    %51 = cir.cast(integral, %50 : !s32i), !s16i loc(#loc26)
    cir.store %51, %1 : !s16i, !cir.ptr<!s16i> loc(#loc124)
    %52 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc27)
    %53 = cir.cast(integral, %52 : !s16i), !s32i loc(#loc27)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc28)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc20)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc122)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__short_rand_multiply_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc134)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc135)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc136)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc137)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc38)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc39)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc39)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc138)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc41)
    %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc41)
    cir.store %7, %2 : !s16i, !cir.ptr<!s16i> loc(#loc139)
    cir.br ^bb1 loc(#loc140)
  ^bb1:  // pred: ^bb0
    %8 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc32)
    %9 = cir.load %8 : !cir.ptr<!s16i>, !s16i loc(#loc32)
    cir.store %9, %0 : !s16i, !cir.ptr<!s16i> loc(#loc134)
    cir.br ^bb2 loc(#loc141)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc47)
    %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc47)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc142)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc143)
  ^bb3:  // pred: ^bb2
    %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc50)
    %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc50)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc50)
    %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc50)
    cir.store %18, %1 : !s16i, !cir.ptr<!s16i> loc(#loc135)
    %19 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc51)
    %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc51)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc52)
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc46)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc44)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc30)
  } loc(#loc133)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc53)
  cir.func internal private @_ZN47CWE190_Integer_Overflow__short_rand_multiply_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data", init] {alignment = 2 : i64} loc(#loc145)
    %1 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc146)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc147)
    %3 = cir.alloca !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc148)
    cir.store %2, %3 : !cir.ptr<!s16i>, !cir.ptr<!cir.ptr<!s16i>> loc(#loc63)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %5 = cir.cast(integral, %4 : !s32i), !s16i loc(#loc64)
    cir.store %5, %2 : !s16i, !cir.ptr<!s16i> loc(#loc149)
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc66)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %9 ^bb1, ^bb2 loc(#loc66)
  ^bb1:  // pred: ^bb0
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc66)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc66)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc66)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc66)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc66)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc66)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc66)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc66)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc66)
    cir.br ^bb3(%21 : !u32i) loc(#loc66)
  ^bb2:  // pred: ^bb0
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc66)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc66)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc66)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc66)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc66)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc66)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc66)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc66)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc66)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc66)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc66)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc66)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc66)
    cir.br ^bb3(%37 : !u32i) loc(#loc66)
  ^bb3(%38: !u32i loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":73:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // pred: ^bb3
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc66)
    %40 = cir.cast(integral, %39 : !s32i), !s16i loc(#loc66)
    cir.store %40, %2 : !s16i, !cir.ptr<!s16i> loc(#loc150)
    cir.br ^bb5 loc(#loc151)
  ^bb5:  // pred: ^bb4
    %41 = cir.load %3 : !cir.ptr<!cir.ptr<!s16i>>, !cir.ptr<!s16i> loc(#loc57)
    %42 = cir.load %41 : !cir.ptr<!s16i>, !s16i loc(#loc57)
    cir.store %42, %0 : !s16i, !cir.ptr<!s16i> loc(#loc145)
    cir.br ^bb6 loc(#loc152)
  ^bb6:  // pred: ^bb5
    %43 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc72)
    %44 = cir.cast(integral, %43 : !s16i), !s32i loc(#loc72)
    %45 = cir.const #cir.int<0> : !s32i loc(#loc73)
    %46 = cir.cmp(gt, %44, %45) : !s32i, !cir.bool loc(#loc153)
    cir.brcond %46 ^bb7, ^bb13 loc(#loc154)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc155)
  ^bb8:  // pred: ^bb7
    %47 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc77)
    %48 = cir.cast(integral, %47 : !s16i), !s32i loc(#loc77)
    %49 = cir.const #cir.int<32767> : !s32i loc(#loc78)
    %50 = cir.const #cir.int<2> : !s32i loc(#loc79)
    %51 = cir.binop(div, %49, %50) : !s32i loc(#loc156)
    %52 = cir.cmp(lt, %48, %51) : !s32i, !cir.bool loc(#loc157)
    cir.brcond %52 ^bb9, ^bb10 loc(#loc158)
  ^bb9:  // pred: ^bb8
    %53 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc84)
    %54 = cir.cast(integral, %53 : !s16i), !s32i loc(#loc84)
    %55 = cir.const #cir.int<2> : !s32i loc(#loc59)
    %56 = cir.binop(mul, %54, %55) nsw : !s32i loc(#loc84)
    %57 = cir.cast(integral, %56 : !s32i), !s16i loc(#loc84)
    cir.store %57, %1 : !s16i, !cir.ptr<!s16i> loc(#loc146)
    %58 = cir.load %1 : !cir.ptr<!s16i>, !s16i loc(#loc85)
    %59 = cir.cast(integral, %58 : !s16i), !s32i loc(#loc85)
    cir.call @printIntLine(%59) : (!s32i) -> () loc(#loc86)
    cir.br ^bb11 loc(#loc82)
  ^bb10:  // pred: ^bb8
    %60 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc53)
    %61 = cir.cast(array_to_ptrdecay, %60 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.br ^bb11 loc(#loc76)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc76)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc71)
  ^bb13:  // 2 preds: ^bb6, ^bb12
    cir.br ^bb14 loc(#loc71)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc69)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc55)
  } loc(#loc144)
  cir.func @_ZN47CWE190_Integer_Overflow__short_rand_multiply_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN47CWE190_Integer_Overflow__short_rand_multiply_33L7goodG2BEv() : () -> () loc(#loc90)
    cir.call @_ZN47CWE190_Integer_Overflow__short_rand_multiply_33L7goodB2GEv() : () -> () loc(#loc91)
    cir.return loc(#loc89)
  } loc(#loc159)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc160)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc161)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc101)
  cir.func @main(%arg0: !s32i loc(fused[#loc104, #loc105]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc106, #loc107])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc103)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc108)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc109)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc110)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc110)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc111)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc98)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.call @_ZN47CWE190_Integer_Overflow__short_rand_multiply_334goodEv() : () -> () loc(#loc113)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc99)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc114)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc100)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc115)
    cir.call @_ZN47CWE190_Integer_Overflow__short_rand_multiply_333badEv() : () -> () loc(#loc116)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc101)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc118)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %15 : !s32i loc(#loc166)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":25:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":41:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":33:9)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":33:22)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":37:13)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":37:35)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":27:5)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":27:11)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":28:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":28:22)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":29:12)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":29:5)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":31:5)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":32:5)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":40:5)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":34:9)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":39:9)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":34:12)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":34:19)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":35:9)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":37:28)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":38:26)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":38:13)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":48:1)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":64:1)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":56:9)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":56:22)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":60:13)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":60:35)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":50:5)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":50:11)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":51:5)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":51:22)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":52:12)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":52:5)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":54:12)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":54:5)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":55:5)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":63:5)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":57:9)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":62:9)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":57:12)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":57:19)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":58:9)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":60:28)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":61:26)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":61:13)
#loc53 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":86:27)
#loc54 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":67:1)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":90:1)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":75:9)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":75:22)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":81:17)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":81:39)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":69:5)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":69:11)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":70:5)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":70:22)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":71:12)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":71:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":73:5)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":74:5)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":89:5)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":76:9)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":88:9)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":76:12)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":76:19)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":77:9)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":79:13)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":87:13)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":79:17)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":79:25)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":79:34)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":79:35)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":80:13)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":83:13)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":85:13)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":81:32)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":82:30)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":82:17)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":86:17)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":92:1)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":96:1)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":94:5)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":95:5)
#loc92 = loc("/usr/include/stdlib.h":575:1)
#loc93 = loc("/usr/include/stdlib.h":575:41)
#loc94 = loc("/usr/include/time.h":76:1)
#loc95 = loc("/usr/include/time.h":76:38)
#loc96 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":115:15)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":117:15)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":120:15)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":122:15)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":110:1)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":125:1)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":111:1)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":113:27)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":113:22)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":113:5)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":115:5)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":116:5)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":117:5)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":120:5)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":121:5)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":122:5)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":124:12)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_multiply_33.cpp":124:5)
#loc120 = loc(fused[#loc1, #loc2])
#loc121 = loc(fused[#loc3, #loc4])
#loc122 = loc(fused[#loc5, #loc6])
#loc123 = loc(fused[#loc7, #loc8])
#loc124 = loc(fused[#loc9, #loc10])
#loc125 = loc(fused[#loc11, #loc12])
#loc126 = loc(fused[#loc13, #loc14])
#loc127 = loc(fused[#loc16, #loc15])
#loc128 = loc(fused[#loc18, #loc17])
#loc129 = loc(fused[#loc19, #loc20])
#loc130 = loc(fused[#loc21, #loc22])
#loc131 = loc(fused[#loc23, #loc24])
#loc132 = loc(fused[#loc25, #loc22])
#loc133 = loc(fused[#loc29, #loc30])
#loc134 = loc(fused[#loc31, #loc32])
#loc135 = loc(fused[#loc33, #loc34])
#loc136 = loc(fused[#loc35, #loc36])
#loc137 = loc(fused[#loc37, #loc38])
#loc138 = loc(fused[#loc40, #loc39])
#loc139 = loc(fused[#loc42, #loc41])
#loc140 = loc(fused[#loc43, #loc44])
#loc141 = loc(fused[#loc45, #loc46])
#loc142 = loc(fused[#loc47, #loc48])
#loc143 = loc(fused[#loc49, #loc46])
#loc144 = loc(fused[#loc54, #loc55])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc58, #loc59])
#loc147 = loc(fused[#loc60, #loc61])
#loc148 = loc(fused[#loc62, #loc63])
#loc149 = loc(fused[#loc65, #loc64])
#loc150 = loc(fused[#loc67, #loc66])
#loc151 = loc(fused[#loc68, #loc69])
#loc152 = loc(fused[#loc70, #loc71])
#loc153 = loc(fused[#loc72, #loc73])
#loc154 = loc(fused[#loc74, #loc71])
#loc155 = loc(fused[#loc75, #loc76])
#loc156 = loc(fused[#loc78, #loc79])
#loc157 = loc(fused[#loc77, #loc80])
#loc158 = loc(fused[#loc81, #loc82, #loc83, #loc76])
#loc159 = loc(fused[#loc88, #loc89])
#loc160 = loc(fused[#loc92, #loc93])
#loc161 = loc(fused[#loc94, #loc95])
#loc162 = loc(fused[#loc96, #loc97])
#loc163 = loc(fused[#loc102, #loc103])
#loc166 = loc(fused[#loc119, #loc118])
