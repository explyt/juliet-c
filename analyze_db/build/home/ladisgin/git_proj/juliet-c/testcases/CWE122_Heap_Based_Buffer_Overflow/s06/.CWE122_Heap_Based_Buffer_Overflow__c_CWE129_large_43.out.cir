!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":25:23)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":25:28)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":70:27)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":70:32)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":112:27)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":112:32)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":170:10)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":170:14)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":170:20)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":170:32)
#true = #cir.bool<true> : !cir.bool
#loc262 = loc(fused[#loc3, #loc4])
#loc295 = loc(fused[#loc85, #loc86])
#loc323 = loc(fused[#loc157, #loc158])
#loc355 = loc(fused[#loc245, #loc246])
#loc356 = loc(fused[#loc247, #loc248])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L9badSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc3, #loc4])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc262)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc5)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc6)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc7)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    cir.return loc(#loc2)
  } loc(#loc261)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc264)
  cir.func private @exit(!s32i) extra(#fn_attr1) loc(#loc265)
  cir.func private @printIntLine(!s32i) loc(#loc266)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc267)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc16)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr1) loc(#loc268)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_433badEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc270)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L9badSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc26)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc273)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc274)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc33)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc34)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc34)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc275)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc276)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc33)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc277)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc274)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc40)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc279)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc42)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc43)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc44)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr1) loc(#loc42)
        } loc(#loc280)
      } loc(#loc278)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc47)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc282)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc50)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc283)
          cir.condition(%18) loc(#loc283)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc52)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc53)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc54)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc284)
          cir.yield loc(#loc46)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc55)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc56)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc285)
          cir.yield loc(#loc281)
        } loc(#loc281)
      } loc(#loc281)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc60)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc287)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc65)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc67)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc289)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc70)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc72)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc73)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc292)
              cir.condition(%25) loc(#loc292)
            } body {
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc76)
              %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc74)
              cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc77)
              cir.yield loc(#loc69)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc79)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc293)
              cir.yield loc(#loc290)
            } loc(#loc290)
          } loc(#loc290)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc16)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc16)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc80)
        } loc(#loc288)
      } loc(#loc286)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc81)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc82)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc82)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc81)
    } loc(#loc272)
    cir.return loc(#loc20)
  } loc(#loc269)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L13goodG2BSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc85, #loc86])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc295)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc87)
    %1 = cir.const #cir.int<7> : !s32i loc(#loc88)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc296)
    cir.return loc(#loc84)
  } loc(#loc294)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc94)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc95)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L13goodG2BSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc97)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc301)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc302)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc104)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc105)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc105)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc303)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc304)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc104)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc305)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc302)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc111)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc307)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc113)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc114)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc115)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr1) loc(#loc113)
        } loc(#loc308)
      } loc(#loc306)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc118)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc310)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc121)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc311)
          cir.condition(%18) loc(#loc311)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc123)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc124)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc125)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc312)
          cir.yield loc(#loc117)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc127)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc313)
          cir.yield loc(#loc309)
        } loc(#loc309)
      } loc(#loc309)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc131)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc315)
        cir.if %17 {
          %18 = cir.const #cir.int<1> : !s32i loc(#loc135)
          %19 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc136)
          %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
          %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc138)
          cir.store %18, %21 : !s32i, !cir.ptr<!s32i> loc(#loc317)
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc141)
            cir.store %22, %3 : !s32i, !cir.ptr<!s32i> loc(#loc319)
            cir.for : cond {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %24 = cir.const #cir.int<10> : !s32i loc(#loc144)
              %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc320)
              cir.condition(%25) loc(#loc320)
            } body {
              %23 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc146)
              %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc147)
              %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc145)
              cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc148)
              cir.yield loc(#loc140)
            } step {
              %23 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc149)
              %24 = cir.unary(inc, %23) : !s32i, !s32i loc(#loc150)
              cir.store %24, %3 : !s32i, !cir.ptr<!s32i> loc(#loc321)
              cir.yield loc(#loc318)
            } loc(#loc318)
          } loc(#loc318)
        } else {
          %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc151)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc152)
        } loc(#loc316)
      } loc(#loc314)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc153)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc154)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc153)
    } loc(#loc300)
    cir.return loc(#loc91)
  } loc(#loc297)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L13goodB2GSourceERi(%arg0: !cir.ptr<!s32i> loc(fused[#loc157, #loc158])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc323)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
    %1 = cir.const #cir.int<10> : !s32i loc(#loc160)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc161)
    cir.store %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc324)
    cir.return loc(#loc156)
  } loc(#loc322)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc162)
  cir.func internal private @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc326)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc167)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc168)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc327)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L13goodB2GSourceERi(%0) : (!cir.ptr<!s32i>) -> () loc(#loc170)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc329)
      %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc330)
      %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc177)
      %6 = cir.const #cir.int<10> : !s32i loc(#loc178)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc178)
      %8 = cir.const #cir.int<4> : !u64i loc(#loc331)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc332)
      %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr1) loc(#loc177)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc333)
      cir.store %11, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc330)
      cir.scope {
        %15 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc183)
        %16 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc184)
        %17 = cir.cmp(eq, %15, %16) : !cir.ptr<!s32i>, !cir.bool loc(#loc335)
        cir.if %17 {
          %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc186)
          %19 = cir.const #cir.int<1> : !s32i loc(#loc187)
          %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc188)
          cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr1) loc(#loc186)
        } loc(#loc336)
      } loc(#loc334)
      cir.scope {
        %15 = cir.const #cir.int<0> : !s32i loc(#loc191)
        cir.store %15, %3 : !s32i, !cir.ptr<!s32i> loc(#loc338)
        cir.for : cond {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc193)
          %17 = cir.const #cir.int<10> : !s32i loc(#loc194)
          %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc339)
          cir.condition(%18) loc(#loc339)
        } body {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc195)
          %17 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc196)
          %18 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc197)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc198)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc340)
          cir.yield loc(#loc190)
        } step {
          %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc199)
          %17 = cir.unary(inc, %16) : !s32i, !s32i loc(#loc200)
          cir.store %17, %3 : !s32i, !cir.ptr<!s32i> loc(#loc341)
          cir.yield loc(#loc337)
        } loc(#loc337)
      } loc(#loc337)
      cir.scope {
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
        %16 = cir.const #cir.int<0> : !s32i loc(#loc204)
        %17 = cir.cmp(ge, %15, %16) : !s32i, !cir.bool loc(#loc343)
        %18 = cir.ternary(%17, true {
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc206)
          %20 = cir.const #cir.int<10> : !s32i loc(#loc207)
          %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc344)
          %22 = cir.ternary(%21, true {
            %23 = cir.const #true loc(#loc205)
            cir.yield %23 : !cir.bool loc(#loc205)
          }, false {
            %23 = cir.const #false loc(#loc205)
            cir.yield %23 : !cir.bool loc(#loc205)
          }) : (!cir.bool) -> !cir.bool loc(#loc205)
          cir.yield %22 : !cir.bool loc(#loc205)
        }, false {
          %19 = cir.const #false loc(#loc205)
          cir.yield %19 : !cir.bool loc(#loc205)
        }) : (!cir.bool) -> !cir.bool loc(#loc205)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc212)
          %20 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
          %21 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc214)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc215)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc346)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc218)
            cir.store %23, %3 : !s32i, !cir.ptr<!s32i> loc(#loc348)
            cir.for : cond {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc221)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc349)
              cir.condition(%26) loc(#loc349)
            } body {
              %24 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc222)
              %25 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc223)
              %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc224)
              %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc222)
              cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc225)
              cir.yield loc(#loc217)
            } step {
              %24 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc226)
              %25 = cir.unary(inc, %24) : !s32i, !s32i loc(#loc227)
              cir.store %25, %3 : !s32i, !cir.ptr<!s32i> loc(#loc350)
              cir.yield loc(#loc347)
            } loc(#loc347)
          } loc(#loc347)
        } else {
          %19 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc162)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc162)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc228)
        } loc(#loc345)
      } loc(#loc342)
      %12 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc229)
      %13 = cir.load %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc230)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc230)
      cir.call @free(%14) : (!cir.ptr<!void>) -> () extra(#fn_attr1) loc(#loc229)
    } loc(#loc328)
    cir.return loc(#loc164)
  } loc(#loc325)
  cir.func @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_434goodEv() extra(#fn_attr) {
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L7goodG2BEv() : () -> () loc(#loc233)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43L7goodB2GEv() : () -> () loc(#loc234)
    cir.return loc(#loc232)
  } loc(#loc351)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc352)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc353)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc241)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc242)
  cir.func @main(%arg0: !s32i loc(fused[#loc245, #loc246]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc247, #loc248])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc355)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc356)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc244)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc249)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc249)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc250)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc251)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc251)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc252)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc239)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc239)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc253)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_434goodEv() : () -> () loc(#loc254)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc240)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc240)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc255)
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc241)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc241)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc256)
    cir.call @_ZN52CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_433badEv() : () -> () loc(#loc257)
    %12 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc242)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc242)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc258)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc259)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc357)
    cir.return %15 : !s32i loc(#loc357)
  } loc(#loc354)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":25:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":29:1)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":26:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":28:12)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":28:5)
#loc8 = loc("/usr/include/stdlib.h":672:1)
#loc9 = loc("/usr/include/stdlib.h":672:45)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc15 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":59:23)
#loc17 = loc("/usr/include/stdlib.h":687:1)
#loc18 = loc("/usr/include/stdlib.h":687:32)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":31:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":63:1)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":33:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":33:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":35:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":35:12)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":35:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":36:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":37:5)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":62:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":38:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":38:13)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:54)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:31)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:38)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":39:53)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:39)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:13)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:29)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:30)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:36)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":40:35)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":45:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:25)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":44:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":44:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":44:20)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":44:21)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:30)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":42:29)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":48:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":60:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":48:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":48:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":49:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":56:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":58:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":50:28)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":50:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":50:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":50:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":55:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:21)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:17)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:28)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":54:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":54:37)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":54:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":54:17)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":52:32)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":59:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":61:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":61:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":70:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":75:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":71:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":74:12)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":74:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":77:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":109:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":79:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":79:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":81:13)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":81:12)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":81:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":82:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":83:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":108:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":84:9)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":84:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:54)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:31)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:38)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:43)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":85:53)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:39)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:13)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:23)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:29)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:36)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":86:35)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":91:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:14)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:21)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:25)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":90:25)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":90:13)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":90:20)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":90:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:30)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":88:29)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":94:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":106:9)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":94:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":94:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":95:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":102:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":104:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":96:28)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":96:13)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":96:20)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":96:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":101:13)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:21)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:24)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:28)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":100:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":100:37)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":100:38)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":100:17)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:33)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":98:32)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":105:23)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":105:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":107:9)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":107:14)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":112:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":116:1)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":113:1)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":115:12)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":115:5)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":145:23)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":118:1)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":149:1)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":120:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":120:9)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":122:13)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":122:12)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":122:5)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":123:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":124:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":148:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":125:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":125:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:9)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:54)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:38)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:43)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":126:53)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:39)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:13)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:23)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:29)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:30)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":127:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":132:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:18)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:14)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:21)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:25)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":131:25)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":131:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":131:20)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":131:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:30)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":129:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:9)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":146:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:21)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:23)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:26)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:34)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":134:36)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":135:9)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":142:9)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":144:9)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":136:28)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":136:13)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":136:20)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":136:24)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:13)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":141:13)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:21)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:17)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:24)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:28)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":140:30)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":140:37)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":140:38)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":140:17)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:33)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":138:32)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":145:13)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":147:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":147:14)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":151:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":155:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":153:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":154:5)
#loc235 = loc("/usr/include/stdlib.h":575:1)
#loc236 = loc("/usr/include/stdlib.h":575:41)
#loc237 = loc("/usr/include/time.h":76:1)
#loc238 = loc("/usr/include/time.h":76:38)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":175:15)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":177:15)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":180:15)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":182:15)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":170:1)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":185:1)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":171:1)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":173:27)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":173:22)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":173:5)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":175:5)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":176:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":177:5)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":180:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":181:5)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":182:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":184:12)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_large_43.cpp":184:5)
#loc261 = loc(fused[#loc1, #loc2])
#loc263 = loc(fused[#loc7, #loc6])
#loc264 = loc(fused[#loc8, #loc9])
#loc265 = loc(fused[#loc10, #loc11])
#loc266 = loc(fused[#loc12, #loc13])
#loc267 = loc(fused[#loc14, #loc15])
#loc268 = loc(fused[#loc17, #loc18])
#loc269 = loc(fused[#loc19, #loc20])
#loc270 = loc(fused[#loc21, #loc22])
#loc271 = loc(fused[#loc25, #loc23])
#loc272 = loc(fused[#loc27, #loc28])
#loc273 = loc(fused[#loc29, #loc30])
#loc274 = loc(fused[#loc31, #loc32])
#loc275 = loc(fused[#loc35, #loc36])
#loc276 = loc(fused[#loc34, #loc36])
#loc277 = loc(fused[#loc33, #loc32])
#loc278 = loc(fused[#loc37, #loc38])
#loc279 = loc(fused[#loc39, #loc40])
#loc280 = loc(fused[#loc41, #loc38])
#loc281 = loc(fused[#loc45, #loc46])
#loc282 = loc(fused[#loc48, #loc47])
#loc283 = loc(fused[#loc49, #loc50])
#loc284 = loc(fused[#loc52, #loc51])
#loc285 = loc(fused[#loc56, #loc55])
#loc286 = loc(fused[#loc57, #loc58])
#loc287 = loc(fused[#loc59, #loc60])
#loc288 = loc(fused[#loc61, #loc62, #loc63, #loc58])
#loc289 = loc(fused[#loc65, #loc64])
#loc290 = loc(fused[#loc68, #loc69])
#loc291 = loc(fused[#loc71, #loc70])
#loc292 = loc(fused[#loc72, #loc73])
#loc293 = loc(fused[#loc79, #loc78])
#loc294 = loc(fused[#loc83, #loc84])
#loc296 = loc(fused[#loc89, #loc88])
#loc297 = loc(fused[#loc90, #loc91])
#loc298 = loc(fused[#loc92, #loc93])
#loc299 = loc(fused[#loc96, #loc94])
#loc300 = loc(fused[#loc98, #loc99])
#loc301 = loc(fused[#loc100, #loc101])
#loc302 = loc(fused[#loc102, #loc103])
#loc303 = loc(fused[#loc106, #loc107])
#loc304 = loc(fused[#loc105, #loc107])
#loc305 = loc(fused[#loc104, #loc103])
#loc306 = loc(fused[#loc108, #loc109])
#loc307 = loc(fused[#loc110, #loc111])
#loc308 = loc(fused[#loc112, #loc109])
#loc309 = loc(fused[#loc116, #loc117])
#loc310 = loc(fused[#loc119, #loc118])
#loc311 = loc(fused[#loc120, #loc121])
#loc312 = loc(fused[#loc123, #loc122])
#loc313 = loc(fused[#loc127, #loc126])
#loc314 = loc(fused[#loc128, #loc129])
#loc315 = loc(fused[#loc130, #loc131])
#loc316 = loc(fused[#loc132, #loc133, #loc134, #loc129])
#loc317 = loc(fused[#loc136, #loc135])
#loc318 = loc(fused[#loc139, #loc140])
#loc319 = loc(fused[#loc142, #loc141])
#loc320 = loc(fused[#loc143, #loc144])
#loc321 = loc(fused[#loc150, #loc149])
#loc322 = loc(fused[#loc155, #loc156])
#loc324 = loc(fused[#loc161, #loc160])
#loc325 = loc(fused[#loc163, #loc164])
#loc326 = loc(fused[#loc165, #loc166])
#loc327 = loc(fused[#loc169, #loc167])
#loc328 = loc(fused[#loc171, #loc172])
#loc329 = loc(fused[#loc173, #loc174])
#loc330 = loc(fused[#loc175, #loc176])
#loc331 = loc(fused[#loc179, #loc180])
#loc332 = loc(fused[#loc178, #loc180])
#loc333 = loc(fused[#loc177, #loc176])
#loc334 = loc(fused[#loc181, #loc182])
#loc335 = loc(fused[#loc183, #loc184])
#loc336 = loc(fused[#loc185, #loc182])
#loc337 = loc(fused[#loc189, #loc190])
#loc338 = loc(fused[#loc192, #loc191])
#loc339 = loc(fused[#loc193, #loc194])
#loc340 = loc(fused[#loc196, #loc195])
#loc341 = loc(fused[#loc200, #loc199])
#loc342 = loc(fused[#loc201, #loc202])
#loc343 = loc(fused[#loc203, #loc204])
#loc344 = loc(fused[#loc206, #loc208])
#loc345 = loc(fused[#loc209, #loc210, #loc211, #loc202])
#loc346 = loc(fused[#loc213, #loc212])
#loc347 = loc(fused[#loc216, #loc217])
#loc348 = loc(fused[#loc219, #loc218])
#loc349 = loc(fused[#loc220, #loc221])
#loc350 = loc(fused[#loc227, #loc226])
#loc351 = loc(fused[#loc231, #loc232])
#loc352 = loc(fused[#loc235, #loc236])
#loc353 = loc(fused[#loc237, #loc238])
#loc354 = loc(fused[#loc243, #loc244])
#loc357 = loc(fused[#loc260, #loc259])
