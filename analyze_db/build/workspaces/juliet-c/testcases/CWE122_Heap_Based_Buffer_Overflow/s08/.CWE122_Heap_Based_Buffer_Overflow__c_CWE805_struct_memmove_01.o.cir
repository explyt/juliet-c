!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc129)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc130)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc131)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc132)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc135)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc15)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc16)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc16)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc136)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc137)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc138)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc139)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc23)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc24)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc24)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc141)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc26)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc27)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc28)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc26)
      } loc(#loc142)
    } loc(#loc140)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc144)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc146)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc39)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc39)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc148)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc42)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc42)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc149)
            cir.condition(%30) loc(#loc43)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc45)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc46)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc47)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc47)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc48)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc151)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc49)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc50)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc152)
            } loc(#loc150)
            cir.yield loc(#loc38)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc53)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc54)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc153)
            cir.yield loc(#loc147)
          } loc(#loc147)
        } loc(#loc147)
      } loc(#loc145)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc55)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc56)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc56)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc57)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc57)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc154)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc155)
      cir.libc.memmove %17 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc156)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc62)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc63)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc64)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc65)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc66)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc67)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc143)
    cir.return loc(#loc10)
  } loc(#loc133)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc158)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc70)
    cir.return loc(#loc69)
  } loc(#loc157)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
    cir.store %1, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc161)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc78)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc79)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc162)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc163)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc78)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc164)
    cir.store %8, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc165)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc86)
      %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc87)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc87)
      %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc167)
      cir.if %12 {
        %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc89)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc91)
        cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc89)
      } loc(#loc168)
    } loc(#loc166)
    cir.scope {
      %9 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc170)
      cir.scope {
        %24 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc172)
        cir.scope {
          %25 = cir.const #cir.int<0> : !s32i loc(#loc102)
          %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc102)
          cir.store %26, %24 : !u64i, !cir.ptr<!u64i> loc(#loc174)
          cir.for : cond {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc104)
            %28 = cir.const #cir.int<100> : !s32i loc(#loc105)
            %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc105)
            %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc175)
            cir.condition(%30) loc(#loc106)
          } body {
            cir.scope {
              %27 = cir.const #cir.int<0> : !s32i loc(#loc108)
              %28 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc109)
              %29 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
              %30 = cir.ptr_stride(%29 : !cir.ptr<!ty__twoIntsStruct>, %28 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc110)
              %31 = cir.get_member %30[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc48)
              cir.store %27, %31 : !s32i, !cir.ptr<!s32i> loc(#loc177)
              %32 = cir.const #cir.int<0> : !s32i loc(#loc111)
              %33 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc112)
              %34 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
              %35 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %33 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc113)
              %36 = cir.get_member %35[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc52)
              cir.store %32, %36 : !s32i, !cir.ptr<!s32i> loc(#loc178)
            } loc(#loc176)
            cir.yield loc(#loc101)
          } step {
            %27 = cir.load %24 : !cir.ptr<!u64i>, !u64i loc(#loc114)
            %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc115)
            cir.store %28, %24 : !u64i, !cir.ptr<!u64i> loc(#loc179)
            cir.yield loc(#loc173)
          } loc(#loc173)
        } loc(#loc173)
      } loc(#loc171)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc116)
      %11 = cir.cast(bitcast, %10 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc116)
      %12 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc117)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc117)
      %14 = cir.const #cir.int<100> : !s32i loc(#loc118)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc118)
      %16 = cir.const #cir.int<8> : !u64i loc(#loc180)
      %17 = cir.binop(mul, %15, %16) : !u64i loc(#loc181)
      cir.libc.memmove %17 bytes from %13 to %11 : !cir.ptr<!void>, !u64i loc(#loc182)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
      %19 = cir.const #cir.int<0> : !s32i loc(#loc124)
      %20 = cir.ptr_stride(%18 : !cir.ptr<!ty__twoIntsStruct>, %19 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc125)
      cir.call @printStructLine(%20) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc126)
      %21 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc127)
      %22 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc128)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc128)
      cir.call @free(%23) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc127)
    } loc(#loc169)
    cir.return loc(#loc73)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":23:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:29)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:36)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:39)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:59)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:60)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":26:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:33)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:17)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:24)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:30)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":27:29)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":28:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":43:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":29:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":29:33)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":30:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":38:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":31:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":31:20)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":37:13)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":34:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":35:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":35:24)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":35:17)
#loc48 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":36:36)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":36:24)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":36:17)
#loc52 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:35)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":33:34)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:31)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:35)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:55)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":40:56)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":41:26)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":41:31)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":41:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":41:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":42:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":42:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":76:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":79:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":78:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":78:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":51:1)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":74:1)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":53:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":53:21)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":54:12)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":54:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:29)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:36)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:40)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:60)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:61)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":56:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:33)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:17)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:24)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:30)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":57:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":58:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":73:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":59:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":59:33)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":60:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":68:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":61:13)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":61:20)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":67:13)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:22)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:18)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:25)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:29)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:27)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":64:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":65:36)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":65:24)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":65:17)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":66:36)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":66:24)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":66:17)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:35)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":63:34)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:17)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:23)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:55)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":70:56)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":71:26)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":71:31)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":71:32)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":71:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":72:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memmove_01.c":72:14)
#loc129 = loc(fused[#loc1, #loc2])
#loc130 = loc(fused[#loc3, #loc4])
#loc131 = loc(fused[#loc5, #loc6])
#loc132 = loc(fused[#loc7, #loc8])
#loc133 = loc(fused[#loc9, #loc10])
#loc134 = loc(fused[#loc11, #loc12])
#loc135 = loc(fused[#loc14, #loc13])
#loc136 = loc(fused[#loc17, #loc18])
#loc137 = loc(fused[#loc16, #loc18])
#loc138 = loc(fused[#loc15, #loc19])
#loc139 = loc(fused[#loc20, #loc19])
#loc140 = loc(fused[#loc21, #loc22])
#loc141 = loc(fused[#loc23, #loc24])
#loc142 = loc(fused[#loc25, #loc22])
#loc143 = loc(fused[#loc29, #loc30])
#loc144 = loc(fused[#loc31, #loc32])
#loc145 = loc(fused[#loc33, #loc34])
#loc146 = loc(fused[#loc35, #loc36])
#loc147 = loc(fused[#loc37, #loc38])
#loc148 = loc(fused[#loc40, #loc39])
#loc149 = loc(fused[#loc41, #loc42])
#loc150 = loc(fused[#loc44, #loc38])
#loc151 = loc(fused[#loc47, #loc45])
#loc152 = loc(fused[#loc51, #loc49])
#loc153 = loc(fused[#loc54, #loc53])
#loc154 = loc(fused[#loc58, #loc59])
#loc155 = loc(fused[#loc57, #loc59])
#loc156 = loc(fused[#loc60, #loc61])
#loc157 = loc(fused[#loc68, #loc69])
#loc158 = loc(fused[#loc70, #loc71])
#loc159 = loc(fused[#loc72, #loc73])
#loc160 = loc(fused[#loc74, #loc75])
#loc161 = loc(fused[#loc77, #loc76])
#loc162 = loc(fused[#loc80, #loc81])
#loc163 = loc(fused[#loc79, #loc81])
#loc164 = loc(fused[#loc78, #loc82])
#loc165 = loc(fused[#loc83, #loc82])
#loc166 = loc(fused[#loc84, #loc85])
#loc167 = loc(fused[#loc86, #loc87])
#loc168 = loc(fused[#loc88, #loc85])
#loc169 = loc(fused[#loc92, #loc93])
#loc170 = loc(fused[#loc94, #loc95])
#loc171 = loc(fused[#loc96, #loc97])
#loc172 = loc(fused[#loc98, #loc99])
#loc173 = loc(fused[#loc100, #loc101])
#loc174 = loc(fused[#loc103, #loc102])
#loc175 = loc(fused[#loc104, #loc105])
#loc176 = loc(fused[#loc107, #loc101])
#loc177 = loc(fused[#loc110, #loc108])
#loc178 = loc(fused[#loc113, #loc111])
#loc179 = loc(fused[#loc115, #loc114])
#loc180 = loc(fused[#loc119, #loc120])
#loc181 = loc(fused[#loc118, #loc120])
#loc182 = loc(fused[#loc121, #loc122])
