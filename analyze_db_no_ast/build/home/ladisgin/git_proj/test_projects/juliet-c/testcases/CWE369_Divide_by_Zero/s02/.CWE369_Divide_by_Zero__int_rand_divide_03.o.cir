!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc165)
  cir.func private  @printIntLine(!s32i) loc(#loc166)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc15)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc171)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc16)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc18)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc18)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc18)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc18)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc18)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc18)
          cir.yield %24 : !u32i loc(#loc18)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc18)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc18)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc18)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc18)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc18)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc18)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc18)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc18)
          cir.yield %28 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc18)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
      } loc(#loc172)
    } loc(#loc170)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc23)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc175)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc26)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc177)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc28)
      } loc(#loc176)
    } loc(#loc174)
    cir.return loc(#loc6)
  } loc(#loc167)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_rand_divide_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc179)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc180)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc37)
    cir.return loc(#loc30)
  } loc(#loc178)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc183)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc41)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc42)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc185)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc48)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc52)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc188)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc54)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc56)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc56)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          cir.yield %24 : !u32i loc(#loc56)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc56)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc56)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc56)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc56)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc56)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc56)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc56)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc56)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc56)
          cir.yield %28 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc56)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      } loc(#loc189)
    } loc(#loc187)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc192)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc62)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc70)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc195)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc71)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc75)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc76)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc197)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc77)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc42)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc42)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc78)
          } loc(#loc196)
        } loc(#loc194)
      } loc(#loc193)
    } loc(#loc191)
    cir.return loc(#loc44)
  } loc(#loc184)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc199)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc84)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc88)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc89)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc202)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc90)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc92)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc92)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc92)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc92)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc92)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc92)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc92)
          cir.yield %24 : !u32i loc(#loc92)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc92)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc92)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc92)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc92)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc92)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc92)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc92)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc92)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc92)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc92)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc92)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc92)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc92)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc92)
          cir.yield %28 : !u32i loc(#loc92)
        }) : (!cir.bool) -> !u32i loc(#loc92)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc92)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc204)
      } loc(#loc203)
    } loc(#loc201)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc96)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc97)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc206)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc103)
          %9 = cir.cmp(ne, %7, %8) : !s32i, !s32i loc(#loc209)
          %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc104)
          cir.if %10 {
            %11 = cir.const #cir.int<100> : !s32i loc(#loc108)
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %13 = cir.binop(div, %11, %12) : !s32i loc(#loc211)
            cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc110)
          } else {
            %11 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc111)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc111)
            cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc112)
          } loc(#loc210)
        } loc(#loc208)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc80)
  } loc(#loc198)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc118)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc122)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc123)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc216)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc128)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc128)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc129)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc130)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
      } loc(#loc217)
    } loc(#loc215)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc134)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc135)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc220)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc136)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc138)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc222)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc140)
      } loc(#loc221)
    } loc(#loc219)
    cir.return loc(#loc114)
  } loc(#loc212)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc224)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc145)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc146)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc150)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc151)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc227)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc152)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc154)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc229)
      } loc(#loc228)
    } loc(#loc226)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc158)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc159)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !s32i loc(#loc231)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc160)
      cir.if %6 {
        %7 = cir.const #cir.int<100> : !s32i loc(#loc162)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
        %9 = cir.binop(div, %7, %8) : !s32i loc(#loc233)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc164)
      } loc(#loc232)
    } loc(#loc230)
    cir.return loc(#loc142)
  } loc(#loc223)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_divide_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":37:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":26:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":31:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":27:8)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":27:11)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":27:9)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":28:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":30:16)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":30:9)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":32:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":32:8)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":32:11)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":32:9)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":33:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":35:22)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":35:28)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":35:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":139:1)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":145:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":141:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":141:14)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":142:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":142:14)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":143:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":143:14)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":144:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":144:14)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":57:19)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":68:23)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":44:1)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":71:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":46:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":46:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":48:13)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":48:12)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":48:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":49:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":53:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":49:8)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":49:11)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":49:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":50:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":52:16)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":52:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":54:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":70:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":54:8)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":54:11)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":54:9)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":55:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":58:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":60:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":57:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":62:9)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":69:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":62:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":62:21)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":62:18)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":63:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":65:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":67:9)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":64:26)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":64:32)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":64:13)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":68:13)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":74:1)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":96:1)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":76:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":76:9)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":78:13)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":78:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":78:5)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":79:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":83:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":79:8)
#loc89 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":79:11)
#loc90 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":79:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":80:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":82:16)
#loc93 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":82:9)
#loc94 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":84:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":95:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":84:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":84:11)
#loc98 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":84:9)
#loc99 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":85:5)
#loc100 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":87:9)
#loc101 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":94:9)
#loc102 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":87:13)
#loc103 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":87:21)
#loc104 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":87:18)
#loc105 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":88:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":90:9)
#loc107 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":92:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":89:26)
#loc109 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":89:32)
#loc110 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":89:13)
#loc111 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":93:23)
#loc112 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":93:13)
#loc113 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":99:1)
#loc114 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":119:1)
#loc115 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":101:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":101:9)
#loc117 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":103:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":103:12)
#loc119 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":103:5)
#loc120 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":104:5)
#loc121 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":113:5)
#loc122 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":104:8)
#loc123 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":104:11)
#loc124 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":104:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":105:5)
#loc126 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":108:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":110:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":107:19)
#loc129 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":107:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":112:16)
#loc131 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":112:9)
#loc132 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":114:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":118:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":114:8)
#loc135 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":114:11)
#loc136 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":114:9)
#loc137 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":115:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":117:22)
#loc139 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":117:28)
#loc140 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":117:9)
#loc141 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":122:1)
#loc142 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":137:1)
#loc143 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":124:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":124:9)
#loc145 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":126:13)
#loc146 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":126:12)
#loc147 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":126:5)
#loc148 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":127:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":131:5)
#loc150 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":127:8)
#loc151 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":127:11)
#loc152 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":127:9)
#loc153 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":128:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":130:16)
#loc155 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":130:9)
#loc156 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":132:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":136:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":132:8)
#loc159 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":132:11)
#loc160 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":132:9)
#loc161 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":133:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":135:22)
#loc163 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":135:28)
#loc164 = loc("CWE369_Divide_by_Zero__int_rand_divide_03.c":135:9)
#loc165 = loc(fused[#loc1, #loc2])
#loc166 = loc(fused[#loc3, #loc4])
#loc167 = loc(fused[#loc5, #loc6])
#loc168 = loc(fused[#loc7, #loc8])
#loc169 = loc(fused[#loc11, #loc9])
#loc170 = loc(fused[#loc12, #loc13])
#loc171 = loc(fused[#loc14, #loc15])
#loc172 = loc(fused[#loc17, #loc13])
#loc173 = loc(fused[#loc19, #loc18])
#loc174 = loc(fused[#loc20, #loc21])
#loc175 = loc(fused[#loc22, #loc23])
#loc176 = loc(fused[#loc25, #loc21])
#loc177 = loc(fused[#loc26, #loc27])
#loc178 = loc(fused[#loc29, #loc30])
#loc179 = loc(fused[#loc31, #loc32])
#loc180 = loc(fused[#loc33, #loc34])
#loc181 = loc(fused[#loc35, #loc36])
#loc182 = loc(fused[#loc37, #loc38])
#loc183 = loc(fused[#loc39, #loc40])
#loc184 = loc(fused[#loc43, #loc44])
#loc185 = loc(fused[#loc45, #loc46])
#loc186 = loc(fused[#loc49, #loc47])
#loc187 = loc(fused[#loc50, #loc51])
#loc188 = loc(fused[#loc52, #loc53])
#loc189 = loc(fused[#loc55, #loc51])
#loc190 = loc(fused[#loc57, #loc56])
#loc191 = loc(fused[#loc58, #loc59])
#loc192 = loc(fused[#loc60, #loc61])
#loc193 = loc(fused[#loc63, #loc64, #loc65, #loc59])
#loc194 = loc(fused[#loc67, #loc68])
#loc195 = loc(fused[#loc69, #loc70])
#loc196 = loc(fused[#loc72, #loc73, #loc74, #loc68])
#loc197 = loc(fused[#loc75, #loc76])
#loc198 = loc(fused[#loc79, #loc80])
#loc199 = loc(fused[#loc81, #loc82])
#loc200 = loc(fused[#loc85, #loc83])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc88, #loc89])
#loc203 = loc(fused[#loc91, #loc87])
#loc204 = loc(fused[#loc93, #loc92])
#loc205 = loc(fused[#loc94, #loc95])
#loc206 = loc(fused[#loc96, #loc97])
#loc207 = loc(fused[#loc99, #loc95])
#loc208 = loc(fused[#loc100, #loc101])
#loc209 = loc(fused[#loc102, #loc103])
#loc210 = loc(fused[#loc105, #loc106, #loc107, #loc101])
#loc211 = loc(fused[#loc108, #loc109])
#loc212 = loc(fused[#loc113, #loc114])
#loc213 = loc(fused[#loc115, #loc116])
#loc214 = loc(fused[#loc119, #loc117])
#loc215 = loc(fused[#loc120, #loc121])
#loc216 = loc(fused[#loc122, #loc123])
#loc217 = loc(fused[#loc125, #loc126, #loc127, #loc121])
#loc218 = loc(fused[#loc131, #loc130])
#loc219 = loc(fused[#loc132, #loc133])
#loc220 = loc(fused[#loc134, #loc135])
#loc221 = loc(fused[#loc137, #loc133])
#loc222 = loc(fused[#loc138, #loc139])
#loc223 = loc(fused[#loc141, #loc142])
#loc224 = loc(fused[#loc143, #loc144])
#loc225 = loc(fused[#loc147, #loc145])
#loc226 = loc(fused[#loc148, #loc149])
#loc227 = loc(fused[#loc150, #loc151])
#loc228 = loc(fused[#loc153, #loc149])
#loc229 = loc(fused[#loc155, #loc154])
#loc230 = loc(fused[#loc156, #loc157])
#loc231 = loc(fused[#loc158, #loc159])
#loc232 = loc(fused[#loc161, #loc157])
#loc233 = loc(fused[#loc162, #loc163])
