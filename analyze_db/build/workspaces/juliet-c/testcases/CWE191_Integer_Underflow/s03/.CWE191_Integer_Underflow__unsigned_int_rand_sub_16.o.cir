!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @printUnsignedLine(!u32i) loc(#loc97)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_rand_sub_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc9)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
        cir.condition(%4) loc(#loc13)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc15)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
          %7 = cir.ternary(%6, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc15)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc15)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc15)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc15)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc15)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc15)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc15)
            cir.yield %21 : !u32i loc(#loc15)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc15)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc15)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc15)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc15)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc15)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc15)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc15)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc15)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc15)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc15)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc15)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc15)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc15)
            cir.yield %25 : !u32i loc(#loc15)
          }) : (!cir.bool) -> !u32i loc(#loc15)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc15)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc15)
          cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc103)
          cir.break loc(#loc17)
        } loc(#loc102)
        cir.yield loc(#loc12)
      } loc(#loc101)
    } loc(#loc101)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%4) loc(#loc20)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc107)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc25)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc25)
            %7 = cir.binop(sub, %4, %6) : !u32i loc(#loc108)
            cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc107)
            %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc27)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc28)
          } loc(#loc106)
          cir.break loc(#loc29)
        } loc(#loc105)
        cir.yield loc(#loc19)
      } loc(#loc104)
    } loc(#loc104)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto @CWE191_Integer_Underflow__unsigned_int_rand_sub_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc109)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc38)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc43)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc115)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc47)
        cir.condition(%4) loc(#loc47)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc49)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc49)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc49)
          %7 = cir.ternary(%6, true {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc49)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc49)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc49)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc49)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc49)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc49)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc49)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc49)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc49)
            cir.yield %21 : !u32i loc(#loc49)
          }, false {
            %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc49)
            %12 = cir.const #cir.int<30> : !s32i loc(#loc49)
            %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc49)
            %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc49)
            %16 = cir.const #cir.int<15> : !s32i loc(#loc49)
            %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc49)
            %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc49)
            %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
            %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc49)
            %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc49)
            %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc49)
            %23 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc49)
            %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc49)
            cir.yield %25 : !u32i loc(#loc49)
          }) : (!cir.bool) -> !u32i loc(#loc49)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc49)
          %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc49)
          cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
          cir.break loc(#loc51)
        } loc(#loc117)
        cir.yield loc(#loc46)
      } loc(#loc116)
    } loc(#loc116)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc54)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc54)
        cir.condition(%4) loc(#loc54)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc58)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc59)
            %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc59)
            %6 = cir.cmp(gt, %3, %5) : !u32i, !cir.bool loc(#loc122)
            cir.if %6 {
              %7 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc124)
              %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc65)
              %9 = cir.const #cir.int<1> : !s32i loc(#loc64)
              %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc64)
              %11 = cir.binop(sub, %8, %10) : !u32i loc(#loc125)
              cir.store %11, %7 : !u32i, !cir.ptr<!u32i> loc(#loc124)
              %12 = cir.load %7 : !cir.ptr<!u32i>, !u32i loc(#loc66)
              cir.call @printUnsignedLine(%12) : (!u32i) -> () loc(#loc67)
            } else {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc38)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc38)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc68)
            } loc(#loc123)
          } loc(#loc121)
          cir.break loc(#loc69)
        } loc(#loc120)
        cir.yield loc(#loc53)
      } loc(#loc119)
    } loc(#loc119)
    cir.return loc(#loc40)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc74)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc128)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc78)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc78)
        cir.condition(%4) loc(#loc78)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc80)
          %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc81)
          %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc81)
          cir.store %5, %0 : !u32i, !cir.ptr<!u32i> loc(#loc131)
          cir.break loc(#loc83)
        } loc(#loc130)
        cir.yield loc(#loc77)
      } loc(#loc129)
    } loc(#loc129)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc86)
        cir.condition(%4) loc(#loc86)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc135)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc92)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc91)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc91)
            %7 = cir.binop(sub, %4, %6) : !u32i loc(#loc136)
            cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc135)
            %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc93)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc94)
          } loc(#loc134)
          cir.break loc(#loc95)
        } loc(#loc133)
        cir.yield loc(#loc85)
      } loc(#loc132)
    } loc(#loc132)
    cir.return loc(#loc71)
  } loc(#loc126)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":41:1)
#loc7 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":24:18)
#loc9 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":26:5)
#loc12 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":26:11)
#loc14 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":29:30)
#loc16 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":29:9)
#loc17 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":30:9)
#loc18 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":32:5)
#loc19 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":40:5)
#loc20 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":32:11)
#loc21 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":33:5)
#loc22 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":34:9)
#loc23 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":38:9)
#loc24 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":36:13)
#loc25 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":36:42)
#loc26 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":36:35)
#loc27 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":37:31)
#loc28 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":37:13)
#loc29 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":39:9)
#loc30 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":96:1)
#loc31 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":100:1)
#loc32 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":98:5)
#loc33 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":98:13)
#loc34 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":99:5)
#loc35 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":99:13)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":68:23)
#loc39 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":48:1)
#loc40 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":72:1)
#loc41 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":50:5)
#loc42 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":50:18)
#loc43 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":51:12)
#loc44 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":51:5)
#loc45 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":52:5)
#loc46 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":57:5)
#loc47 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":52:11)
#loc48 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":53:5)
#loc49 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":55:30)
#loc50 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":55:9)
#loc51 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":56:9)
#loc52 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":58:5)
#loc53 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":71:5)
#loc54 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":58:11)
#loc55 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":59:5)
#loc56 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":61:9)
#loc57 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":69:9)
#loc58 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":61:13)
#loc59 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":61:20)
#loc60 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":62:9)
#loc61 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":65:9)
#loc62 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":67:9)
#loc63 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":63:13)
#loc64 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":63:42)
#loc65 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":63:35)
#loc66 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":64:31)
#loc67 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":64:13)
#loc68 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":68:13)
#loc69 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":70:9)
#loc70 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":75:1)
#loc71 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":94:1)
#loc72 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":77:5)
#loc73 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":77:18)
#loc74 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":78:12)
#loc75 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":78:5)
#loc76 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":79:5)
#loc77 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":84:5)
#loc78 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":79:11)
#loc79 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":80:5)
#loc80 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":82:17)
#loc81 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":82:16)
#loc82 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":82:9)
#loc83 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":83:9)
#loc84 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":85:5)
#loc85 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":93:5)
#loc86 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":85:11)
#loc87 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":86:5)
#loc88 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":87:9)
#loc89 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":91:9)
#loc90 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":89:13)
#loc91 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":89:42)
#loc92 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":89:35)
#loc93 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":90:31)
#loc94 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":90:13)
#loc95 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_16.c":92:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc9])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc14, #loc12])
#loc103 = loc(fused[#loc16, #loc15])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc21, #loc19])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc26, #loc25])
#loc109 = loc(fused[#loc30, #loc31])
#loc110 = loc(fused[#loc32, #loc33])
#loc111 = loc(fused[#loc34, #loc35])
#loc112 = loc(fused[#loc36, #loc37])
#loc113 = loc(fused[#loc39, #loc40])
#loc114 = loc(fused[#loc41, #loc42])
#loc115 = loc(fused[#loc44, #loc43])
#loc116 = loc(fused[#loc45, #loc46])
#loc117 = loc(fused[#loc48, #loc46])
#loc118 = loc(fused[#loc50, #loc49])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc55, #loc53])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc58, #loc59])
#loc123 = loc(fused[#loc60, #loc61, #loc62, #loc57])
#loc124 = loc(fused[#loc63, #loc64])
#loc125 = loc(fused[#loc65, #loc64])
#loc126 = loc(fused[#loc70, #loc71])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc75, #loc74])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc79, #loc77])
#loc131 = loc(fused[#loc82, #loc80])
#loc132 = loc(fused[#loc84, #loc85])
#loc133 = loc(fused[#loc87, #loc85])
#loc134 = loc(fused[#loc88, #loc89])
#loc135 = loc(fused[#loc90, #loc91])
#loc136 = loc(fused[#loc92, #loc91])
