!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private @__const.goodG2B.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc89)
  cir.global "private" constant cir_private @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad.source = #cir.const_array<"AAAAAAAAAA\00" : !cir.array<!s8i x 11>> : !cir.array<!s8i x 11> loc(#loc90)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc92)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc93)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc94)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc95)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc90)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc97)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc19)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc23)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc100)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc25)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc26)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc26)
    %8 = cir.const #cir.int<1> : !u64i loc(#loc101)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc102)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    cir.store %11, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc104)
    cir.br ^bb5 loc(#loc105)
  ^bb5:  // pred: ^bb4
    %12 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s8i>, !cir.bool loc(#loc106)
    cir.brcond %15 ^bb6, ^bb7 loc(#loc107)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc36)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc37)
    %18 = cir.unary(minus, %17) nsw : !s32i, !s32i loc(#loc38)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc36)
    cir.br ^bb7 loc(#loc32)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc32)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc39)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc22)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc22)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc108)
  ^bb12:  // pred: ^bb11
    %19 = cir.get_global @__const.CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_bad.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc90)
    cir.copy %19 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc90)
    %20 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc42)
    %21 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc43)
    %22 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc44)
    %23 = cir.call @strcpy(%21, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc42)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc47)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc48)
    cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    cir.br ^bb13 loc(#loc41)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc16)
  } loc(#loc96)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 11>, !cir.ptr<!cir.array<!s8i x 11>>, ["source"] {alignment = 1 : i64} loc(#loc89)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc57)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc114)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc61)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc61)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc61)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc63)
    %6 = cir.const #cir.int<10> : !s32i loc(#loc64)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc64)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
    %10 = cir.const #cir.int<1> : !u64i loc(#loc116)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc117)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc63)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc118)
    cir.store %13, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.br ^bb5 loc(#loc120)
  ^bb5:  // pred: ^bb4
    %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc74)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc74)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!s8i>, !cir.bool loc(#loc121)
    cir.brcond %17 ^bb6, ^bb7 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc76)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc78)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc76)
    cir.br ^bb7 loc(#loc72)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc72)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc79)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc60)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc60)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc123)
  ^bb12:  // pred: ^bb11
    %21 = cir.get_global @__const.goodG2B.source : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc89)
    cir.copy %21 to %0 : !cir.ptr<!cir.array<!s8i x 11>> loc(#loc89)
    %22 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc82)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc83)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 11>>), !cir.ptr<!s8i> loc(#loc84)
    %25 = cir.call @strcpy(%23, %24) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc82)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %27 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc87)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
    cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
    cir.br ^bb13 loc(#loc81)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc54)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":65:9)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":65:29)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":40:9)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":40:29)
#loc5 = loc("/usr/include/stdlib.h":672:1)
#loc6 = loc("/usr/include/stdlib.h":672:45)
#loc7 = loc("/usr/include/stdlib.h":756:1)
#loc8 = loc("/usr/include/stdlib.h":756:70)
#loc9 = loc("/usr/include/string.h":141:1)
#loc10 = loc("/usr/include/string.h":142:14)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("/usr/include/stdlib.h":687:1)
#loc14 = loc("/usr/include/stdlib.h":687:32)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":28:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":46:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":30:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":30:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":31:12)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":31:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":38:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":32:11)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":33:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:34)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:45)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:46)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":35:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:37)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:13)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:21)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:27)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:28)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:34)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":36:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":37:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":39:5)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":45:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":42:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":42:16)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":42:22)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":43:19)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":43:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":44:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":44:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":73:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":76:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":75:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":75:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":53:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":71:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":55:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":55:12)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":56:12)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":56:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":57:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":63:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":57:11)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":58:5)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:32)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:38)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:49)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:50)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":60:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:13)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:21)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:27)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":61:33)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":62:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":64:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":70:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":67:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":67:16)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":67:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":68:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":68:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":69:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE193_char_cpy_16.c":69:14)
#loc89 = loc(fused[#loc1, #loc2])
#loc90 = loc(fused[#loc3, #loc4])
#loc91 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc9, #loc10])
#loc94 = loc(fused[#loc11, #loc12])
#loc95 = loc(fused[#loc13, #loc14])
#loc96 = loc(fused[#loc15, #loc16])
#loc97 = loc(fused[#loc17, #loc18])
#loc98 = loc(fused[#loc20, #loc19])
#loc99 = loc(fused[#loc21, #loc22])
#loc100 = loc(fused[#loc24, #loc22])
#loc101 = loc(fused[#loc27, #loc28])
#loc102 = loc(fused[#loc26, #loc28])
#loc103 = loc(fused[#loc25, #loc29])
#loc104 = loc(fused[#loc30, #loc29])
#loc105 = loc(fused[#loc31, #loc32])
#loc106 = loc(fused[#loc33, #loc34])
#loc107 = loc(fused[#loc35, #loc32])
#loc108 = loc(fused[#loc40, #loc41])
#loc109 = loc(fused[#loc49, #loc50])
#loc110 = loc(fused[#loc51, #loc52])
#loc111 = loc(fused[#loc53, #loc54])
#loc112 = loc(fused[#loc55, #loc56])
#loc113 = loc(fused[#loc58, #loc57])
#loc114 = loc(fused[#loc59, #loc60])
#loc115 = loc(fused[#loc62, #loc60])
#loc116 = loc(fused[#loc66, #loc67])
#loc117 = loc(fused[#loc68, #loc67])
#loc118 = loc(fused[#loc63, #loc69])
#loc119 = loc(fused[#loc70, #loc69])
#loc120 = loc(fused[#loc71, #loc72])
#loc121 = loc(fused[#loc73, #loc74])
#loc122 = loc(fused[#loc75, #loc72])
#loc123 = loc(fused[#loc80, #loc81])
