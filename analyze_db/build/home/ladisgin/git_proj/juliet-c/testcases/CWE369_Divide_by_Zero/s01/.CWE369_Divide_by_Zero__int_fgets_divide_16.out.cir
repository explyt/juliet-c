!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc65 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":131:10)
#loc66 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":131:14)
#loc67 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":131:20)
#loc68 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":131:32)
#loc173 = loc(fused[#loc65, #loc66])
#loc174 = loc(fused[#loc67, #loc68])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc150)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc151)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc152)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc21)
        cir.condition(%4) loc(#loc21)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc160)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc160)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc160)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc28)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc29)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc29)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc29)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc29)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc29)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc29)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc29)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc151)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc31)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc32)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc162)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc36)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc37)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc40)
            } loc(#loc163)
          } loc(#loc161)
        } loc(#loc159)
        cir.break loc(#loc41)
      } loc(#loc158)
    } loc(#loc158)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc44)
        cir.condition(%4) loc(#loc44)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc45)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %5 = cir.binop(div, %3, %4) : !s32i loc(#loc166)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc47)
        cir.break loc(#loc48)
      } loc(#loc165)
    } loc(#loc165)
    cir.return loc(#loc13)
  } loc(#loc155)
  cir.func no_proto @CWE369_Divide_by_Zero__int_fgets_divide_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc169)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc167)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc170)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc171)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc62)
  cir.func @main(%arg0: !s32i loc(fused[#loc65, #loc66]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc67, #loc68])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc64)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc69)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc69)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc70)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc71)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc71)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc72)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_16_good() : () -> () loc(#loc74)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc60)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc61)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_fgets_divide_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc176)
    cir.call @CWE369_Divide_by_Zero__int_fgets_divide_16_bad() : () -> () loc(#loc78)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc62)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc177)
    cir.return %17 : !s32i loc(#loc177)
  } loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc89)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc180)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc93)
        cir.condition(%4) loc(#loc93)
      } do {
        cir.scope {
          %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc183)
          %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc183)
          cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc183)
          cir.scope {
            %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc100)
            %6 = cir.const #cir.int<3> : !s32i loc(#loc101)
            %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc101)
            %8 = cir.const #cir.int<4> : !u64i loc(#loc101)
            %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc101)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc101)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc101)
            %12 = cir.binop(add, %9, %11) : !u64i loc(#loc101)
            %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc101)
            %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc151)
            %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc102)
            %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc103)
            %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc104)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc104)
            %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc185)
            cir.if %19 {
              %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc108)
              %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc109)
              cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc112)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc112)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc113)
            } loc(#loc186)
          } loc(#loc184)
        } loc(#loc182)
        cir.break loc(#loc114)
      } loc(#loc181)
    } loc(#loc181)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
        cir.condition(%4) loc(#loc117)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc121)
          %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc190)
          cir.if %5 {
            %6 = cir.const #cir.int<100> : !s32i loc(#loc125)
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
            %8 = cir.binop(div, %6, %7) : !s32i loc(#loc192)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc127)
          } else {
            %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc83)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc83)
            cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc128)
          } loc(#loc191)
        } loc(#loc189)
        cir.break loc(#loc129)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc85)
  } loc(#loc178)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc135)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc139)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc139)
        cir.condition(%4) loc(#loc139)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc140)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc197)
        cir.break loc(#loc142)
      } loc(#loc196)
    } loc(#loc196)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc145)
        cir.condition(%4) loc(#loc145)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc146)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %5 = cir.binop(div, %3, %4) : !s32i loc(#loc199)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc148)
        cir.break loc(#loc149)
      } loc(#loc198)
    } loc(#loc198)
    cir.return loc(#loc131)
  } loc(#loc193)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__int_fgets_divide_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":41:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":24:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":52:1)
#loc14 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":26:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":26:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:13)
#loc17 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:12)
#loc18 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":28:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":29:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":45:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":29:11)
#loc22 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":31:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":43:9)
#loc24 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":32:13)
#loc25 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":32:49)
#loc26 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":42:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:23)
#loc29 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:36)
#loc30 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:53)
#loc31 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:17)
#loc32 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":34:63)
#loc33 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":35:13)
#loc34 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":38:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":40:13)
#loc36 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:29)
#loc37 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:24)
#loc38 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:17)
#loc39 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":37:40)
#loc40 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":41:17)
#loc41 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":44:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":46:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":51:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":46:11)
#loc45 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:22)
#loc46 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:28)
#loc47 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":49:9)
#loc48 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":50:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":116:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":120:1)
#loc51 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":118:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":118:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":119:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":119:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":136:15)
#loc60 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":138:15)
#loc61 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":141:15)
#loc62 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":143:15)
#loc63 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":131:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":146:1)
#loc69 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":132:1)
#loc70 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":134:27)
#loc71 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":134:22)
#loc72 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":134:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":136:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":137:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":137:53)
#loc76 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":138:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":141:5)
#loc78 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":142:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":142:52)
#loc80 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":143:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":145:12)
#loc82 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":145:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":90:23)
#loc84 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":59:1)
#loc85 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":94:1)
#loc86 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":61:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":61:9)
#loc88 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:13)
#loc89 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:12)
#loc90 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":63:5)
#loc91 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":64:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":80:5)
#loc93 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":64:11)
#loc94 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":66:9)
#loc95 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":78:9)
#loc96 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":67:13)
#loc97 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":67:49)
#loc98 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:13)
#loc99 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":77:13)
#loc100 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:23)
#loc101 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:36)
#loc102 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:53)
#loc103 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:17)
#loc104 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":69:63)
#loc105 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":70:13)
#loc106 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":73:13)
#loc107 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":75:13)
#loc108 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:29)
#loc109 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:24)
#loc110 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:17)
#loc111 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":72:40)
#loc112 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":76:27)
#loc113 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":76:17)
#loc114 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":79:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":81:5)
#loc116 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":93:5)
#loc117 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":81:11)
#loc118 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:9)
#loc119 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":91:9)
#loc120 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:13)
#loc121 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":84:21)
#loc122 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":85:9)
#loc123 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":87:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":89:9)
#loc125 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:26)
#loc126 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:32)
#loc127 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":86:13)
#loc128 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":90:13)
#loc129 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":92:9)
#loc130 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":97:1)
#loc131 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":114:1)
#loc132 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":99:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":99:9)
#loc134 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:13)
#loc135 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:12)
#loc136 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":101:5)
#loc137 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":102:5)
#loc138 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":107:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":102:11)
#loc140 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":105:16)
#loc141 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":105:9)
#loc142 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":106:9)
#loc143 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":108:5)
#loc144 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":113:5)
#loc145 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":108:11)
#loc146 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:22)
#loc147 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:28)
#loc148 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":111:9)
#loc149 = loc("CWE369_Divide_by_Zero__int_fgets_divide_16.c":112:9)
#loc150 = loc(fused[#loc1, #loc2])
#loc151 = loc(fused[#loc3, #loc4])
#loc152 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc7, #loc8])
#loc154 = loc(fused[#loc10, #loc11])
#loc155 = loc(fused[#loc12, #loc13])
#loc156 = loc(fused[#loc14, #loc15])
#loc157 = loc(fused[#loc18, #loc16])
#loc158 = loc(fused[#loc19, #loc20])
#loc159 = loc(fused[#loc22, #loc23])
#loc160 = loc(fused[#loc24, #loc25])
#loc161 = loc(fused[#loc26, #loc27])
#loc162 = loc(fused[#loc31, #loc32])
#loc163 = loc(fused[#loc33, #loc34, #loc35, #loc27])
#loc164 = loc(fused[#loc38, #loc39])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc45, #loc46])
#loc167 = loc(fused[#loc49, #loc50])
#loc168 = loc(fused[#loc51, #loc52])
#loc169 = loc(fused[#loc53, #loc54])
#loc170 = loc(fused[#loc55, #loc56])
#loc171 = loc(fused[#loc57, #loc58])
#loc172 = loc(fused[#loc63, #loc64])
#loc175 = loc(fused[#loc74, #loc75])
#loc176 = loc(fused[#loc78, #loc79])
#loc177 = loc(fused[#loc82, #loc81])
#loc178 = loc(fused[#loc84, #loc85])
#loc179 = loc(fused[#loc86, #loc87])
#loc180 = loc(fused[#loc90, #loc88])
#loc181 = loc(fused[#loc91, #loc92])
#loc182 = loc(fused[#loc94, #loc95])
#loc183 = loc(fused[#loc96, #loc97])
#loc184 = loc(fused[#loc98, #loc99])
#loc185 = loc(fused[#loc103, #loc104])
#loc186 = loc(fused[#loc105, #loc106, #loc107, #loc99])
#loc187 = loc(fused[#loc110, #loc111])
#loc188 = loc(fused[#loc115, #loc116])
#loc189 = loc(fused[#loc118, #loc119])
#loc190 = loc(fused[#loc120, #loc121])
#loc191 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc192 = loc(fused[#loc125, #loc126])
#loc193 = loc(fused[#loc130, #loc131])
#loc194 = loc(fused[#loc132, #loc133])
#loc195 = loc(fused[#loc136, #loc134])
#loc196 = loc(fused[#loc137, #loc138])
#loc197 = loc(fused[#loc141, #loc140])
#loc198 = loc(fused[#loc143, #loc144])
#loc199 = loc(fused[#loc146, #loc147])
