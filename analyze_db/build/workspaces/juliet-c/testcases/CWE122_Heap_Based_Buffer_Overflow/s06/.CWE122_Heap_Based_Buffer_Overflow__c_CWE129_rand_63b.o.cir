!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":22:67)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":22:73)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":58:71)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":58:77)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":90:71)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":90:77)
#true = #cir.bool<true> : !cir.bool
#loc228 = loc(fused[#loc14, #loc15])
#loc255 = loc(fused[#loc82, #loc83])
#loc282 = loc(fused[#loc152, #loc153])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc222)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc223)
  cir.func private @printIntLine(!s32i) loc(#loc224)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc225)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc9)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc226)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc14, #loc15])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc228)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc229)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc18)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc231)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc232)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc26)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc27)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc27)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc233)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc234)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc26)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc232)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc237)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc35)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc36)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc37)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
        } loc(#loc238)
      } loc(#loc236)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc40)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc240)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc43)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc241)
          cir.condition(%19) loc(#loc44)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc46)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc48)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc49)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc243)
          } loc(#loc242)
          cir.yield loc(#loc39)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc51)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc244)
          cir.yield loc(#loc239)
        } loc(#loc239)
      } loc(#loc239)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc55)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc246)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc61)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc62)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc248)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc65)
            cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc250)
            cir.for : cond {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc68)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc251)
              cir.condition(%26) loc(#loc69)
            } body {
              cir.scope {
                %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
                %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc73)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc71)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc74)
              } loc(#loc252)
              cir.yield loc(#loc64)
            } step {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc76)
              cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc253)
              cir.yield loc(#loc249)
            } loc(#loc249)
          } loc(#loc249)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc9)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc77)
        } loc(#loc247)
      } loc(#loc245)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc78)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc79)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc78)
    } loc(#loc230)
    cir.return loc(#loc13)
  } loc(#loc227)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc82, #loc83])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc255)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc256)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc86)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc85)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc258)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc259)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc94)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc95)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc95)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc260)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc261)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc94)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc262)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc259)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc101)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc101)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc264)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc103)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc104)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc105)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc103)
        } loc(#loc265)
      } loc(#loc263)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc108)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc267)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc111)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc268)
          cir.condition(%19) loc(#loc112)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc114)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc117)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc270)
          } loc(#loc269)
          cir.yield loc(#loc107)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc119)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc271)
          cir.yield loc(#loc266)
        } loc(#loc266)
      } loc(#loc266)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc123)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc273)
        cir.if %18 {
          %19 = cir.const #cir.int<1> : !s32i loc(#loc127)
          %20 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc128)
          %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc129)
          %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc130)
          cir.store %19, %22 : !s32i, !cir.ptr<!s32i> loc(#loc275)
          cir.scope {
            %23 = cir.const #cir.int<0> : !s32i loc(#loc133)
            cir.store %23, %4 : !s32i, !cir.ptr<!s32i> loc(#loc277)
            cir.for : cond {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc135)
              %25 = cir.const #cir.int<10> : !s32i loc(#loc136)
              %26 = cir.cmp(lt, %24, %25) : !s32i, !cir.bool loc(#loc278)
              cir.condition(%26) loc(#loc137)
            } body {
              cir.scope {
                %24 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc139)
                %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc140)
                %26 = cir.ptr_stride(%24 : !cir.ptr<!s32i>, %25 : !s32i), !cir.ptr<!s32i> loc(#loc141)
                %27 = cir.load %26 : !cir.ptr<!s32i>, !s32i loc(#loc139)
                cir.call @printIntLine(%27) : (!s32i) -> () loc(#loc142)
              } loc(#loc279)
              cir.yield loc(#loc132)
            } step {
              %24 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %25 = cir.unary(inc, %24) nsw : !s32i, !s32i loc(#loc144)
              cir.store %25, %4 : !s32i, !cir.ptr<!s32i> loc(#loc280)
              cir.yield loc(#loc276)
            } loc(#loc276)
          } loc(#loc276)
        } else {
          %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc145)
          %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc145)
          cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        } loc(#loc274)
      } loc(#loc272)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc147)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc148)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc147)
    } loc(#loc257)
    cir.return loc(#loc81)
  } loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc149)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b_goodB2GSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc152, #loc153])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr", init] {alignment = 8 : i64} loc(#loc282)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc283)
    cir.store %arg0, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc156)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc155)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc283)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc285)
      %5 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc286)
      %6 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc164)
      %7 = cir.const #cir.int<10> : !s32i loc(#loc165)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc165)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc287)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc288)
      %11 = cir.call @malloc(%10) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc289)
      cir.store %12, %5 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc286)
      cir.scope {
        %16 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc170)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc171)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc171)
        %19 = cir.cmp(eq, %16, %18) : !cir.ptr<!s32i>, !cir.bool loc(#loc291)
        cir.if %19 {
          %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc173)
          %21 = cir.const #cir.int<1> : !s32i loc(#loc174)
          %22 = cir.unary(minus, %21) nsw : !s32i, !s32i loc(#loc175)
          cir.call @exit(%22) : (!s32i) -> () extra(#fn_attr) loc(#loc173)
        } loc(#loc292)
      } loc(#loc290)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc178)
        cir.store %16, %4 : !s32i, !cir.ptr<!s32i> loc(#loc294)
        cir.for : cond {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc180)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc181)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc295)
          cir.condition(%19) loc(#loc182)
        } body {
          cir.scope {
            %17 = cir.const #cir.int<0> : !s32i loc(#loc184)
            %18 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc185)
            %19 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc186)
            %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc187)
            cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc297)
          } loc(#loc296)
          cir.yield loc(#loc177)
        } step {
          %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc188)
          %18 = cir.unary(inc, %17) nsw : !s32i, !s32i loc(#loc189)
          cir.store %18, %4 : !s32i, !cir.ptr<!s32i> loc(#loc298)
          cir.yield loc(#loc293)
        } loc(#loc293)
      } loc(#loc293)
      cir.scope {
        %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc192)
        %17 = cir.const #cir.int<0> : !s32i loc(#loc193)
        %18 = cir.cmp(ge, %16, %17) : !s32i, !cir.bool loc(#loc300)
        %19 = cir.ternary(%18, true {
          %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc195)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc196)
          %22 = cir.cmp(lt, %20, %21) : !s32i, !cir.bool loc(#loc301)
          %23 = cir.ternary(%22, true {
            %24 = cir.const #true loc(#loc194)
            cir.yield %24 : !cir.bool loc(#loc194)
          }, false {
            %24 = cir.const #false loc(#loc194)
            cir.yield %24 : !cir.bool loc(#loc194)
          }) : (!cir.bool) -> !cir.bool loc(#loc194)
          cir.yield %23 : !cir.bool loc(#loc194)
        }, false {
          %20 = cir.const #false loc(#loc194)
          cir.yield %20 : !cir.bool loc(#loc194)
        }) : (!cir.bool) -> !cir.bool loc(#loc194)
        cir.if %19 {
          %20 = cir.const #cir.int<1> : !s32i loc(#loc201)
          %21 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc202)
          %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc204)
          cir.store %20, %23 : !s32i, !cir.ptr<!s32i> loc(#loc303)
          cir.scope {
            %24 = cir.const #cir.int<0> : !s32i loc(#loc207)
            cir.store %24, %4 : !s32i, !cir.ptr<!s32i> loc(#loc305)
            cir.for : cond {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc209)
              %26 = cir.const #cir.int<10> : !s32i loc(#loc210)
              %27 = cir.cmp(lt, %25, %26) : !s32i, !cir.bool loc(#loc306)
              cir.condition(%27) loc(#loc211)
            } body {
              cir.scope {
                %25 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
                %26 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc214)
                %27 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %26 : !s32i), !cir.ptr<!s32i> loc(#loc215)
                %28 = cir.load %27 : !cir.ptr<!s32i>, !s32i loc(#loc213)
                cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc216)
              } loc(#loc307)
              cir.yield loc(#loc206)
            } step {
              %25 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc217)
              %26 = cir.unary(inc, %25) nsw : !s32i, !s32i loc(#loc218)
              cir.store %26, %4 : !s32i, !cir.ptr<!s32i> loc(#loc308)
              cir.yield loc(#loc304)
            } loc(#loc304)
          } loc(#loc304)
        } else {
          %20 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc149)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc149)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc219)
        } loc(#loc302)
      } loc(#loc299)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc220)
      %14 = cir.load %5 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc221)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc221)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc220)
    } loc(#loc284)
    cir.return loc(#loc151)
  } loc(#loc281)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":47:23)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":22:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":51:1)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":24:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":24:17)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":23:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":24:16)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":25:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":50:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":26:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":26:13)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:54)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:31)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:43)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":27:53)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:39)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:29)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:36)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":28:35)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":33:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:18)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:14)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:21)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:25)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":31:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":32:25)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":32:13)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":32:20)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":32:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:30)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":30:29)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":36:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":48:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":36:13)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":36:21)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":37:9)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":44:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":46:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":38:28)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":38:13)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":38:20)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":38:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":43:13)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:21)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:17)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:24)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:28)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":41:13)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":42:30)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":42:37)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":42:38)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":42:17)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:33)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":40:32)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":47:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":49:9)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":49:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":58:1)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":87:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":60:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":60:17)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":59:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":60:16)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":61:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":86:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":62:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":62:13)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:54)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:31)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:38)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:43)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":63:53)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:39)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:13)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:23)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:30)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:36)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":64:35)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":69:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:18)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:14)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:21)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:25)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:23)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":67:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":68:25)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":68:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":68:20)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":68:21)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":66:29)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":72:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":84:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":72:13)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":72:21)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":73:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":80:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":82:9)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":74:28)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":74:13)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":74:20)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":74:24)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":79:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:21)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:17)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:24)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:28)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:26)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":77:13)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":78:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":78:37)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":78:38)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":78:17)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":76:32)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":83:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":83:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":85:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":85:14)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":114:23)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":90:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":118:1)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":92:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":92:17)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":91:1)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":92:16)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":93:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":117:5)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":94:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":94:13)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:54)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:31)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:38)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:43)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":95:53)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:9)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:39)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:13)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:23)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:29)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:30)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:36)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":96:35)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:9)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":101:9)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:18)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:14)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:21)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:25)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:23)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":99:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":100:25)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":100:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":100:20)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":100:21)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:30)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":98:29)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":115:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:13)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:21)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:23)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:26)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:34)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":103:36)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":104:9)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":111:9)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":113:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":105:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":105:13)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":105:20)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":105:24)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:13)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":110:13)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:21)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:17)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:24)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:28)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:26)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":108:13)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":109:30)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":109:37)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":109:38)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":109:17)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:33)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":107:32)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":114:13)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":116:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_rand_63b.c":116:14)
#loc222 = loc(fused[#loc1, #loc2])
#loc223 = loc(fused[#loc3, #loc4])
#loc224 = loc(fused[#loc5, #loc6])
#loc225 = loc(fused[#loc7, #loc8])
#loc226 = loc(fused[#loc10, #loc11])
#loc227 = loc(fused[#loc12, #loc13])
#loc229 = loc(fused[#loc16, #loc17])
#loc230 = loc(fused[#loc20, #loc21])
#loc231 = loc(fused[#loc22, #loc23])
#loc232 = loc(fused[#loc24, #loc25])
#loc233 = loc(fused[#loc28, #loc29])
#loc234 = loc(fused[#loc27, #loc29])
#loc235 = loc(fused[#loc26, #loc25])
#loc236 = loc(fused[#loc30, #loc31])
#loc237 = loc(fused[#loc32, #loc33])
#loc238 = loc(fused[#loc34, #loc31])
#loc239 = loc(fused[#loc38, #loc39])
#loc240 = loc(fused[#loc41, #loc40])
#loc241 = loc(fused[#loc42, #loc43])
#loc242 = loc(fused[#loc45, #loc39])
#loc243 = loc(fused[#loc47, #loc46])
#loc244 = loc(fused[#loc51, #loc50])
#loc245 = loc(fused[#loc52, #loc53])
#loc246 = loc(fused[#loc54, #loc55])
#loc247 = loc(fused[#loc56, #loc57, #loc58, #loc53])
#loc248 = loc(fused[#loc60, #loc59])
#loc249 = loc(fused[#loc63, #loc64])
#loc250 = loc(fused[#loc66, #loc65])
#loc251 = loc(fused[#loc67, #loc68])
#loc252 = loc(fused[#loc70, #loc64])
#loc253 = loc(fused[#loc76, #loc75])
#loc254 = loc(fused[#loc80, #loc81])
#loc256 = loc(fused[#loc84, #loc85])
#loc257 = loc(fused[#loc88, #loc89])
#loc258 = loc(fused[#loc90, #loc91])
#loc259 = loc(fused[#loc92, #loc93])
#loc260 = loc(fused[#loc96, #loc97])
#loc261 = loc(fused[#loc95, #loc97])
#loc262 = loc(fused[#loc94, #loc93])
#loc263 = loc(fused[#loc98, #loc99])
#loc264 = loc(fused[#loc100, #loc101])
#loc265 = loc(fused[#loc102, #loc99])
#loc266 = loc(fused[#loc106, #loc107])
#loc267 = loc(fused[#loc109, #loc108])
#loc268 = loc(fused[#loc110, #loc111])
#loc269 = loc(fused[#loc113, #loc107])
#loc270 = loc(fused[#loc115, #loc114])
#loc271 = loc(fused[#loc119, #loc118])
#loc272 = loc(fused[#loc120, #loc121])
#loc273 = loc(fused[#loc122, #loc123])
#loc274 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc275 = loc(fused[#loc128, #loc127])
#loc276 = loc(fused[#loc131, #loc132])
#loc277 = loc(fused[#loc134, #loc133])
#loc278 = loc(fused[#loc135, #loc136])
#loc279 = loc(fused[#loc138, #loc132])
#loc280 = loc(fused[#loc144, #loc143])
#loc281 = loc(fused[#loc150, #loc151])
#loc283 = loc(fused[#loc154, #loc155])
#loc284 = loc(fused[#loc158, #loc159])
#loc285 = loc(fused[#loc160, #loc161])
#loc286 = loc(fused[#loc162, #loc163])
#loc287 = loc(fused[#loc166, #loc167])
#loc288 = loc(fused[#loc165, #loc167])
#loc289 = loc(fused[#loc164, #loc163])
#loc290 = loc(fused[#loc168, #loc169])
#loc291 = loc(fused[#loc170, #loc171])
#loc292 = loc(fused[#loc172, #loc169])
#loc293 = loc(fused[#loc176, #loc177])
#loc294 = loc(fused[#loc179, #loc178])
#loc295 = loc(fused[#loc180, #loc181])
#loc296 = loc(fused[#loc183, #loc177])
#loc297 = loc(fused[#loc185, #loc184])
#loc298 = loc(fused[#loc189, #loc188])
#loc299 = loc(fused[#loc190, #loc191])
#loc300 = loc(fused[#loc192, #loc193])
#loc301 = loc(fused[#loc195, #loc197])
#loc302 = loc(fused[#loc198, #loc199, #loc200, #loc191])
#loc303 = loc(fused[#loc202, #loc201])
#loc304 = loc(fused[#loc205, #loc206])
#loc305 = loc(fused[#loc208, #loc207])
#loc306 = loc(fused[#loc209, #loc210])
#loc307 = loc(fused[#loc212, #loc206])
#loc308 = loc(fused[#loc218, #loc217])
