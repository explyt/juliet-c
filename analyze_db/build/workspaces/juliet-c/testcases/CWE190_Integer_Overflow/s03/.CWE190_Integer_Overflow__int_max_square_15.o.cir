!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc207)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc3)
  cir.func private @printIntLine(!s32i) loc(#loc208)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc14)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc16)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
          cir.break loc(#loc18)
        } loc(#loc15)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc3)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc20)
          cir.break loc(#loc21)
        } loc(#loc19)
        cir.yield loc(#loc12)
      } loc(#loc12)
    } loc(#loc212)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc30)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc30)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc216)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc31)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc32)
          } loc(#loc215)
          cir.break loc(#loc33)
        } loc(#loc25)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc35)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc35)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc36)
          cir.break loc(#loc37)
        } loc(#loc34)
        cir.yield loc(#loc22)
      } loc(#loc22)
    } loc(#loc214)
    cir.return loc(#loc7)
  } loc(#loc209)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc218)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc219)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc220)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc221)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    cir.return loc(#loc39)
  } loc(#loc217)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc223)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc58)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc60)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc226)
          cir.break loc(#loc62)
        } loc(#loc59)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc64)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc64)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc65)
          cir.break loc(#loc66)
        } loc(#loc63)
        cir.yield loc(#loc56)
      } loc(#loc56)
    } loc(#loc225)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc69)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc71)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc71)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc72)
          cir.break loc(#loc73)
        } loc(#loc70)
        cir.case(default, []) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc78)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc78)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc78)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc78)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc229)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
              %11 = cir.abs %10 poison : !s32i loc(#loc81)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc81)
              %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc82)
              %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
              %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc83)
              %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc82)
              %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc82)
              %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc230)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc79)
                cir.yield %20 : !cir.bool loc(#loc79)
              }, false {
                %20 = cir.const #false loc(#loc79)
                cir.yield %20 : !cir.bool loc(#loc79)
              }) : (!cir.bool) -> !cir.bool loc(#loc79)
              cir.yield %19 : !cir.bool loc(#loc79)
            }, false {
              %10 = cir.const #false loc(#loc79)
              cir.yield %10 : !cir.bool loc(#loc79)
            }) : (!cir.bool) -> !cir.bool loc(#loc79)
            cir.if %9 {
              %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
              %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc90)
              cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc232)
              %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc91)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc92)
            } else {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc93)
            } loc(#loc231)
          } loc(#loc228)
          cir.break loc(#loc94)
        } loc(#loc74)
        cir.yield loc(#loc67)
      } loc(#loc67)
    } loc(#loc227)
    cir.return loc(#loc51)
  } loc(#loc222)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc103)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          cir.break loc(#loc107)
        } loc(#loc104)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc109)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc109)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc110)
          cir.break loc(#loc111)
        } loc(#loc108)
        cir.yield loc(#loc101)
      } loc(#loc101)
    } loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc114)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
            %5 = cir.unary(minus, %4) nsw : !s32i, !s32i loc(#loc119)
            %6 = cir.const #cir.int<1> : !s32i loc(#loc119)
            %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc119)
            %8 = cir.cmp(gt, %3, %7) : !s32i, !cir.bool loc(#loc240)
            %9 = cir.ternary(%8, true {
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
              %11 = cir.abs %10 poison : !s32i loc(#loc122)
              %12 = cir.cast(integral, %11 : !s32i), !s64i loc(#loc122)
              %13 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc123)
              %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc124)
              %15 = cir.cast(int_to_float, %14 : !s32i), !cir.double loc(#loc124)
              %16 = cir.call @sqrt(%15) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc123)
              %17 = cir.cast(float_to_int, %16 : !cir.double), !s64i loc(#loc123)
              %18 = cir.cmp(lt, %12, %17) : !s64i, !cir.bool loc(#loc241)
              %19 = cir.ternary(%18, true {
                %20 = cir.const #true loc(#loc120)
                cir.yield %20 : !cir.bool loc(#loc120)
              }, false {
                %20 = cir.const #false loc(#loc120)
                cir.yield %20 : !cir.bool loc(#loc120)
              }) : (!cir.bool) -> !cir.bool loc(#loc120)
              cir.yield %19 : !cir.bool loc(#loc120)
            }, false {
              %10 = cir.const #false loc(#loc120)
              cir.yield %10 : !cir.bool loc(#loc120)
            }) : (!cir.bool) -> !cir.bool loc(#loc120)
            cir.if %9 {
              %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
              %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc131)
              cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc243)
              %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc133)
            } else {
              %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc134)
              %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc134)
              cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc135)
            } loc(#loc242)
          } loc(#loc239)
          cir.break loc(#loc136)
        } loc(#loc115)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc139)
          cir.break loc(#loc140)
        } loc(#loc137)
        cir.yield loc(#loc112)
      } loc(#loc112)
    } loc(#loc238)
    cir.return loc(#loc96)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc245)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc145)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc149)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc151)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc151)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc152)
          cir.break loc(#loc153)
        } loc(#loc150)
        cir.case(default, []) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc155)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc248)
          cir.break loc(#loc157)
        } loc(#loc154)
        cir.yield loc(#loc147)
      } loc(#loc147)
    } loc(#loc247)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc160)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc166)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc251)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc167)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc168)
          } loc(#loc250)
          cir.break loc(#loc169)
        } loc(#loc161)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc171)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc171)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc172)
          cir.break loc(#loc173)
        } loc(#loc170)
        cir.yield loc(#loc158)
      } loc(#loc158)
    } loc(#loc249)
    cir.return loc(#loc142)
  } loc(#loc244)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc178)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc182)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc184)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc256)
          cir.break loc(#loc186)
        } loc(#loc183)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc188)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc188)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc189)
          cir.break loc(#loc190)
        } loc(#loc187)
        cir.yield loc(#loc180)
      } loc(#loc180)
    } loc(#loc255)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc193)
      cir.switch (%2 : !s32i) {
        cir.case(equal, [#cir.int<7> : !s32i]) {
          cir.scope {
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc259)
            %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc198)
            %6 = cir.binop(mul, %4, %5) nsw : !s32i loc(#loc199)
            cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc259)
            %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc201)
          } loc(#loc258)
          cir.break loc(#loc202)
        } loc(#loc194)
        cir.case(default, []) {
          %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
          %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
          cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc205)
          cir.break loc(#loc206)
        } loc(#loc203)
        cir.yield loc(#loc191)
      } loc(#loc191)
    } loc(#loc257)
    cir.return loc(#loc175)
  } loc(#loc252)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_15.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE190_Integer_Overflow__int_max_square_15.c":37:19)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc6 = loc("CWE190_Integer_Overflow__int_max_square_15.c":24:1)
#loc7 = loc("CWE190_Integer_Overflow__int_max_square_15.c":54:1)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_15.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_15.c":26:9)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_15.c":28:12)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_15.c":28:5)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_15.c":29:5)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_15.c":39:5)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_15.c":29:12)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_15.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_15.c":33:16)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_15.c":33:9)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_15.c":34:9)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_15.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_15.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_15.c":38:9)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_15.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_15.c":53:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_15.c":40:12)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_15.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_15.c":43:5)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_15.c":47:5)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:9)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:29)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_15.c":45:22)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_15.c":46:22)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_15.c":46:9)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_15.c":48:5)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_15.c":49:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_15.c":51:19)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_15.c":51:9)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_15.c":52:9)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_15.c":202:1)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_15.c":208:1)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_15.c":204:5)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_15.c":204:14)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_15.c":205:5)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_15.c":205:14)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_15.c":206:5)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_15.c":206:14)
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_15.c":207:5)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_15.c":207:14)
#loc48 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_15.c":92:23)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_15.c":61:1)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_15.c":96:1)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_15.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_15.c":63:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_15.c":65:12)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_15.c":65:5)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_15.c":66:5)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_15.c":76:5)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_15.c":66:12)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_15.c":68:5)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_15.c":70:16)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_15.c":70:9)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_15.c":71:9)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_15.c":72:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_15.c":74:19)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_15.c":74:9)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_15.c":75:9)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_15.c":77:5)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_15.c":95:5)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_15.c":77:12)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_15.c":79:5)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_15.c":81:19)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_15.c":81:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_15.c":82:9)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_15.c":83:5)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:9)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_15.c":93:9)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:13)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:20)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:28)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:35)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:31)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:49)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:62)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_15.c":85:69)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_15.c":86:9)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_15.c":89:9)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_15.c":91:9)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:13)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:33)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_15.c":87:26)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_15.c":88:26)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_15.c":88:13)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_15.c":92:13)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_15.c":94:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_15.c":99:1)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_15.c":134:1)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_15.c":101:5)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_15.c":101:9)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_15.c":103:12)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_15.c":103:5)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_15.c":104:5)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_15.c":114:5)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_15.c":104:12)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_15.c":106:5)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_15.c":108:16)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_15.c":108:9)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_15.c":109:9)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_15.c":110:5)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_15.c":112:19)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_15.c":112:9)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_15.c":113:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_15.c":115:5)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_15.c":133:5)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_15.c":115:12)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_15.c":117:5)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:9)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_15.c":127:9)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:13)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:20)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:28)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:35)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:31)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:49)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:62)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_15.c":119:69)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_15.c":120:9)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_15.c":123:9)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_15.c":125:9)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:13)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:33)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_15.c":121:26)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_15.c":122:26)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_15.c":122:13)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_15.c":126:23)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_15.c":126:13)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_15.c":128:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_15.c":129:5)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_15.c":131:19)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_15.c":131:9)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_15.c":132:9)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_15.c":137:1)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_15.c":167:1)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_15.c":139:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_15.c":139:9)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_15.c":141:12)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_15.c":141:5)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_15.c":142:5)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_15.c":152:5)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_15.c":142:12)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_15.c":144:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_15.c":146:19)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_15.c":146:9)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_15.c":147:9)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_15.c":148:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_15.c":150:16)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_15.c":150:9)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_15.c":151:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_15.c":153:5)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_15.c":166:5)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_15.c":153:12)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_15.c":155:5)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_15.c":156:5)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_15.c":160:5)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:9)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:29)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_15.c":158:22)
#loc167 = loc("CWE190_Integer_Overflow__int_max_square_15.c":159:22)
#loc168 = loc("CWE190_Integer_Overflow__int_max_square_15.c":159:9)
#loc169 = loc("CWE190_Integer_Overflow__int_max_square_15.c":161:5)
#loc170 = loc("CWE190_Integer_Overflow__int_max_square_15.c":162:5)
#loc171 = loc("CWE190_Integer_Overflow__int_max_square_15.c":164:19)
#loc172 = loc("CWE190_Integer_Overflow__int_max_square_15.c":164:9)
#loc173 = loc("CWE190_Integer_Overflow__int_max_square_15.c":165:9)
#loc174 = loc("CWE190_Integer_Overflow__int_max_square_15.c":170:1)
#loc175 = loc("CWE190_Integer_Overflow__int_max_square_15.c":200:1)
#loc176 = loc("CWE190_Integer_Overflow__int_max_square_15.c":172:5)
#loc177 = loc("CWE190_Integer_Overflow__int_max_square_15.c":172:9)
#loc178 = loc("CWE190_Integer_Overflow__int_max_square_15.c":174:12)
#loc179 = loc("CWE190_Integer_Overflow__int_max_square_15.c":174:5)
#loc180 = loc("CWE190_Integer_Overflow__int_max_square_15.c":175:5)
#loc181 = loc("CWE190_Integer_Overflow__int_max_square_15.c":185:5)
#loc182 = loc("CWE190_Integer_Overflow__int_max_square_15.c":175:12)
#loc183 = loc("CWE190_Integer_Overflow__int_max_square_15.c":177:5)
#loc184 = loc("CWE190_Integer_Overflow__int_max_square_15.c":179:16)
#loc185 = loc("CWE190_Integer_Overflow__int_max_square_15.c":179:9)
#loc186 = loc("CWE190_Integer_Overflow__int_max_square_15.c":180:9)
#loc187 = loc("CWE190_Integer_Overflow__int_max_square_15.c":181:5)
#loc188 = loc("CWE190_Integer_Overflow__int_max_square_15.c":183:19)
#loc189 = loc("CWE190_Integer_Overflow__int_max_square_15.c":183:9)
#loc190 = loc("CWE190_Integer_Overflow__int_max_square_15.c":184:9)
#loc191 = loc("CWE190_Integer_Overflow__int_max_square_15.c":186:5)
#loc192 = loc("CWE190_Integer_Overflow__int_max_square_15.c":199:5)
#loc193 = loc("CWE190_Integer_Overflow__int_max_square_15.c":186:12)
#loc194 = loc("CWE190_Integer_Overflow__int_max_square_15.c":188:5)
#loc195 = loc("CWE190_Integer_Overflow__int_max_square_15.c":189:5)
#loc196 = loc("CWE190_Integer_Overflow__int_max_square_15.c":193:5)
#loc197 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:9)
#loc198 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:29)
#loc199 = loc("CWE190_Integer_Overflow__int_max_square_15.c":191:22)
#loc200 = loc("CWE190_Integer_Overflow__int_max_square_15.c":192:22)
#loc201 = loc("CWE190_Integer_Overflow__int_max_square_15.c":192:9)
#loc202 = loc("CWE190_Integer_Overflow__int_max_square_15.c":194:5)
#loc203 = loc("CWE190_Integer_Overflow__int_max_square_15.c":195:5)
#loc204 = loc("CWE190_Integer_Overflow__int_max_square_15.c":197:19)
#loc205 = loc("CWE190_Integer_Overflow__int_max_square_15.c":197:9)
#loc206 = loc("CWE190_Integer_Overflow__int_max_square_15.c":198:9)
#loc207 = loc(fused[#loc1, #loc2])
#loc208 = loc(fused[#loc4, #loc5])
#loc209 = loc(fused[#loc6, #loc7])
#loc210 = loc(fused[#loc8, #loc9])
#loc211 = loc(fused[#loc11, #loc10])
#loc212 = loc(fused[#loc12, #loc13])
#loc213 = loc(fused[#loc17, #loc16])
#loc214 = loc(fused[#loc22, #loc23])
#loc215 = loc(fused[#loc26, #loc27])
#loc216 = loc(fused[#loc28, #loc29])
#loc217 = loc(fused[#loc38, #loc39])
#loc218 = loc(fused[#loc40, #loc41])
#loc219 = loc(fused[#loc42, #loc43])
#loc220 = loc(fused[#loc44, #loc45])
#loc221 = loc(fused[#loc46, #loc47])
#loc222 = loc(fused[#loc50, #loc51])
#loc223 = loc(fused[#loc52, #loc53])
#loc224 = loc(fused[#loc55, #loc54])
#loc225 = loc(fused[#loc56, #loc57])
#loc226 = loc(fused[#loc61, #loc60])
#loc227 = loc(fused[#loc67, #loc68])
#loc228 = loc(fused[#loc75, #loc76])
#loc229 = loc(fused[#loc77, #loc78])
#loc230 = loc(fused[#loc81, #loc84])
#loc231 = loc(fused[#loc85, #loc86, #loc87, #loc76])
#loc232 = loc(fused[#loc88, #loc89])
#loc233 = loc(fused[#loc95, #loc96])
#loc234 = loc(fused[#loc97, #loc98])
#loc235 = loc(fused[#loc100, #loc99])
#loc236 = loc(fused[#loc101, #loc102])
#loc237 = loc(fused[#loc106, #loc105])
#loc238 = loc(fused[#loc112, #loc113])
#loc239 = loc(fused[#loc116, #loc117])
#loc240 = loc(fused[#loc118, #loc119])
#loc241 = loc(fused[#loc122, #loc125])
#loc242 = loc(fused[#loc126, #loc127, #loc128, #loc117])
#loc243 = loc(fused[#loc129, #loc130])
#loc244 = loc(fused[#loc141, #loc142])
#loc245 = loc(fused[#loc143, #loc144])
#loc246 = loc(fused[#loc146, #loc145])
#loc247 = loc(fused[#loc147, #loc148])
#loc248 = loc(fused[#loc156, #loc155])
#loc249 = loc(fused[#loc158, #loc159])
#loc250 = loc(fused[#loc162, #loc163])
#loc251 = loc(fused[#loc164, #loc165])
#loc252 = loc(fused[#loc174, #loc175])
#loc253 = loc(fused[#loc176, #loc177])
#loc254 = loc(fused[#loc179, #loc178])
#loc255 = loc(fused[#loc180, #loc181])
#loc256 = loc(fused[#loc185, #loc184])
#loc257 = loc(fused[#loc191, #loc192])
#loc258 = loc(fused[#loc195, #loc196])
#loc259 = loc(fused[#loc197, #loc198])
