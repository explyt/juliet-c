!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:32)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":99:10)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":99:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":99:20)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":99:32)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:29)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:36)
#loc162 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc83, #loc84])
#loc189 = loc(fused[#loc85, #loc86])
#loc194 = loc(fused[#loc103, #loc104])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc160)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc10)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc11)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc11)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc163)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc164)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc10)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc165)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc166)
    cir.br ^bb1 loc(#loc167)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc18)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc19)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc19)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc168)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc169)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc21)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc23)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc21)
    cir.br ^bb3 loc(#loc17)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // pred: ^bb3
    %16 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc24)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc26)
    %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc27)
    cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc170)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc171)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc171)
  } loc(#loc161)
  cir.func private @snprintf(!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc172)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%s\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc32)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc173)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc174)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc43)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
    %4 = cir.call @badSource(%3) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc46)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc179)
    cir.br ^bb1 loc(#loc180)
  ^bb1:  // pred: ^bb0
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc51)
    %7 = cir.const #cir.int<67> : !s32i loc(#loc52)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc53)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc53)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc53)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc181)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc57)
    %14 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc58)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc60)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc60)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc182)
    %19 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc61)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc63)
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc32)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc32)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc64)
    %26 = cir.call @snprintf(%20, %22, %24, %25) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc61)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc67)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc68)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc68)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc67)
    cir.br ^bb2 loc(#loc50)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc38)
  } loc(#loc175)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc70)
  } loc(#loc183)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc185)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc186)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc80)
  cir.func @main(%arg0: !s32i loc(fused[#loc83, #loc84]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc85, #loc86])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc188)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc189)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc82)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc87)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc88)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc89)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc89)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc90)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc77)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_good() : () -> () loc(#loc92)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc78)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc79)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42_bad() : () -> () loc(#loc96)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc80)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc192)
    cir.return %17 : !s32i loc(#loc192)
  } loc(#loc187)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc103, #loc104])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc194)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc102)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc105)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc106)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc107)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc107)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc195)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc196)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc106)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc197)
    cir.store %8, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc198)
    cir.br ^bb1 loc(#loc199)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc115)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc115)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s8i>, !cir.bool loc(#loc200)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc201)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc117)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc119)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc117)
    cir.br ^bb3 loc(#loc113)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc113)
  ^bb4:  // pred: ^bb3
    %16 = cir.const #cir.int<0> : !s32i loc(#loc120)
    %17 = cir.cast(integral, %16 : !s32i), !s8i loc(#loc120)
    %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc122)
    %20 = cir.ptr_stride(%18 : !cir.ptr<!s8i>, %19 : !s32i), !cir.ptr<!s8i> loc(#loc123)
    cir.store %17, %20 : !s8i, !cir.ptr<!s8i> loc(#loc202)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc203)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc203)
    cir.return %22 : !cir.ptr<!s8i> loc(#loc203)
  } loc(#loc193)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc205)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc206)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc132)
    cir.store %2, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
    %4 = cir.call @goodG2BSource(%3) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc135)
    cir.store %4, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %5 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc140)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc140)
    %7 = cir.const #cir.int<67> : !s32i loc(#loc141)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc142)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc142)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc142)
    cir.libc.memset %11 bytes from %6 set to %7 : !cir.ptr<!void>, !s32i, !u64i loc(#loc210)
    %12 = cir.const #cir.int<0> : !s32i loc(#loc146)
    %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc146)
    %14 = cir.const #cir.int<100> : !s32i loc(#loc147)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc148)
    %16 = cir.binop(sub, %14, %15) nsw : !s32i loc(#loc147)
    %17 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc149)
    %18 = cir.ptr_stride(%17 : !cir.ptr<!s8i>, %16 : !s32i), !cir.ptr<!s8i> loc(#loc149)
    cir.store %13, %18 : !s8i, !cir.ptr<!s8i> loc(#loc211)
    %19 = cir.get_global @snprintf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, ...)>> loc(#loc150)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc151)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc152)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc152)
    %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc153)
    %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc153)
    %25 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc154)
    %26 = cir.call @snprintf(%20, %22, %24, %25) : (!cir.ptr<!s8i>, !u64i, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc150)
    %27 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%27) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    %28 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc157)
    %29 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc158)
    cir.call @free(%30) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc157)
    cir.br ^bb2 loc(#loc139)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc127)
  } loc(#loc204)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":36:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":30:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:20)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:27)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:30)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:41)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:42)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":32:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:33)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:17)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:23)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:24)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:30)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":33:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:15)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:10)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":34:11)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":35:12)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":35:5)
#loc30 = loc("/usr/include/stdio.h":385:1)
#loc31 = loc("/usr/include/stdio.h":387:62)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:29)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("/usr/include/stdlib.h":687:1)
#loc36 = loc("/usr/include/stdlib.h":687:32)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":38:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":52:1)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":44:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":44:24)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":40:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":40:12)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":41:12)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":41:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:22)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:12)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":42:26)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":43:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":51:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:16)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:24)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:29)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:33)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":45:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:25)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:16)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:20)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":46:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:24)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":48:35)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":49:19)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":49:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":50:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":50:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":84:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":87:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":86:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":86:13)
#loc73 = loc("/usr/include/stdlib.h":575:1)
#loc74 = loc("/usr/include/stdlib.h":575:41)
#loc75 = loc("/usr/include/time.h":76:1)
#loc76 = loc("/usr/include/time.h":76:38)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":104:15)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":106:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":109:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":111:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":99:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":114:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":100:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":102:27)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":102:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":102:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":104:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":105:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":105:71)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":106:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":109:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":110:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":110:70)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":111:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":113:12)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":113:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":58:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":65:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":59:1)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:20)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:27)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:42)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:43)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":61:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:9)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:17)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:23)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:30)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":62:29)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:15)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:5)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:10)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":63:11)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":64:12)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":64:5)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":68:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":82:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":74:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":74:24)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":70:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":70:12)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":71:12)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":71:5)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:26)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:12)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":72:30)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":73:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":81:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:16)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:24)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:29)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:33)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":75:34)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:25)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:16)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:20)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":76:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:9)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:24)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:29)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":78:35)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":79:19)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":79:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":80:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_snprintf_42.c":80:14)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc163 = loc(fused[#loc12, #loc13])
#loc164 = loc(fused[#loc11, #loc13])
#loc165 = loc(fused[#loc10, #loc14])
#loc166 = loc(fused[#loc15, #loc14])
#loc167 = loc(fused[#loc16, #loc17])
#loc168 = loc(fused[#loc18, #loc19])
#loc169 = loc(fused[#loc20, #loc17])
#loc170 = loc(fused[#loc25, #loc24])
#loc171 = loc(fused[#loc29, #loc28])
#loc172 = loc(fused[#loc30, #loc31])
#loc173 = loc(fused[#loc33, #loc34])
#loc174 = loc(fused[#loc35, #loc36])
#loc175 = loc(fused[#loc37, #loc38])
#loc176 = loc(fused[#loc39, #loc40])
#loc177 = loc(fused[#loc41, #loc42])
#loc178 = loc(fused[#loc44, #loc43])
#loc179 = loc(fused[#loc47, #loc48])
#loc180 = loc(fused[#loc49, #loc50])
#loc181 = loc(fused[#loc55, #loc56])
#loc182 = loc(fused[#loc60, #loc57])
#loc183 = loc(fused[#loc69, #loc70])
#loc184 = loc(fused[#loc71, #loc72])
#loc185 = loc(fused[#loc73, #loc74])
#loc186 = loc(fused[#loc75, #loc76])
#loc187 = loc(fused[#loc81, #loc82])
#loc190 = loc(fused[#loc92, #loc93])
#loc191 = loc(fused[#loc96, #loc97])
#loc192 = loc(fused[#loc100, #loc99])
#loc193 = loc(fused[#loc101, #loc102])
#loc195 = loc(fused[#loc108, #loc109])
#loc196 = loc(fused[#loc107, #loc109])
#loc197 = loc(fused[#loc106, #loc110])
#loc198 = loc(fused[#loc111, #loc110])
#loc199 = loc(fused[#loc112, #loc113])
#loc200 = loc(fused[#loc114, #loc115])
#loc201 = loc(fused[#loc116, #loc113])
#loc202 = loc(fused[#loc121, #loc120])
#loc203 = loc(fused[#loc125, #loc124])
#loc204 = loc(fused[#loc126, #loc127])
#loc205 = loc(fused[#loc128, #loc129])
#loc206 = loc(fused[#loc130, #loc131])
#loc207 = loc(fused[#loc133, #loc132])
#loc208 = loc(fused[#loc136, #loc137])
#loc209 = loc(fused[#loc138, #loc139])
#loc210 = loc(fused[#loc144, #loc145])
#loc211 = loc(fused[#loc149, #loc146])
