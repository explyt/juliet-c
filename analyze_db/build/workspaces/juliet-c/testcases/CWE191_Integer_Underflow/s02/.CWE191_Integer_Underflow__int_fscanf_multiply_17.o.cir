!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc152)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func no_proto @CWE191_Integer_Underflow__int_fscanf_multiply_17_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc156)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc157)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc158)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc159)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc19)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc161)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc162)
        cir.condition(%7) loc(#loc23)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc25)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc26)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc25)
        } loc(#loc163)
        cir.yield loc(#loc18)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc28)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc164)
        cir.yield loc(#loc160)
      } loc(#loc160)
    } loc(#loc160)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc31)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc166)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc167)
        cir.condition(%7) loc(#loc35)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc40)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc170)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc43)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc44)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc172)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc45)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc46)
            } loc(#loc171)
          } loc(#loc169)
        } loc(#loc168)
        cir.yield loc(#loc30)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc48)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc173)
        cir.yield loc(#loc165)
      } loc(#loc165)
    } loc(#loc165)
    cir.return loc(#loc9)
  } loc(#loc155)
  cir.func no_proto @CWE191_Integer_Underflow__int_fscanf_multiply_17_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc176)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc174)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc57)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc179)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc180)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc181)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc69)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc184)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc71)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc72)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc185)
        cir.condition(%7) loc(#loc73)
      } body {
        cir.scope {
          %5 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc75)
          %6 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc153)
          %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc76)
          %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc77)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc77)
          %10 = cir.call @__isoc99_fscanf(%7, %9, %2) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc75)
        } loc(#loc186)
        cir.yield loc(#loc68)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc79)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc183)
      } loc(#loc183)
    } loc(#loc183)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc82)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc84)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc190)
        cir.condition(%7) loc(#loc86)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc90)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc91)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc193)
            cir.if %7 {
              cir.scope {
                %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
                %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc96)
                %11 = cir.const #cir.int<1> : !s32i loc(#loc96)
                %12 = cir.binop(sub, %10, %11) nsw : !s32i loc(#loc96)
                %13 = cir.const #cir.int<2> : !s32i loc(#loc97)
                %14 = cir.binop(div, %12, %13) : !s32i loc(#loc196)
                %15 = cir.cmp(gt, %8, %14) : !s32i, !cir.bool loc(#loc197)
                cir.if %15 {
                  %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
                  %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc104)
                  %18 = cir.const #cir.int<2> : !s32i loc(#loc103)
                  %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc104)
                  cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc199)
                  %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc105)
                  cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc106)
                } else {
                  %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc57)
                  %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc57)
                  cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc107)
                } loc(#loc198)
              } loc(#loc195)
            } loc(#loc194)
          } loc(#loc192)
        } loc(#loc191)
        cir.yield loc(#loc81)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc109)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc59)
  } loc(#loc178)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc203)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc121)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc123)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc124)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc208)
        cir.condition(%7) loc(#loc125)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc127)
          %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc128)
          cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc210)
        } loc(#loc209)
        cir.yield loc(#loc120)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc131)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
        cir.yield loc(#loc206)
      } loc(#loc206)
    } loc(#loc206)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc134)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc137)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc214)
        cir.condition(%7) loc(#loc138)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
            %6 = cir.const #cir.int<0> : !s32i loc(#loc143)
            %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc217)
            cir.if %7 {
              %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc219)
              %9 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc146)
              %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc147)
              cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc219)
              %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc148)
              cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc149)
            } loc(#loc218)
          } loc(#loc216)
        } loc(#loc215)
        cir.yield loc(#loc133)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc151)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
        cir.yield loc(#loc212)
      } loc(#loc212)
    } loc(#loc212)
    cir.return loc(#loc111)
  } loc(#loc201)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int_fscanf_multiply_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":31:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":42:1)
#loc10 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":24:5)
#loc11 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":24:9)
#loc12 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":24:11)
#loc13 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":25:9)
#loc15 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":27:12)
#loc16 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":27:5)
#loc17 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:5)
#loc18 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":32:5)
#loc19 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:13)
#loc20 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:9)
#loc21 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:16)
#loc22 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:20)
#loc23 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:18)
#loc24 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":29:5)
#loc25 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":31:9)
#loc26 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":31:16)
#loc27 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:24)
#loc28 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":28:23)
#loc29 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:5)
#loc30 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":41:5)
#loc31 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:13)
#loc32 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:9)
#loc33 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:16)
#loc34 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:20)
#loc35 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:18)
#loc36 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":34:5)
#loc37 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":35:9)
#loc38 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":40:9)
#loc39 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":35:12)
#loc40 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":35:19)
#loc41 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":36:9)
#loc42 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":38:13)
#loc43 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":38:33)
#loc44 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":38:26)
#loc45 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":39:26)
#loc46 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":39:13)
#loc47 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:24)
#loc48 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":33:23)
#loc49 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":101:1)
#loc50 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":105:1)
#loc51 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":103:5)
#loc52 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":103:13)
#loc53 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":104:5)
#loc54 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":104:13)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc57 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":72:27)
#loc58 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":49:1)
#loc59 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":76:1)
#loc60 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":51:5)
#loc61 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":51:9)
#loc62 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":51:11)
#loc63 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":52:5)
#loc64 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":52:9)
#loc65 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":54:12)
#loc66 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":54:5)
#loc67 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:5)
#loc68 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":59:5)
#loc69 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:13)
#loc70 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:9)
#loc71 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:16)
#loc72 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:20)
#loc73 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:18)
#loc74 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":56:5)
#loc75 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":58:9)
#loc76 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":58:16)
#loc77 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":58:23)
#loc78 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:24)
#loc79 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":55:23)
#loc80 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:5)
#loc81 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":75:5)
#loc82 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:13)
#loc83 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:9)
#loc84 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:16)
#loc85 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:20)
#loc86 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:18)
#loc87 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":61:5)
#loc88 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":62:9)
#loc89 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":74:9)
#loc90 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":62:12)
#loc91 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":62:19)
#loc92 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":63:9)
#loc93 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":65:13)
#loc94 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":73:13)
#loc95 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":65:17)
#loc96 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":65:25)
#loc97 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":65:33)
#loc98 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":65:34)
#loc99 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":66:13)
#loc100 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":69:13)
#loc101 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":71:13)
#loc102 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":67:17)
#loc103 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":67:37)
#loc104 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":67:30)
#loc105 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":68:30)
#loc106 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":68:17)
#loc107 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":72:17)
#loc108 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:24)
#loc109 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":60:23)
#loc110 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":79:1)
#loc111 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":99:1)
#loc112 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":81:5)
#loc113 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":81:9)
#loc114 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":81:11)
#loc115 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":82:5)
#loc116 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":82:9)
#loc117 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":84:12)
#loc118 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":84:5)
#loc119 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:5)
#loc120 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":89:5)
#loc121 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:13)
#loc122 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:9)
#loc123 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:16)
#loc124 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:20)
#loc125 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:18)
#loc126 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":86:5)
#loc127 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":88:17)
#loc128 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":88:16)
#loc129 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":88:9)
#loc130 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:24)
#loc131 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":85:23)
#loc132 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:5)
#loc133 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":98:5)
#loc134 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:13)
#loc135 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:9)
#loc136 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:16)
#loc137 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:20)
#loc138 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:18)
#loc139 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":91:5)
#loc140 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":92:9)
#loc141 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":97:9)
#loc142 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":92:12)
#loc143 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":92:19)
#loc144 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":93:9)
#loc145 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":95:13)
#loc146 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":95:33)
#loc147 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":95:26)
#loc148 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":96:26)
#loc149 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":96:13)
#loc150 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:24)
#loc151 = loc("CWE191_Integer_Underflow__int_fscanf_multiply_17.c":90:23)
#loc152 = loc(fused[#loc1, #loc2])
#loc153 = loc(fused[#loc3, #loc4])
#loc154 = loc(fused[#loc6, #loc7])
#loc155 = loc(fused[#loc8, #loc9])
#loc156 = loc(fused[#loc10, #loc11])
#loc157 = loc(fused[#loc10, #loc12])
#loc158 = loc(fused[#loc13, #loc14])
#loc159 = loc(fused[#loc16, #loc15])
#loc160 = loc(fused[#loc17, #loc18])
#loc161 = loc(fused[#loc20, #loc19])
#loc162 = loc(fused[#loc21, #loc22])
#loc163 = loc(fused[#loc24, #loc18])
#loc164 = loc(fused[#loc28, #loc27])
#loc165 = loc(fused[#loc29, #loc30])
#loc166 = loc(fused[#loc32, #loc31])
#loc167 = loc(fused[#loc33, #loc34])
#loc168 = loc(fused[#loc36, #loc30])
#loc169 = loc(fused[#loc37, #loc38])
#loc170 = loc(fused[#loc39, #loc40])
#loc171 = loc(fused[#loc41, #loc38])
#loc172 = loc(fused[#loc42, #loc43])
#loc173 = loc(fused[#loc48, #loc47])
#loc174 = loc(fused[#loc49, #loc50])
#loc175 = loc(fused[#loc51, #loc52])
#loc176 = loc(fused[#loc53, #loc54])
#loc177 = loc(fused[#loc55, #loc56])
#loc178 = loc(fused[#loc58, #loc59])
#loc179 = loc(fused[#loc60, #loc61])
#loc180 = loc(fused[#loc60, #loc62])
#loc181 = loc(fused[#loc63, #loc64])
#loc182 = loc(fused[#loc66, #loc65])
#loc183 = loc(fused[#loc67, #loc68])
#loc184 = loc(fused[#loc70, #loc69])
#loc185 = loc(fused[#loc71, #loc72])
#loc186 = loc(fused[#loc74, #loc68])
#loc187 = loc(fused[#loc79, #loc78])
#loc188 = loc(fused[#loc80, #loc81])
#loc189 = loc(fused[#loc83, #loc82])
#loc190 = loc(fused[#loc84, #loc85])
#loc191 = loc(fused[#loc87, #loc81])
#loc192 = loc(fused[#loc88, #loc89])
#loc193 = loc(fused[#loc90, #loc91])
#loc194 = loc(fused[#loc92, #loc89])
#loc195 = loc(fused[#loc93, #loc94])
#loc196 = loc(fused[#loc96, #loc97])
#loc197 = loc(fused[#loc95, #loc98])
#loc198 = loc(fused[#loc99, #loc100, #loc101, #loc94])
#loc199 = loc(fused[#loc102, #loc103])
#loc200 = loc(fused[#loc109, #loc108])
#loc201 = loc(fused[#loc110, #loc111])
#loc202 = loc(fused[#loc112, #loc113])
#loc203 = loc(fused[#loc112, #loc114])
#loc204 = loc(fused[#loc115, #loc116])
#loc205 = loc(fused[#loc118, #loc117])
#loc206 = loc(fused[#loc119, #loc120])
#loc207 = loc(fused[#loc122, #loc121])
#loc208 = loc(fused[#loc123, #loc124])
#loc209 = loc(fused[#loc126, #loc120])
#loc210 = loc(fused[#loc129, #loc127])
#loc211 = loc(fused[#loc131, #loc130])
#loc212 = loc(fused[#loc132, #loc133])
#loc213 = loc(fused[#loc135, #loc134])
#loc214 = loc(fused[#loc136, #loc137])
#loc215 = loc(fused[#loc139, #loc133])
#loc216 = loc(fused[#loc140, #loc141])
#loc217 = loc(fused[#loc142, #loc143])
#loc218 = loc(fused[#loc144, #loc141])
#loc219 = loc(fused[#loc145, #loc146])
#loc220 = loc(fused[#loc151, #loc150])
