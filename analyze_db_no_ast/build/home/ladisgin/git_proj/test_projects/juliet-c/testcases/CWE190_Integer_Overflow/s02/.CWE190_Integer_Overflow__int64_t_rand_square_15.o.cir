!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc187)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printLongLongLine(!s64i) loc(#loc189)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc12)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc192)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc17)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
          cir.yield %30 : !u64i loc(#loc17)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc17)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc17)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc17)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc17)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc17)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc17)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc17)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc17)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc17)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc17)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc17)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc17)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc17)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc17)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc17)
          %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc17)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc17)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc17)
          cir.yield %34 : !u64i loc(#loc17)
        }) : (!cir.bool) -> !u64i loc(#loc17)
        %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc17)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc194)
        cir.break loc(#loc19)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc14)
    } loc(#loc193)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc197)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc29)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc29)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc197)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc30)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc31)
        } loc(#loc196)
        cir.break loc(#loc32)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc33)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc33)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc34)
        cir.break loc(#loc35)
      }
      ] loc(#loc22)
    } loc(#loc195)
    cir.return loc(#loc9)
  } loc(#loc190)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_rand_square_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc37)
  } loc(#loc198)
  cir.func private  @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc203)
  cir.func private  @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc48)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc205)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc54)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc206)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc58)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc59)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc59)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc59)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc59)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc59)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc59)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc59)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc59)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc59)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc59)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc59)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc59)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc59)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc59)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc59)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc59)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc59)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc59)
          cir.yield %30 : !u64i loc(#loc59)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc59)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc59)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc59)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc59)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc59)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc59)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc59)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc59)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc59)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc59)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc59)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc59)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc59)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc59)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc59)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc59)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc59)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc59)
          %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc59)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc59)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc59)
          cir.yield %34 : !u64i loc(#loc59)
        }) : (!cir.bool) -> !u64i loc(#loc59)
        %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc59)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc208)
        cir.break loc(#loc61)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc62)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc62)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc63)
        cir.break loc(#loc64)
      }
      ] loc(#loc56)
    } loc(#loc207)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc67)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc69)
        cir.break loc(#loc70)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc73)
          %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc74)
          %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc74)
          %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc75)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc76)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc76)
          %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc75)
          %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !s32i loc(#loc211)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc78)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc213)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc84)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc84)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc213)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc85)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc86)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc87)
          } loc(#loc212)
        } loc(#loc210)
        cir.break loc(#loc88)
      }
      ] loc(#loc65)
    } loc(#loc209)
    cir.return loc(#loc51)
  } loc(#loc204)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc93)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc216)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc97)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
        %4 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %5 = cir.binop(and, %3, %4) : !s32i loc(#loc98)
        %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc98)
        %7 = cir.ternary(%6, true {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc98)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc98)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc98)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc98)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc98)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc98)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc98)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc98)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc98)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc98)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc98)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc98)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc98)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc98)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc98)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc98)
          cir.yield %30 : !u64i loc(#loc98)
        }, false {
          %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc98)
          %11 = cir.const #cir.int<60> : !s32i loc(#loc98)
          %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc98)
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc98)
          %15 = cir.const #cir.int<45> : !s32i loc(#loc98)
          %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc98)
          %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc98)
          %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc98)
          %20 = cir.const #cir.int<30> : !s32i loc(#loc98)
          %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc98)
          %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc98)
          %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc98)
          %25 = cir.const #cir.int<15> : !s32i loc(#loc98)
          %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc98)
          %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc98)
          %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc98)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc98)
          %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc98)
          %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc98)
          %32 = cir.const #cir.int<1> : !s32i loc(#loc98)
          %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc98)
          %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc98)
          cir.yield %34 : !u64i loc(#loc98)
        }) : (!cir.bool) -> !u64i loc(#loc98)
        %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc98)
        cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc218)
        cir.break loc(#loc100)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc101)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc101)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc102)
        cir.break loc(#loc103)
      }
      ] loc(#loc95)
    } loc(#loc217)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc106)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc109)
          %4 = cir.call @imaxabs(%3) : (!s64i) -> !s64i extra(#fn_attr) loc(#loc110)
          %5 = cir.cast(int_to_float, %4 : !s64i), !cir.long_double<!cir.f80> loc(#loc110)
          %6 = cir.get_global @sqrtl : !cir.ptr<!cir.func<!cir.long_double<!cir.f80> (!cir.long_double<!cir.f80>)>> loc(#loc111)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc112)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc112)
          %9 = cir.call @sqrtl(%8) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc111)
          %10 = cir.cmp(le, %5, %9) : !cir.long_double<!cir.f80>, !s32i loc(#loc221)
          %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc114)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc223)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc120)
            %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc119)
            %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc120)
            cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc223)
            %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc121)
            cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc122)
          } else {
            %12 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc123)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc123)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc222)
        } loc(#loc220)
        cir.break loc(#loc125)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc126)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc126)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc127)
        cir.break loc(#loc128)
      }
      ] loc(#loc104)
    } loc(#loc219)
    cir.return loc(#loc90)
  } loc(#loc214)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc133)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc226)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc137)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc139)
        cir.break loc(#loc140)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc141)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc141)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc228)
        cir.break loc(#loc143)
      }
      ] loc(#loc135)
    } loc(#loc227)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc146)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc231)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc151)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc150)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc151)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc231)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc152)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc153)
        } loc(#loc230)
        cir.break loc(#loc154)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc155)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc155)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc156)
        cir.break loc(#loc157)
      }
      ] loc(#loc144)
    } loc(#loc229)
    cir.return loc(#loc130)
  } loc(#loc224)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc233)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc162)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc234)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc166)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc167)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc167)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc236)
        cir.break loc(#loc169)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc170)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc170)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc171)
        cir.break loc(#loc172)
      }
      ] loc(#loc164)
    } loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc175)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc239)
          %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc180)
          %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc179)
          %6 = cir.binop(mul, %4, %5) nsw : !s64i loc(#loc180)
          cir.store %6, %3 : !s64i, !cir.ptr<!s64i> loc(#loc239)
          %7 = cir.load %3 : !cir.ptr<!s64i>, !s64i loc(#loc181)
          cir.call @printLongLongLine(%7) : (!s64i) -> () loc(#loc182)
        } loc(#loc238)
        cir.break loc(#loc183)
      },
      case (default) {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc184)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc184)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc185)
        cir.break loc(#loc186)
      }
      ] loc(#loc173)
    } loc(#loc237)
    cir.return loc(#loc159)
  } loc(#loc232)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":37:19)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":25:1)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":54:1)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":27:13)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":28:12)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":28:5)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":29:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":39:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":29:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":33:25)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":33:9)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":34:9)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":38:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":53:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":40:12)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":43:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":47:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:9)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:33)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":45:26)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":46:27)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":46:9)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":48:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":51:19)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":51:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":52:9)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":198:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":204:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":200:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":200:14)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":201:5)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":201:14)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":202:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":202:14)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":203:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":203:14)
#loc46 = loc("/usr/include/inttypes.h":351:1)
#loc47 = loc("/usr/include/inttypes.h":351:74)
#loc48 = loc("/usr/include/bits/mathcalls.h":143:1)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":91:23)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":61:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":95:1)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":63:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":63:13)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":64:12)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":64:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":65:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":75:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":65:12)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":69:25)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":69:9)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":70:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":73:19)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":73:9)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":74:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":76:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":94:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":76:12)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":80:19)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":80:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":81:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":92:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:31)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:13)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:40)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:46)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:55)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":84:37)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":85:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":88:9)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":90:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:13)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:37)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":86:30)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":87:31)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":87:13)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":91:13)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":93:9)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":98:1)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":132:1)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":100:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":100:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":101:12)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":101:5)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":102:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":112:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":102:12)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":106:25)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":106:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":107:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":110:19)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":110:9)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":111:9)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":113:5)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":131:5)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":113:12)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:9)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":125:9)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:31)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:13)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:40)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:46)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:55)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":117:37)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":118:9)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":121:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":123:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:37)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":119:30)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":120:31)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":120:13)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":124:23)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":124:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":126:9)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":129:19)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":129:9)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":130:9)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":135:1)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":164:1)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":137:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":137:13)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":138:12)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":138:5)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":139:5)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":149:5)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":139:12)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":143:19)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":143:9)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":144:9)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":147:16)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":147:9)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":148:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":150:5)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":163:5)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":150:12)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":153:5)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":157:5)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:9)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:33)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":155:26)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":156:27)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":156:9)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":158:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":161:19)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":161:9)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":162:9)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":167:1)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":196:1)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":169:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":169:13)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":170:12)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":170:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":171:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":181:5)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":171:12)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":175:16)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":175:9)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":176:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":179:19)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":179:9)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":180:9)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":182:5)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":195:5)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":182:12)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":185:5)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":189:5)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:9)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:33)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":187:26)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":188:27)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":188:9)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":190:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":193:19)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":193:9)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_rand_square_15.c":194:9)
#loc187 = loc(fused[#loc1, #loc2])
#loc188 = loc(fused[#loc3, #loc4])
#loc189 = loc(fused[#loc6, #loc7])
#loc190 = loc(fused[#loc8, #loc9])
#loc191 = loc(fused[#loc10, #loc11])
#loc192 = loc(fused[#loc13, #loc12])
#loc193 = loc(fused[#loc14, #loc15])
#loc194 = loc(fused[#loc18, #loc17])
#loc195 = loc(fused[#loc22, #loc23])
#loc196 = loc(fused[#loc25, #loc26])
#loc197 = loc(fused[#loc27, #loc28])
#loc198 = loc(fused[#loc36, #loc37])
#loc199 = loc(fused[#loc38, #loc39])
#loc200 = loc(fused[#loc40, #loc41])
#loc201 = loc(fused[#loc42, #loc43])
#loc202 = loc(fused[#loc44, #loc45])
#loc203 = loc(fused[#loc46, #loc47])
#loc204 = loc(fused[#loc50, #loc51])
#loc205 = loc(fused[#loc52, #loc53])
#loc206 = loc(fused[#loc55, #loc54])
#loc207 = loc(fused[#loc56, #loc57])
#loc208 = loc(fused[#loc60, #loc59])
#loc209 = loc(fused[#loc65, #loc66])
#loc210 = loc(fused[#loc71, #loc72])
#loc211 = loc(fused[#loc74, #loc77])
#loc212 = loc(fused[#loc79, #loc80, #loc81, #loc72])
#loc213 = loc(fused[#loc82, #loc83])
#loc214 = loc(fused[#loc89, #loc90])
#loc215 = loc(fused[#loc91, #loc92])
#loc216 = loc(fused[#loc94, #loc93])
#loc217 = loc(fused[#loc95, #loc96])
#loc218 = loc(fused[#loc99, #loc98])
#loc219 = loc(fused[#loc104, #loc105])
#loc220 = loc(fused[#loc107, #loc108])
#loc221 = loc(fused[#loc110, #loc113])
#loc222 = loc(fused[#loc115, #loc116, #loc117, #loc108])
#loc223 = loc(fused[#loc118, #loc119])
#loc224 = loc(fused[#loc129, #loc130])
#loc225 = loc(fused[#loc131, #loc132])
#loc226 = loc(fused[#loc134, #loc133])
#loc227 = loc(fused[#loc135, #loc136])
#loc228 = loc(fused[#loc142, #loc141])
#loc229 = loc(fused[#loc144, #loc145])
#loc230 = loc(fused[#loc147, #loc148])
#loc231 = loc(fused[#loc149, #loc150])
#loc232 = loc(fused[#loc158, #loc159])
#loc233 = loc(fused[#loc160, #loc161])
#loc234 = loc(fused[#loc163, #loc162])
#loc235 = loc(fused[#loc164, #loc165])
#loc236 = loc(fused[#loc168, #loc167])
#loc237 = loc(fused[#loc173, #loc174])
#loc238 = loc(fused[#loc176, #loc177])
#loc239 = loc(fused[#loc178, #loc179])
