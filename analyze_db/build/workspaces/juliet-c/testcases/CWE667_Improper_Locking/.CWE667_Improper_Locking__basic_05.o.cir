!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_05_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc113)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc8)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc11)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc14)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc116)
  cir.func no_proto @CWE667_Improper_Locking__basic_05_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc112)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc21)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @CWE667_Improper_Locking__basic_05_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc8)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc25)
          cir.scope {
            %9 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc28)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc28)
            %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc28)
            cir.if %11 {
              %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc11)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc30)
              %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc31)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc32)
              cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
            } loc(#loc122)
          } loc(#loc121)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc14)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc14)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc33)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc34)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc35)
        } loc(#loc120)
      } loc(#loc119)
    } loc(#loc118)
    cir.return loc(#loc18)
  } loc(#loc117)
  cir.func no_proto @CWE667_Improper_Locking__basic_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc124)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc125)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc123)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc45)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc127)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc48)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc128)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc126)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc55)
      cir.if %2 {
        %3 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %3 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc62)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc62)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc63)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc66)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc66)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc66)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc68)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc68)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc69)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc70)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc71)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc70)
            } loc(#loc134)
          } loc(#loc133)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc72)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc72)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc73)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc74)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc75)
          %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc45)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc45)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc76)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc77)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc78)
          %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc48)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc48)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc79)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc80)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc81)
        } loc(#loc132)
      } loc(#loc131)
    } loc(#loc130)
    cir.return loc(#loc52)
  } loc(#loc129)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc112)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc86)
      cir.if %2 {
        cir.scope {
          %3 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
          %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc90)
          %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc90)
          cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc91)
          cir.scope {
            %15 = cir.call @stdThreadLockCreate(%3) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc94)
            %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc94)
            %17 = cir.unary(not, %16) : !cir.bool, !cir.bool loc(#loc94)
            cir.if %17 {
              %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc96)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc96)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc97)
              %20 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc98)
              %21 = cir.const #cir.int<1> : !s32i loc(#loc99)
              cir.call @exit(%21) : (!s32i) -> () extra(#fn_attr) loc(#loc98)
            } loc(#loc140)
          } loc(#loc139)
          %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc100)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc100)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc101)
          %8 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc102)
          cir.call @stdThreadLockAcquire(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc103)
          %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc104)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc104)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc106)
          cir.call @stdThreadLockRelease(%11) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc107)
          %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc108)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc108)
          cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc109)
          %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc110)
          cir.call @stdThreadLockDestroy(%14) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc111)
        } loc(#loc138)
      } loc(#loc137)
    } loc(#loc136)
    cir.return loc(#loc83)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_05.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_05.c":86:34)
#loc2 = loc("CWE667_Improper_Locking__basic_05.c":62:34)
#loc3 = loc("CWE667_Improper_Locking__basic_05.c":33:34)
#loc4 = loc("CWE667_Improper_Locking__basic_05.c":23:1)
#loc5 = loc("CWE667_Improper_Locking__basic_05.c":23:25)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE667_Improper_Locking__basic_05.c":34:23)
#loc9 = loc("../../testcasesupport/std_thread.h":18:1)
#loc10 = loc("../../testcasesupport/std_thread.h":18:44)
#loc11 = loc("CWE667_Improper_Locking__basic_05.c":37:27)
#loc12 = loc("/usr/include/stdlib.h":756:1)
#loc13 = loc("/usr/include/stdlib.h":756:70)
#loc14 = loc("CWE667_Improper_Locking__basic_05.c":40:23)
#loc15 = loc("../../testcasesupport/std_thread.h":19:1)
#loc16 = loc("../../testcasesupport/std_thread.h":19:45)
#loc17 = loc("CWE667_Improper_Locking__basic_05.c":28:1)
#loc18 = loc("CWE667_Improper_Locking__basic_05.c":45:1)
#loc19 = loc("CWE667_Improper_Locking__basic_05.c":30:5)
#loc20 = loc("CWE667_Improper_Locking__basic_05.c":44:5)
#loc21 = loc("CWE667_Improper_Locking__basic_05.c":30:8)
#loc22 = loc("CWE667_Improper_Locking__basic_05.c":31:5)
#loc23 = loc("CWE667_Improper_Locking__basic_05.c":32:9)
#loc24 = loc("CWE667_Improper_Locking__basic_05.c":43:9)
#loc25 = loc("CWE667_Improper_Locking__basic_05.c":34:13)
#loc26 = loc("CWE667_Improper_Locking__basic_05.c":35:13)
#loc27 = loc("CWE667_Improper_Locking__basic_05.c":39:13)
#loc28 = loc("CWE667_Improper_Locking__basic_05.c":35:18)
#loc29 = loc("CWE667_Improper_Locking__basic_05.c":36:13)
#loc30 = loc("CWE667_Improper_Locking__basic_05.c":37:17)
#loc31 = loc("CWE667_Improper_Locking__basic_05.c":38:17)
#loc32 = loc("CWE667_Improper_Locking__basic_05.c":38:22)
#loc33 = loc("CWE667_Improper_Locking__basic_05.c":40:13)
#loc34 = loc("CWE667_Improper_Locking__basic_05.c":41:34)
#loc35 = loc("CWE667_Improper_Locking__basic_05.c":41:13)
#loc36 = loc("CWE667_Improper_Locking__basic_05.c":104:1)
#loc37 = loc("CWE667_Improper_Locking__basic_05.c":108:1)
#loc38 = loc("CWE667_Improper_Locking__basic_05.c":106:5)
#loc39 = loc("CWE667_Improper_Locking__basic_05.c":106:11)
#loc40 = loc("CWE667_Improper_Locking__basic_05.c":107:5)
#loc41 = loc("CWE667_Improper_Locking__basic_05.c":107:11)
#loc42 = loc("CWE667_Improper_Locking__basic_05.c":24:1)
#loc43 = loc("CWE667_Improper_Locking__basic_05.c":24:26)
#loc44 = loc("CWE667_Improper_Locking__basic_05.c":57:19)
#loc45 = loc("CWE667_Improper_Locking__basic_05.c":72:23)
#loc46 = loc("../../testcasesupport/std_thread.h":20:1)
#loc47 = loc("../../testcasesupport/std_thread.h":20:45)
#loc48 = loc("CWE667_Improper_Locking__basic_05.c":74:23)
#loc49 = loc("../../testcasesupport/std_thread.h":21:1)
#loc50 = loc("../../testcasesupport/std_thread.h":21:45)
#loc51 = loc("CWE667_Improper_Locking__basic_05.c":52:1)
#loc52 = loc("CWE667_Improper_Locking__basic_05.c":78:1)
#loc53 = loc("CWE667_Improper_Locking__basic_05.c":54:5)
#loc54 = loc("CWE667_Improper_Locking__basic_05.c":77:5)
#loc55 = loc("CWE667_Improper_Locking__basic_05.c":54:8)
#loc56 = loc("CWE667_Improper_Locking__basic_05.c":55:5)
#loc57 = loc("CWE667_Improper_Locking__basic_05.c":58:5)
#loc58 = loc("CWE667_Improper_Locking__basic_05.c":60:5)
#loc59 = loc("CWE667_Improper_Locking__basic_05.c":57:9)
#loc60 = loc("CWE667_Improper_Locking__basic_05.c":61:9)
#loc61 = loc("CWE667_Improper_Locking__basic_05.c":76:9)
#loc62 = loc("CWE667_Improper_Locking__basic_05.c":63:23)
#loc63 = loc("CWE667_Improper_Locking__basic_05.c":63:13)
#loc64 = loc("CWE667_Improper_Locking__basic_05.c":64:13)
#loc65 = loc("CWE667_Improper_Locking__basic_05.c":68:13)
#loc66 = loc("CWE667_Improper_Locking__basic_05.c":64:18)
#loc67 = loc("CWE667_Improper_Locking__basic_05.c":65:13)
#loc68 = loc("CWE667_Improper_Locking__basic_05.c":66:27)
#loc69 = loc("CWE667_Improper_Locking__basic_05.c":66:17)
#loc70 = loc("CWE667_Improper_Locking__basic_05.c":67:17)
#loc71 = loc("CWE667_Improper_Locking__basic_05.c":67:22)
#loc72 = loc("CWE667_Improper_Locking__basic_05.c":69:23)
#loc73 = loc("CWE667_Improper_Locking__basic_05.c":69:13)
#loc74 = loc("CWE667_Improper_Locking__basic_05.c":70:34)
#loc75 = loc("CWE667_Improper_Locking__basic_05.c":70:13)
#loc76 = loc("CWE667_Improper_Locking__basic_05.c":72:13)
#loc77 = loc("CWE667_Improper_Locking__basic_05.c":73:34)
#loc78 = loc("CWE667_Improper_Locking__basic_05.c":73:13)
#loc79 = loc("CWE667_Improper_Locking__basic_05.c":74:13)
#loc80 = loc("CWE667_Improper_Locking__basic_05.c":75:34)
#loc81 = loc("CWE667_Improper_Locking__basic_05.c":75:13)
#loc82 = loc("CWE667_Improper_Locking__basic_05.c":81:1)
#loc83 = loc("CWE667_Improper_Locking__basic_05.c":102:1)
#loc84 = loc("CWE667_Improper_Locking__basic_05.c":83:5)
#loc85 = loc("CWE667_Improper_Locking__basic_05.c":101:5)
#loc86 = loc("CWE667_Improper_Locking__basic_05.c":83:8)
#loc87 = loc("CWE667_Improper_Locking__basic_05.c":84:5)
#loc88 = loc("CWE667_Improper_Locking__basic_05.c":85:9)
#loc89 = loc("CWE667_Improper_Locking__basic_05.c":100:9)
#loc90 = loc("CWE667_Improper_Locking__basic_05.c":87:23)
#loc91 = loc("CWE667_Improper_Locking__basic_05.c":87:13)
#loc92 = loc("CWE667_Improper_Locking__basic_05.c":88:13)
#loc93 = loc("CWE667_Improper_Locking__basic_05.c":92:13)
#loc94 = loc("CWE667_Improper_Locking__basic_05.c":88:18)
#loc95 = loc("CWE667_Improper_Locking__basic_05.c":89:13)
#loc96 = loc("CWE667_Improper_Locking__basic_05.c":90:27)
#loc97 = loc("CWE667_Improper_Locking__basic_05.c":90:17)
#loc98 = loc("CWE667_Improper_Locking__basic_05.c":91:17)
#loc99 = loc("CWE667_Improper_Locking__basic_05.c":91:22)
#loc100 = loc("CWE667_Improper_Locking__basic_05.c":93:23)
#loc101 = loc("CWE667_Improper_Locking__basic_05.c":93:13)
#loc102 = loc("CWE667_Improper_Locking__basic_05.c":94:34)
#loc103 = loc("CWE667_Improper_Locking__basic_05.c":94:13)
#loc104 = loc("CWE667_Improper_Locking__basic_05.c":96:23)
#loc105 = loc("CWE667_Improper_Locking__basic_05.c":96:13)
#loc106 = loc("CWE667_Improper_Locking__basic_05.c":97:34)
#loc107 = loc("CWE667_Improper_Locking__basic_05.c":97:13)
#loc108 = loc("CWE667_Improper_Locking__basic_05.c":98:23)
#loc109 = loc("CWE667_Improper_Locking__basic_05.c":98:13)
#loc110 = loc("CWE667_Improper_Locking__basic_05.c":99:34)
#loc111 = loc("CWE667_Improper_Locking__basic_05.c":99:13)
#loc112 = loc(fused[#loc4, #loc5])
#loc113 = loc(fused[#loc6, #loc7])
#loc114 = loc(fused[#loc9, #loc10])
#loc115 = loc(fused[#loc12, #loc13])
#loc116 = loc(fused[#loc15, #loc16])
#loc117 = loc(fused[#loc17, #loc18])
#loc118 = loc(fused[#loc19, #loc20])
#loc119 = loc(fused[#loc22, #loc20])
#loc120 = loc(fused[#loc23, #loc24])
#loc121 = loc(fused[#loc26, #loc27])
#loc122 = loc(fused[#loc29, #loc27])
#loc123 = loc(fused[#loc36, #loc37])
#loc124 = loc(fused[#loc38, #loc39])
#loc125 = loc(fused[#loc40, #loc41])
#loc126 = loc(fused[#loc42, #loc43])
#loc127 = loc(fused[#loc46, #loc47])
#loc128 = loc(fused[#loc49, #loc50])
#loc129 = loc(fused[#loc51, #loc52])
#loc130 = loc(fused[#loc53, #loc54])
#loc131 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc132 = loc(fused[#loc60, #loc61])
#loc133 = loc(fused[#loc64, #loc65])
#loc134 = loc(fused[#loc67, #loc65])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc85])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc92, #loc93])
#loc140 = loc(fused[#loc95, #loc93])
