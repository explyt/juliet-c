!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:10)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:14)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:20)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:32)
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func private @printLongLongLine(!s64i) loc(#loc95)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc98)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      cir.yield %29 : !u64i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc11)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc11)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc11)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc11)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc11)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc11)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc11)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc11)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc11)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc11)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc11)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc11)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc11)
      cir.yield %33 : !u64i loc(#loc11)
    }) : (!cir.bool) -> !u64i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc11)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc101)
      %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc17)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc16)
      %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc16)
      %12 = cir.binop(sub, %9, %11) nsw : !s64i loc(#loc17)
      cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc101)
      %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc19)
    } loc(#loc100)
    cir.return loc(#loc6)
  } loc(#loc96)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc102)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc105)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc45)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_01_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %17 : !s32i loc(#loc113)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc60)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc116)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc62)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc63)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc63)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    cir.scope {
      %5 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc119)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc69)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc68)
      %9 = cir.binop(sub, %6, %8) nsw : !s64i loc(#loc69)
      cir.store %9, %5 : !s64i, !cir.ptr<!s64i> loc(#loc119)
      %10 = cir.load %5 : !cir.ptr<!s64i>, !s64i loc(#loc70)
      cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc71)
    } loc(#loc118)
    cir.return loc(#loc57)
  } loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc77)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc79)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc79)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc79)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc79)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc79)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc79)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc79)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc79)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc79)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc79)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc79)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc79)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc79)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc79)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc79)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc79)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc79)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc79)
      cir.yield %29 : !u64i loc(#loc79)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc79)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc79)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc79)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc79)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc79)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc79)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc79)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc79)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc79)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc79)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc79)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc79)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc79)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc79)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc79)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc79)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc79)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc79)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc79)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc79)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc79)
      cir.yield %33 : !u64i loc(#loc79)
    }) : (!cir.bool) -> !u64i loc(#loc79)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc79)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc83)
      %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc84)
      %10 = cir.unary(minus, %9) : !s64i, !s64i loc(#loc84)
      %11 = cir.const #cir.int<1> : !s64i loc(#loc84)
      %12 = cir.binop(sub, %10, %11) nsw : !s64i loc(#loc84)
      %13 = cir.cmp(gt, %8, %12) : !s64i, !cir.bool loc(#loc125)
      cir.if %13 {
        %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc127)
        %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc90)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %17 = cir.cast(integral, %16 : !s32i), !s64i loc(#loc89)
        %18 = cir.binop(sub, %15, %17) nsw : !s64i loc(#loc90)
        cir.store %18, %14 : !s64i, !cir.ptr<!s64i> loc(#loc127)
        %19 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc91)
        cir.call @printLongLongLine(%19) : (!s64i) -> () loc(#loc92)
      } else {
        %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc72)
        %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc72)
        cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
      } loc(#loc126)
    } loc(#loc124)
    cir.return loc(#loc74)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":33:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":24:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":24:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":25:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":25:5)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":27:21)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":27:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":28:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:9)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:33)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:26)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":31:27)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":72:1)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":76:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":74:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":74:13)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":75:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":75:13)
#loc26 = loc("/usr/include/stdlib.h":575:1)
#loc27 = loc("/usr/include/stdlib.h":575:41)
#loc28 = loc("/usr/include/time.h":76:1)
#loc29 = loc("/usr/include/time.h":76:38)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":92:15)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":94:15)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":97:15)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":99:15)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":102:1)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":88:1)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:27)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:22)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":92:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":93:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":93:56)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":94:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":97:5)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":98:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":98:55)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":99:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":101:12)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":101:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":40:1)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":51:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":42:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":42:13)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":43:12)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":43:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:13)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:12)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":46:5)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":50:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:9)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:33)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:26)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":49:27)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":49:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":68:19)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":54:1)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":70:1)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":56:5)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":56:13)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":57:12)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":57:5)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":59:21)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":59:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":69:5)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:9)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:16)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":62:5)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":65:5)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":67:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:9)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:33)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:26)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":64:27)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":64:9)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":68:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc10, #loc9])
#loc99 = loc(fused[#loc12, #loc11])
#loc100 = loc(fused[#loc13, #loc14])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc26, #loc27])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc51, #loc52])
#loc113 = loc(fused[#loc55, #loc54])
#loc114 = loc(fused[#loc56, #loc57])
#loc115 = loc(fused[#loc58, #loc59])
#loc116 = loc(fused[#loc61, #loc60])
#loc117 = loc(fused[#loc64, #loc62])
#loc118 = loc(fused[#loc65, #loc66])
#loc119 = loc(fused[#loc67, #loc68])
#loc120 = loc(fused[#loc73, #loc74])
#loc121 = loc(fused[#loc75, #loc76])
#loc122 = loc(fused[#loc78, #loc77])
#loc123 = loc(fused[#loc80, #loc79])
#loc124 = loc(fused[#loc81, #loc82])
#loc125 = loc(fused[#loc83, #loc84])
#loc126 = loc(fused[#loc85, #loc86, #loc87, #loc82])
#loc127 = loc(fused[#loc88, #loc89])
