!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc77)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc78)
  cir.func private @printLongLongLine(!s64i) loc(#loc79)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc80)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc82)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc83)
    cir.scope {
      cir.while {
        %7 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%8) loc(#loc17)
      } do {
        cir.scope {
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
          %8 = cir.const #cir.int<8> : !u64i loc(#loc86)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc87)
          cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc88)
          cir.scope {
            %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc26)
            %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc27)
            %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc90)
            cir.if %16 {
              %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc29)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc30)
              %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc31)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc29)
            } loc(#loc91)
          } loc(#loc89)
          %11 = cir.const #cir.int<2147483643> : !s64i loc(#loc32)
          %12 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc33)
          cir.store %11, %12 : !s64i, !cir.ptr<!s64i> loc(#loc92)
          cir.break loc(#loc35)
        } loc(#loc85)
        cir.yield loc(#loc16)
      } loc(#loc84)
    } loc(#loc84)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc37)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc38)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc39)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc40)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc40)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc39)
    cir.return loc(#loc10)
  } loc(#loc81)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc93)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc49)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc97)
    cir.scope {
      cir.while {
        %7 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc53)
        cir.condition(%8) loc(#loc53)
      } do {
        cir.scope {
          %7 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc55)
          %8 = cir.const #cir.int<8> : !u64i loc(#loc100)
          %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc55)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc101)
          cir.store %10, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc102)
          cir.scope {
            %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc62)
            %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc63)
            %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc63)
            %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s64i>, !cir.bool loc(#loc104)
            cir.if %16 {
              %17 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc65)
              %18 = cir.const #cir.int<1> : !s32i loc(#loc66)
              %19 = cir.unary(minus, %18) nsw : !s32i, !s32i loc(#loc67)
              cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc65)
            } loc(#loc105)
          } loc(#loc103)
          %11 = cir.const #cir.int<2147483643> : !s64i loc(#loc68)
          %12 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc69)
          cir.store %11, %12 : !s64i, !cir.ptr<!s64i> loc(#loc106)
          cir.break loc(#loc71)
        } loc(#loc99)
        cir.yield loc(#loc52)
      } loc(#loc98)
    } loc(#loc98)
    %2 = cir.load deref %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc72)
    %3 = cir.load %2 : !cir.ptr<!s64i>, !s64i loc(#loc73)
    cir.call @printLongLongLine(%3) : (!s64i) -> () loc(#loc74)
    %4 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc76)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc76)
    cir.call @free(%6) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
    cir.return loc(#loc46)
  } loc(#loc95)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":23:15)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":25:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":25:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":34:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":26:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":27:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":30:27)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":30:34)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":30:45)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":30:46)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":30:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:9)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:37)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:21)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:27)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:28)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:34)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":31:33)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":32:17)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":32:10)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":32:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":33:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":36:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":36:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":36:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":37:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":37:10)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":63:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":66:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":65:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":65:13)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":45:1)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":61:1)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":47:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":47:15)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":49:12)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":49:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":50:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":57:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":50:11)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":51:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":53:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":53:34)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":53:46)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":53:47)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":53:9)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:37)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:21)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:27)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:28)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:34)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":54:33)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":55:17)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":55:10)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":55:9)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":56:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":59:24)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":59:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":59:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":60:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_int64_t_16.c":60:10)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc11, #loc12])
#loc83 = loc(fused[#loc14, #loc13])
#loc84 = loc(fused[#loc15, #loc16])
#loc85 = loc(fused[#loc18, #loc16])
#loc86 = loc(fused[#loc20, #loc21])
#loc87 = loc(fused[#loc19, #loc22])
#loc88 = loc(fused[#loc23, #loc22])
#loc89 = loc(fused[#loc24, #loc25])
#loc90 = loc(fused[#loc26, #loc27])
#loc91 = loc(fused[#loc28, #loc25])
#loc92 = loc(fused[#loc34, #loc32])
#loc93 = loc(fused[#loc41, #loc42])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc50, #loc49])
#loc98 = loc(fused[#loc51, #loc52])
#loc99 = loc(fused[#loc54, #loc52])
#loc100 = loc(fused[#loc56, #loc57])
#loc101 = loc(fused[#loc55, #loc58])
#loc102 = loc(fused[#loc59, #loc58])
#loc103 = loc(fused[#loc60, #loc61])
#loc104 = loc(fused[#loc62, #loc63])
#loc105 = loc(fused[#loc64, #loc61])
#loc106 = loc(fused[#loc70, #loc68])
