!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc147)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc148)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc149)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc150)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc151)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc154)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc155)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc154)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc155)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc19)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc20)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc156)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc157)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc158)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc159)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc27)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc161)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc32)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
      } loc(#loc162)
    } loc(#loc160)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc164)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc36)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc164)
      %13 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc38)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc39)
      %16 = cir.const #cir.int<100> : !s32i loc(#loc40)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc41)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc40)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc40)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc165)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc44)
      %22 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc45)
      %23 = cir.const #cir.int<100> : !s32i loc(#loc46)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc47)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc46)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc48)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc166)
      %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc49)
      %28 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc50)
      cir.store %27, %28 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc167)
    } loc(#loc163)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc169)
      %11 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc55)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc56)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc171)
        %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc171)
        cir.store %14, %13 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc171)
        %15 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc61)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
        %17 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc62)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc62)
        %19 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc63)
        %20 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
        %21 = cir.call @strlen(%20) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc63)
        %22 = cir.const #cir.int<1> : !u64i loc(#loc172)
        %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc173)
        cir.libc.memmove %23 bytes from %18 to %16 : !cir.ptr<!void>, !u64i loc(#loc174)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc69)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc69)
        %26 = cir.const #cir.int<50> : !s32i loc(#loc70)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc71)
        %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc70)
        %29 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc72)
        %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc72)
        cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc175)
        %31 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        %32 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc75)
        %33 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc76)
        %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc76)
        cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc75)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc12)
  } loc(#loc152)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc177)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc79)
    cir.return loc(#loc78)
  } loc(#loc176)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc179)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc180)
    %2 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc181)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc180)
    cir.store %0, %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc181)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc89)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc90)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc90)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc182)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc183)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc89)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc185)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc98)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc98)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc187)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc100)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc101)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc102)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc100)
      } loc(#loc188)
    } loc(#loc186)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc190)
      %11 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc106)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc190)
      %13 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc108)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc108)
      %15 = cir.const #cir.int<65> : !s32i loc(#loc109)
      %16 = cir.const #cir.int<50> : !s32i loc(#loc110)
      %17 = cir.const #cir.int<1> : !s32i loc(#loc111)
      %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc110)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc110)
      cir.libc.memset %19 bytes from %14 set to %15 : !cir.ptr<!void>, !s32i, !u64i loc(#loc191)
      %20 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %21 = cir.cast(integral, %20 : !s32i), !s8i loc(#loc114)
      %22 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc115)
      %23 = cir.const #cir.int<50> : !s32i loc(#loc116)
      %24 = cir.const #cir.int<1> : !s32i loc(#loc117)
      %25 = cir.binop(sub, %23, %24) nsw : !s32i loc(#loc116)
      %26 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc118)
      cir.store %21, %26 : !s8i, !cir.ptr<!s8i> loc(#loc192)
      %27 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %28 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
      cir.store %27, %28 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc193)
    } loc(#loc189)
    cir.scope {
      %10 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc195)
      %11 = cir.load deref %2 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
      %12 = cir.load %11 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc126)
      cir.store %12, %10 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc195)
      cir.scope {
        %13 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc197)
        %14 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc197)
        cir.store %14, %13 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc197)
        %15 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc131)
        %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc131)
        %17 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc132)
        %19 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc133)
        %20 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc134)
        %21 = cir.call @strlen(%20) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc133)
        %22 = cir.const #cir.int<1> : !u64i loc(#loc198)
        %23 = cir.binop(mul, %21, %22) : !u64i loc(#loc199)
        cir.libc.memmove %23 bytes from %18 to %16 : !cir.ptr<!void>, !u64i loc(#loc200)
        %24 = cir.const #cir.int<0> : !s32i loc(#loc139)
        %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc139)
        %26 = cir.const #cir.int<50> : !s32i loc(#loc140)
        %27 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc140)
        %29 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc142)
        %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc142)
        cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc201)
        %31 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc143)
        cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc144)
        %32 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc145)
        %33 = cir.load %10 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc146)
        %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc146)
        cir.call @free(%34) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc145)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc82)
  } loc(#loc178)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("/usr/include/stdlib.h":687:1)
#loc10 = loc("/usr/include/stdlib.h":687:32)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":23:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":48:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":25:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":25:12)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":26:25)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":27:25)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:20)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:27)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:42)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:5)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:17)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:23)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:24)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:30)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":29:29)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":30:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":36:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:24)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":31:23)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:16)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:22)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:27)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:31)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:9)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":33:32)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:23)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:14)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:18)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":34:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:21)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:10)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":35:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":37:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":47:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:24)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":38:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":46:9)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":40:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":40:29)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:21)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:33)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:40)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:46)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:57)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:13)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":42:58)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:26)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:18)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:21)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":43:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":44:23)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":44:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":45:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":45:18)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":82:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":85:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":84:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":84:13)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":55:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":80:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":57:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":57:12)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":58:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":58:25)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":59:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":59:25)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:20)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:31)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:42)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:43)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":60:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:33)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:17)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:23)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:24)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:30)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":61:29)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":62:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":68:5)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:24)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":63:23)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:16)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:22)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:30)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:9)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":65:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:22)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:14)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:17)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":66:18)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:21)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:10)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":67:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":69:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":79:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:9)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:24)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":70:23)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":71:9)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":78:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":72:13)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":72:29)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:21)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:27)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:33)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:40)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:46)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:57)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:13)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":74:58)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:26)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:18)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:21)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":75:13)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":76:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":76:13)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":77:13)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_memmove_32.c":77:18)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc7, #loc8])
#loc151 = loc(fused[#loc9, #loc10])
#loc152 = loc(fused[#loc11, #loc12])
#loc153 = loc(fused[#loc13, #loc14])
#loc154 = loc(fused[#loc15, #loc16])
#loc155 = loc(fused[#loc17, #loc18])
#loc156 = loc(fused[#loc21, #loc22])
#loc157 = loc(fused[#loc20, #loc22])
#loc158 = loc(fused[#loc19, #loc23])
#loc159 = loc(fused[#loc24, #loc23])
#loc160 = loc(fused[#loc25, #loc26])
#loc161 = loc(fused[#loc27, #loc28])
#loc162 = loc(fused[#loc29, #loc26])
#loc163 = loc(fused[#loc33, #loc34])
#loc164 = loc(fused[#loc35, #loc36])
#loc165 = loc(fused[#loc42, #loc43])
#loc166 = loc(fused[#loc45, #loc44])
#loc167 = loc(fused[#loc51, #loc49])
#loc168 = loc(fused[#loc52, #loc53])
#loc169 = loc(fused[#loc54, #loc55])
#loc170 = loc(fused[#loc57, #loc58])
#loc171 = loc(fused[#loc59, #loc60])
#loc172 = loc(fused[#loc65, #loc66])
#loc173 = loc(fused[#loc63, #loc66])
#loc174 = loc(fused[#loc67, #loc68])
#loc175 = loc(fused[#loc72, #loc69])
#loc176 = loc(fused[#loc77, #loc78])
#loc177 = loc(fused[#loc79, #loc80])
#loc178 = loc(fused[#loc81, #loc82])
#loc179 = loc(fused[#loc83, #loc84])
#loc180 = loc(fused[#loc85, #loc86])
#loc181 = loc(fused[#loc87, #loc88])
#loc182 = loc(fused[#loc91, #loc92])
#loc183 = loc(fused[#loc90, #loc92])
#loc184 = loc(fused[#loc89, #loc93])
#loc185 = loc(fused[#loc94, #loc93])
#loc186 = loc(fused[#loc95, #loc96])
#loc187 = loc(fused[#loc97, #loc98])
#loc188 = loc(fused[#loc99, #loc96])
#loc189 = loc(fused[#loc103, #loc104])
#loc190 = loc(fused[#loc105, #loc106])
#loc191 = loc(fused[#loc112, #loc113])
#loc192 = loc(fused[#loc115, #loc114])
#loc193 = loc(fused[#loc121, #loc119])
#loc194 = loc(fused[#loc122, #loc123])
#loc195 = loc(fused[#loc124, #loc125])
#loc196 = loc(fused[#loc127, #loc128])
#loc197 = loc(fused[#loc129, #loc130])
#loc198 = loc(fused[#loc135, #loc136])
#loc199 = loc(fused[#loc133, #loc136])
#loc200 = loc(fused[#loc137, #loc138])
#loc201 = loc(fused[#loc142, #loc139])
