!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":30:21)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":58:21)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_53a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc46)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_53b_badSink(!s64i) loc(#loc47)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_53_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc49)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc50)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc11)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc11)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc11)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc11)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc11)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc11)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc11)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc11)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc11)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc11)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc11)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc11)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc11)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc11)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc11)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc11)
    cir.br ^bb3(%27 : !u64i) loc(#loc11)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc11)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc11)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc11)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc11)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc11)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc11)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc11)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc11)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc11)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc11)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc11)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc11)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc11)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc11)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc11)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc11)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc11)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc11)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc11)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc11)
    cir.br ^bb3(%53 : !u64i) loc(#loc11)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":30:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc11)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc51)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc13)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_53b_badSink(%56) : (!s64i) -> () loc(#loc14)
    cir.return loc(#loc6)
  } loc(#loc48)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_53_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc53)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc54)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc52)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_53b_goodG2BSink(!s64i) loc(#loc55)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc57)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc27)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc58)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc30)
    %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc30)
    cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc59)
    %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc32)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_53b_goodG2BSink(%5) : (!s64i) -> () loc(#loc33)
    cir.return loc(#loc24)
  } loc(#loc56)
  cir.func private @CWE191_Integer_Underflow__int64_t_rand_sub_53b_goodB2GSink(!s64i) loc(#loc60)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc62)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc40)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc63)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc42)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc42)
    %8 = cir.const #cir.int<60> : !s32i loc(#loc42)
    %9 = cir.shift(left, %7 : !u64i, %8 : !s32i) -> !u64i loc(#loc42)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
    %12 = cir.const #cir.int<45> : !s32i loc(#loc42)
    %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
    %14 = cir.binop(xor, %9, %13) : !u64i loc(#loc42)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc42)
    %17 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc42)
    %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc42)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc42)
    %22 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc42)
    %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc42)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc42)
    %27 = cir.binop(xor, %24, %26) : !u64i loc(#loc42)
    cir.br ^bb3(%27 : !u64i) loc(#loc42)
  ^bb2:  // pred: ^bb0
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc42)
    %30 = cir.const #cir.int<60> : !s32i loc(#loc42)
    %31 = cir.shift(left, %29 : !u64i, %30 : !s32i) -> !u64i loc(#loc42)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc42)
    %34 = cir.const #cir.int<45> : !s32i loc(#loc42)
    %35 = cir.shift(left, %33 : !u64i, %34 : !s32i) -> !u64i loc(#loc42)
    %36 = cir.binop(xor, %31, %35) : !u64i loc(#loc42)
    %37 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %38 = cir.cast(integral, %37 : !s32i), !u64i loc(#loc42)
    %39 = cir.const #cir.int<30> : !s32i loc(#loc42)
    %40 = cir.shift(left, %38 : !u64i, %39 : !s32i) -> !u64i loc(#loc42)
    %41 = cir.binop(xor, %36, %40) : !u64i loc(#loc42)
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc42)
    %44 = cir.const #cir.int<15> : !s32i loc(#loc42)
    %45 = cir.shift(left, %43 : !u64i, %44 : !s32i) -> !u64i loc(#loc42)
    %46 = cir.binop(xor, %41, %45) : !u64i loc(#loc42)
    %47 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %48 = cir.cast(integral, %47 : !s32i), !u64i loc(#loc42)
    %49 = cir.binop(xor, %46, %48) : !u64i loc(#loc42)
    %50 = cir.unary(minus, %49) : !u64i, !u64i loc(#loc42)
    %51 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %52 = cir.cast(integral, %51 : !s32i), !u64i loc(#loc42)
    %53 = cir.binop(sub, %50, %52) : !u64i loc(#loc42)
    cir.br ^bb3(%53 : !u64i) loc(#loc42)
  ^bb3(%54: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":58:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc42)
  ^bb4:  // pred: ^bb3
    %55 = cir.cast(integral, %54 : !u64i), !s64i loc(#loc42)
    cir.store %55, %0 : !s64i, !cir.ptr<!s64i> loc(#loc64)
    %56 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_53b_goodB2GSink(%56) : (!s64i) -> () loc(#loc45)
    cir.return loc(#loc37)
  } loc(#loc61)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":23:73)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":32:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":27:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":28:12)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":28:5)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":31:60)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":31:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":62:1)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":66:1)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":64:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":64:13)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":65:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":65:13)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":39:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":39:77)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":41:1)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":48:1)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":43:5)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":43:13)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":44:12)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":44:5)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":46:13)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":46:12)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":46:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":47:64)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":47:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":51:1)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":51:77)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":53:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":60:1)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":55:5)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":55:13)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":56:12)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":56:5)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":58:5)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":59:64)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_53a.c":59:5)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc7, #loc8])
#loc50 = loc(fused[#loc10, #loc9])
#loc51 = loc(fused[#loc12, #loc11])
#loc52 = loc(fused[#loc15, #loc16])
#loc53 = loc(fused[#loc17, #loc18])
#loc54 = loc(fused[#loc19, #loc20])
#loc55 = loc(fused[#loc21, #loc22])
#loc56 = loc(fused[#loc23, #loc24])
#loc57 = loc(fused[#loc25, #loc26])
#loc58 = loc(fused[#loc28, #loc27])
#loc59 = loc(fused[#loc31, #loc29])
#loc60 = loc(fused[#loc34, #loc35])
#loc61 = loc(fused[#loc36, #loc37])
#loc62 = loc(fused[#loc38, #loc39])
#loc63 = loc(fused[#loc41, #loc40])
#loc64 = loc(fused[#loc43, #loc42])
