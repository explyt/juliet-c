!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":29:23)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @strncpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_strncpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc100)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc101)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc102)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc15)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc103)
    cir.br ^bb1 loc(#loc104)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc104)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %6 ^bb3, ^bb8 loc(#loc19)
  ^bb3:  // pred: ^bb2
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %9 = cir.binop(and, %7, %8) : !s32i loc(#loc20)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc20)
    %13 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc20)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc20)
    %17 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc20)
    %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc20)
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc20)
    %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc20)
    cir.br ^bb6(%22 : !u32i) loc(#loc20)
  ^bb5:  // pred: ^bb3
    %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc20)
    %25 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %26 = cir.shift(left, %24 : !u32i, %25 : !s32i) -> !u32i loc(#loc20)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc20)
    %29 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %30 = cir.shift(left, %28 : !u32i, %29 : !s32i) -> !u32i loc(#loc20)
    %31 = cir.binop(xor, %26, %30) : !u32i loc(#loc20)
    %32 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %33 = cir.cast(integral, %32 : !s32i), !u32i loc(#loc20)
    %34 = cir.binop(xor, %31, %33) : !u32i loc(#loc20)
    %35 = cir.unary(minus, %34) : !u32i, !u32i loc(#loc20)
    %36 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %37 = cir.cast(integral, %36 : !s32i), !u32i loc(#loc20)
    %38 = cir.binop(sub, %35, %37) : !u32i loc(#loc20)
    cir.br ^bb6(%38 : !u32i) loc(#loc20)
  ^bb6(%39: !u32i loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":29:23)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    %40 = cir.cast(integral, %39 : !u32i), !s32i loc(#loc20)
    %41 = cir.cast(integral, %40 : !s32i), !s16i loc(#loc20)
    cir.store %41, %2 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc106)
  ^bb10:  // pred: ^bb9
    %42 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc101)
    cir.store %42, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc101)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc25)
    %44 = cir.cast(bitcast, %43 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc25)
    %45 = cir.const #cir.int<65> : !s32i loc(#loc26)
    %46 = cir.const #cir.int<100> : !s32i loc(#loc27)
    %47 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %48 = cir.binop(sub, %46, %47) nsw : !s32i loc(#loc27)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc27)
    cir.libc.memset %49 bytes from %44 set to %45 : !cir.ptr<!void>, !s32i, !u64i loc(#loc107)
    %50 = cir.const #cir.int<0> : !s32i loc(#loc31)
    %51 = cir.cast(integral, %50 : !s32i), !s8i loc(#loc31)
    %52 = cir.const #cir.int<100> : !s32i loc(#loc32)
    %53 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %54 = cir.binop(sub, %52, %53) nsw : !s32i loc(#loc32)
    %55 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc34)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc34)
    cir.store %51, %56 : !s8i, !cir.ptr<!s8i> loc(#loc108)
    cir.br ^bb11 loc(#loc109)
  ^bb11:  // pred: ^bb10
    %57 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc37)
    %58 = cir.cast(integral, %57 : !s16i), !s32i loc(#loc37)
    %59 = cir.const #cir.int<100> : !s32i loc(#loc38)
    %60 = cir.cmp(lt, %58, %59) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %60 ^bb12, ^bb13 loc(#loc111)
  ^bb12:  // pred: ^bb11
    %61 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc40)
    %62 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc41)
    %63 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
    %64 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc43)
    %65 = cir.cast(integral, %64 : !s16i), !u64i loc(#loc43)
    %66 = cir.call @strncpy(%62, %63, %65) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc40)
    %67 = cir.const #cir.int<0> : !s32i loc(#loc44)
    %68 = cir.cast(integral, %67 : !s32i), !s8i loc(#loc44)
    %69 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc45)
    %70 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc46)
    %71 = cir.ptr_stride(%70 : !cir.ptr<!s8i>, %69 : !s16i), !cir.ptr<!s8i> loc(#loc46)
    cir.store %68, %71 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    cir.br ^bb13 loc(#loc36)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc36)
  ^bb14:  // pred: ^bb13
    %72 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%72) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    cir.br ^bb15 loc(#loc24)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc8)
  } loc(#loc99)
  cir.func no_proto @CWE194_Unexpected_Sign_Extension__rand_strncpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc114)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc50)
  } loc(#loc113)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc116)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dest"] {alignment = 16 : i64} loc(#loc117)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc118)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc61)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc119)
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc120)
  ^bb2:  // pred: ^bb1
    %5 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
    cir.brcond %6 ^bb3, ^bb4 loc(#loc65)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc66)
    %10 = cir.cast(integral, %9 : !s32i), !s16i loc(#loc66)
    cir.store %10, %2 : !s16i, !cir.ptr<!s16i> loc(#loc121)
    cir.br ^bb4 loc(#loc69)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc64)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc122)
  ^bb6:  // pred: ^bb5
    %11 = cir.const #cir.zero : !cir.array<!s8i x 100> loc(#loc117)
    cir.store %11, %1 : !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>> loc(#loc117)
    %12 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc72)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc72)
    %14 = cir.const #cir.int<65> : !s32i loc(#loc73)
    %15 = cir.const #cir.int<100> : !s32i loc(#loc74)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %17 = cir.binop(sub, %15, %16) nsw : !s32i loc(#loc74)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc74)
    cir.libc.memset %18 bytes from %13 set to %14 : !cir.ptr<!void>, !s32i, !u64i loc(#loc123)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %20 = cir.cast(integral, %19 : !s32i), !s8i loc(#loc78)
    %21 = cir.const #cir.int<100> : !s32i loc(#loc79)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc80)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc79)
    %24 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc81)
    %25 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %23 : !s32i), !cir.ptr<!s8i> loc(#loc81)
    cir.store %20, %25 : !s8i, !cir.ptr<!s8i> loc(#loc124)
    cir.br ^bb7 loc(#loc125)
  ^bb7:  // pred: ^bb6
    %26 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc84)
    %27 = cir.cast(integral, %26 : !s16i), !s32i loc(#loc84)
    %28 = cir.const #cir.int<100> : !s32i loc(#loc85)
    %29 = cir.cmp(lt, %27, %28) : !s32i, !cir.bool loc(#loc126)
    cir.brcond %29 ^bb8, ^bb9 loc(#loc127)
  ^bb8:  // pred: ^bb7
    %30 = cir.get_global @strncpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i)>> loc(#loc87)
    %31 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc88)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
    %33 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc90)
    %34 = cir.cast(integral, %33 : !s16i), !u64i loc(#loc90)
    %35 = cir.call @strncpy(%31, %32, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u64i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc87)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc91)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc91)
    %38 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc92)
    %39 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc93)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s16i), !cir.ptr<!s8i> loc(#loc93)
    cir.store %37, %40 : !s8i, !cir.ptr<!s8i> loc(#loc128)
    cir.br ^bb9 loc(#loc83)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // pred: ^bb9
    %41 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    cir.br ^bb11 loc(#loc71)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc54)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE194_Unexpected_Sign_Extension/s02/CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/string.h":144:1)
#loc4 = loc("/usr/include/string.h":146:14)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":21:1)
#loc8 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":46:1)
#loc9 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":33:9)
#loc10 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":33:24)
#loc11 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":34:9)
#loc12 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":34:26)
#loc13 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":23:5)
#loc14 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":23:11)
#loc15 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":25:12)
#loc16 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":25:5)
#loc17 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":26:5)
#loc18 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":31:5)
#loc19 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":26:11)
#loc21 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":29:9)
#loc22 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":30:9)
#loc23 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":32:5)
#loc24 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":45:5)
#loc25 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:16)
#loc26 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:24)
#loc27 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:29)
#loc28 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:33)
#loc29 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:9)
#loc30 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":35:34)
#loc31 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":36:25)
#loc32 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":36:16)
#loc33 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":36:20)
#loc34 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":36:9)
#loc35 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":37:9)
#loc36 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":43:9)
#loc37 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":37:13)
#loc38 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":37:20)
#loc39 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":38:9)
#loc40 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":41:13)
#loc41 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":41:21)
#loc42 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":41:27)
#loc43 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":41:35)
#loc44 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":42:26)
#loc45 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":42:18)
#loc46 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":42:13)
#loc47 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":44:19)
#loc48 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":44:9)
#loc49 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":80:1)
#loc50 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":83:1)
#loc51 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":82:5)
#loc52 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":82:13)
#loc53 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":53:1)
#loc54 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":78:1)
#loc55 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":65:9)
#loc56 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":65:24)
#loc57 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":66:9)
#loc58 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":66:26)
#loc59 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":55:5)
#loc60 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":55:11)
#loc61 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":57:12)
#loc62 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":57:5)
#loc63 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":58:5)
#loc64 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":63:5)
#loc65 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":58:11)
#loc66 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":61:16)
#loc67 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":61:20)
#loc68 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":61:9)
#loc69 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":62:9)
#loc70 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":64:5)
#loc71 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":77:5)
#loc72 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:16)
#loc73 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:24)
#loc74 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:29)
#loc75 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:33)
#loc76 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:9)
#loc77 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":67:34)
#loc78 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":68:25)
#loc79 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":68:16)
#loc80 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":68:20)
#loc81 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":68:9)
#loc82 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":69:9)
#loc83 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":75:9)
#loc84 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":69:13)
#loc85 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":69:20)
#loc86 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":70:9)
#loc87 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":73:13)
#loc88 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":73:21)
#loc89 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":73:27)
#loc90 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":73:35)
#loc91 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":74:26)
#loc92 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":74:18)
#loc93 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":74:13)
#loc94 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":76:19)
#loc95 = loc("CWE194_Unexpected_Sign_Extension__rand_strncpy_16.c":76:9)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc11, #loc12])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc16, #loc15])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc21, #loc20])
#loc106 = loc(fused[#loc23, #loc24])
#loc107 = loc(fused[#loc29, #loc30])
#loc108 = loc(fused[#loc34, #loc31])
#loc109 = loc(fused[#loc35, #loc36])
#loc110 = loc(fused[#loc37, #loc38])
#loc111 = loc(fused[#loc39, #loc36])
#loc112 = loc(fused[#loc46, #loc44])
#loc113 = loc(fused[#loc49, #loc50])
#loc114 = loc(fused[#loc51, #loc52])
#loc115 = loc(fused[#loc53, #loc54])
#loc116 = loc(fused[#loc55, #loc56])
#loc117 = loc(fused[#loc57, #loc58])
#loc118 = loc(fused[#loc59, #loc60])
#loc119 = loc(fused[#loc62, #loc61])
#loc120 = loc(fused[#loc63, #loc64])
#loc121 = loc(fused[#loc68, #loc67])
#loc122 = loc(fused[#loc70, #loc71])
#loc123 = loc(fused[#loc76, #loc77])
#loc124 = loc(fused[#loc81, #loc78])
#loc125 = loc(fused[#loc82, #loc83])
#loc126 = loc(fused[#loc84, #loc85])
#loc127 = loc(fused[#loc86, #loc83])
#loc128 = loc(fused[#loc93, #loc91])
