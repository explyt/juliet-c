!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @printIntLine(!s32i) loc(#loc97)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc103)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc104)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc103)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc18)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc104)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc106)
        cir.if %14 {
          %15 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
          %16 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc26)
          %17 = cir.const #cir.int<2> : !s32i loc(#loc25)
          %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc26)
          cir.store %18, %15 : !s32i, !cir.ptr<!s32i> loc(#loc108)
          %19 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc27)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc28)
        } loc(#loc107)
      } loc(#loc105)
    } loc(#loc102)
    cir.return loc(#loc6)
  } loc(#loc98)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc109)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc39)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc117)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc118)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc117)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc118)
      cir.scope {
        %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc51)
        %8 = cir.const #cir.int<0> : !s32i loc(#loc52)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc120)
        cir.if %9 {
          %10 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc122)
          %11 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %12 = cir.const #cir.int<2> : !s32i loc(#loc55)
          %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc56)
          cir.store %13, %10 : !s32i, !cir.ptr<!s32i> loc(#loc122)
          %14 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc57)
          cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc58)
        } loc(#loc121)
      } loc(#loc119)
    } loc(#loc116)
    cir.return loc(#loc36)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc61)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc68)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc68)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc68)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc68)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc68)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc68)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc68)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc68)
      cir.yield %19 : !u32i loc(#loc68)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc68)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc68)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc68)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc68)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc68)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc68)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc68)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc68)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc68)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc68)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc68)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc68)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc68)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc68)
      cir.yield %23 : !u32i loc(#loc68)
    }) : (!cir.bool) -> !u32i loc(#loc68)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc68)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc127)
    cir.scope {
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc129)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc130)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      cir.store %10, %8 : !s32i, !cir.ptr<!s32i> loc(#loc129)
      %11 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc75)
      cir.store %11, %9 : !s32i, !cir.ptr<!s32i> loc(#loc130)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc79)
        %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc132)
        cir.if %14 {
          cir.scope {
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc84)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc85)
            %18 = cir.binop(div, %16, %17) : !s32i loc(#loc135)
            %19 = cir.cmp(lt, %15, %18) : !s32i, !cir.bool loc(#loc136)
            cir.if %19 {
              %20 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc138)
              %21 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %22 = cir.const #cir.int<2> : !s32i loc(#loc91)
              %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc92)
              cir.store %23, %20 : !s32i, !cir.ptr<!s32i> loc(#loc138)
              %24 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc93)
              cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc94)
            } else {
              %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc61)
              %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc61)
              cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc95)
            } loc(#loc137)
          } loc(#loc134)
        } loc(#loc133)
      } loc(#loc131)
    } loc(#loc128)
    cir.return loc(#loc63)
  } loc(#loc124)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_31.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":39:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":30:9)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":30:24)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":31:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":31:20)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":32:9)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":37:9)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":32:12)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":32:19)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":35:13)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":35:33)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":35:26)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":36:26)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":36:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":92:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":96:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":94:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":94:13)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":95:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":95:13)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":46:1)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":63:1)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":48:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":48:9)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":50:12)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":50:5)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":52:12)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":52:5)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":62:5)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":54:9)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":54:24)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":55:9)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":55:20)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":56:9)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":61:9)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":56:12)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":56:19)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":57:9)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":59:13)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":59:33)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":59:26)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":60:26)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":60:13)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":86:27)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":66:1)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":90:1)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":68:5)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":68:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":70:12)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":70:5)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":72:12)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":72:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":73:5)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":89:5)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":74:9)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":74:24)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":75:9)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":75:20)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":76:9)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":88:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":76:12)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":76:19)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":77:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":79:13)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":87:13)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":79:17)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":79:25)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":79:33)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":79:34)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":80:13)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":83:13)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":85:13)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":81:17)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":81:37)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":81:30)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":82:30)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":82:17)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_31.c":86:17)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc10, #loc9])
#loc101 = loc(fused[#loc12, #loc11])
#loc102 = loc(fused[#loc13, #loc14])
#loc103 = loc(fused[#loc15, #loc16])
#loc104 = loc(fused[#loc17, #loc18])
#loc105 = loc(fused[#loc19, #loc20])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc23, #loc20])
#loc108 = loc(fused[#loc24, #loc25])
#loc109 = loc(fused[#loc29, #loc30])
#loc110 = loc(fused[#loc31, #loc32])
#loc111 = loc(fused[#loc33, #loc34])
#loc112 = loc(fused[#loc35, #loc36])
#loc113 = loc(fused[#loc37, #loc38])
#loc114 = loc(fused[#loc40, #loc39])
#loc115 = loc(fused[#loc42, #loc41])
#loc116 = loc(fused[#loc43, #loc44])
#loc117 = loc(fused[#loc45, #loc46])
#loc118 = loc(fused[#loc47, #loc48])
#loc119 = loc(fused[#loc49, #loc50])
#loc120 = loc(fused[#loc51, #loc52])
#loc121 = loc(fused[#loc53, #loc50])
#loc122 = loc(fused[#loc54, #loc55])
#loc123 = loc(fused[#loc59, #loc60])
#loc124 = loc(fused[#loc62, #loc63])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc67, #loc66])
#loc127 = loc(fused[#loc69, #loc68])
#loc128 = loc(fused[#loc70, #loc71])
#loc129 = loc(fused[#loc72, #loc73])
#loc130 = loc(fused[#loc74, #loc75])
#loc131 = loc(fused[#loc76, #loc77])
#loc132 = loc(fused[#loc78, #loc79])
#loc133 = loc(fused[#loc80, #loc77])
#loc134 = loc(fused[#loc81, #loc82])
#loc135 = loc(fused[#loc84, #loc85])
#loc136 = loc(fused[#loc83, #loc86])
#loc137 = loc(fused[#loc87, #loc88, #loc89, #loc82])
#loc138 = loc(fused[#loc90, #loc91])
