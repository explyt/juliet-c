!s32i = !cir.int<s, 32>
!ty__stdThread = !cir.record<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.record<struct "_stdThreadLock" incomplete>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":24:23)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":24:29)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":38:24)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":38:30)
#true = #cir.bool<true> : !cir.bool
#loc186 = loc(fused[#loc5, #loc6])
#loc223 = loc(fused[#loc98, #loc99])
module @"/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc184)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc188)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc8)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
      cir.for : cond {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %7 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc191)
        cir.condition(%8) loc(#loc18)
      } body {
        cir.scope {
          %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc21)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %9 = cir.binop(add, %7, %8) nsw : !s32i loc(#loc21)
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc23)
          cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc193)
        } loc(#loc192)
        cir.yield loc(#loc13)
      } step {
        %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc25)
        %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc26)
        cir.store %7, %2 : !s32i, !cir.ptr<!s32i> loc(#loc194)
        cir.yield loc(#loc189)
      } loc(#loc189)
    } loc(#loc189)
    cir.return loc(#loc4)
  } loc(#loc185)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc195)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc196)
  cir.func private @printIntLine(!s32i) loc(#loc197)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valBadSink"] {alignment = 4 : i64} loc(#loc201)
    cir.goto "sink" loc(#loc202)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc43)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc36)
    cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc199)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc38)
    cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc200)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc44)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    cir.scope {
      %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc48)
      %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc205)
      %9 = cir.call @stdThreadCreate(%7, %8, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc51)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc51)
      %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc51)
      cir.if %11 {
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc53)
        cir.store %12, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc207)
      } loc(#loc206)
    } loc(#loc204)
    cir.scope {
      %7 = cir.get_global @helperBad : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc57)
      %8 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc209)
      %9 = cir.call @stdThreadCreate(%7, %8, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc60)
      %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc60)
      %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc60)
      cir.if %11 {
        %12 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc62)
        cir.store %12, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc211)
      } loc(#loc210)
    } loc(#loc208)
    cir.scope {
      %7 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc66)
      %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc66)
      %9 = cir.ternary(%8, true {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc68)
        %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc69)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc69)
        %13 = cir.ternary(%12, true {
          %14 = cir.const #true loc(#loc67)
          cir.yield %14 : !cir.bool loc(#loc67)
        }, false {
          %14 = cir.const #false loc(#loc67)
          cir.yield %14 : !cir.bool loc(#loc67)
        }) : (!cir.bool) -> !cir.bool loc(#loc67)
        cir.yield %13 : !cir.bool loc(#loc67)
      }, false {
        %10 = cir.const #false loc(#loc67)
        cir.yield %10 : !cir.bool loc(#loc67)
      }) : (!cir.bool) -> !cir.bool loc(#loc67)
      cir.if %9 {
        %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
        %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc72)
      } loc(#loc213)
    } loc(#loc212)
    cir.scope {
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc75)
      %8 = cir.cast(ptr_to_bool, %7 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc75)
      %9 = cir.ternary(%8, true {
        %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc77)
        %11 = cir.call @stdThreadJoin(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc78)
        %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc78)
        %13 = cir.ternary(%12, true {
          %14 = cir.const #true loc(#loc76)
          cir.yield %14 : !cir.bool loc(#loc76)
        }, false {
          %14 = cir.const #false loc(#loc76)
          cir.yield %14 : !cir.bool loc(#loc76)
        }) : (!cir.bool) -> !cir.bool loc(#loc76)
        cir.yield %13 : !cir.bool loc(#loc76)
      }, false {
        %10 = cir.const #false loc(#loc76)
        cir.yield %10 : !cir.bool loc(#loc76)
      }) : (!cir.bool) -> !cir.bool loc(#loc76)
      cir.if %9 {
        %10 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc80)
        %11 = cir.call @stdThreadDestroy(%10) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc81)
      } loc(#loc215)
    } loc(#loc214)
    %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc83)
    cir.return loc(#loc34)
  } loc(#loc198)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__int_byref_18_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc217)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc86)
    cir.return loc(#loc85)
  } loc(#loc216)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc218)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc219)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc220)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc221)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc98, #loc99])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pIntArgs", init] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc225)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc104)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc101)
    cir.store %4, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc224)
    %5 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc219)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc105)
    cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc106)
    cir.scope {
      %9 = cir.const #cir.int<0> : !s32i loc(#loc109)
      cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc227)
      cir.for : cond {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %11 = cir.const #cir.int<1000000> : !s32i loc(#loc112)
        %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc228)
        cir.condition(%12) loc(#loc113)
      } body {
        cir.scope {
          %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc115)
          %11 = cir.load %10 : !cir.ptr<!s32i>, !s32i loc(#loc116)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc117)
          %13 = cir.binop(add, %11, %12) nsw : !s32i loc(#loc116)
          %14 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc118)
          cir.store %13, %14 : !s32i, !cir.ptr<!s32i> loc(#loc230)
        } loc(#loc229)
        cir.yield loc(#loc108)
      } step {
        %10 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %11 = cir.unary(inc, %10) nsw : !s32i, !s32i loc(#loc121)
        cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc231)
        cir.yield loc(#loc226)
      } loc(#loc226)
    } loc(#loc226)
    %7 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc219)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc122)
    cir.call @stdThreadLockRelease(%8) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc123)
    cir.return loc(#loc97)
  } loc(#loc222)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc232)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["valGoodSink"] {alignment = 4 : i64} loc(#loc236)
    cir.goto "sink" loc(#loc237)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc129)
    cir.store %3, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc234)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc131)
    cir.store %4, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc235)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc238)
    cir.scope {
      %9 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc219)
      %10 = cir.call @stdThreadLockCreate(%9) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc141)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc141)
      %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc141)
      cir.if %12 {
        cir.return loc(#loc143)
      } loc(#loc240)
    } loc(#loc239)
    cir.scope {
      %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc146)
      %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc242)
      %11 = cir.call @stdThreadCreate(%9, %10, %0) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc149)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc149)
      %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc149)
      cir.if %13 {
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc151)
        cir.store %14, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc244)
      } loc(#loc243)
    } loc(#loc241)
    cir.scope {
      %9 = cir.get_global @helperGood : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc155)
      %10 = cir.cast(bitcast, %2 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc246)
      %11 = cir.call @stdThreadCreate(%9, %10, %1) : (!cir.ptr<!cir.func<(!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc158)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc158)
      %13 = cir.unary(not, %12) : !cir.bool, !cir.bool loc(#loc158)
      cir.if %13 {
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc160)
        cir.store %14, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc248)
      } loc(#loc247)
    } loc(#loc245)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc164)
      %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc164)
      %11 = cir.ternary(%10, true {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc166)
        %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc167)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc167)
        %15 = cir.ternary(%14, true {
          %16 = cir.const #true loc(#loc165)
          cir.yield %16 : !cir.bool loc(#loc165)
        }, false {
          %16 = cir.const #false loc(#loc165)
          cir.yield %16 : !cir.bool loc(#loc165)
        }) : (!cir.bool) -> !cir.bool loc(#loc165)
        cir.yield %15 : !cir.bool loc(#loc165)
      }, false {
        %12 = cir.const #false loc(#loc165)
        cir.yield %12 : !cir.bool loc(#loc165)
      }) : (!cir.bool) -> !cir.bool loc(#loc165)
      cir.if %11 {
        %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc169)
        %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc170)
      } loc(#loc250)
    } loc(#loc249)
    cir.scope {
      %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc173)
      %10 = cir.cast(ptr_to_bool, %9 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc173)
      %11 = cir.ternary(%10, true {
        %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc175)
        %13 = cir.call @stdThreadJoin(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc176)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc176)
        %15 = cir.ternary(%14, true {
          %16 = cir.const #true loc(#loc174)
          cir.yield %16 : !cir.bool loc(#loc174)
        }, false {
          %16 = cir.const #false loc(#loc174)
          cir.yield %16 : !cir.bool loc(#loc174)
        }) : (!cir.bool) -> !cir.bool loc(#loc174)
        cir.yield %15 : !cir.bool loc(#loc174)
      }, false {
        %12 = cir.const #false loc(#loc174)
        cir.yield %12 : !cir.bool loc(#loc174)
      }) : (!cir.bool) -> !cir.bool loc(#loc174)
      cir.if %11 {
        %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc178)
        %13 = cir.call @stdThreadDestroy(%12) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc179)
      } loc(#loc252)
    } loc(#loc251)
    %6 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc219)
    %7 = cir.load %6 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc180)
    cir.call @stdThreadLockDestroy(%7) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc181)
    %8 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc182)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc183)
    cir.return loc(#loc127)
  } loc(#loc233)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__int_byref_18.c":0:0)
#loc1 = loc("../../testcasesupport/std_thread.h":14:1)
#loc2 = loc("../../testcasesupport/std_thread.h":14:74)
#loc3 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":24:1)
#loc4 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":36:1)
#loc7 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":26:5)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":26:27)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":27:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":27:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":25:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":35:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":33:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":34:22)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":34:21)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":34:33)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":34:10)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":34:9)
#loc25 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:31)
#loc26 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":32:30)
#loc27 = loc("../../testcasesupport/std_thread.h":15:1)
#loc28 = loc("../../testcasesupport/std_thread.h":15:35)
#loc29 = loc("../../testcasesupport/std_thread.h":16:1)
#loc30 = loc("../../testcasesupport/std_thread.h":16:38)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc32 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":55:1)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":82:1)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":60:9)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":60:29)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":61:9)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":61:29)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":62:9)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":62:13)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":57:5)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":57:10)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":58:1)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":63:22)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":63:9)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":64:9)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":67:9)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":64:30)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":64:48)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":64:49)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":64:14)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":65:9)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":66:23)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":66:13)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":68:9)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":71:9)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":68:30)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":68:48)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":68:49)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":68:14)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":69:9)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":70:23)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":70:13)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":72:9)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":75:9)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":72:13)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":72:21)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":72:38)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":72:24)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":73:9)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":74:30)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":74:13)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":76:9)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":79:9)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":76:13)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":76:21)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":76:38)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":76:24)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":77:9)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":78:30)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":78:13)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":80:22)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":80:9)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":123:1)
#loc85 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":126:1)
#loc86 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":125:5)
#loc87 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":125:11)
#loc88 = loc("../../testcasesupport/std_thread.h":18:1)
#loc89 = loc("../../testcasesupport/std_thread.h":18:44)
#loc90 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":22:1)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":22:34)
#loc92 = loc("../../testcasesupport/std_thread.h":19:1)
#loc93 = loc("../../testcasesupport/std_thread.h":19:45)
#loc94 = loc("../../testcasesupport/std_thread.h":20:1)
#loc95 = loc("../../testcasesupport/std_thread.h":20:45)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":38:1)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":51:1)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":40:5)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":40:28)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":41:5)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":41:9)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":39:1)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":45:26)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":45:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:5)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":49:5)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:14)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:10)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:17)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:21)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:19)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":47:5)
#loc115 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":48:22)
#loc116 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":48:21)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":48:33)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":48:10)
#loc119 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":48:9)
#loc120 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:31)
#loc121 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":46:30)
#loc122 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":50:26)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":50:5)
#loc124 = loc("../../testcasesupport/std_thread.h":21:1)
#loc125 = loc("../../testcasesupport/std_thread.h":21:45)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":89:1)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":121:1)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":94:9)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":94:29)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":95:9)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":95:29)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":96:9)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":96:13)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":91:5)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":91:10)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":92:1)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":97:23)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":97:9)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":98:9)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":101:9)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":98:14)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":99:9)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":100:13)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":102:9)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":105:9)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":102:30)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":102:49)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":102:50)
#loc149 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":102:14)
#loc150 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":103:9)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":104:23)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":104:13)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":106:9)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":109:9)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":106:30)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":106:49)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":106:50)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":106:14)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":107:9)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":108:23)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":108:13)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":110:9)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":113:9)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":110:13)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":110:21)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":110:38)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":110:24)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":111:9)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":112:30)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":112:13)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":114:9)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":117:9)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":114:13)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":114:21)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":114:38)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":114:24)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":115:9)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":116:30)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":116:13)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":118:30)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":118:9)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":119:22)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__int_byref_18.c":119:9)
#loc184 = loc(fused[#loc1, #loc2])
#loc185 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc7, #loc8])
#loc188 = loc(fused[#loc9, #loc10])
#loc189 = loc(fused[#loc12, #loc13])
#loc190 = loc(fused[#loc15, #loc14])
#loc191 = loc(fused[#loc16, #loc17])
#loc192 = loc(fused[#loc19, #loc13])
#loc193 = loc(fused[#loc24, #loc22])
#loc194 = loc(fused[#loc26, #loc25])
#loc195 = loc(fused[#loc27, #loc28])
#loc196 = loc(fused[#loc29, #loc30])
#loc197 = loc(fused[#loc31, #loc32])
#loc198 = loc(fused[#loc33, #loc34])
#loc199 = loc(fused[#loc35, #loc36])
#loc200 = loc(fused[#loc37, #loc38])
#loc201 = loc(fused[#loc39, #loc40])
#loc202 = loc(fused[#loc41, #loc42])
#loc203 = loc(fused[#loc45, #loc44])
#loc204 = loc(fused[#loc46, #loc47])
#loc205 = loc(fused[#loc49, #loc50])
#loc206 = loc(fused[#loc52, #loc47])
#loc207 = loc(fused[#loc54, #loc53])
#loc208 = loc(fused[#loc55, #loc56])
#loc209 = loc(fused[#loc58, #loc59])
#loc210 = loc(fused[#loc61, #loc56])
#loc211 = loc(fused[#loc63, #loc62])
#loc212 = loc(fused[#loc64, #loc65])
#loc213 = loc(fused[#loc70, #loc65])
#loc214 = loc(fused[#loc73, #loc74])
#loc215 = loc(fused[#loc79, #loc74])
#loc216 = loc(fused[#loc84, #loc85])
#loc217 = loc(fused[#loc86, #loc87])
#loc218 = loc(fused[#loc88, #loc89])
#loc219 = loc(fused[#loc90, #loc91])
#loc220 = loc(fused[#loc92, #loc93])
#loc221 = loc(fused[#loc94, #loc95])
#loc222 = loc(fused[#loc96, #loc97])
#loc224 = loc(fused[#loc100, #loc101])
#loc225 = loc(fused[#loc102, #loc103])
#loc226 = loc(fused[#loc107, #loc108])
#loc227 = loc(fused[#loc110, #loc109])
#loc228 = loc(fused[#loc111, #loc112])
#loc229 = loc(fused[#loc114, #loc108])
#loc230 = loc(fused[#loc119, #loc117])
#loc231 = loc(fused[#loc121, #loc120])
#loc232 = loc(fused[#loc124, #loc125])
#loc233 = loc(fused[#loc126, #loc127])
#loc234 = loc(fused[#loc128, #loc129])
#loc235 = loc(fused[#loc130, #loc131])
#loc236 = loc(fused[#loc132, #loc133])
#loc237 = loc(fused[#loc134, #loc135])
#loc238 = loc(fused[#loc138, #loc137])
#loc239 = loc(fused[#loc139, #loc140])
#loc240 = loc(fused[#loc142, #loc140])
#loc241 = loc(fused[#loc144, #loc145])
#loc242 = loc(fused[#loc147, #loc148])
#loc243 = loc(fused[#loc150, #loc145])
#loc244 = loc(fused[#loc152, #loc151])
#loc245 = loc(fused[#loc153, #loc154])
#loc246 = loc(fused[#loc156, #loc157])
#loc247 = loc(fused[#loc159, #loc154])
#loc248 = loc(fused[#loc161, #loc160])
#loc249 = loc(fused[#loc162, #loc163])
#loc250 = loc(fused[#loc168, #loc163])
#loc251 = loc(fused[#loc171, #loc172])
#loc252 = loc(fused[#loc177, #loc172])
