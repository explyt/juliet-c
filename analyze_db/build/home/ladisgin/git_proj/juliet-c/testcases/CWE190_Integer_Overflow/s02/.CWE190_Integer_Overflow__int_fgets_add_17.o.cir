!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc174)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc175)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc176)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc178)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc180)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc181)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc182)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc183)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc184)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc23)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    cir.br ^bb1 loc(#loc186)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc27)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.br ^bb2 loc(#loc186)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc188)
    cir.brcond %9 ^bb3, ^bb14 loc(#loc31)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc189)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc190)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc180)
    cir.store %10, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc180)
    cir.br ^bb6 loc(#loc191)
  ^bb6:  // pred: ^bb5
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc37)
    %12 = cir.const #cir.int<3> : !s32i loc(#loc38)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc38)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc38)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc38)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc38)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc38)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc38)
    %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc38)
    %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc39)
    %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc40)
    %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc41)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc41)
    %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc192)
    cir.brcond %25 ^bb7, ^bb8 loc(#loc193)
  ^bb7:  // pred: ^bb6
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc45)
    %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc46)
    cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    cir.br ^bb9 loc(#loc43)
  ^bb8:  // pred: ^bb6
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb9 loc(#loc36)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc36)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc34)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc26)
  ^bb13:  // pred: ^bb12
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc51)
    cir.store %31, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.br ^bb2 loc(#loc186)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc26)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc196)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %32, %3 : !s32i, !cir.ptr<!s32i> loc(#loc197)
    cir.br ^bb17 loc(#loc196)
  ^bb17:  // 2 preds: ^bb16, ^bb23
    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc198)
    cir.brcond %35 ^bb18, ^bb24 loc(#loc58)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc199)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc200)
  ^bb20:  // pred: ^bb19
    %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %38 = cir.binop(add, %36, %37) nsw : !s32i loc(#loc62)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    %39 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc63)
    cir.call @printIntLine(%39) : (!s32i) -> () loc(#loc64)
    cir.br ^bb21 loc(#loc61)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc53)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc53)
  ^bb23:  // pred: ^bb22
    %40 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc65)
    %41 = cir.unary(inc, %40) : !s32i, !s32i loc(#loc66)
    cir.store %41, %3 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.br ^bb17 loc(#loc196)
  ^bb24:  // pred: ^bb17
    cir.br ^bb25 loc(#loc53)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc13)
  } loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_add_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc203)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc204)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc71)
    cir.return loc(#loc68)
  } loc(#loc202)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc73)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc206)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc207)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc208)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc209)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc210)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %6 = cir.const #cir.int<0> : !s32i loc(#loc89)
    cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    cir.br ^bb2 loc(#loc212)
  ^bb2:  // 2 preds: ^bb1, ^bb13
    %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc91)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc214)
    cir.brcond %9 ^bb3, ^bb14 loc(#loc93)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc215)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc216)
  ^bb5:  // pred: ^bb4
    %10 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc206)
    cir.store %10, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc206)
    cir.br ^bb6 loc(#loc217)
  ^bb6:  // pred: ^bb5
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
    %12 = cir.const #cir.int<3> : !s32i loc(#loc100)
    %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc100)
    %14 = cir.const #cir.int<4> : !u64i loc(#loc100)
    %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc100)
    %16 = cir.const #cir.int<2> : !s32i loc(#loc100)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc100)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc100)
    %19 = cir.cast(integral, %18 : !u64i), !s32i loc(#loc100)
    %20 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc175)
    %21 = cir.load %20 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
    %22 = cir.call @fgets(%11, %19, %21) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
    %23 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    %25 = cir.cmp(ne, %22, %24) : !cir.ptr<!s8i>, !cir.bool loc(#loc218)
    cir.brcond %25 ^bb7, ^bb8 loc(#loc219)
  ^bb7:  // pred: ^bb6
    %26 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
    %27 = cir.call @atoi(%26) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc108)
    cir.store %27, %4 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.br ^bb9 loc(#loc105)
  ^bb8:  // pred: ^bb6
    %28 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc111)
    %29 = cir.cast(array_to_ptrdecay, %28 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc111)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    cir.br ^bb9 loc(#loc98)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc98)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc96)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc88)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // pred: ^bb12
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %31 = cir.unary(inc, %30) : !s32i, !s32i loc(#loc114)
    cir.store %31, %2 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb2 loc(#loc212)
  ^bb14:  // pred: ^bb2
    cir.br ^bb15 loc(#loc88)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc222)
  ^bb16:  // pred: ^bb15
    %32 = cir.const #cir.int<0> : !s32i loc(#loc117)
    cir.store %32, %3 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb17 loc(#loc222)
  ^bb17:  // 2 preds: ^bb16, ^bb26
    %33 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc119)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc120)
    %35 = cir.cmp(lt, %33, %34) : !s32i, !cir.bool loc(#loc224)
    cir.brcond %35 ^bb18, ^bb27 loc(#loc121)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc225)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc226)
  ^bb20:  // pred: ^bb19
    %36 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    %37 = cir.const #cir.int<2147483647> : !s32i loc(#loc126)
    %38 = cir.cmp(lt, %36, %37) : !s32i, !cir.bool loc(#loc227)
    cir.brcond %38 ^bb21, ^bb22 loc(#loc228)
  ^bb21:  // pred: ^bb20
    %39 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc130)
    %40 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %41 = cir.binop(add, %39, %40) nsw : !s32i loc(#loc130)
    cir.store %41, %1 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    %42 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc131)
    cir.call @printIntLine(%42) : (!s32i) -> () loc(#loc132)
    cir.br ^bb23 loc(#loc128)
  ^bb22:  // pred: ^bb20
    %43 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc73)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%44) : (!cir.ptr<!s8i>) -> () loc(#loc133)
    cir.br ^bb23 loc(#loc124)
  ^bb23:  // 2 preds: ^bb21, ^bb22
    cir.br ^bb24 loc(#loc124)
  ^bb24:  // pred: ^bb23
    cir.br ^bb25 loc(#loc116)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc116)
  ^bb26:  // pred: ^bb25
    %45 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %46 = cir.unary(inc, %45) : !s32i, !s32i loc(#loc135)
    cir.store %46, %3 : !s32i, !cir.ptr<!s32i> loc(#loc229)
    cir.br ^bb17 loc(#loc222)
  ^bb27:  // pred: ^bb17
    cir.br ^bb28 loc(#loc116)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc75)
  } loc(#loc205)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc231)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc232)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc233)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc234)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc145)
    cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    cir.br ^bb1 loc(#loc236)
  ^bb1:  // pred: ^bb0
    %5 = cir.const #cir.int<0> : !s32i loc(#loc149)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.br ^bb2 loc(#loc236)
  ^bb2:  // 2 preds: ^bb1, ^bb6
    %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %8 = cir.cmp(lt, %6, %7) : !s32i, !cir.bool loc(#loc238)
    cir.brcond %8 ^bb3, ^bb7 loc(#loc153)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc239)
  ^bb4:  // pred: ^bb3
    %9 = cir.const #cir.int<2> : !s32i loc(#loc155)
    cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.br ^bb5 loc(#loc148)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc148)
  ^bb6:  // pred: ^bb5
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    %11 = cir.unary(inc, %10) : !s32i, !s32i loc(#loc158)
    cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.br ^bb2 loc(#loc236)
  ^bb7:  // pred: ^bb2
    cir.br ^bb8 loc(#loc148)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc242)
  ^bb9:  // pred: ^bb8
    %12 = cir.const #cir.int<0> : !s32i loc(#loc161)
    cir.store %12, %2 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    cir.br ^bb10 loc(#loc242)
  ^bb10:  // 2 preds: ^bb9, ^bb16
    %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc163)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc164)
    %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc244)
    cir.brcond %15 ^bb11, ^bb17 loc(#loc165)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc245)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc246)
  ^bb13:  // pred: ^bb12
    %16 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc169)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc139)
    %18 = cir.binop(add, %16, %17) nsw : !s32i loc(#loc169)
    cir.store %18, %0 : !s32i, !cir.ptr<!s32i> loc(#loc231)
    %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
    cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc171)
    cir.br ^bb14 loc(#loc168)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc160)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc160)
  ^bb16:  // pred: ^bb15
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc172)
    %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc173)
    cir.store %21, %2 : !s32i, !cir.ptr<!s32i> loc(#loc247)
    cir.br ^bb10 loc(#loc242)
  ^bb17:  // pred: ^bb10
    cir.br ^bb18 loc(#loc160)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc137)
  } loc(#loc230)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_17.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":42:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":24:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":54:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":33:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":33:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":50:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":50:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":26:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":26:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":26:11)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":27:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":27:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":29:12)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":29:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":45:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:13)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:16)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:20)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:18)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":31:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":32:9)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":44:9)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":43:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:23)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:36)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:53)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":35:63)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":36:13)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":39:13)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":41:13)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":38:29)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":38:24)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":38:17)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":38:40)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":42:17)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:24)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":30:23)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:5)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:13)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:16)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:20)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:18)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":47:5)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":48:9)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":52:9)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":50:26)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":51:26)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":51:13)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:24)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":46:23)
#loc67 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":120:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":124:1)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":122:5)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":122:13)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":123:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":123:13)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":93:23)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":61:1)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":96:1)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":70:13)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":70:49)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":88:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":88:33)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":63:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":63:9)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":63:11)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":64:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":64:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":66:12)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":66:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":82:5)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:13)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:9)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:16)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:20)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:18)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":68:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":69:9)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":81:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:13)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":80:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:23)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:36)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:53)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:17)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":72:63)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":73:13)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":76:13)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":78:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":75:29)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":75:24)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":75:17)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":75:40)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":79:27)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":79:17)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:24)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":67:23)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:5)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":95:5)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:13)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:16)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:20)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:18)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":84:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":86:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":94:9)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":86:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":86:20)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":87:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":90:9)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":92:9)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":88:26)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":89:26)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":89:13)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":93:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:24)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":83:23)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":99:1)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":118:1)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":114:13)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":114:33)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":101:5)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":101:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":101:11)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":102:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":102:9)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":104:12)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":104:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":109:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:16)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:20)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:18)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":106:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":108:16)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":108:9)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:24)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":105:23)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":117:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:16)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:20)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:18)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":111:5)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":112:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":116:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":114:26)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":115:26)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":115:13)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:24)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_add_17.c":110:23)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc7, #loc8])
#loc178 = loc(fused[#loc10, #loc11])
#loc179 = loc(fused[#loc12, #loc13])
#loc180 = loc(fused[#loc14, #loc15])
#loc181 = loc(fused[#loc16, #loc17])
#loc182 = loc(fused[#loc18, #loc19])
#loc183 = loc(fused[#loc18, #loc20])
#loc184 = loc(fused[#loc21, #loc22])
#loc185 = loc(fused[#loc24, #loc23])
#loc186 = loc(fused[#loc25, #loc26])
#loc187 = loc(fused[#loc28, #loc27])
#loc188 = loc(fused[#loc29, #loc30])
#loc189 = loc(fused[#loc32, #loc26])
#loc190 = loc(fused[#loc33, #loc34])
#loc191 = loc(fused[#loc35, #loc36])
#loc192 = loc(fused[#loc40, #loc41])
#loc193 = loc(fused[#loc42, #loc43, #loc44, #loc36])
#loc194 = loc(fused[#loc47, #loc48])
#loc195 = loc(fused[#loc51, #loc50])
#loc196 = loc(fused[#loc52, #loc53])
#loc197 = loc(fused[#loc55, #loc54])
#loc198 = loc(fused[#loc56, #loc57])
#loc199 = loc(fused[#loc59, #loc53])
#loc200 = loc(fused[#loc60, #loc61])
#loc201 = loc(fused[#loc66, #loc65])
#loc202 = loc(fused[#loc67, #loc68])
#loc203 = loc(fused[#loc69, #loc70])
#loc204 = loc(fused[#loc71, #loc72])
#loc205 = loc(fused[#loc74, #loc75])
#loc206 = loc(fused[#loc76, #loc77])
#loc207 = loc(fused[#loc78, #loc79])
#loc208 = loc(fused[#loc80, #loc81])
#loc209 = loc(fused[#loc80, #loc82])
#loc210 = loc(fused[#loc83, #loc84])
#loc211 = loc(fused[#loc86, #loc85])
#loc212 = loc(fused[#loc87, #loc88])
#loc213 = loc(fused[#loc90, #loc89])
#loc214 = loc(fused[#loc91, #loc92])
#loc215 = loc(fused[#loc94, #loc88])
#loc216 = loc(fused[#loc95, #loc96])
#loc217 = loc(fused[#loc97, #loc98])
#loc218 = loc(fused[#loc102, #loc103])
#loc219 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc220 = loc(fused[#loc109, #loc110])
#loc221 = loc(fused[#loc114, #loc113])
#loc222 = loc(fused[#loc115, #loc116])
#loc223 = loc(fused[#loc118, #loc117])
#loc224 = loc(fused[#loc119, #loc120])
#loc225 = loc(fused[#loc122, #loc116])
#loc226 = loc(fused[#loc123, #loc124])
#loc227 = loc(fused[#loc125, #loc126])
#loc228 = loc(fused[#loc127, #loc128, #loc129, #loc124])
#loc229 = loc(fused[#loc135, #loc134])
#loc230 = loc(fused[#loc136, #loc137])
#loc231 = loc(fused[#loc138, #loc139])
#loc232 = loc(fused[#loc140, #loc141])
#loc233 = loc(fused[#loc140, #loc142])
#loc234 = loc(fused[#loc143, #loc144])
#loc235 = loc(fused[#loc146, #loc145])
#loc236 = loc(fused[#loc147, #loc148])
#loc237 = loc(fused[#loc150, #loc149])
#loc238 = loc(fused[#loc151, #loc152])
#loc239 = loc(fused[#loc154, #loc148])
#loc240 = loc(fused[#loc156, #loc155])
#loc241 = loc(fused[#loc158, #loc157])
#loc242 = loc(fused[#loc159, #loc160])
#loc243 = loc(fused[#loc162, #loc161])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc166, #loc160])
#loc246 = loc(fused[#loc167, #loc168])
#loc247 = loc(fused[#loc173, #loc172])
