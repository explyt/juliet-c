!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":44:21)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":44:25)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":276:10)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":276:14)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":276:20)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":276:32)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":139:25)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":139:29)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":175:25)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":175:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc374 = loc(fused[#loc6, #loc7])
#loc437 = loc(fused[#loc170, #loc171])
#loc438 = loc(fused[#loc172, #loc173])
#loc443 = loc(fused[#loc190, #loc191])
#loc462 = loc(fused[#loc240, #loc241])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc372)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc3)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc374)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc376)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc377)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc377)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc377)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc379)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc24)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc24)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc381)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc383)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc30)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc384)
              cir.condition(%14) loc(#loc31)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc34)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc34)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc34)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc35)
              } loc(#loc385)
              cir.yield loc(#loc26)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc37)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc386)
              cir.yield loc(#loc382)
            } loc(#loc382)
          } loc(#loc382)
        } else {
          %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc380)
      } loc(#loc378)
    } loc(#loc375)
    cir.return loc(#loc5)
  } loc(#loc373)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc387)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc388)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc43)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr1) loc(#loc389)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc390)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc391)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc392)
  cir.func private @close(!s32i) -> !s32i loc(#loc393)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc395)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc396)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc59)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc396)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc60)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc61)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc397)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc399)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc400)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc401)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc402)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc70)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc70)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc401)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc75)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc76)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc77)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc78)
          cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc404)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc84)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc84)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc406)
            cir.if %58 {
              cir.break loc(#loc86)
            } loc(#loc407)
          } loc(#loc405)
          %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc408)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc409)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc410)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc94)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc94)
          %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc95)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc411)
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc43)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc43)
          %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc97)
          %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc98)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc99)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc412)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc102)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc102)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc103)
          %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc104)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc413)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc415)
            %57 = cir.const #cir.int<16> : !u64i loc(#loc416)
            %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc416)
            %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc114)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc115)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc115)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc417)
            cir.if %62 {
              cir.break loc(#loc117)
            } loc(#loc418)
          } loc(#loc414)
          %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc119)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc119)
          %35 = cir.const #cir.int<3> : !s32i loc(#loc120)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc120)
          %37 = cir.const #cir.int<4> : !u64i loc(#loc120)
          %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc120)
          %39 = cir.const #cir.int<2> : !s32i loc(#loc120)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc120)
          %41 = cir.binop(add, %38, %40) : !u64i loc(#loc120)
          %42 = cir.const #cir.int<1> : !s32i loc(#loc121)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc121)
          %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc419)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc122)
          %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc123)
          %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc123)
          cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc420)
          cir.scope {
            %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc129)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc129)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc422)
            %59 = cir.ternary(%58, true {
              %60 = cir.const #true loc(#loc130)
              cir.yield %60 : !cir.bool loc(#loc130)
            }, false {
              %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc132)
              %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc423)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc130)
                cir.yield %64 : !cir.bool loc(#loc130)
              }, false {
                %64 = cir.const #false loc(#loc130)
                cir.yield %64 : !cir.bool loc(#loc130)
              }) : (!cir.bool) -> !cir.bool loc(#loc130)
              cir.yield %63 : !cir.bool loc(#loc130)
            }) : (!cir.bool) -> !cir.bool loc(#loc130)
            cir.if %59 {
              cir.break loc(#loc134)
            } loc(#loc424)
          } loc(#loc421)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc135)
          %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc135)
          %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc136)
          %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc137)
          %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc137)
          cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc425)
          %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc138)
          %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc139)
          cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc426)
          cir.yield loc(#loc74)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc142)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc142)
          cir.condition(%14) loc(#loc142)
        } loc(#loc403)
      } loc(#loc403)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc146)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc146)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc428)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc148)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc149)
        } loc(#loc429)
      } loc(#loc427)
    } loc(#loc398)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc150)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc150)
    cir.return loc(#loc55)
  } loc(#loc394)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc431)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc154)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc432)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc156)
    cir.return loc(#loc153)
  } loc(#loc430)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc433)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc434)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc435)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc165)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc167)
  cir.func @main(%arg0: !s32i loc(fused[#loc170, #loc171]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc172, #loc173])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc437)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc438)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc169)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc174)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc175)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc176)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc176)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc177)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc164)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc164)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc178)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc439)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_good() : () -> () loc(#loc179)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc165)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc165)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc181)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc166)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc166)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc440)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44_bad() : () -> () loc(#loc183)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc167)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc167)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc186)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc441)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc441)
    cir.return %17 : !s32i loc(#loc441)
  } loc(#loc436)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc190, #loc191])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc443)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc445)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc446)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc446)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc446)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc202)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc448)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc206)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc207)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc208)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc208)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc450)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc211)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc452)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc213)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc214)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc453)
              cir.condition(%14) loc(#loc215)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc217)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc218)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc218)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc218)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc219)
              } loc(#loc454)
              cir.yield loc(#loc210)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc221)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc455)
              cir.yield loc(#loc451)
            } loc(#loc451)
          } loc(#loc451)
        } else {
          %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc222)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc222)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc223)
        } loc(#loc449)
      } loc(#loc447)
    } loc(#loc444)
    cir.return loc(#loc189)
  } loc(#loc442)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc457)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc458)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc229)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc458)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc230)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc231)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc459)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc233)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc460)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc235)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc235)
    cir.return loc(#loc225)
  } loc(#loc456)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc237)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc240, #loc241])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc462)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc464)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc465)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc465)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc465)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc252)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc467)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc254)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc255)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc468)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc253)
            cir.yield %12 : !cir.bool loc(#loc253)
          }, false {
            %12 = cir.const #false loc(#loc253)
            cir.yield %12 : !cir.bool loc(#loc253)
          }) : (!cir.bool) -> !cir.bool loc(#loc253)
          cir.yield %11 : !cir.bool loc(#loc253)
        }, false {
          %8 = cir.const #false loc(#loc253)
          cir.yield %8 : !cir.bool loc(#loc253)
        }) : (!cir.bool) -> !cir.bool loc(#loc253)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc260)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc261)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc262)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc262)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc470)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc265)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc472)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc267)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc268)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc473)
              cir.condition(%15) loc(#loc269)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc271)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc272)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc272)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc272)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc273)
              } loc(#loc474)
              cir.yield loc(#loc264)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc274)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc275)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc475)
              cir.yield loc(#loc471)
            } loc(#loc471)
          } loc(#loc471)
        } else {
          %8 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc237)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc237)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc276)
        } loc(#loc469)
      } loc(#loc466)
    } loc(#loc463)
    cir.return loc(#loc239)
  } loc(#loc461)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc477)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc478)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc282)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc478)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc283)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc284)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc479)
    cir.scope {
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc481)
      %8 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc482)
      %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc483)
      %10 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc484)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc293)
      %12 = cir.unary(minus, %11) : !s32i, !s32i loc(#loc293)
      cir.store %12, %9 : !s32i, !cir.ptr<!s32i> loc(#loc483)
      cir.scope {
        cir.do {
          %13 = cir.const #cir.int<2> : !s32i loc(#loc298)
          %14 = cir.const #cir.int<1> : !s32i loc(#loc299)
          %15 = cir.const #cir.int<6> : !s32i loc(#loc300)
          %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr1) loc(#loc301)
          cir.store %16, %9 : !s32i, !cir.ptr<!s32i> loc(#loc486)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc306)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc307)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc307)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc488)
            cir.if %58 {
              cir.break loc(#loc309)
            } loc(#loc489)
          } loc(#loc487)
          %17 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc490)
          %18 = cir.const #cir.int<0> : !s32i loc(#loc312)
          %19 = cir.const #cir.int<16> : !u64i loc(#loc491)
          cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc492)
          %20 = cir.const #cir.int<2> : !s32i loc(#loc317)
          %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc317)
          %22 = cir.get_member %8[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc95)
          cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc493)
          %23 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc319)
          %24 = cir.cast(array_to_ptrdecay, %23 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc319)
          %25 = cir.call @inet_addr(%24) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr1) loc(#loc320)
          %26 = cir.get_member %8[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc98)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc99)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc494)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc323)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc323)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr1) loc(#loc324)
          %31 = cir.get_member %8[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc104)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc495)
          cir.scope {
            %55 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc329)
            %56 = cir.cast(bitcast, %8 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc497)
            %57 = cir.const #cir.int<16> : !u64i loc(#loc498)
            %58 = cir.cast(integral, %57 : !u64i), !u32i loc(#loc498)
            %59 = cir.call @connect(%55, %56, %58) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc334)
            %60 = cir.const #cir.int<1> : !s32i loc(#loc335)
            %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc335)
            %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc499)
            cir.if %62 {
              cir.break loc(#loc337)
            } loc(#loc500)
          } loc(#loc496)
          %32 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc338)
          %33 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc339)
          %34 = cir.cast(bitcast, %33 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc339)
          %35 = cir.const #cir.int<3> : !s32i loc(#loc340)
          %36 = cir.cast(integral, %35 : !s32i), !u64i loc(#loc340)
          %37 = cir.const #cir.int<4> : !u64i loc(#loc340)
          %38 = cir.binop(mul, %36, %37) : !u64i loc(#loc340)
          %39 = cir.const #cir.int<2> : !s32i loc(#loc340)
          %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc340)
          %41 = cir.binop(add, %38, %40) : !u64i loc(#loc340)
          %42 = cir.const #cir.int<1> : !s32i loc(#loc341)
          %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc341)
          %44 = cir.binop(sub, %41, %43) : !u64i loc(#loc501)
          %45 = cir.const #cir.int<0> : !s32i loc(#loc342)
          %46 = cir.call @recv(%32, %34, %44, %45) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc343)
          %47 = cir.cast(integral, %46 : !s64i), !s32i loc(#loc343)
          cir.store %47, %7 : !s32i, !cir.ptr<!s32i> loc(#loc502)
          cir.scope {
            %55 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc348)
            %56 = cir.const #cir.int<1> : !s32i loc(#loc349)
            %57 = cir.unary(minus, %56) : !s32i, !s32i loc(#loc349)
            %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc504)
            %59 = cir.ternary(%58, true {
              %60 = cir.const #true loc(#loc350)
              cir.yield %60 : !cir.bool loc(#loc350)
            }, false {
              %60 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc351)
              %61 = cir.const #cir.int<0> : !s32i loc(#loc352)
              %62 = cir.cmp(eq, %60, %61) : !s32i, !cir.bool loc(#loc505)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc350)
                cir.yield %64 : !cir.bool loc(#loc350)
              }, false {
                %64 = cir.const #false loc(#loc350)
                cir.yield %64 : !cir.bool loc(#loc350)
              }) : (!cir.bool) -> !cir.bool loc(#loc350)
              cir.yield %63 : !cir.bool loc(#loc350)
            }) : (!cir.bool) -> !cir.bool loc(#loc350)
            cir.if %59 {
              cir.break loc(#loc354)
            } loc(#loc506)
          } loc(#loc503)
          %48 = cir.const #cir.int<0> : !s32i loc(#loc355)
          %49 = cir.cast(integral, %48 : !s32i), !s8i loc(#loc355)
          %50 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc356)
          %51 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc357)
          %52 = cir.ptr_stride(%51 : !cir.ptr<!s8i>, %50 : !s32i), !cir.ptr<!s8i> loc(#loc357)
          cir.store %49, %52 : !s8i, !cir.ptr<!s8i> loc(#loc507)
          %53 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc358)
          %54 = cir.call @atoi(%53) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr1) loc(#loc359)
          cir.store %54, %0 : !s32i, !cir.ptr<!s32i> loc(#loc508)
          cir.yield loc(#loc297)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc362)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc362)
          cir.condition(%14) loc(#loc362)
        } loc(#loc485)
      } loc(#loc485)
      cir.scope {
        %13 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc365)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc366)
        %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc366)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc510)
        cir.if %16 {
          %17 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc368)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc369)
        } loc(#loc511)
      } loc(#loc509)
    } loc(#loc480)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc370)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc371)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc370)
    cir.return loc(#loc278)
  } loc(#loc476)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":62:23)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":44:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":65:1)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":45:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":46:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":64:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":47:9)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":47:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":48:9)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":48:30)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":51:9)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":63:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":51:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":51:21)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":52:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":59:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":61:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":53:28)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":53:20)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":53:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":58:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:21)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:17)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:28)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:26)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":56:13)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":57:37)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":57:30)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":57:17)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:33)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":55:32)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":62:13)
#loc39 = loc("/usr/include/sys/socket.h":102:1)
#loc40 = loc("/usr/include/sys/socket.h":102:62)
#loc41 = loc("/usr/include/arpa/inet.h":34:1)
#loc42 = loc("/usr/include/arpa/inet.h":34:47)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":100:49)
#loc44 = loc("/usr/include/netinet/in.h":404:1)
#loc45 = loc("/usr/include/netinet/in.h":405:40)
#loc46 = loc("/usr/include/sys/socket.h":126:1)
#loc47 = loc("/usr/include/sys/socket.h":126:75)
#loc48 = loc("/usr/include/sys/socket.h":145:1)
#loc49 = loc("/usr/include/sys/socket.h":145:68)
#loc50 = loc("/usr/include/stdlib.h":105:1)
#loc51 = loc("/usr/include/stdlib.h":106:33)
#loc52 = loc("/usr/include/unistd.h":358:1)
#loc53 = loc("/usr/include/unistd.h":358:27)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":67:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":132:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":69:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":69:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":71:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":71:29)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":73:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":73:12)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":73:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":74:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":129:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":79:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":79:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":80:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":80:28)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":81:9)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":81:32)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":82:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":82:41)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":83:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":118:17)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:36)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:45)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:58)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:29)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":93:69)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":94:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":97:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":94:17)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":94:34)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":95:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":96:17)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:20)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:21)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:30)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:33)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:47)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:13)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":98:48)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":99:34)
#loc95 = loc("/usr/include/netinet/in.h":249:5)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":99:13)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":100:39)
#loc98 = loc("/usr/include/netinet/in.h":251:20)
#loc99 = loc("/usr/include/netinet/in.h":33:15)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":100:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":100:59)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":101:38)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":101:32)
#loc104 = loc("/usr/include/netinet/in.h":250:15)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":101:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":101:46)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:13)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":105:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:25)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:58)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:59)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:68)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:82)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:17)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":102:88)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":103:13)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":104:17)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:31)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:46)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:59)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:77)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:80)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:26)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":108:81)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:13)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":112:13)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:17)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:31)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:44)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:47)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":109:61)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":110:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":111:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":114:39)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":114:25)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":114:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":116:25)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":116:20)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":116:13)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":116:36)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":118:16)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":119:9)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":122:9)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":119:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":119:30)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":120:9)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":121:26)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":121:13)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":131:5)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":131:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":262:1)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":266:1)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":264:5)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":264:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":265:5)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":265:13)
#loc158 = loc("/usr/include/stdlib.h":575:1)
#loc159 = loc("/usr/include/stdlib.h":575:41)
#loc160 = loc("/usr/include/time.h":76:1)
#loc161 = loc("/usr/include/time.h":76:38)
#loc162 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc163 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":281:15)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":283:15)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":286:15)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":288:15)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":276:1)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":291:1)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":277:1)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":279:27)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":279:22)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":279:5)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":281:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":282:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":282:71)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":283:5)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":286:5)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":287:5)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":287:70)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":288:5)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":290:12)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":290:5)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":139:1)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":160:1)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":140:1)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":141:5)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":159:5)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":142:9)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":142:13)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":143:9)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":143:30)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":146:9)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":158:9)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":146:13)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":146:21)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":147:9)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":154:9)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":156:9)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":148:28)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":148:20)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":148:13)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:13)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":153:13)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:21)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:17)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:24)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:28)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:26)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":151:13)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":152:37)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":152:30)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":152:17)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:33)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":150:32)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":157:23)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":157:13)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":162:1)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":172:1)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":164:5)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":164:9)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":165:5)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":165:29)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":167:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":167:12)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":167:5)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":170:12)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":170:5)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":171:5)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":171:13)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":192:23)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":175:1)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":195:1)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":176:1)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":177:5)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":194:5)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":178:9)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":178:13)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":179:9)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":179:30)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:9)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":193:9)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:13)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:21)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:23)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:26)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:34)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":181:36)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":182:9)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":189:9)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":191:9)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":183:28)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":183:20)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":183:13)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:13)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":188:13)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:21)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:17)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:24)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:28)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:26)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":186:13)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":187:37)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":187:30)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":187:17)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:33)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":185:32)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":192:13)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":197:1)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":260:1)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":199:5)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":199:9)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":200:5)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":200:29)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":202:13)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":202:12)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":202:5)
#loc286 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":203:5)
#loc287 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":258:5)
#loc288 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":208:9)
#loc289 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":208:13)
#loc290 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":209:9)
#loc291 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":209:28)
#loc292 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":210:9)
#loc293 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":210:32)
#loc294 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":211:9)
#loc295 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":211:41)
#loc296 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":212:9)
#loc297 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":247:17)
#loc298 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:36)
#loc299 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:45)
#loc300 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:58)
#loc301 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:29)
#loc302 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:13)
#loc303 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":222:69)
#loc304 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":223:13)
#loc305 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":226:13)
#loc306 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":223:17)
#loc307 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":223:34)
#loc308 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":224:13)
#loc309 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":225:17)
#loc310 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:20)
#loc311 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:21)
#loc312 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:30)
#loc313 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:33)
#loc314 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:47)
#loc315 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:13)
#loc316 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":227:48)
#loc317 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":228:34)
#loc318 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":228:13)
#loc319 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":229:49)
#loc320 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":229:39)
#loc321 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":229:13)
#loc322 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":229:59)
#loc323 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":230:38)
#loc324 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":230:32)
#loc325 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":230:13)
#loc326 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":230:46)
#loc327 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:13)
#loc328 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":234:13)
#loc329 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:25)
#loc330 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:58)
#loc331 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:59)
#loc332 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:68)
#loc333 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:82)
#loc334 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:17)
#loc335 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":231:88)
#loc336 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":232:13)
#loc337 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":233:17)
#loc338 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:31)
#loc339 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:46)
#loc340 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:59)
#loc341 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:77)
#loc342 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:80)
#loc343 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:26)
#loc344 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:13)
#loc345 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":237:81)
#loc346 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:13)
#loc347 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":241:13)
#loc348 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:17)
#loc349 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:31)
#loc350 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:44)
#loc351 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:47)
#loc352 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":238:61)
#loc353 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":239:13)
#loc354 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":240:17)
#loc355 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":243:39)
#loc356 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":243:25)
#loc357 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":243:13)
#loc358 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":245:25)
#loc359 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":245:20)
#loc360 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":245:13)
#loc361 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":245:36)
#loc362 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":247:16)
#loc363 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":248:9)
#loc364 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":251:9)
#loc365 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":248:13)
#loc366 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":248:30)
#loc367 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":249:9)
#loc368 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":250:26)
#loc369 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":250:13)
#loc370 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":259:5)
#loc371 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_connect_socket_44.c":259:13)
#loc372 = loc(fused[#loc1, #loc2])
#loc373 = loc(fused[#loc4, #loc5])
#loc375 = loc(fused[#loc9, #loc10])
#loc376 = loc(fused[#loc11, #loc12])
#loc377 = loc(fused[#loc13, #loc14])
#loc378 = loc(fused[#loc15, #loc16])
#loc379 = loc(fused[#loc17, #loc18])
#loc380 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc381 = loc(fused[#loc24, #loc22])
#loc382 = loc(fused[#loc25, #loc26])
#loc383 = loc(fused[#loc28, #loc27])
#loc384 = loc(fused[#loc29, #loc30])
#loc385 = loc(fused[#loc32, #loc26])
#loc386 = loc(fused[#loc37, #loc36])
#loc387 = loc(fused[#loc39, #loc40])
#loc388 = loc(fused[#loc41, #loc42])
#loc389 = loc(fused[#loc44, #loc45])
#loc390 = loc(fused[#loc46, #loc47])
#loc391 = loc(fused[#loc48, #loc49])
#loc392 = loc(fused[#loc50, #loc51])
#loc393 = loc(fused[#loc52, #loc53])
#loc394 = loc(fused[#loc54, #loc55])
#loc395 = loc(fused[#loc56, #loc57])
#loc396 = loc(fused[#loc58, #loc59])
#loc397 = loc(fused[#loc62, #loc60])
#loc398 = loc(fused[#loc63, #loc64])
#loc399 = loc(fused[#loc65, #loc66])
#loc400 = loc(fused[#loc67, #loc68])
#loc401 = loc(fused[#loc69, #loc70])
#loc402 = loc(fused[#loc71, #loc72])
#loc403 = loc(fused[#loc73, #loc74])
#loc404 = loc(fused[#loc79, #loc80])
#loc405 = loc(fused[#loc81, #loc82])
#loc406 = loc(fused[#loc83, #loc84])
#loc407 = loc(fused[#loc85, #loc82])
#loc408 = loc(fused[#loc87, #loc88])
#loc409 = loc(fused[#loc90, #loc91])
#loc410 = loc(fused[#loc92, #loc93])
#loc411 = loc(fused[#loc96, #loc94])
#loc412 = loc(fused[#loc100, #loc101])
#loc413 = loc(fused[#loc105, #loc106])
#loc414 = loc(fused[#loc107, #loc108])
#loc415 = loc(fused[#loc110, #loc111])
#loc416 = loc(fused[#loc112, #loc113])
#loc417 = loc(fused[#loc114, #loc115])
#loc418 = loc(fused[#loc116, #loc108])
#loc419 = loc(fused[#loc120, #loc121])
#loc420 = loc(fused[#loc124, #loc125])
#loc421 = loc(fused[#loc126, #loc127])
#loc422 = loc(fused[#loc128, #loc129])
#loc423 = loc(fused[#loc131, #loc132])
#loc424 = loc(fused[#loc133, #loc127])
#loc425 = loc(fused[#loc137, #loc135])
#loc426 = loc(fused[#loc140, #loc141])
#loc427 = loc(fused[#loc143, #loc144])
#loc428 = loc(fused[#loc145, #loc146])
#loc429 = loc(fused[#loc147, #loc144])
#loc430 = loc(fused[#loc152, #loc153])
#loc431 = loc(fused[#loc154, #loc155])
#loc432 = loc(fused[#loc156, #loc157])
#loc433 = loc(fused[#loc158, #loc159])
#loc434 = loc(fused[#loc160, #loc161])
#loc435 = loc(fused[#loc162, #loc163])
#loc436 = loc(fused[#loc168, #loc169])
#loc439 = loc(fused[#loc179, #loc180])
#loc440 = loc(fused[#loc183, #loc184])
#loc441 = loc(fused[#loc187, #loc186])
#loc442 = loc(fused[#loc188, #loc189])
#loc444 = loc(fused[#loc193, #loc194])
#loc445 = loc(fused[#loc195, #loc196])
#loc446 = loc(fused[#loc197, #loc198])
#loc447 = loc(fused[#loc199, #loc200])
#loc448 = loc(fused[#loc201, #loc202])
#loc449 = loc(fused[#loc203, #loc204, #loc205, #loc200])
#loc450 = loc(fused[#loc208, #loc206])
#loc451 = loc(fused[#loc209, #loc210])
#loc452 = loc(fused[#loc212, #loc211])
#loc453 = loc(fused[#loc213, #loc214])
#loc454 = loc(fused[#loc216, #loc210])
#loc455 = loc(fused[#loc221, #loc220])
#loc456 = loc(fused[#loc224, #loc225])
#loc457 = loc(fused[#loc226, #loc227])
#loc458 = loc(fused[#loc228, #loc229])
#loc459 = loc(fused[#loc232, #loc230])
#loc460 = loc(fused[#loc234, #loc233])
#loc461 = loc(fused[#loc238, #loc239])
#loc463 = loc(fused[#loc243, #loc244])
#loc464 = loc(fused[#loc245, #loc246])
#loc465 = loc(fused[#loc247, #loc248])
#loc466 = loc(fused[#loc249, #loc250])
#loc467 = loc(fused[#loc251, #loc252])
#loc468 = loc(fused[#loc254, #loc256])
#loc469 = loc(fused[#loc257, #loc258, #loc259, #loc250])
#loc470 = loc(fused[#loc262, #loc260])
#loc471 = loc(fused[#loc263, #loc264])
#loc472 = loc(fused[#loc266, #loc265])
#loc473 = loc(fused[#loc267, #loc268])
#loc474 = loc(fused[#loc270, #loc264])
#loc475 = loc(fused[#loc275, #loc274])
#loc476 = loc(fused[#loc277, #loc278])
#loc477 = loc(fused[#loc279, #loc280])
#loc478 = loc(fused[#loc281, #loc282])
#loc479 = loc(fused[#loc285, #loc283])
#loc480 = loc(fused[#loc286, #loc287])
#loc481 = loc(fused[#loc288, #loc289])
#loc482 = loc(fused[#loc290, #loc291])
#loc483 = loc(fused[#loc292, #loc293])
#loc484 = loc(fused[#loc294, #loc295])
#loc485 = loc(fused[#loc296, #loc297])
#loc486 = loc(fused[#loc302, #loc303])
#loc487 = loc(fused[#loc304, #loc305])
#loc488 = loc(fused[#loc306, #loc307])
#loc489 = loc(fused[#loc308, #loc305])
#loc490 = loc(fused[#loc310, #loc311])
#loc491 = loc(fused[#loc313, #loc314])
#loc492 = loc(fused[#loc315, #loc316])
#loc493 = loc(fused[#loc318, #loc317])
#loc494 = loc(fused[#loc321, #loc322])
#loc495 = loc(fused[#loc325, #loc326])
#loc496 = loc(fused[#loc327, #loc328])
#loc497 = loc(fused[#loc330, #loc331])
#loc498 = loc(fused[#loc332, #loc333])
#loc499 = loc(fused[#loc334, #loc335])
#loc500 = loc(fused[#loc336, #loc328])
#loc501 = loc(fused[#loc340, #loc341])
#loc502 = loc(fused[#loc344, #loc345])
#loc503 = loc(fused[#loc346, #loc347])
#loc504 = loc(fused[#loc348, #loc349])
#loc505 = loc(fused[#loc351, #loc352])
#loc506 = loc(fused[#loc353, #loc347])
#loc507 = loc(fused[#loc357, #loc355])
#loc508 = loc(fused[#loc360, #loc361])
#loc509 = loc(fused[#loc363, #loc364])
#loc510 = loc(fused[#loc365, #loc366])
#loc511 = loc(fused[#loc367, #loc364])
