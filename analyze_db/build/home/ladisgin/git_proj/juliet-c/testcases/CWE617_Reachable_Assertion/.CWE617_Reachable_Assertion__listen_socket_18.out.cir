!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc159 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":160:10)
#loc160 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":160:14)
#loc161 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":160:20)
#loc162 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":160:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc252 = loc(fused[#loc159, #loc160])
#loc253 = loc(fused[#loc161, #loc162])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc191)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc192)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc193)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc194)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc195)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc196)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc197)
  cir.func private @close(!s32i) -> !s32i loc(#loc198)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__listen_socket_18.c\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc19)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__listen_socket_18_bad()\00" : !cir.array<!s8i x 56>> : !cir.array<!s8i x 56> {alignment = 1 : i64} loc(#loc19)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc201)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc202)
    %2 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc203)
    %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc204)
    %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc205)
    %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc206)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc35)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
    cir.goto "source" loc(#loc208)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc39)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc29)
    cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc204)
    %10 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc31)
    cir.store %11, %4 : !s32i, !cir.ptr<!s32i> loc(#loc205)
    cir.scope {
      cir.do {
        %13 = cir.const #cir.int<2> : !s32i loc(#loc42)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc43)
        %15 = cir.const #cir.int<6> : !s32i loc(#loc44)
        %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc45)
        cir.store %16, %3 : !s32i, !cir.ptr<!s32i> loc(#loc210)
        cir.scope {
          %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %59 = cir.const #cir.int<1> : !s32i loc(#loc51)
          %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc51)
          %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc212)
          cir.if %61 {
            cir.break loc(#loc53)
          } loc(#loc213)
        } loc(#loc211)
        %17 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc214)
        %18 = cir.const #cir.int<0> : !s32i loc(#loc56)
        %19 = cir.const #cir.int<16> : !u64i loc(#loc215)
        cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
        %20 = cir.const #cir.int<2> : !s32i loc(#loc61)
        %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc61)
        %22 = cir.get_member %2[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc62)
        cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc217)
        %23 = cir.const #cir.int<0> : !s32i loc(#loc64)
        %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc64)
        %25 = cir.get_member %2[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc65)
        %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc66)
        cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc218)
        %27 = cir.const #cir.int<27015> : !s32i loc(#loc68)
        %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc68)
        %29 = cir.call @htons(%28) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc69)
        %30 = cir.get_member %2[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc70)
        cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc219)
        cir.scope {
          %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          %59 = cir.cast(bitcast, %2 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc221)
          %60 = cir.const #cir.int<16> : !u64i loc(#loc222)
          %61 = cir.cast(integral, %60 : !u64i), !u32i loc(#loc222)
          %62 = cir.call @bind(%58, %59, %61) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc80)
          %63 = cir.const #cir.int<1> : !s32i loc(#loc81)
          %64 = cir.unary(minus, %63) : !s32i, !s32i loc(#loc81)
          %65 = cir.cmp(eq, %62, %64) : !s32i, !cir.bool loc(#loc223)
          cir.if %65 {
            cir.break loc(#loc83)
          } loc(#loc224)
        } loc(#loc220)
        cir.scope {
          %58 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
          %59 = cir.const #cir.int<5> : !s32i loc(#loc87)
          %60 = cir.call @listen(%58, %59) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc88)
          %61 = cir.const #cir.int<1> : !s32i loc(#loc89)
          %62 = cir.unary(minus, %61) : !s32i, !s32i loc(#loc89)
          %63 = cir.cmp(eq, %60, %62) : !s32i, !cir.bool loc(#loc226)
          cir.if %63 {
            cir.break loc(#loc91)
          } loc(#loc227)
        } loc(#loc225)
        %31 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc93)
        %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc94)
        %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc95)
        cir.store %34, %4 : !s32i, !cir.ptr<!s32i> loc(#loc228)
        cir.scope {
          %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc100)
          %59 = cir.const #cir.int<1> : !s32i loc(#loc101)
          %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc101)
          %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc230)
          cir.if %61 {
            cir.break loc(#loc103)
          } loc(#loc231)
        } loc(#loc229)
        %35 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc104)
        %36 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc105)
        %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc105)
        %38 = cir.const #cir.int<3> : !s32i loc(#loc106)
        %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc106)
        %40 = cir.const #cir.int<4> : !u64i loc(#loc106)
        %41 = cir.binop(mul, %39, %40) : !u64i loc(#loc106)
        %42 = cir.const #cir.int<2> : !s32i loc(#loc106)
        %43 = cir.cast(integral, %42 : !s32i), !u64i loc(#loc106)
        %44 = cir.binop(add, %41, %43) : !u64i loc(#loc106)
        %45 = cir.const #cir.int<1> : !s32i loc(#loc107)
        %46 = cir.cast(integral, %45 : !s32i), !u64i loc(#loc107)
        %47 = cir.binop(sub, %44, %46) : !u64i loc(#loc232)
        %48 = cir.const #cir.int<0> : !s32i loc(#loc108)
        %49 = cir.call @recv(%35, %37, %47, %48) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc109)
        %50 = cir.cast(integral, %49 : !s64i), !s32i loc(#loc109)
        cir.store %50, %1 : !s32i, !cir.ptr<!s32i> loc(#loc233)
        cir.scope {
          %58 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc114)
          %59 = cir.const #cir.int<1> : !s32i loc(#loc115)
          %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc115)
          %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc235)
          %62 = cir.ternary(%61, true {
            %63 = cir.const #true loc(#loc116)
            cir.yield %63 : !cir.bool loc(#loc116)
          }, false {
            %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc117)
            %64 = cir.const #cir.int<0> : !s32i loc(#loc118)
            %65 = cir.cmp(eq, %63, %64) : !s32i, !cir.bool loc(#loc236)
            %66 = cir.ternary(%65, true {
              %67 = cir.const #true loc(#loc116)
              cir.yield %67 : !cir.bool loc(#loc116)
            }, false {
              %67 = cir.const #false loc(#loc116)
              cir.yield %67 : !cir.bool loc(#loc116)
            }) : (!cir.bool) -> !cir.bool loc(#loc116)
            cir.yield %66 : !cir.bool loc(#loc116)
          }) : (!cir.bool) -> !cir.bool loc(#loc116)
          cir.if %62 {
            cir.break loc(#loc120)
          } loc(#loc237)
        } loc(#loc234)
        %51 = cir.const #cir.int<0> : !s32i loc(#loc121)
        %52 = cir.cast(integral, %51 : !s32i), !s8i loc(#loc121)
        %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %54 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc123)
        %55 = cir.ptr_stride(%54 : !cir.ptr<!s8i>, %53 : !s32i), !cir.ptr<!s8i> loc(#loc123)
        cir.store %52, %55 : !s8i, !cir.ptr<!s8i> loc(#loc238)
        %56 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc124)
        %57 = cir.call @atoi(%56) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc125)
        cir.store %57, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
        cir.yield loc(#loc41)
      } while {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc128)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc128)
        cir.condition(%14) loc(#loc128)
      } loc(#loc209)
    } loc(#loc209)
    cir.scope {
      %13 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc131)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc132)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc132)
      %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc241)
      cir.if %16 {
        %17 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc135)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %13 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc138)
      %14 = cir.const #cir.int<1> : !s32i loc(#loc139)
      %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc139)
      %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc244)
      cir.if %16 {
        %17 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc141)
        %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc142)
      } loc(#loc245)
    } loc(#loc243)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc19)
    cir.scope {
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
        %14 = cir.const #cir.int<5> : !s32i loc(#loc19)
        %15 = cir.cmp(gt, %13, %14) : !s32i, !cir.bool loc(#loc19)
        cir.if %15 {
        } else {
          %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc19)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc19)
          %18 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc19)
          %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc19)
          %20 = cir.const #cir.int<124> : !s32i loc(#loc19)
          %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc19)
          %22 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 56>> loc(#loc19)
          %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 56>>), !cir.ptr<!s8i> loc(#loc19)
          cir.call @__assert_fail(%17, %19, %21, %23) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc19)
        } loc(#loc19)
      } loc(#loc19)
    } loc(#loc19)
    cir.return loc(#loc21)
  } loc(#loc200)
  cir.func no_proto @CWE617_Reachable_Assertion__listen_socket_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc145)
    cir.return loc(#loc144)
  } loc(#loc246)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc248)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc249)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc250)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc154)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc156)
  cir.func @main(%arg0: !s32i loc(fused[#loc159, #loc160]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc161, #loc162])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc252)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc253)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc158)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc163)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc164)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc165)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc165)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc166)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc153)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc153)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
    %8 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_18_good : !cir.ptr<!cir.func<!void ()>> loc(#loc254)
    cir.call @CWE617_Reachable_Assertion__listen_socket_18_good() : () -> () loc(#loc168)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc154)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc154)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc170)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc155)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc155)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc171)
    %13 = cir.get_global @CWE617_Reachable_Assertion__listen_socket_18_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc255)
    cir.call @CWE617_Reachable_Assertion__listen_socket_18_bad() : () -> () loc(#loc172)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc156)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc156)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc174)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc175)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc256)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc256)
    cir.return %17 : !s32i loc(#loc256)
  } loc(#loc251)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc177)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc258)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc182)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc183)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc259)
    cir.goto "source" loc(#loc260)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc187)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc188)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc189)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc188)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc261)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc177)
    cir.scope {
      cir.scope {
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc177)
        %8 = cir.const #cir.int<5> : !s32i loc(#loc177)
        %9 = cir.cmp(gt, %7, %8) : !s32i, !cir.bool loc(#loc177)
        cir.if %9 {
        } else {
          %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc177)
          %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc177)
          %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc177)
          %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc177)
          %14 = cir.const #cir.int<142> : !s32i loc(#loc177)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc177)
          %16 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc177)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc177)
          cir.call @__assert_fail(%11, %13, %15, %17) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc177)
        } loc(#loc177)
      } loc(#loc177)
    } loc(#loc177)
    cir.return loc(#loc179)
  } loc(#loc257)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__listen_socket_18.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("/usr/include/assert.h":67:1)
#loc18 = loc("/usr/include/assert.h":69:43)
#loc19 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":124:5)
#loc20 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":47:1)
#loc21 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":125:1)
#loc22 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":49:5)
#loc23 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":49:9)
#loc24 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":59:9)
#loc25 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":59:13)
#loc26 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":60:9)
#loc27 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":60:28)
#loc28 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":61:9)
#loc29 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":61:31)
#loc30 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":62:9)
#loc31 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":62:31)
#loc32 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":63:9)
#loc33 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":63:41)
#loc34 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":51:13)
#loc35 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":51:12)
#loc36 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":51:5)
#loc37 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":52:5)
#loc38 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":52:10)
#loc39 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":53:1)
#loc40 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":64:9)
#loc41 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":107:17)
#loc42 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:35)
#loc43 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:44)
#loc44 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:57)
#loc45 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:28)
#loc46 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:13)
#loc47 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":74:68)
#loc48 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":75:13)
#loc49 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":78:13)
#loc50 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":75:17)
#loc51 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":75:33)
#loc52 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":76:13)
#loc53 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":77:17)
#loc54 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:20)
#loc55 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:21)
#loc56 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:30)
#loc57 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:33)
#loc58 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:47)
#loc59 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:13)
#loc60 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":79:48)
#loc61 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":80:34)
#loc62 = loc("/usr/include/netinet/in.h":249:5)
#loc63 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":80:13)
#loc64 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":81:39)
#loc65 = loc("/usr/include/netinet/in.h":251:20)
#loc66 = loc("/usr/include/netinet/in.h":33:15)
#loc67 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":81:13)
#loc68 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":82:38)
#loc69 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":82:32)
#loc70 = loc("/usr/include/netinet/in.h":250:15)
#loc71 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":82:13)
#loc72 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":82:46)
#loc73 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:13)
#loc74 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":86:13)
#loc75 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:22)
#loc76 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:54)
#loc77 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:55)
#loc78 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:64)
#loc79 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:78)
#loc80 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:17)
#loc81 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":83:84)
#loc82 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":84:13)
#loc83 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":85:17)
#loc84 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":87:13)
#loc85 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":90:13)
#loc86 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":87:24)
#loc87 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":87:38)
#loc88 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":87:17)
#loc89 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":87:57)
#loc90 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":88:13)
#loc91 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":89:17)
#loc92 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:35)
#loc93 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:49)
#loc94 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:55)
#loc95 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:28)
#loc96 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:13)
#loc97 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":91:59)
#loc98 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":92:13)
#loc99 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":95:13)
#loc100 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":92:17)
#loc101 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":92:33)
#loc102 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":93:13)
#loc103 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":94:17)
#loc104 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:31)
#loc105 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:45)
#loc106 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:58)
#loc107 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:76)
#loc108 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:79)
#loc109 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:26)
#loc110 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:13)
#loc111 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":97:80)
#loc112 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:13)
#loc113 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":101:13)
#loc114 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:17)
#loc115 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:31)
#loc116 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:44)
#loc117 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:47)
#loc118 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":98:61)
#loc119 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":99:13)
#loc120 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":100:17)
#loc121 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":103:39)
#loc122 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":103:25)
#loc123 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":103:13)
#loc124 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":105:25)
#loc125 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":105:20)
#loc126 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":105:13)
#loc127 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":105:36)
#loc128 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":107:16)
#loc129 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":108:9)
#loc130 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":111:9)
#loc131 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":108:13)
#loc132 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":108:29)
#loc133 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":109:9)
#loc134 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":110:26)
#loc135 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":110:13)
#loc136 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":112:9)
#loc137 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":115:9)
#loc138 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":112:13)
#loc139 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":112:29)
#loc140 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":113:9)
#loc141 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":114:26)
#loc142 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":114:13)
#loc143 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":145:1)
#loc144 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":148:1)
#loc145 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":147:5)
#loc146 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":147:13)
#loc147 = loc("/usr/include/stdlib.h":575:1)
#loc148 = loc("/usr/include/stdlib.h":575:41)
#loc149 = loc("/usr/include/time.h":76:1)
#loc150 = loc("/usr/include/time.h":76:38)
#loc151 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc152 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc153 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":165:15)
#loc154 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":167:15)
#loc155 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":170:15)
#loc156 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":172:15)
#loc157 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":160:1)
#loc158 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":175:1)
#loc163 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":161:1)
#loc164 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":163:27)
#loc165 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":163:22)
#loc166 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":163:5)
#loc167 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":165:5)
#loc168 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":166:5)
#loc169 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":166:55)
#loc170 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":167:5)
#loc171 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":170:5)
#loc172 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":171:5)
#loc173 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":171:54)
#loc174 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":172:5)
#loc175 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":174:12)
#loc176 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":174:5)
#loc177 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":142:5)
#loc178 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":132:1)
#loc179 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":143:1)
#loc180 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":134:5)
#loc181 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":134:9)
#loc182 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":136:13)
#loc183 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":136:12)
#loc184 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":136:5)
#loc185 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":137:5)
#loc186 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":137:10)
#loc187 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":138:1)
#loc188 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":140:12)
#loc189 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":140:25)
#loc190 = loc("CWE617_Reachable_Assertion__listen_socket_18.c":140:5)
#loc191 = loc(fused[#loc1, #loc2])
#loc192 = loc(fused[#loc3, #loc4])
#loc193 = loc(fused[#loc5, #loc6])
#loc194 = loc(fused[#loc7, #loc8])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc15, #loc16])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc20, #loc21])
#loc201 = loc(fused[#loc22, #loc23])
#loc202 = loc(fused[#loc24, #loc25])
#loc203 = loc(fused[#loc26, #loc27])
#loc204 = loc(fused[#loc28, #loc29])
#loc205 = loc(fused[#loc30, #loc31])
#loc206 = loc(fused[#loc32, #loc33])
#loc207 = loc(fused[#loc36, #loc34])
#loc208 = loc(fused[#loc37, #loc38])
#loc209 = loc(fused[#loc40, #loc41])
#loc210 = loc(fused[#loc46, #loc47])
#loc211 = loc(fused[#loc48, #loc49])
#loc212 = loc(fused[#loc50, #loc51])
#loc213 = loc(fused[#loc52, #loc49])
#loc214 = loc(fused[#loc54, #loc55])
#loc215 = loc(fused[#loc57, #loc58])
#loc216 = loc(fused[#loc59, #loc60])
#loc217 = loc(fused[#loc63, #loc61])
#loc218 = loc(fused[#loc67, #loc64])
#loc219 = loc(fused[#loc71, #loc72])
#loc220 = loc(fused[#loc73, #loc74])
#loc221 = loc(fused[#loc76, #loc77])
#loc222 = loc(fused[#loc78, #loc79])
#loc223 = loc(fused[#loc80, #loc81])
#loc224 = loc(fused[#loc82, #loc74])
#loc225 = loc(fused[#loc84, #loc85])
#loc226 = loc(fused[#loc88, #loc89])
#loc227 = loc(fused[#loc90, #loc85])
#loc228 = loc(fused[#loc96, #loc97])
#loc229 = loc(fused[#loc98, #loc99])
#loc230 = loc(fused[#loc100, #loc101])
#loc231 = loc(fused[#loc102, #loc99])
#loc232 = loc(fused[#loc106, #loc107])
#loc233 = loc(fused[#loc110, #loc111])
#loc234 = loc(fused[#loc112, #loc113])
#loc235 = loc(fused[#loc114, #loc115])
#loc236 = loc(fused[#loc117, #loc118])
#loc237 = loc(fused[#loc119, #loc113])
#loc238 = loc(fused[#loc123, #loc121])
#loc239 = loc(fused[#loc126, #loc127])
#loc240 = loc(fused[#loc129, #loc130])
#loc241 = loc(fused[#loc131, #loc132])
#loc242 = loc(fused[#loc133, #loc130])
#loc243 = loc(fused[#loc136, #loc137])
#loc244 = loc(fused[#loc138, #loc139])
#loc245 = loc(fused[#loc140, #loc137])
#loc246 = loc(fused[#loc143, #loc144])
#loc247 = loc(fused[#loc145, #loc146])
#loc248 = loc(fused[#loc147, #loc148])
#loc249 = loc(fused[#loc149, #loc150])
#loc250 = loc(fused[#loc151, #loc152])
#loc251 = loc(fused[#loc157, #loc158])
#loc254 = loc(fused[#loc168, #loc169])
#loc255 = loc(fused[#loc172, #loc173])
#loc256 = loc(fused[#loc176, #loc175])
#loc257 = loc(fused[#loc178, #loc179])
#loc258 = loc(fused[#loc180, #loc181])
#loc259 = loc(fused[#loc184, #loc182])
#loc260 = loc(fused[#loc185, #loc186])
#loc261 = loc(fused[#loc190, #loc189])
