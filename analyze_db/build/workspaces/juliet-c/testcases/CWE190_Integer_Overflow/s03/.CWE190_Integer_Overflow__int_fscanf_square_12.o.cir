!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc174)
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc175)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc177)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc10)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc13)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc180)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc181)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc183)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc183)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc27)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc176)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc7)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc7)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc27)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc29)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
      } loc(#loc184)
    } loc(#loc182)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc187)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc187)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc33)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc33)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc190)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc42)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc190)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc43)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc44)
        } loc(#loc189)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc47)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc48)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc48)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc48)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc48)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc192)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
            %14 = cir.abs %13 poison : !s32i loc(#loc51)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc51)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc52)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc53)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc53)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc52)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc52)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc193)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc49)
              cir.yield %23 : !cir.bool loc(#loc49)
            }, false {
              %23 = cir.const #false loc(#loc49)
              cir.yield %23 : !cir.bool loc(#loc49)
            }) : (!cir.bool) -> !cir.bool loc(#loc49)
            cir.yield %22 : !cir.bool loc(#loc49)
          }, false {
            %13 = cir.const #false loc(#loc49)
            cir.yield %13 : !cir.bool loc(#loc49)
          }) : (!cir.bool) -> !cir.bool loc(#loc49)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc195)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc60)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc195)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc61)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc62)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc13)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc13)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc63)
          } loc(#loc194)
        } loc(#loc191)
      } loc(#loc188)
    } loc(#loc186)
    cir.return loc(#loc15)
  } loc(#loc179)
  cir.func no_proto @CWE190_Integer_Overflow__int_fscanf_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc197)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc66)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc198)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc68)
    cir.return loc(#loc65)
  } loc(#loc196)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc200)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc74)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc203)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc203)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc78)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc78)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc83)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc176)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc84)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc85)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc85)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc83)
      } else {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc86)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc176)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc88)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc88)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc86)
      } loc(#loc204)
    } loc(#loc202)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc206)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc206)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc91)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc91)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc98)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc99)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc99)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc99)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc99)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc209)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc101)
            %14 = cir.abs %13 poison : !s32i loc(#loc102)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc102)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc103)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc104)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc104)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc103)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc103)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc210)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc100)
              cir.yield %23 : !cir.bool loc(#loc100)
            }, false {
              %23 = cir.const #false loc(#loc100)
              cir.yield %23 : !cir.bool loc(#loc100)
            }) : (!cir.bool) -> !cir.bool loc(#loc100)
            cir.yield %22 : !cir.bool loc(#loc100)
          }, false {
            %13 = cir.const #false loc(#loc100)
            cir.yield %13 : !cir.bool loc(#loc100)
          }) : (!cir.bool) -> !cir.bool loc(#loc100)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc111)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc212)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc112)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc113)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc114)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc114)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc115)
          } loc(#loc211)
        } loc(#loc208)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc118)
          %7 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc119)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc119)
          %11 = cir.cmp(gt, %6, %10) : !s32i, !cir.bool loc(#loc214)
          %12 = cir.ternary(%11, true {
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %14 = cir.abs %13 poison : !s32i loc(#loc122)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc122)
            %16 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc123)
            %17 = cir.const #cir.int<2147483647> : !s32i loc(#loc124)
            %18 = cir.cast(int_to_float, %17 : !s32i), !cir.double loc(#loc124)
            %19 = cir.call @sqrt(%18) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc123)
            %20 = cir.cast(float_to_int, %19 : !cir.double), !s64i loc(#loc123)
            %21 = cir.cmp(lt, %15, %20) : !s64i, !cir.bool loc(#loc215)
            %22 = cir.ternary(%21, true {
              %23 = cir.const #true loc(#loc120)
              cir.yield %23 : !cir.bool loc(#loc120)
            }, false {
              %23 = cir.const #false loc(#loc120)
              cir.yield %23 : !cir.bool loc(#loc120)
            }) : (!cir.bool) -> !cir.bool loc(#loc120)
            cir.yield %22 : !cir.bool loc(#loc120)
          }, false {
            %13 = cir.const #false loc(#loc120)
            cir.yield %13 : !cir.bool loc(#loc120)
          }) : (!cir.bool) -> !cir.bool loc(#loc120)
          cir.if %12 {
            %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc131)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc131)
            cir.store %16, %13 : !s32i, !cir.ptr<!s32i> loc(#loc217)
            %17 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc133)
          } else {
            %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc134)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc134)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc135)
          } loc(#loc216)
        } loc(#loc213)
      } loc(#loc207)
    } loc(#loc205)
    cir.return loc(#loc71)
  } loc(#loc199)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc219)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc140)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc222)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc222)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc144)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc144)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc149)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc151)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc225)
      } loc(#loc223)
    } loc(#loc221)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc227)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc227)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc230)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc164)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc230)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc165)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc166)
        } loc(#loc229)
      } else {
        cir.scope {
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc170)
          %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc171)
          cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc232)
          %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc172)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc173)
        } loc(#loc231)
      } loc(#loc228)
    } loc(#loc226)
    cir.return loc(#loc137)
  } loc(#loc218)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":463:1)
#loc4 = loc("/usr/include/stdio.h":465:33)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":32:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":57:23)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":24:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":60:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":26:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":26:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":28:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":28:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":29:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":38:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":29:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":29:33)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":30:5)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":33:5)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":32:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":32:16)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":37:16)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":37:9)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":39:5)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":59:5)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":39:8)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":39:33)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":40:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":46:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":48:5)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":41:9)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":45:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":43:13)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":43:33)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":43:26)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":44:26)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":44:13)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:9)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":58:9)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:13)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:20)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:28)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:35)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:31)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:49)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:62)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":50:69)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":51:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":54:9)
#loc57 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":56:9)
#loc58 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":52:13)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":52:33)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":52:26)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":53:26)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":53:13)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":57:13)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":148:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":152:1)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":150:5)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":150:13)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":151:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":151:13)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":69:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":110:1)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":71:5)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":71:9)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":73:12)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":73:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":74:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":83:5)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":74:8)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":74:33)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":75:5)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":78:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":80:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":77:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":77:16)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":77:23)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":82:9)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":82:16)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":82:23)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":84:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":109:5)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":84:8)
#loc92 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":84:33)
#loc93 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":85:5)
#loc94 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":96:5)
#loc95 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":98:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:9)
#loc97 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":95:9)
#loc98 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:13)
#loc99 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:20)
#loc100 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:28)
#loc101 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:35)
#loc102 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:31)
#loc103 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:49)
#loc104 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:62)
#loc105 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":87:69)
#loc106 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":88:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":91:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":93:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":89:13)
#loc110 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":89:33)
#loc111 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":89:26)
#loc112 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":90:26)
#loc113 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":90:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":94:23)
#loc115 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":94:13)
#loc116 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":108:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:13)
#loc119 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:20)
#loc120 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:28)
#loc121 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:35)
#loc122 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:31)
#loc123 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:49)
#loc124 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:62)
#loc125 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":100:69)
#loc126 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":101:9)
#loc127 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":104:9)
#loc128 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":106:9)
#loc129 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":102:13)
#loc130 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":102:33)
#loc131 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":102:26)
#loc132 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":103:26)
#loc133 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":103:13)
#loc134 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":107:23)
#loc135 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":107:13)
#loc136 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":115:1)
#loc137 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":146:1)
#loc138 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":117:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":117:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":119:12)
#loc141 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":119:5)
#loc142 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":120:5)
#loc143 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":129:5)
#loc144 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":120:8)
#loc145 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":120:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":121:5)
#loc147 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":124:5)
#loc148 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":126:5)
#loc149 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":123:16)
#loc150 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":123:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":128:16)
#loc152 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":128:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":130:5)
#loc154 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":145:5)
#loc155 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":130:8)
#loc156 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":130:33)
#loc157 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":131:5)
#loc158 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":137:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":139:5)
#loc160 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":132:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":136:9)
#loc162 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":134:13)
#loc163 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":134:33)
#loc164 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":134:26)
#loc165 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":135:26)
#loc166 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":135:13)
#loc167 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":140:9)
#loc168 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":144:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":142:13)
#loc170 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":142:33)
#loc171 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":142:26)
#loc172 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":143:26)
#loc173 = loc("CWE190_Integer_Overflow__int_fscanf_square_12.c":143:13)
#loc174 = loc(fused[#loc1, #loc2])
#loc175 = loc(fused[#loc3, #loc4])
#loc176 = loc(fused[#loc5, #loc6])
#loc177 = loc(fused[#loc8, #loc9])
#loc178 = loc(fused[#loc11, #loc12])
#loc179 = loc(fused[#loc14, #loc15])
#loc180 = loc(fused[#loc16, #loc17])
#loc181 = loc(fused[#loc19, #loc18])
#loc182 = loc(fused[#loc20, #loc21])
#loc183 = loc(fused[#loc22, #loc23])
#loc184 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc185 = loc(fused[#loc30, #loc29])
#loc186 = loc(fused[#loc31, #loc32])
#loc187 = loc(fused[#loc33, #loc34])
#loc188 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc189 = loc(fused[#loc38, #loc39])
#loc190 = loc(fused[#loc40, #loc41])
#loc191 = loc(fused[#loc45, #loc46])
#loc192 = loc(fused[#loc47, #loc48])
#loc193 = loc(fused[#loc51, #loc54])
#loc194 = loc(fused[#loc55, #loc56, #loc57, #loc46])
#loc195 = loc(fused[#loc58, #loc59])
#loc196 = loc(fused[#loc64, #loc65])
#loc197 = loc(fused[#loc66, #loc67])
#loc198 = loc(fused[#loc68, #loc69])
#loc199 = loc(fused[#loc70, #loc71])
#loc200 = loc(fused[#loc72, #loc73])
#loc201 = loc(fused[#loc75, #loc74])
#loc202 = loc(fused[#loc76, #loc77])
#loc203 = loc(fused[#loc78, #loc79])
#loc204 = loc(fused[#loc80, #loc81, #loc82, #loc77])
#loc205 = loc(fused[#loc89, #loc90])
#loc206 = loc(fused[#loc91, #loc92])
#loc207 = loc(fused[#loc93, #loc94, #loc95, #loc90])
#loc208 = loc(fused[#loc96, #loc97])
#loc209 = loc(fused[#loc98, #loc99])
#loc210 = loc(fused[#loc102, #loc105])
#loc211 = loc(fused[#loc106, #loc107, #loc108, #loc97])
#loc212 = loc(fused[#loc109, #loc110])
#loc213 = loc(fused[#loc116, #loc117])
#loc214 = loc(fused[#loc118, #loc119])
#loc215 = loc(fused[#loc122, #loc125])
#loc216 = loc(fused[#loc126, #loc127, #loc128, #loc117])
#loc217 = loc(fused[#loc129, #loc130])
#loc218 = loc(fused[#loc136, #loc137])
#loc219 = loc(fused[#loc138, #loc139])
#loc220 = loc(fused[#loc141, #loc140])
#loc221 = loc(fused[#loc142, #loc143])
#loc222 = loc(fused[#loc144, #loc145])
#loc223 = loc(fused[#loc146, #loc147, #loc148, #loc143])
#loc224 = loc(fused[#loc150, #loc149])
#loc225 = loc(fused[#loc152, #loc151])
#loc226 = loc(fused[#loc153, #loc154])
#loc227 = loc(fused[#loc155, #loc156])
#loc228 = loc(fused[#loc157, #loc158, #loc159, #loc154])
#loc229 = loc(fused[#loc160, #loc161])
#loc230 = loc(fused[#loc162, #loc163])
#loc231 = loc(fused[#loc167, #loc168])
#loc232 = loc(fused[#loc169, #loc170])
