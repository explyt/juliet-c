!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc95)
  cir.func private @printLongLongLine(!s64i) loc(#loc96)
  cir.func @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc99)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc10)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc13)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc13)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc13)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc13)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc13)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc13)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc13)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc13)
      cir.yield %30 : !u64i loc(#loc13)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc13)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc13)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc13)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc13)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc13)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc13)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc13)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc13)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc13)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc13)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc13)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc13)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc13)
      cir.yield %34 : !u64i loc(#loc13)
    }) : (!cir.bool) -> !u64i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc13)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc103)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc18)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc18)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc103)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc21)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc22)
        %15 = cir.cmp(lt, %12, %14) : !s64i, !cir.bool loc(#loc105)
        cir.if %15 {
          %16 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc107)
          %17 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          %18 = cir.const #cir.int<2> : !s32i loc(#loc25)
          %19 = cir.cast(integral, %18 : !s32i), !s64i loc(#loc25)
          %20 = cir.binop(mul, %17, %19) nsw : !s64i loc(#loc26)
          cir.store %20, %16 : !s64i, !cir.ptr<!s64i> loc(#loc107)
          %21 = cir.load %16 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          cir.call @printLongLongLine(%21) : (!s64i) -> () loc(#loc28)
        } loc(#loc106)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc6)
  } loc(#loc97)
  cir.func internal private @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc110)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc34)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc35)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc37)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc38)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc38)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    cir.scope {
      %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc114)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
      %8 = cir.load %7 : !cir.ptr<!s64i>, !s64i loc(#loc43)
      cir.store %8, %6 : !s64i, !cir.ptr<!s64i> loc(#loc114)
      cir.scope {
        %9 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc46)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc47)
        %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc47)
        %12 = cir.cmp(lt, %9, %11) : !s64i, !cir.bool loc(#loc116)
        cir.if %12 {
          %13 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc118)
          %14 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc51)
          %15 = cir.const #cir.int<2> : !s32i loc(#loc50)
          %16 = cir.cast(integral, %15 : !s32i), !s64i loc(#loc50)
          %17 = cir.binop(mul, %14, %16) nsw : !s64i loc(#loc51)
          cir.store %17, %13 : !s64i, !cir.ptr<!s64i> loc(#loc118)
          %18 = cir.load %13 : !cir.ptr<!s64i>, !s64i loc(#loc52)
          cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc53)
        } loc(#loc117)
      } loc(#loc115)
    } loc(#loc113)
    cir.return loc(#loc30)
  } loc(#loc108)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc56)
  cir.func internal private @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc122)
    cir.store %0, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc62)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc63)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc65)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc65)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc65)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc65)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc65)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc65)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc65)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc65)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc65)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc65)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc65)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc65)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc65)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc65)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc65)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc65)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc65)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc65)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc65)
      cir.yield %30 : !u64i loc(#loc65)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc65)
      %11 = cir.const #cir.int<60> : !s32i loc(#loc65)
      %12 = cir.shift(left, %10 : !u64i, %11 : !s32i) -> !u64i loc(#loc65)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc65)
      %15 = cir.const #cir.int<45> : !s32i loc(#loc65)
      %16 = cir.shift(left, %14 : !u64i, %15 : !s32i) -> !u64i loc(#loc65)
      %17 = cir.binop(xor, %12, %16) : !u64i loc(#loc65)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %19 = cir.cast(integral, %18 : !s32i), !u64i loc(#loc65)
      %20 = cir.const #cir.int<30> : !s32i loc(#loc65)
      %21 = cir.shift(left, %19 : !u64i, %20 : !s32i) -> !u64i loc(#loc65)
      %22 = cir.binop(xor, %17, %21) : !u64i loc(#loc65)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc65)
      %25 = cir.const #cir.int<15> : !s32i loc(#loc65)
      %26 = cir.shift(left, %24 : !u64i, %25 : !s32i) -> !u64i loc(#loc65)
      %27 = cir.binop(xor, %22, %26) : !u64i loc(#loc65)
      %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
      %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc65)
      %30 = cir.binop(xor, %27, %29) : !u64i loc(#loc65)
      %31 = cir.unary(minus, %30) : !u64i, !u64i loc(#loc65)
      %32 = cir.const #cir.int<1> : !s32i loc(#loc65)
      %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc65)
      %34 = cir.binop(sub, %31, %33) : !u64i loc(#loc65)
      cir.yield %34 : !u64i loc(#loc65)
    }) : (!cir.bool) -> !u64i loc(#loc65)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc65)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    cir.scope {
      %9 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc126)
      %10 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc70)
      %11 = cir.load %10 : !cir.ptr<!s64i>, !s64i loc(#loc70)
      cir.store %11, %9 : !s64i, !cir.ptr<!s64i> loc(#loc126)
      cir.scope {
        %12 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc73)
        %13 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc74)
        %15 = cir.cmp(lt, %12, %14) : !s64i, !cir.bool loc(#loc128)
        cir.if %15 {
          cir.scope {
            %16 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc78)
            %17 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc79)
            %18 = cir.unary(minus, %17) nsw : !s64i, !s64i loc(#loc79)
            %19 = cir.const #cir.int<1> : !s64i loc(#loc79)
            %20 = cir.binop(sub, %18, %19) nsw : !s64i loc(#loc79)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc80)
            %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc80)
            %23 = cir.binop(div, %20, %22) : !s64i loc(#loc131)
            %24 = cir.cmp(gt, %16, %23) : !s64i, !cir.bool loc(#loc132)
            cir.if %24 {
              %25 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc134)
              %26 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc87)
              %27 = cir.const #cir.int<2> : !s32i loc(#loc86)
              %28 = cir.cast(integral, %27 : !s32i), !s64i loc(#loc86)
              %29 = cir.binop(mul, %26, %28) nsw : !s64i loc(#loc87)
              cir.store %29, %25 : !s64i, !cir.ptr<!s64i> loc(#loc134)
              %30 = cir.load %25 : !cir.ptr<!s64i>, !s64i loc(#loc88)
              cir.call @printLongLongLine(%30) : (!s64i) -> () loc(#loc89)
            } else {
              %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc56)
              %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc56)
              cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc90)
            } loc(#loc133)
          } loc(#loc130)
        } loc(#loc129)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc58)
  } loc(#loc120)
  cir.func @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_33L7goodG2BEv() : () -> () loc(#loc93)
    cir.call @_ZN50CWE191_Integer_Underflow__int64_t_rand_multiply_33L7goodB2GEv() : () -> () loc(#loc94)
    cir.return loc(#loc92)
  } loc(#loc135)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":41:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":27:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":28:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":28:24)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":29:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":29:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":31:21)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":31:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":32:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":40:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":33:9)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":33:24)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":34:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":39:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":34:12)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":34:19)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":35:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":37:13)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":37:37)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":37:30)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":38:31)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":38:13)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":48:1)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":64:1)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":50:5)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":50:13)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":51:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":51:24)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":52:12)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":52:5)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":54:13)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":54:12)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":54:5)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":55:5)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":63:5)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":56:9)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":56:24)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":57:9)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":62:9)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":57:12)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":57:19)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":58:9)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":60:13)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":60:37)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":60:30)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":61:31)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":61:13)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc55 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":86:27)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":67:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":90:1)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":69:5)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":69:13)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":70:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":70:24)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":71:12)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":71:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":73:21)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":73:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":74:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":89:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":75:9)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":75:24)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":76:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":88:9)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":76:12)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":76:19)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":77:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":79:13)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":87:13)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":79:17)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":79:25)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":79:35)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":79:36)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":80:13)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":83:13)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":85:13)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":81:17)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":81:41)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":81:34)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":82:35)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":82:17)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":86:17)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":92:1)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":96:1)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":94:5)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_multiply_33.cpp":95:5)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc9, #loc10])
#loc100 = loc(fused[#loc12, #loc11])
#loc101 = loc(fused[#loc14, #loc13])
#loc102 = loc(fused[#loc15, #loc16])
#loc103 = loc(fused[#loc17, #loc18])
#loc104 = loc(fused[#loc19, #loc20])
#loc105 = loc(fused[#loc21, #loc22])
#loc106 = loc(fused[#loc23, #loc20])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc29, #loc30])
#loc109 = loc(fused[#loc31, #loc32])
#loc110 = loc(fused[#loc33, #loc34])
#loc111 = loc(fused[#loc36, #loc35])
#loc112 = loc(fused[#loc39, #loc37])
#loc113 = loc(fused[#loc40, #loc41])
#loc114 = loc(fused[#loc42, #loc43])
#loc115 = loc(fused[#loc44, #loc45])
#loc116 = loc(fused[#loc46, #loc47])
#loc117 = loc(fused[#loc48, #loc45])
#loc118 = loc(fused[#loc49, #loc50])
#loc119 = loc(fused[#loc54, #loc55])
#loc120 = loc(fused[#loc57, #loc58])
#loc121 = loc(fused[#loc59, #loc60])
#loc122 = loc(fused[#loc61, #loc62])
#loc123 = loc(fused[#loc64, #loc63])
#loc124 = loc(fused[#loc66, #loc65])
#loc125 = loc(fused[#loc67, #loc68])
#loc126 = loc(fused[#loc69, #loc70])
#loc127 = loc(fused[#loc71, #loc72])
#loc128 = loc(fused[#loc73, #loc74])
#loc129 = loc(fused[#loc75, #loc72])
#loc130 = loc(fused[#loc76, #loc77])
#loc131 = loc(fused[#loc79, #loc80])
#loc132 = loc(fused[#loc78, #loc81])
#loc133 = loc(fused[#loc82, #loc83, #loc84, #loc77])
#loc134 = loc(fused[#loc85, #loc86])
#loc135 = loc(fused[#loc91, #loc92])
