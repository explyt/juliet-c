!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_05.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @staticTrue = #cir.int<1> : !s32i {alignment = 4 : i64} loc(#loc229)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc230)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc231)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc232)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc233)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc11)
  cir.func private @printIntLine(!s32i) loc(#loc234)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_05_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc236)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc237)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc241)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc241)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc241)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc30)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc31)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc31)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc31)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc31)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc31)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc31)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc31)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc31)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc231)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc32)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc33)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc34)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc34)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc243)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc38)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc39)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc11)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc11)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc42)
            } loc(#loc244)
          } loc(#loc242)
        } loc(#loc240)
      } loc(#loc239)
    } loc(#loc238)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc249)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc51)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc249)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
        } loc(#loc248)
      } loc(#loc247)
    } loc(#loc246)
    cir.return loc(#loc15)
  } loc(#loc235)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_05_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc251)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc252)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc253)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc254)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc250)
  cir.global "private" internal dsolocal @staticFalse = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc66)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc257)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc77)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc77)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc262)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc262)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc262)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc85)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc86)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc86)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc86)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc86)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc86)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc86)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc86)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc86)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc231)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc87)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc88)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc89)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc89)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc264)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc94)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc266)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc97)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc97)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc98)
            } loc(#loc265)
          } loc(#loc263)
        } loc(#loc261)
      } loc(#loc260)
    } loc(#loc259)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc255)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc101)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc101)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc66)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc66)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc105)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc109)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc109)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc109)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc109)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc270)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
            %13 = cir.abs %12 poison : !s32i loc(#loc112)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc112)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc113)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc114)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc113)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc113)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc271)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc110)
              cir.yield %22 : !cir.bool loc(#loc110)
            }, false {
              %22 = cir.const #false loc(#loc110)
              cir.yield %22 : !cir.bool loc(#loc110)
            }) : (!cir.bool) -> !cir.bool loc(#loc110)
            cir.yield %21 : !cir.bool loc(#loc110)
          }, false {
            %12 = cir.const #false loc(#loc110)
            cir.yield %12 : !cir.bool loc(#loc110)
          }) : (!cir.bool) -> !cir.bool loc(#loc110)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc273)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc121)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc273)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc122)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc123)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc124)
          } loc(#loc272)
        } loc(#loc269)
      } loc(#loc268)
    } loc(#loc267)
    cir.return loc(#loc70)
  } loc(#loc256)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc275)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc276)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc133)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc280)
          %6 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc280)
          cir.store %6, %5 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc280)
          cir.scope {
            %7 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc141)
            %8 = cir.const #cir.int<3> : !s32i loc(#loc142)
            %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc142)
            %10 = cir.const #cir.int<4> : !u64i loc(#loc142)
            %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc142)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc142)
            %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc142)
            %14 = cir.binop(add, %11, %13) : !u64i loc(#loc142)
            %15 = cir.cast(integral, %14 : !u64i), !s32i loc(#loc142)
            %16 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc231)
            %17 = cir.load %16 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc143)
            %18 = cir.call @fgets(%7, %15, %17) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc144)
            %19 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc145)
            %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc145)
            %21 = cir.cmp(ne, %18, %20) : !cir.ptr<!s8i>, !cir.bool loc(#loc282)
            cir.if %21 {
              %22 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc149)
              %23 = cir.call @atoi(%22) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc150)
              cir.store %23, %0 : !s32i, !cir.ptr<!s32i> loc(#loc284)
            } else {
              %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc153)
              %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc153)
              cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc154)
            } loc(#loc283)
          } loc(#loc281)
        } loc(#loc279)
      } loc(#loc278)
    } loc(#loc277)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc157)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc157)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
          %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc162)
          %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc162)
          %8 = cir.const #cir.int<1> : !s32i loc(#loc162)
          %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc162)
          %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc288)
          %11 = cir.ternary(%10, true {
            %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
            %13 = cir.abs %12 poison : !s32i loc(#loc165)
            %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc165)
            %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc166)
            %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc167)
            %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc167)
            %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc166)
            %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc166)
            %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc289)
            %21 = cir.ternary(%20, true {
              %22 = cir.const #true loc(#loc163)
              cir.yield %22 : !cir.bool loc(#loc163)
            }, false {
              %22 = cir.const #false loc(#loc163)
              cir.yield %22 : !cir.bool loc(#loc163)
            }) : (!cir.bool) -> !cir.bool loc(#loc163)
            cir.yield %21 : !cir.bool loc(#loc163)
          }, false {
            %12 = cir.const #false loc(#loc163)
            cir.yield %12 : !cir.bool loc(#loc163)
          }) : (!cir.bool) -> !cir.bool loc(#loc163)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc291)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc174)
            %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc173)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc174)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc291)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc175)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc176)
          } else {
            %12 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc177)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc177)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc178)
          } loc(#loc290)
        } loc(#loc287)
      } loc(#loc286)
    } loc(#loc285)
    cir.return loc(#loc126)
  } loc(#loc274)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc293)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc183)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    cir.scope {
      %2 = cir.get_global @staticFalse : !cir.ptr<!s32i> loc(#loc255)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc187)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc187)
      cir.if %4 {
        %5 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc191)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc191)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc192)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc193)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc297)
      } loc(#loc296)
    } loc(#loc295)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc197)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc301)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc202)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc203)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc301)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc204)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc205)
        } loc(#loc300)
      } loc(#loc299)
    } loc(#loc298)
    cir.return loc(#loc180)
  } loc(#loc292)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc303)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc210)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc304)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc214)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc214)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc216)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
      } loc(#loc306)
    } loc(#loc305)
    cir.scope {
      %2 = cir.get_global @staticTrue : !cir.ptr<!s32i> loc(#loc229)
      %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc220)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc220)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc311)
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc225)
          %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc226)
          cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc311)
          %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc227)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc228)
        } loc(#loc310)
      } loc(#loc309)
    } loc(#loc308)
    cir.return loc(#loc207)
  } loc(#loc302)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_05.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":27:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":27:25)
#loc3 = loc("/usr/include/stdio.h":654:1)
#loc4 = loc("/usr/include/stdio.h":655:59)
#loc5 = loc("/usr/include/stdio.h":149:1)
#loc6 = loc("/usr/include/stdio.h":149:14)
#loc7 = loc("/usr/include/stdlib.h":105:1)
#loc8 = loc("/usr/include/stdlib.h":106:33)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":49:27)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":32:1)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":61:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":34:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":36:12)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":36:5)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":52:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":37:8)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":38:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":39:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":51:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":40:13)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":40:49)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:13)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":50:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:23)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:36)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:53)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:17)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":42:63)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":43:13)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":46:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":48:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":45:29)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":45:24)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":45:17)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":45:40)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":49:17)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":53:5)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":60:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":53:8)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":54:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":55:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":59:9)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":57:13)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":57:33)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":57:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":58:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":58:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":193:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":199:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":195:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":195:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":196:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":196:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":197:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":197:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":198:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":198:14)
#loc64 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":28:1)
#loc65 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":28:26)
#loc66 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":92:19)
#loc67 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":104:23)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":68:1)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":107:1)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":70:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":70:9)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":72:12)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":72:5)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":73:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":88:5)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":73:8)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":74:5)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":75:9)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":87:9)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":76:13)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":76:49)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:13)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":86:13)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:23)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:36)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:53)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:17)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":78:63)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":79:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":82:13)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":84:13)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":81:29)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":81:24)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":81:17)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":81:40)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":85:27)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":85:17)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":89:5)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":106:5)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":89:8)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":90:5)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":93:5)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":95:5)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":92:9)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":105:9)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:13)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:20)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:28)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:35)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:31)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:49)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:62)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":97:69)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":98:9)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":101:9)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":103:9)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":99:13)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":99:33)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":99:26)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":100:26)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":100:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":104:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":110:1)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":144:1)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":112:5)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":112:9)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":114:12)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":114:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":115:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":130:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":115:8)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":116:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":117:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":129:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":118:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":118:49)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:13)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":128:13)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:23)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:36)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:53)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:17)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":120:63)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":121:13)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":124:13)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":126:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":123:29)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":123:24)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":123:17)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":123:40)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":127:27)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":127:17)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":131:5)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":143:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":131:8)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":132:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:9)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":142:9)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:13)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:20)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:28)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:35)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:31)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:49)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:62)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":134:69)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":135:9)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":138:9)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":140:9)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":136:13)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":136:33)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":136:26)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":137:26)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":137:13)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":141:23)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":141:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":147:1)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":170:1)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":149:5)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":149:9)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":151:12)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":151:5)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":152:5)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":161:5)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":152:8)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":153:5)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":156:5)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":158:5)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":155:19)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":155:9)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":160:16)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":160:9)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":162:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":169:5)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":162:8)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":163:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":164:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":168:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":166:13)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":166:33)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":166:26)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":167:26)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":167:13)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":173:1)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":191:1)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":175:5)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":175:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":177:12)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":177:5)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":178:5)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":182:5)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":178:8)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":179:5)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":181:16)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":181:9)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":183:5)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":190:5)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":183:8)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":184:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":185:9)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":189:9)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":187:13)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":187:33)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":187:26)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":188:26)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_square_05.c":188:13)
#loc229 = loc(fused[#loc1, #loc2])
#loc230 = loc(fused[#loc3, #loc4])
#loc231 = loc(fused[#loc5, #loc6])
#loc232 = loc(fused[#loc7, #loc8])
#loc233 = loc(fused[#loc9, #loc10])
#loc234 = loc(fused[#loc12, #loc13])
#loc235 = loc(fused[#loc14, #loc15])
#loc236 = loc(fused[#loc16, #loc17])
#loc237 = loc(fused[#loc19, #loc18])
#loc238 = loc(fused[#loc20, #loc21])
#loc239 = loc(fused[#loc23, #loc21])
#loc240 = loc(fused[#loc24, #loc25])
#loc241 = loc(fused[#loc26, #loc27])
#loc242 = loc(fused[#loc28, #loc29])
#loc243 = loc(fused[#loc33, #loc34])
#loc244 = loc(fused[#loc35, #loc36, #loc37, #loc29])
#loc245 = loc(fused[#loc40, #loc41])
#loc246 = loc(fused[#loc43, #loc44])
#loc247 = loc(fused[#loc46, #loc44])
#loc248 = loc(fused[#loc47, #loc48])
#loc249 = loc(fused[#loc49, #loc50])
#loc250 = loc(fused[#loc54, #loc55])
#loc251 = loc(fused[#loc56, #loc57])
#loc252 = loc(fused[#loc58, #loc59])
#loc253 = loc(fused[#loc60, #loc61])
#loc254 = loc(fused[#loc62, #loc63])
#loc255 = loc(fused[#loc64, #loc65])
#loc256 = loc(fused[#loc69, #loc70])
#loc257 = loc(fused[#loc71, #loc72])
#loc258 = loc(fused[#loc74, #loc73])
#loc259 = loc(fused[#loc75, #loc76])
#loc260 = loc(fused[#loc78, #loc76])
#loc261 = loc(fused[#loc79, #loc80])
#loc262 = loc(fused[#loc81, #loc82])
#loc263 = loc(fused[#loc83, #loc84])
#loc264 = loc(fused[#loc88, #loc89])
#loc265 = loc(fused[#loc90, #loc91, #loc92, #loc84])
#loc266 = loc(fused[#loc95, #loc96])
#loc267 = loc(fused[#loc99, #loc100])
#loc268 = loc(fused[#loc102, #loc103, #loc104, #loc100])
#loc269 = loc(fused[#loc106, #loc107])
#loc270 = loc(fused[#loc108, #loc109])
#loc271 = loc(fused[#loc112, #loc115])
#loc272 = loc(fused[#loc116, #loc117, #loc118, #loc107])
#loc273 = loc(fused[#loc119, #loc120])
#loc274 = loc(fused[#loc125, #loc126])
#loc275 = loc(fused[#loc127, #loc128])
#loc276 = loc(fused[#loc130, #loc129])
#loc277 = loc(fused[#loc131, #loc132])
#loc278 = loc(fused[#loc134, #loc132])
#loc279 = loc(fused[#loc135, #loc136])
#loc280 = loc(fused[#loc137, #loc138])
#loc281 = loc(fused[#loc139, #loc140])
#loc282 = loc(fused[#loc144, #loc145])
#loc283 = loc(fused[#loc146, #loc147, #loc148, #loc140])
#loc284 = loc(fused[#loc151, #loc152])
#loc285 = loc(fused[#loc155, #loc156])
#loc286 = loc(fused[#loc158, #loc156])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc161, #loc162])
#loc289 = loc(fused[#loc165, #loc168])
#loc290 = loc(fused[#loc169, #loc170, #loc171, #loc160])
#loc291 = loc(fused[#loc172, #loc173])
#loc292 = loc(fused[#loc179, #loc180])
#loc293 = loc(fused[#loc181, #loc182])
#loc294 = loc(fused[#loc184, #loc183])
#loc295 = loc(fused[#loc185, #loc186])
#loc296 = loc(fused[#loc188, #loc189, #loc190, #loc186])
#loc297 = loc(fused[#loc194, #loc193])
#loc298 = loc(fused[#loc195, #loc196])
#loc299 = loc(fused[#loc198, #loc196])
#loc300 = loc(fused[#loc199, #loc200])
#loc301 = loc(fused[#loc201, #loc202])
#loc302 = loc(fused[#loc206, #loc207])
#loc303 = loc(fused[#loc208, #loc209])
#loc304 = loc(fused[#loc211, #loc210])
#loc305 = loc(fused[#loc212, #loc213])
#loc306 = loc(fused[#loc215, #loc213])
#loc307 = loc(fused[#loc217, #loc216])
#loc308 = loc(fused[#loc218, #loc219])
#loc309 = loc(fused[#loc221, #loc219])
#loc310 = loc(fused[#loc222, #loc223])
#loc311 = loc(fused[#loc224, #loc225])
