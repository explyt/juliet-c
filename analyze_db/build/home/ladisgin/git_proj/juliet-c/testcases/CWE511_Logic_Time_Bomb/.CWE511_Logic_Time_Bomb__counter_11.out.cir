!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_11.c":115:10)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_11.c":115:14)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_11.c":115:20)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_11.c":115:32)
#loc143 = loc(fused[#loc48, #loc49])
#loc144 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc122)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_11_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc126)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc126)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc10)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc10)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc129)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc129)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc21)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc22)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc132)
                cir.if %10 {
                  %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                  %13 = cir.call @unlink(%12) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc24)
                } loc(#loc133)
              } loc(#loc131)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc25)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc26)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc134)
              cir.yield loc(#loc18)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc28)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc135)
              cir.condition(%8) loc(#loc29)
            } loc(#loc130)
          } loc(#loc130)
        } loc(#loc128)
      } loc(#loc127)
    } loc(#loc125)
    cir.return loc(#loc7)
  } loc(#loc124)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_11_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc31)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc55)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_11_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE511_Logic_Time_Bomb__counter_11_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_11_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE511_Logic_Time_Bomb__counter_11_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc151)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc151)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc74)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc74)
      cir.if %3 {
        %4 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc68)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc68)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc79)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc154)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc83)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc154)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc89)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc157)
                cir.if %10 {
                  %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
                } loc(#loc158)
              } loc(#loc156)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc93)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc159)
              cir.yield loc(#loc85)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc94)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc95)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc160)
              cir.condition(%8) loc(#loc96)
            } loc(#loc155)
          } loc(#loc155)
        } loc(#loc153)
      } loc(#loc152)
    } loc(#loc150)
    cir.return loc(#loc71)
  } loc(#loc149)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc163)
      %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc163)
      %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc101)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc101)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc166)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc107)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc166)
          cir.scope {
            cir.do {
              cir.scope {
                %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                %9 = cir.const #cir.int<20000> : !s32i loc(#loc113)
                %10 = cir.cmp(eq, %8, %9) : !s32i, !cir.bool loc(#loc169)
                cir.if %10 {
                  %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
                  %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
                  cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc116)
                } loc(#loc170)
              } loc(#loc168)
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc118)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc171)
              cir.yield loc(#loc109)
            } while {
              %6 = cir.const #cir.int<1> : !s32i loc(#loc119)
              %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
              %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc172)
              cir.condition(%8) loc(#loc121)
            } loc(#loc167)
          } loc(#loc167)
        } loc(#loc165)
      } loc(#loc164)
    } loc(#loc162)
    cir.return loc(#loc98)
  } loc(#loc161)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_11.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_11.c":40:28)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_11.c":29:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_11.c":47:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_11.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_11.c":46:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_11.c":31:8)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_11.c":31:26)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_11.c":32:5)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_11.c":33:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_11.c":45:9)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_11.c":34:13)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_11.c":34:25)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_11.c":35:13)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_11.c":44:25)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_11.c":38:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_11.c":41:17)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_11.c":38:21)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_11.c":38:30)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_11.c":39:17)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_11.c":40:21)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_11.c":42:22)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_11.c":42:17)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_11.c":44:19)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_11.c":44:24)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_11.c":44:21)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_11.c":100:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_11.c":104:1)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_11.c":102:5)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_11.c":102:11)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_11.c":103:5)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_11.c":103:11)
#loc36 = loc("/usr/include/stdlib.h":575:1)
#loc37 = loc("/usr/include/stdlib.h":575:41)
#loc38 = loc("/usr/include/time.h":76:1)
#loc39 = loc("/usr/include/time.h":76:38)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc41 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_11.c":120:15)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_11.c":122:15)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_11.c":125:15)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_11.c":127:15)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_11.c":115:1)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_11.c":130:1)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_11.c":116:1)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_11.c":118:27)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_11.c":118:22)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_11.c":118:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_11.c":120:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_11.c":121:5)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_11.c":121:45)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_11.c":122:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_11.c":125:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_11.c":126:5)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_11.c":126:44)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_11.c":127:5)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_11.c":129:12)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_11.c":129:5)
#loc66 = loc("../../testcasesupport/std_testcase_io.h":50:1)
#loc67 = loc("../../testcasesupport/std_testcase_io.h":50:24)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_11.c":59:19)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_11.c":70:31)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_11.c":54:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_11.c":77:1)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_11.c":56:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_11.c":76:5)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_11.c":56:8)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_11.c":56:27)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_11.c":57:5)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_11.c":60:5)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_11.c":62:5)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_11.c":59:9)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_11.c":63:9)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_11.c":75:9)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_11.c":64:13)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_11.c":64:25)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_11.c":65:13)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_11.c":74:25)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_11.c":68:17)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_11.c":71:17)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_11.c":68:21)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_11.c":68:30)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_11.c":69:17)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_11.c":70:21)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_11.c":72:22)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_11.c":72:17)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_11.c":74:19)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_11.c":74:24)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_11.c":74:21)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_11.c":80:1)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_11.c":98:1)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_11.c":82:5)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_11.c":97:5)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_11.c":82:8)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_11.c":82:26)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_11.c":83:5)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_11.c":84:9)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_11.c":96:9)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_11.c":85:13)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_11.c":85:25)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_11.c":86:13)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_11.c":95:25)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_11.c":89:17)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_11.c":92:17)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_11.c":89:21)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_11.c":89:30)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_11.c":90:17)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_11.c":91:31)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_11.c":91:21)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_11.c":93:22)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_11.c":93:17)
#loc119 = loc("CWE511_Logic_Time_Bomb__counter_11.c":95:19)
#loc120 = loc("CWE511_Logic_Time_Bomb__counter_11.c":95:24)
#loc121 = loc("CWE511_Logic_Time_Bomb__counter_11.c":95:21)
#loc122 = loc(fused[#loc1, #loc2])
#loc123 = loc(fused[#loc3, #loc4])
#loc124 = loc(fused[#loc6, #loc7])
#loc125 = loc(fused[#loc8, #loc9])
#loc126 = loc(fused[#loc10, #loc11])
#loc127 = loc(fused[#loc12, #loc9])
#loc128 = loc(fused[#loc13, #loc14])
#loc129 = loc(fused[#loc15, #loc16])
#loc130 = loc(fused[#loc17, #loc18])
#loc131 = loc(fused[#loc19, #loc20])
#loc132 = loc(fused[#loc21, #loc22])
#loc133 = loc(fused[#loc23, #loc20])
#loc134 = loc(fused[#loc26, #loc25])
#loc135 = loc(fused[#loc27, #loc28])
#loc136 = loc(fused[#loc30, #loc31])
#loc137 = loc(fused[#loc32, #loc33])
#loc138 = loc(fused[#loc34, #loc35])
#loc139 = loc(fused[#loc36, #loc37])
#loc140 = loc(fused[#loc38, #loc39])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc57, #loc58])
#loc146 = loc(fused[#loc61, #loc62])
#loc147 = loc(fused[#loc65, #loc64])
#loc148 = loc(fused[#loc66, #loc67])
#loc149 = loc(fused[#loc70, #loc71])
#loc150 = loc(fused[#loc72, #loc73])
#loc151 = loc(fused[#loc74, #loc75])
#loc152 = loc(fused[#loc76, #loc77, #loc78, #loc73])
#loc153 = loc(fused[#loc80, #loc81])
#loc154 = loc(fused[#loc82, #loc83])
#loc155 = loc(fused[#loc84, #loc85])
#loc156 = loc(fused[#loc86, #loc87])
#loc157 = loc(fused[#loc88, #loc89])
#loc158 = loc(fused[#loc90, #loc87])
#loc159 = loc(fused[#loc93, #loc92])
#loc160 = loc(fused[#loc94, #loc95])
#loc161 = loc(fused[#loc97, #loc98])
#loc162 = loc(fused[#loc99, #loc100])
#loc163 = loc(fused[#loc101, #loc102])
#loc164 = loc(fused[#loc103, #loc100])
#loc165 = loc(fused[#loc104, #loc105])
#loc166 = loc(fused[#loc106, #loc107])
#loc167 = loc(fused[#loc108, #loc109])
#loc168 = loc(fused[#loc110, #loc111])
#loc169 = loc(fused[#loc112, #loc113])
#loc170 = loc(fused[#loc114, #loc111])
#loc171 = loc(fused[#loc118, #loc117])
#loc172 = loc(fused[#loc119, #loc120])
