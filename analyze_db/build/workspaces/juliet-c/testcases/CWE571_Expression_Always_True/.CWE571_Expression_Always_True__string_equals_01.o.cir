!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE571_Expression_Always_True/CWE571_Expression_Always_True__string_equals_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.CWE571_Expression_Always_True__string_equals_01_bad.charString = #cir.const_array<"true" : !cir.array<!s8i x 4>, trailing_zeros> : !cir.array<!s8i x 10> loc(#loc69)
  cir.func private @strcmp(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"true\00" : !cir.array<!s8i x 5>> : !cir.array<!s8i x 5> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Always prints\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE571_Expression_Always_True__string_equals_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["charString"] {alignment = 1 : i64} loc(#loc69)
    %1 = cir.get_global @__const.CWE571_Expression_Always_True__string_equals_01_bad.charString : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc69)
    cir.copy %1 to %0 : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc69)
    cir.br ^bb1 loc(#loc73)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc13)
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc14)
    %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc5)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc5)
    %6 = cir.call @strcmp(%3, %5) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc13)
    %7 = cir.const #cir.int<0> : !s32i loc(#loc15)
    %8 = cir.cmp(eq, %6, %7) : !s32i, !cir.bool loc(#loc74)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc75)
  ^bb2:  // pred: ^bb1
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc8)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc12)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc10)
  } loc(#loc72)
  cir.func no_proto @CWE571_Expression_Always_True__string_equals_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc77)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc20)
    cir.return loc(#loc19)
  } loc(#loc76)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc78)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc26)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>>, ["charString"] {alignment = 1 : i64} loc(#loc82)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["charStringLen"] {alignment = 4 : i64} loc(#loc83)
    %2 = cir.const #cir.zero : !cir.array<!s8i x 10> loc(#loc82)
    cir.store %2, %0 : !cir.array<!s8i x 10>, !cir.ptr<!cir.array<!s8i x 10>> loc(#loc82)
    cir.br ^bb1 loc(#loc84)
  ^bb1:  // pred: ^bb0
    %3 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc38)
    %4 = cir.const #cir.int<10> : !s32i loc(#loc39)
    %5 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc79)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc40)
    %7 = cir.call @fgets(%3, %4, %6) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc41)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s8i>, !cir.bool loc(#loc85)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc86)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc26)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %14 = cir.cast(integral, %13 : !s32i), !s8i loc(#loc45)
    %15 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc47)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc47)
    cir.store %14, %17 : !s8i, !cir.ptr<!s8i> loc(#loc87)
    cir.br ^bb3 loc(#loc37)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc37)
  ^bb4:  // pred: ^bb3
    %18 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc48)
    %19 = cir.call @strlen(%18) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc49)
    %20 = cir.cast(integral, %19 : !u64i), !s32i loc(#loc49)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc55)
    %23 = cir.cmp(gt, %21, %22) : !s32i, !cir.bool loc(#loc90)
    cir.brcond %23 ^bb6, ^bb7 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %24 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc57)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc58)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc58)
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc60)
    %30 = cir.ptr_stride(%29 : !cir.ptr<!s8i>, %28 : !s32i), !cir.ptr<!s8i> loc(#loc60)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc92)
    cir.br ^bb7 loc(#loc53)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc53)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc93)
  ^bb9:  // pred: ^bb8
    %31 = cir.get_global @strcmp : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i>> loc(#loc63)
    %32 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc64)
    %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 5>> loc(#loc65)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 5>>), !cir.ptr<!s8i> loc(#loc65)
    %35 = cir.call @strcmp(%32, %34) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc63)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc66)
    %37 = cir.cmp(eq, %35, %36) : !s32i, !cir.bool loc(#loc94)
    cir.brcond %37 ^bb10, ^bb11 loc(#loc95)
  ^bb10:  // pred: ^bb9
    %38 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc29)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    cir.br ^bb11 loc(#loc62)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc62)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc31)
  } loc(#loc81)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE571_Expression_Always_True/CWE571_Expression_Always_True__string_equals_01.c":0:0)
#loc1 = loc("CWE571_Expression_Always_True__string_equals_01.c":12:5)
#loc2 = loc("CWE571_Expression_Always_True__string_equals_01.c":12:27)
#loc3 = loc("/usr/include/string.h":156:1)
#loc4 = loc("/usr/include/string.h":157:33)
#loc5 = loc("CWE571_Expression_Always_True__string_equals_01.c":15:28)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE571_Expression_Always_True__string_equals_01.c":17:19)
#loc9 = loc("CWE571_Expression_Always_True__string_equals_01.c":10:1)
#loc10 = loc("CWE571_Expression_Always_True__string_equals_01.c":19:1)
#loc11 = loc("CWE571_Expression_Always_True__string_equals_01.c":15:5)
#loc12 = loc("CWE571_Expression_Always_True__string_equals_01.c":18:5)
#loc13 = loc("CWE571_Expression_Always_True__string_equals_01.c":15:9)
#loc14 = loc("CWE571_Expression_Always_True__string_equals_01.c":15:16)
#loc15 = loc("CWE571_Expression_Always_True__string_equals_01.c":15:39)
#loc16 = loc("CWE571_Expression_Always_True__string_equals_01.c":16:5)
#loc17 = loc("CWE571_Expression_Always_True__string_equals_01.c":17:9)
#loc18 = loc("CWE571_Expression_Always_True__string_equals_01.c":53:1)
#loc19 = loc("CWE571_Expression_Always_True__string_equals_01.c":56:1)
#loc20 = loc("CWE571_Expression_Always_True__string_equals_01.c":55:5)
#loc21 = loc("CWE571_Expression_Always_True__string_equals_01.c":55:11)
#loc22 = loc("/usr/include/stdio.h":654:1)
#loc23 = loc("/usr/include/stdio.h":655:59)
#loc24 = loc("/usr/include/stdio.h":149:1)
#loc25 = loc("/usr/include/stdio.h":149:14)
#loc26 = loc("CWE571_Expression_Always_True__string_equals_01.c":33:19)
#loc27 = loc("/usr/include/string.h":407:1)
#loc28 = loc("/usr/include/string.h":408:33)
#loc29 = loc("CWE571_Expression_Always_True__string_equals_01.c":49:19)
#loc30 = loc("CWE571_Expression_Always_True__string_equals_01.c":26:1)
#loc31 = loc("CWE571_Expression_Always_True__string_equals_01.c":51:1)
#loc32 = loc("CWE571_Expression_Always_True__string_equals_01.c":28:5)
#loc33 = loc("CWE571_Expression_Always_True__string_equals_01.c":28:27)
#loc34 = loc("CWE571_Expression_Always_True__string_equals_01.c":29:5)
#loc35 = loc("CWE571_Expression_Always_True__string_equals_01.c":29:9)
#loc36 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:5)
#loc37 = loc("CWE571_Expression_Always_True__string_equals_01.c":37:5)
#loc38 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:15)
#loc39 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:27)
#loc40 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:31)
#loc41 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:9)
#loc42 = loc("CWE571_Expression_Always_True__string_equals_01.c":31:41)
#loc43 = loc("CWE571_Expression_Always_True__string_equals_01.c":32:5)
#loc44 = loc("CWE571_Expression_Always_True__string_equals_01.c":33:9)
#loc45 = loc("CWE571_Expression_Always_True__string_equals_01.c":36:25)
#loc46 = loc("CWE571_Expression_Always_True__string_equals_01.c":36:20)
#loc47 = loc("CWE571_Expression_Always_True__string_equals_01.c":36:9)
#loc48 = loc("CWE571_Expression_Always_True__string_equals_01.c":40:28)
#loc49 = loc("CWE571_Expression_Always_True__string_equals_01.c":40:21)
#loc50 = loc("CWE571_Expression_Always_True__string_equals_01.c":40:5)
#loc51 = loc("CWE571_Expression_Always_True__string_equals_01.c":40:38)
#loc52 = loc("CWE571_Expression_Always_True__string_equals_01.c":41:5)
#loc53 = loc("CWE571_Expression_Always_True__string_equals_01.c":44:5)
#loc54 = loc("CWE571_Expression_Always_True__string_equals_01.c":41:9)
#loc55 = loc("CWE571_Expression_Always_True__string_equals_01.c":41:25)
#loc56 = loc("CWE571_Expression_Always_True__string_equals_01.c":42:5)
#loc57 = loc("CWE571_Expression_Always_True__string_equals_01.c":43:39)
#loc58 = loc("CWE571_Expression_Always_True__string_equals_01.c":43:20)
#loc59 = loc("CWE571_Expression_Always_True__string_equals_01.c":43:34)
#loc60 = loc("CWE571_Expression_Always_True__string_equals_01.c":43:9)
#loc61 = loc("CWE571_Expression_Always_True__string_equals_01.c":47:5)
#loc62 = loc("CWE571_Expression_Always_True__string_equals_01.c":50:5)
#loc63 = loc("CWE571_Expression_Always_True__string_equals_01.c":47:8)
#loc64 = loc("CWE571_Expression_Always_True__string_equals_01.c":47:15)
#loc65 = loc("CWE571_Expression_Always_True__string_equals_01.c":47:27)
#loc66 = loc("CWE571_Expression_Always_True__string_equals_01.c":47:38)
#loc67 = loc("CWE571_Expression_Always_True__string_equals_01.c":48:5)
#loc68 = loc("CWE571_Expression_Always_True__string_equals_01.c":49:9)
#loc69 = loc(fused[#loc1, #loc2])
#loc70 = loc(fused[#loc3, #loc4])
#loc71 = loc(fused[#loc6, #loc7])
#loc72 = loc(fused[#loc9, #loc10])
#loc73 = loc(fused[#loc11, #loc12])
#loc74 = loc(fused[#loc13, #loc15])
#loc75 = loc(fused[#loc16, #loc12])
#loc76 = loc(fused[#loc18, #loc19])
#loc77 = loc(fused[#loc20, #loc21])
#loc78 = loc(fused[#loc22, #loc23])
#loc79 = loc(fused[#loc24, #loc25])
#loc80 = loc(fused[#loc27, #loc28])
#loc81 = loc(fused[#loc30, #loc31])
#loc82 = loc(fused[#loc32, #loc33])
#loc83 = loc(fused[#loc34, #loc35])
#loc84 = loc(fused[#loc36, #loc37])
#loc85 = loc(fused[#loc41, #loc42])
#loc86 = loc(fused[#loc43, #loc37])
#loc87 = loc(fused[#loc47, #loc45])
#loc88 = loc(fused[#loc50, #loc51])
#loc89 = loc(fused[#loc52, #loc53])
#loc90 = loc(fused[#loc54, #loc55])
#loc91 = loc(fused[#loc56, #loc53])
#loc92 = loc(fused[#loc60, #loc57])
#loc93 = loc(fused[#loc61, #loc62])
#loc94 = loc(fused[#loc63, #loc66])
#loc95 = loc(fused[#loc67, #loc62])
