!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__n_equal_n_minus_one_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc37)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Never prints\00" : !cir.array<!s8i x 13>> : !cir.array<!s8i x 13> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE570_Expression_Always_False__n_equal_n_minus_one_01_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intThirty", init] {alignment = 4 : i64} loc(#loc39)
    %1 = cir.const #cir.int<30> : !s32i loc(#loc7)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc39)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
      %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc11)
      %6 = cir.cmp(eq, %2, %5) : !s32i, !cir.bool loc(#loc41)
      cir.if %6 {
        %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 13>> loc(#loc3)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 13>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc15)
      } loc(#loc42)
    } loc(#loc40)
    cir.return loc(#loc5)
  } loc(#loc38)
  cir.func no_proto @CWE570_Expression_Always_False__n_equal_n_minus_one_01_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc44)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc18)
    cir.return loc(#loc17)
  } loc(#loc43)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Sometimes prints\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc22)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand1", init] {alignment = 4 : i64} loc(#loc47)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand2", init] {alignment = 4 : i64} loc(#loc48)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc47)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc30)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc48)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
      %6 = cir.cmp(ne, %4, %5) : !s32i, !cir.bool loc(#loc50)
      cir.if %6 {
        %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc22)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc22)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc36)
      } loc(#loc51)
    } loc(#loc49)
    cir.return loc(#loc24)
  } loc(#loc46)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE570_Expression_Always_False/CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":17:19)
#loc4 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":10:1)
#loc5 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":19:1)
#loc6 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":12:5)
#loc7 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":12:21)
#loc8 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":15:5)
#loc9 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":18:5)
#loc10 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":15:9)
#loc11 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":15:23)
#loc12 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":15:33)
#loc13 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":15:34)
#loc14 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":16:5)
#loc15 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":17:9)
#loc16 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":39:1)
#loc17 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":42:1)
#loc18 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":41:5)
#loc19 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":41:11)
#loc20 = loc("/usr/include/stdlib.h":573:1)
#loc21 = loc("/usr/include/stdlib.h":573:24)
#loc22 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":35:19)
#loc23 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":26:1)
#loc24 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":37:1)
#loc25 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":29:5)
#loc26 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":29:25)
#loc27 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":30:5)
#loc28 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":30:25)
#loc29 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":29:20)
#loc30 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":30:20)
#loc31 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":33:5)
#loc32 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":36:5)
#loc33 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":33:8)
#loc34 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":33:20)
#loc35 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":34:5)
#loc36 = loc("CWE570_Expression_Always_False__n_equal_n_minus_one_01.c":35:9)
#loc37 = loc(fused[#loc1, #loc2])
#loc38 = loc(fused[#loc4, #loc5])
#loc39 = loc(fused[#loc6, #loc7])
#loc40 = loc(fused[#loc8, #loc9])
#loc41 = loc(fused[#loc10, #loc13])
#loc42 = loc(fused[#loc14, #loc9])
#loc43 = loc(fused[#loc16, #loc17])
#loc44 = loc(fused[#loc18, #loc19])
#loc45 = loc(fused[#loc20, #loc21])
#loc46 = loc(fused[#loc23, #loc24])
#loc47 = loc(fused[#loc25, #loc26])
#loc48 = loc(fused[#loc27, #loc28])
#loc49 = loc(fused[#loc31, #loc32])
#loc50 = loc(fused[#loc33, #loc34])
#loc51 = loc(fused[#loc35, #loc32])
