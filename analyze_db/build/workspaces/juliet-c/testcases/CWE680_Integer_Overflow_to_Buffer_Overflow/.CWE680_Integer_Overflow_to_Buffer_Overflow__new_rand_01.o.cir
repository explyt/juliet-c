!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc96)
  cir.func private @_Znam(!u64i) -> !cir.ptr<!void> loc(#loc97)
  cir.func private @printIntLine(!s32i) loc(#loc98)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_013badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc14)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc14)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
      cir.yield %20 : !u32i loc(#loc14)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc14)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc14)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc14)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc14)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc14)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc14)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc14)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc14)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc14)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc14)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc14)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc14)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc14)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc14)
      cir.yield %24 : !u32i loc(#loc14)
    }) : (!cir.bool) -> !u32i loc(#loc14)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc14)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.scope {
      %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc104)
      %10 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc105)
      %11 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc106)
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc23)
      %14 = cir.const #cir.int<4> : !u64i loc(#loc107)
      %15 = cir.binop(mul, %13, %14) : !u64i loc(#loc108)
      cir.store %15, %9 : !u64i, !cir.ptr<!u64i> loc(#loc109)
      %16 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc27)
      %17 = cir.call @_Znam(%16) : (!u64i) -> !cir.ptr<!void> loc(#loc28)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc110)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc110)
      cir.store %19, %11 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
      cir.scope {
        %25 = cir.const #cir.int<0> : !s32i loc(#loc34)
        %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc34)
        cir.store %26, %10 : !u64i, !cir.ptr<!u64i> loc(#loc113)
        cir.for : cond {
          %27 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc36)
          %28 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc37)
          %30 = cir.cmp(lt, %27, %29) : !u64i, !cir.bool loc(#loc114)
          cir.condition(%30) loc(#loc114)
        } body {
          cir.scope {
            %27 = cir.const #cir.int<0> : !s32i loc(#loc39)
            %28 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc40)
            %29 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc41)
            %30 = cir.ptr_stride(%28 : !cir.ptr<!s32i>, %29 : !u64i), !cir.ptr<!s32i> loc(#loc42)
            cir.store %27, %30 : !s32i, !cir.ptr<!s32i> loc(#loc116)
          } loc(#loc115)
          cir.yield loc(#loc33)
        } step {
          %27 = cir.load %10 : !cir.ptr<!u64i>, !u64i loc(#loc43)
          %28 = cir.unary(inc, %27) : !u64i, !u64i loc(#loc44)
          cir.store %28, %10 : !u64i, !cir.ptr<!u64i> loc(#loc117)
          cir.yield loc(#loc112)
        } loc(#loc112)
      } loc(#loc112)
      %20 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc45)
      %21 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc47)
      %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc45)
      cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc48)
      %24 = cir.load %11 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc49)
      cir.delete.array %24 : <!s32i> loc(#loc49)
    } loc(#loc103)
    cir.return loc(#loc8)
  } loc(#loc99)
  cir.func internal private @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc119)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    %3 = cir.const #cir.int<20> : !s32i loc(#loc57)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc121)
    cir.scope {
      %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataBytes"] {alignment = 8 : i64} loc(#loc123)
      %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc124)
      %6 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["intPointer"] {alignment = 8 : i64} loc(#loc125)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc66)
      %9 = cir.const #cir.int<4> : !u64i loc(#loc126)
      %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc127)
      cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc128)
      %11 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc70)
      %12 = cir.call @_Znam(%11) : (!u64i) -> !cir.ptr<!void> loc(#loc71)
      %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc129)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!s8i>), !cir.ptr<!s32i> loc(#loc129)
      cir.store %14, %6 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc130)
      cir.scope {
        %20 = cir.const #cir.int<0> : !s32i loc(#loc77)
        %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc77)
        cir.store %21, %5 : !u64i, !cir.ptr<!u64i> loc(#loc132)
        cir.for : cond {
          %22 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc79)
          %23 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
          %24 = cir.cast(integral, %23 : !s32i), !u64i loc(#loc80)
          %25 = cir.cmp(lt, %22, %24) : !u64i, !cir.bool loc(#loc133)
          cir.condition(%25) loc(#loc133)
        } body {
          cir.scope {
            %22 = cir.const #cir.int<0> : !s32i loc(#loc82)
            %23 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
            %24 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc84)
            %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !u64i), !cir.ptr<!s32i> loc(#loc85)
            cir.store %22, %25 : !s32i, !cir.ptr<!s32i> loc(#loc135)
          } loc(#loc134)
          cir.yield loc(#loc76)
        } step {
          %22 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc86)
          %23 = cir.unary(inc, %22) : !u64i, !u64i loc(#loc87)
          cir.store %23, %5 : !u64i, !cir.ptr<!u64i> loc(#loc136)
          cir.yield loc(#loc131)
        } loc(#loc131)
      } loc(#loc131)
      %15 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc88)
      %16 = cir.const #cir.int<0> : !s32i loc(#loc89)
      %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc90)
      %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc88)
      cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc91)
      %19 = cir.load %6 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc92)
      cir.delete.array %19 : <!s32i> loc(#loc92)
    } loc(#loc122)
    cir.return loc(#loc51)
  } loc(#loc118)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_014goodEv() extra(#fn_attr1) {
    cir.call @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01L7goodG2BEv() : () -> () loc(#loc95)
    cir.return loc(#loc94)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":128:20)
#loc4 = loc("/usr/lib/gcc/x86_64-linux-gnu/13/../../../../include/c++/13/new":129:41)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":24:1)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":44:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":26:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":26:9)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:13)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:12)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":28:5)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":30:12)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":30:5)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":31:5)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":43:5)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:9)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:16)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":32:26)
#loc21 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":33:9)
#loc22 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":33:14)
#loc23 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:21)
#loc24 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:28)
#loc25 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:38)
#loc26 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":35:9)
#loc27 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:37)
#loc28 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":24:6)
#loc29 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:28)
#loc30 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:46)
#loc31 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":36:9)
#loc32 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:9)
#loc33 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":40:9)
#loc34 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:18)
#loc35 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:14)
#loc36 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:21)
#loc37 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:33)
#loc38 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":38:9)
#loc39 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:29)
#loc40 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:13)
#loc41 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:24)
#loc42 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":39:25)
#loc43 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:40)
#loc44 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":37:39)
#loc45 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:22)
#loc46 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:33)
#loc47 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:34)
#loc48 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":41:9)
#loc49 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":42:19)
#loc50 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":51:1)
#loc51 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":71:1)
#loc52 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":53:5)
#loc53 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":53:9)
#loc54 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:13)
#loc55 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:12)
#loc56 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":55:5)
#loc57 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":57:12)
#loc58 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":57:5)
#loc59 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":58:5)
#loc60 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":70:5)
#loc61 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:9)
#loc62 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:16)
#loc63 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":59:26)
#loc64 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":60:9)
#loc65 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":60:14)
#loc66 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:21)
#loc67 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:28)
#loc68 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:38)
#loc69 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":62:9)
#loc70 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:37)
#loc71 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":51:13)
#loc72 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:28)
#loc73 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:46)
#loc74 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":63:9)
#loc75 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:9)
#loc76 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":67:9)
#loc77 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:18)
#loc78 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:14)
#loc79 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:21)
#loc80 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:33)
#loc81 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":65:9)
#loc82 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:29)
#loc83 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:13)
#loc84 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:24)
#loc85 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":66:25)
#loc86 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:40)
#loc87 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":64:39)
#loc88 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:22)
#loc89 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:33)
#loc90 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:34)
#loc91 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":68:9)
#loc92 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":69:19)
#loc93 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":73:1)
#loc94 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":76:1)
#loc95 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_01.cpp":75:5)
#loc96 = loc(fused[#loc1, #loc2])
#loc97 = loc(fused[#loc3, #loc4])
#loc98 = loc(fused[#loc5, #loc6])
#loc99 = loc(fused[#loc7, #loc8])
#loc100 = loc(fused[#loc9, #loc10])
#loc101 = loc(fused[#loc13, #loc11])
#loc102 = loc(fused[#loc15, #loc14])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc18, #loc20])
#loc106 = loc(fused[#loc21, #loc22])
#loc107 = loc(fused[#loc24, #loc25])
#loc108 = loc(fused[#loc23, #loc25])
#loc109 = loc(fused[#loc26, #loc25])
#loc110 = loc(fused[#loc29, #loc30])
#loc111 = loc(fused[#loc31, #loc30])
#loc112 = loc(fused[#loc32, #loc33])
#loc113 = loc(fused[#loc35, #loc34])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc38, #loc33])
#loc116 = loc(fused[#loc40, #loc39])
#loc117 = loc(fused[#loc44, #loc43])
#loc118 = loc(fused[#loc50, #loc51])
#loc119 = loc(fused[#loc52, #loc53])
#loc120 = loc(fused[#loc56, #loc54])
#loc121 = loc(fused[#loc58, #loc57])
#loc122 = loc(fused[#loc59, #loc60])
#loc123 = loc(fused[#loc61, #loc62])
#loc124 = loc(fused[#loc61, #loc63])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc67, #loc68])
#loc127 = loc(fused[#loc66, #loc68])
#loc128 = loc(fused[#loc69, #loc68])
#loc129 = loc(fused[#loc72, #loc73])
#loc130 = loc(fused[#loc74, #loc73])
#loc131 = loc(fused[#loc75, #loc76])
#loc132 = loc(fused[#loc78, #loc77])
#loc133 = loc(fused[#loc79, #loc80])
#loc134 = loc(fused[#loc81, #loc76])
#loc135 = loc(fused[#loc83, #loc82])
#loc136 = loc(fused[#loc87, #loc86])
#loc137 = loc(fused[#loc93, #loc94])
