!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":21:21)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":21:37)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":59:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":59:41)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc152 = loc(fused[#loc7, #loc8])
#loc183 = loc(fused[#loc84, #loc85])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc149)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc150)
  cir.func internal private  @badSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc152)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc9)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc154)
      cir.scope {
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc156)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc20)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc20)
          cir.store %18, %16 : !u64i, !cir.ptr<!u64i> loc(#loc158)
          cir.for : cond {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc22)
            %20 = cir.const #cir.int<100> : !s32i loc(#loc23)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc23)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !s32i loc(#loc159)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc24)
            cir.condition(%23) loc(#loc24)
          } body {
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc26)
              %20 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc27)
              %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc28)
              %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc161)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %25 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc32)
              %28 = cir.get_member %27[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc162)
            } loc(#loc160)
            cir.yield loc(#loc19)
          } step {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc35)
            cir.store %20, %16 : !u64i, !cir.ptr<!u64i> loc(#loc163)
            cir.yield loc(#loc157)
          } loc(#loc157)
        } loc(#loc157)
      } loc(#loc155)
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc36)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc36)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc37)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc37)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc38)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc38)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc164)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc165)
      cir.libc.memcpy %9 bytes from %5 to %3 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc166)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc43)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc45)
      cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc46)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc153)
    cir.return loc(#loc6)
  } loc(#loc151)
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc167)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc168)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc171)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc59)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc172)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc61)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc62)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc62)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc173)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc174)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc61)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc175)
    cir.store %10, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc176)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc69)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc178)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc71)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc73)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc74)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc75)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc73)
      } loc(#loc179)
    } loc(#loc177)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc76)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc76)
    cir.return loc(#loc54)
  } loc(#loc169)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc181)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc80)
    cir.return loc(#loc79)
  } loc(#loc180)
  cir.func internal private  @goodG2BSink(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc84, #loc85])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc183)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc86)
    cir.scope {
      %1 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc185)
      cir.scope {
        %16 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc187)
        cir.scope {
          %17 = cir.const #cir.int<0> : !s32i loc(#loc97)
          %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc97)
          cir.store %18, %16 : !u64i, !cir.ptr<!u64i> loc(#loc189)
          cir.for : cond {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc99)
            %20 = cir.const #cir.int<100> : !s32i loc(#loc100)
            %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc100)
            %22 = cir.cmp(lt, %19, %21) : !u64i, !s32i loc(#loc190)
            %23 = cir.cast(int_to_bool, %22 : !s32i), !cir.bool loc(#loc101)
            cir.condition(%23) loc(#loc101)
          } body {
            cir.scope {
              %19 = cir.const #cir.int<0> : !s32i loc(#loc103)
              %20 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc104)
              %21 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc105)
              %23 = cir.get_member %22[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc29)
              cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc192)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %25 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc107)
              %26 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc108)
              %27 = cir.ptr_stride(%26 : !cir.ptr<!ty__twoIntsStruct>, %25 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc108)
              %28 = cir.get_member %27[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc33)
              cir.store %24, %28 : !s32i, !cir.ptr<!s32i> loc(#loc193)
            } loc(#loc191)
            cir.yield loc(#loc96)
          } step {
            %19 = cir.load %16 : !cir.ptr<!u64i>, !u64i loc(#loc109)
            %20 = cir.unary(inc, %19) : !u64i, !u64i loc(#loc110)
            cir.store %20, %16 : !u64i, !cir.ptr<!u64i> loc(#loc194)
            cir.yield loc(#loc188)
          } loc(#loc188)
        } loc(#loc188)
      } loc(#loc186)
      %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc111)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc111)
      %4 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc112)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc112)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc113)
      %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc113)
      %8 = cir.const #cir.int<8> : !u64i loc(#loc195)
      %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc196)
      cir.libc.memcpy %9 bytes from %5 to %3 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc197)
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc118)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc119)
      %12 = cir.ptr_stride(%10 : !cir.ptr<!ty__twoIntsStruct>, %11 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc120)
      cir.call @printStructLine(%12) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc121)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc122)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc123)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc123)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc122)
    } loc(#loc184)
    cir.return loc(#loc83)
  } loc(#loc182)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc199)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc200)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc129)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>> loc(#loc200)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc130)
    cir.store %3, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc201)
    %4 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc132)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc133)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc133)
    %7 = cir.const #cir.int<8> : !u64i loc(#loc202)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc203)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc132)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc204)
    cir.store %10, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc205)
    cir.scope {
      %13 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc140)
      %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc141)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc141)
      %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!ty__twoIntsStruct>, !s32i loc(#loc207)
      %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc142)
      cir.if %17 {
        %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc144)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc145)
        %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc146)
        cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc144)
      } loc(#loc208)
    } loc(#loc206)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>>, !cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>> loc(#loc147)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc148)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!cir.ptr<!ty__twoIntsStruct>)>>, !cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc147)
    cir.return loc(#loc125)
  } loc(#loc198)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":39:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":22:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":23:5)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":38:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":24:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":24:33)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":25:9)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":33:9)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":26:13)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":26:20)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":32:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:18)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:25)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:29)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:27)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":29:13)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":30:36)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":30:24)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":30:17)
#loc29 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":31:36)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":31:24)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":31:17)
#loc33 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:35)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":28:34)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:16)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:22)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:30)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:54)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":35:55)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":36:26)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":36:31)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":36:32)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":37:14)
#loc49 = loc("/usr/include/stdlib.h":672:1)
#loc50 = loc("/usr/include/stdlib.h":672:45)
#loc51 = loc("/usr/include/stdlib.h":756:1)
#loc52 = loc("/usr/include/stdlib.h":756:70)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":41:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":52:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":43:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":43:21)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":45:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":45:41)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":46:12)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":46:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:36)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:39)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:59)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:60)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":48:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:33)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:17)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:23)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:24)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:30)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":49:29)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":51:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":51:13)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":90:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":93:1)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":92:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":92:13)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":59:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":77:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":60:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":61:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":76:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":62:9)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":62:33)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":63:9)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":71:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":64:13)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":64:20)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:13)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":70:13)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:22)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:18)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:25)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:29)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":67:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":68:36)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":68:24)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":68:17)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":69:36)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":69:24)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":69:17)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:35)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":66:34)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:16)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:22)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:30)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:34)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:54)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":73:55)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":74:26)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":74:31)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":74:32)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":74:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":75:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":75:14)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":79:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":88:1)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":81:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":81:21)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":82:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":82:41)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":83:12)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":83:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:29)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:36)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:40)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:60)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:61)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":85:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:33)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:17)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:14)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:23)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:24)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:30)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":86:29)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":87:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_44.c":87:13)
#loc149 = loc(fused[#loc1, #loc2])
#loc150 = loc(fused[#loc3, #loc4])
#loc151 = loc(fused[#loc5, #loc6])
#loc153 = loc(fused[#loc10, #loc11])
#loc154 = loc(fused[#loc12, #loc13])
#loc155 = loc(fused[#loc14, #loc15])
#loc156 = loc(fused[#loc16, #loc17])
#loc157 = loc(fused[#loc18, #loc19])
#loc158 = loc(fused[#loc21, #loc20])
#loc159 = loc(fused[#loc22, #loc23])
#loc160 = loc(fused[#loc25, #loc19])
#loc161 = loc(fused[#loc28, #loc26])
#loc162 = loc(fused[#loc32, #loc30])
#loc163 = loc(fused[#loc35, #loc34])
#loc164 = loc(fused[#loc39, #loc40])
#loc165 = loc(fused[#loc38, #loc40])
#loc166 = loc(fused[#loc41, #loc42])
#loc167 = loc(fused[#loc49, #loc50])
#loc168 = loc(fused[#loc51, #loc52])
#loc169 = loc(fused[#loc53, #loc54])
#loc170 = loc(fused[#loc55, #loc56])
#loc171 = loc(fused[#loc57, #loc58])
#loc172 = loc(fused[#loc60, #loc59])
#loc173 = loc(fused[#loc63, #loc64])
#loc174 = loc(fused[#loc62, #loc64])
#loc175 = loc(fused[#loc61, #loc65])
#loc176 = loc(fused[#loc66, #loc65])
#loc177 = loc(fused[#loc67, #loc68])
#loc178 = loc(fused[#loc69, #loc70])
#loc179 = loc(fused[#loc72, #loc68])
#loc180 = loc(fused[#loc78, #loc79])
#loc181 = loc(fused[#loc80, #loc81])
#loc182 = loc(fused[#loc82, #loc83])
#loc184 = loc(fused[#loc87, #loc88])
#loc185 = loc(fused[#loc89, #loc90])
#loc186 = loc(fused[#loc91, #loc92])
#loc187 = loc(fused[#loc93, #loc94])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc98, #loc97])
#loc190 = loc(fused[#loc99, #loc100])
#loc191 = loc(fused[#loc102, #loc96])
#loc192 = loc(fused[#loc105, #loc103])
#loc193 = loc(fused[#loc108, #loc106])
#loc194 = loc(fused[#loc110, #loc109])
#loc195 = loc(fused[#loc114, #loc115])
#loc196 = loc(fused[#loc113, #loc115])
#loc197 = loc(fused[#loc116, #loc117])
#loc198 = loc(fused[#loc124, #loc125])
#loc199 = loc(fused[#loc126, #loc127])
#loc200 = loc(fused[#loc128, #loc129])
#loc201 = loc(fused[#loc131, #loc130])
#loc202 = loc(fused[#loc134, #loc135])
#loc203 = loc(fused[#loc133, #loc135])
#loc204 = loc(fused[#loc132, #loc136])
#loc205 = loc(fused[#loc137, #loc136])
#loc206 = loc(fused[#loc138, #loc139])
#loc207 = loc(fused[#loc140, #loc141])
#loc208 = loc(fused[#loc143, #loc139])
