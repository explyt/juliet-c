!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":27:21)
#loc38 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:10)
#loc39 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:14)
#loc40 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:20)
#loc41 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:32)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":59:21)
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func private @printLongLongLine(!s64i) loc(#loc95)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc97)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc98)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc99)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc13)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc13)
    %9 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %10 = cir.shift(left, %8 : !u64i, %9 : !s32i) -> !u64i loc(#loc13)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
    %13 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
    %15 = cir.binop(xor, %10, %14) : !u64i loc(#loc13)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc13)
    %18 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc13)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc13)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc13)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc13)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc13)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc13)
    %28 = cir.binop(xor, %25, %27) : !u64i loc(#loc13)
    cir.br ^bb3(%28 : !u64i) loc(#loc13)
  ^bb2:  // pred: ^bb0
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc13)
    %31 = cir.const #cir.int<60> : !s32i loc(#loc13)
    %32 = cir.shift(left, %30 : !u64i, %31 : !s32i) -> !u64i loc(#loc13)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc13)
    %35 = cir.const #cir.int<45> : !s32i loc(#loc13)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc13)
    %37 = cir.binop(xor, %32, %36) : !u64i loc(#loc13)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc13)
    %40 = cir.const #cir.int<30> : !s32i loc(#loc13)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc13)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc13)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc13)
    %45 = cir.const #cir.int<15> : !s32i loc(#loc13)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc13)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc13)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc13)
    %50 = cir.binop(xor, %47, %49) : !u64i loc(#loc13)
    %51 = cir.unary(minus, %50) : !u64i, !u64i loc(#loc13)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc13)
    %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc13)
    cir.br ^bb3(%54 : !u64i) loc(#loc13)
  ^bb3(%55: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":27:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc13)
  ^bb4:  // pred: ^bb3
    %56 = cir.cast(integral, %55 : !u64i), !s64i loc(#loc13)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc100)
    cir.br ^bb5 loc(#loc101)
  ^bb5:  // pred: ^bb4
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc17)
    %58 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %59 = cir.cast(integral, %58 : !s32i), !s64i loc(#loc8)
    %60 = cir.binop(sub, %57, %59) nsw : !s64i loc(#loc17)
    cir.store %60, %0 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    %61 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc18)
    cir.call @printLongLongLine(%61) : (!s64i) -> () loc(#loc19)
    cir.br ^bb6 loc(#loc16)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc96)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_sub_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc102)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc105)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc45)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_01_good : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_01_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_sub_01_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %17 : !s32i loc(#loc113)
  } loc(#loc108)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc116)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc62)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc117)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc64)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc65)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc65)
    cir.store %5, %1 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    cir.br ^bb1 loc(#loc119)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc69)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %8 = cir.cast(integral, %7 : !s32i), !s64i loc(#loc59)
    %9 = cir.binop(sub, %6, %8) nsw : !s64i loc(#loc69)
    cir.store %9, %0 : !s64i, !cir.ptr<!s64i> loc(#loc115)
    %10 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc70)
    cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc71)
    cir.br ^bb2 loc(#loc68)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc57)
  } loc(#loc114)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc72)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc79)
    cir.store %2, %1 : !s64i, !cir.ptr<!s64i> loc(#loc123)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc81)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %6 ^bb1, ^bb2 loc(#loc81)
  ^bb1:  // pred: ^bb0
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc81)
    %9 = cir.const #cir.int<60> : !s32i loc(#loc81)
    %10 = cir.shift(left, %8 : !u64i, %9 : !s32i) -> !u64i loc(#loc81)
    %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc81)
    %13 = cir.const #cir.int<45> : !s32i loc(#loc81)
    %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc81)
    %15 = cir.binop(xor, %10, %14) : !u64i loc(#loc81)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc81)
    %18 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %19 = cir.shift(left, %17 : !u64i, %18 : !s32i) -> !u64i loc(#loc81)
    %20 = cir.binop(xor, %15, %19) : !u64i loc(#loc81)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc81)
    %23 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %24 = cir.shift(left, %22 : !u64i, %23 : !s32i) -> !u64i loc(#loc81)
    %25 = cir.binop(xor, %20, %24) : !u64i loc(#loc81)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %27 = cir.cast(integral, %26 : !s32i), !u64i loc(#loc81)
    %28 = cir.binop(xor, %25, %27) : !u64i loc(#loc81)
    cir.br ^bb3(%28 : !u64i) loc(#loc81)
  ^bb2:  // pred: ^bb0
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc81)
    %31 = cir.const #cir.int<60> : !s32i loc(#loc81)
    %32 = cir.shift(left, %30 : !u64i, %31 : !s32i) -> !u64i loc(#loc81)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc81)
    %35 = cir.const #cir.int<45> : !s32i loc(#loc81)
    %36 = cir.shift(left, %34 : !u64i, %35 : !s32i) -> !u64i loc(#loc81)
    %37 = cir.binop(xor, %32, %36) : !u64i loc(#loc81)
    %38 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %39 = cir.cast(integral, %38 : !s32i), !u64i loc(#loc81)
    %40 = cir.const #cir.int<30> : !s32i loc(#loc81)
    %41 = cir.shift(left, %39 : !u64i, %40 : !s32i) -> !u64i loc(#loc81)
    %42 = cir.binop(xor, %37, %41) : !u64i loc(#loc81)
    %43 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc81)
    %45 = cir.const #cir.int<15> : !s32i loc(#loc81)
    %46 = cir.shift(left, %44 : !u64i, %45 : !s32i) -> !u64i loc(#loc81)
    %47 = cir.binop(xor, %42, %46) : !u64i loc(#loc81)
    %48 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc81)
    %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc81)
    %50 = cir.binop(xor, %47, %49) : !u64i loc(#loc81)
    %51 = cir.unary(minus, %50) : !u64i, !u64i loc(#loc81)
    %52 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc81)
    %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc81)
    cir.br ^bb3(%54 : !u64i) loc(#loc81)
  ^bb3(%55: !u64i loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":59:21)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc81)
  ^bb4:  // pred: ^bb3
    %56 = cir.cast(integral, %55 : !u64i), !s64i loc(#loc81)
    cir.store %56, %1 : !s64i, !cir.ptr<!s64i> loc(#loc124)
    cir.br ^bb5 loc(#loc125)
  ^bb5:  // pred: ^bb4
    %57 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    %58 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc86)
    %59 = cir.unary(minus, %58) : !s64i, !s64i loc(#loc86)
    %60 = cir.const #cir.int<1> : !s64i loc(#loc86)
    %61 = cir.binop(sub, %59, %60) nsw : !s64i loc(#loc86)
    %62 = cir.cmp(gt, %57, %61) : !s64i, !cir.bool loc(#loc126)
    cir.brcond %62 ^bb6, ^bb7 loc(#loc127)
  ^bb6:  // pred: ^bb5
    %63 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc90)
    %64 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %65 = cir.cast(integral, %64 : !s32i), !s64i loc(#loc76)
    %66 = cir.binop(sub, %63, %65) nsw : !s64i loc(#loc90)
    cir.store %66, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %67 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc91)
    cir.call @printLongLongLine(%67) : (!s64i) -> () loc(#loc92)
    cir.br ^bb8 loc(#loc88)
  ^bb7:  // pred: ^bb5
    %68 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc72)
    %69 = cir.cast(array_to_ptrdecay, %68 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%69) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    cir.br ^bb8 loc(#loc84)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc84)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc74)
  } loc(#loc120)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s02/CWE191_Integer_Underflow__int64_t_rand_sub_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":22:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":33:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:9)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:33)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":24:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":24:13)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":25:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":25:5)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":27:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":28:5)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":32:5)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":30:26)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":31:27)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":31:9)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":72:1)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":76:1)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":74:5)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":74:13)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":75:5)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":75:13)
#loc26 = loc("/usr/include/stdlib.h":575:1)
#loc27 = loc("/usr/include/stdlib.h":575:41)
#loc28 = loc("/usr/include/time.h":76:1)
#loc29 = loc("/usr/include/time.h":76:38)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":92:15)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":94:15)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":97:15)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":99:15)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":87:1)
#loc37 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":102:1)
#loc42 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":88:1)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:27)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:22)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":90:5)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":92:5)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":93:5)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":93:56)
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":94:5)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":97:5)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":98:5)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":98:55)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":99:5)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":101:12)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":101:5)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":40:1)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":51:1)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:9)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:33)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":42:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":42:13)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":43:12)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":43:5)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:13)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:12)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":45:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":46:5)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":50:5)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":48:26)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":49:27)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":49:9)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":68:19)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":54:1)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":70:1)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:9)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:33)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":56:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":56:13)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":57:12)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":57:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":59:5)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:5)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":69:5)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":61:16)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":62:5)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":65:5)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":67:5)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":63:26)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":64:27)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":64:9)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_sub_01.c":68:9)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc12, #loc11])
#loc100 = loc(fused[#loc14, #loc13])
#loc101 = loc(fused[#loc15, #loc16])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc26, #loc27])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc51, #loc52])
#loc113 = loc(fused[#loc55, #loc54])
#loc114 = loc(fused[#loc56, #loc57])
#loc115 = loc(fused[#loc58, #loc59])
#loc116 = loc(fused[#loc60, #loc61])
#loc117 = loc(fused[#loc63, #loc62])
#loc118 = loc(fused[#loc66, #loc64])
#loc119 = loc(fused[#loc67, #loc68])
#loc120 = loc(fused[#loc73, #loc74])
#loc121 = loc(fused[#loc75, #loc76])
#loc122 = loc(fused[#loc77, #loc78])
#loc123 = loc(fused[#loc80, #loc79])
#loc124 = loc(fused[#loc82, #loc81])
#loc125 = loc(fused[#loc83, #loc84])
#loc126 = loc(fused[#loc85, #loc86])
#loc127 = loc(fused[#loc87, #loc88, #loc89, #loc84])
