!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":24:34)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":24:50)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":160:10)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":160:14)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":160:20)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":160:32)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":68:39)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":68:55)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":109:39)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":109:55)
!ty__twoIntsStruct = !cir.struct<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
#loc283 = loc(fused[#loc9, #loc10])
#loc322 = loc(fused[#loc105, #loc106])
#loc323 = loc(fused[#loc107, #loc108])
#loc329 = loc(fused[#loc128, #loc129])
#loc361 = loc(fused[#loc207, #loc208])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc279)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc280)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc281)
  cir.func internal private @badSource(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc9, #loc10])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc283)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc8)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc11)
    cir.br ^bb1 loc(#loc284)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc279)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc285)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %6 = cir.const #cir.int<50> : !s32i loc(#loc17)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc17)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc286)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc287)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc288)
    cir.store %11, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc289)
    cir.br ^bb3 loc(#loc290)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc24)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc25)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc291)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc292)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc29)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
    cir.br ^bb5 loc(#loc23)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc23)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc13)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc13)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc30)
    cir.store %19, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc293)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc293)
    cir.return %20 : !cir.ptr<!ty__twoIntsStruct> loc(#loc293)
  } loc(#loc282)
  cir.func private @printStructLine(!cir.ptr<!ty__twoIntsStruct>) loc(#loc294)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc295)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc297)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc298)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc299)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc44)
    cir.store %3, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc300)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %5 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc279)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc48)
    %7 = cir.call @badSource(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc49)
    cir.store %7, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc302)
    cir.br ^bb1 loc(#loc303)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc304)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc305)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc58)
    cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc306)
    cir.br ^bb4 loc(#loc305)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc60)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc61)
    %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc307)
    cir.brcond %13 ^bb5, ^bb9 loc(#loc62)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc308)
  ^bb6:  // pred: ^bb5
    %14 = cir.const #cir.int<0> : !s32i loc(#loc64)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc65)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc66)
    %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %14, %18 : !s32i, !cir.ptr<!s32i> loc(#loc309)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc68)
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc69)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
    %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc70)
    %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc71)
    cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    cir.br ^bb7 loc(#loc57)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc57)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc72)
    %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc73)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc311)
    cir.br ^bb4 loc(#loc305)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc57)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc55)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc74)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc74)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc75)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc75)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc76)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc76)
    %32 = cir.const #cir.int<8> : !u64i loc(#loc312)
    %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc313)
    cir.libc.memcpy %33 bytes from %29 to %27 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc314)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc81)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %35 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc83)
    cir.call @printStructLine(%36) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc84)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc85)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc85)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc86)
    cir.br ^bb12 loc(#loc53)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc37)
  } loc(#loc296)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc316)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc89)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc317)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc91)
    cir.return loc(#loc88)
  } loc(#loc315)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc318)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc319)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc320)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc102)
  cir.func @main(%arg0: !s32i loc(fused[#loc105, #loc106]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc107, #loc108])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc322)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc323)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc104)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc109)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc110)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc111)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc111)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc112)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc99)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc99)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc113)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc324)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_good() : () -> () loc(#loc114)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc100)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc100)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc116)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc101)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc117)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc325)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21_bad() : () -> () loc(#loc118)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc102)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc102)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc120)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc121)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc326)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc326)
    cir.return %17 : !s32i loc(#loc326)
  } loc(#loc321)
  cir.global "private" internal dsolocal @goodG2B1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc327)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc125)
  cir.func internal private @goodG2B1Source(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc128, #loc129])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc329)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc127)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc130)
    cir.br ^bb1 loc(#loc330)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc327)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc133)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc331)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc125)
    %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc137)
    cir.br ^bb8 loc(#loc135)
  ^bb3:  // pred: ^bb1
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc138)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc139)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc139)
    %10 = cir.const #cir.int<8> : !u64i loc(#loc332)
    %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc333)
    %12 = cir.call @malloc(%11) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc138)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc334)
    cir.store %13, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc335)
    cir.br ^bb4 loc(#loc336)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc146)
    %15 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc147)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc147)
    %17 = cir.cmp(eq, %14, %16) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc337)
    cir.brcond %17 ^bb5, ^bb6 loc(#loc338)
  ^bb5:  // pred: ^bb4
    %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc149)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %20 = cir.unary(minus, %19) : !s32i, !s32i loc(#loc151)
    cir.call @exit(%20) : (!s32i) -> () extra(#fn_attr) loc(#loc149)
    cir.br ^bb6 loc(#loc145)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc132)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc132)
  ^bb9:  // pred: ^bb8
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc152)
    cir.store %21, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc339)
    %22 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc339)
    cir.return %22 : !cir.ptr<!ty__twoIntsStruct> loc(#loc339)
  } loc(#loc328)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc341)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc342)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc343)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc162)
    cir.store %3, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc344)
    %4 = cir.const #cir.int<0> : !s32i loc(#loc164)
    %5 = cir.get_global @goodG2B1Static : !cir.ptr<!s32i> loc(#loc327)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc345)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc166)
    %7 = cir.call @goodG2B1Source(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc167)
    cir.store %7, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc346)
    cir.br ^bb1 loc(#loc347)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc348)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc349)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<0> : !s32i loc(#loc176)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc176)
    cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc350)
    cir.br ^bb4 loc(#loc349)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc178)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc179)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc179)
    %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc351)
    cir.brcond %13 ^bb5, ^bb9 loc(#loc180)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc352)
  ^bb6:  // pred: ^bb5
    %14 = cir.const #cir.int<0> : !s32i loc(#loc182)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc183)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc184)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc184)
    %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %14, %18 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc185)
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc186)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc187)
    %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc187)
    %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc71)
    cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc354)
    cir.br ^bb7 loc(#loc175)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc175)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc188)
    %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc189)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc355)
    cir.br ^bb4 loc(#loc349)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc175)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc173)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc190)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc190)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc191)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc191)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc192)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc192)
    %32 = cir.const #cir.int<8> : !u64i loc(#loc356)
    %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc357)
    cir.libc.memcpy %33 bytes from %29 to %27 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc358)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc197)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %35 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc199)
    cir.call @printStructLine(%36) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc200)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc201)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc201)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc202)
    cir.br ^bb12 loc(#loc171)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc155)
  } loc(#loc340)
  cir.global "private" internal dsolocal @goodG2B2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc359)
  cir.func internal private @goodG2B2Source(%arg0: !cir.ptr<!ty__twoIntsStruct> loc(fused[#loc207, #loc208])) -> !cir.ptr<!ty__twoIntsStruct> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data", init] {alignment = 8 : i64} loc(#loc361)
    %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["__retval"] {alignment = 8 : i64} loc(#loc206)
    cir.store %arg0, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc209)
    cir.br ^bb1 loc(#loc362)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc359)
    %3 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc212)
    cir.brcond %4 ^bb2, ^bb7 loc(#loc363)
  ^bb2:  // pred: ^bb1
    %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc214)
    %6 = cir.const #cir.int<100> : !s32i loc(#loc215)
    %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc215)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc364)
    %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc365)
    %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc214)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc366)
    cir.store %11, %0 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc367)
    cir.br ^bb3 loc(#loc368)
  ^bb3:  // pred: ^bb2
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc222)
    %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc223)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc223)
    %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc369)
    cir.brcond %15 ^bb4, ^bb5 loc(#loc370)
  ^bb4:  // pred: ^bb3
    %16 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc225)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc226)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc227)
    cir.call @exit(%18) : (!s32i) -> () extra(#fn_attr) loc(#loc225)
    cir.br ^bb5 loc(#loc221)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc221)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc211)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc211)
  ^bb8:  // pred: ^bb7
    %19 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc228)
    cir.store %19, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc371)
    %20 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc371)
    cir.return %20 : !cir.ptr<!ty__twoIntsStruct> loc(#loc371)
  } loc(#loc360)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!ty__twoIntsStruct x 100>, !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>, ["source"] {alignment = 16 : i64} loc(#loc373)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc374)
    %2 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["data"] {alignment = 8 : i64} loc(#loc375)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc238)
    cir.store %3, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc376)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc240)
    %5 = cir.get_global @goodG2B2Static : !cir.ptr<!s32i> loc(#loc359)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc377)
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc242)
    %7 = cir.call @goodG2B2Source(%6) : (!cir.ptr<!ty__twoIntsStruct>) -> !cir.ptr<!ty__twoIntsStruct> loc(#loc243)
    cir.store %7, %2 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc378)
    cir.br ^bb1 loc(#loc379)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc380)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc381)
  ^bb3:  // pred: ^bb2
    %8 = cir.const #cir.int<0> : !s32i loc(#loc252)
    %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc252)
    cir.store %9, %1 : !u64i, !cir.ptr<!u64i> loc(#loc382)
    cir.br ^bb4 loc(#loc381)
  ^bb4:  // 2 preds: ^bb3, ^bb8
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc254)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc255)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc255)
    %13 = cir.cmp(lt, %10, %12) : !u64i, !cir.bool loc(#loc383)
    cir.brcond %13 ^bb5, ^bb9 loc(#loc256)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc384)
  ^bb6:  // pred: ^bb5
    %14 = cir.const #cir.int<0> : !s32i loc(#loc258)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc259)
    %16 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc260)
    %17 = cir.ptr_stride(%16 : !cir.ptr<!ty__twoIntsStruct>, %15 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc260)
    %18 = cir.get_member %17[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc67)
    cir.store %14, %18 : !s32i, !cir.ptr<!s32i> loc(#loc385)
    %19 = cir.const #cir.int<0> : !s32i loc(#loc261)
    %20 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc262)
    %21 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc263)
    %22 = cir.ptr_stride(%21 : !cir.ptr<!ty__twoIntsStruct>, %20 : !u64i), !cir.ptr<!ty__twoIntsStruct> loc(#loc263)
    %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc71)
    cir.store %19, %23 : !s32i, !cir.ptr<!s32i> loc(#loc386)
    cir.br ^bb7 loc(#loc251)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc251)
  ^bb8:  // pred: ^bb7
    %24 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc264)
    %25 = cir.unary(inc, %24) : !u64i, !u64i loc(#loc265)
    cir.store %25, %1 : !u64i, !cir.ptr<!u64i> loc(#loc387)
    cir.br ^bb4 loc(#loc381)
  ^bb9:  // pred: ^bb4
    cir.br ^bb10 loc(#loc251)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc249)
  ^bb11:  // pred: ^bb10
    %26 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc266)
    %27 = cir.cast(bitcast, %26 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc266)
    %28 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!ty__twoIntsStruct x 100>>), !cir.ptr<!ty__twoIntsStruct> loc(#loc267)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc267)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc268)
    %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc268)
    %32 = cir.const #cir.int<8> : !u64i loc(#loc388)
    %33 = cir.binop(mul, %31, %32) : !u64i loc(#loc389)
    cir.libc.memcpy %33 bytes from %29 to %27 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc390)
    %34 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc273)
    %35 = cir.const #cir.int<0> : !s32i loc(#loc274)
    %36 = cir.ptr_stride(%34 : !cir.ptr<!ty__twoIntsStruct>, %35 : !s32i), !cir.ptr<!ty__twoIntsStruct> loc(#loc275)
    cir.call @printStructLine(%36) : (!cir.ptr<!ty__twoIntsStruct>) -> () loc(#loc276)
    %37 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc277)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!ty__twoIntsStruct>), !cir.ptr<!void> loc(#loc277)
    cir.call @free(%38) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc278)
    cir.br ^bb12 loc(#loc247)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc231)
  } loc(#loc372)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":22:24)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":24:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":33:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":25:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":26:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":31:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":26:8)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:33)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:40)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:43)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:63)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:64)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":29:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":30:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":32:12)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":32:5)
#loc32 = loc("../../../testcasesupport/std_testcase_io.h":40:1)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":40:63)
#loc34 = loc("/usr/include/stdlib.h":687:1)
#loc35 = loc("/usr/include/stdlib.h":687:32)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":35:1)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":57:1)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":42:9)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":42:33)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":44:13)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":44:20)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":37:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":37:21)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":38:12)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":38:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":39:17)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":39:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":40:22)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":40:12)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":40:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":40:26)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":41:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":56:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":43:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":51:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":50:13)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:22)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:18)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:25)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:29)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:27)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":47:13)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":48:36)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":48:24)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":48:17)
#loc67 = loc("../../../testcasesupport/std_testcase.h":98:9)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":49:36)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":49:24)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":49:17)
#loc71 = loc("../../../testcasesupport/std_testcase.h":99:9)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:35)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":46:34)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:16)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:22)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:30)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:34)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:54)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":53:55)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":54:26)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":54:31)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":54:32)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":54:9)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":55:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":55:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":144:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":148:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":146:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":146:14)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":147:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":147:14)
#loc93 = loc("/usr/include/stdlib.h":575:1)
#loc94 = loc("/usr/include/stdlib.h":575:41)
#loc95 = loc("/usr/include/time.h":76:1)
#loc96 = loc("/usr/include/time.h":76:38)
#loc97 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc98 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":165:15)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":167:15)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":170:15)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":172:15)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":160:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":175:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":161:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":163:27)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":163:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":163:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":165:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":166:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":166:71)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":167:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":170:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":171:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":171:70)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":172:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":174:12)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":174:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":64:1)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":64:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":73:19)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":68:1)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":82:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":69:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":70:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":80:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":70:8)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":71:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":74:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":76:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":73:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:33)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:40)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:44)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:64)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:65)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":78:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:37)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:13)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:21)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:27)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:28)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:34)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":79:33)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":81:12)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":81:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":84:1)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":106:1)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":91:9)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":91:33)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":93:13)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":93:20)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":86:5)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":86:21)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":87:12)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":87:5)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":88:22)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":88:5)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":89:27)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":89:12)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":89:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":89:31)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":90:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":105:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":92:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":100:9)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:13)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":99:13)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:22)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:18)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:25)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:29)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:27)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":96:13)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":97:36)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":97:24)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":97:17)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":98:36)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":98:24)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":98:17)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:35)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":95:34)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:16)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:22)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:30)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:34)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:54)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:9)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":102:55)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":103:26)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":103:31)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":103:32)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":103:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":104:14)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":104:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":65:1)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":65:29)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":109:1)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":118:1)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":110:1)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":111:5)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":116:5)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":111:8)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":112:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:33)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:40)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:44)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:64)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:65)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":114:9)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:9)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:37)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:13)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:21)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:27)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:28)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:34)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":115:33)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":117:12)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":117:5)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":120:1)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":142:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":127:9)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":127:33)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":129:13)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":129:20)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":122:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":122:21)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":123:12)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":123:5)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":124:22)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":124:5)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":125:27)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":125:12)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":125:5)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":125:31)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":126:5)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":141:5)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":128:9)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":136:9)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":135:13)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:22)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:25)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:29)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:27)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":132:13)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":133:36)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":133:24)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":133:17)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":134:36)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":134:24)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":134:17)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:35)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":131:34)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:16)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:22)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:30)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:34)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:54)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:9)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":138:55)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":139:26)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":139:31)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":139:32)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":139:9)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":140:14)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_struct_memcpy_21.c":140:9)
#loc279 = loc(fused[#loc1, #loc2])
#loc280 = loc(fused[#loc3, #loc4])
#loc281 = loc(fused[#loc5, #loc6])
#loc282 = loc(fused[#loc7, #loc8])
#loc284 = loc(fused[#loc12, #loc13])
#loc285 = loc(fused[#loc15, #loc13])
#loc286 = loc(fused[#loc18, #loc19])
#loc287 = loc(fused[#loc17, #loc19])
#loc288 = loc(fused[#loc16, #loc20])
#loc289 = loc(fused[#loc21, #loc20])
#loc290 = loc(fused[#loc22, #loc23])
#loc291 = loc(fused[#loc24, #loc25])
#loc292 = loc(fused[#loc26, #loc23])
#loc293 = loc(fused[#loc31, #loc30])
#loc294 = loc(fused[#loc32, #loc33])
#loc295 = loc(fused[#loc34, #loc35])
#loc296 = loc(fused[#loc36, #loc37])
#loc297 = loc(fused[#loc38, #loc39])
#loc298 = loc(fused[#loc40, #loc41])
#loc299 = loc(fused[#loc42, #loc43])
#loc300 = loc(fused[#loc45, #loc44])
#loc301 = loc(fused[#loc47, #loc46])
#loc302 = loc(fused[#loc50, #loc51])
#loc303 = loc(fused[#loc52, #loc53])
#loc304 = loc(fused[#loc54, #loc55])
#loc305 = loc(fused[#loc56, #loc57])
#loc306 = loc(fused[#loc59, #loc58])
#loc307 = loc(fused[#loc60, #loc61])
#loc308 = loc(fused[#loc63, #loc57])
#loc309 = loc(fused[#loc66, #loc64])
#loc310 = loc(fused[#loc70, #loc68])
#loc311 = loc(fused[#loc73, #loc72])
#loc312 = loc(fused[#loc77, #loc78])
#loc313 = loc(fused[#loc76, #loc78])
#loc314 = loc(fused[#loc79, #loc80])
#loc315 = loc(fused[#loc87, #loc88])
#loc316 = loc(fused[#loc89, #loc90])
#loc317 = loc(fused[#loc91, #loc92])
#loc318 = loc(fused[#loc93, #loc94])
#loc319 = loc(fused[#loc95, #loc96])
#loc320 = loc(fused[#loc97, #loc98])
#loc321 = loc(fused[#loc103, #loc104])
#loc324 = loc(fused[#loc114, #loc115])
#loc325 = loc(fused[#loc118, #loc119])
#loc326 = loc(fused[#loc122, #loc121])
#loc327 = loc(fused[#loc123, #loc124])
#loc328 = loc(fused[#loc126, #loc127])
#loc330 = loc(fused[#loc131, #loc132])
#loc331 = loc(fused[#loc134, #loc135, #loc136, #loc132])
#loc332 = loc(fused[#loc140, #loc141])
#loc333 = loc(fused[#loc139, #loc141])
#loc334 = loc(fused[#loc138, #loc142])
#loc335 = loc(fused[#loc143, #loc142])
#loc336 = loc(fused[#loc144, #loc145])
#loc337 = loc(fused[#loc146, #loc147])
#loc338 = loc(fused[#loc148, #loc145])
#loc339 = loc(fused[#loc153, #loc152])
#loc340 = loc(fused[#loc154, #loc155])
#loc341 = loc(fused[#loc156, #loc157])
#loc342 = loc(fused[#loc158, #loc159])
#loc343 = loc(fused[#loc160, #loc161])
#loc344 = loc(fused[#loc163, #loc162])
#loc345 = loc(fused[#loc165, #loc164])
#loc346 = loc(fused[#loc168, #loc169])
#loc347 = loc(fused[#loc170, #loc171])
#loc348 = loc(fused[#loc172, #loc173])
#loc349 = loc(fused[#loc174, #loc175])
#loc350 = loc(fused[#loc177, #loc176])
#loc351 = loc(fused[#loc178, #loc179])
#loc352 = loc(fused[#loc181, #loc175])
#loc353 = loc(fused[#loc184, #loc182])
#loc354 = loc(fused[#loc187, #loc185])
#loc355 = loc(fused[#loc189, #loc188])
#loc356 = loc(fused[#loc193, #loc194])
#loc357 = loc(fused[#loc192, #loc194])
#loc358 = loc(fused[#loc195, #loc196])
#loc359 = loc(fused[#loc203, #loc204])
#loc360 = loc(fused[#loc205, #loc206])
#loc362 = loc(fused[#loc210, #loc211])
#loc363 = loc(fused[#loc213, #loc211])
#loc364 = loc(fused[#loc216, #loc217])
#loc365 = loc(fused[#loc215, #loc217])
#loc366 = loc(fused[#loc214, #loc218])
#loc367 = loc(fused[#loc219, #loc218])
#loc368 = loc(fused[#loc220, #loc221])
#loc369 = loc(fused[#loc222, #loc223])
#loc370 = loc(fused[#loc224, #loc221])
#loc371 = loc(fused[#loc229, #loc228])
#loc372 = loc(fused[#loc230, #loc231])
#loc373 = loc(fused[#loc232, #loc233])
#loc374 = loc(fused[#loc234, #loc235])
#loc375 = loc(fused[#loc236, #loc237])
#loc376 = loc(fused[#loc239, #loc238])
#loc377 = loc(fused[#loc241, #loc240])
#loc378 = loc(fused[#loc244, #loc245])
#loc379 = loc(fused[#loc246, #loc247])
#loc380 = loc(fused[#loc248, #loc249])
#loc381 = loc(fused[#loc250, #loc251])
#loc382 = loc(fused[#loc253, #loc252])
#loc383 = loc(fused[#loc254, #loc255])
#loc384 = loc(fused[#loc257, #loc251])
#loc385 = loc(fused[#loc260, #loc258])
#loc386 = loc(fused[#loc263, #loc261])
#loc387 = loc(fused[#loc265, #loc264])
#loc388 = loc(fused[#loc269, #loc270])
#loc389 = loc(fused[#loc268, #loc270])
#loc390 = loc(fused[#loc271, #loc272])
