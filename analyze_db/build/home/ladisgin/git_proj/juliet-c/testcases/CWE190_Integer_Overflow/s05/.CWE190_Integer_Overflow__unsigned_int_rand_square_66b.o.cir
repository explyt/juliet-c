!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":24:68)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":24:91)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":40:72)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":40:95)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":51:72)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":51:95)
#loc66 = loc(fused[#loc5, #loc6])
#loc72 = loc(fused[#loc21, #loc22])
#loc79 = loc(fused[#loc41, #loc42])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc64)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_66b_badSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc66)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc68)
    cir.store %arg0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc11)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc12)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!u32i>, %4 : !s32i), !cir.ptr<!u32i> loc(#loc10)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc12)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc16)
    %8 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc70)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc67)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc4)
  } loc(#loc65)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_66b_goodG2BSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc21, #loc22])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc73)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc72)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc27)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc28)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!u32i>, %4 : !s32i), !cir.ptr<!u32i> loc(#loc26)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc74)
    cir.br ^bb1 loc(#loc75)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    %8 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc24)
    %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc76)
    cir.store %9, %0 : !u32i, !cir.ptr<!u32i> loc(#loc73)
    %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc33)
    cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc20)
  } loc(#loc71)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc35)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc38)
  cir.func @CWE190_Integer_Overflow__unsigned_int_rand_square_66b_goodB2GSink(%arg0: !cir.ptr<!u32i> loc(fused[#loc41, #loc42])) extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc79)
    %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc81)
    cir.store %arg0, %1 : !cir.ptr<!u32i>, !cir.ptr<!cir.ptr<!u32i>> loc(#loc47)
    %3 = cir.load %1 : !cir.ptr<!cir.ptr<!u32i>>, !cir.ptr<!u32i> loc(#loc48)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc49)
    %5 = cir.ptr_stride(%3 : !cir.ptr<!u32i>, %4 : !s32i), !cir.ptr<!u32i> loc(#loc46)
    %6 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc48)
    cir.store %6, %2 : !u32i, !cir.ptr<!u32i> loc(#loc81)
    cir.br ^bb1 loc(#loc82)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc52)
    %8 = cir.cast(integral, %7 : !u32i), !s64i loc(#loc52)
    %9 = cir.cast(integral, %8 : !s64i), !s32i loc(#loc52)
    %10 = cir.abs %9 poison : !s32i loc(#loc53)
    %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc53)
    %12 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc54)
    %13 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc55)
    %15 = cir.const #cir.int<2> : !u32i loc(#loc55)
    %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc55)
    %17 = cir.const #cir.int<1> : !u32i loc(#loc55)
    %18 = cir.binop(add, %16, %17) : !u32i loc(#loc55)
    %19 = cir.cast(int_to_float, %18 : !u32i), !cir.double loc(#loc55)
    %20 = cir.call @sqrt(%19) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc54)
    %21 = cir.cast(float_to_int, %20 : !cir.double), !s64i loc(#loc54)
    %22 = cir.cmp(lt, %11, %21) : !s64i, !cir.bool loc(#loc83)
    cir.brcond %22 ^bb2, ^bb3 loc(#loc84)
  ^bb2:  // pred: ^bb1
    %23 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc60)
    %24 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc44)
    %25 = cir.binop(mul, %23, %24) : !u32i loc(#loc85)
    cir.store %25, %0 : !u32i, !cir.ptr<!u32i> loc(#loc80)
    %26 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc61)
    cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc62)
    cir.br ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb1
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc38)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc38)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    cir.br ^bb4 loc(#loc51)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc51)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc40)
  } loc(#loc78)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":33:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":30:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":30:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":27:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":27:36)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":25:1)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":27:25)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":27:35)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":28:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":32:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":30:31)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":31:27)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":31:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":40:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":48:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":45:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":45:38)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":42:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":42:36)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":41:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":42:25)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":42:35)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":43:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":47:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":45:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":46:27)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":46:9)
#loc35 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":62:19)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":51:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":64:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":57:9)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":57:38)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":53:5)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":53:36)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":52:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":53:25)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":53:35)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":63:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:19)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:9)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:33)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:46)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":55:54)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":56:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":59:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":61:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":57:31)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":58:27)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":58:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_rand_square_66b.c":62:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc67 = loc(fused[#loc7, #loc8])
#loc68 = loc(fused[#loc9, #loc10])
#loc69 = loc(fused[#loc14, #loc15])
#loc70 = loc(fused[#loc16, #loc8])
#loc71 = loc(fused[#loc19, #loc20])
#loc73 = loc(fused[#loc23, #loc24])
#loc74 = loc(fused[#loc25, #loc26])
#loc75 = loc(fused[#loc30, #loc31])
#loc76 = loc(fused[#loc32, #loc24])
#loc77 = loc(fused[#loc36, #loc37])
#loc78 = loc(fused[#loc39, #loc40])
#loc80 = loc(fused[#loc43, #loc44])
#loc81 = loc(fused[#loc45, #loc46])
#loc82 = loc(fused[#loc50, #loc51])
#loc83 = loc(fused[#loc53, #loc56])
#loc84 = loc(fused[#loc57, #loc58, #loc59, #loc51])
#loc85 = loc(fused[#loc60, #loc44])
