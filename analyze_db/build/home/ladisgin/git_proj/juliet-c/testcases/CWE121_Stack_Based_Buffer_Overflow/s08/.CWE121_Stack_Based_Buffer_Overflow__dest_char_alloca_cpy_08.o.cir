!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc137)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc138)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc140)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc142)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc12)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc12)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc12)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc12)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc143)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc12)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc12)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc14)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc14)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc14)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc14)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc14)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc14)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc14)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc143)
    cir.br ^bb1 loc(#loc144)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc145)
    %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %20 ^bb2, ^bb3 loc(#loc146)
  ^bb2:  // pred: ^bb1
    %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc147)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc22)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc22)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc23)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc25)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc148)
    cir.br ^bb3 loc(#loc16)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc149)
  ^bb5:  // pred: ^bb4
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc28)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc28)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc29)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc30)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc30)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc30)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc150)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc34)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc34)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc35)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc37)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc37)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc151)
    %41 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc38)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc39)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc40)
    %44 = cir.call @strcpy(%42, %43) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc38)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc139)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc154)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc152)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc50)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc51)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc156)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
    cir.return %2 : !s32i loc(#loc156)
  } loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc53)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc158)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc159)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc160)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc61)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc61)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc61)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc61)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc61)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc161)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc61)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc160)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc63)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc63)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc63)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc63)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc63)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc63)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc63)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc161)
    cir.br ^bb1 loc(#loc162)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc163)
    %19 = cir.call %18() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc66)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc66)
    cir.brcond %20 ^bb2, ^bb3 loc(#loc164)
  ^bb2:  // pred: ^bb1
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc53)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc69)
  ^bb3:  // pred: ^bb1
    %23 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc72)
    cir.store %23, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc165)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc74)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc74)
    %26 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %27 = cir.const #cir.int<0> : !s32i loc(#loc76)
    %28 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %27 : !s32i), !cir.ptr<!s8i> loc(#loc77)
    cir.store %25, %28 : !s8i, !cir.ptr<!s8i> loc(#loc166)
    cir.br ^bb4 loc(#loc65)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc65)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc167)
  ^bb6:  // pred: ^bb5
    %29 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc80)
    %30 = cir.cast(bitcast, %29 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc80)
    %31 = cir.const #cir.int<67> : !s32i loc(#loc81)
    %32 = cir.const #cir.int<100> : !s32i loc(#loc82)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc82)
    %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc82)
    cir.libc.memset %35 bytes from %30 set to %31 : !cir.ptr<!void>, !s32i, !u64i loc(#loc168)
    %36 = cir.const #cir.int<0> : !s32i loc(#loc86)
    %37 = cir.cast(integral, %36 : !s32i), !s8i loc(#loc86)
    %38 = cir.const #cir.int<100> : !s32i loc(#loc87)
    %39 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc87)
    %41 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc89)
    %42 = cir.ptr_stride(%41 : !cir.ptr<!s8i>, %40 : !s32i), !cir.ptr<!s8i> loc(#loc89)
    cir.store %37, %42 : !s8i, !cir.ptr<!s8i> loc(#loc169)
    %43 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc90)
    %44 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    %45 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc92)
    %46 = cir.call @strcpy(%44, %45) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc90)
    %47 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%47) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb7 loc(#loc79)
  ^bb7:  // pred: ^bb6
    cir.return loc(#loc55)
  } loc(#loc157)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
    cir.return %2 : !s32i loc(#loc171)
  } loc(#loc170)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc173)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc175)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc106)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc106)
    %5 = cir.const #cir.int<1> : !u64i loc(#loc106)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc106)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc106)
    %8 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc176)
    %9 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc106)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc106)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc175)
    %11 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc108)
    %13 = cir.const #cir.int<1> : !u64i loc(#loc108)
    %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc108)
    %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
    cir.store %17, %8 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc176)
    cir.br ^bb1 loc(#loc177)
  ^bb1:  // pred: ^bb0
    %18 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
    %19 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc111)
    %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %20 ^bb2, ^bb3 loc(#loc179)
  ^bb2:  // pred: ^bb1
    %21 = cir.load %8 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc114)
    cir.store %21, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc180)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %23 = cir.cast(integral, %22 : !s32i), !s8i loc(#loc116)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc117)
    %25 = cir.const #cir.int<0> : !s32i loc(#loc118)
    %26 = cir.ptr_stride(%24 : !cir.ptr<!s8i>, %25 : !s32i), !cir.ptr<!s8i> loc(#loc119)
    cir.store %23, %26 : !s8i, !cir.ptr<!s8i> loc(#loc181)
    cir.br ^bb3 loc(#loc110)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc110)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc182)
  ^bb5:  // pred: ^bb4
    %27 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc122)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
    %29 = cir.const #cir.int<67> : !s32i loc(#loc123)
    %30 = cir.const #cir.int<100> : !s32i loc(#loc124)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %32 = cir.binop(sub, %30, %31) nsw : !s32i loc(#loc124)
    %33 = cir.cast(integral, %32 : !s32i), !u64i loc(#loc124)
    cir.libc.memset %33 bytes from %28 set to %29 : !cir.ptr<!void>, !s32i, !u64i loc(#loc183)
    %34 = cir.const #cir.int<0> : !s32i loc(#loc128)
    %35 = cir.cast(integral, %34 : !s32i), !s8i loc(#loc128)
    %36 = cir.const #cir.int<100> : !s32i loc(#loc129)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %38 = cir.binop(sub, %36, %37) nsw : !s32i loc(#loc129)
    %39 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc131)
    %40 = cir.ptr_stride(%39 : !cir.ptr<!s8i>, %38 : !s32i), !cir.ptr<!s8i> loc(#loc131)
    cir.store %35, %40 : !s8i, !cir.ptr<!s8i> loc(#loc184)
    %41 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc132)
    %42 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
    %43 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc134)
    %44 = cir.call @strcpy(%42, %43) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
    %45 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
    cir.call @printLine(%45) : (!cir.ptr<!s8i>) -> () loc(#loc136)
    cir.br ^bb6 loc(#loc121)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc100)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":0:0)
#loc1 = loc("/usr/include/string.h":141:1)
#loc2 = loc("/usr/include/string.h":142:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":37:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":57:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":50:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":50:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":39:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":39:12)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":40:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":40:36)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":41:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":41:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":42:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":48:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":42:8)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":42:26)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":43:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":46:16)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":46:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":47:19)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":47:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":47:14)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":47:15)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":49:5)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":56:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:16)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:24)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:29)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:33)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:9)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":51:34)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":52:25)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":52:16)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":52:20)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":52:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":54:9)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":54:16)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":54:22)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":55:19)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":55:9)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":112:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":116:1)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":114:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":114:14)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":115:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":115:14)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":25:1)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":28:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":27:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":27:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":72:19)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":64:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":88:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":81:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":81:24)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":66:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":66:12)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":67:5)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":67:36)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":68:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":68:37)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":69:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":79:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":69:8)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":69:27)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":70:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":73:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":75:5)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":72:9)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":77:16)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":77:9)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":78:19)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":78:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":78:14)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":78:15)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":80:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":87:5)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:16)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:24)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:29)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:33)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:9)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":82:34)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":83:25)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":83:16)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":83:20)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":83:9)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":85:9)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":85:16)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":85:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":86:19)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":86:9)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":30:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":33:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":32:12)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":32:5)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":91:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":110:1)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":103:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":103:24)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":93:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":93:12)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":94:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":94:36)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":95:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":95:37)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":96:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":101:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":96:8)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":96:26)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":97:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":99:16)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":99:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":100:19)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":100:9)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":100:14)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":100:15)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":102:5)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":109:5)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:16)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:24)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:29)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:33)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:9)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":104:34)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":105:25)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":105:16)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":105:20)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":105:9)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":107:9)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":107:16)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":107:22)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":108:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__dest_char_alloca_cpy_08.c":108:9)
#loc137 = loc(fused[#loc1, #loc2])
#loc138 = loc(fused[#loc3, #loc4])
#loc139 = loc(fused[#loc5, #loc6])
#loc140 = loc(fused[#loc7, #loc8])
#loc141 = loc(fused[#loc9, #loc10])
#loc142 = loc(fused[#loc11, #loc12])
#loc143 = loc(fused[#loc13, #loc14])
#loc144 = loc(fused[#loc15, #loc16])
#loc145 = loc(fused[#loc17, #loc18])
#loc146 = loc(fused[#loc19, #loc16])
#loc147 = loc(fused[#loc21, #loc20])
#loc148 = loc(fused[#loc23, #loc22])
#loc149 = loc(fused[#loc26, #loc27])
#loc150 = loc(fused[#loc32, #loc33])
#loc151 = loc(fused[#loc37, #loc34])
#loc152 = loc(fused[#loc43, #loc44])
#loc153 = loc(fused[#loc45, #loc46])
#loc154 = loc(fused[#loc47, #loc48])
#loc155 = loc(fused[#loc49, #loc50])
#loc156 = loc(fused[#loc52, #loc51])
#loc157 = loc(fused[#loc54, #loc55])
#loc158 = loc(fused[#loc56, #loc57])
#loc159 = loc(fused[#loc58, #loc59])
#loc160 = loc(fused[#loc60, #loc61])
#loc161 = loc(fused[#loc62, #loc63])
#loc162 = loc(fused[#loc64, #loc65])
#loc163 = loc(fused[#loc66, #loc67])
#loc164 = loc(fused[#loc68, #loc69, #loc70, #loc65])
#loc165 = loc(fused[#loc73, #loc72])
#loc166 = loc(fused[#loc75, #loc74])
#loc167 = loc(fused[#loc78, #loc79])
#loc168 = loc(fused[#loc84, #loc85])
#loc169 = loc(fused[#loc89, #loc86])
#loc170 = loc(fused[#loc95, #loc96])
#loc171 = loc(fused[#loc98, #loc97])
#loc172 = loc(fused[#loc99, #loc100])
#loc173 = loc(fused[#loc101, #loc102])
#loc174 = loc(fused[#loc103, #loc104])
#loc175 = loc(fused[#loc105, #loc106])
#loc176 = loc(fused[#loc107, #loc108])
#loc177 = loc(fused[#loc109, #loc110])
#loc178 = loc(fused[#loc111, #loc112])
#loc179 = loc(fused[#loc113, #loc110])
#loc180 = loc(fused[#loc115, #loc114])
#loc181 = loc(fused[#loc117, #loc116])
#loc182 = loc(fused[#loc120, #loc121])
#loc183 = loc(fused[#loc126, #loc127])
#loc184 = loc(fused[#loc131, #loc128])
