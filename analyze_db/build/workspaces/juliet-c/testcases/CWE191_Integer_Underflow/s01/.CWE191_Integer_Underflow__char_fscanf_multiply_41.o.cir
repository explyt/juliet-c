!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc10 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":22:21)
#loc11 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":22:26)
#loc44 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":66:25)
#loc45 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":66:30)
#loc80 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":46:25)
#loc81 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":46:30)
#loc108 = loc(fused[#loc10, #loc11])
#loc121 = loc(fused[#loc44, #loc45])
#loc134 = loc(fused[#loc80, #loc81])
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc104)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc106)
  cir.func internal private @badSink(%arg0: !s8i loc(fused[#loc10, #loc11])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc108)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc12)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc15)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc15)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc16)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc110)
      cir.if %4 {
        %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc112)
        %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc20)
        %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc20)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc19)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc20)
        %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc20)
        cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc112)
        %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc21)
        cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc22)
      } loc(#loc111)
    } loc(#loc109)
    cir.return loc(#loc9)
  } loc(#loc107)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_41_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc114)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc27)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc27)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc115)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc29)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc29)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.call @badSink(%9) : (!s8i) -> () loc(#loc32)
    cir.return loc(#loc24)
  } loc(#loc113)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_41_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc116)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc41)
  cir.func internal private @goodB2GSink(%arg0: !s8i loc(fused[#loc44, #loc45])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc121)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc46)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc49)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc49)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc123)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc54)
          %6 = cir.cast(integral, %5 : !s8i), !s32i loc(#loc54)
          %7 = cir.const #cir.int<127> : !s32i loc(#loc55)
          %8 = cir.unary(minus, %7) nsw : !s32i, !s32i loc(#loc55)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc55)
          %10 = cir.binop(sub, %8, %9) nsw : !s32i loc(#loc55)
          %11 = cir.const #cir.int<2> : !s32i loc(#loc56)
          %12 = cir.binop(div, %10, %11) : !s32i loc(#loc126)
          %13 = cir.cmp(gt, %6, %12) : !s32i, !cir.bool loc(#loc127)
          cir.if %13 {
            %14 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc129)
            %15 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc63)
            %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc63)
            %17 = cir.const #cir.int<2> : !s32i loc(#loc62)
            %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc63)
            %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc63)
            cir.store %19, %14 : !s8i, !cir.ptr<!s8i> loc(#loc129)
            %20 = cir.load %14 : !cir.ptr<!s8i>, !s8i loc(#loc64)
            cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc65)
          } else {
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc41)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc41)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc66)
          } loc(#loc128)
        } loc(#loc125)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc43)
  } loc(#loc120)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc131)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc71)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc71)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc132)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc73)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc105)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc75)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc73)
    %9 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc76)
    cir.call @goodB2GSink(%9) : (!s8i) -> () loc(#loc77)
    cir.return loc(#loc68)
  } loc(#loc130)
  cir.func internal private @goodG2BSink(%arg0: !s8i loc(fused[#loc80, #loc81])) extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data", init] {alignment = 1 : i64} loc(#loc134)
    cir.store %arg0, %0 : !s8i, !cir.ptr<!s8i> loc(#loc82)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc85)
      %2 = cir.cast(integral, %1 : !s8i), !s32i loc(#loc85)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc86)
      %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc136)
      cir.if %4 {
        %5 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc138)
        %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc90)
        %7 = cir.cast(integral, %6 : !s8i), !s32i loc(#loc90)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc89)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc90)
        %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc90)
        cir.store %10, %5 : !s8i, !cir.ptr<!s8i> loc(#loc138)
        %11 = cir.load %5 : !cir.ptr<!s8i>, !s8i loc(#loc91)
        cir.call @printHexCharLine(%11) : (!s8i) -> () loc(#loc92)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc79)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc140)
    %1 = cir.const #cir.int<32> : !s32i loc(#loc97)
    %2 = cir.cast(integral, %1 : !s32i), !s8i loc(#loc97)
    cir.store %2, %0 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc99)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc100)
    %5 = cir.cast(integral, %4 : !s32i), !s8i loc(#loc100)
    cir.store %5, %0 : !s8i, !cir.ptr<!s8i> loc(#loc142)
    %6 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc102)
    cir.call @goodG2BSink(%6) : (!s8i) -> () loc(#loc103)
    cir.return loc(#loc94)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_41.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":37:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":30:1)
#loc12 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":23:1)
#loc13 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":24:5)
#loc14 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":29:5)
#loc15 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":24:8)
#loc16 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":24:15)
#loc17 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":25:5)
#loc18 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":27:9)
#loc19 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":27:30)
#loc20 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":27:23)
#loc21 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":28:26)
#loc22 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":28:9)
#loc23 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":32:1)
#loc24 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":39:1)
#loc25 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":34:5)
#loc26 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":34:10)
#loc27 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":35:12)
#loc28 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":35:5)
#loc29 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":37:5)
#loc30 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":37:13)
#loc31 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":38:13)
#loc32 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":38:5)
#loc33 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":92:1)
#loc34 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":96:1)
#loc35 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":94:5)
#loc36 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":94:13)
#loc37 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":95:5)
#loc38 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":95:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":78:23)
#loc42 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":66:1)
#loc43 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":81:1)
#loc46 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":67:1)
#loc47 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":68:5)
#loc48 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":80:5)
#loc49 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":68:8)
#loc50 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":68:15)
#loc51 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":69:5)
#loc52 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":71:9)
#loc53 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":79:9)
#loc54 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":71:13)
#loc55 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":71:21)
#loc56 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":71:30)
#loc57 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":71:31)
#loc58 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":72:9)
#loc59 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":75:9)
#loc60 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":77:9)
#loc61 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":73:13)
#loc62 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":73:34)
#loc63 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":73:27)
#loc64 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":74:30)
#loc65 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":74:13)
#loc66 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":78:13)
#loc67 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":83:1)
#loc68 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":90:1)
#loc69 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":85:5)
#loc70 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":85:10)
#loc71 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":86:12)
#loc72 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":86:5)
#loc73 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":88:5)
#loc74 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":88:13)
#loc75 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":88:20)
#loc76 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":89:17)
#loc77 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":89:5)
#loc78 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":46:1)
#loc79 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":54:1)
#loc82 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":47:1)
#loc83 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":48:5)
#loc84 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":53:5)
#loc85 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":48:8)
#loc86 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":48:15)
#loc87 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":49:5)
#loc88 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":51:9)
#loc89 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":51:30)
#loc90 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":51:23)
#loc91 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":52:26)
#loc92 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":52:9)
#loc93 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":56:1)
#loc94 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":63:1)
#loc95 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":58:5)
#loc96 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":58:10)
#loc97 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":59:12)
#loc98 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":59:5)
#loc99 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":61:13)
#loc100 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":61:12)
#loc101 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":61:5)
#loc102 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":62:17)
#loc103 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_41.c":62:5)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc6, #loc7])
#loc107 = loc(fused[#loc8, #loc9])
#loc109 = loc(fused[#loc13, #loc14])
#loc110 = loc(fused[#loc15, #loc16])
#loc111 = loc(fused[#loc17, #loc14])
#loc112 = loc(fused[#loc18, #loc19])
#loc113 = loc(fused[#loc23, #loc24])
#loc114 = loc(fused[#loc25, #loc26])
#loc115 = loc(fused[#loc28, #loc27])
#loc116 = loc(fused[#loc33, #loc34])
#loc117 = loc(fused[#loc35, #loc36])
#loc118 = loc(fused[#loc37, #loc38])
#loc119 = loc(fused[#loc39, #loc40])
#loc120 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc47, #loc48])
#loc123 = loc(fused[#loc49, #loc50])
#loc124 = loc(fused[#loc51, #loc48])
#loc125 = loc(fused[#loc52, #loc53])
#loc126 = loc(fused[#loc55, #loc56])
#loc127 = loc(fused[#loc54, #loc57])
#loc128 = loc(fused[#loc58, #loc59, #loc60, #loc53])
#loc129 = loc(fused[#loc61, #loc62])
#loc130 = loc(fused[#loc67, #loc68])
#loc131 = loc(fused[#loc69, #loc70])
#loc132 = loc(fused[#loc72, #loc71])
#loc133 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc83, #loc84])
#loc136 = loc(fused[#loc85, #loc86])
#loc137 = loc(fused[#loc87, #loc84])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc93, #loc94])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc98, #loc97])
#loc142 = loc(fused[#loc101, #loc99])
