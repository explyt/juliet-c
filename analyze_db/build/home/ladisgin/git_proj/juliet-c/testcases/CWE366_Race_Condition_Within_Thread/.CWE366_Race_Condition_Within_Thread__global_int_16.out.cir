!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThread = !cir.struct<struct "_stdThread" incomplete>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc7 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":26:23)
#loc8 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":26:29)
#loc97 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":142:10)
#loc98 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":142:14)
#loc99 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":142:20)
#loc100 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":142:32)
#loc125 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":44:24)
#loc126 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":44:30)
#true = #cir.bool<true> : !cir.bool
#loc209 = loc(fused[#loc7, #loc8])
#loc242 = loc(fused[#loc97, #loc98])
#loc243 = loc(fused[#loc99, #loc100])
#loc252 = loc(fused[#loc125, #loc126])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" internal dsolocal @gBadInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc206)
  cir.func private @stdThreadCreate(!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc207)
  cir.func internal private @helperBad(%arg0: !cir.ptr<!void> loc(fused[#loc7, #loc8])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc209)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc210)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc11)
    cir.scope {
      %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
      cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
      cir.for : cond {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc16)
        %4 = cir.const #cir.int<1000000> : !s32i loc(#loc17)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc213)
        cir.condition(%5) loc(#loc18)
      } body {
        cir.scope {
          %3 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc206)
          %4 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc21)
          %6 = cir.binop(add, %4, %5) nsw : !s32i loc(#loc20)
          %7 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc206)
          cir.store %6, %7 : !s32i, !cir.ptr<!s32i> loc(#loc215)
        } loc(#loc214)
        cir.yield loc(#loc13)
      } step {
        %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %4 = cir.unary(inc, %3) : !s32i, !s32i loc(#loc24)
        cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc216)
        cir.yield loc(#loc211)
      } loc(#loc211)
    } loc(#loc211)
    cir.return loc(#loc6)
  } loc(#loc208)
  cir.func private @stdThreadJoin(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc217)
  cir.func private @stdThreadDestroy(!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc218)
  cir.func private @printIntLine(!s32i) loc(#loc219)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc35)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc35)
        cir.condition(%1) loc(#loc35)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc223)
          %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc224)
          %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc39)
          cir.store %2, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc223)
          %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc41)
          cir.store %3, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc224)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc42)
          %5 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc206)
          cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc225)
          cir.scope {
            %8 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc46)
            %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc47)
            %10 = cir.call @stdThreadCreate(%8, %9, %0) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc48)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc48)
            %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc48)
            cir.if %12 {
              %13 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc50)
              cir.store %13, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc228)
            } loc(#loc227)
          } loc(#loc226)
          cir.scope {
            %8 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc54)
            %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
            %10 = cir.call @stdThreadCreate(%8, %9, %1) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc56)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc56)
            %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc56)
            cir.if %12 {
              %13 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc58)
              cir.store %13, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc231)
            } loc(#loc230)
          } loc(#loc229)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc62)
            %9 = cir.cast(ptr_to_bool, %8 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc62)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc64)
              %12 = cir.call @stdThreadJoin(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc65)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc65)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc63)
                cir.yield %15 : !cir.bool loc(#loc63)
              }, false {
                %15 = cir.const #false loc(#loc63)
                cir.yield %15 : !cir.bool loc(#loc63)
              }) : (!cir.bool) -> !cir.bool loc(#loc63)
              cir.yield %14 : !cir.bool loc(#loc63)
            }, false {
              %11 = cir.const #false loc(#loc63)
              cir.yield %11 : !cir.bool loc(#loc63)
            }) : (!cir.bool) -> !cir.bool loc(#loc63)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc67)
              %12 = cir.call @stdThreadDestroy(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc68)
            } loc(#loc233)
          } loc(#loc232)
          cir.scope {
            %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc71)
            %9 = cir.cast(ptr_to_bool, %8 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc71)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc73)
              %12 = cir.call @stdThreadJoin(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc74)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc74)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc72)
                cir.yield %15 : !cir.bool loc(#loc72)
              }, false {
                %15 = cir.const #false loc(#loc72)
                cir.yield %15 : !cir.bool loc(#loc72)
              }) : (!cir.bool) -> !cir.bool loc(#loc72)
              cir.yield %14 : !cir.bool loc(#loc72)
            }, false {
              %11 = cir.const #false loc(#loc72)
              cir.yield %11 : !cir.bool loc(#loc72)
            }) : (!cir.bool) -> !cir.bool loc(#loc72)
            cir.if %10 {
              %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc76)
              %12 = cir.call @stdThreadDestroy(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc77)
            } loc(#loc235)
          } loc(#loc234)
          %6 = cir.get_global @gBadInt : !cir.ptr<!s32i> loc(#loc206)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc79)
        } loc(#loc222)
        cir.break loc(#loc80)
      } loc(#loc221)
    } loc(#loc221)
    cir.return loc(#loc32)
  } loc(#loc220)
  cir.func no_proto @CWE366_Race_Condition_Within_Thread__global_int_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc237)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc83)
    cir.return loc(#loc82)
  } loc(#loc236)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc238)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc239)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc240)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc91)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc93)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc94)
  cir.func @main(%arg0: !s32i loc(fused[#loc97, #loc98]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc99, #loc100])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc242)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc243)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc101)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc102)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc103)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc103)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc104)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc91)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc91)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc105)
    %8 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc244)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_16_good() : () -> () loc(#loc106)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc92)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc92)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc108)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc93)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    %13 = cir.get_global @CWE366_Race_Condition_Within_Thread__global_int_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc245)
    cir.call @CWE366_Race_Condition_Within_Thread__global_int_16_bad() : () -> () loc(#loc110)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc94)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc94)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc112)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc113)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc246)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc246)
    cir.return %17 : !s32i loc(#loc246)
  } loc(#loc241)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc247)
  cir.global "private" internal dsolocal @gGoodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc248)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc249)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc250)
  cir.func internal private @helperGood(%arg0: !cir.ptr<!void> loc(fused[#loc125, #loc126])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["args", init] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc253)
    cir.store %arg0, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
    %2 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc248)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc130)
    cir.call @stdThreadLockAcquire(%3) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc131)
    cir.scope {
      %6 = cir.const #cir.int<0> : !s32i loc(#loc134)
      cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc255)
      cir.for : cond {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc136)
        %8 = cir.const #cir.int<1000000> : !s32i loc(#loc137)
        %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc256)
        cir.condition(%9) loc(#loc138)
      } body {
        cir.scope {
          %7 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc258)
          %8 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc142)
          %9 = cir.const #cir.int<1> : !s32i loc(#loc143)
          %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc142)
          %11 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc258)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc259)
        } loc(#loc257)
        cir.yield loc(#loc133)
      } step {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %8 = cir.unary(inc, %7) : !s32i, !s32i loc(#loc146)
        cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
        cir.yield loc(#loc254)
      } loc(#loc254)
    } loc(#loc254)
    %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc248)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc147)
    cir.call @stdThreadLockRelease(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc148)
    cir.return loc(#loc124)
  } loc(#loc251)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc261)
  cir.global "private" internal dsolocal @gGoodInt = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc258)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc155)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc155)
        cir.condition(%1) loc(#loc155)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadA", init] {alignment = 8 : i64} loc(#loc265)
          %1 = cir.alloca !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>>, ["threadB", init] {alignment = 8 : i64} loc(#loc266)
          %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc159)
          cir.store %2, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc265)
          %3 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc161)
          cir.store %3, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc266)
          cir.scope {
            %8 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc248)
            %9 = cir.call @stdThreadLockCreate(%8) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc164)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc164)
            %11 = cir.unary(not, %10) : !cir.bool, !cir.bool loc(#loc164)
            cir.if %11 {
              cir.return loc(#loc166)
            } loc(#loc268)
          } loc(#loc267)
          cir.scope {
            %8 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc169)
            %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc170)
            %10 = cir.call @stdThreadCreate(%8, %9, %0) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc171)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc171)
            %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc171)
            cir.if %12 {
              %13 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc173)
              cir.store %13, %0 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc271)
            } loc(#loc270)
          } loc(#loc269)
          cir.scope {
            %8 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc177)
            %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc178)
            %10 = cir.call @stdThreadCreate(%8, %9, %1) : (!cir.ptr<!cir.func<!void (!cir.ptr<!void>)>>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!ty__stdThread>>) -> !s32i loc(#loc179)
            %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc179)
            %12 = cir.unary(not, %11) : !cir.bool, !cir.bool loc(#loc179)
            cir.if %12 {
              %13 = cir.const #cir.ptr<null> : !cir.ptr<!ty__stdThread> loc(#loc181)
              cir.store %13, %1 : !cir.ptr<!ty__stdThread>, !cir.ptr<!cir.ptr<!ty__stdThread>> loc(#loc274)
            } loc(#loc273)
          } loc(#loc272)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc185)
            %9 = cir.cast(ptr_to_bool, %8 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc185)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc187)
              %12 = cir.call @stdThreadJoin(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc188)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc188)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc186)
                cir.yield %15 : !cir.bool loc(#loc186)
              }, false {
                %15 = cir.const #false loc(#loc186)
                cir.yield %15 : !cir.bool loc(#loc186)
              }) : (!cir.bool) -> !cir.bool loc(#loc186)
              cir.yield %14 : !cir.bool loc(#loc186)
            }, false {
              %11 = cir.const #false loc(#loc186)
              cir.yield %11 : !cir.bool loc(#loc186)
            }) : (!cir.bool) -> !cir.bool loc(#loc186)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc190)
              %12 = cir.call @stdThreadDestroy(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc191)
            } loc(#loc276)
          } loc(#loc275)
          cir.scope {
            %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc194)
            %9 = cir.cast(ptr_to_bool, %8 : !cir.ptr<!ty__stdThread>), !cir.bool loc(#loc194)
            %10 = cir.ternary(%9, true {
              %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc196)
              %12 = cir.call @stdThreadJoin(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc197)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc197)
              %14 = cir.ternary(%13, true {
                %15 = cir.const #true loc(#loc195)
                cir.yield %15 : !cir.bool loc(#loc195)
              }, false {
                %15 = cir.const #false loc(#loc195)
                cir.yield %15 : !cir.bool loc(#loc195)
              }) : (!cir.bool) -> !cir.bool loc(#loc195)
              cir.yield %14 : !cir.bool loc(#loc195)
            }, false {
              %11 = cir.const #false loc(#loc195)
              cir.yield %11 : !cir.bool loc(#loc195)
            }) : (!cir.bool) -> !cir.bool loc(#loc195)
            cir.if %10 {
              %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThread>>, !cir.ptr<!ty__stdThread> loc(#loc199)
              %12 = cir.call @stdThreadDestroy(%11) : (!cir.ptr<!ty__stdThread>) -> !s32i loc(#loc200)
            } loc(#loc278)
          } loc(#loc277)
          %4 = cir.get_global @gGoodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc248)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc201)
          cir.call @stdThreadLockDestroy(%5) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc202)
          %6 = cir.get_global @gGoodInt : !cir.ptr<!s32i> loc(#loc258)
          %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc203)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc204)
        } loc(#loc264)
        cir.break loc(#loc205)
      } loc(#loc263)
    } loc(#loc263)
    cir.return loc(#loc152)
  } loc(#loc262)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE366_Race_Condition_Within_Thread/CWE366_Race_Condition_Within_Thread__global_int_16.c":0:0)
#loc1 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":22:1)
#loc2 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":22:22)
#loc3 = loc("../../testcasesupport/std_thread.h":14:1)
#loc4 = loc("../../testcasesupport/std_thread.h":14:74)
#loc5 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":26:1)
#loc6 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":42:1)
#loc9 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":28:5)
#loc10 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":28:9)
#loc11 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":27:1)
#loc12 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:5)
#loc13 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":41:5)
#loc14 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:14)
#loc15 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:10)
#loc16 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:17)
#loc17 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:21)
#loc18 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:19)
#loc19 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":39:5)
#loc20 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":40:19)
#loc21 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":40:29)
#loc22 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":40:9)
#loc23 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:31)
#loc24 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":38:30)
#loc25 = loc("../../testcasesupport/std_thread.h":15:1)
#loc26 = loc("../../testcasesupport/std_thread.h":15:35)
#loc27 = loc("../../testcasesupport/std_thread.h":16:1)
#loc28 = loc("../../testcasesupport/std_thread.h":16:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc31 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":59:1)
#loc32 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":87:1)
#loc33 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":61:5)
#loc34 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":86:5)
#loc35 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":61:11)
#loc36 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":63:9)
#loc37 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":84:9)
#loc38 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":64:13)
#loc39 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":64:33)
#loc40 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":65:13)
#loc41 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":65:33)
#loc42 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":66:23)
#loc43 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":66:13)
#loc44 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":67:13)
#loc45 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":70:13)
#loc46 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":67:34)
#loc47 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":67:45)
#loc48 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":67:18)
#loc49 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":68:13)
#loc50 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":69:27)
#loc51 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":69:17)
#loc52 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":71:13)
#loc53 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":74:13)
#loc54 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":71:34)
#loc55 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":71:45)
#loc56 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":71:18)
#loc57 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":72:13)
#loc58 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":73:27)
#loc59 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":73:17)
#loc60 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":75:13)
#loc61 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":78:13)
#loc62 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":75:17)
#loc63 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":75:25)
#loc64 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":75:42)
#loc65 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":75:28)
#loc66 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":76:13)
#loc67 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":77:34)
#loc68 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":77:17)
#loc69 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":79:13)
#loc70 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":82:13)
#loc71 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":79:17)
#loc72 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":79:25)
#loc73 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":79:42)
#loc74 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":79:28)
#loc75 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":80:13)
#loc76 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":81:34)
#loc77 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":81:17)
#loc78 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":83:26)
#loc79 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":83:13)
#loc80 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":85:9)
#loc81 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":128:1)
#loc82 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":131:1)
#loc83 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":130:5)
#loc84 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":130:11)
#loc85 = loc("/usr/include/stdlib.h":575:1)
#loc86 = loc("/usr/include/stdlib.h":575:41)
#loc87 = loc("/usr/include/time.h":76:1)
#loc88 = loc("/usr/include/time.h":76:38)
#loc89 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc90 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc91 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":147:15)
#loc92 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":149:15)
#loc93 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":152:15)
#loc94 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":154:15)
#loc95 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":142:1)
#loc96 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":157:1)
#loc101 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":143:1)
#loc102 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":145:27)
#loc103 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":145:22)
#loc104 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":145:5)
#loc105 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":147:5)
#loc106 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":148:5)
#loc107 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":148:61)
#loc108 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":149:5)
#loc109 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":152:5)
#loc110 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":153:5)
#loc111 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":153:60)
#loc112 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":154:5)
#loc113 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":156:12)
#loc114 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":156:5)
#loc115 = loc("../../testcasesupport/std_thread.h":18:1)
#loc116 = loc("../../testcasesupport/std_thread.h":18:44)
#loc117 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":24:1)
#loc118 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":24:34)
#loc119 = loc("../../testcasesupport/std_thread.h":19:1)
#loc120 = loc("../../testcasesupport/std_thread.h":19:45)
#loc121 = loc("../../testcasesupport/std_thread.h":20:1)
#loc122 = loc("../../testcasesupport/std_thread.h":20:45)
#loc123 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":44:1)
#loc124 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":55:1)
#loc127 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":46:5)
#loc128 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":46:9)
#loc129 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":45:1)
#loc130 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":49:26)
#loc131 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":49:5)
#loc132 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:5)
#loc133 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":53:5)
#loc134 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:14)
#loc135 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:10)
#loc136 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:17)
#loc137 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:21)
#loc138 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:19)
#loc139 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":51:5)
#loc140 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":23:1)
#loc141 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":23:23)
#loc142 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":52:20)
#loc143 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":52:31)
#loc144 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":52:9)
#loc145 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:31)
#loc146 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":50:30)
#loc147 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":54:26)
#loc148 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":54:5)
#loc149 = loc("../../testcasesupport/std_thread.h":21:1)
#loc150 = loc("../../testcasesupport/std_thread.h":21:45)
#loc151 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":94:1)
#loc152 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":126:1)
#loc153 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":96:5)
#loc154 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":125:5)
#loc155 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":96:11)
#loc156 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":98:9)
#loc157 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":123:9)
#loc158 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":99:13)
#loc159 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":99:33)
#loc160 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":100:13)
#loc161 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":100:33)
#loc162 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":101:13)
#loc163 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":104:13)
#loc164 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":101:18)
#loc165 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":102:13)
#loc166 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":103:17)
#loc167 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":105:13)
#loc168 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":108:13)
#loc169 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":105:34)
#loc170 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":105:46)
#loc171 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":105:18)
#loc172 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":106:13)
#loc173 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":107:27)
#loc174 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":107:17)
#loc175 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":109:13)
#loc176 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":112:13)
#loc177 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":109:34)
#loc178 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":109:46)
#loc179 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":109:18)
#loc180 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":110:13)
#loc181 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":111:27)
#loc182 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":111:17)
#loc183 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":113:13)
#loc184 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":116:13)
#loc185 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":113:17)
#loc186 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":113:25)
#loc187 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":113:42)
#loc188 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":113:28)
#loc189 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":114:13)
#loc190 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":115:34)
#loc191 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":115:17)
#loc192 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":117:13)
#loc193 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":120:13)
#loc194 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":117:17)
#loc195 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":117:25)
#loc196 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":117:42)
#loc197 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":117:28)
#loc198 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":118:13)
#loc199 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":119:34)
#loc200 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":119:17)
#loc201 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":121:34)
#loc202 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":121:13)
#loc203 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":122:26)
#loc204 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":122:13)
#loc205 = loc("CWE366_Race_Condition_Within_Thread__global_int_16.c":124:9)
#loc206 = loc(fused[#loc1, #loc2])
#loc207 = loc(fused[#loc3, #loc4])
#loc208 = loc(fused[#loc5, #loc6])
#loc210 = loc(fused[#loc9, #loc10])
#loc211 = loc(fused[#loc12, #loc13])
#loc212 = loc(fused[#loc15, #loc14])
#loc213 = loc(fused[#loc16, #loc17])
#loc214 = loc(fused[#loc19, #loc13])
#loc215 = loc(fused[#loc22, #loc21])
#loc216 = loc(fused[#loc24, #loc23])
#loc217 = loc(fused[#loc25, #loc26])
#loc218 = loc(fused[#loc27, #loc28])
#loc219 = loc(fused[#loc29, #loc30])
#loc220 = loc(fused[#loc31, #loc32])
#loc221 = loc(fused[#loc33, #loc34])
#loc222 = loc(fused[#loc36, #loc37])
#loc223 = loc(fused[#loc38, #loc39])
#loc224 = loc(fused[#loc40, #loc41])
#loc225 = loc(fused[#loc43, #loc42])
#loc226 = loc(fused[#loc44, #loc45])
#loc227 = loc(fused[#loc49, #loc45])
#loc228 = loc(fused[#loc51, #loc50])
#loc229 = loc(fused[#loc52, #loc53])
#loc230 = loc(fused[#loc57, #loc53])
#loc231 = loc(fused[#loc59, #loc58])
#loc232 = loc(fused[#loc60, #loc61])
#loc233 = loc(fused[#loc66, #loc61])
#loc234 = loc(fused[#loc69, #loc70])
#loc235 = loc(fused[#loc75, #loc70])
#loc236 = loc(fused[#loc81, #loc82])
#loc237 = loc(fused[#loc83, #loc84])
#loc238 = loc(fused[#loc85, #loc86])
#loc239 = loc(fused[#loc87, #loc88])
#loc240 = loc(fused[#loc89, #loc90])
#loc241 = loc(fused[#loc95, #loc96])
#loc244 = loc(fused[#loc106, #loc107])
#loc245 = loc(fused[#loc110, #loc111])
#loc246 = loc(fused[#loc114, #loc113])
#loc247 = loc(fused[#loc115, #loc116])
#loc248 = loc(fused[#loc117, #loc118])
#loc249 = loc(fused[#loc119, #loc120])
#loc250 = loc(fused[#loc121, #loc122])
#loc251 = loc(fused[#loc123, #loc124])
#loc253 = loc(fused[#loc127, #loc128])
#loc254 = loc(fused[#loc132, #loc133])
#loc255 = loc(fused[#loc135, #loc134])
#loc256 = loc(fused[#loc136, #loc137])
#loc257 = loc(fused[#loc139, #loc133])
#loc258 = loc(fused[#loc140, #loc141])
#loc259 = loc(fused[#loc144, #loc143])
#loc260 = loc(fused[#loc146, #loc145])
#loc261 = loc(fused[#loc149, #loc150])
#loc262 = loc(fused[#loc151, #loc152])
#loc263 = loc(fused[#loc153, #loc154])
#loc264 = loc(fused[#loc156, #loc157])
#loc265 = loc(fused[#loc158, #loc159])
#loc266 = loc(fused[#loc160, #loc161])
#loc267 = loc(fused[#loc162, #loc163])
#loc268 = loc(fused[#loc165, #loc163])
#loc269 = loc(fused[#loc167, #loc168])
#loc270 = loc(fused[#loc172, #loc168])
#loc271 = loc(fused[#loc174, #loc173])
#loc272 = loc(fused[#loc175, #loc176])
#loc273 = loc(fused[#loc180, #loc176])
#loc274 = loc(fused[#loc182, #loc181])
#loc275 = loc(fused[#loc183, #loc184])
#loc276 = loc(fused[#loc189, #loc184])
#loc277 = loc(fused[#loc192, #loc193])
#loc278 = loc(fused[#loc198, #loc193])
