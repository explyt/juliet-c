!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc75 = loc("CWE401_Memory_Leak__int_malloc_17.c":107:10)
#loc76 = loc("CWE401_Memory_Leak__int_malloc_17.c":107:14)
#loc77 = loc("CWE401_Memory_Leak__int_malloc_17.c":107:20)
#loc78 = loc("CWE401_Memory_Leak__int_malloc_17.c":107:32)
#loc218 = loc(fused[#loc75, #loc76])
#loc219 = loc(fused[#loc77, #loc78])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc186)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc187)
  cir.func private @printIntLine(!s32i) loc(#loc188)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc191)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc192)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc14)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc193)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc21)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc196)
        cir.condition(%7) loc(#loc22)
      } body {
        cir.scope {
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc24)
          %6 = cir.const #cir.int<100> : !s32i loc(#loc25)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc25)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc198)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc199)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc24)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc200)
          cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc201)
          cir.scope {
            %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc33)
            %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc203)
            cir.if %23 {
              %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
              %25 = cir.const #cir.int<1> : !s32i loc(#loc36)
              %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc37)
              cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
            } loc(#loc204)
          } loc(#loc202)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc38)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc40)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc41)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc205)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc43)
          %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc44)
          %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc42)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc45)
        } loc(#loc197)
        cir.yield loc(#loc17)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc47)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
        cir.yield loc(#loc194)
      } loc(#loc194)
    } loc(#loc194)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc50)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc208)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc53)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc209)
        cir.condition(%7) loc(#loc54)
      } body {
        cir.yield loc(#loc49)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc56)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc210)
        cir.yield loc(#loc207)
      } loc(#loc207)
    } loc(#loc207)
    cir.return loc(#loc8)
  } loc(#loc189)
  cir.func no_proto @CWE401_Memory_Leak__int_malloc_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc212)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc59)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc213)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc61)
    cir.return loc(#loc58)
  } loc(#loc211)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc214)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc215)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc216)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc72)
  cir.func @main(%arg0: !s32i loc(fused[#loc75, #loc76]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc77, #loc78])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc219)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc74)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc79)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc81)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc81)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc82)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc69)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %8 = cir.get_global @CWE401_Memory_Leak__int_malloc_17_good : !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call @CWE401_Memory_Leak__int_malloc_17_good() : () -> () loc(#loc84)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc71)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %13 = cir.get_global @CWE401_Memory_Leak__int_malloc_17_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc221)
    cir.call @CWE401_Memory_Leak__int_malloc_17_bad() : () -> () loc(#loc88)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc72)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc91)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc222)
    cir.return %17 : !s32i loc(#loc222)
  } loc(#loc217)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc223)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc225)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc226)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc227)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc102)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc228)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc108)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc109)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc231)
        cir.condition(%7) loc(#loc110)
      } body {
        cir.scope {
          %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc112)
          %6 = cir.const #cir.int<100> : !s32i loc(#loc113)
          %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc113)
          %8 = cir.const #cir.int<4> : !u64i loc(#loc233)
          %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc234)
          %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc112)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc235)
          cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc236)
          cir.scope {
            %20 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc120)
            %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc121)
            %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc121)
            %23 = cir.cmp(eq, %20, %22) : !cir.ptr<!s32i>, !cir.bool loc(#loc238)
            cir.if %23 {
              %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc123)
              %25 = cir.const #cir.int<1> : !s32i loc(#loc124)
              %26 = cir.unary(minus, %25) : !s32i, !s32i loc(#loc125)
              cir.call @exit(%26) : (!s32i) -> () extra(#fn_attr) loc(#loc123)
            } loc(#loc239)
          } loc(#loc237)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc126)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc127)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc128)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc129)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc240)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc130)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc131)
          %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc132)
          %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc133)
        } loc(#loc232)
        cir.yield loc(#loc105)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc135)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
        cir.yield loc(#loc229)
      } loc(#loc229)
    } loc(#loc229)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc138)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc243)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc141)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc244)
        cir.condition(%7) loc(#loc142)
      } body {
        cir.scope {
          %5 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc144)
          %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc145)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc145)
          cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc144)
        } loc(#loc245)
        cir.yield loc(#loc137)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc146)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc147)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc246)
        cir.yield loc(#loc242)
      } loc(#loc242)
    } loc(#loc242)
    cir.return loc(#loc96)
  } loc(#loc224)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc248)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc249)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc250)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc155)
    cir.store %3, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc251)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc159)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc253)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc254)
        cir.condition(%7) loc(#loc163)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<100> : !s32i loc(#loc165)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc165)
          %7 = cir.const #cir.int<4> : !u64i loc(#loc165)
          %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc165)
          %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc165)
          %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc165)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc165)
          cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc256)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc167)
          %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc168)
          %14 = cir.const #cir.int<0> : !s32i loc(#loc169)
          %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc170)
          cir.store %12, %15 : !s32i, !cir.ptr<!s32i> loc(#loc257)
          %16 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc171)
          %17 = cir.const #cir.int<0> : !s32i loc(#loc172)
          %18 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %17 : !s32i), !cir.ptr<!s32i> loc(#loc173)
          %19 = cir.load %18 : !cir.ptr<!s32i>, !s32i loc(#loc171)
          cir.call @printIntLine(%19) : (!s32i) -> () loc(#loc174)
        } loc(#loc255)
        cir.yield loc(#loc158)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc176)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
        cir.yield loc(#loc252)
      } loc(#loc252)
    } loc(#loc252)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc179)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc260)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc182)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc261)
        cir.condition(%7) loc(#loc183)
      } body {
        cir.yield loc(#loc178)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc184)
        %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc185)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc262)
        cir.yield loc(#loc259)
      } loc(#loc259)
    } loc(#loc259)
    cir.return loc(#loc149)
  } loc(#loc247)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__int_malloc_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE401_Memory_Leak__int_malloc_17.c":24:1)
#loc8 = loc("CWE401_Memory_Leak__int_malloc_17.c":43:1)
#loc9 = loc("CWE401_Memory_Leak__int_malloc_17.c":26:5)
#loc10 = loc("CWE401_Memory_Leak__int_malloc_17.c":26:9)
#loc11 = loc("CWE401_Memory_Leak__int_malloc_17.c":26:11)
#loc12 = loc("CWE401_Memory_Leak__int_malloc_17.c":27:5)
#loc13 = loc("CWE401_Memory_Leak__int_malloc_17.c":27:11)
#loc14 = loc("CWE401_Memory_Leak__int_malloc_17.c":28:12)
#loc15 = loc("CWE401_Memory_Leak__int_malloc_17.c":28:5)
#loc16 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:5)
#loc17 = loc("CWE401_Memory_Leak__int_malloc_17.c":37:5)
#loc18 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:13)
#loc19 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:9)
#loc20 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:16)
#loc21 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:20)
#loc22 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:18)
#loc23 = loc("CWE401_Memory_Leak__int_malloc_17.c":30:5)
#loc24 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:23)
#loc25 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:30)
#loc26 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:34)
#loc27 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:44)
#loc28 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:45)
#loc29 = loc("CWE401_Memory_Leak__int_malloc_17.c":32:9)
#loc30 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:9)
#loc31 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:37)
#loc32 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:13)
#loc33 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:21)
#loc34 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:27)
#loc35 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:28)
#loc36 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:34)
#loc37 = loc("CWE401_Memory_Leak__int_malloc_17.c":33:33)
#loc38 = loc("CWE401_Memory_Leak__int_malloc_17.c":35:19)
#loc39 = loc("CWE401_Memory_Leak__int_malloc_17.c":35:9)
#loc40 = loc("CWE401_Memory_Leak__int_malloc_17.c":35:14)
#loc41 = loc("CWE401_Memory_Leak__int_malloc_17.c":35:15)
#loc42 = loc("CWE401_Memory_Leak__int_malloc_17.c":36:22)
#loc43 = loc("CWE401_Memory_Leak__int_malloc_17.c":36:27)
#loc44 = loc("CWE401_Memory_Leak__int_malloc_17.c":36:28)
#loc45 = loc("CWE401_Memory_Leak__int_malloc_17.c":36:9)
#loc46 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:24)
#loc47 = loc("CWE401_Memory_Leak__int_malloc_17.c":29:23)
#loc48 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:5)
#loc49 = loc("CWE401_Memory_Leak__int_malloc_17.c":42:5)
#loc50 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:13)
#loc51 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:9)
#loc52 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:16)
#loc53 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:20)
#loc54 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:18)
#loc55 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:24)
#loc56 = loc("CWE401_Memory_Leak__int_malloc_17.c":38:23)
#loc57 = loc("CWE401_Memory_Leak__int_malloc_17.c":92:1)
#loc58 = loc("CWE401_Memory_Leak__int_malloc_17.c":96:1)
#loc59 = loc("CWE401_Memory_Leak__int_malloc_17.c":94:5)
#loc60 = loc("CWE401_Memory_Leak__int_malloc_17.c":94:13)
#loc61 = loc("CWE401_Memory_Leak__int_malloc_17.c":95:5)
#loc62 = loc("CWE401_Memory_Leak__int_malloc_17.c":95:13)
#loc63 = loc("/usr/include/stdlib.h":575:1)
#loc64 = loc("/usr/include/stdlib.h":575:41)
#loc65 = loc("/usr/include/time.h":76:1)
#loc66 = loc("/usr/include/time.h":76:38)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc69 = loc("CWE401_Memory_Leak__int_malloc_17.c":112:15)
#loc70 = loc("CWE401_Memory_Leak__int_malloc_17.c":114:15)
#loc71 = loc("CWE401_Memory_Leak__int_malloc_17.c":117:15)
#loc72 = loc("CWE401_Memory_Leak__int_malloc_17.c":119:15)
#loc73 = loc("CWE401_Memory_Leak__int_malloc_17.c":107:1)
#loc74 = loc("CWE401_Memory_Leak__int_malloc_17.c":122:1)
#loc79 = loc("CWE401_Memory_Leak__int_malloc_17.c":108:1)
#loc80 = loc("CWE401_Memory_Leak__int_malloc_17.c":110:27)
#loc81 = loc("CWE401_Memory_Leak__int_malloc_17.c":110:22)
#loc82 = loc("CWE401_Memory_Leak__int_malloc_17.c":110:5)
#loc83 = loc("CWE401_Memory_Leak__int_malloc_17.c":112:5)
#loc84 = loc("CWE401_Memory_Leak__int_malloc_17.c":113:5)
#loc85 = loc("CWE401_Memory_Leak__int_malloc_17.c":113:44)
#loc86 = loc("CWE401_Memory_Leak__int_malloc_17.c":114:5)
#loc87 = loc("CWE401_Memory_Leak__int_malloc_17.c":117:5)
#loc88 = loc("CWE401_Memory_Leak__int_malloc_17.c":118:5)
#loc89 = loc("CWE401_Memory_Leak__int_malloc_17.c":118:43)
#loc90 = loc("CWE401_Memory_Leak__int_malloc_17.c":119:5)
#loc91 = loc("CWE401_Memory_Leak__int_malloc_17.c":121:12)
#loc92 = loc("CWE401_Memory_Leak__int_malloc_17.c":121:5)
#loc93 = loc("/usr/include/stdlib.h":687:1)
#loc94 = loc("/usr/include/stdlib.h":687:32)
#loc95 = loc("CWE401_Memory_Leak__int_malloc_17.c":50:1)
#loc96 = loc("CWE401_Memory_Leak__int_malloc_17.c":69:1)
#loc97 = loc("CWE401_Memory_Leak__int_malloc_17.c":52:5)
#loc98 = loc("CWE401_Memory_Leak__int_malloc_17.c":52:9)
#loc99 = loc("CWE401_Memory_Leak__int_malloc_17.c":52:11)
#loc100 = loc("CWE401_Memory_Leak__int_malloc_17.c":53:5)
#loc101 = loc("CWE401_Memory_Leak__int_malloc_17.c":53:11)
#loc102 = loc("CWE401_Memory_Leak__int_malloc_17.c":54:12)
#loc103 = loc("CWE401_Memory_Leak__int_malloc_17.c":54:5)
#loc104 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:5)
#loc105 = loc("CWE401_Memory_Leak__int_malloc_17.c":63:5)
#loc106 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:13)
#loc107 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:9)
#loc108 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:16)
#loc109 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:20)
#loc110 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:18)
#loc111 = loc("CWE401_Memory_Leak__int_malloc_17.c":56:5)
#loc112 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:23)
#loc113 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:30)
#loc114 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:34)
#loc115 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:44)
#loc116 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:45)
#loc117 = loc("CWE401_Memory_Leak__int_malloc_17.c":58:9)
#loc118 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:9)
#loc119 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:37)
#loc120 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:13)
#loc121 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:21)
#loc122 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:27)
#loc123 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:28)
#loc124 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:34)
#loc125 = loc("CWE401_Memory_Leak__int_malloc_17.c":59:33)
#loc126 = loc("CWE401_Memory_Leak__int_malloc_17.c":61:19)
#loc127 = loc("CWE401_Memory_Leak__int_malloc_17.c":61:9)
#loc128 = loc("CWE401_Memory_Leak__int_malloc_17.c":61:14)
#loc129 = loc("CWE401_Memory_Leak__int_malloc_17.c":61:15)
#loc130 = loc("CWE401_Memory_Leak__int_malloc_17.c":62:22)
#loc131 = loc("CWE401_Memory_Leak__int_malloc_17.c":62:27)
#loc132 = loc("CWE401_Memory_Leak__int_malloc_17.c":62:28)
#loc133 = loc("CWE401_Memory_Leak__int_malloc_17.c":62:9)
#loc134 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:24)
#loc135 = loc("CWE401_Memory_Leak__int_malloc_17.c":55:23)
#loc136 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:5)
#loc137 = loc("CWE401_Memory_Leak__int_malloc_17.c":68:5)
#loc138 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:13)
#loc139 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:9)
#loc140 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:16)
#loc141 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:20)
#loc142 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:18)
#loc143 = loc("CWE401_Memory_Leak__int_malloc_17.c":65:5)
#loc144 = loc("CWE401_Memory_Leak__int_malloc_17.c":67:9)
#loc145 = loc("CWE401_Memory_Leak__int_malloc_17.c":67:14)
#loc146 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:24)
#loc147 = loc("CWE401_Memory_Leak__int_malloc_17.c":64:23)
#loc148 = loc("CWE401_Memory_Leak__int_malloc_17.c":72:1)
#loc149 = loc("CWE401_Memory_Leak__int_malloc_17.c":90:1)
#loc150 = loc("CWE401_Memory_Leak__int_malloc_17.c":74:5)
#loc151 = loc("CWE401_Memory_Leak__int_malloc_17.c":74:9)
#loc152 = loc("CWE401_Memory_Leak__int_malloc_17.c":74:11)
#loc153 = loc("CWE401_Memory_Leak__int_malloc_17.c":75:5)
#loc154 = loc("CWE401_Memory_Leak__int_malloc_17.c":75:11)
#loc155 = loc("CWE401_Memory_Leak__int_malloc_17.c":76:12)
#loc156 = loc("CWE401_Memory_Leak__int_malloc_17.c":76:5)
#loc157 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:5)
#loc158 = loc("CWE401_Memory_Leak__int_malloc_17.c":84:5)
#loc159 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:13)
#loc160 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:9)
#loc161 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:16)
#loc162 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:20)
#loc163 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:18)
#loc164 = loc("CWE401_Memory_Leak__int_malloc_17.c":78:5)
#loc165 = loc("CWE401_Memory_Leak__int_malloc_17.c":80:23)
#loc166 = loc("CWE401_Memory_Leak__int_malloc_17.c":80:9)
#loc167 = loc("CWE401_Memory_Leak__int_malloc_17.c":82:19)
#loc168 = loc("CWE401_Memory_Leak__int_malloc_17.c":82:9)
#loc169 = loc("CWE401_Memory_Leak__int_malloc_17.c":82:14)
#loc170 = loc("CWE401_Memory_Leak__int_malloc_17.c":82:15)
#loc171 = loc("CWE401_Memory_Leak__int_malloc_17.c":83:22)
#loc172 = loc("CWE401_Memory_Leak__int_malloc_17.c":83:27)
#loc173 = loc("CWE401_Memory_Leak__int_malloc_17.c":83:28)
#loc174 = loc("CWE401_Memory_Leak__int_malloc_17.c":83:9)
#loc175 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:24)
#loc176 = loc("CWE401_Memory_Leak__int_malloc_17.c":77:23)
#loc177 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:5)
#loc178 = loc("CWE401_Memory_Leak__int_malloc_17.c":89:5)
#loc179 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:13)
#loc180 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:9)
#loc181 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:16)
#loc182 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:20)
#loc183 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:18)
#loc184 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:24)
#loc185 = loc("CWE401_Memory_Leak__int_malloc_17.c":85:23)
#loc186 = loc(fused[#loc1, #loc2])
#loc187 = loc(fused[#loc3, #loc4])
#loc188 = loc(fused[#loc5, #loc6])
#loc189 = loc(fused[#loc7, #loc8])
#loc190 = loc(fused[#loc9, #loc10])
#loc191 = loc(fused[#loc9, #loc11])
#loc192 = loc(fused[#loc12, #loc13])
#loc193 = loc(fused[#loc15, #loc14])
#loc194 = loc(fused[#loc16, #loc17])
#loc195 = loc(fused[#loc19, #loc18])
#loc196 = loc(fused[#loc20, #loc21])
#loc197 = loc(fused[#loc23, #loc17])
#loc198 = loc(fused[#loc26, #loc27])
#loc199 = loc(fused[#loc25, #loc27])
#loc200 = loc(fused[#loc24, #loc28])
#loc201 = loc(fused[#loc29, #loc28])
#loc202 = loc(fused[#loc30, #loc31])
#loc203 = loc(fused[#loc32, #loc33])
#loc204 = loc(fused[#loc34, #loc31])
#loc205 = loc(fused[#loc39, #loc38])
#loc206 = loc(fused[#loc47, #loc46])
#loc207 = loc(fused[#loc48, #loc49])
#loc208 = loc(fused[#loc51, #loc50])
#loc209 = loc(fused[#loc52, #loc53])
#loc210 = loc(fused[#loc56, #loc55])
#loc211 = loc(fused[#loc57, #loc58])
#loc212 = loc(fused[#loc59, #loc60])
#loc213 = loc(fused[#loc61, #loc62])
#loc214 = loc(fused[#loc63, #loc64])
#loc215 = loc(fused[#loc65, #loc66])
#loc216 = loc(fused[#loc67, #loc68])
#loc217 = loc(fused[#loc73, #loc74])
#loc220 = loc(fused[#loc84, #loc85])
#loc221 = loc(fused[#loc88, #loc89])
#loc222 = loc(fused[#loc92, #loc91])
#loc223 = loc(fused[#loc93, #loc94])
#loc224 = loc(fused[#loc95, #loc96])
#loc225 = loc(fused[#loc97, #loc98])
#loc226 = loc(fused[#loc97, #loc99])
#loc227 = loc(fused[#loc100, #loc101])
#loc228 = loc(fused[#loc103, #loc102])
#loc229 = loc(fused[#loc104, #loc105])
#loc230 = loc(fused[#loc107, #loc106])
#loc231 = loc(fused[#loc108, #loc109])
#loc232 = loc(fused[#loc111, #loc105])
#loc233 = loc(fused[#loc114, #loc115])
#loc234 = loc(fused[#loc113, #loc115])
#loc235 = loc(fused[#loc112, #loc116])
#loc236 = loc(fused[#loc117, #loc116])
#loc237 = loc(fused[#loc118, #loc119])
#loc238 = loc(fused[#loc120, #loc121])
#loc239 = loc(fused[#loc122, #loc119])
#loc240 = loc(fused[#loc127, #loc126])
#loc241 = loc(fused[#loc135, #loc134])
#loc242 = loc(fused[#loc136, #loc137])
#loc243 = loc(fused[#loc139, #loc138])
#loc244 = loc(fused[#loc140, #loc141])
#loc245 = loc(fused[#loc143, #loc137])
#loc246 = loc(fused[#loc147, #loc146])
#loc247 = loc(fused[#loc148, #loc149])
#loc248 = loc(fused[#loc150, #loc151])
#loc249 = loc(fused[#loc150, #loc152])
#loc250 = loc(fused[#loc153, #loc154])
#loc251 = loc(fused[#loc156, #loc155])
#loc252 = loc(fused[#loc157, #loc158])
#loc253 = loc(fused[#loc160, #loc159])
#loc254 = loc(fused[#loc161, #loc162])
#loc255 = loc(fused[#loc164, #loc158])
#loc256 = loc(fused[#loc166, #loc165])
#loc257 = loc(fused[#loc168, #loc167])
#loc258 = loc(fused[#loc176, #loc175])
#loc259 = loc(fused[#loc177, #loc178])
#loc260 = loc(fused[#loc180, #loc179])
#loc261 = loc(fused[#loc181, #loc182])
#loc262 = loc(fused[#loc185, #loc184])
