!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc226)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc227)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc15)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc15)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          cir.yield %23 : !u32i loc(#loc18)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
          cir.yield %27 : !u32i loc(#loc18)
        }) : (!cir.bool) -> !u32i loc(#loc18)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc18)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc236)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc22)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc239)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc28)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc239)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc31)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc241)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc34)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc242)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc35)
              cir.condition(%15) loc(#loc35)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc37)
              } loc(#loc243)
              cir.yield loc(#loc30)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc39)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc244)
              cir.yield loc(#loc240)
            } loc(#loc240)
          } loc(#loc240)
        } loc(#loc238)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc7)
  } loc(#loc228)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc41)
  } loc(#loc245)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc251)
    cir.return %2 : !s32i loc(#loc251)
  } loc(#loc250)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc253)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc60)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc256)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc64)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc67)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc67)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc67)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc67)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc67)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc67)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc67)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc67)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc67)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc67)
          cir.yield %23 : !u32i loc(#loc67)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc67)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc67)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc67)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc67)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc67)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc67)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc67)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc67)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc67)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc67)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc67)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc67)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc67)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc67)
          cir.yield %27 : !u32i loc(#loc67)
        }) : (!cir.bool) -> !u32i loc(#loc67)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc67)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc258)
      } loc(#loc257)
    } loc(#loc255)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc71)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc71)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
      } else {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc263)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc80)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc80)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc263)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc84)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i loc(#loc265)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc85)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc88)
              %16 = cir.cmp(le, %14, %15) : !s32i, !s32i loc(#loc266)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc89)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc86)
                cir.yield %19 : !cir.bool loc(#loc86)
              }, false {
                %19 = cir.const #false loc(#loc86)
                cir.yield %19 : !cir.bool loc(#loc86)
              }) : (!cir.bool) -> !cir.bool loc(#loc86)
              cir.yield %18 : !cir.bool loc(#loc86)
            }, false {
              %14 = cir.const #false loc(#loc86)
              cir.yield %14 : !cir.bool loc(#loc86)
            }) : (!cir.bool) -> !cir.bool loc(#loc86)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc93)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc93)
                cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc269)
                cir.for : cond {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc95)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc96)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc96)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc270)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc97)
                  cir.condition(%20) loc(#loc97)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc99)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc99)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc100)
                  } loc(#loc271)
                  cir.yield loc(#loc92)
                } step {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc101)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc102)
                  cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc272)
                  cir.yield loc(#loc268)
                } loc(#loc268)
              } loc(#loc268)
            } loc(#loc267)
          } loc(#loc264)
        } loc(#loc262)
      } loc(#loc261)
    } loc(#loc259)
    cir.return loc(#loc56)
  } loc(#loc252)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc105)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc274)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc274)
    cir.return %2 : !s32i loc(#loc274)
  } loc(#loc273)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc276)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc112)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc279)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc116)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc116)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc119)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc119)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc119)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
          cir.yield %23 : !u32i loc(#loc119)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc119)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc119)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc119)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc119)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc119)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc119)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc119)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc119)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc119)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc119)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc119)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc119)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc119)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc119)
          cir.yield %27 : !u32i loc(#loc119)
        }) : (!cir.bool) -> !u32i loc(#loc119)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc119)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
      } loc(#loc280)
    } loc(#loc278)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc283)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc123)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc123)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc286)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc129)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc129)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc286)
          cir.scope {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
            %10 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %11 = cir.cmp(gt, %9, %10) : !s32i, !s32i loc(#loc288)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc134)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc137)
              %16 = cir.cmp(le, %14, %15) : !s32i, !s32i loc(#loc289)
              %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc138)
              %18 = cir.ternary(%17, true {
                %19 = cir.const #true loc(#loc135)
                cir.yield %19 : !cir.bool loc(#loc135)
              }, false {
                %19 = cir.const #false loc(#loc135)
                cir.yield %19 : !cir.bool loc(#loc135)
              }) : (!cir.bool) -> !cir.bool loc(#loc135)
              cir.yield %18 : !cir.bool loc(#loc135)
            }, false {
              %14 = cir.const #false loc(#loc135)
              cir.yield %14 : !cir.bool loc(#loc135)
            }) : (!cir.bool) -> !cir.bool loc(#loc135)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc142)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc142)
                cir.store %15, %6 : !u64i, !cir.ptr<!u64i> loc(#loc292)
                cir.for : cond {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc144)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc145)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !s32i loc(#loc293)
                  %20 = cir.cast(int_to_bool, %19 : !s32i), !cir.bool loc(#loc146)
                  cir.condition(%20) loc(#loc146)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc148)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc148)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc149)
                  } loc(#loc294)
                  cir.yield loc(#loc141)
                } step {
                  %16 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc150)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc151)
                  cir.store %17, %6 : !u64i, !cir.ptr<!u64i> loc(#loc295)
                  cir.yield loc(#loc291)
                } loc(#loc291)
              } loc(#loc291)
            } loc(#loc290)
          } loc(#loc287)
        } loc(#loc285)
      } loc(#loc284)
    } loc(#loc282)
    cir.return loc(#loc108)
  } loc(#loc275)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc297)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc157)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc298)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc300)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc161)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc161)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc167)
      } else {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc168)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc302)
      } loc(#loc301)
    } loc(#loc299)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc304)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc172)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc172)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc307)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc178)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc307)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc181)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc181)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc309)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc183)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc184)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc184)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc310)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc185)
              cir.condition(%15) loc(#loc185)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc187)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc187)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc188)
              } loc(#loc311)
              cir.yield loc(#loc180)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc189)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc190)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc312)
              cir.yield loc(#loc308)
            } loc(#loc308)
          } loc(#loc308)
        } loc(#loc306)
      } loc(#loc305)
    } loc(#loc303)
    cir.return loc(#loc153)
  } loc(#loc296)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc314)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc196)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc315)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc317)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc200)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc200)
      cir.if %5 {
        %6 = cir.const #cir.int<20> : !s32i loc(#loc203)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
      } loc(#loc318)
    } loc(#loc316)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc321)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc207)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc207)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc324)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc213)
          %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc213)
          cir.store %8, %6 : !u64i, !cir.ptr<!u64i> loc(#loc324)
          cir.scope {
            %9 = cir.const #cir.int<0> : !s32i loc(#loc216)
            %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc216)
            cir.store %10, %6 : !u64i, !cir.ptr<!u64i> loc(#loc326)
            cir.for : cond {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc218)
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc219)
              %14 = cir.cmp(lt, %11, %13) : !u64i, !s32i loc(#loc327)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc220)
              cir.condition(%15) loc(#loc220)
            } body {
              cir.scope {
                %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc222)
                %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc222)
                cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc223)
              } loc(#loc328)
              cir.yield loc(#loc215)
            } step {
              %11 = cir.load %6 : !cir.ptr<!u64i>, !u64i loc(#loc224)
              %12 = cir.unary(inc, %11) : !u64i, !u64i loc(#loc225)
              cir.store %12, %6 : !u64i, !cir.ptr<!u64i> loc(#loc329)
              cir.yield loc(#loc325)
            } loc(#loc325)
          } loc(#loc325)
        } loc(#loc323)
      } loc(#loc322)
    } loc(#loc320)
    cir.return loc(#loc192)
  } loc(#loc313)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_08.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":52:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":35:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":56:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":37:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":37:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":39:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":44:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:8)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":40:26)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":41:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":43:17)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":43:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":55:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:8)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":45:26)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":46:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":47:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":54:9)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":48:13)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":48:24)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":53:13)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:22)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:18)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:25)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:37)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:27)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":51:13)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":52:17)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:45)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":50:44)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":174:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":180:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":176:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":176:14)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":177:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":177:14)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":178:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":178:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":179:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":179:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":23:1)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":26:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":25:12)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":25:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":76:19)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":63:1)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":92:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":65:5)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":65:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:14)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:13)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":67:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":72:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:8)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":68:26)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":69:5)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":71:17)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":71:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:5)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":91:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:8)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":73:27)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":74:5)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":77:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":79:5)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":76:9)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":80:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":90:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":81:13)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":81:24)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":89:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:17)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:25)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:23)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:27)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:30)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:39)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":83:36)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":84:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:17)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":88:17)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:26)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:22)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:29)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:41)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:31)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":86:17)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":87:31)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":87:21)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:49)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":85:48)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":28:1)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":31:1)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":30:12)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":30:5)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":95:1)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":119:1)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":97:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":97:9)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:14)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:13)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":99:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:5)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":104:5)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:8)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":100:26)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":101:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":103:17)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":103:9)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:5)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":118:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:8)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":105:26)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":106:5)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":107:9)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":117:9)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":108:13)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":108:24)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:13)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":116:13)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:17)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:25)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:23)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:27)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:30)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:39)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":110:36)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":111:13)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:17)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":115:17)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:26)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:22)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:29)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:41)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:31)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":113:17)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":114:31)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":114:21)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:49)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":112:48)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":122:1)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":148:1)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":124:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":124:9)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:14)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:13)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":126:5)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":136:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:8)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":127:27)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":128:5)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":131:5)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":133:5)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":130:19)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":130:9)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":135:17)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":135:9)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:5)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":147:5)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:8)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":137:26)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":138:5)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":139:9)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":146:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":140:13)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":140:24)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:13)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":145:13)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:22)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:18)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:25)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:37)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:27)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":143:13)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":144:27)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":144:17)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:45)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":142:44)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":151:1)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":172:1)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":153:5)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":153:9)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:14)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:13)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":155:5)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":160:5)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:8)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":156:26)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":157:5)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":159:17)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":159:9)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:5)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":171:5)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:8)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":161:26)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":162:5)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":163:9)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":170:9)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":164:13)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":164:24)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:13)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":169:13)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:22)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:18)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:25)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:37)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:27)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":167:13)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":168:27)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":168:17)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:45)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_08.c":166:44)
#loc226 = loc(fused[#loc1, #loc2])
#loc227 = loc(fused[#loc3, #loc4])
#loc228 = loc(fused[#loc6, #loc7])
#loc229 = loc(fused[#loc8, #loc9])
#loc230 = loc(fused[#loc12, #loc10])
#loc231 = loc(fused[#loc13, #loc14])
#loc232 = loc(fused[#loc15, #loc16])
#loc233 = loc(fused[#loc17, #loc14])
#loc234 = loc(fused[#loc19, #loc18])
#loc235 = loc(fused[#loc20, #loc21])
#loc236 = loc(fused[#loc22, #loc23])
#loc237 = loc(fused[#loc24, #loc21])
#loc238 = loc(fused[#loc25, #loc26])
#loc239 = loc(fused[#loc27, #loc28])
#loc240 = loc(fused[#loc29, #loc30])
#loc241 = loc(fused[#loc32, #loc31])
#loc242 = loc(fused[#loc33, #loc34])
#loc243 = loc(fused[#loc36, #loc30])
#loc244 = loc(fused[#loc39, #loc38])
#loc245 = loc(fused[#loc40, #loc41])
#loc246 = loc(fused[#loc42, #loc43])
#loc247 = loc(fused[#loc44, #loc45])
#loc248 = loc(fused[#loc46, #loc47])
#loc249 = loc(fused[#loc48, #loc49])
#loc250 = loc(fused[#loc50, #loc51])
#loc251 = loc(fused[#loc53, #loc52])
#loc252 = loc(fused[#loc55, #loc56])
#loc253 = loc(fused[#loc57, #loc58])
#loc254 = loc(fused[#loc61, #loc59])
#loc255 = loc(fused[#loc62, #loc63])
#loc256 = loc(fused[#loc64, #loc65])
#loc257 = loc(fused[#loc66, #loc63])
#loc258 = loc(fused[#loc68, #loc67])
#loc259 = loc(fused[#loc69, #loc70])
#loc260 = loc(fused[#loc71, #loc72])
#loc261 = loc(fused[#loc73, #loc74, #loc75, #loc70])
#loc262 = loc(fused[#loc77, #loc78])
#loc263 = loc(fused[#loc79, #loc80])
#loc264 = loc(fused[#loc81, #loc82])
#loc265 = loc(fused[#loc83, #loc84])
#loc266 = loc(fused[#loc87, #loc88])
#loc267 = loc(fused[#loc90, #loc82])
#loc268 = loc(fused[#loc91, #loc92])
#loc269 = loc(fused[#loc94, #loc93])
#loc270 = loc(fused[#loc95, #loc96])
#loc271 = loc(fused[#loc98, #loc92])
#loc272 = loc(fused[#loc102, #loc101])
#loc273 = loc(fused[#loc103, #loc104])
#loc274 = loc(fused[#loc106, #loc105])
#loc275 = loc(fused[#loc107, #loc108])
#loc276 = loc(fused[#loc109, #loc110])
#loc277 = loc(fused[#loc113, #loc111])
#loc278 = loc(fused[#loc114, #loc115])
#loc279 = loc(fused[#loc116, #loc117])
#loc280 = loc(fused[#loc118, #loc115])
#loc281 = loc(fused[#loc120, #loc119])
#loc282 = loc(fused[#loc121, #loc122])
#loc283 = loc(fused[#loc123, #loc124])
#loc284 = loc(fused[#loc125, #loc122])
#loc285 = loc(fused[#loc126, #loc127])
#loc286 = loc(fused[#loc128, #loc129])
#loc287 = loc(fused[#loc130, #loc131])
#loc288 = loc(fused[#loc132, #loc133])
#loc289 = loc(fused[#loc136, #loc137])
#loc290 = loc(fused[#loc139, #loc131])
#loc291 = loc(fused[#loc140, #loc141])
#loc292 = loc(fused[#loc143, #loc142])
#loc293 = loc(fused[#loc144, #loc145])
#loc294 = loc(fused[#loc147, #loc141])
#loc295 = loc(fused[#loc151, #loc150])
#loc296 = loc(fused[#loc152, #loc153])
#loc297 = loc(fused[#loc154, #loc155])
#loc298 = loc(fused[#loc158, #loc156])
#loc299 = loc(fused[#loc159, #loc160])
#loc300 = loc(fused[#loc161, #loc162])
#loc301 = loc(fused[#loc163, #loc164, #loc165, #loc160])
#loc302 = loc(fused[#loc169, #loc168])
#loc303 = loc(fused[#loc170, #loc171])
#loc304 = loc(fused[#loc172, #loc173])
#loc305 = loc(fused[#loc174, #loc171])
#loc306 = loc(fused[#loc175, #loc176])
#loc307 = loc(fused[#loc177, #loc178])
#loc308 = loc(fused[#loc179, #loc180])
#loc309 = loc(fused[#loc182, #loc181])
#loc310 = loc(fused[#loc183, #loc184])
#loc311 = loc(fused[#loc186, #loc180])
#loc312 = loc(fused[#loc190, #loc189])
#loc313 = loc(fused[#loc191, #loc192])
#loc314 = loc(fused[#loc193, #loc194])
#loc315 = loc(fused[#loc197, #loc195])
#loc316 = loc(fused[#loc198, #loc199])
#loc317 = loc(fused[#loc200, #loc201])
#loc318 = loc(fused[#loc202, #loc199])
#loc319 = loc(fused[#loc204, #loc203])
#loc320 = loc(fused[#loc205, #loc206])
#loc321 = loc(fused[#loc207, #loc208])
#loc322 = loc(fused[#loc209, #loc206])
#loc323 = loc(fused[#loc210, #loc211])
#loc324 = loc(fused[#loc212, #loc213])
#loc325 = loc(fused[#loc214, #loc215])
#loc326 = loc(fused[#loc217, #loc216])
#loc327 = loc(fused[#loc218, #loc219])
#loc328 = loc(fused[#loc221, #loc215])
#loc329 = loc(fused[#loc225, #loc224])
