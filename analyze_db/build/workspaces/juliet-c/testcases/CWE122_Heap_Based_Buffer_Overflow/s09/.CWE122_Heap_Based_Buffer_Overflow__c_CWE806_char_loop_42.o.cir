!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:25)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:32)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:29)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:36)
#loc166 = loc(fused[#loc7, #loc8])
#loc198 = loc(fused[#loc91, #loc92])
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc163)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc164)
  cir.func internal private @badSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc7, #loc8])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc166)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc6)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc10)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc10)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc11)
    %5 = cir.const #cir.int<100> : !s32i loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc12)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc167)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc16)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc17)
    %12 = cir.const #cir.int<100> : !s32i loc(#loc18)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc18)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc20)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc168)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc169)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc169)
  } loc(#loc165)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc170)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc171)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc172)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc174)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc33)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc34)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc34)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc175)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc176)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc33)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc177)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc178)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc41)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc42)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc180)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc44)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc46)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc44)
      } loc(#loc181)
    } loc(#loc179)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %9 = cir.call @badSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc48)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc182)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc184)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc185)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc186)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc184)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc184)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc58)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc58)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc187)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc64)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc64)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc189)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc66)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc67)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !cir.bool loc(#loc190)
          cir.condition(%32) loc(#loc68)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc72)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc70)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc73)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc74)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc74)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc192)
          } loc(#loc191)
          cir.yield loc(#loc63)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc75)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc76)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc193)
          cir.yield loc(#loc188)
        } loc(#loc188)
      } loc(#loc188)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc77)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc77)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc78)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc79)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc78)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc80)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc80)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc194)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc81)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc82)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc83)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc84)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc84)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc83)
    } loc(#loc183)
    cir.return loc(#loc30)
  } loc(#loc173)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc196)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc87)
    cir.return loc(#loc86)
  } loc(#loc195)
  cir.func internal private @goodG2BSource(%arg0: !cir.ptr<!s8i> loc(fused[#loc91, #loc92])) -> !cir.ptr<!s8i> extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["__retval"] {alignment = 8 : i64} loc(#loc90)
    cir.store %arg0, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc93)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc94)
    %4 = cir.const #cir.int<65> : !s32i loc(#loc95)
    %5 = cir.const #cir.int<50> : !s32i loc(#loc96)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %7 = cir.binop(sub, %5, %6) nsw : !s32i loc(#loc96)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc96)
    cir.libc.memset %8 bytes from %3 set to %4 : !cir.ptr<!void>, !s32i, !u64i loc(#loc199)
    %9 = cir.const #cir.int<0> : !s32i loc(#loc100)
    %10 = cir.cast(integral, %9 : !s32i), !s8i loc(#loc100)
    %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    %12 = cir.const #cir.int<50> : !s32i loc(#loc102)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc103)
    %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc102)
    %15 = cir.ptr_stride(%11 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc104)
    cir.store %10, %15 : !s8i, !cir.ptr<!s8i> loc(#loc200)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc105)
    cir.store %16, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc201)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc201)
    cir.return %17 : !cir.ptr<!s8i> loc(#loc201)
  } loc(#loc197)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc203)
    %1 = cir.get_global @malloc : !cir.ptr<!cir.func<(!u64i) -> !cir.ptr<!void>>> loc(#loc111)
    %2 = cir.const #cir.int<100> : !s32i loc(#loc112)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc112)
    %4 = cir.const #cir.int<1> : !u64i loc(#loc204)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc205)
    %6 = cir.call @malloc(%5) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc111)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc206)
    cir.store %7, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc207)
    cir.scope {
      %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
      %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc120)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc120)
      %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc209)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc122)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc124)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc122)
      } loc(#loc210)
    } loc(#loc208)
    %8 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
    %9 = cir.call @goodG2BSource(%8) : (!cir.ptr<!s8i>) -> !cir.ptr<!s8i> loc(#loc126)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc211)
    cir.scope {
      %10 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc213)
      %11 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc214)
      %12 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen"] {alignment = 8 : i64} loc(#loc215)
      %13 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc213)
      cir.store %13, %10 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc213)
      %14 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc136)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc137)
      %16 = cir.call @strlen(%15) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc136)
      cir.store %16, %12 : !u64i, !cir.ptr<!u64i> loc(#loc216)
      cir.scope {
        %28 = cir.const #cir.int<0> : !s32i loc(#loc142)
        %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc142)
        cir.store %29, %11 : !u64i, !cir.ptr<!u64i> loc(#loc218)
        cir.for : cond {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc144)
          %31 = cir.load %12 : !cir.ptr<!u64i>, !u64i loc(#loc145)
          %32 = cir.cmp(lt, %30, %31) : !u64i, !cir.bool loc(#loc219)
          cir.condition(%32) loc(#loc146)
        } body {
          cir.scope {
            %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
            %31 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc149)
            %32 = cir.ptr_stride(%30 : !cir.ptr<!s8i>, %31 : !u64i), !cir.ptr<!s8i> loc(#loc150)
            %33 = cir.load %32 : !cir.ptr<!s8i>, !s8i loc(#loc148)
            %34 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc151)
            %35 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc152)
            %36 = cir.ptr_stride(%35 : !cir.ptr<!s8i>, %34 : !u64i), !cir.ptr<!s8i> loc(#loc152)
            cir.store %33, %36 : !s8i, !cir.ptr<!s8i> loc(#loc221)
          } loc(#loc220)
          cir.yield loc(#loc141)
        } step {
          %30 = cir.load %11 : !cir.ptr<!u64i>, !u64i loc(#loc153)
          %31 = cir.unary(inc, %30) : !u64i, !u64i loc(#loc154)
          cir.store %31, %11 : !u64i, !cir.ptr<!u64i> loc(#loc222)
          cir.yield loc(#loc217)
        } loc(#loc217)
      } loc(#loc217)
      %17 = cir.const #cir.int<0> : !s32i loc(#loc155)
      %18 = cir.cast(integral, %17 : !s32i), !s8i loc(#loc155)
      %19 = cir.const #cir.int<50> : !s32i loc(#loc156)
      %20 = cir.const #cir.int<1> : !s32i loc(#loc157)
      %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc156)
      %22 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc158)
      %23 = cir.ptr_stride(%22 : !cir.ptr<!s8i>, %21 : !s32i), !cir.ptr<!s8i> loc(#loc158)
      cir.store %18, %23 : !s8i, !cir.ptr<!s8i> loc(#loc223)
      %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc159)
      cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc160)
      %25 = cir.get_global @free : !cir.ptr<!cir.func<(!cir.ptr<!void>)>> loc(#loc161)
      %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc162)
      %27 = cir.cast(bitcast, %26 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc162)
      cir.call @free(%27) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc161)
    } loc(#loc212)
    cir.return loc(#loc108)
  } loc(#loc202)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s09/CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":29:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":24:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:18)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:23)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:27)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":26:28)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:19)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:10)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":27:15)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":28:12)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":28:5)
#loc23 = loc("/usr/include/string.h":407:1)
#loc24 = loc("/usr/include/string.h":408:33)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("/usr/include/stdlib.h":687:1)
#loc28 = loc("/usr/include/stdlib.h":687:32)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":31:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":50:1)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":33:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":33:12)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:20)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:31)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:42)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:43)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:33)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:17)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:23)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:24)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":35:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:22)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:12)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":36:26)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":37:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":49:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":38:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":38:25)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:16)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":39:19)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:19)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:26)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":40:30)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:9)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":45:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:18)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:21)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:25)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:23)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":43:9)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:23)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:28)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:29)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":44:13)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:35)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":42:34)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:22)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:14)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:17)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":46:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":47:19)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":47:9)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":48:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":48:14)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":86:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":89:1)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":88:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":88:13)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":56:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":62:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":57:1)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:18)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:23)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:26)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":59:27)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:18)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:10)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:13)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":60:14)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":61:12)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":61:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":65:1)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":84:1)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":67:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":67:12)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:20)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:27)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:31)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:42)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:43)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":68:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:5)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:33)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:17)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:23)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:24)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:30)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":69:29)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:26)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:12)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":70:30)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":71:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":83:5)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":72:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":72:25)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:16)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":73:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:19)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:26)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:9)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":74:30)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":79:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:18)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:14)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:21)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:23)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":77:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:23)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:28)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:29)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:18)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":78:13)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:35)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":76:34)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:22)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:14)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:17)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":80:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":81:19)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":81:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":82:9)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE806_char_loop_42.c":82:14)
#loc163 = loc(fused[#loc1, #loc2])
#loc164 = loc(fused[#loc3, #loc4])
#loc165 = loc(fused[#loc5, #loc6])
#loc167 = loc(fused[#loc14, #loc15])
#loc168 = loc(fused[#loc17, #loc16])
#loc169 = loc(fused[#loc22, #loc21])
#loc170 = loc(fused[#loc23, #loc24])
#loc171 = loc(fused[#loc25, #loc26])
#loc172 = loc(fused[#loc27, #loc28])
#loc173 = loc(fused[#loc29, #loc30])
#loc174 = loc(fused[#loc31, #loc32])
#loc175 = loc(fused[#loc35, #loc36])
#loc176 = loc(fused[#loc34, #loc36])
#loc177 = loc(fused[#loc33, #loc37])
#loc178 = loc(fused[#loc38, #loc37])
#loc179 = loc(fused[#loc39, #loc40])
#loc180 = loc(fused[#loc41, #loc42])
#loc181 = loc(fused[#loc43, #loc40])
#loc182 = loc(fused[#loc49, #loc50])
#loc183 = loc(fused[#loc51, #loc52])
#loc184 = loc(fused[#loc53, #loc54])
#loc185 = loc(fused[#loc55, #loc56])
#loc186 = loc(fused[#loc55, #loc57])
#loc187 = loc(fused[#loc60, #loc61])
#loc188 = loc(fused[#loc62, #loc63])
#loc189 = loc(fused[#loc65, #loc64])
#loc190 = loc(fused[#loc66, #loc67])
#loc191 = loc(fused[#loc69, #loc63])
#loc192 = loc(fused[#loc74, #loc72])
#loc193 = loc(fused[#loc76, #loc75])
#loc194 = loc(fused[#loc80, #loc77])
#loc195 = loc(fused[#loc85, #loc86])
#loc196 = loc(fused[#loc87, #loc88])
#loc197 = loc(fused[#loc89, #loc90])
#loc199 = loc(fused[#loc98, #loc99])
#loc200 = loc(fused[#loc101, #loc100])
#loc201 = loc(fused[#loc106, #loc105])
#loc202 = loc(fused[#loc107, #loc108])
#loc203 = loc(fused[#loc109, #loc110])
#loc204 = loc(fused[#loc113, #loc114])
#loc205 = loc(fused[#loc112, #loc114])
#loc206 = loc(fused[#loc111, #loc115])
#loc207 = loc(fused[#loc116, #loc115])
#loc208 = loc(fused[#loc117, #loc118])
#loc209 = loc(fused[#loc119, #loc120])
#loc210 = loc(fused[#loc121, #loc118])
#loc211 = loc(fused[#loc127, #loc128])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc132])
#loc214 = loc(fused[#loc133, #loc134])
#loc215 = loc(fused[#loc133, #loc135])
#loc216 = loc(fused[#loc138, #loc139])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc143, #loc142])
#loc219 = loc(fused[#loc144, #loc145])
#loc220 = loc(fused[#loc147, #loc141])
#loc221 = loc(fused[#loc152, #loc150])
#loc222 = loc(fused[#loc154, #loc153])
#loc223 = loc(fused[#loc158, #loc155])
