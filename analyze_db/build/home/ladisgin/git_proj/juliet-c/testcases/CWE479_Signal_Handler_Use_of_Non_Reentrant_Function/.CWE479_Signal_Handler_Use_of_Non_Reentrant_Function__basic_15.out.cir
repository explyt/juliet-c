!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc11 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:23)
#loc12 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:27)
#loc60 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":109:10)
#loc61 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":109:14)
#loc62 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":109:20)
#loc63 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":109:32)
#loc82 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:24)
#loc83 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:28)
#loc120 = loc(fused[#loc11, #loc12])
#loc134 = loc(fused[#loc60, #loc61])
#loc135 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc82, #loc83])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @signal(!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc115)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc116)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc117)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc118)
  cir.func internal private @helperBad(%arg0: !s32i loc(fused[#loc11, #loc12])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc120)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["voidPointer", init] {alignment = 8 : i64} loc(#loc121)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc15)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc16)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc17)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc17)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc16)
    cir.store %5, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc121)
    cir.scope {
      %8 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      %9 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc21)
      %10 = cir.cmp(eq, %8, %9) : !cir.ptr<!void>, !cir.bool loc(#loc123)
      cir.if %10 {
        %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc23)
        %12 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc25)
        cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc23)
      } loc(#loc124)
    } loc(#loc122)
    %6 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc26)
    %7 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc27)
    cir.call @free(%7) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc26)
    cir.return loc(#loc10)
  } loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc30)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc35)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc37)
          %2 = cir.get_global @helperBad : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc38)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc39)
          cir.break loc(#loc40)
        } loc(#loc36)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc30)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc30)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          cir.break loc(#loc43)
        } loc(#loc41)
        cir.yield loc(#loc33)
      } loc(#loc33)
    } loc(#loc127)
    cir.return loc(#loc32)
  } loc(#loc126)
  cir.func no_proto @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc129)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc128)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc131)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc54)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc57)
  cir.func @main(%arg0: !s32i loc(fused[#loc60, #loc61]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc62, #loc63])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc59)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc64)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc64)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc65)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc66)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc66)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc67)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc54)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc54)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %8 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc136)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_good() : () -> () loc(#loc69)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc55)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc55)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc56)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %13 = cir.get_global @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call @CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15_bad() : () -> () loc(#loc73)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc57)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc76)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %17 : !s32i loc(#loc138)
  } loc(#loc133)
  cir.global "private" internal dsolocal @volatileSigAtomic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc139)
  cir.func internal private @helperGood(%arg0: !s32i loc(fused[#loc82, #loc83])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["sig", init] {alignment = 4 : i64} loc(#loc141)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %2 = cir.get_global @volatileSigAtomic : !cir.ptr<!s32i> loc(#loc139)
    cir.store volatile %1, %2 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.return loc(#loc81)
  } loc(#loc140)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc91)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc93)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc93)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc94)
          cir.break loc(#loc95)
        } loc(#loc92)
        cir.case(default, []) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc97)
          %2 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc98)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc99)
          cir.break loc(#loc100)
        } loc(#loc96)
        cir.yield loc(#loc89)
      } loc(#loc89)
    } loc(#loc144)
    cir.return loc(#loc88)
  } loc(#loc143)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc105)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.const #cir.int<2> : !s32i loc(#loc107)
          %2 = cir.get_global @helperGood : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc108)
          %3 = cir.call @signal(%1, %2) : (!s32i, !cir.ptr<!cir.func<!void (!s32i)>>) -> !cir.ptr<!cir.func<!void (!s32i)>> extra(#fn_attr) loc(#loc109)
          cir.break loc(#loc110)
        } loc(#loc106)
        cir.case(default, []) {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc112)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc112)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc113)
          cir.break loc(#loc114)
        } loc(#loc111)
        cir.yield loc(#loc103)
      } loc(#loc103)
    } loc(#loc146)
    cir.return loc(#loc102)
  } loc(#loc145)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function/CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":0:0)
#loc1 = loc("/usr/include/signal.h":88:1)
#loc2 = loc("/usr/include/signal.h":89:6)
#loc3 = loc("/usr/include/stdlib.h":672:1)
#loc4 = loc("/usr/include/stdlib.h":672:45)
#loc5 = loc("/usr/include/stdlib.h":756:1)
#loc6 = loc("/usr/include/stdlib.h":756:70)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":20:1)
#loc10 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":31:1)
#loc13 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:5)
#loc14 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:34)
#loc15 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":21:1)
#loc16 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:25)
#loc17 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":28:32)
#loc18 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:5)
#loc19 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:40)
#loc20 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:9)
#loc21 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:24)
#loc22 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:30)
#loc23 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:31)
#loc24 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:37)
#loc25 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":29:36)
#loc26 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":30:5)
#loc27 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":30:10)
#loc28 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc30 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":55:19)
#loc31 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":46:1)
#loc32 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":58:1)
#loc33 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":48:5)
#loc34 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":57:5)
#loc35 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":48:12)
#loc36 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":50:5)
#loc37 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:16)
#loc38 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:24)
#loc39 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":51:9)
#loc40 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":52:9)
#loc41 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":53:5)
#loc42 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":55:9)
#loc43 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":56:9)
#loc44 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":94:1)
#loc45 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":98:1)
#loc46 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":96:5)
#loc47 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":96:11)
#loc48 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":97:5)
#loc49 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":97:11)
#loc50 = loc("/usr/include/stdlib.h":575:1)
#loc51 = loc("/usr/include/stdlib.h":575:41)
#loc52 = loc("/usr/include/time.h":76:1)
#loc53 = loc("/usr/include/time.h":76:38)
#loc54 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":114:15)
#loc55 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":116:15)
#loc56 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":119:15)
#loc57 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":121:15)
#loc58 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":109:1)
#loc59 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":124:1)
#loc64 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":110:1)
#loc65 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":112:27)
#loc66 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":112:22)
#loc67 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":112:5)
#loc68 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":114:5)
#loc69 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":115:5)
#loc70 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":115:72)
#loc71 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":116:5)
#loc72 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":119:5)
#loc73 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":120:5)
#loc74 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":120:71)
#loc75 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":121:5)
#loc76 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":123:12)
#loc77 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":123:5)
#loc78 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":33:1)
#loc79 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":33:50)
#loc80 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":35:1)
#loc81 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":42:1)
#loc84 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":36:1)
#loc85 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":41:25)
#loc86 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":41:5)
#loc87 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":65:1)
#loc88 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":77:1)
#loc89 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":67:5)
#loc90 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":76:5)
#loc91 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":67:12)
#loc92 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":69:5)
#loc93 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":71:19)
#loc94 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":71:9)
#loc95 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":72:9)
#loc96 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":73:5)
#loc97 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:16)
#loc98 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:24)
#loc99 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":74:9)
#loc100 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":75:9)
#loc101 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":80:1)
#loc102 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":92:1)
#loc103 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":82:5)
#loc104 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":91:5)
#loc105 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":82:12)
#loc106 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":84:5)
#loc107 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:16)
#loc108 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:24)
#loc109 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":85:9)
#loc110 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":86:9)
#loc111 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":87:5)
#loc112 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":89:19)
#loc113 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":89:9)
#loc114 = loc("CWE479_Signal_Handler_Use_of_Non_Reentrant_Function__basic_15.c":90:9)
#loc115 = loc(fused[#loc1, #loc2])
#loc116 = loc(fused[#loc3, #loc4])
#loc117 = loc(fused[#loc5, #loc6])
#loc118 = loc(fused[#loc7, #loc8])
#loc119 = loc(fused[#loc9, #loc10])
#loc121 = loc(fused[#loc13, #loc14])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc22, #loc19])
#loc125 = loc(fused[#loc28, #loc29])
#loc126 = loc(fused[#loc31, #loc32])
#loc127 = loc(fused[#loc33, #loc34])
#loc128 = loc(fused[#loc44, #loc45])
#loc129 = loc(fused[#loc46, #loc47])
#loc130 = loc(fused[#loc48, #loc49])
#loc131 = loc(fused[#loc50, #loc51])
#loc132 = loc(fused[#loc52, #loc53])
#loc133 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc73, #loc74])
#loc138 = loc(fused[#loc77, #loc76])
#loc139 = loc(fused[#loc78, #loc79])
#loc140 = loc(fused[#loc80, #loc81])
#loc142 = loc(fused[#loc86, #loc85])
#loc143 = loc(fused[#loc87, #loc88])
#loc144 = loc(fused[#loc89, #loc90])
#loc145 = loc(fused[#loc101, #loc102])
#loc146 = loc(fused[#loc103, #loc104])
