!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc230)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc231)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc233)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc12)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc16)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc17)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc17)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
          cir.yield %21 : !u32i loc(#loc17)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc17)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc17)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc17)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc17)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc17)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc17)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc17)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc17)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc17)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc17)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc17)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc17)
          cir.yield %25 : !u32i loc(#loc17)
        }) : (!cir.bool) -> !u32i loc(#loc17)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc17)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc236)
        cir.break loc(#loc19)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc20)
        cir.break loc(#loc21)
      }
      ] loc(#loc14)
    } loc(#loc235)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc24)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc239)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc28)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc239)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc31)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc31)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc241)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc33)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc34)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !s32i loc(#loc242)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc35)
              cir.condition(%13) loc(#loc35)
            } body {
              cir.scope {
                %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc6)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc6)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc37)
              } loc(#loc243)
              cir.yield loc(#loc30)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc38)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc39)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc244)
              cir.yield loc(#loc240)
            } loc(#loc240)
          } loc(#loc240)
        } loc(#loc238)
        cir.break loc(#loc40)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc42)
        cir.break loc(#loc43)
      }
      ] loc(#loc22)
    } loc(#loc237)
    cir.return loc(#loc8)
  } loc(#loc232)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_for_loop_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc248)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc249)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc245)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc251)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc59)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc252)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc63)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc64)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc64)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc64)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc64)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc64)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc64)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc64)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc64)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc64)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc64)
          cir.yield %21 : !u32i loc(#loc64)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc64)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc64)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc64)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc64)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc64)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc64)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc64)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc64)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc64)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc64)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc64)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc64)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc64)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc64)
          cir.yield %25 : !u32i loc(#loc64)
        }) : (!cir.bool) -> !u32i loc(#loc64)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc64)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc254)
        cir.break loc(#loc66)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc68)
        cir.break loc(#loc69)
      }
      ] loc(#loc61)
    } loc(#loc253)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc72)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc73)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc73)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc74)
        cir.break loc(#loc75)
      },
      case (default) {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc257)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc79)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc257)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc83)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc259)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc84)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc86)
              %13 = cir.const #cir.int<20> : !s32i loc(#loc87)
              %14 = cir.cmp(le, %12, %13) : !s32i, !s32i loc(#loc260)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc88)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc85)
                cir.yield %17 : !cir.bool loc(#loc85)
              }, false {
                %17 = cir.const #false loc(#loc85)
                cir.yield %17 : !cir.bool loc(#loc85)
              }) : (!cir.bool) -> !cir.bool loc(#loc85)
              cir.yield %16 : !cir.bool loc(#loc85)
            }, false {
              %12 = cir.const #false loc(#loc85)
              cir.yield %12 : !cir.bool loc(#loc85)
            }) : (!cir.bool) -> !cir.bool loc(#loc85)
            cir.if %11 {
              cir.scope {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc92)
                %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc92)
                cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc263)
                cir.for : cond {
                  %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc94)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc95)
                  %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc264)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc96)
                  cir.condition(%18) loc(#loc96)
                } body {
                  cir.scope {
                    %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc98)
                    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc98)
                    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
                  } loc(#loc265)
                  cir.yield loc(#loc91)
                } step {
                  %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc100)
                  %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc101)
                  cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc266)
                  cir.yield loc(#loc262)
                } loc(#loc262)
              } loc(#loc262)
            } loc(#loc261)
          } loc(#loc258)
        } loc(#loc256)
        cir.break loc(#loc102)
      }
      ] loc(#loc70)
    } loc(#loc255)
    cir.return loc(#loc55)
  } loc(#loc250)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc107)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc108)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc112)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc113)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc113)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc113)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc113)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc113)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc113)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc113)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc113)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc113)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc113)
          cir.yield %21 : !u32i loc(#loc113)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc113)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc113)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc113)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc113)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc113)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc113)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc113)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc113)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc113)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc113)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc113)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc113)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc113)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc113)
          cir.yield %25 : !u32i loc(#loc113)
        }) : (!cir.bool) -> !u32i loc(#loc113)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc113)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc271)
        cir.break loc(#loc115)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc116)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc116)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc117)
        cir.break loc(#loc118)
      }
      ] loc(#loc110)
    } loc(#loc270)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc121)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc274)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc125)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc125)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc274)
          cir.scope {
            %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc129)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc276)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc130)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
              %13 = cir.const #cir.int<20> : !s32i loc(#loc133)
              %14 = cir.cmp(le, %12, %13) : !s32i, !s32i loc(#loc277)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc134)
              %16 = cir.ternary(%15, true {
                %17 = cir.const #true loc(#loc131)
                cir.yield %17 : !cir.bool loc(#loc131)
              }, false {
                %17 = cir.const #false loc(#loc131)
                cir.yield %17 : !cir.bool loc(#loc131)
              }) : (!cir.bool) -> !cir.bool loc(#loc131)
              cir.yield %16 : !cir.bool loc(#loc131)
            }, false {
              %12 = cir.const #false loc(#loc131)
              cir.yield %12 : !cir.bool loc(#loc131)
            }) : (!cir.bool) -> !cir.bool loc(#loc131)
            cir.if %11 {
              cir.scope {
                %12 = cir.const #cir.int<0> : !s32i loc(#loc138)
                %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc138)
                cir.store %13, %4 : !u64i, !cir.ptr<!u64i> loc(#loc280)
                cir.for : cond {
                  %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc140)
                  %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc141)
                  %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc141)
                  %17 = cir.cmp(lt, %14, %16) : !u64i, !s32i loc(#loc281)
                  %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc142)
                  cir.condition(%18) loc(#loc142)
                } body {
                  cir.scope {
                    %14 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc144)
                    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc144)
                    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc145)
                  } loc(#loc282)
                  cir.yield loc(#loc137)
                } step {
                  %14 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc146)
                  %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc147)
                  cir.store %15, %4 : !u64i, !cir.ptr<!u64i> loc(#loc283)
                  cir.yield loc(#loc279)
                } loc(#loc279)
              } loc(#loc279)
            } loc(#loc278)
          } loc(#loc275)
        } loc(#loc273)
        cir.break loc(#loc148)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc149)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc149)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc150)
        cir.break loc(#loc151)
      }
      ] loc(#loc119)
    } loc(#loc272)
    cir.return loc(#loc104)
  } loc(#loc267)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc285)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc156)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc157)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc161)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc162)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc162)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc163)
        cir.break loc(#loc164)
      },
      case (default) {
        %4 = cir.const #cir.int<20> : !s32i loc(#loc165)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc288)
        cir.break loc(#loc167)
      }
      ] loc(#loc159)
    } loc(#loc287)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc170)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc291)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc174)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc174)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc291)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc177)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc177)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc293)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc179)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc180)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc180)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !s32i loc(#loc294)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc181)
              cir.condition(%13) loc(#loc181)
            } body {
              cir.scope {
                %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc183)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc183)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc184)
              } loc(#loc295)
              cir.yield loc(#loc176)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc185)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc186)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc296)
              cir.yield loc(#loc292)
            } loc(#loc292)
          } loc(#loc292)
        } loc(#loc290)
        cir.break loc(#loc187)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc188)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc188)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc189)
        cir.break loc(#loc190)
      }
      ] loc(#loc168)
    } loc(#loc289)
    cir.return loc(#loc153)
  } loc(#loc284)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc298)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc195)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc196)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc299)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc200)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<20> : !s32i loc(#loc201)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
        cir.break loc(#loc203)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc204)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc204)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc205)
        cir.break loc(#loc206)
      }
      ] loc(#loc198)
    } loc(#loc300)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc209)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc304)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc213)
          %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc213)
          cir.store %6, %4 : !u64i, !cir.ptr<!u64i> loc(#loc304)
          cir.scope {
            %7 = cir.const #cir.int<0> : !s32i loc(#loc216)
            %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc216)
            cir.store %8, %4 : !u64i, !cir.ptr<!u64i> loc(#loc306)
            cir.for : cond {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc218)
              %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc219)
              %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc219)
              %12 = cir.cmp(lt, %9, %11) : !u64i, !s32i loc(#loc307)
              %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc220)
              cir.condition(%13) loc(#loc220)
            } body {
              cir.scope {
                %9 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc222)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc222)
                cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc223)
              } loc(#loc308)
              cir.yield loc(#loc215)
            } step {
              %9 = cir.load %4 : !cir.ptr<!u64i>, !u64i loc(#loc224)
              %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc225)
              cir.store %10, %4 : !u64i, !cir.ptr<!u64i> loc(#loc309)
              cir.yield loc(#loc305)
            } loc(#loc305)
          } loc(#loc305)
        } loc(#loc303)
        cir.break loc(#loc226)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc227)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc227)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc228)
        cir.break loc(#loc229)
      }
      ] loc(#loc207)
    } loc(#loc302)
    cir.return loc(#loc192)
  } loc(#loc297)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":35:19)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":46:23)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":22:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":55:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":24:5)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":24:9)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:14)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:13)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":26:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":27:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":37:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":27:12)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":31:17)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":31:9)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":32:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":35:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":36:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":38:5)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":54:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":38:12)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":41:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":48:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":42:9)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":42:20)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":47:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:18)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:14)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:21)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:33)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:23)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":45:9)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":46:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:41)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":44:40)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":49:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":52:19)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":52:9)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":53:9)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":211:1)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":217:1)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":213:5)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":213:14)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":214:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":214:14)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":215:5)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":215:14)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":216:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":216:14)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":62:1)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":98:1)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":64:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":64:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:14)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":66:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":67:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":77:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":67:12)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":71:17)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":71:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":72:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":75:19)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":75:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":76:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":78:5)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":97:5)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":78:12)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":82:19)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":82:9)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":83:9)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":85:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":95:5)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":86:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":86:20)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:9)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":94:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:21)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:19)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:23)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:26)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:35)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":88:32)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":89:9)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":93:13)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:22)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:18)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:25)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:37)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:27)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":91:13)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":92:27)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":92:17)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:45)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":90:44)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":96:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":101:1)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":137:1)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":103:5)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":103:9)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:14)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:13)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":105:5)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":106:5)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":116:5)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":106:12)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":110:17)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":110:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":111:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":114:19)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":114:9)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":115:9)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":117:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":136:5)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":117:12)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":120:5)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":130:5)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":121:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":121:20)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:9)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":129:9)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:13)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:21)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:19)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:23)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:26)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:35)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":123:32)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":124:9)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:13)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":128:13)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:22)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:18)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:25)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:37)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:27)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":126:13)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":127:27)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":127:17)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:45)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":125:44)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":131:5)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":134:19)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":134:9)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":135:9)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":140:1)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":173:1)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":142:5)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":142:9)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:14)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:13)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":144:5)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":145:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":155:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":145:12)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":149:19)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":149:9)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":150:9)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":153:17)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":153:9)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":154:9)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":156:5)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":172:5)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":156:12)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":159:5)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":166:5)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":160:9)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":160:20)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:9)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":165:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:18)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:14)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:21)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:33)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:23)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":163:9)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":164:23)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":164:13)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:41)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":162:40)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":167:5)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":170:19)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":170:9)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":171:9)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":176:1)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":209:1)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":178:5)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":178:9)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:14)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:13)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":180:5)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":181:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":191:5)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":181:12)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":185:17)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":185:9)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":186:9)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":189:19)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":189:9)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":190:9)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":192:5)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":208:5)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":192:12)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":195:5)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":202:5)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":196:9)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":196:20)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:9)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":201:9)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:18)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:14)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:21)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:33)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:23)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":199:9)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":200:23)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":200:13)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:41)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":198:40)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":203:5)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":206:19)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":206:9)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_15.c":207:9)
#loc230 = loc(fused[#loc1, #loc2])
#loc231 = loc(fused[#loc3, #loc4])
#loc232 = loc(fused[#loc7, #loc8])
#loc233 = loc(fused[#loc9, #loc10])
#loc234 = loc(fused[#loc13, #loc11])
#loc235 = loc(fused[#loc14, #loc15])
#loc236 = loc(fused[#loc18, #loc17])
#loc237 = loc(fused[#loc22, #loc23])
#loc238 = loc(fused[#loc25, #loc26])
#loc239 = loc(fused[#loc27, #loc28])
#loc240 = loc(fused[#loc29, #loc30])
#loc241 = loc(fused[#loc32, #loc31])
#loc242 = loc(fused[#loc33, #loc34])
#loc243 = loc(fused[#loc36, #loc30])
#loc244 = loc(fused[#loc39, #loc38])
#loc245 = loc(fused[#loc44, #loc45])
#loc246 = loc(fused[#loc46, #loc47])
#loc247 = loc(fused[#loc48, #loc49])
#loc248 = loc(fused[#loc50, #loc51])
#loc249 = loc(fused[#loc52, #loc53])
#loc250 = loc(fused[#loc54, #loc55])
#loc251 = loc(fused[#loc56, #loc57])
#loc252 = loc(fused[#loc60, #loc58])
#loc253 = loc(fused[#loc61, #loc62])
#loc254 = loc(fused[#loc65, #loc64])
#loc255 = loc(fused[#loc70, #loc71])
#loc256 = loc(fused[#loc76, #loc77])
#loc257 = loc(fused[#loc78, #loc79])
#loc258 = loc(fused[#loc80, #loc81])
#loc259 = loc(fused[#loc82, #loc83])
#loc260 = loc(fused[#loc86, #loc87])
#loc261 = loc(fused[#loc89, #loc81])
#loc262 = loc(fused[#loc90, #loc91])
#loc263 = loc(fused[#loc93, #loc92])
#loc264 = loc(fused[#loc94, #loc95])
#loc265 = loc(fused[#loc97, #loc91])
#loc266 = loc(fused[#loc101, #loc100])
#loc267 = loc(fused[#loc103, #loc104])
#loc268 = loc(fused[#loc105, #loc106])
#loc269 = loc(fused[#loc109, #loc107])
#loc270 = loc(fused[#loc110, #loc111])
#loc271 = loc(fused[#loc114, #loc113])
#loc272 = loc(fused[#loc119, #loc120])
#loc273 = loc(fused[#loc122, #loc123])
#loc274 = loc(fused[#loc124, #loc125])
#loc275 = loc(fused[#loc126, #loc127])
#loc276 = loc(fused[#loc128, #loc129])
#loc277 = loc(fused[#loc132, #loc133])
#loc278 = loc(fused[#loc135, #loc127])
#loc279 = loc(fused[#loc136, #loc137])
#loc280 = loc(fused[#loc139, #loc138])
#loc281 = loc(fused[#loc140, #loc141])
#loc282 = loc(fused[#loc143, #loc137])
#loc283 = loc(fused[#loc147, #loc146])
#loc284 = loc(fused[#loc152, #loc153])
#loc285 = loc(fused[#loc154, #loc155])
#loc286 = loc(fused[#loc158, #loc156])
#loc287 = loc(fused[#loc159, #loc160])
#loc288 = loc(fused[#loc166, #loc165])
#loc289 = loc(fused[#loc168, #loc169])
#loc290 = loc(fused[#loc171, #loc172])
#loc291 = loc(fused[#loc173, #loc174])
#loc292 = loc(fused[#loc175, #loc176])
#loc293 = loc(fused[#loc178, #loc177])
#loc294 = loc(fused[#loc179, #loc180])
#loc295 = loc(fused[#loc182, #loc176])
#loc296 = loc(fused[#loc186, #loc185])
#loc297 = loc(fused[#loc191, #loc192])
#loc298 = loc(fused[#loc193, #loc194])
#loc299 = loc(fused[#loc197, #loc195])
#loc300 = loc(fused[#loc198, #loc199])
#loc301 = loc(fused[#loc202, #loc201])
#loc302 = loc(fused[#loc207, #loc208])
#loc303 = loc(fused[#loc210, #loc211])
#loc304 = loc(fused[#loc212, #loc213])
#loc305 = loc(fused[#loc214, #loc215])
#loc306 = loc(fused[#loc217, #loc216])
#loc307 = loc(fused[#loc218, #loc219])
#loc308 = loc(fused[#loc221, #loc215])
#loc309 = loc(fused[#loc225, #loc224])
