!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc143)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc144)
  cir.func private  @printIntLine(!s32i) loc(#loc145)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc146)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc148)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc149)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badGlobal : !cir.ptr<!s32i> loc(#loc143)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc17)
    %5 = cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_badSource(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc18)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc151)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc153)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc154)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc153)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc153)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc29)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc29)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc156)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc31)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc32)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc32)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc157)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc33)
          cir.condition(%22) loc(#loc33)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc35)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc36)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc36)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc37)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc38)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc39)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc159)
          } loc(#loc158)
          cir.yield loc(#loc28)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc41)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc42)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc160)
          cir.yield loc(#loc155)
        } loc(#loc155)
      } loc(#loc155)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc44)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc45)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc43)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc46)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc47)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc48)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc48)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    } loc(#loc152)
    cir.return loc(#loc10)
  } loc(#loc147)
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B1Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc161)
  cir.global  external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B2Global = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc162)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc55)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc57)
    cir.return loc(#loc54)
  } loc(#loc163)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B1Source(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc166)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc65)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc67)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B1Global : !cir.ptr<!s32i> loc(#loc161)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc170)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
    %5 = cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B1Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc70)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc173)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc174)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc173)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc173)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc81)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc81)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc176)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc83)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc84)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc84)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc177)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc85)
          cir.condition(%22) loc(#loc85)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc87)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc88)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc88)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc90)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc91)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc179)
          } loc(#loc178)
          cir.yield loc(#loc80)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc93)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc94)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc180)
          cir.yield loc(#loc175)
        } loc(#loc175)
      } loc(#loc175)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc95)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc97)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc95)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc98)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc99)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc100)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc100)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc99)
    } loc(#loc172)
    cir.return loc(#loc62)
  } loc(#loc167)
  cir.func private  @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B2Source(!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc181)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc183)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc184)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc109)
    %3 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B2Global : !cir.ptr<!s32i> loc(#loc162)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc111)
    %5 = cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22_goodG2B2Source(%4) : (!cir.ptr<!s32i>) -> !cir.ptr<!s32i> loc(#loc112)
    cir.store %5, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc186)
    cir.scope {
      %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc188)
      %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc189)
      %8 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc188)
      cir.store %8, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc188)
      cir.scope {
        %16 = cir.const #cir.int<0> : !s32i loc(#loc123)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc123)
        cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc191)
        cir.for : cond {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc125)
          %19 = cir.const #cir.int<10> : !s32i loc(#loc126)
          %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc126)
          %21 = cir.cmp(lt, %18, %20) : !u64i, !s32i loc(#loc192)
          %22 = cir.cast(int_to_bool, %21 : !s32i), !cir.bool loc(#loc127)
          cir.condition(%22) loc(#loc127)
        } body {
          cir.scope {
            %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc129)
            %19 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc130)
            %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !u64i), !cir.ptr<!s32i> loc(#loc130)
            %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %22 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc131)
            %23 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc132)
            %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !u64i), !cir.ptr<!s32i> loc(#loc133)
            cir.store %21, %24 : !s32i, !cir.ptr<!s32i> loc(#loc194)
          } loc(#loc193)
          cir.yield loc(#loc122)
        } step {
          %18 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc135)
          %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc136)
          cir.store %19, %7 : !u64i, !cir.ptr<!u64i> loc(#loc195)
          cir.yield loc(#loc190)
        } loc(#loc190)
      } loc(#loc190)
      %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc137)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc138)
      %11 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc139)
      %12 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc137)
      cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc140)
      %13 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc141)
      %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc142)
      %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc142)
      cir.call @free(%15) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc141)
    } loc(#loc187)
    cir.return loc(#loc104)
  } loc(#loc182)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":22:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":22:67)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":24:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":24:77)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":26:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":43:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":28:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":28:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":29:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":29:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":30:67)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":30:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":31:72)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":31:12)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":31:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":31:76)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":32:5)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":42:5)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":33:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":33:28)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":34:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":34:16)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:9)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":39:9)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:18)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:14)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:21)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:25)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:23)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":37:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:30)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:13)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:18)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:19)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":38:31)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:30)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":36:29)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":40:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":40:27)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":40:28)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":40:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":41:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":41:14)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":50:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":50:72)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":51:1)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":51:72)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":97:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":101:1)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":99:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":99:14)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":100:5)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":100:14)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":54:1)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":54:82)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":56:1)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":73:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":58:5)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":58:11)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":59:12)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":59:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":60:72)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":60:5)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":61:77)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":61:12)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":61:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":61:81)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":62:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":72:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":63:9)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":63:28)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":64:9)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":64:16)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:9)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":69:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:18)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:14)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:21)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:25)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":67:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:23)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:13)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:18)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:19)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":68:31)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:30)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":66:29)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":70:22)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":70:27)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":70:28)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":70:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":71:9)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":71:14)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":76:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":76:82)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":78:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":95:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":80:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":80:11)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":81:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":81:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":82:72)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":82:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":83:77)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":83:12)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":83:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":83:81)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":84:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":94:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":85:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":85:28)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":86:9)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":86:16)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":91:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:18)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:14)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:21)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:25)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:23)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":89:9)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:30)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:23)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:13)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:18)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:19)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":90:31)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:30)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":88:29)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":92:22)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":92:27)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":92:28)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":92:9)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":93:9)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_22a.c":93:14)
#loc143 = loc(fused[#loc1, #loc2])
#loc144 = loc(fused[#loc3, #loc4])
#loc145 = loc(fused[#loc5, #loc6])
#loc146 = loc(fused[#loc7, #loc8])
#loc147 = loc(fused[#loc9, #loc10])
#loc148 = loc(fused[#loc11, #loc12])
#loc149 = loc(fused[#loc14, #loc13])
#loc150 = loc(fused[#loc16, #loc15])
#loc151 = loc(fused[#loc19, #loc20])
#loc152 = loc(fused[#loc21, #loc22])
#loc153 = loc(fused[#loc23, #loc24])
#loc154 = loc(fused[#loc25, #loc26])
#loc155 = loc(fused[#loc27, #loc28])
#loc156 = loc(fused[#loc30, #loc29])
#loc157 = loc(fused[#loc31, #loc32])
#loc158 = loc(fused[#loc34, #loc28])
#loc159 = loc(fused[#loc37, #loc40])
#loc160 = loc(fused[#loc42, #loc41])
#loc161 = loc(fused[#loc49, #loc50])
#loc162 = loc(fused[#loc51, #loc52])
#loc163 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc55, #loc56])
#loc165 = loc(fused[#loc57, #loc58])
#loc166 = loc(fused[#loc59, #loc60])
#loc167 = loc(fused[#loc61, #loc62])
#loc168 = loc(fused[#loc63, #loc64])
#loc169 = loc(fused[#loc66, #loc65])
#loc170 = loc(fused[#loc68, #loc67])
#loc171 = loc(fused[#loc71, #loc72])
#loc172 = loc(fused[#loc73, #loc74])
#loc173 = loc(fused[#loc75, #loc76])
#loc174 = loc(fused[#loc77, #loc78])
#loc175 = loc(fused[#loc79, #loc80])
#loc176 = loc(fused[#loc82, #loc81])
#loc177 = loc(fused[#loc83, #loc84])
#loc178 = loc(fused[#loc86, #loc80])
#loc179 = loc(fused[#loc89, #loc92])
#loc180 = loc(fused[#loc94, #loc93])
#loc181 = loc(fused[#loc101, #loc102])
#loc182 = loc(fused[#loc103, #loc104])
#loc183 = loc(fused[#loc105, #loc106])
#loc184 = loc(fused[#loc108, #loc107])
#loc185 = loc(fused[#loc110, #loc109])
#loc186 = loc(fused[#loc113, #loc114])
#loc187 = loc(fused[#loc115, #loc116])
#loc188 = loc(fused[#loc117, #loc118])
#loc189 = loc(fused[#loc119, #loc120])
#loc190 = loc(fused[#loc121, #loc122])
#loc191 = loc(fused[#loc124, #loc123])
#loc192 = loc(fused[#loc125, #loc126])
#loc193 = loc(fused[#loc128, #loc122])
#loc194 = loc(fused[#loc131, #loc134])
#loc195 = loc(fused[#loc136, #loc135])
