!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc18 = loc("CWE617_Reachable_Assertion__rand_03.c":33:16)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc64)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc65)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"CWE617_Reachable_Assertion__rand_03.c\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"void CWE617_Reachable_Assertion__rand_03_bad()\00" : !cir.array<!s8i x 47>> : !cir.array<!s8i x 47> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc67)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.br ^bb1 loc(#loc69)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc15)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc16)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc70)
    cir.brcond %5 ^bb2, ^bb7 loc(#loc71)
  ^bb2:  // pred: ^bb1
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc18)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %9 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc18)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc18)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc18)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc18)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc18)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc18)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc18)
    cir.br ^bb5(%21 : !u32i) loc(#loc18)
  ^bb4:  // pred: ^bb2
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc18)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc18)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc18)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc18)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc18)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc18)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc18)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc18)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc18)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc18)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc18)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc18)
    cir.br ^bb5(%37 : !u32i) loc(#loc18)
  ^bb5(%38: !u32i loc("CWE617_Reachable_Assertion__rand_03.c":33:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc18)
    cir.store %39, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    cir.br ^bb7 loc(#loc14)
  ^bb7:  // 2 preds: ^bb1, ^bb6
    cir.br ^bb8 loc(#loc14)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc5)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc5)
  ^bb10:  // pred: ^bb9
    %40 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc5)
    %41 = cir.const #cir.int<5> : !s32i loc(#loc5)
    %42 = cir.cmp(gt, %40, %41) : !s32i, !cir.bool loc(#loc5)
    cir.brcond %42 ^bb11, ^bb12 loc(#loc5)
  ^bb11:  // pred: ^bb10
    cir.br ^bb13 loc(#loc5)
  ^bb12:  // pred: ^bb10
    %43 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc5)
    %44 = cir.cast(array_to_ptrdecay, %43 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc5)
    %45 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc5)
    %46 = cir.cast(array_to_ptrdecay, %45 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc5)
    %47 = cir.const #cir.int<36> : !s32i loc(#loc5)
    %48 = cir.cast(integral, %47 : !s32i), !u32i loc(#loc5)
    %49 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 47>> loc(#loc5)
    %50 = cir.cast(array_to_ptrdecay, %49 : !cir.ptr<!cir.array<!s8i x 47>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @__assert_fail(%44, %46, %48, %50) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc5)
    cir.br ^bb13 loc(#loc5)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc5)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc5)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc7)
  } loc(#loc66)
  cir.func no_proto @CWE617_Reachable_Assertion__rand_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc74)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc75)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc73)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc34)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
    cir.br ^bb1 loc(#loc80)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc39)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc40)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc81)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc82)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc28)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc44)
    cir.br ^bb4 loc(#loc42)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<5> : !s32i loc(#loc45)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc45)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.br ^bb4 loc(#loc38)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc38)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc29)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc29)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc29)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc29)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc29)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc29)
  ^bb9:  // pred: ^bb7
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc29)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc29)
    %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc29)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc29)
    %18 = cir.const #cir.int<60> : !s32i loc(#loc29)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc29)
    %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc29)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc29)
    cir.br ^bb10 loc(#loc29)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc29)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc29)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc31)
  } loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc53)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc54)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
    cir.br ^bb1 loc(#loc87)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc58)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc59)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc88)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc89)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc61)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    cir.br ^bb3 loc(#loc57)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc57)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc48)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc48)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc48)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc48)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc48)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc48)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc48)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc48)
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc48)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc48)
    %16 = cir.const #cir.int<75> : !s32i loc(#loc48)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc48)
    %18 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc48)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc48)
    cir.br ^bb9 loc(#loc48)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc48)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc48)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc50)
  } loc(#loc84)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__rand_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("/usr/include/assert.h":67:1)
#loc4 = loc("/usr/include/assert.h":69:43)
#loc5 = loc("CWE617_Reachable_Assertion__rand_03.c":36:5)
#loc6 = loc("CWE617_Reachable_Assertion__rand_03.c":25:1)
#loc7 = loc("CWE617_Reachable_Assertion__rand_03.c":37:1)
#loc8 = loc("CWE617_Reachable_Assertion__rand_03.c":27:5)
#loc9 = loc("CWE617_Reachable_Assertion__rand_03.c":27:9)
#loc10 = loc("CWE617_Reachable_Assertion__rand_03.c":29:13)
#loc11 = loc("CWE617_Reachable_Assertion__rand_03.c":29:12)
#loc12 = loc("CWE617_Reachable_Assertion__rand_03.c":29:5)
#loc13 = loc("CWE617_Reachable_Assertion__rand_03.c":30:5)
#loc14 = loc("CWE617_Reachable_Assertion__rand_03.c":34:5)
#loc15 = loc("CWE617_Reachable_Assertion__rand_03.c":30:8)
#loc16 = loc("CWE617_Reachable_Assertion__rand_03.c":30:11)
#loc17 = loc("CWE617_Reachable_Assertion__rand_03.c":31:5)
#loc19 = loc("CWE617_Reachable_Assertion__rand_03.c":33:9)
#loc20 = loc("CWE617_Reachable_Assertion__rand_03.c":78:1)
#loc21 = loc("CWE617_Reachable_Assertion__rand_03.c":82:1)
#loc22 = loc("CWE617_Reachable_Assertion__rand_03.c":80:5)
#loc23 = loc("CWE617_Reachable_Assertion__rand_03.c":80:14)
#loc24 = loc("CWE617_Reachable_Assertion__rand_03.c":81:5)
#loc25 = loc("CWE617_Reachable_Assertion__rand_03.c":81:14)
#loc26 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE617_Reachable_Assertion__rand_03.c":52:19)
#loc29 = loc("CWE617_Reachable_Assertion__rand_03.c":60:5)
#loc30 = loc("CWE617_Reachable_Assertion__rand_03.c":44:1)
#loc31 = loc("CWE617_Reachable_Assertion__rand_03.c":61:1)
#loc32 = loc("CWE617_Reachable_Assertion__rand_03.c":46:5)
#loc33 = loc("CWE617_Reachable_Assertion__rand_03.c":46:9)
#loc34 = loc("CWE617_Reachable_Assertion__rand_03.c":48:13)
#loc35 = loc("CWE617_Reachable_Assertion__rand_03.c":48:12)
#loc36 = loc("CWE617_Reachable_Assertion__rand_03.c":48:5)
#loc37 = loc("CWE617_Reachable_Assertion__rand_03.c":49:5)
#loc38 = loc("CWE617_Reachable_Assertion__rand_03.c":58:5)
#loc39 = loc("CWE617_Reachable_Assertion__rand_03.c":49:8)
#loc40 = loc("CWE617_Reachable_Assertion__rand_03.c":49:11)
#loc41 = loc("CWE617_Reachable_Assertion__rand_03.c":50:5)
#loc42 = loc("CWE617_Reachable_Assertion__rand_03.c":53:5)
#loc43 = loc("CWE617_Reachable_Assertion__rand_03.c":55:5)
#loc44 = loc("CWE617_Reachable_Assertion__rand_03.c":52:9)
#loc45 = loc("CWE617_Reachable_Assertion__rand_03.c":57:16)
#loc46 = loc("CWE617_Reachable_Assertion__rand_03.c":57:29)
#loc47 = loc("CWE617_Reachable_Assertion__rand_03.c":57:9)
#loc48 = loc("CWE617_Reachable_Assertion__rand_03.c":75:5)
#loc49 = loc("CWE617_Reachable_Assertion__rand_03.c":64:1)
#loc50 = loc("CWE617_Reachable_Assertion__rand_03.c":76:1)
#loc51 = loc("CWE617_Reachable_Assertion__rand_03.c":66:5)
#loc52 = loc("CWE617_Reachable_Assertion__rand_03.c":66:9)
#loc53 = loc("CWE617_Reachable_Assertion__rand_03.c":68:13)
#loc54 = loc("CWE617_Reachable_Assertion__rand_03.c":68:12)
#loc55 = loc("CWE617_Reachable_Assertion__rand_03.c":68:5)
#loc56 = loc("CWE617_Reachable_Assertion__rand_03.c":69:5)
#loc57 = loc("CWE617_Reachable_Assertion__rand_03.c":73:5)
#loc58 = loc("CWE617_Reachable_Assertion__rand_03.c":69:8)
#loc59 = loc("CWE617_Reachable_Assertion__rand_03.c":69:11)
#loc60 = loc("CWE617_Reachable_Assertion__rand_03.c":70:5)
#loc61 = loc("CWE617_Reachable_Assertion__rand_03.c":72:16)
#loc62 = loc("CWE617_Reachable_Assertion__rand_03.c":72:29)
#loc63 = loc("CWE617_Reachable_Assertion__rand_03.c":72:9)
#loc64 = loc(fused[#loc1, #loc2])
#loc65 = loc(fused[#loc3, #loc4])
#loc66 = loc(fused[#loc6, #loc7])
#loc67 = loc(fused[#loc8, #loc9])
#loc68 = loc(fused[#loc12, #loc10])
#loc69 = loc(fused[#loc13, #loc14])
#loc70 = loc(fused[#loc15, #loc16])
#loc71 = loc(fused[#loc17, #loc14])
#loc72 = loc(fused[#loc19, #loc18])
#loc73 = loc(fused[#loc20, #loc21])
#loc74 = loc(fused[#loc22, #loc23])
#loc75 = loc(fused[#loc24, #loc25])
#loc76 = loc(fused[#loc26, #loc27])
#loc77 = loc(fused[#loc30, #loc31])
#loc78 = loc(fused[#loc32, #loc33])
#loc79 = loc(fused[#loc36, #loc34])
#loc80 = loc(fused[#loc37, #loc38])
#loc81 = loc(fused[#loc39, #loc40])
#loc82 = loc(fused[#loc41, #loc42, #loc43, #loc38])
#loc83 = loc(fused[#loc47, #loc46])
#loc84 = loc(fused[#loc49, #loc50])
#loc85 = loc(fused[#loc51, #loc52])
#loc86 = loc(fused[#loc55, #loc53])
#loc87 = loc(fused[#loc56, #loc57])
#loc88 = loc(fused[#loc58, #loc59])
#loc89 = loc(fused[#loc60, #loc57])
#loc90 = loc(fused[#loc63, #loc62])
