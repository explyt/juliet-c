!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc286)
  cir.func private @printIntLine(!s32i) loc(#loc287)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc288)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc290)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc291)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc293)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc293)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc18)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc18)
      cir.if %6 {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc23)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc295)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc25)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc296)
      } loc(#loc294)
    } loc(#loc292)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc298)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc298)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc29)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc29)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc301)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc302)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc302)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc302)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc304)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc47)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc49)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc49)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc306)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc52)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc308)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc55)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc309)
                  cir.condition(%20) loc(#loc56)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc59)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc59)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc60)
                  } loc(#loc310)
                  cir.yield loc(#loc51)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc61)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc62)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc311)
                  cir.yield loc(#loc307)
                } loc(#loc307)
              } loc(#loc307)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc63)
            } loc(#loc305)
          } loc(#loc303)
        } loc(#loc300)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc313)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc314)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc314)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc314)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc316)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc76)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc317)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc74)
                cir.yield %18 : !cir.bool loc(#loc74)
              }, false {
                %18 = cir.const #false loc(#loc74)
                cir.yield %18 : !cir.bool loc(#loc74)
              }) : (!cir.bool) -> !cir.bool loc(#loc74)
              cir.yield %17 : !cir.bool loc(#loc74)
            }, false {
              %14 = cir.const #false loc(#loc74)
              cir.yield %14 : !cir.bool loc(#loc74)
            }) : (!cir.bool) -> !cir.bool loc(#loc74)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc81)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc83)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc83)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc319)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc86)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc321)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc89)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc322)
                  cir.condition(%21) loc(#loc90)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc93)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc93)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc93)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc94)
                  } loc(#loc323)
                  cir.yield loc(#loc85)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc95)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc96)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc324)
                  cir.yield loc(#loc320)
                } loc(#loc320)
              } loc(#loc320)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc8)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc8)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc97)
            } loc(#loc318)
          } loc(#loc315)
        } loc(#loc312)
      } loc(#loc299)
    } loc(#loc297)
    cir.return loc(#loc10)
  } loc(#loc289)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc326)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc100)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc327)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc102)
    cir.return loc(#loc99)
  } loc(#loc325)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc109)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc330)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc332)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc332)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc113)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc113)
      cir.if %6 {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc118)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      } else {
        %7 = cir.const #cir.int<10> : !s32i loc(#loc120)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc335)
      } loc(#loc333)
    } loc(#loc331)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc337)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc337)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc124)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc124)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc340)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc341)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc341)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc341)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc138)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc343)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc141)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc344)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc139)
                cir.yield %18 : !cir.bool loc(#loc139)
              }, false {
                %18 = cir.const #false loc(#loc139)
                cir.yield %18 : !cir.bool loc(#loc139)
              }) : (!cir.bool) -> !cir.bool loc(#loc139)
              cir.yield %17 : !cir.bool loc(#loc139)
            }, false {
              %14 = cir.const #false loc(#loc139)
              cir.yield %14 : !cir.bool loc(#loc139)
            }) : (!cir.bool) -> !cir.bool loc(#loc139)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc146)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc147)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc148)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc148)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc346)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc151)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc348)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc153)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc154)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc349)
                  cir.condition(%21) loc(#loc155)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc157)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc158)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc158)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc158)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc159)
                  } loc(#loc350)
                  cir.yield loc(#loc150)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc160)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc161)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc351)
                  cir.yield loc(#loc347)
                } loc(#loc347)
              } loc(#loc347)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc162)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc162)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc163)
            } loc(#loc345)
          } loc(#loc342)
        } loc(#loc339)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc353)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc354)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc354)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc354)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc173)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc356)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc175)
              %15 = cir.const #cir.int<10> : !s32i loc(#loc176)
              %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc357)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc174)
                cir.yield %18 : !cir.bool loc(#loc174)
              }, false {
                %18 = cir.const #false loc(#loc174)
                cir.yield %18 : !cir.bool loc(#loc174)
              }) : (!cir.bool) -> !cir.bool loc(#loc174)
              cir.yield %17 : !cir.bool loc(#loc174)
            }, false {
              %14 = cir.const #false loc(#loc174)
              cir.yield %14 : !cir.bool loc(#loc174)
            }) : (!cir.bool) -> !cir.bool loc(#loc174)
            cir.if %13 {
              %14 = cir.const #cir.int<1> : !s32i loc(#loc181)
              %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc182)
              %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc183)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc183)
              cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc359)
              cir.scope {
                %18 = cir.const #cir.int<0> : !s32i loc(#loc186)
                cir.store %18, %7 : !s32i, !cir.ptr<!s32i> loc(#loc361)
                cir.for : cond {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc188)
                  %20 = cir.const #cir.int<10> : !s32i loc(#loc189)
                  %21 = cir.cmp(lt, %19, %20) : !s32i, !cir.bool loc(#loc362)
                  cir.condition(%21) loc(#loc190)
                } body {
                  cir.scope {
                    %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc192)
                    %20 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc193)
                    %21 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc193)
                    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc193)
                    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc194)
                  } loc(#loc363)
                  cir.yield loc(#loc185)
                } step {
                  %19 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc195)
                  %20 = cir.unary(inc, %19) nsw : !s32i, !s32i loc(#loc196)
                  cir.store %20, %7 : !s32i, !cir.ptr<!s32i> loc(#loc364)
                  cir.yield loc(#loc360)
                } loc(#loc360)
              } loc(#loc360)
            } else {
              %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc197)
              %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc197)
              cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc198)
            } loc(#loc358)
          } loc(#loc355)
        } loc(#loc352)
      } loc(#loc338)
    } loc(#loc336)
    cir.return loc(#loc105)
  } loc(#loc328)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc366)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc203)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc204)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc367)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc369)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc369)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc208)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc208)
      cir.if %6 {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc213)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
      } else {
        %7 = cir.const #cir.int<7> : !s32i loc(#loc215)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc372)
      } loc(#loc370)
    } loc(#loc368)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc374)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc374)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc219)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc219)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc377)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc378)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc378)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc378)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc232)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc233)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc380)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc237)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc238)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc239)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc239)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc382)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc242)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc384)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc244)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc245)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc385)
                  cir.condition(%20) loc(#loc246)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc249)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc249)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc249)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc250)
                  } loc(#loc386)
                  cir.yield loc(#loc241)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc251)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc252)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc387)
                  cir.yield loc(#loc383)
                } loc(#loc383)
              } loc(#loc383)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc253)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc253)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc254)
            } loc(#loc381)
          } loc(#loc379)
        } loc(#loc376)
      } else {
        cir.scope {
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc389)
          %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc390)
          %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc390)
          cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc390)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc263)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc264)
            %12 = cir.cmp(ge, %10, %11) : !s32i, !cir.bool loc(#loc392)
            cir.if %12 {
              %13 = cir.const #cir.int<1> : !s32i loc(#loc268)
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
              %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc270)
              %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc270)
              cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc394)
              cir.scope {
                %17 = cir.const #cir.int<0> : !s32i loc(#loc273)
                cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc396)
                cir.for : cond {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc275)
                  %19 = cir.const #cir.int<10> : !s32i loc(#loc276)
                  %20 = cir.cmp(lt, %18, %19) : !s32i, !cir.bool loc(#loc397)
                  cir.condition(%20) loc(#loc277)
                } body {
                  cir.scope {
                    %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc279)
                    %19 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc280)
                    %20 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc280)
                    %21 = cir.load %20 : !cir.ptr<!s32i>, !s32i loc(#loc280)
                    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc281)
                  } loc(#loc398)
                  cir.yield loc(#loc272)
                } step {
                  %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc282)
                  %19 = cir.unary(inc, %18) nsw : !s32i, !s32i loc(#loc283)
                  cir.store %19, %7 : !s32i, !cir.ptr<!s32i> loc(#loc399)
                  cir.yield loc(#loc395)
                } loc(#loc395)
              } loc(#loc395)
            } else {
              %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc284)
              %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc284)
              cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc285)
            } loc(#loc393)
          } loc(#loc391)
        } loc(#loc388)
      } loc(#loc375)
    } loc(#loc373)
    cir.return loc(#loc200)
  } loc(#loc365)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":56:27)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":77:27)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":22:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":81:1)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":24:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":24:9)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":26:13)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":26:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":27:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":37:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":27:8)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":27:33)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":28:5)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":31:5)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":33:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":30:16)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":30:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":36:16)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":36:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":38:5)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":80:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":38:8)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":38:33)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":39:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":59:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":61:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":40:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":58:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":41:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":41:17)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":42:13)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":42:34)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":45:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":57:13)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":45:17)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":45:25)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":46:13)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":53:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":55:13)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":47:32)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":47:24)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":47:17)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:17)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":52:17)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:25)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:21)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:28)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:32)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":50:17)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":51:41)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":51:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":51:21)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:37)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":49:36)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":56:17)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":62:9)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":79:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":63:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":63:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":64:13)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":64:34)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:13)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":78:13)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:17)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:25)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:27)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:30)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:38)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":66:40)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":67:13)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":74:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":76:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":68:32)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":68:24)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":68:17)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":73:17)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:25)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:21)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:28)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:32)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:30)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":71:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":72:41)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":72:34)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":72:21)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:37)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":70:36)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":77:17)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":215:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":219:1)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":217:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":217:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":218:5)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":218:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":90:1)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":147:1)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":92:5)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":92:9)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":94:13)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":94:12)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":94:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":95:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":104:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":95:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":95:33)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":96:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":99:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":101:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":98:16)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":98:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":103:16)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":103:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":105:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":146:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":105:8)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":105:33)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":106:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":125:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":127:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":107:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":124:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":108:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":108:17)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":109:13)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":109:34)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:13)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":123:13)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:17)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:25)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:27)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:38)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":111:40)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":112:13)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":119:13)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":121:13)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":113:32)
#loc147 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":113:24)
#loc148 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":113:17)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:17)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":118:17)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:25)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:21)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:28)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:32)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:30)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":116:17)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":117:41)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":117:34)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":117:21)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:37)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":115:36)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":122:27)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":122:17)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":128:9)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":145:9)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":129:13)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":129:17)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":130:13)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":130:34)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:13)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":144:13)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:17)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:25)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:27)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:30)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:38)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":132:40)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":133:13)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":140:13)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":142:13)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":134:32)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":134:24)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":134:17)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:17)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":139:17)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:25)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:21)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:28)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:32)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:30)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":137:17)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":138:41)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":138:34)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":138:21)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:37)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":136:36)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":143:27)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":143:17)
#loc199 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":152:1)
#loc200 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":213:1)
#loc201 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":154:5)
#loc202 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":154:9)
#loc203 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":156:13)
#loc204 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":156:12)
#loc205 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":156:5)
#loc206 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":157:5)
#loc207 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":168:5)
#loc208 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":157:8)
#loc209 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":157:33)
#loc210 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":158:5)
#loc211 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":162:5)
#loc212 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":164:5)
#loc213 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":161:16)
#loc214 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":161:9)
#loc215 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":167:16)
#loc216 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":167:9)
#loc217 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":169:5)
#loc218 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":212:5)
#loc219 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":169:8)
#loc220 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":169:33)
#loc221 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":170:5)
#loc222 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":190:5)
#loc223 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":192:5)
#loc224 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":171:9)
#loc225 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":189:9)
#loc226 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":172:13)
#loc227 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":172:17)
#loc228 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":173:13)
#loc229 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":173:34)
#loc230 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":176:13)
#loc231 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":188:13)
#loc232 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":176:17)
#loc233 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":176:25)
#loc234 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":177:13)
#loc235 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":184:13)
#loc236 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":186:13)
#loc237 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":178:32)
#loc238 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":178:24)
#loc239 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":178:17)
#loc240 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:17)
#loc241 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":183:17)
#loc242 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:25)
#loc243 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:21)
#loc244 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:28)
#loc245 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:32)
#loc246 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:30)
#loc247 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":181:17)
#loc248 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":182:41)
#loc249 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":182:34)
#loc250 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":182:21)
#loc251 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:37)
#loc252 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":180:36)
#loc253 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":187:27)
#loc254 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":187:17)
#loc255 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":193:9)
#loc256 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":211:9)
#loc257 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":194:13)
#loc258 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":194:17)
#loc259 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":195:13)
#loc260 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":195:34)
#loc261 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":198:13)
#loc262 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":210:13)
#loc263 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":198:17)
#loc264 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":198:25)
#loc265 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":199:13)
#loc266 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":206:13)
#loc267 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":208:13)
#loc268 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":200:32)
#loc269 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":200:24)
#loc270 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":200:17)
#loc271 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:17)
#loc272 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":205:17)
#loc273 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:25)
#loc274 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:21)
#loc275 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:28)
#loc276 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:32)
#loc277 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:30)
#loc278 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":203:17)
#loc279 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":204:41)
#loc280 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":204:34)
#loc281 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":204:21)
#loc282 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:37)
#loc283 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":202:36)
#loc284 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":209:27)
#loc285 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE129_large_12.c":209:17)
#loc286 = loc(fused[#loc1, #loc2])
#loc287 = loc(fused[#loc3, #loc4])
#loc288 = loc(fused[#loc5, #loc6])
#loc289 = loc(fused[#loc9, #loc10])
#loc290 = loc(fused[#loc11, #loc12])
#loc291 = loc(fused[#loc15, #loc13])
#loc292 = loc(fused[#loc16, #loc17])
#loc293 = loc(fused[#loc18, #loc19])
#loc294 = loc(fused[#loc20, #loc21, #loc22, #loc17])
#loc295 = loc(fused[#loc24, #loc23])
#loc296 = loc(fused[#loc26, #loc25])
#loc297 = loc(fused[#loc27, #loc28])
#loc298 = loc(fused[#loc29, #loc30])
#loc299 = loc(fused[#loc31, #loc32, #loc33, #loc28])
#loc300 = loc(fused[#loc34, #loc35])
#loc301 = loc(fused[#loc36, #loc37])
#loc302 = loc(fused[#loc38, #loc39])
#loc303 = loc(fused[#loc40, #loc41])
#loc304 = loc(fused[#loc42, #loc43])
#loc305 = loc(fused[#loc44, #loc45, #loc46, #loc41])
#loc306 = loc(fused[#loc49, #loc47])
#loc307 = loc(fused[#loc50, #loc51])
#loc308 = loc(fused[#loc53, #loc52])
#loc309 = loc(fused[#loc54, #loc55])
#loc310 = loc(fused[#loc57, #loc51])
#loc311 = loc(fused[#loc62, #loc61])
#loc312 = loc(fused[#loc64, #loc65])
#loc313 = loc(fused[#loc66, #loc67])
#loc314 = loc(fused[#loc68, #loc69])
#loc315 = loc(fused[#loc70, #loc71])
#loc316 = loc(fused[#loc72, #loc73])
#loc317 = loc(fused[#loc75, #loc77])
#loc318 = loc(fused[#loc78, #loc79, #loc80, #loc71])
#loc319 = loc(fused[#loc83, #loc81])
#loc320 = loc(fused[#loc84, #loc85])
#loc321 = loc(fused[#loc87, #loc86])
#loc322 = loc(fused[#loc88, #loc89])
#loc323 = loc(fused[#loc91, #loc85])
#loc324 = loc(fused[#loc96, #loc95])
#loc325 = loc(fused[#loc98, #loc99])
#loc326 = loc(fused[#loc100, #loc101])
#loc327 = loc(fused[#loc102, #loc103])
#loc328 = loc(fused[#loc104, #loc105])
#loc329 = loc(fused[#loc106, #loc107])
#loc330 = loc(fused[#loc110, #loc108])
#loc331 = loc(fused[#loc111, #loc112])
#loc332 = loc(fused[#loc113, #loc114])
#loc333 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc334 = loc(fused[#loc119, #loc118])
#loc335 = loc(fused[#loc121, #loc120])
#loc336 = loc(fused[#loc122, #loc123])
#loc337 = loc(fused[#loc124, #loc125])
#loc338 = loc(fused[#loc126, #loc127, #loc128, #loc123])
#loc339 = loc(fused[#loc129, #loc130])
#loc340 = loc(fused[#loc131, #loc132])
#loc341 = loc(fused[#loc133, #loc134])
#loc342 = loc(fused[#loc135, #loc136])
#loc343 = loc(fused[#loc137, #loc138])
#loc344 = loc(fused[#loc140, #loc142])
#loc345 = loc(fused[#loc143, #loc144, #loc145, #loc136])
#loc346 = loc(fused[#loc148, #loc146])
#loc347 = loc(fused[#loc149, #loc150])
#loc348 = loc(fused[#loc152, #loc151])
#loc349 = loc(fused[#loc153, #loc154])
#loc350 = loc(fused[#loc156, #loc150])
#loc351 = loc(fused[#loc161, #loc160])
#loc352 = loc(fused[#loc164, #loc165])
#loc353 = loc(fused[#loc166, #loc167])
#loc354 = loc(fused[#loc168, #loc169])
#loc355 = loc(fused[#loc170, #loc171])
#loc356 = loc(fused[#loc172, #loc173])
#loc357 = loc(fused[#loc175, #loc177])
#loc358 = loc(fused[#loc178, #loc179, #loc180, #loc171])
#loc359 = loc(fused[#loc183, #loc181])
#loc360 = loc(fused[#loc184, #loc185])
#loc361 = loc(fused[#loc187, #loc186])
#loc362 = loc(fused[#loc188, #loc189])
#loc363 = loc(fused[#loc191, #loc185])
#loc364 = loc(fused[#loc196, #loc195])
#loc365 = loc(fused[#loc199, #loc200])
#loc366 = loc(fused[#loc201, #loc202])
#loc367 = loc(fused[#loc205, #loc203])
#loc368 = loc(fused[#loc206, #loc207])
#loc369 = loc(fused[#loc208, #loc209])
#loc370 = loc(fused[#loc210, #loc211, #loc212, #loc207])
#loc371 = loc(fused[#loc214, #loc213])
#loc372 = loc(fused[#loc216, #loc215])
#loc373 = loc(fused[#loc217, #loc218])
#loc374 = loc(fused[#loc219, #loc220])
#loc375 = loc(fused[#loc221, #loc222, #loc223, #loc218])
#loc376 = loc(fused[#loc224, #loc225])
#loc377 = loc(fused[#loc226, #loc227])
#loc378 = loc(fused[#loc228, #loc229])
#loc379 = loc(fused[#loc230, #loc231])
#loc380 = loc(fused[#loc232, #loc233])
#loc381 = loc(fused[#loc234, #loc235, #loc236, #loc231])
#loc382 = loc(fused[#loc239, #loc237])
#loc383 = loc(fused[#loc240, #loc241])
#loc384 = loc(fused[#loc243, #loc242])
#loc385 = loc(fused[#loc244, #loc245])
#loc386 = loc(fused[#loc247, #loc241])
#loc387 = loc(fused[#loc252, #loc251])
#loc388 = loc(fused[#loc255, #loc256])
#loc389 = loc(fused[#loc257, #loc258])
#loc390 = loc(fused[#loc259, #loc260])
#loc391 = loc(fused[#loc261, #loc262])
#loc392 = loc(fused[#loc263, #loc264])
#loc393 = loc(fused[#loc265, #loc266, #loc267, #loc262])
#loc394 = loc(fused[#loc270, #loc268])
#loc395 = loc(fused[#loc271, #loc272])
#loc396 = loc(fused[#loc274, #loc273])
#loc397 = loc(fused[#loc275, #loc276])
#loc398 = loc(fused[#loc278, #loc272])
#loc399 = loc(fused[#loc283, #loc282])
