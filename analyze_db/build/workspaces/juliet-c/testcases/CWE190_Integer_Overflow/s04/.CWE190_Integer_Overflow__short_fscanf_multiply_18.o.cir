!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc100)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%hd\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printIntLine(!s32i) loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_18_bad() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc104)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc12)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc105)
    cir.goto "source" loc(#loc106)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc16)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc17)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc18)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc5)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc17)
    cir.goto "sink" loc(#loc107)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc21)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc24)
      %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc24)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc25)
      %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc109)
      cir.if %12 {
        %13 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc111)
        %14 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc29)
        %15 = cir.cast(integral, %14 : !s16i), !s32i loc(#loc29)
        %16 = cir.const #cir.int<2> : !s32i loc(#loc28)
        %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc29)
        %18 = cir.cast(integral, %17 : !s32i), !s16i loc(#loc29)
        cir.store %18, %13 : !s16i, !cir.ptr<!s16i> loc(#loc111)
        %19 = cir.load %13 : !cir.ptr<!s16i>, !s16i loc(#loc30)
        %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc30)
        cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc31)
      } loc(#loc110)
    } loc(#loc108)
    cir.return loc(#loc9)
  } loc(#loc103)
  cir.func no_proto @CWE190_Integer_Overflow__short_fscanf_multiply_18_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc45)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc118)
    cir.goto "source" loc(#loc119)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc49)
    %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc50)
    %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc101)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc51)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc52)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc52)
    %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s16i>) -> !s32i loc(#loc50)
    cir.goto "sink" loc(#loc120)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc55)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc58)
      %10 = cir.cast(integral, %9 : !s16i), !s32i loc(#loc58)
      %11 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc122)
      cir.if %12 {
        cir.scope {
          %13 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc63)
          %14 = cir.cast(integral, %13 : !s16i), !s32i loc(#loc63)
          %15 = cir.const #cir.int<32767> : !s32i loc(#loc64)
          %16 = cir.const #cir.int<2> : !s32i loc(#loc65)
          %17 = cir.binop(div, %15, %16) : !s32i loc(#loc125)
          %18 = cir.cmp(lt, %14, %17) : !s32i, !cir.bool loc(#loc126)
          cir.if %18 {
            %19 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc128)
            %20 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc72)
            %21 = cir.cast(integral, %20 : !s16i), !s32i loc(#loc72)
            %22 = cir.const #cir.int<2> : !s32i loc(#loc71)
            %23 = cir.binop(mul, %21, %22) nsw : !s32i loc(#loc72)
            %24 = cir.cast(integral, %23 : !s32i), !s16i loc(#loc72)
            cir.store %24, %19 : !s16i, !cir.ptr<!s16i> loc(#loc128)
            %25 = cir.load %19 : !cir.ptr<!s16i>, !s16i loc(#loc73)
            %26 = cir.cast(integral, %25 : !s16i), !s32i loc(#loc73)
            cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc74)
          } else {
            %19 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          } loc(#loc127)
        } loc(#loc124)
      } loc(#loc123)
    } loc(#loc121)
    cir.return loc(#loc42)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %2 = cir.cast(integral, %1 : !s32i), !s16i loc(#loc80)
    cir.store %2, %0 : !s16i, !cir.ptr<!s16i> loc(#loc131)
    cir.goto "source" loc(#loc132)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc84)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc85)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc85)
    cir.store %4, %0 : !s16i, !cir.ptr<!s16i> loc(#loc133)
    cir.goto "sink" loc(#loc134)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc89)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc92)
      %6 = cir.cast(integral, %5 : !s16i), !s32i loc(#loc92)
      %7 = cir.const #cir.int<0> : !s32i loc(#loc93)
      %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc136)
      cir.if %8 {
        %9 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc138)
        %10 = cir.load %0 : !cir.ptr<!s16i>, !s16i loc(#loc97)
        %11 = cir.cast(integral, %10 : !s16i), !s32i loc(#loc97)
        %12 = cir.const #cir.int<2> : !s32i loc(#loc96)
        %13 = cir.binop(mul, %11, %12) nsw : !s32i loc(#loc97)
        %14 = cir.cast(integral, %13 : !s32i), !s16i loc(#loc97)
        cir.store %14, %9 : !s16i, !cir.ptr<!s16i> loc(#loc138)
        %15 = cir.load %9 : !cir.ptr<!s16i>, !s16i loc(#loc98)
        %16 = cir.cast(integral, %15 : !s16i), !s32i loc(#loc98)
        cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc99)
      } loc(#loc137)
    } loc(#loc135)
    cir.return loc(#loc77)
  } loc(#loc129)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_fscanf_multiply_18.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":29:20)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":38:1)
#loc10 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":24:11)
#loc12 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":26:10)
#loc16 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":27:1)
#loc17 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":29:5)
#loc18 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":29:13)
#loc19 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":30:5)
#loc20 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":30:10)
#loc21 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":31:1)
#loc22 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":32:5)
#loc23 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":37:5)
#loc24 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":32:8)
#loc25 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":32:15)
#loc26 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":33:5)
#loc27 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":35:9)
#loc28 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":35:31)
#loc29 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":35:24)
#loc30 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":36:22)
#loc31 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":36:9)
#loc32 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":89:1)
#loc33 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":93:1)
#loc34 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":91:5)
#loc35 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":91:13)
#loc36 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":92:5)
#loc37 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":92:13)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":65:23)
#loc41 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":45:1)
#loc42 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":68:1)
#loc43 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":47:5)
#loc44 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":47:11)
#loc45 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":48:12)
#loc46 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":48:5)
#loc47 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":49:5)
#loc48 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":49:10)
#loc49 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":50:1)
#loc50 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":52:5)
#loc51 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":52:13)
#loc52 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":52:20)
#loc53 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":53:5)
#loc54 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":53:10)
#loc55 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":54:1)
#loc56 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":55:5)
#loc57 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":67:5)
#loc58 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":55:8)
#loc59 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":55:15)
#loc60 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":56:5)
#loc61 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":58:9)
#loc62 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":66:9)
#loc63 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":58:13)
#loc64 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":58:21)
#loc65 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":58:30)
#loc66 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":58:31)
#loc67 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":59:9)
#loc68 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":62:9)
#loc69 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":64:9)
#loc70 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":60:13)
#loc71 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":60:35)
#loc72 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":60:28)
#loc73 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":61:26)
#loc74 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":61:13)
#loc75 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":65:13)
#loc76 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":71:1)
#loc77 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":87:1)
#loc78 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":73:5)
#loc79 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":73:11)
#loc80 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":74:12)
#loc81 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":74:5)
#loc82 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":75:5)
#loc83 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":75:10)
#loc84 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":76:1)
#loc85 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":78:12)
#loc86 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":78:5)
#loc87 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":79:5)
#loc88 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":79:10)
#loc89 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":80:1)
#loc90 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":81:5)
#loc91 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":86:5)
#loc92 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":81:8)
#loc93 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":81:15)
#loc94 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":82:5)
#loc95 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":84:9)
#loc96 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":84:31)
#loc97 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":84:24)
#loc98 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":85:22)
#loc99 = loc("CWE190_Integer_Overflow__short_fscanf_multiply_18.c":85:9)
#loc100 = loc(fused[#loc1, #loc2])
#loc101 = loc(fused[#loc3, #loc4])
#loc102 = loc(fused[#loc6, #loc7])
#loc103 = loc(fused[#loc8, #loc9])
#loc104 = loc(fused[#loc10, #loc11])
#loc105 = loc(fused[#loc13, #loc12])
#loc106 = loc(fused[#loc14, #loc15])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc22, #loc23])
#loc109 = loc(fused[#loc24, #loc25])
#loc110 = loc(fused[#loc26, #loc23])
#loc111 = loc(fused[#loc27, #loc28])
#loc112 = loc(fused[#loc32, #loc33])
#loc113 = loc(fused[#loc34, #loc35])
#loc114 = loc(fused[#loc36, #loc37])
#loc115 = loc(fused[#loc38, #loc39])
#loc116 = loc(fused[#loc41, #loc42])
#loc117 = loc(fused[#loc43, #loc44])
#loc118 = loc(fused[#loc46, #loc45])
#loc119 = loc(fused[#loc47, #loc48])
#loc120 = loc(fused[#loc53, #loc54])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc58, #loc59])
#loc123 = loc(fused[#loc60, #loc57])
#loc124 = loc(fused[#loc61, #loc62])
#loc125 = loc(fused[#loc64, #loc65])
#loc126 = loc(fused[#loc63, #loc66])
#loc127 = loc(fused[#loc67, #loc68, #loc69, #loc62])
#loc128 = loc(fused[#loc70, #loc71])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc78, #loc79])
#loc131 = loc(fused[#loc81, #loc80])
#loc132 = loc(fused[#loc82, #loc83])
#loc133 = loc(fused[#loc86, #loc85])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc90, #loc91])
#loc136 = loc(fused[#loc92, #loc93])
#loc137 = loc(fused[#loc94, #loc91])
#loc138 = loc(fused[#loc95, #loc96])
