!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc52 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":116:10)
#loc53 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":116:14)
#loc54 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":116:20)
#loc55 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":116:32)
#loc154 = loc(fused[#loc52, #loc53])
#loc155 = loc(fused[#loc54, #loc55])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc135)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc136)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printHexCharLine(!s8i) loc(#loc137)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc139)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc140)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc14)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc141)
    cir.br ^bb1 loc(#loc142)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc142)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc136)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc19)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc143)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc143)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %13 ^bb8, ^bb13 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc144)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc27)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc27)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc28)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc145)
    cir.brcond %17 ^bb10, ^bb11 loc(#loc146)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc30)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc30)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc30)
    %22 = cir.cast(integral, %21 : !s32i), !s8i loc(#loc30)
    cir.store %22, %0 : !s8i, !cir.ptr<!s8i> loc(#loc139)
    %23 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc31)
    cir.call @printHexCharLine(%23) : (!s8i) -> () loc(#loc32)
    cir.br ^bb11 loc(#loc26)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc26)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc33)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc23)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc9)
  } loc(#loc138)
  cir.func no_proto @CWE191_Integer_Underflow__char_fscanf_multiply_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc148)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc147)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc150)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc151)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc152)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc48)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func @main(%arg0: !s32i loc(fused[#loc52, #loc53]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc54, #loc55])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc155)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc56)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc57)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc58)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc58)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc59)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc46)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %8 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call @CWE191_Integer_Underflow__char_fscanf_multiply_16_good() : () -> () loc(#loc61)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc47)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc48)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %13 = cir.get_global @CWE191_Integer_Underflow__char_fscanf_multiply_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call @CWE191_Integer_Underflow__char_fscanf_multiply_16_bad() : () -> () loc(#loc65)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc68)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc158)
    cir.return %17 : !s32i loc(#loc158)
  } loc(#loc153)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc160)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc161)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc77)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc77)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc162)
    cir.br ^bb1 loc(#loc163)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc163)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc81)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc81)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc82)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc136)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc83)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc84)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc84)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !s32i loc(#loc82)
    cir.br ^bb4 loc(#loc85)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc80)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc164)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<1> : !s32i loc(#loc88)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %13 ^bb8, ^bb18 loc(#loc88)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc91)
    %15 = cir.cast(integral, %14 : !s8i), !s32i loc(#loc91)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc92)
    %17 = cir.cmp(lt, %15, %16) : !s32i, !cir.bool loc(#loc166)
    cir.brcond %17 ^bb10, ^bb16 loc(#loc167)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc168)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc96)
    %19 = cir.cast(integral, %18 : !s8i), !s32i loc(#loc96)
    %20 = cir.const #cir.int<127> : !s32i loc(#loc97)
    %21 = cir.unary(minus, %20) : !s32i, !s32i loc(#loc97)
    %22 = cir.const #cir.int<1> : !s32i loc(#loc97)
    %23 = cir.binop(sub, %21, %22) nsw : !s32i loc(#loc97)
    %24 = cir.const #cir.int<2> : !s32i loc(#loc98)
    %25 = cir.binop(div, %23, %24) : !s32i loc(#loc169)
    %26 = cir.cmp(gt, %19, %25) : !s32i, !cir.bool loc(#loc170)
    cir.brcond %26 ^bb12, ^bb13 loc(#loc171)
  ^bb12:  // pred: ^bb11
    %27 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc103)
    %28 = cir.cast(integral, %27 : !s8i), !s32i loc(#loc103)
    %29 = cir.const #cir.int<2> : !s32i loc(#loc74)
    %30 = cir.binop(mul, %28, %29) nsw : !s32i loc(#loc103)
    %31 = cir.cast(integral, %30 : !s32i), !s8i loc(#loc103)
    cir.store %31, %0 : !s8i, !cir.ptr<!s8i> loc(#loc160)
    %32 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc104)
    cir.call @printHexCharLine(%32) : (!s8i) -> () loc(#loc105)
    cir.br ^bb14 loc(#loc101)
  ^bb13:  // pred: ^bb11
    %33 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc70)
    %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%34) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb14 loc(#loc95)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc95)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc90)
  ^bb16:  // 2 preds: ^bb9, ^bb15
    cir.br ^bb17 loc(#loc90)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc107)
  ^bb18:  // 2 preds: ^bb7, ^bb17
    cir.br ^bb19 loc(#loc87)
  ^bb19:  // pred: ^bb18
    cir.return loc(#loc72)
  } loc(#loc159)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s8i, !cir.ptr<!s8i>, ["result", init] {alignment = 1 : i64} loc(#loc173)
    %1 = cir.alloca !s8i, !cir.ptr<!s8i>, ["data"] {alignment = 1 : i64} loc(#loc174)
    %2 = cir.const #cir.int<32> : !s32i loc(#loc114)
    %3 = cir.cast(integral, %2 : !s32i), !s8i loc(#loc114)
    cir.store %3, %1 : !s8i, !cir.ptr<!s8i> loc(#loc175)
    cir.br ^bb1 loc(#loc176)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc176)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc118)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc119)
    %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc120)
    %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc120)
    cir.store %8, %1 : !s8i, !cir.ptr<!s8i> loc(#loc177)
    cir.br ^bb4 loc(#loc122)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc117)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc178)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc178)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc125)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc125)
    cir.brcond %10 ^bb8, ^bb13 loc(#loc125)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc179)
  ^bb9:  // pred: ^bb8
    %11 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc128)
    %12 = cir.cast(integral, %11 : !s8i), !s32i loc(#loc128)
    %13 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc180)
    cir.brcond %14 ^bb10, ^bb11 loc(#loc181)
  ^bb10:  // pred: ^bb9
    %15 = cir.load %1 : !cir.ptr<!s8i>, !s8i loc(#loc131)
    %16 = cir.cast(integral, %15 : !s8i), !s32i loc(#loc131)
    %17 = cir.const #cir.int<2> : !s32i loc(#loc111)
    %18 = cir.binop(mul, %16, %17) nsw : !s32i loc(#loc131)
    %19 = cir.cast(integral, %18 : !s32i), !s8i loc(#loc131)
    cir.store %19, %0 : !s8i, !cir.ptr<!s8i> loc(#loc173)
    %20 = cir.load %0 : !cir.ptr<!s8i>, !s8i loc(#loc132)
    cir.call @printHexCharLine(%20) : (!s8i) -> () loc(#loc133)
    cir.br ^bb11 loc(#loc127)
  ^bb11:  // 2 preds: ^bb9, ^bb10
    cir.br ^bb12 loc(#loc127)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc134)
  ^bb13:  // 2 preds: ^bb7, ^bb12
    cir.br ^bb14 loc(#loc124)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc109)
  } loc(#loc172)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s01/CWE191_Integer_Underflow__char_fscanf_multiply_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":29:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc8 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":22:1)
#loc9 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":42:1)
#loc10 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":37:13)
#loc11 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":37:34)
#loc12 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":24:5)
#loc13 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":24:10)
#loc14 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":25:12)
#loc15 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":25:5)
#loc16 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":26:5)
#loc17 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":31:5)
#loc18 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":26:11)
#loc19 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":29:9)
#loc20 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":29:17)
#loc21 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":30:9)
#loc22 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":32:5)
#loc23 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":41:5)
#loc24 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":32:11)
#loc25 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":34:9)
#loc26 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":39:9)
#loc27 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":34:12)
#loc28 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":34:19)
#loc29 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":35:9)
#loc30 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":37:27)
#loc31 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":38:30)
#loc32 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":38:13)
#loc33 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":40:9)
#loc34 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":101:1)
#loc35 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":105:1)
#loc36 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":103:5)
#loc37 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":103:13)
#loc38 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":104:5)
#loc39 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":104:13)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":121:15)
#loc47 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":123:15)
#loc48 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":126:15)
#loc49 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":128:15)
#loc50 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":116:1)
#loc51 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":131:1)
#loc56 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":117:1)
#loc57 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":119:27)
#loc58 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":119:22)
#loc59 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":119:5)
#loc60 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":121:5)
#loc61 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":122:5)
#loc62 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":122:60)
#loc63 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":123:5)
#loc64 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":126:5)
#loc65 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":127:5)
#loc66 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":127:59)
#loc67 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":128:5)
#loc68 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":130:12)
#loc69 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":130:5)
#loc70 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":71:27)
#loc71 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":49:1)
#loc72 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":76:1)
#loc73 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":66:17)
#loc74 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":66:38)
#loc75 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":51:5)
#loc76 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":51:10)
#loc77 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":52:12)
#loc78 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":52:5)
#loc79 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":53:5)
#loc80 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":58:5)
#loc81 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":53:11)
#loc82 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":56:9)
#loc83 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":56:17)
#loc84 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":56:24)
#loc85 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":57:9)
#loc86 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":59:5)
#loc87 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":75:5)
#loc88 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":59:11)
#loc89 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":61:9)
#loc90 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":73:9)
#loc91 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":61:12)
#loc92 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":61:19)
#loc93 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":62:9)
#loc94 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":64:13)
#loc95 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":72:13)
#loc96 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":64:17)
#loc97 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":64:25)
#loc98 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":64:34)
#loc99 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":64:35)
#loc100 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":65:13)
#loc101 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":68:13)
#loc102 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":70:13)
#loc103 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":66:31)
#loc104 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":67:34)
#loc105 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":67:17)
#loc106 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":71:17)
#loc107 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":74:9)
#loc108 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":79:1)
#loc109 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":99:1)
#loc110 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":94:13)
#loc111 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":94:34)
#loc112 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":81:5)
#loc113 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":81:10)
#loc114 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":82:12)
#loc115 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":82:5)
#loc116 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":83:5)
#loc117 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":88:5)
#loc118 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":83:11)
#loc119 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":86:17)
#loc120 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":86:16)
#loc121 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":86:9)
#loc122 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":87:9)
#loc123 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":89:5)
#loc124 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":98:5)
#loc125 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":89:11)
#loc126 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":91:9)
#loc127 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":96:9)
#loc128 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":91:12)
#loc129 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":91:19)
#loc130 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":92:9)
#loc131 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":94:27)
#loc132 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":95:30)
#loc133 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":95:13)
#loc134 = loc("CWE191_Integer_Underflow__char_fscanf_multiply_16.c":97:9)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc6, #loc7])
#loc138 = loc(fused[#loc8, #loc9])
#loc139 = loc(fused[#loc10, #loc11])
#loc140 = loc(fused[#loc12, #loc13])
#loc141 = loc(fused[#loc15, #loc14])
#loc142 = loc(fused[#loc16, #loc17])
#loc143 = loc(fused[#loc22, #loc23])
#loc144 = loc(fused[#loc25, #loc26])
#loc145 = loc(fused[#loc27, #loc28])
#loc146 = loc(fused[#loc29, #loc26])
#loc147 = loc(fused[#loc34, #loc35])
#loc148 = loc(fused[#loc36, #loc37])
#loc149 = loc(fused[#loc38, #loc39])
#loc150 = loc(fused[#loc40, #loc41])
#loc151 = loc(fused[#loc42, #loc43])
#loc152 = loc(fused[#loc44, #loc45])
#loc153 = loc(fused[#loc50, #loc51])
#loc156 = loc(fused[#loc61, #loc62])
#loc157 = loc(fused[#loc65, #loc66])
#loc158 = loc(fused[#loc69, #loc68])
#loc159 = loc(fused[#loc71, #loc72])
#loc160 = loc(fused[#loc73, #loc74])
#loc161 = loc(fused[#loc75, #loc76])
#loc162 = loc(fused[#loc78, #loc77])
#loc163 = loc(fused[#loc79, #loc80])
#loc164 = loc(fused[#loc86, #loc87])
#loc165 = loc(fused[#loc89, #loc90])
#loc166 = loc(fused[#loc91, #loc92])
#loc167 = loc(fused[#loc93, #loc90])
#loc168 = loc(fused[#loc94, #loc95])
#loc169 = loc(fused[#loc97, #loc98])
#loc170 = loc(fused[#loc96, #loc99])
#loc171 = loc(fused[#loc100, #loc101, #loc102, #loc95])
#loc172 = loc(fused[#loc108, #loc109])
#loc173 = loc(fused[#loc110, #loc111])
#loc174 = loc(fused[#loc112, #loc113])
#loc175 = loc(fused[#loc115, #loc114])
#loc176 = loc(fused[#loc116, #loc117])
#loc177 = loc(fused[#loc121, #loc119])
#loc178 = loc(fused[#loc123, #loc124])
#loc179 = loc(fused[#loc126, #loc127])
#loc180 = loc(fused[#loc128, #loc129])
#loc181 = loc(fused[#loc130, #loc127])
