!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":24:22)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":24:26)
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":137:10)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":137:14)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":137:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":137:32)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":83:26)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":83:30)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":61:26)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":61:30)
#loc183 = loc(fused[#loc10, #loc11])
#loc207 = loc(fused[#loc74, #loc75])
#loc208 = loc(fused[#loc76, #loc77])
#loc213 = loc(fused[#loc94, #loc95])
#loc234 = loc(fused[#loc152, #loc153])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc179)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc180)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc181)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc7)
  cir.func internal private @badSource(%arg0: !s32i loc(fused[#loc10, #loc11])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc183)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc9)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc12)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc185)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc185)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc185)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc19)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc20)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc20)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc20)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc20)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc20)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc20)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc20)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc22)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc23)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc23)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc187)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc27)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc28)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
        } else {
          %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc7)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc31)
        } loc(#loc188)
      } loc(#loc186)
    } loc(#loc184)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc190)
    cir.return %3 : !s32i loc(#loc190)
  } loc(#loc182)
  cir.func private @printIntLine(!s32i) loc(#loc191)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc193)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc40)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc194)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    %3 = cir.call @badSource(%2) : (!s32i) -> !s32i loc(#loc43)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc48)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc49)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc197)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc52)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc53)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc199)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc54)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc55)
      } loc(#loc198)
    } loc(#loc196)
    cir.return loc(#loc37)
  } loc(#loc192)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_multiply_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc201)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc202)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    cir.return loc(#loc57)
  } loc(#loc200)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc203)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc204)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc205)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc207)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc208)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc209)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_42_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_multiply_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc210)
    cir.call @CWE190_Integer_Overflow__int_fgets_multiply_42_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc211)
    cir.return %17 : !s32i loc(#loc211)
  } loc(#loc206)
  cir.func internal private @goodB2GSource(%arg0: !s32i loc(fused[#loc94, #loc95])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.scope {
      %4 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc215)
      %5 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc215)
      cir.store %5, %4 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc215)
      cir.scope {
        %6 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc103)
        %7 = cir.const #cir.int<3> : !s32i loc(#loc104)
        %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc104)
        %9 = cir.const #cir.int<4> : !u64i loc(#loc104)
        %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc104)
        %11 = cir.const #cir.int<2> : !s32i loc(#loc104)
        %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc104)
        %13 = cir.binop(add, %10, %12) : !u64i loc(#loc104)
        %14 = cir.cast(integral, %13 : !u64i), !s32i loc(#loc104)
        %15 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc180)
        %16 = cir.load %15 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc105)
        %17 = cir.call @fgets(%6, %14, %16) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc106)
        %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc107)
        %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc107)
        %20 = cir.cmp(ne, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc217)
        cir.if %20 {
          %21 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc111)
          %22 = cir.call @atoi(%21) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc112)
          cir.store %22, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
        } else {
          %21 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc115)
          %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc115)
          cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc116)
        } loc(#loc218)
      } loc(#loc216)
    } loc(#loc214)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc117)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    %3 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    cir.return %3 : !s32i loc(#loc220)
  } loc(#loc212)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc119)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc222)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc124)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc126)
    %3 = cir.call @goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc127)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc132)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc133)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc226)
      cir.if %6 {
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
          %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc138)
          %9 = cir.const #cir.int<2> : !s32i loc(#loc139)
          %10 = cir.binop(div, %8, %9) : !s32i loc(#loc229)
          %11 = cir.cmp(lt, %7, %10) : !s32i, !cir.bool loc(#loc230)
          cir.if %11 {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc232)
            %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc146)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc145)
            %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc146)
            cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc232)
            %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc147)
            cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc148)
          } else {
            %12 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc149)
          } loc(#loc231)
        } loc(#loc228)
      } loc(#loc227)
    } loc(#loc225)
    cir.return loc(#loc121)
  } loc(#loc221)
  cir.func internal private @goodG2BSource(%arg0: !s32i loc(fused[#loc152, #loc153])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc234)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc151)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc155)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc235)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.return %4 : !s32i loc(#loc236)
  } loc(#loc233)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc238)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc163)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc239)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    %3 = cir.call @goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc166)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc240)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc171)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc172)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !cir.bool loc(#loc242)
      cir.if %6 {
        %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc244)
        %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc176)
        %9 = cir.const #cir.int<2> : !s32i loc(#loc175)
        %10 = cir.binop(mul, %8, %9) nsw : !s32i loc(#loc176)
        cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc244)
        %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc177)
        cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc178)
      } loc(#loc243)
    } loc(#loc241)
    cir.return loc(#loc160)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_multiply_42.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":36:23)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":40:1)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":25:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":38:5)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":27:9)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":27:45)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:9)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":37:9)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:19)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:32)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:49)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:13)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":29:59)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":30:9)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":33:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":35:9)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":32:25)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":32:20)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":32:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":32:36)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":36:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":39:12)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":39:5)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc35 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":42:1)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":54:1)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":44:5)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":44:9)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":46:12)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":46:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":47:22)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":47:12)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":47:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":47:26)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":48:5)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":53:5)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":48:8)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":48:15)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":49:5)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":51:9)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":51:29)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":51:22)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":52:22)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":52:9)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":122:1)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":126:1)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":124:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":124:13)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":125:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":125:13)
#loc62 = loc("/usr/include/stdlib.h":575:1)
#loc63 = loc("/usr/include/stdlib.h":575:41)
#loc64 = loc("/usr/include/time.h":76:1)
#loc65 = loc("/usr/include/time.h":76:38)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc67 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":142:15)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":144:15)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":147:15)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":149:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":137:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":152:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":138:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":140:27)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":140:22)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":140:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":142:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":143:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":143:57)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":144:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":147:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":148:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":148:56)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":149:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":151:12)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":151:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":83:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":99:1)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":84:1)
#loc97 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":85:5)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":97:5)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":86:9)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":86:45)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:9)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":96:9)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:19)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:32)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:49)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:13)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":88:59)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":89:9)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":92:9)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":94:9)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":91:25)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":91:20)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":91:13)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":91:36)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":95:23)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":95:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":98:12)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":98:5)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":117:23)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":101:1)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":120:1)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":103:5)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":103:9)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":105:12)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":105:5)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":106:26)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":106:12)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":106:5)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":106:30)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":107:5)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":119:5)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":107:8)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":107:15)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":108:5)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":110:9)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":118:9)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":110:13)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":110:21)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":110:29)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":110:30)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":111:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":114:9)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":116:9)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":112:13)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":112:33)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":112:26)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":113:26)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":113:13)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":117:13)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":61:1)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":66:1)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":62:1)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":64:12)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":64:5)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":65:12)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":65:5)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":68:1)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":80:1)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":70:5)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":70:9)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":72:12)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":72:5)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":73:26)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":73:12)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":73:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":73:30)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":74:5)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":79:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":74:8)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":74:15)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":75:5)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":77:9)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":77:29)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":77:22)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":78:22)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_multiply_42.c":78:9)
#loc179 = loc(fused[#loc1, #loc2])
#loc180 = loc(fused[#loc3, #loc4])
#loc181 = loc(fused[#loc5, #loc6])
#loc182 = loc(fused[#loc8, #loc9])
#loc184 = loc(fused[#loc13, #loc14])
#loc185 = loc(fused[#loc15, #loc16])
#loc186 = loc(fused[#loc17, #loc18])
#loc187 = loc(fused[#loc22, #loc23])
#loc188 = loc(fused[#loc24, #loc25, #loc26, #loc18])
#loc189 = loc(fused[#loc29, #loc30])
#loc190 = loc(fused[#loc33, #loc32])
#loc191 = loc(fused[#loc34, #loc35])
#loc192 = loc(fused[#loc36, #loc37])
#loc193 = loc(fused[#loc38, #loc39])
#loc194 = loc(fused[#loc41, #loc40])
#loc195 = loc(fused[#loc44, #loc45])
#loc196 = loc(fused[#loc46, #loc47])
#loc197 = loc(fused[#loc48, #loc49])
#loc198 = loc(fused[#loc50, #loc47])
#loc199 = loc(fused[#loc51, #loc52])
#loc200 = loc(fused[#loc56, #loc57])
#loc201 = loc(fused[#loc58, #loc59])
#loc202 = loc(fused[#loc60, #loc61])
#loc203 = loc(fused[#loc62, #loc63])
#loc204 = loc(fused[#loc64, #loc65])
#loc205 = loc(fused[#loc66, #loc67])
#loc206 = loc(fused[#loc72, #loc73])
#loc209 = loc(fused[#loc83, #loc84])
#loc210 = loc(fused[#loc87, #loc88])
#loc211 = loc(fused[#loc91, #loc90])
#loc212 = loc(fused[#loc92, #loc93])
#loc214 = loc(fused[#loc97, #loc98])
#loc215 = loc(fused[#loc99, #loc100])
#loc216 = loc(fused[#loc101, #loc102])
#loc217 = loc(fused[#loc106, #loc107])
#loc218 = loc(fused[#loc108, #loc109, #loc110, #loc102])
#loc219 = loc(fused[#loc113, #loc114])
#loc220 = loc(fused[#loc118, #loc117])
#loc221 = loc(fused[#loc120, #loc121])
#loc222 = loc(fused[#loc122, #loc123])
#loc223 = loc(fused[#loc125, #loc124])
#loc224 = loc(fused[#loc128, #loc129])
#loc225 = loc(fused[#loc130, #loc131])
#loc226 = loc(fused[#loc132, #loc133])
#loc227 = loc(fused[#loc134, #loc131])
#loc228 = loc(fused[#loc135, #loc136])
#loc229 = loc(fused[#loc138, #loc139])
#loc230 = loc(fused[#loc137, #loc140])
#loc231 = loc(fused[#loc141, #loc142, #loc143, #loc136])
#loc232 = loc(fused[#loc144, #loc145])
#loc233 = loc(fused[#loc150, #loc151])
#loc235 = loc(fused[#loc156, #loc155])
#loc236 = loc(fused[#loc158, #loc157])
#loc237 = loc(fused[#loc159, #loc160])
#loc238 = loc(fused[#loc161, #loc162])
#loc239 = loc(fused[#loc164, #loc163])
#loc240 = loc(fused[#loc167, #loc168])
#loc241 = loc(fused[#loc169, #loc170])
#loc242 = loc(fused[#loc171, #loc172])
#loc243 = loc(fused[#loc173, #loc170])
#loc244 = loc(fused[#loc174, #loc175])
