!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc19 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":46:63)
#loc20 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":46:69)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":125:67)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":125:73)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":133:67)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":133:73)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc279 = loc(fused[#loc19, #loc20])
#loc325 = loc(fused[#loc143, #loc144])
#loc329 = loc(fused[#loc152, #loc153])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_61b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc270)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc271)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc272)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc274)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc275)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc276)
  cir.func private @close(!s32i) -> !s32i loc(#loc277)
  cir.func @CWE369_Divide_by_Zero__float_listenSocket_61b_badSource(%arg0: !cir.float loc(fused[#loc19, #loc20])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc279)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc18)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc21)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc281)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc282)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc283)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc284)
      %8 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc285)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc29)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc29)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc283)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc31)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc31)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc284)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc38)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc39)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc40)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc41)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc288)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc46)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc47)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc47)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc290)
              cir.if %56 {
                cir.break loc(#loc49)
              } loc(#loc291)
            } loc(#loc289)
            %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc292)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc52)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc293)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc294)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc57)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc57)
            %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc295)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc60)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc60)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc296)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc64)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc64)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc65)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc297)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc299)
              %55 = cir.const #cir.int<16> : !u64i loc(#loc300)
              %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc300)
              %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc76)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc77)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc77)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc301)
              cir.if %60 {
                cir.break loc(#loc79)
              } loc(#loc302)
            } loc(#loc298)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc82)
              %54 = cir.const #cir.int<5> : !s32i loc(#loc83)
              %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc84)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc85)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc85)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc304)
              cir.if %58 {
                cir.break loc(#loc87)
              } loc(#loc305)
            } loc(#loc303)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc89)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc90)
            %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc91)
            cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc306)
            cir.scope {
              %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc97)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc97)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc308)
              cir.if %56 {
                cir.break loc(#loc99)
              } loc(#loc309)
            } loc(#loc307)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc100)
            %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc101)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc101)
            %38 = cir.const #cir.int<20> : !s32i loc(#loc102)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc102)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc102)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc104)
            %43 = cir.call @recv(%35, %37, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc105)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc105)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc310)
            cir.scope {
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc110)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc111)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc111)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc312)
              %57 = cir.ternary(%56, true {
                %58 = cir.const #true loc(#loc112)
                cir.yield %58 : !cir.bool loc(#loc112)
              }, false {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc113)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc114)
                %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc313)
                %61 = cir.ternary(%60, true {
                  %62 = cir.const #true loc(#loc112)
                  cir.yield %62 : !cir.bool loc(#loc112)
                }, false {
                  %62 = cir.const #false loc(#loc112)
                  cir.yield %62 : !cir.bool loc(#loc112)
                }) : (!cir.bool) -> !cir.bool loc(#loc112)
                cir.yield %61 : !cir.bool loc(#loc112)
              }) : (!cir.bool) -> !cir.bool loc(#loc112)
              cir.if %57 {
                cir.break loc(#loc116)
              } loc(#loc314)
            } loc(#loc311)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc117)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc117)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc118)
            %48 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc119)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc119)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc315)
            %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc120)
            %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc121)
            %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc121)
            cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc316)
          } loc(#loc287)
          cir.yield loc(#loc35)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc124)
          cir.condition(%14) loc(#loc124)
        } loc(#loc286)
      } loc(#loc286)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc127)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc128)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc128)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc318)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc130)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc131)
        } loc(#loc319)
      } loc(#loc317)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc135)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc321)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc137)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc138)
        } loc(#loc322)
      } loc(#loc320)
    } loc(#loc280)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc139)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc323)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc323)
    cir.return %3 : !cir.float loc(#loc323)
  } loc(#loc278)
  cir.func @CWE369_Divide_by_Zero__float_listenSocket_61b_goodG2BSource(%arg0: !cir.float loc(fused[#loc143, #loc144])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc325)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc142)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc145)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc146)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc326)
    %3 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc148)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc327)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc327)
    cir.return %4 : !cir.float loc(#loc327)
  } loc(#loc324)
  cir.func @CWE369_Divide_by_Zero__float_listenSocket_61b_goodB2GSource(%arg0: !cir.float loc(fused[#loc152, #loc153])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc329)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc151)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc154)
    cir.scope {
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc331)
      %5 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc332)
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc333)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc334)
      %8 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc335)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc162)
      %10 = cir.unary(minus, %9) nsw : !s32i, !s32i loc(#loc162)
      cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc333)
      %11 = cir.const #cir.int<1> : !s32i loc(#loc164)
      %12 = cir.unary(minus, %11) nsw : !s32i, !s32i loc(#loc164)
      cir.store %12, %7 : !s32i, !cir.ptr<!s32i> loc(#loc334)
      cir.scope {
        cir.do {
          cir.scope {
            %13 = cir.const #cir.int<2> : !s32i loc(#loc171)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc172)
            %15 = cir.const #cir.int<6> : !s32i loc(#loc173)
            %16 = cir.call @socket(%13, %14, %15) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc174)
            cir.store %16, %6 : !s32i, !cir.ptr<!s32i> loc(#loc338)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc179)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc180)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc180)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc340)
              cir.if %56 {
                cir.break loc(#loc182)
              } loc(#loc341)
            } loc(#loc339)
            %17 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc342)
            %18 = cir.const #cir.int<0> : !s32i loc(#loc185)
            %19 = cir.const #cir.int<16> : !u64i loc(#loc343)
            cir.libc.memset %19 bytes from %17 set to %18 : !cir.ptr<!void>, !s32i, !u64i loc(#loc344)
            %20 = cir.const #cir.int<2> : !s32i loc(#loc190)
            %21 = cir.cast(integral, %20 : !s32i), !u16i loc(#loc190)
            %22 = cir.get_member %5[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc58)
            cir.store %21, %22 : !u16i, !cir.ptr<!u16i> loc(#loc345)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc192)
            %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc192)
            %25 = cir.get_member %5[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc61)
            %26 = cir.get_member %25[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc62)
            cir.store %24, %26 : !u32i, !cir.ptr<!u32i> loc(#loc346)
            %27 = cir.const #cir.int<27015> : !s32i loc(#loc194)
            %28 = cir.cast(integral, %27 : !s32i), !u16i loc(#loc194)
            %29 = cir.call @htons(%28) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc195)
            %30 = cir.get_member %5[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc66)
            cir.store %29, %30 : !u16i, !cir.ptr<!u16i> loc(#loc347)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %54 = cir.cast(bitcast, %5 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc349)
              %55 = cir.const #cir.int<16> : !u64i loc(#loc350)
              %56 = cir.cast(integral, %55 : !u64i), !u32i loc(#loc350)
              %57 = cir.call @bind(%53, %54, %56) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc205)
              %58 = cir.const #cir.int<1> : !s32i loc(#loc206)
              %59 = cir.unary(minus, %58) nsw : !s32i, !s32i loc(#loc206)
              %60 = cir.cmp(eq, %57, %59) : !s32i, !cir.bool loc(#loc351)
              cir.if %60 {
                cir.break loc(#loc208)
              } loc(#loc352)
            } loc(#loc348)
            cir.scope {
              %53 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc211)
              %54 = cir.const #cir.int<5> : !s32i loc(#loc212)
              %55 = cir.call @listen(%53, %54) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc213)
              %56 = cir.const #cir.int<1> : !s32i loc(#loc214)
              %57 = cir.unary(minus, %56) nsw : !s32i, !s32i loc(#loc214)
              %58 = cir.cmp(eq, %55, %57) : !s32i, !cir.bool loc(#loc354)
              cir.if %58 {
                cir.break loc(#loc216)
              } loc(#loc355)
            } loc(#loc353)
            %31 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc217)
            %32 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc218)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc219)
            %34 = cir.call @accept(%31, %32, %33) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc220)
            cir.store %34, %7 : !s32i, !cir.ptr<!s32i> loc(#loc356)
            cir.scope {
              %53 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc225)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc226)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc226)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc358)
              cir.if %56 {
                cir.break loc(#loc228)
              } loc(#loc359)
            } loc(#loc357)
            %35 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc229)
            %36 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc230)
            %37 = cir.cast(bitcast, %36 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc230)
            %38 = cir.const #cir.int<20> : !s32i loc(#loc231)
            %39 = cir.const #cir.int<1> : !s32i loc(#loc232)
            %40 = cir.binop(sub, %38, %39) nsw : !s32i loc(#loc231)
            %41 = cir.cast(integral, %40 : !s32i), !u64i loc(#loc231)
            %42 = cir.const #cir.int<0> : !s32i loc(#loc233)
            %43 = cir.call @recv(%35, %37, %41, %42) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc234)
            %44 = cir.cast(integral, %43 : !s64i), !s32i loc(#loc234)
            cir.store %44, %4 : !s32i, !cir.ptr<!s32i> loc(#loc360)
            cir.scope {
              %53 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc239)
              %54 = cir.const #cir.int<1> : !s32i loc(#loc240)
              %55 = cir.unary(minus, %54) nsw : !s32i, !s32i loc(#loc240)
              %56 = cir.cmp(eq, %53, %55) : !s32i, !cir.bool loc(#loc362)
              %57 = cir.ternary(%56, true {
                %58 = cir.const #true loc(#loc241)
                cir.yield %58 : !cir.bool loc(#loc241)
              }, false {
                %58 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc242)
                %59 = cir.const #cir.int<0> : !s32i loc(#loc243)
                %60 = cir.cmp(eq, %58, %59) : !s32i, !cir.bool loc(#loc363)
                %61 = cir.ternary(%60, true {
                  %62 = cir.const #true loc(#loc241)
                  cir.yield %62 : !cir.bool loc(#loc241)
                }, false {
                  %62 = cir.const #false loc(#loc241)
                  cir.yield %62 : !cir.bool loc(#loc241)
                }) : (!cir.bool) -> !cir.bool loc(#loc241)
                cir.yield %61 : !cir.bool loc(#loc241)
              }) : (!cir.bool) -> !cir.bool loc(#loc241)
              cir.if %57 {
                cir.break loc(#loc245)
              } loc(#loc364)
            } loc(#loc361)
            %45 = cir.const #cir.int<0> : !s32i loc(#loc246)
            %46 = cir.cast(integral, %45 : !s32i), !s8i loc(#loc246)
            %47 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc247)
            %48 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc248)
            %49 = cir.ptr_stride(%48 : !cir.ptr<!s8i>, %47 : !s32i), !cir.ptr<!s8i> loc(#loc248)
            cir.store %46, %49 : !s8i, !cir.ptr<!s8i> loc(#loc365)
            %50 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc249)
            %51 = cir.call @atof(%50) : (!cir.ptr<!s8i>) -> !cir.double side_effect(pure) extra(#fn_attr) loc(#loc250)
            %52 = cir.cast(floating, %51 : !cir.double), !cir.float loc(#loc250)
            cir.store %52, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc366)
          } loc(#loc337)
          cir.yield loc(#loc168)
        } while {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc253)
          %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc253)
          cir.condition(%14) loc(#loc253)
        } loc(#loc336)
      } loc(#loc336)
      cir.scope {
        %13 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc256)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc257)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc257)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc368)
        cir.if %16 {
          %17 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc259)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc260)
        } loc(#loc369)
      } loc(#loc367)
      cir.scope {
        %13 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc263)
        %14 = cir.const #cir.int<1> : !s32i loc(#loc264)
        %15 = cir.unary(minus, %14) nsw : !s32i, !s32i loc(#loc264)
        %16 = cir.cmp(ne, %13, %15) : !s32i, !cir.bool loc(#loc371)
        cir.if %16 {
          %17 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc266)
          %18 = cir.call @close(%17) : (!s32i) -> !s32i loc(#loc267)
        } loc(#loc372)
      } loc(#loc370)
    } loc(#loc330)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc268)
    cir.store %2, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc373)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc373)
    cir.return %3 : !cir.float loc(#loc373)
  } loc(#loc328)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_61b.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":46:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":118:1)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":47:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":48:5)
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":116:5)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":53:9)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":53:13)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":54:9)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":54:28)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":55:9)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":55:31)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":56:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":56:31)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":57:9)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":57:41)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":58:9)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":101:17)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":59:9)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":100:9)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:35)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:44)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:57)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:28)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:13)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":67:68)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":68:13)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":71:13)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":68:17)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":68:33)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":69:13)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":70:17)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:20)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:21)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:30)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:33)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:47)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:13)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":72:48)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":73:34)
#loc58 = loc("/usr/include/netinet/in.h":249:5)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":73:13)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":74:39)
#loc61 = loc("/usr/include/netinet/in.h":251:20)
#loc62 = loc("/usr/include/netinet/in.h":33:15)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":74:13)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":75:38)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":75:32)
#loc66 = loc("/usr/include/netinet/in.h":250:15)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":75:13)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":75:46)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:13)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":79:13)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:22)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:54)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:55)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:64)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:78)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:17)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":76:84)
#loc78 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":77:13)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":78:17)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":80:13)
#loc81 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":83:13)
#loc82 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":80:24)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":80:38)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":80:17)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":80:57)
#loc86 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":81:13)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":82:17)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:35)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:49)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:55)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:28)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:13)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":84:59)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":85:13)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":88:13)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":85:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":85:33)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":86:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":87:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:31)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:45)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:58)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:76)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:79)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:26)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":91:80)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:13)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":95:13)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:17)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:31)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:44)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:47)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":92:61)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":93:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":94:17)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":97:39)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":97:25)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":97:13)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":99:32)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":99:27)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":99:13)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":99:43)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":101:16)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":102:9)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":105:9)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":102:13)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":102:29)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":103:9)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":104:26)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":104:13)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":106:9)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":109:9)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":106:13)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":106:29)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":107:9)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":108:26)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":108:13)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":117:12)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":117:5)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":125:1)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":130:1)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":126:1)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":128:12)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":128:5)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":129:12)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":129:5)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":133:1)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":205:1)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":134:1)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":135:5)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":203:5)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":140:9)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":140:13)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":141:9)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":141:28)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":142:9)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":142:31)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":143:9)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":143:31)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":144:9)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":144:41)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":145:9)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":188:17)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":146:9)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":187:9)
#loc171 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:35)
#loc172 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:44)
#loc173 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:57)
#loc174 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:28)
#loc175 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:13)
#loc176 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":154:68)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":155:13)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":158:13)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":155:17)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":155:33)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":156:13)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":157:17)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:20)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:21)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:30)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:33)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:47)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:13)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":159:48)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":160:34)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":160:13)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":161:39)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":161:13)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":162:38)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":162:32)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":162:13)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":162:46)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:13)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":166:13)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:22)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:54)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:55)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:64)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:78)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:17)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":163:84)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":164:13)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":165:17)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":167:13)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":170:13)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":167:24)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":167:38)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":167:17)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":167:57)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":168:13)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":169:17)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:35)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:49)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:55)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:28)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:13)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":171:59)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":172:13)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":175:13)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":172:17)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":172:33)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":173:13)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":174:17)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:31)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:45)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:58)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:76)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:79)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:26)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:13)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":178:80)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:13)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":182:13)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:17)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:31)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:44)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:47)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":179:61)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":180:13)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":181:17)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":184:39)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":184:25)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":184:13)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":186:32)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":186:27)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":186:13)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":186:43)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":188:16)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":189:9)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":192:9)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":189:13)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":189:29)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":190:9)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":191:26)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":191:13)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":193:9)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":196:9)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":193:13)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":193:29)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":194:9)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":195:26)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":195:13)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":204:12)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_61b.c":204:5)
#loc270 = loc(fused[#loc1, #loc2])
#loc271 = loc(fused[#loc3, #loc4])
#loc272 = loc(fused[#loc5, #loc6])
#loc273 = loc(fused[#loc7, #loc8])
#loc274 = loc(fused[#loc9, #loc10])
#loc275 = loc(fused[#loc11, #loc12])
#loc276 = loc(fused[#loc13, #loc14])
#loc277 = loc(fused[#loc15, #loc16])
#loc278 = loc(fused[#loc17, #loc18])
#loc280 = loc(fused[#loc22, #loc23])
#loc281 = loc(fused[#loc24, #loc25])
#loc282 = loc(fused[#loc26, #loc27])
#loc283 = loc(fused[#loc28, #loc29])
#loc284 = loc(fused[#loc30, #loc31])
#loc285 = loc(fused[#loc32, #loc33])
#loc286 = loc(fused[#loc34, #loc35])
#loc287 = loc(fused[#loc36, #loc37])
#loc288 = loc(fused[#loc42, #loc43])
#loc289 = loc(fused[#loc44, #loc45])
#loc290 = loc(fused[#loc46, #loc47])
#loc291 = loc(fused[#loc48, #loc45])
#loc292 = loc(fused[#loc50, #loc51])
#loc293 = loc(fused[#loc53, #loc54])
#loc294 = loc(fused[#loc55, #loc56])
#loc295 = loc(fused[#loc59, #loc57])
#loc296 = loc(fused[#loc63, #loc60])
#loc297 = loc(fused[#loc67, #loc68])
#loc298 = loc(fused[#loc69, #loc70])
#loc299 = loc(fused[#loc72, #loc73])
#loc300 = loc(fused[#loc74, #loc75])
#loc301 = loc(fused[#loc76, #loc77])
#loc302 = loc(fused[#loc78, #loc70])
#loc303 = loc(fused[#loc80, #loc81])
#loc304 = loc(fused[#loc84, #loc85])
#loc305 = loc(fused[#loc86, #loc81])
#loc306 = loc(fused[#loc92, #loc93])
#loc307 = loc(fused[#loc94, #loc95])
#loc308 = loc(fused[#loc96, #loc97])
#loc309 = loc(fused[#loc98, #loc95])
#loc310 = loc(fused[#loc106, #loc107])
#loc311 = loc(fused[#loc108, #loc109])
#loc312 = loc(fused[#loc110, #loc111])
#loc313 = loc(fused[#loc113, #loc114])
#loc314 = loc(fused[#loc115, #loc109])
#loc315 = loc(fused[#loc119, #loc117])
#loc316 = loc(fused[#loc122, #loc123])
#loc317 = loc(fused[#loc125, #loc126])
#loc318 = loc(fused[#loc127, #loc128])
#loc319 = loc(fused[#loc129, #loc126])
#loc320 = loc(fused[#loc132, #loc133])
#loc321 = loc(fused[#loc134, #loc135])
#loc322 = loc(fused[#loc136, #loc133])
#loc323 = loc(fused[#loc140, #loc139])
#loc324 = loc(fused[#loc141, #loc142])
#loc326 = loc(fused[#loc147, #loc146])
#loc327 = loc(fused[#loc149, #loc148])
#loc328 = loc(fused[#loc150, #loc151])
#loc330 = loc(fused[#loc155, #loc156])
#loc331 = loc(fused[#loc157, #loc158])
#loc332 = loc(fused[#loc159, #loc160])
#loc333 = loc(fused[#loc161, #loc162])
#loc334 = loc(fused[#loc163, #loc164])
#loc335 = loc(fused[#loc165, #loc166])
#loc336 = loc(fused[#loc167, #loc168])
#loc337 = loc(fused[#loc169, #loc170])
#loc338 = loc(fused[#loc175, #loc176])
#loc339 = loc(fused[#loc177, #loc178])
#loc340 = loc(fused[#loc179, #loc180])
#loc341 = loc(fused[#loc181, #loc178])
#loc342 = loc(fused[#loc183, #loc184])
#loc343 = loc(fused[#loc186, #loc187])
#loc344 = loc(fused[#loc188, #loc189])
#loc345 = loc(fused[#loc191, #loc190])
#loc346 = loc(fused[#loc193, #loc192])
#loc347 = loc(fused[#loc196, #loc197])
#loc348 = loc(fused[#loc198, #loc199])
#loc349 = loc(fused[#loc201, #loc202])
#loc350 = loc(fused[#loc203, #loc204])
#loc351 = loc(fused[#loc205, #loc206])
#loc352 = loc(fused[#loc207, #loc199])
#loc353 = loc(fused[#loc209, #loc210])
#loc354 = loc(fused[#loc213, #loc214])
#loc355 = loc(fused[#loc215, #loc210])
#loc356 = loc(fused[#loc221, #loc222])
#loc357 = loc(fused[#loc223, #loc224])
#loc358 = loc(fused[#loc225, #loc226])
#loc359 = loc(fused[#loc227, #loc224])
#loc360 = loc(fused[#loc235, #loc236])
#loc361 = loc(fused[#loc237, #loc238])
#loc362 = loc(fused[#loc239, #loc240])
#loc363 = loc(fused[#loc242, #loc243])
#loc364 = loc(fused[#loc244, #loc238])
#loc365 = loc(fused[#loc248, #loc246])
#loc366 = loc(fused[#loc251, #loc252])
#loc367 = loc(fused[#loc254, #loc255])
#loc368 = loc(fused[#loc256, #loc257])
#loc369 = loc(fused[#loc258, #loc255])
#loc370 = loc(fused[#loc261, #loc262])
#loc371 = loc(fused[#loc263, #loc264])
#loc372 = loc(fused[#loc265, #loc262])
#loc373 = loc(fused[#loc269, #loc268])
