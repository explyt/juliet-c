!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc136)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_badData = #cir.ptr<null> : !cir.ptr<!s64i> {alignment = 8 : i64} loc(#loc137)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc11)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc140)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc13)
    %3 = cir.const #cir.int<50> : !s32i loc(#loc14)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc14)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc141)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc142)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc13)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc143)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc144)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc21)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc22)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc22)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !s32i loc(#loc146)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc23)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc25)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc27)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc25)
      } loc(#loc147)
    } loc(#loc145)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc28)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_badData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc137)
    cir.store %9, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc148)
    %11 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc8)
  } loc(#loc138)
  cir.func no_proto  @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc151)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc150)
  cir.func private  @printLongLongLine(!s64i) loc(#loc152)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc153)
  cir.func no_proto internal private  @badSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc155)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_badData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc137)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc43)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc155)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc157)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc157)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc157)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc159)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc54)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc54)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc161)
          cir.for : cond {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc56)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc57)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc57)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !s32i loc(#loc162)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc58)
            cir.condition(%19) loc(#loc58)
          } body {
            cir.scope {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc60)
              %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc61)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc61)
              %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc61)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc62)
              %20 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc63)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !u64i), !cir.ptr<!s64i> loc(#loc64)
              cir.store %18, %21 : !s64i, !cir.ptr<!s64i> loc(#loc164)
            } loc(#loc163)
            cir.yield loc(#loc53)
          } step {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc66)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc67)
            cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc165)
            cir.yield loc(#loc160)
          } loc(#loc160)
        } loc(#loc160)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc68)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc69)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s64i>, %7 : !s32i), !cir.ptr<!s64i> loc(#loc70)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc68)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc71)
        %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc72)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc73)
        cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc72)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc41)
  } loc(#loc154)
  cir.global "private"  internal dsolocal @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!s64i> {alignment = 8 : i64} loc(#loc166)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc80)
    cir.store %1, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc169)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc82)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc83)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc83)
    %5 = cir.const #cir.int<8> : !u64i loc(#loc170)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc171)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc82)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc172)
    cir.store %8, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc173)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc90)
      %13 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc91)
      %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s64i> loc(#loc91)
      %15 = cir.cmp(eq, %12, %14) : !cir.ptr<!s64i>, !s32i loc(#loc175)
      %16 = cir.cast(int_to_bool, %15 : !s32i), !cir.bool loc(#loc92)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc94)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc96)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc94)
      } loc(#loc176)
    } loc(#loc174)
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc97)
    %10 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc166)
    cir.store %9, %10 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc177)
    %11 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call %11() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc99)
    cir.return loc(#loc77)
  } loc(#loc167)
  cir.func no_proto internal private  @goodG2BSink() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc180)
    %1 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45_goodG2BData : !cir.ptr<!cir.ptr<!s64i>> loc(#loc166)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc104)
    cir.store %2, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc180)
    cir.scope {
      %3 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc182)
      %4 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc182)
      cir.store %4, %3 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc182)
      cir.scope {
        %5 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc184)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc115)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc115)
          cir.store %14, %5 : !u64i, !cir.ptr<!u64i> loc(#loc186)
          cir.for : cond {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc117)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc118)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc118)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !s32i loc(#loc187)
            %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc119)
            cir.condition(%19) loc(#loc119)
          } body {
            cir.scope {
              %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc121)
              %16 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc122)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc122)
              %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc122)
              %19 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc123)
              %20 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc124)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !u64i), !cir.ptr<!s64i> loc(#loc125)
              cir.store %18, %21 : !s64i, !cir.ptr<!s64i> loc(#loc189)
            } loc(#loc188)
            cir.yield loc(#loc114)
          } step {
            %15 = cir.load %5 : !cir.ptr<!u64i>, !u64i loc(#loc127)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc128)
            cir.store %16, %5 : !u64i, !cir.ptr<!u64i> loc(#loc190)
            cir.yield loc(#loc185)
          } loc(#loc185)
        } loc(#loc185)
        %6 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc129)
        %7 = cir.const #cir.int<0> : !s32i loc(#loc130)
        %8 = cir.ptr_stride(%6 : !cir.ptr<!s64i>, %7 : !s32i), !cir.ptr<!s64i> loc(#loc131)
        %9 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc129)
        cir.call @printLongLongLine(%9) : (!s64i) -> () loc(#loc132)
        %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc133)
        %11 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc134)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!s64i>), !cir.ptr<!void> loc(#loc134)
        cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc133)
      } loc(#loc183)
    } loc(#loc181)
    cir.return loc(#loc102)
  } loc(#loc179)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s08/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":19:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":19:18)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":42:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":51:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":44:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":44:15)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":45:12)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":45:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:23)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:30)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:33)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:47)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:48)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":47:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:33)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:17)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:14)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:23)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:24)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:30)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":48:29)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":49:75)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":49:5)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":50:5)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":50:13)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":87:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":90:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":89:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":89:13)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc38 = loc("/usr/include/stdlib.h":687:1)
#loc39 = loc("/usr/include/stdlib.h":687:32)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":24:1)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":40:1)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":26:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":26:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":27:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":39:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":28:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":28:33)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":29:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":38:9)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":30:13)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":30:20)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":35:13)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:22)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:18)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:25)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:29)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:27)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":33:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:34)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:27)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:17)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:22)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:23)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":34:35)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:35)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":32:34)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":36:31)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":36:36)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":36:37)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":36:13)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":37:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":37:18)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":20:1)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":20:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":76:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":85:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":78:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":78:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":79:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":79:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:30)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:34)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:48)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:49)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":81:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:33)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:17)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:14)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:23)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:24)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:30)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":82:29)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":83:79)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":83:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":84:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":84:17)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":58:1)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":74:1)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":60:5)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":60:22)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":61:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":73:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":62:9)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":62:33)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":63:9)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":72:9)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":64:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":64:20)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":69:13)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:22)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:18)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:25)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:29)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:27)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":67:13)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:34)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:17)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:22)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:23)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":68:35)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:35)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":66:34)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":70:31)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":70:36)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":70:37)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":70:13)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":71:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_int64_t_loop_45.c":71:18)
#loc135 = loc(fused[#loc1, #loc2])
#loc136 = loc(fused[#loc3, #loc4])
#loc137 = loc(fused[#loc5, #loc6])
#loc138 = loc(fused[#loc7, #loc8])
#loc139 = loc(fused[#loc9, #loc10])
#loc140 = loc(fused[#loc12, #loc11])
#loc141 = loc(fused[#loc15, #loc16])
#loc142 = loc(fused[#loc14, #loc16])
#loc143 = loc(fused[#loc13, #loc17])
#loc144 = loc(fused[#loc18, #loc17])
#loc145 = loc(fused[#loc19, #loc20])
#loc146 = loc(fused[#loc21, #loc22])
#loc147 = loc(fused[#loc24, #loc20])
#loc148 = loc(fused[#loc29, #loc28])
#loc149 = loc(fused[#loc30, #loc31])
#loc150 = loc(fused[#loc32, #loc33])
#loc151 = loc(fused[#loc34, #loc35])
#loc152 = loc(fused[#loc36, #loc37])
#loc153 = loc(fused[#loc38, #loc39])
#loc154 = loc(fused[#loc40, #loc41])
#loc155 = loc(fused[#loc42, #loc43])
#loc156 = loc(fused[#loc44, #loc45])
#loc157 = loc(fused[#loc46, #loc47])
#loc158 = loc(fused[#loc48, #loc49])
#loc159 = loc(fused[#loc50, #loc51])
#loc160 = loc(fused[#loc52, #loc53])
#loc161 = loc(fused[#loc55, #loc54])
#loc162 = loc(fused[#loc56, #loc57])
#loc163 = loc(fused[#loc59, #loc53])
#loc164 = loc(fused[#loc62, #loc65])
#loc165 = loc(fused[#loc67, #loc66])
#loc166 = loc(fused[#loc74, #loc75])
#loc167 = loc(fused[#loc76, #loc77])
#loc168 = loc(fused[#loc78, #loc79])
#loc169 = loc(fused[#loc81, #loc80])
#loc170 = loc(fused[#loc84, #loc85])
#loc171 = loc(fused[#loc83, #loc85])
#loc172 = loc(fused[#loc82, #loc86])
#loc173 = loc(fused[#loc87, #loc86])
#loc174 = loc(fused[#loc88, #loc89])
#loc175 = loc(fused[#loc90, #loc91])
#loc176 = loc(fused[#loc93, #loc89])
#loc177 = loc(fused[#loc98, #loc97])
#loc178 = loc(fused[#loc99, #loc100])
#loc179 = loc(fused[#loc101, #loc102])
#loc180 = loc(fused[#loc103, #loc104])
#loc181 = loc(fused[#loc105, #loc106])
#loc182 = loc(fused[#loc107, #loc108])
#loc183 = loc(fused[#loc109, #loc110])
#loc184 = loc(fused[#loc111, #loc112])
#loc185 = loc(fused[#loc113, #loc114])
#loc186 = loc(fused[#loc116, #loc115])
#loc187 = loc(fused[#loc117, #loc118])
#loc188 = loc(fused[#loc120, #loc114])
#loc189 = loc(fused[#loc123, #loc126])
#loc190 = loc(fused[#loc128, #loc127])
