!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":104:10)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":104:14)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":104:20)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":104:32)
#loc197 = loc(fused[#loc67, #loc68])
#loc198 = loc(fused[#loc69, #loc70])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc170)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc171)
  cir.func private @wmemset(!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc172)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc173)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink(...) loc(#loc174)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc176)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc17)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc178)
    cir.br ^bb1 loc(#loc179)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc22)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc180)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc181)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc182)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc176)
    cir.br ^bb2 loc(#loc183)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc184)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc185)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc32)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
    cir.br ^bb4 loc(#loc26)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc26)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc34)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc35)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc35)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc35)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc37)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc38)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc39)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc40)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc40)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc42)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc43)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc43)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc187)
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc45)
    %33 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc173)
    cir.store %32, %33 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc188)
    %34 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_badSink : !cir.ptr<!cir.func<!void (...)>> loc(#loc189)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!cir.func<!void (...)>>), !cir.ptr<!cir.func<!void ()>> loc(#loc189)
    cir.call %35() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc12)
  } loc(#loc175)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc53)
    cir.return loc(#loc50)
  } loc(#loc190)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc193)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc61)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc62)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc64)
  cir.func @main(%arg0: !s32i loc(fused[#loc67, #loc68]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc69, #loc70])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc197)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc198)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc71)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc71)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc72)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc73)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc73)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc74)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc61)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good : !cir.ptr<!cir.func<!void ()>> loc(#loc199)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_good() : () -> () loc(#loc76)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc62)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc62)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc78)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc63)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc63)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc200)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_bad() : () -> () loc(#loc80)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc64)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc64)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc83)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc201)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.return %17 : !s32i loc(#loc201)
  } loc(#loc196)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc202)
  cir.global external dsolocal @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc203)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink(...) loc(#loc204)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc97)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc208)
    cir.br ^bb1 loc(#loc209)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc101)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc102)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc102)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc210)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc211)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc101)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc212)
    cir.store %9, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc206)
    cir.br ^bb2 loc(#loc213)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc107)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc108)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc108)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc214)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc215)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc110)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc111)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc112)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc110)
    cir.br ^bb4 loc(#loc106)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc113)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc114)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc115)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc115)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc115)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc216)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc119)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc119)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc121)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc121)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc123)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc217)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc124)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc124)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc218)
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // pred: ^bb5
    %33 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc126)
    %34 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc202)
    cir.store %33, %34 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc219)
    %35 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodG2BSink : !cir.ptr<!cir.func<!void (...)>> loc(#loc220)
    %36 = cir.cast(bitcast, %35 : !cir.ptr<!cir.func<!void (...)>>), !cir.ptr<!cir.func<!void ()>> loc(#loc220)
    cir.call %36() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc128)
    cir.return loc(#loc92)
  } loc(#loc205)
  cir.func no_proto private @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink(...) loc(#loc221)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc223)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc224)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc138)
    cir.store %2, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc225)
    cir.br ^bb1 loc(#loc226)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc142)
    %4 = cir.const #cir.int<50> : !s32i loc(#loc143)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc143)
    %6 = cir.const #cir.int<4> : !u64i loc(#loc227)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc228)
    %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc142)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc229)
    cir.store %9, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc223)
    cir.br ^bb2 loc(#loc230)
  ^bb2:  // pred: ^bb1
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc148)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc149)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc149)
    %13 = cir.cmp(eq, %10, %12) : !cir.ptr<!s32i>, !cir.bool loc(#loc231)
    cir.brcond %13 ^bb3, ^bb4 loc(#loc232)
  ^bb3:  // pred: ^bb2
    %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc151)
    %15 = cir.const #cir.int<1> : !s32i loc(#loc152)
    %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc153)
    cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc151)
    cir.br ^bb4 loc(#loc147)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc147)
  ^bb5:  // pred: ^bb4
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc154)
    %18 = cir.const #cir.int<65> : !s32i loc(#loc155)
    %19 = cir.const #cir.int<50> : !s32i loc(#loc156)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %21 = cir.binop(sub, %19, %20) nsw : !s32i loc(#loc156)
    %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc156)
    %23 = cir.call @wmemset(%17, %18, %22) : (!cir.ptr<!s32i>, !s32i, !u64i) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc158)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc159)
    %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc160)
    %26 = cir.const #cir.int<50> : !s32i loc(#loc161)
    %27 = cir.const #cir.int<1> : !s32i loc(#loc162)
    %28 = cir.binop(sub, %26, %27) nsw : !s32i loc(#loc161)
    %29 = cir.ptr_stride(%25 : !cir.ptr<!s32i>, %28 : !s32i), !cir.ptr<!s32i> loc(#loc163)
    cir.store %24, %29 : !s32i, !cir.ptr<!s32i> loc(#loc233)
    %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc164)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc164)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc234)
    cir.br ^bb6 loc(#loc141)
  ^bb6:  // pred: ^bb5
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc166)
    %33 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc203)
    cir.store %32, %33 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    %34 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE135_68b_goodB2GSink : !cir.ptr<!cir.func<!void (...)>> loc(#loc236)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!cir.func<!void (...)>>), !cir.ptr<!cir.func<!void ()>> loc(#loc236)
    cir.call %35() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc168)
    cir.return loc(#loc133)
  } loc(#loc222)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/wchar.h":296:1)
#loc6 = loc("/usr/include/wchar.h":296:65)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":22:1)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":22:8)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":29:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":29:60)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":31:1)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":45:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:9)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:71)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":33:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":33:12)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":34:12)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":35:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":42:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:46)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:53)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:56)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":36:70)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:46)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:30)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:36)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:37)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:43)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":37:42)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:17)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:32)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:38)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:41)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":38:9)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:31)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:9)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:23)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:26)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":39:27)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":41:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":41:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":43:60)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":43:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":44:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":44:59)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":89:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":93:1)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":91:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":91:13)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":92:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":92:13)
#loc55 = loc("/usr/include/stdlib.h":575:1)
#loc56 = loc("/usr/include/stdlib.h":575:41)
#loc57 = loc("/usr/include/time.h":76:1)
#loc58 = loc("/usr/include/time.h":76:38)
#loc59 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":109:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":111:15)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":114:15)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":116:15)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":104:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":119:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":105:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":107:27)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":107:22)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":107:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":109:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":110:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":110:55)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":111:5)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":114:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":115:5)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":115:54)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":116:5)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":118:12)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":118:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":23:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":23:8)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":24:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":24:8)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":52:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":52:64)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":56:1)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":70:1)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:9)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:63)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":58:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":58:12)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":59:12)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":59:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":60:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":67:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:41)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:48)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:51)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":61:62)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:47)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:13)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:31)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:37)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:38)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:44)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":62:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:16)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:32)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:37)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:40)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:9)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":63:41)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:32)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:24)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:27)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":64:28)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":66:24)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":66:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":68:64)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":68:5)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":69:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":69:63)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":53:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":53:64)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":73:1)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":87:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:71)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":75:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":75:12)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":76:12)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":76:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":77:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":84:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:46)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:53)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:56)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":78:70)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:9)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:46)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:13)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:30)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:36)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:37)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:43)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":79:42)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:17)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:32)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:38)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:41)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":80:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:23)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:26)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":81:27)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":83:24)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":83:9)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":85:64)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":85:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":86:5)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE135_68a.c":86:63)
#loc170 = loc(fused[#loc1, #loc2])
#loc171 = loc(fused[#loc3, #loc4])
#loc172 = loc(fused[#loc5, #loc6])
#loc173 = loc(fused[#loc7, #loc8])
#loc174 = loc(fused[#loc9, #loc10])
#loc175 = loc(fused[#loc11, #loc12])
#loc176 = loc(fused[#loc13, #loc14])
#loc177 = loc(fused[#loc15, #loc16])
#loc178 = loc(fused[#loc18, #loc17])
#loc179 = loc(fused[#loc19, #loc20])
#loc180 = loc(fused[#loc23, #loc24])
#loc181 = loc(fused[#loc22, #loc24])
#loc182 = loc(fused[#loc21, #loc14])
#loc183 = loc(fused[#loc25, #loc26])
#loc184 = loc(fused[#loc27, #loc28])
#loc185 = loc(fused[#loc29, #loc26])
#loc186 = loc(fused[#loc39, #loc38])
#loc187 = loc(fused[#loc44, #loc43])
#loc188 = loc(fused[#loc46, #loc45])
#loc189 = loc(fused[#loc47, #loc48])
#loc190 = loc(fused[#loc49, #loc50])
#loc191 = loc(fused[#loc51, #loc52])
#loc192 = loc(fused[#loc53, #loc54])
#loc193 = loc(fused[#loc55, #loc56])
#loc194 = loc(fused[#loc57, #loc58])
#loc195 = loc(fused[#loc59, #loc60])
#loc196 = loc(fused[#loc65, #loc66])
#loc199 = loc(fused[#loc76, #loc77])
#loc200 = loc(fused[#loc80, #loc81])
#loc201 = loc(fused[#loc84, #loc83])
#loc202 = loc(fused[#loc85, #loc86])
#loc203 = loc(fused[#loc87, #loc88])
#loc204 = loc(fused[#loc89, #loc90])
#loc205 = loc(fused[#loc91, #loc92])
#loc206 = loc(fused[#loc93, #loc94])
#loc207 = loc(fused[#loc95, #loc96])
#loc208 = loc(fused[#loc98, #loc97])
#loc209 = loc(fused[#loc99, #loc100])
#loc210 = loc(fused[#loc103, #loc104])
#loc211 = loc(fused[#loc102, #loc104])
#loc212 = loc(fused[#loc101, #loc94])
#loc213 = loc(fused[#loc105, #loc106])
#loc214 = loc(fused[#loc107, #loc108])
#loc215 = loc(fused[#loc109, #loc106])
#loc216 = loc(fused[#loc117, #loc118])
#loc217 = loc(fused[#loc120, #loc119])
#loc218 = loc(fused[#loc125, #loc124])
#loc219 = loc(fused[#loc127, #loc126])
#loc220 = loc(fused[#loc128, #loc129])
#loc221 = loc(fused[#loc130, #loc131])
#loc222 = loc(fused[#loc132, #loc133])
#loc223 = loc(fused[#loc134, #loc135])
#loc224 = loc(fused[#loc136, #loc137])
#loc225 = loc(fused[#loc139, #loc138])
#loc226 = loc(fused[#loc140, #loc141])
#loc227 = loc(fused[#loc144, #loc145])
#loc228 = loc(fused[#loc143, #loc145])
#loc229 = loc(fused[#loc142, #loc135])
#loc230 = loc(fused[#loc146, #loc147])
#loc231 = loc(fused[#loc148, #loc149])
#loc232 = loc(fused[#loc150, #loc147])
#loc233 = loc(fused[#loc160, #loc159])
#loc234 = loc(fused[#loc165, #loc164])
#loc235 = loc(fused[#loc167, #loc166])
#loc236 = loc(fused[#loc168, #loc169])
