!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc99)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc100)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc101)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_add_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc103)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc12)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc104)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc16)
        cir.condition(%4) loc(#loc16)
      } do {
        cir.scope {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc18)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc100)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc19)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc18)
          cir.break loc(#loc20)
        } loc(#loc106)
        cir.yield loc(#loc15)
      } loc(#loc105)
    } loc(#loc105)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc23)
        cir.condition(%4) loc(#loc23)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc110)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc29)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc28)
            %7 = cir.binop(add, %4, %6) : !u32i loc(#loc111)
            cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc110)
            %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc30)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc31)
          } loc(#loc109)
          cir.break loc(#loc32)
        } loc(#loc108)
        cir.yield loc(#loc22)
      } loc(#loc107)
    } loc(#loc107)
    cir.return loc(#loc9)
  } loc(#loc102)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_add_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc113)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc114)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    cir.return loc(#loc34)
  } loc(#loc112)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc46)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc118)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc50)
        cir.condition(%4) loc(#loc50)
      } do {
        cir.scope {
          %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i>> loc(#loc52)
          %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc100)
          %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc53)
          %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc54)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc54)
          %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc52)
          cir.break loc(#loc55)
        } loc(#loc120)
        cir.yield loc(#loc49)
      } loc(#loc119)
    } loc(#loc119)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc58)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
        cir.condition(%4) loc(#loc58)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc62)
            %4 = cir.const #cir.int<2147483647> : !s32i loc(#loc63)
            %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc63)
            %6 = cir.const #cir.int<2> : !u32i loc(#loc63)
            %7 = cir.binop(mul, %5, %6) : !u32i loc(#loc63)
            %8 = cir.const #cir.int<1> : !u32i loc(#loc63)
            %9 = cir.binop(add, %7, %8) : !u32i loc(#loc63)
            %10 = cir.cmp(lt, %3, %9) : !u32i, !cir.bool loc(#loc124)
            cir.if %10 {
              %11 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc126)
              %12 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc69)
              %13 = cir.const #cir.int<1> : !s32i loc(#loc68)
              %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc68)
              %15 = cir.binop(add, %12, %14) : !u32i loc(#loc127)
              cir.store %15, %11 : !u32i, !cir.ptr<!u32i> loc(#loc126)
              %16 = cir.load %11 : !cir.ptr<!u32i>, !u32i loc(#loc70)
              cir.call @printUnsignedLine(%16) : (!u32i) -> () loc(#loc71)
            } else {
              %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc41)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc41)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc72)
            } loc(#loc125)
          } loc(#loc123)
          cir.break loc(#loc73)
        } loc(#loc122)
        cir.yield loc(#loc57)
      } loc(#loc121)
    } loc(#loc121)
    cir.return loc(#loc43)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc78)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc130)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc82)
        cir.condition(%4) loc(#loc82)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<2> : !s32i loc(#loc84)
          %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc84)
          cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc133)
          cir.break loc(#loc86)
        } loc(#loc132)
        cir.yield loc(#loc81)
      } loc(#loc131)
    } loc(#loc131)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc89)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
        cir.condition(%4) loc(#loc89)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc137)
            %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc95)
            %5 = cir.const #cir.int<1> : !s32i loc(#loc94)
            %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc94)
            %7 = cir.binop(add, %4, %6) : !u32i loc(#loc138)
            cir.store %7, %3 : !u32i, !cir.ptr<!u32i> loc(#loc137)
            %8 = cir.load %3 : !cir.ptr<!u32i>, !u32i loc(#loc96)
            cir.call @printUnsignedLine(%8) : (!u32i) -> () loc(#loc97)
          } loc(#loc136)
          cir.break loc(#loc98)
        } loc(#loc135)
        cir.yield loc(#loc88)
      } loc(#loc134)
    } loc(#loc134)
    cir.return loc(#loc75)
  } loc(#loc128)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":29:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":22:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":41:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":24:18)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":25:12)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":25:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":26:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":26:11)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":27:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":29:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":29:17)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":30:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":32:5)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":40:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":32:11)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":34:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":38:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":36:13)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":36:42)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":36:35)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":37:31)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":37:13)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":39:9)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":96:1)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":100:1)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":98:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":98:13)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":99:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":99:13)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":68:23)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":48:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":72:1)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":50:5)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":50:18)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":51:12)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":51:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":52:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":57:5)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":52:11)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":53:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":55:9)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":55:17)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":55:24)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":56:9)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":58:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":71:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":58:11)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":59:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":61:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":69:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":61:13)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":61:20)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":62:9)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":65:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":67:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":63:13)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":63:42)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":63:35)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":64:31)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":64:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":68:13)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":70:9)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":75:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":94:1)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":77:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":77:18)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":78:12)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":78:5)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":79:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":84:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":79:11)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":80:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":82:16)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":82:9)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":83:9)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":85:5)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":93:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":85:11)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":86:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":87:9)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":91:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":89:13)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":89:42)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":89:35)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":90:31)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":90:13)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_add_16.c":92:9)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc6, #loc7])
#loc102 = loc(fused[#loc8, #loc9])
#loc103 = loc(fused[#loc10, #loc11])
#loc104 = loc(fused[#loc13, #loc12])
#loc105 = loc(fused[#loc14, #loc15])
#loc106 = loc(fused[#loc17, #loc15])
#loc107 = loc(fused[#loc21, #loc22])
#loc108 = loc(fused[#loc24, #loc22])
#loc109 = loc(fused[#loc25, #loc26])
#loc110 = loc(fused[#loc27, #loc28])
#loc111 = loc(fused[#loc29, #loc28])
#loc112 = loc(fused[#loc33, #loc34])
#loc113 = loc(fused[#loc35, #loc36])
#loc114 = loc(fused[#loc37, #loc38])
#loc115 = loc(fused[#loc39, #loc40])
#loc116 = loc(fused[#loc42, #loc43])
#loc117 = loc(fused[#loc44, #loc45])
#loc118 = loc(fused[#loc47, #loc46])
#loc119 = loc(fused[#loc48, #loc49])
#loc120 = loc(fused[#loc51, #loc49])
#loc121 = loc(fused[#loc56, #loc57])
#loc122 = loc(fused[#loc59, #loc57])
#loc123 = loc(fused[#loc60, #loc61])
#loc124 = loc(fused[#loc62, #loc63])
#loc125 = loc(fused[#loc64, #loc65, #loc66, #loc61])
#loc126 = loc(fused[#loc67, #loc68])
#loc127 = loc(fused[#loc69, #loc68])
#loc128 = loc(fused[#loc74, #loc75])
#loc129 = loc(fused[#loc76, #loc77])
#loc130 = loc(fused[#loc79, #loc78])
#loc131 = loc(fused[#loc80, #loc81])
#loc132 = loc(fused[#loc83, #loc81])
#loc133 = loc(fused[#loc85, #loc84])
#loc134 = loc(fused[#loc87, #loc88])
#loc135 = loc(fused[#loc90, #loc88])
#loc136 = loc(fused[#loc91, #loc92])
#loc137 = loc(fused[#loc93, #loc94])
#loc138 = loc(fused[#loc95, #loc94])
