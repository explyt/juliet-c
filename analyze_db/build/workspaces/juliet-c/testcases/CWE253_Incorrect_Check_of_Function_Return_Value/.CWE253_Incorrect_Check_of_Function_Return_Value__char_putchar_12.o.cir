!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc61)
  cir.func private @putchar(!s32i) -> !s32i loc(#loc62)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc65)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc66)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc66)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc12)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc67)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc68)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<65> : !s32i loc(#loc19)
    %5 = cir.call @putchar(%4) : (!s32i) -> !s32i loc(#loc20)
    %6 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc69)
    cir.brcond %7 ^bb4, ^bb5 loc(#loc70)
  ^bb4:  // pred: ^bb3
    %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc7)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc23)
    cir.br ^bb5 loc(#loc18)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc18)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc15)
  ^bb7:  // pred: ^bb1
    cir.br ^bb8 loc(#loc71)
  ^bb8:  // pred: ^bb7
    %10 = cir.const #cir.int<65> : !s32i loc(#loc26)
    %11 = cir.call @putchar(%10) : (!s32i) -> !s32i loc(#loc27)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc28)
    %14 = cir.cmp(eq, %11, %13) : !s32i, !cir.bool loc(#loc72)
    cir.brcond %14 ^bb9, ^bb10 loc(#loc73)
  ^bb9:  // pred: ^bb8
    %15 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc30)
    %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc31)
    cir.br ^bb10 loc(#loc25)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc25)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc11)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc11)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc64)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc33)
  } loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc77)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc78)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc78)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc40)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc79)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc80)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<65> : !s32i loc(#loc47)
    %5 = cir.call @putchar(%4) : (!s32i) -> !s32i loc(#loc48)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc49)
    %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc49)
    %8 = cir.cmp(eq, %5, %7) : !s32i, !cir.bool loc(#loc81)
    cir.brcond %8 ^bb4, ^bb5 loc(#loc82)
  ^bb4:  // pred: ^bb3
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    cir.br ^bb5 loc(#loc46)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc46)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc43)
  ^bb7:  // pred: ^bb1
    cir.br ^bb8 loc(#loc83)
  ^bb8:  // pred: ^bb7
    %11 = cir.const #cir.int<65> : !s32i loc(#loc55)
    %12 = cir.call @putchar(%11) : (!s32i) -> !s32i loc(#loc56)
    %13 = cir.const #cir.int<1> : !s32i loc(#loc57)
    %14 = cir.unary(minus, %13) nsw : !s32i, !s32i loc(#loc57)
    %15 = cir.cmp(eq, %12, %14) : !s32i, !cir.bool loc(#loc84)
    cir.brcond %15 ^bb9, ^bb10 loc(#loc85)
  ^bb9:  // pred: ^bb8
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    cir.br ^bb10 loc(#loc54)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc54)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc39)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc37)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":618:1)
#loc4 = loc("/usr/include/stdio.h":618:28)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":32:23)
#loc8 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":24:1)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":43:1)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":26:5)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":42:5)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":26:8)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":26:33)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":27:5)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":34:5)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":36:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":30:9)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":33:9)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":30:26)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":30:13)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":30:34)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":31:9)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":32:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":38:9)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":41:9)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":38:26)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":38:13)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":38:34)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":39:9)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":40:23)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":40:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":70:1)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":73:1)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":72:5)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":72:11)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":50:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":68:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":52:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":67:5)
#loc40 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":52:8)
#loc41 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":52:33)
#loc42 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":53:5)
#loc43 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":59:5)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":61:5)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":55:9)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":58:9)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":55:26)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":55:13)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":55:34)
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":56:9)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":57:23)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":57:13)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":63:9)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":66:9)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":63:26)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":63:13)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":63:34)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":64:9)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":65:23)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_putchar_12.c":65:13)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc5, #loc6])
#loc64 = loc(fused[#loc8, #loc9])
#loc65 = loc(fused[#loc10, #loc11])
#loc66 = loc(fused[#loc12, #loc13])
#loc67 = loc(fused[#loc14, #loc15, #loc16, #loc11])
#loc68 = loc(fused[#loc17, #loc18])
#loc69 = loc(fused[#loc20, #loc21])
#loc70 = loc(fused[#loc22, #loc18])
#loc71 = loc(fused[#loc24, #loc25])
#loc72 = loc(fused[#loc27, #loc28])
#loc73 = loc(fused[#loc29, #loc25])
#loc74 = loc(fused[#loc32, #loc33])
#loc75 = loc(fused[#loc34, #loc35])
#loc76 = loc(fused[#loc36, #loc37])
#loc77 = loc(fused[#loc38, #loc39])
#loc78 = loc(fused[#loc40, #loc41])
#loc79 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc80 = loc(fused[#loc45, #loc46])
#loc81 = loc(fused[#loc48, #loc49])
#loc82 = loc(fused[#loc50, #loc46])
#loc83 = loc(fused[#loc53, #loc54])
#loc84 = loc(fused[#loc56, #loc57])
#loc85 = loc(fused[#loc58, #loc54])
