!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc27 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":30:16)
#loc81 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":173:10)
#loc82 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":173:14)
#loc83 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":173:20)
#loc84 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":173:32)
#loc116 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":79:16)
#loc118 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":84:16)
#loc244 = loc(fused[#loc81, #loc82])
#loc245 = loc(fused[#loc83, #loc84])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc211)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc212)
  cir.func private @printIntLine(!s32i) loc(#loc213)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc214)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too small to perform multiplication.\00" : !cir.array<!s8i x 51>> : !cir.array<!s8i x 51> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc216)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc217)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc18)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.br ^bb1 loc(#loc220)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc221)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc22)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc22)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc222)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc27)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc27)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc27)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc27)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc27)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc27)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc27)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc27)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc27)
    cir.br ^bb5(%23 : !u32i) loc(#loc27)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc27)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc27)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc27)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc27)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc27)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc27)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc27)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc27)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc27)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc27)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc27)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc27)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc27)
    cir.br ^bb5(%39 : !u32i) loc(#loc27)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":30:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc27)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc223)
    cir.br ^bb8 loc(#loc25)
  ^bb7:  // pred: ^bb1
    %42 = cir.const #cir.int<2> : !s32i loc(#loc29)
    %43 = cir.unary(minus, %42) : !s32i, !s32i loc(#loc30)
    cir.store %43, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    cir.br ^bb8 loc(#loc21)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc21)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc225)
  ^bb10:  // pred: ^bb9
    %44 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc226)
    %45 = cir.cast(bitcast, %44 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc226)
    %46 = cir.call %45() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc34)
    %47 = cir.cast(int_to_bool, %46 : !s32i), !cir.bool loc(#loc34)
    cir.brcond %47 ^bb11, ^bb16 loc(#loc227)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc228)
  ^bb12:  // pred: ^bb11
    %48 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %49 = cir.const #cir.int<0> : !s32i loc(#loc42)
    %50 = cir.cmp(lt, %48, %49) : !s32i, !cir.bool loc(#loc229)
    cir.brcond %50 ^bb13, ^bb14 loc(#loc230)
  ^bb13:  // pred: ^bb12
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %52 = cir.const #cir.int<2> : !s32i loc(#loc13)
    %53 = cir.binop(mul, %51, %52) nsw : !s32i loc(#loc44)
    cir.store %53, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    %54 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
    cir.call @printIntLine(%54) : (!s32i) -> () loc(#loc46)
    cir.br ^bb14 loc(#loc40)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc40)
  ^bb15:  // pred: ^bb14
    cir.br ^bb26 loc(#loc37)
  ^bb16:  // pred: ^bb10
    cir.br ^bb17 loc(#loc231)
  ^bb17:  // pred: ^bb16
    %55 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc49)
    %56 = cir.const #cir.int<0> : !s32i loc(#loc50)
    %57 = cir.cmp(lt, %55, %56) : !s32i, !cir.bool loc(#loc232)
    cir.brcond %57 ^bb18, ^bb24 loc(#loc233)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc234)
  ^bb19:  // pred: ^bb18
    %58 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %59 = cir.const #cir.int<2147483647> : !s32i loc(#loc55)
    %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc55)
    %61 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %62 = cir.binop(sub, %60, %61) nsw : !s32i loc(#loc55)
    %63 = cir.const #cir.int<2> : !s32i loc(#loc56)
    %64 = cir.binop(div, %62, %63) : !s32i loc(#loc235)
    %65 = cir.cmp(gt, %58, %64) : !s32i, !cir.bool loc(#loc236)
    cir.brcond %65 ^bb20, ^bb21 loc(#loc237)
  ^bb20:  // pred: ^bb19
    %66 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %67 = cir.const #cir.int<2> : !s32i loc(#loc15)
    %68 = cir.binop(mul, %66, %67) nsw : !s32i loc(#loc61)
    cir.store %68, %1 : !s32i, !cir.ptr<!s32i> loc(#loc217)
    %69 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    cir.call @printIntLine(%69) : (!s32i) -> () loc(#loc63)
    cir.br ^bb22 loc(#loc59)
  ^bb21:  // pred: ^bb19
    %70 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc9)
    %71 = cir.cast(array_to_ptrdecay, %70 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%71) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb22 loc(#loc53)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc53)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc48)
  ^bb24:  // 2 preds: ^bb17, ^bb23
    cir.br ^bb25 loc(#loc48)
  ^bb25:  // pred: ^bb24
    cir.br ^bb26 loc(#loc33)
  ^bb26:  // 2 preds: ^bb15, ^bb25
    cir.br ^bb27 loc(#loc33)
  ^bb27:  // pred: ^bb26
    cir.return loc(#loc11)
  } loc(#loc215)
  cir.func no_proto @CWE191_Integer_Underflow__int_rand_multiply_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc239)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc240)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc69)
    cir.return loc(#loc66)
  } loc(#loc238)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc241)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc242)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc77)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc78)
  cir.func @main(%arg0: !s32i loc(fused[#loc81, #loc82]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc83, #loc84])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc244)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc245)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc80)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc85)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc86)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc87)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc87)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc88)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %8 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc246)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_12_good() : () -> () loc(#loc90)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc76)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc77)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc77)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %13 = cir.get_global @CWE191_Integer_Underflow__int_rand_multiply_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc247)
    cir.call @CWE191_Integer_Underflow__int_rand_multiply_12_bad() : () -> () loc(#loc94)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc78)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc97)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc248)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc248)
    cir.return %17 : !s32i loc(#loc248)
  } loc(#loc243)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc250)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc251)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc252)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc107)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc253)
    cir.br ^bb1 loc(#loc254)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc255)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc255)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc111)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %7 ^bb2, ^bb7 loc(#loc256)
  ^bb2:  // pred: ^bb1
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %10 = cir.binop(and, %8, %9) : !s32i loc(#loc116)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc116)
    cir.brcond %11 ^bb3, ^bb4 loc(#loc116)
  ^bb3:  // pred: ^bb2
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc116)
    %14 = cir.const #cir.int<30> : !s32i loc(#loc116)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc116)
    %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc116)
    %18 = cir.const #cir.int<15> : !s32i loc(#loc116)
    %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc116)
    %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc116)
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc116)
    %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc116)
    cir.br ^bb5(%23 : !u32i) loc(#loc116)
  ^bb4:  // pred: ^bb2
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc116)
    %26 = cir.const #cir.int<30> : !s32i loc(#loc116)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc116)
    %28 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %29 = cir.cast(integral, %28 : !s32i), !u32i loc(#loc116)
    %30 = cir.const #cir.int<15> : !s32i loc(#loc116)
    %31 = cir.shift(left, %29 : !u32i, %30 : !s32i) -> !u32i loc(#loc116)
    %32 = cir.binop(xor, %27, %31) : !u32i loc(#loc116)
    %33 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc116)
    %35 = cir.binop(xor, %32, %34) : !u32i loc(#loc116)
    %36 = cir.unary(minus, %35) : !u32i, !u32i loc(#loc116)
    %37 = cir.const #cir.int<1> : !s32i loc(#loc116)
    %38 = cir.cast(integral, %37 : !s32i), !u32i loc(#loc116)
    %39 = cir.binop(sub, %36, %38) : !u32i loc(#loc116)
    cir.br ^bb5(%39 : !u32i) loc(#loc116)
  ^bb5(%40: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":79:16)):  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    %41 = cir.cast(integral, %40 : !u32i), !s32i loc(#loc116)
    cir.store %41, %2 : !s32i, !cir.ptr<!s32i> loc(#loc257)
    cir.br ^bb12 loc(#loc114)
  ^bb7:  // pred: ^bb1
    %42 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %44 = cir.binop(and, %42, %43) : !s32i loc(#loc118)
    %45 = cir.cast(int_to_bool, %44 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %45 ^bb8, ^bb9 loc(#loc118)
  ^bb8:  // pred: ^bb7
    %46 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %47 = cir.cast(integral, %46 : !s32i), !u32i loc(#loc118)
    %48 = cir.const #cir.int<30> : !s32i loc(#loc118)
    %49 = cir.shift(left, %47 : !u32i, %48 : !s32i) -> !u32i loc(#loc118)
    %50 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %51 = cir.cast(integral, %50 : !s32i), !u32i loc(#loc118)
    %52 = cir.const #cir.int<15> : !s32i loc(#loc118)
    %53 = cir.shift(left, %51 : !u32i, %52 : !s32i) -> !u32i loc(#loc118)
    %54 = cir.binop(xor, %49, %53) : !u32i loc(#loc118)
    %55 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %56 = cir.cast(integral, %55 : !s32i), !u32i loc(#loc118)
    %57 = cir.binop(xor, %54, %56) : !u32i loc(#loc118)
    cir.br ^bb10(%57 : !u32i) loc(#loc118)
  ^bb9:  // pred: ^bb7
    %58 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %59 = cir.cast(integral, %58 : !s32i), !u32i loc(#loc118)
    %60 = cir.const #cir.int<30> : !s32i loc(#loc118)
    %61 = cir.shift(left, %59 : !u32i, %60 : !s32i) -> !u32i loc(#loc118)
    %62 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %63 = cir.cast(integral, %62 : !s32i), !u32i loc(#loc118)
    %64 = cir.const #cir.int<15> : !s32i loc(#loc118)
    %65 = cir.shift(left, %63 : !u32i, %64 : !s32i) -> !u32i loc(#loc118)
    %66 = cir.binop(xor, %61, %65) : !u32i loc(#loc118)
    %67 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc118)
    %68 = cir.cast(integral, %67 : !s32i), !u32i loc(#loc118)
    %69 = cir.binop(xor, %66, %68) : !u32i loc(#loc118)
    %70 = cir.unary(minus, %69) : !u32i, !u32i loc(#loc118)
    %71 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %72 = cir.cast(integral, %71 : !s32i), !u32i loc(#loc118)
    %73 = cir.binop(sub, %70, %72) : !u32i loc(#loc118)
    cir.br ^bb10(%73 : !u32i) loc(#loc118)
  ^bb10(%74: !u32i loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":84:16)):  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc118)
  ^bb11:  // pred: ^bb10
    %75 = cir.cast(integral, %74 : !u32i), !s32i loc(#loc118)
    cir.store %75, %2 : !s32i, !cir.ptr<!s32i> loc(#loc258)
    cir.br ^bb12 loc(#loc110)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc110)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc259)
  ^bb14:  // pred: ^bb13
    %76 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc260)
    %77 = cir.cast(bitcast, %76 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc260)
    %78 = cir.call %77() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc122)
    %79 = cir.cast(int_to_bool, %78 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %79 ^bb15, ^bb25 loc(#loc261)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc262)
  ^bb16:  // pred: ^bb15
    %80 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc129)
    %81 = cir.const #cir.int<0> : !s32i loc(#loc130)
    %82 = cir.cmp(lt, %80, %81) : !s32i, !cir.bool loc(#loc263)
    cir.brcond %82 ^bb17, ^bb23 loc(#loc264)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc265)
  ^bb18:  // pred: ^bb17
    %83 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %84 = cir.const #cir.int<2147483647> : !s32i loc(#loc135)
    %85 = cir.unary(minus, %84) : !s32i, !s32i loc(#loc135)
    %86 = cir.const #cir.int<1> : !s32i loc(#loc135)
    %87 = cir.binop(sub, %85, %86) nsw : !s32i loc(#loc135)
    %88 = cir.const #cir.int<2> : !s32i loc(#loc136)
    %89 = cir.binop(div, %87, %88) : !s32i loc(#loc266)
    %90 = cir.cmp(gt, %83, %89) : !s32i, !cir.bool loc(#loc267)
    cir.brcond %90 ^bb19, ^bb20 loc(#loc268)
  ^bb19:  // pred: ^bb18
    %91 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc141)
    %92 = cir.const #cir.int<2> : !s32i loc(#loc102)
    %93 = cir.binop(mul, %91, %92) nsw : !s32i loc(#loc141)
    cir.store %93, %0 : !s32i, !cir.ptr<!s32i> loc(#loc250)
    %94 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    cir.call @printIntLine(%94) : (!s32i) -> () loc(#loc143)
    cir.br ^bb21 loc(#loc139)
  ^bb20:  // pred: ^bb18
    %95 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc144)
    %96 = cir.cast(array_to_ptrdecay, %95 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc144)
    cir.call @printLine(%96) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    cir.br ^bb21 loc(#loc133)
  ^bb21:  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc133)
  ^bb22:  // pred: ^bb21
    cir.br ^bb23 loc(#loc128)
  ^bb23:  // 2 preds: ^bb16, ^bb22
    cir.br ^bb24 loc(#loc128)
  ^bb24:  // pred: ^bb23
    cir.br ^bb35 loc(#loc125)
  ^bb25:  // pred: ^bb14
    cir.br ^bb26 loc(#loc269)
  ^bb26:  // pred: ^bb25
    %97 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc148)
    %98 = cir.const #cir.int<0> : !s32i loc(#loc149)
    %99 = cir.cmp(lt, %97, %98) : !s32i, !cir.bool loc(#loc270)
    cir.brcond %99 ^bb27, ^bb33 loc(#loc271)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc272)
  ^bb28:  // pred: ^bb27
    %100 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %101 = cir.const #cir.int<2147483647> : !s32i loc(#loc154)
    %102 = cir.unary(minus, %101) : !s32i, !s32i loc(#loc154)
    %103 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %104 = cir.binop(sub, %102, %103) nsw : !s32i loc(#loc154)
    %105 = cir.const #cir.int<2> : !s32i loc(#loc155)
    %106 = cir.binop(div, %104, %105) : !s32i loc(#loc273)
    %107 = cir.cmp(gt, %100, %106) : !s32i, !cir.bool loc(#loc274)
    cir.brcond %107 ^bb29, ^bb30 loc(#loc275)
  ^bb29:  // pred: ^bb28
    %108 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    %109 = cir.const #cir.int<2> : !s32i loc(#loc104)
    %110 = cir.binop(mul, %108, %109) nsw : !s32i loc(#loc160)
    cir.store %110, %1 : !s32i, !cir.ptr<!s32i> loc(#loc251)
    %111 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc161)
    cir.call @printIntLine(%111) : (!s32i) -> () loc(#loc162)
    cir.br ^bb31 loc(#loc158)
  ^bb30:  // pred: ^bb28
    %112 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 51>> loc(#loc163)
    %113 = cir.cast(array_to_ptrdecay, %112 : !cir.ptr<!cir.array<!s8i x 51>>), !cir.ptr<!s8i> loc(#loc163)
    cir.call @printLine(%113) : (!cir.ptr<!s8i>) -> () loc(#loc164)
    cir.br ^bb31 loc(#loc152)
  ^bb31:  // 2 preds: ^bb29, ^bb30
    cir.br ^bb32 loc(#loc152)
  ^bb32:  // pred: ^bb31
    cir.br ^bb33 loc(#loc147)
  ^bb33:  // 2 preds: ^bb26, ^bb32
    cir.br ^bb34 loc(#loc147)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc121)
  ^bb35:  // 2 preds: ^bb24, ^bb34
    cir.br ^bb36 loc(#loc121)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc100)
  } loc(#loc249)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc277)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc173)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.br ^bb1 loc(#loc281)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc282)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc177)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc177)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc283)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc182)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc183)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc284)
    cir.br ^bb4 loc(#loc180)
  ^bb3:  // pred: ^bb1
    %10 = cir.const #cir.int<2> : !s32i loc(#loc185)
    %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc186)
    cir.store %11, %2 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.br ^bb4 loc(#loc176)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc176)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc286)
  ^bb6:  // pred: ^bb5
    %12 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc287)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc287)
    %14 = cir.call %13() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc190)
    %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc190)
    cir.brcond %15 ^bb7, ^bb12 loc(#loc288)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc289)
  ^bb8:  // pred: ^bb7
    %16 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc197)
    %17 = cir.const #cir.int<0> : !s32i loc(#loc198)
    %18 = cir.cmp(lt, %16, %17) : !s32i, !cir.bool loc(#loc290)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc291)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc200)
    %20 = cir.const #cir.int<2> : !s32i loc(#loc168)
    %21 = cir.binop(mul, %19, %20) nsw : !s32i loc(#loc200)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc277)
    %22 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc202)
    cir.br ^bb10 loc(#loc196)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc196)
  ^bb11:  // pred: ^bb10
    cir.br ^bb17 loc(#loc193)
  ^bb12:  // pred: ^bb6
    cir.br ^bb13 loc(#loc292)
  ^bb13:  // pred: ^bb12
    %23 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc205)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc206)
    %25 = cir.cmp(lt, %23, %24) : !s32i, !cir.bool loc(#loc293)
    cir.brcond %25 ^bb14, ^bb15 loc(#loc294)
  ^bb14:  // pred: ^bb13
    %26 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc208)
    %27 = cir.const #cir.int<2> : !s32i loc(#loc170)
    %28 = cir.binop(mul, %26, %27) nsw : !s32i loc(#loc208)
    cir.store %28, %1 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc209)
    cir.call @printIntLine(%29) : (!s32i) -> () loc(#loc210)
    cir.br ^bb15 loc(#loc204)
  ^bb15:  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc204)
  ^bb16:  // pred: ^bb15
    cir.br ^bb17 loc(#loc189)
  ^bb17:  // 2 preds: ^bb11, ^bb16
    cir.br ^bb18 loc(#loc189)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc166)
  } loc(#loc276)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__int_rand_multiply_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":58:27)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":22:1)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":62:1)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:13)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:33)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:17)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:37)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":24:5)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":24:9)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":26:12)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":26:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:5)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":36:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:8)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":27:33)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":28:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":31:5)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":33:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":30:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:17)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:16)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":35:9)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":61:5)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:8)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":37:33)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":38:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":45:5)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":47:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:9)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":44:9)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:12)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":39:19)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":40:9)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":42:26)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":43:26)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":43:13)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:9)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":60:9)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:12)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":48:19)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":49:9)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:13)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":59:13)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:17)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:25)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:33)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":51:34)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":52:13)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":55:13)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":57:13)
#loc61 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":53:30)
#loc62 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":54:30)
#loc63 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":54:17)
#loc64 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":58:17)
#loc65 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":158:1)
#loc66 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":162:1)
#loc67 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":160:5)
#loc68 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":160:13)
#loc69 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":161:5)
#loc70 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":161:13)
#loc71 = loc("/usr/include/stdlib.h":575:1)
#loc72 = loc("/usr/include/stdlib.h":575:41)
#loc73 = loc("/usr/include/time.h":76:1)
#loc74 = loc("/usr/include/time.h":76:38)
#loc75 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":178:15)
#loc76 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":180:15)
#loc77 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":183:15)
#loc78 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":185:15)
#loc79 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":173:1)
#loc80 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":188:1)
#loc85 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":174:1)
#loc86 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":176:27)
#loc87 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":176:22)
#loc88 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":176:5)
#loc89 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":178:5)
#loc90 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":179:5)
#loc91 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":179:57)
#loc92 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":180:5)
#loc93 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":183:5)
#loc94 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":184:5)
#loc95 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":184:56)
#loc96 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":185:5)
#loc97 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":187:12)
#loc98 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":187:5)
#loc99 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":71:1)
#loc100 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":118:1)
#loc101 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:17)
#loc102 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:37)
#loc103 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:17)
#loc104 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:37)
#loc105 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":73:5)
#loc106 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":73:9)
#loc107 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":75:12)
#loc108 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":75:5)
#loc109 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:5)
#loc110 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":85:5)
#loc111 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:8)
#loc112 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":76:33)
#loc113 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":77:5)
#loc114 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":80:5)
#loc115 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":82:5)
#loc117 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":79:9)
#loc119 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":84:9)
#loc120 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:5)
#loc121 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":117:5)
#loc122 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:8)
#loc123 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":86:33)
#loc124 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":87:5)
#loc125 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":101:5)
#loc126 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":103:5)
#loc127 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:9)
#loc128 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":100:9)
#loc129 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:12)
#loc130 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":88:19)
#loc131 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":89:9)
#loc132 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:13)
#loc133 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":99:13)
#loc134 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:17)
#loc135 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:25)
#loc136 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:33)
#loc137 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":91:34)
#loc138 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":92:13)
#loc139 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":95:13)
#loc140 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":97:13)
#loc141 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":93:30)
#loc142 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":94:30)
#loc143 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":94:17)
#loc144 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":98:27)
#loc145 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":98:17)
#loc146 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:9)
#loc147 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":116:9)
#loc148 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:12)
#loc149 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":104:19)
#loc150 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":105:9)
#loc151 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:13)
#loc152 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":115:13)
#loc153 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:17)
#loc154 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:25)
#loc155 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:33)
#loc156 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":107:34)
#loc157 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":108:13)
#loc158 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":111:13)
#loc159 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":113:13)
#loc160 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":109:30)
#loc161 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":110:30)
#loc162 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":110:17)
#loc163 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":114:27)
#loc164 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":114:17)
#loc165 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":123:1)
#loc166 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":156:1)
#loc167 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:13)
#loc168 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:33)
#loc169 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:13)
#loc170 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:33)
#loc171 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":125:5)
#loc172 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":125:9)
#loc173 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":127:12)
#loc174 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":127:5)
#loc175 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:5)
#loc176 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":137:5)
#loc177 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:8)
#loc178 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":128:33)
#loc179 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":129:5)
#loc180 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":132:5)
#loc181 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":134:5)
#loc182 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:17)
#loc183 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:16)
#loc184 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":131:9)
#loc185 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:17)
#loc186 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:16)
#loc187 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":136:9)
#loc188 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:5)
#loc189 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":155:5)
#loc190 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:8)
#loc191 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":138:33)
#loc192 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":139:5)
#loc193 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":146:5)
#loc194 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":148:5)
#loc195 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:9)
#loc196 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":145:9)
#loc197 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:12)
#loc198 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":140:19)
#loc199 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":141:9)
#loc200 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":143:26)
#loc201 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":144:26)
#loc202 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":144:13)
#loc203 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:9)
#loc204 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":154:9)
#loc205 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:12)
#loc206 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":149:19)
#loc207 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":150:9)
#loc208 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":152:26)
#loc209 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":153:26)
#loc210 = loc("CWE191_Integer_Underflow__int_rand_multiply_12.c":153:13)
#loc211 = loc(fused[#loc1, #loc2])
#loc212 = loc(fused[#loc3, #loc4])
#loc213 = loc(fused[#loc5, #loc6])
#loc214 = loc(fused[#loc7, #loc8])
#loc215 = loc(fused[#loc10, #loc11])
#loc216 = loc(fused[#loc12, #loc13])
#loc217 = loc(fused[#loc14, #loc15])
#loc218 = loc(fused[#loc16, #loc17])
#loc219 = loc(fused[#loc19, #loc18])
#loc220 = loc(fused[#loc20, #loc21])
#loc221 = loc(fused[#loc22, #loc23])
#loc222 = loc(fused[#loc24, #loc25, #loc26, #loc21])
#loc223 = loc(fused[#loc28, #loc27])
#loc224 = loc(fused[#loc31, #loc29])
#loc225 = loc(fused[#loc32, #loc33])
#loc226 = loc(fused[#loc34, #loc35])
#loc227 = loc(fused[#loc36, #loc37, #loc38, #loc33])
#loc228 = loc(fused[#loc39, #loc40])
#loc229 = loc(fused[#loc41, #loc42])
#loc230 = loc(fused[#loc43, #loc40])
#loc231 = loc(fused[#loc47, #loc48])
#loc232 = loc(fused[#loc49, #loc50])
#loc233 = loc(fused[#loc51, #loc48])
#loc234 = loc(fused[#loc52, #loc53])
#loc235 = loc(fused[#loc55, #loc56])
#loc236 = loc(fused[#loc54, #loc57])
#loc237 = loc(fused[#loc58, #loc59, #loc60, #loc53])
#loc238 = loc(fused[#loc65, #loc66])
#loc239 = loc(fused[#loc67, #loc68])
#loc240 = loc(fused[#loc69, #loc70])
#loc241 = loc(fused[#loc71, #loc72])
#loc242 = loc(fused[#loc73, #loc74])
#loc243 = loc(fused[#loc79, #loc80])
#loc246 = loc(fused[#loc90, #loc91])
#loc247 = loc(fused[#loc94, #loc95])
#loc248 = loc(fused[#loc98, #loc97])
#loc249 = loc(fused[#loc99, #loc100])
#loc250 = loc(fused[#loc101, #loc102])
#loc251 = loc(fused[#loc103, #loc104])
#loc252 = loc(fused[#loc105, #loc106])
#loc253 = loc(fused[#loc108, #loc107])
#loc254 = loc(fused[#loc109, #loc110])
#loc255 = loc(fused[#loc111, #loc112])
#loc256 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc257 = loc(fused[#loc117, #loc116])
#loc258 = loc(fused[#loc119, #loc118])
#loc259 = loc(fused[#loc120, #loc121])
#loc260 = loc(fused[#loc122, #loc123])
#loc261 = loc(fused[#loc124, #loc125, #loc126, #loc121])
#loc262 = loc(fused[#loc127, #loc128])
#loc263 = loc(fused[#loc129, #loc130])
#loc264 = loc(fused[#loc131, #loc128])
#loc265 = loc(fused[#loc132, #loc133])
#loc266 = loc(fused[#loc135, #loc136])
#loc267 = loc(fused[#loc134, #loc137])
#loc268 = loc(fused[#loc138, #loc139, #loc140, #loc133])
#loc269 = loc(fused[#loc146, #loc147])
#loc270 = loc(fused[#loc148, #loc149])
#loc271 = loc(fused[#loc150, #loc147])
#loc272 = loc(fused[#loc151, #loc152])
#loc273 = loc(fused[#loc154, #loc155])
#loc274 = loc(fused[#loc153, #loc156])
#loc275 = loc(fused[#loc157, #loc158, #loc159, #loc152])
#loc276 = loc(fused[#loc165, #loc166])
#loc277 = loc(fused[#loc167, #loc168])
#loc278 = loc(fused[#loc169, #loc170])
#loc279 = loc(fused[#loc171, #loc172])
#loc280 = loc(fused[#loc174, #loc173])
#loc281 = loc(fused[#loc175, #loc176])
#loc282 = loc(fused[#loc177, #loc178])
#loc283 = loc(fused[#loc179, #loc180, #loc181, #loc176])
#loc284 = loc(fused[#loc184, #loc182])
#loc285 = loc(fused[#loc187, #loc185])
#loc286 = loc(fused[#loc188, #loc189])
#loc287 = loc(fused[#loc190, #loc191])
#loc288 = loc(fused[#loc192, #loc193, #loc194, #loc189])
#loc289 = loc(fused[#loc195, #loc196])
#loc290 = loc(fused[#loc197, #loc198])
#loc291 = loc(fused[#loc199, #loc196])
#loc292 = loc(fused[#loc203, #loc204])
#loc293 = loc(fused[#loc205, #loc206])
#loc294 = loc(fused[#loc207, #loc204])
