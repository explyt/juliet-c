!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc124)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc127)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc10)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc15)
        cir.condition(%4) loc(#loc15)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc17)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc17)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
            cir.yield %20 : !u32i loc(#loc17)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc17)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc17)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc17)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc17)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc17)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc17)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc17)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc17)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc17)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc17)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc17)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc17)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc17)
            cir.yield %24 : !u32i loc(#loc17)
          }) : (!cir.bool) -> !u32i loc(#loc17)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc17)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
          cir.break loc(#loc19)
        } loc(#loc130)
        cir.yield loc(#loc14)
      } loc(#loc129)
    } loc(#loc129)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%4) loc(#loc22)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc135)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc27)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc27)
            cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc135)
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc30)
              cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc137)
              cir.for : cond {
                %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc32)
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
                %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc33)
                %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc138)
                cir.condition(%11) loc(#loc34)
              } body {
                cir.scope {
                  %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
                  %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
                  cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc36)
                } loc(#loc139)
                cir.yield loc(#loc29)
              } step {
                %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc37)
                %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc38)
                cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc140)
                cir.yield loc(#loc136)
              } loc(#loc136)
            } loc(#loc136)
          } loc(#loc134)
          cir.break loc(#loc39)
        } loc(#loc133)
        cir.yield loc(#loc21)
      } loc(#loc132)
    } loc(#loc132)
    cir.return loc(#loc7)
  } loc(#loc126)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc143)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc141)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
        cir.condition(%4) loc(#loc55)
      } do {
        cir.scope {
          %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc57)
          %5 = cir.binop(and, %3, %4) : !s32i loc(#loc57)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc57)
          %7 = cir.ternary(%6, true {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc57)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc57)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc57)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc57)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc57)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc57)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc57)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc57)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc57)
            cir.yield %20 : !u32i loc(#loc57)
          }, false {
            %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc57)
            %11 = cir.const #cir.int<30> : !s32i loc(#loc57)
            %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc57)
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc57)
            %15 = cir.const #cir.int<15> : !s32i loc(#loc57)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc57)
            %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc57)
            %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc57)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc57)
            %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc57)
            %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc57)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc57)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc57)
            %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc57)
            cir.yield %24 : !u32i loc(#loc57)
          }) : (!cir.bool) -> !u32i loc(#loc57)
          %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc57)
          cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
          cir.break loc(#loc59)
        } loc(#loc148)
        cir.yield loc(#loc54)
      } loc(#loc147)
    } loc(#loc147)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc62)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc62)
        cir.condition(%4) loc(#loc62)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc153)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc67)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc67)
            cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc153)
            cir.scope {
              %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %7 = cir.const #cir.int<0> : !s32i loc(#loc71)
              %8 = cir.cmp(gt, %6, %7) : !s32i, !cir.bool loc(#loc155)
              %9 = cir.ternary(%8, true {
                %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
                %11 = cir.const #cir.int<20> : !s32i loc(#loc74)
                %12 = cir.cmp(le, %10, %11) : !s32i, !cir.bool loc(#loc156)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc72)
                  cir.yield %14 : !cir.bool loc(#loc72)
                }, false {
                  %14 = cir.const #false loc(#loc72)
                  cir.yield %14 : !cir.bool loc(#loc72)
                }) : (!cir.bool) -> !cir.bool loc(#loc72)
                cir.yield %13 : !cir.bool loc(#loc72)
              }, false {
                %10 = cir.const #false loc(#loc72)
                cir.yield %10 : !cir.bool loc(#loc72)
              }) : (!cir.bool) -> !cir.bool loc(#loc72)
              cir.if %9 {
                cir.scope {
                  %10 = cir.const #cir.int<0> : !s32i loc(#loc78)
                  %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc78)
                  cir.store %11, %3 : !u64i, !cir.ptr<!u64i> loc(#loc159)
                  cir.for : cond {
                    %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc80)
                    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
                    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc81)
                    %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc160)
                    cir.condition(%15) loc(#loc82)
                  } body {
                    cir.scope {
                      %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc84)
                      %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc84)
                      cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc85)
                    } loc(#loc161)
                    cir.yield loc(#loc77)
                  } step {
                    %12 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc86)
                    %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc87)
                    cir.store %13, %3 : !u64i, !cir.ptr<!u64i> loc(#loc162)
                    cir.yield loc(#loc158)
                  } loc(#loc158)
                } loc(#loc158)
              } loc(#loc157)
            } loc(#loc154)
          } loc(#loc152)
          cir.break loc(#loc88)
        } loc(#loc151)
        cir.yield loc(#loc61)
      } loc(#loc150)
    } loc(#loc150)
    cir.return loc(#loc47)
  } loc(#loc144)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc93)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc94)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc98)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc98)
        cir.condition(%4) loc(#loc98)
      } do {
        cir.scope {
          %3 = cir.const #cir.int<20> : !s32i loc(#loc100)
          cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc168)
          cir.break loc(#loc102)
        } loc(#loc167)
        cir.yield loc(#loc97)
      } loc(#loc166)
    } loc(#loc166)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc105)
        cir.condition(%4) loc(#loc105)
      } do {
        cir.scope {
          cir.scope {
            %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc172)
            %4 = cir.const #cir.int<0> : !s32i loc(#loc110)
            %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc110)
            cir.store %5, %3 : !u64i, !cir.ptr<!u64i> loc(#loc172)
            cir.scope {
              %6 = cir.const #cir.int<0> : !s32i loc(#loc113)
              %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc113)
              cir.store %7, %3 : !u64i, !cir.ptr<!u64i> loc(#loc174)
              cir.for : cond {
                %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc115)
                %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc116)
                %11 = cir.cmp(lt, %8, %10) : !u64i, !cir.bool loc(#loc175)
                cir.condition(%11) loc(#loc117)
              } body {
                cir.scope {
                  %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc119)
                  %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc119)
                  cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc120)
                } loc(#loc176)
                cir.yield loc(#loc112)
              } step {
                %8 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc121)
                %9 = cir.unary(inc, %8) : !u64i, !u64i loc(#loc122)
                cir.store %9, %3 : !u64i, !cir.ptr<!u64i> loc(#loc177)
                cir.yield loc(#loc173)
              } loc(#loc173)
            } loc(#loc173)
          } loc(#loc171)
          cir.break loc(#loc123)
        } loc(#loc170)
        cir.yield loc(#loc104)
      } loc(#loc169)
    } loc(#loc169)
    cir.return loc(#loc90)
  } loc(#loc163)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":40:27)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":45:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:14)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:13)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":26:5)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":27:5)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":32:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":27:11)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":28:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":30:17)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":30:9)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":31:9)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":33:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":44:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":33:11)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":34:5)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":35:9)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":42:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":36:13)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":36:24)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:13)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":41:13)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:22)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:18)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:25)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:37)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:27)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":39:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":40:17)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:45)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":38:44)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":43:9)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":106:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":110:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":108:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":108:13)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":109:5)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":109:13)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":52:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":78:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":54:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":54:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:14)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:13)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":56:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":57:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":62:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":57:11)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":58:5)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":60:17)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":60:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":61:9)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":63:5)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":77:5)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":63:11)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":64:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":65:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":75:9)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":66:13)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":66:24)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:13)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":74:13)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:17)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:25)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:27)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:30)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":68:39)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":69:13)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:17)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":73:17)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:26)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:22)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:29)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:41)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:31)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":71:17)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":72:31)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":72:21)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:49)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":70:48)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":76:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":81:1)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":104:1)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":83:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":83:9)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:14)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:13)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":85:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":86:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":91:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":86:11)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":87:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":89:17)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":89:9)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":90:9)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":92:5)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":103:5)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":92:11)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":93:5)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":94:9)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":101:9)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":95:13)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":95:24)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":100:13)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:22)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:18)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:25)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:37)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:27)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":98:13)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":99:27)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":99:17)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:45)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":97:44)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_16.c":102:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc125 = loc(fused[#loc3, #loc4])
#loc126 = loc(fused[#loc6, #loc7])
#loc127 = loc(fused[#loc8, #loc9])
#loc128 = loc(fused[#loc12, #loc10])
#loc129 = loc(fused[#loc13, #loc14])
#loc130 = loc(fused[#loc16, #loc14])
#loc131 = loc(fused[#loc18, #loc17])
#loc132 = loc(fused[#loc20, #loc21])
#loc133 = loc(fused[#loc23, #loc21])
#loc134 = loc(fused[#loc24, #loc25])
#loc135 = loc(fused[#loc26, #loc27])
#loc136 = loc(fused[#loc28, #loc29])
#loc137 = loc(fused[#loc31, #loc30])
#loc138 = loc(fused[#loc32, #loc33])
#loc139 = loc(fused[#loc35, #loc29])
#loc140 = loc(fused[#loc38, #loc37])
#loc141 = loc(fused[#loc40, #loc41])
#loc142 = loc(fused[#loc42, #loc43])
#loc143 = loc(fused[#loc44, #loc45])
#loc144 = loc(fused[#loc46, #loc47])
#loc145 = loc(fused[#loc48, #loc49])
#loc146 = loc(fused[#loc52, #loc50])
#loc147 = loc(fused[#loc53, #loc54])
#loc148 = loc(fused[#loc56, #loc54])
#loc149 = loc(fused[#loc58, #loc57])
#loc150 = loc(fused[#loc60, #loc61])
#loc151 = loc(fused[#loc63, #loc61])
#loc152 = loc(fused[#loc64, #loc65])
#loc153 = loc(fused[#loc66, #loc67])
#loc154 = loc(fused[#loc68, #loc69])
#loc155 = loc(fused[#loc70, #loc71])
#loc156 = loc(fused[#loc73, #loc74])
#loc157 = loc(fused[#loc75, #loc69])
#loc158 = loc(fused[#loc76, #loc77])
#loc159 = loc(fused[#loc79, #loc78])
#loc160 = loc(fused[#loc80, #loc81])
#loc161 = loc(fused[#loc83, #loc77])
#loc162 = loc(fused[#loc87, #loc86])
#loc163 = loc(fused[#loc89, #loc90])
#loc164 = loc(fused[#loc91, #loc92])
#loc165 = loc(fused[#loc95, #loc93])
#loc166 = loc(fused[#loc96, #loc97])
#loc167 = loc(fused[#loc99, #loc97])
#loc168 = loc(fused[#loc101, #loc100])
#loc169 = loc(fused[#loc103, #loc104])
#loc170 = loc(fused[#loc106, #loc104])
#loc171 = loc(fused[#loc107, #loc108])
#loc172 = loc(fused[#loc109, #loc110])
#loc173 = loc(fused[#loc111, #loc112])
#loc174 = loc(fused[#loc114, #loc113])
#loc175 = loc(fused[#loc115, #loc116])
#loc176 = loc(fused[#loc118, #loc112])
#loc177 = loc(fused[#loc122, #loc121])
