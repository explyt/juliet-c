!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc76)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc79)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc7)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc7)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc82)
          %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc82)
          %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc14)
          cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc15)
          %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc83)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc19)
        } loc(#loc81)
      } loc(#loc80)
    } loc(#loc78)
    cir.return loc(#loc4)
  } loc(#loc77)
  cir.func no_proto @CWE398_Poor_Code_Quality__equals_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc85)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc84)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc27)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
    cir.return %2 : !s32i loc(#loc88)
  } loc(#loc87)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc32)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc92)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc37)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc37)
      cir.if %2 {
        %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc32)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc42)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc95)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc96)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc46)
          cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc95)
          %6 = cir.const #cir.int<5> : !s32i loc(#loc47)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc96)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc48)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc49)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc97)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc52)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc53)
        } loc(#loc94)
      } loc(#loc93)
    } loc(#loc91)
    cir.return loc(#loc34)
  } loc(#loc90)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc56)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc99)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
    cir.return %2 : !s32i loc(#loc99)
  } loc(#loc98)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<() -> !s32i>> loc(#loc102)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc62)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc62)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intOne", init] {alignment = 4 : i64} loc(#loc105)
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intFive", init] {alignment = 4 : i64} loc(#loc106)
          %5 = cir.const #cir.int<1> : !s32i loc(#loc68)
          cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc105)
          %6 = cir.const #cir.int<5> : !s32i loc(#loc69)
          cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc106)
          %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc71)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc72)
          cir.store %8, %3 : !s32i, !cir.ptr<!s32i> loc(#loc107)
          %9 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc74)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc75)
        } loc(#loc104)
      } loc(#loc103)
    } loc(#loc101)
    cir.return loc(#loc59)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__equals_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE398_Poor_Code_Quality__equals_08.c":33:1)
#loc4 = loc("CWE398_Poor_Code_Quality__equals_08.c":45:1)
#loc5 = loc("CWE398_Poor_Code_Quality__equals_08.c":35:5)
#loc6 = loc("CWE398_Poor_Code_Quality__equals_08.c":44:5)
#loc7 = loc("CWE398_Poor_Code_Quality__equals_08.c":35:8)
#loc8 = loc("CWE398_Poor_Code_Quality__equals_08.c":35:26)
#loc9 = loc("CWE398_Poor_Code_Quality__equals_08.c":36:5)
#loc10 = loc("CWE398_Poor_Code_Quality__equals_08.c":37:9)
#loc11 = loc("CWE398_Poor_Code_Quality__equals_08.c":43:9)
#loc12 = loc("CWE398_Poor_Code_Quality__equals_08.c":38:13)
#loc13 = loc("CWE398_Poor_Code_Quality__equals_08.c":38:26)
#loc14 = loc("CWE398_Poor_Code_Quality__equals_08.c":39:26)
#loc15 = loc("CWE398_Poor_Code_Quality__equals_08.c":39:13)
#loc16 = loc("CWE398_Poor_Code_Quality__equals_08.c":41:22)
#loc17 = loc("CWE398_Poor_Code_Quality__equals_08.c":41:13)
#loc18 = loc("CWE398_Poor_Code_Quality__equals_08.c":42:26)
#loc19 = loc("CWE398_Poor_Code_Quality__equals_08.c":42:13)
#loc20 = loc("CWE398_Poor_Code_Quality__equals_08.c":86:1)
#loc21 = loc("CWE398_Poor_Code_Quality__equals_08.c":90:1)
#loc22 = loc("CWE398_Poor_Code_Quality__equals_08.c":88:5)
#loc23 = loc("CWE398_Poor_Code_Quality__equals_08.c":88:11)
#loc24 = loc("CWE398_Poor_Code_Quality__equals_08.c":89:5)
#loc25 = loc("CWE398_Poor_Code_Quality__equals_08.c":89:11)
#loc26 = loc("CWE398_Poor_Code_Quality__equals_08.c":21:1)
#loc27 = loc("CWE398_Poor_Code_Quality__equals_08.c":24:1)
#loc28 = loc("CWE398_Poor_Code_Quality__equals_08.c":23:12)
#loc29 = loc("CWE398_Poor_Code_Quality__equals_08.c":23:5)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE398_Poor_Code_Quality__equals_08.c":57:19)
#loc33 = loc("CWE398_Poor_Code_Quality__equals_08.c":52:1)
#loc34 = loc("CWE398_Poor_Code_Quality__equals_08.c":69:1)
#loc35 = loc("CWE398_Poor_Code_Quality__equals_08.c":54:5)
#loc36 = loc("CWE398_Poor_Code_Quality__equals_08.c":68:5)
#loc37 = loc("CWE398_Poor_Code_Quality__equals_08.c":54:8)
#loc38 = loc("CWE398_Poor_Code_Quality__equals_08.c":54:27)
#loc39 = loc("CWE398_Poor_Code_Quality__equals_08.c":55:5)
#loc40 = loc("CWE398_Poor_Code_Quality__equals_08.c":58:5)
#loc41 = loc("CWE398_Poor_Code_Quality__equals_08.c":60:5)
#loc42 = loc("CWE398_Poor_Code_Quality__equals_08.c":57:9)
#loc43 = loc("CWE398_Poor_Code_Quality__equals_08.c":61:9)
#loc44 = loc("CWE398_Poor_Code_Quality__equals_08.c":67:9)
#loc45 = loc("CWE398_Poor_Code_Quality__equals_08.c":62:13)
#loc46 = loc("CWE398_Poor_Code_Quality__equals_08.c":62:26)
#loc47 = loc("CWE398_Poor_Code_Quality__equals_08.c":62:39)
#loc48 = loc("CWE398_Poor_Code_Quality__equals_08.c":63:26)
#loc49 = loc("CWE398_Poor_Code_Quality__equals_08.c":63:13)
#loc50 = loc("CWE398_Poor_Code_Quality__equals_08.c":65:22)
#loc51 = loc("CWE398_Poor_Code_Quality__equals_08.c":65:13)
#loc52 = loc("CWE398_Poor_Code_Quality__equals_08.c":66:26)
#loc53 = loc("CWE398_Poor_Code_Quality__equals_08.c":66:13)
#loc54 = loc("CWE398_Poor_Code_Quality__equals_08.c":26:1)
#loc55 = loc("CWE398_Poor_Code_Quality__equals_08.c":29:1)
#loc56 = loc("CWE398_Poor_Code_Quality__equals_08.c":28:12)
#loc57 = loc("CWE398_Poor_Code_Quality__equals_08.c":28:5)
#loc58 = loc("CWE398_Poor_Code_Quality__equals_08.c":72:1)
#loc59 = loc("CWE398_Poor_Code_Quality__equals_08.c":84:1)
#loc60 = loc("CWE398_Poor_Code_Quality__equals_08.c":74:5)
#loc61 = loc("CWE398_Poor_Code_Quality__equals_08.c":83:5)
#loc62 = loc("CWE398_Poor_Code_Quality__equals_08.c":74:8)
#loc63 = loc("CWE398_Poor_Code_Quality__equals_08.c":74:26)
#loc64 = loc("CWE398_Poor_Code_Quality__equals_08.c":75:5)
#loc65 = loc("CWE398_Poor_Code_Quality__equals_08.c":76:9)
#loc66 = loc("CWE398_Poor_Code_Quality__equals_08.c":82:9)
#loc67 = loc("CWE398_Poor_Code_Quality__equals_08.c":77:13)
#loc68 = loc("CWE398_Poor_Code_Quality__equals_08.c":77:26)
#loc69 = loc("CWE398_Poor_Code_Quality__equals_08.c":77:39)
#loc70 = loc("CWE398_Poor_Code_Quality__equals_08.c":78:26)
#loc71 = loc("CWE398_Poor_Code_Quality__equals_08.c":78:13)
#loc72 = loc("CWE398_Poor_Code_Quality__equals_08.c":80:22)
#loc73 = loc("CWE398_Poor_Code_Quality__equals_08.c":80:13)
#loc74 = loc("CWE398_Poor_Code_Quality__equals_08.c":81:26)
#loc75 = loc("CWE398_Poor_Code_Quality__equals_08.c":81:13)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc9, #loc6])
#loc81 = loc(fused[#loc10, #loc11])
#loc82 = loc(fused[#loc12, #loc13])
#loc83 = loc(fused[#loc17, #loc16])
#loc84 = loc(fused[#loc20, #loc21])
#loc85 = loc(fused[#loc22, #loc23])
#loc86 = loc(fused[#loc24, #loc25])
#loc87 = loc(fused[#loc26, #loc27])
#loc88 = loc(fused[#loc29, #loc28])
#loc89 = loc(fused[#loc30, #loc31])
#loc90 = loc(fused[#loc33, #loc34])
#loc91 = loc(fused[#loc35, #loc36])
#loc92 = loc(fused[#loc37, #loc38])
#loc93 = loc(fused[#loc39, #loc40, #loc41, #loc36])
#loc94 = loc(fused[#loc43, #loc44])
#loc95 = loc(fused[#loc45, #loc46])
#loc96 = loc(fused[#loc45, #loc47])
#loc97 = loc(fused[#loc51, #loc50])
#loc98 = loc(fused[#loc54, #loc55])
#loc99 = loc(fused[#loc57, #loc56])
#loc100 = loc(fused[#loc58, #loc59])
#loc101 = loc(fused[#loc60, #loc61])
#loc102 = loc(fused[#loc62, #loc63])
#loc103 = loc(fused[#loc64, #loc61])
#loc104 = loc(fused[#loc65, #loc66])
#loc105 = loc(fused[#loc67, #loc68])
#loc106 = loc(fused[#loc67, #loc69])
#loc107 = loc(fused[#loc73, #loc72])
