!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc106)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc107)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc108)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc111)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc112)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc16)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc113)
    cir.br ^bb1 loc(#loc114)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc114)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc20)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    cir.br ^bb4 loc(#loc22)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc19)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc116)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc116)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc25)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc117)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc28)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc28)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc110)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc13)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc13)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc13)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc13)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc13)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc111)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc31)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc31)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc32)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc34)
    cir.br ^bb10 loc(#loc27)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc35)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc24)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc109)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    cir.return loc(#loc37)
  } loc(#loc118)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc121)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc122)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc124)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc54)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    cir.br ^bb1 loc(#loc128)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc128)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc58)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc58)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc59)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc59)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc59)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
    cir.br ^bb4 loc(#loc61)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc57)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc130)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc130)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc64)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc64)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc131)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc67)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc68)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc68)
    %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc67)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc124)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc51)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc51)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc51)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc51)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc51)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc51)
    %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc51)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc51)
    cir.store %22, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc125)
    %23 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc69)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc69)
    %25 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc70)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc70)
    %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc71)
    %28 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc72)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc72)
    cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc73)
    cir.br ^bb10 loc(#loc66)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc74)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc63)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc47)
  } loc(#loc123)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc75)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc132)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc135)
    %2 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc136)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc86)
    cir.store %3, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc137)
    cir.br ^bb1 loc(#loc138)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc138)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc90)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc90)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc75)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    cir.store %8, %2 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc139)
    cir.br ^bb4 loc(#loc92)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc140)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc140)
  ^bb7:  // pred: ^bb6
    %9 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %10 ^bb8, ^bb11 loc(#loc95)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc141)
  ^bb9:  // pred: ^bb8
    %11 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc98)
    %12 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc99)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc99)
    %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc98)
    cir.store %14, %0 : !u64i, !cir.ptr<!u64i> loc(#loc134)
    %15 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc83)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc83)
    %18 = cir.binop(add, %15, %17) : !u64i loc(#loc83)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc83)
    %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc83)
    %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc83)
    %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc83)
    cir.store %23, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc135)
    %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc100)
    %25 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc101)
    %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc101)
    %27 = cir.load %2 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc102)
    %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc102)
    %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc100)
    %30 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc103)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc104)
    cir.br ^bb10 loc(#loc97)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc105)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc94)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc79)
  } loc(#loc133)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:24)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":27:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":48:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:13)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:49)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:13)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":42:35)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":29:12)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:12)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":30:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":36:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":31:11)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":34:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":35:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":47:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":37:11)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":39:9)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":45:9)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":41:45)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:26)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":43:19)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:31)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":44:13)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":46:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":102:1)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":106:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":104:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":105:13)
#loc42 = loc("/usr/include/wchar.h":247:1)
#loc43 = loc("/usr/include/wchar.h":247:51)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":55:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":76:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:13)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:52)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:13)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":70:35)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":57:12)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:12)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":58:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":64:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":59:11)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:24)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":62:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":63:9)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":75:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":65:11)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":67:9)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":73:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:30)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":69:48)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:26)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:32)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":71:19)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:35)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":72:13)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":74:9)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:24)
#loc76 = loc("/usr/include/string.h":141:1)
#loc77 = loc("/usr/include/string.h":142:14)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":79:1)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":100:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:13)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:49)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":94:35)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":81:12)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:12)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":82:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":88:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":83:11)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":86:9)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":87:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:5)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":99:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":89:11)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":91:9)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":97:9)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:30)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":93:45)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:19)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:26)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":95:32)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:31)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":96:13)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_16.c":98:9)
#loc106 = loc(fused[#loc2, #loc3])
#loc107 = loc(fused[#loc4, #loc5])
#loc108 = loc(fused[#loc6, #loc7])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc12, #loc13])
#loc112 = loc(fused[#loc14, #loc15])
#loc113 = loc(fused[#loc17, #loc16])
#loc114 = loc(fused[#loc18, #loc19])
#loc115 = loc(fused[#loc21, #loc1])
#loc116 = loc(fused[#loc23, #loc24])
#loc117 = loc(fused[#loc26, #loc27])
#loc118 = loc(fused[#loc36, #loc37])
#loc119 = loc(fused[#loc38, #loc39])
#loc120 = loc(fused[#loc40, #loc41])
#loc121 = loc(fused[#loc42, #loc43])
#loc122 = loc(fused[#loc44, #loc45])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc48, #loc49])
#loc125 = loc(fused[#loc50, #loc51])
#loc126 = loc(fused[#loc52, #loc53])
#loc127 = loc(fused[#loc55, #loc54])
#loc128 = loc(fused[#loc56, #loc57])
#loc129 = loc(fused[#loc60, #loc59])
#loc130 = loc(fused[#loc62, #loc63])
#loc131 = loc(fused[#loc65, #loc66])
#loc132 = loc(fused[#loc76, #loc77])
#loc133 = loc(fused[#loc78, #loc79])
#loc134 = loc(fused[#loc80, #loc81])
#loc135 = loc(fused[#loc82, #loc83])
#loc136 = loc(fused[#loc84, #loc85])
#loc137 = loc(fused[#loc87, #loc86])
#loc138 = loc(fused[#loc88, #loc89])
#loc139 = loc(fused[#loc91, #loc75])
#loc140 = loc(fused[#loc93, #loc94])
#loc141 = loc(fused[#loc96, #loc97])
