!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":25:23)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":25:32)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":49:27)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":49:36)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":69:27)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":69:36)
#loc96 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc31, #loc32])
#loc117 = loc(fused[#loc55, #loc56])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc94)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L9badSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc5, #loc6])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc96)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc7)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc8)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc8)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc8)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc8)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc8)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc8)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc8)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc8)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc8)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc8)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc8)
      cir.yield %29 : !u64i loc(#loc8)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc8)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc8)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc8)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc8)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc8)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc8)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc8)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc8)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc8)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc8)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc8)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc8)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc8)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc8)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc8)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc8)
      cir.yield %33 : !u64i loc(#loc8)
    }) : (!cir.bool) -> !u64i loc(#loc8)
    %6 = cir.cast(integral, %5 : !u64i), !s64i loc(#loc8)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc9)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc97)
    cir.return loc(#loc4)
  } loc(#loc95)
  cir.func private  @printLongLongLine(!s64i) loc(#loc98)
  cir.func  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_433badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc100)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc101)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L9badSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc18)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc21)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc22)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc22)
      %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc103)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc105)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc25)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc25)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc26)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc105)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc28)
      } loc(#loc104)
    } loc(#loc102)
    cir.return loc(#loc13)
  } loc(#loc99)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L13goodG2BSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc31, #loc32])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc107)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc33)
    %1 = cir.const #cir.int<2> : !s32i loc(#loc34)
    %2 = cir.cast(integral, %1 : !s32i), !s64i loc(#loc34)
    %3 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc35)
    cir.store %2, %3 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    cir.return loc(#loc30)
  } loc(#loc106)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc110)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc40)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc111)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L13goodG2BSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc42)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc45)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc46)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc46)
      %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc113)
      cir.if %5 {
        %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
        %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc50)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc49)
        %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc49)
        %10 = cir.binop(mul, %7, %9) nsw : !s64i loc(#loc50)
        cir.store %10, %6 : !s64i, !cir.ptr<!s64i> loc(#loc115)
        %11 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc51)
        cir.call @printLongLongLine(%11) : (!s64i) -> () loc(#loc52)
      } loc(#loc114)
    } loc(#loc112)
    cir.return loc(#loc37)
  } loc(#loc109)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L13goodB2GSourceERl(%arg0: !cir.ptr<!s64i> loc(fused[#loc55, #loc56])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init, const] {alignment = 8 : i64} loc(#loc117)
    cir.store %arg0, %0 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc57)
    %1 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %3 = cir.binop(and, %1, %2) : !s32i loc(#loc58)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc58)
    %5 = cir.ternary(%4, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc58)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc58)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc58)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc58)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc58)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc58)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc58)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc58)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc58)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc58)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc58)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc58)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc58)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc58)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc58)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc58)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc58)
      cir.yield %29 : !u64i loc(#loc58)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc58)
      %10 = cir.const #cir.int<60> : !s32i loc(#loc58)
      %11 = cir.shift(left, %9 : !u64i, %10 : !s32i) -> !u64i loc(#loc58)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc58)
      %14 = cir.const #cir.int<45> : !s32i loc(#loc58)
      %15 = cir.shift(left, %13 : !u64i, %14 : !s32i) -> !u64i loc(#loc58)
      %16 = cir.binop(xor, %11, %15) : !u64i loc(#loc58)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc58)
      %19 = cir.const #cir.int<30> : !s32i loc(#loc58)
      %20 = cir.shift(left, %18 : !u64i, %19 : !s32i) -> !u64i loc(#loc58)
      %21 = cir.binop(xor, %16, %20) : !u64i loc(#loc58)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc58)
      %24 = cir.const #cir.int<15> : !s32i loc(#loc58)
      %25 = cir.shift(left, %23 : !u64i, %24 : !s32i) -> !u64i loc(#loc58)
      %26 = cir.binop(xor, %21, %25) : !u64i loc(#loc58)
      %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc58)
      %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc58)
      %29 = cir.binop(xor, %26, %28) : !u64i loc(#loc58)
      %30 = cir.unary(minus, %29) : !u64i, !u64i loc(#loc58)
      %31 = cir.const #cir.int<1> : !s32i loc(#loc58)
      %32 = cir.cast(integral, %31 : !s32i), !u64i loc(#loc58)
      %33 = cir.binop(sub, %30, %32) : !u64i loc(#loc58)
      cir.yield %33 : !u64i loc(#loc58)
    }) : (!cir.bool) -> !u64i loc(#loc58)
    %6 = cir.cast(integral, %5 : !u64i), !s64i loc(#loc58)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc59)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc118)
    cir.return loc(#loc54)
  } loc(#loc116)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc119)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc62)
  cir.func internal private  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc121)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc67)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L13goodB2GSourceERl(%0) : (!cir.ptr<!s64i>) -> () loc(#loc69)
    cir.scope {
      %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
      %3 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc73)
      %5 = cir.cmp(gt, %2, %4) : !s64i, !cir.bool loc(#loc124)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc77)
          %7 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc78)
          %8 = cir.const #cir.int<2> : !s32i loc(#loc79)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc79)
          %10 = cir.binop(div, %7, %9) : !s64i loc(#loc127)
          %11 = cir.cmp(lt, %6, %10) : !s64i, !cir.bool loc(#loc128)
          cir.if %11 {
            %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc130)
            %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc86)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc85)
            %15 = cir.cast(integral, %14 : !s32i), !s64i loc(#loc85)
            %16 = cir.binop(mul, %13, %15) nsw : !s64i loc(#loc86)
            cir.store %16, %12 : !s64i, !cir.ptr<!s64i> loc(#loc130)
            %17 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc87)
            cir.call @printLongLongLine(%17) : (!s64i) -> () loc(#loc88)
          } else {
            %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc62)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc62)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc89)
          } loc(#loc129)
        } loc(#loc126)
      } loc(#loc125)
    } loc(#loc123)
    cir.return loc(#loc64)
  } loc(#loc120)
  cir.func  @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_434goodEv() extra(#fn_attr1) {
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L7goodG2BEv() : () -> () loc(#loc92)
    cir.call @_ZN49CWE190_Integer_Overflow__int64_t_rand_multiply_43L7goodB2GEv() : () -> () loc(#loc93)
    cir.return loc(#loc91)
  } loc(#loc131)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":29:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":26:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":28:21)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":28:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":31:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":42:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":33:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":33:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":34:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":34:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":35:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":36:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":41:5)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":36:8)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":36:15)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":37:5)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":39:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":39:33)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":39:26)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":40:27)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":40:9)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":49:1)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":53:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":50:1)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":52:12)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":52:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":55:1)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":66:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":57:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":57:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":58:12)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":58:5)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":59:5)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":60:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":65:5)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":60:8)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":60:15)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":61:5)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":63:9)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":63:33)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":63:26)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":64:27)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":64:9)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":69:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":73:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":70:1)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":72:21)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":72:5)
#loc60 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc61 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":90:23)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":75:1)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":93:1)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":77:5)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":77:13)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":78:12)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":78:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":79:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":80:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":92:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":80:8)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":80:15)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":81:5)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":83:9)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":91:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":83:13)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":83:21)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":83:31)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":83:32)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":84:9)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":87:9)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":89:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":85:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":85:37)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":85:30)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":86:31)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":86:13)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":90:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":95:1)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":99:1)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":97:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_multiply_43.cpp":98:5)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc9, #loc8])
#loc98 = loc(fused[#loc10, #loc11])
#loc99 = loc(fused[#loc12, #loc13])
#loc100 = loc(fused[#loc14, #loc15])
#loc101 = loc(fused[#loc17, #loc16])
#loc102 = loc(fused[#loc19, #loc20])
#loc103 = loc(fused[#loc21, #loc22])
#loc104 = loc(fused[#loc23, #loc20])
#loc105 = loc(fused[#loc24, #loc25])
#loc106 = loc(fused[#loc29, #loc30])
#loc108 = loc(fused[#loc35, #loc34])
#loc109 = loc(fused[#loc36, #loc37])
#loc110 = loc(fused[#loc38, #loc39])
#loc111 = loc(fused[#loc41, #loc40])
#loc112 = loc(fused[#loc43, #loc44])
#loc113 = loc(fused[#loc45, #loc46])
#loc114 = loc(fused[#loc47, #loc44])
#loc115 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc53, #loc54])
#loc118 = loc(fused[#loc59, #loc58])
#loc119 = loc(fused[#loc60, #loc61])
#loc120 = loc(fused[#loc63, #loc64])
#loc121 = loc(fused[#loc65, #loc66])
#loc122 = loc(fused[#loc68, #loc67])
#loc123 = loc(fused[#loc70, #loc71])
#loc124 = loc(fused[#loc72, #loc73])
#loc125 = loc(fused[#loc74, #loc71])
#loc126 = loc(fused[#loc75, #loc76])
#loc127 = loc(fused[#loc78, #loc79])
#loc128 = loc(fused[#loc77, #loc80])
#loc129 = loc(fused[#loc81, #loc82, #loc83, #loc76])
#loc130 = loc(fused[#loc84, #loc85])
#loc131 = loc(fused[#loc90, #loc91])
