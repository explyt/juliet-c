!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc40)
  cir.func private @printHexCharLine(!s8i) loc(#loc41)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc43)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      cir.yield %20 : !u32i loc(#loc12)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc12)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc12)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc12)
      cir.yield %24 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc45)
    cir.scope {
      %9 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc47)
      %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc17)
      cir.store %11, %9 : !s8i, !cir.ptr<!s8i> loc(#loc47)
      %12 = cir.load %9 : !cir.ptr<!s8i>, !s8i loc(#loc18)
      cir.call @printHexCharLine(%12) : (!s8i) -> () loc(#loc19)
    } loc(#loc46)
    cir.return loc(#loc6)
  } loc(#loc42)
  cir.func no_proto @CWE197_Numeric_Truncation_Error__int_rand_to_char_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc49)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc22)
    cir.return loc(#loc21)
  } loc(#loc48)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc51)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc29)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    %3 = cir.const #cir.int<127> : !s32i loc(#loc31)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc32)
    %5 = cir.binop(sub, %3, %4) nsw : !s32i loc(#loc31)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.scope {
      %6 = cir.alloca !s8i, !cir.ptr<!s8i>, ["charData", init] {alignment = 1 : i64} loc(#loc55)
      %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %8 = cir.cast(integral, %7 : !s32i), !s8i loc(#loc37)
      cir.store %8, %6 : !s8i, !cir.ptr<!s8i> loc(#loc55)
      %9 = cir.load %6 : !cir.ptr<!s8i>, !s8i loc(#loc38)
      cir.call @printHexCharLine(%9) : (!s8i) -> () loc(#loc39)
    } loc(#loc54)
    cir.return loc(#loc25)
  } loc(#loc50)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE197_Numeric_Truncation_Error/s01/CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":30:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":30:35)
#loc5 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":21:1)
#loc6 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":33:1)
#loc7 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":23:5)
#loc8 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":23:9)
#loc9 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":25:13)
#loc10 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":25:12)
#loc11 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":25:5)
#loc12 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":27:12)
#loc13 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":27:5)
#loc14 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":28:5)
#loc15 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":32:5)
#loc16 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":30:9)
#loc17 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":30:31)
#loc18 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":31:26)
#loc19 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":31:9)
#loc20 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":54:1)
#loc21 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":57:1)
#loc22 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":56:5)
#loc23 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":56:13)
#loc24 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":40:1)
#loc25 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":52:1)
#loc26 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":42:5)
#loc27 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":42:9)
#loc28 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":44:13)
#loc29 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":44:12)
#loc30 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":44:5)
#loc31 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":46:12)
#loc32 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":46:21)
#loc33 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":46:5)
#loc34 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":47:5)
#loc35 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":51:5)
#loc36 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":49:9)
#loc37 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":49:31)
#loc38 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":50:26)
#loc39 = loc("CWE197_Numeric_Truncation_Error__int_rand_to_char_01.c":50:9)
#loc40 = loc(fused[#loc1, #loc2])
#loc41 = loc(fused[#loc3, #loc4])
#loc42 = loc(fused[#loc5, #loc6])
#loc43 = loc(fused[#loc7, #loc8])
#loc44 = loc(fused[#loc11, #loc9])
#loc45 = loc(fused[#loc13, #loc12])
#loc46 = loc(fused[#loc14, #loc15])
#loc47 = loc(fused[#loc16, #loc17])
#loc48 = loc(fused[#loc20, #loc21])
#loc49 = loc(fused[#loc22, #loc23])
#loc50 = loc(fused[#loc24, #loc25])
#loc51 = loc(fused[#loc26, #loc27])
#loc52 = loc(fused[#loc30, #loc28])
#loc53 = loc(fused[#loc33, #loc32])
#loc54 = loc(fused[#loc34, #loc35])
#loc55 = loc(fused[#loc36, #loc37])
