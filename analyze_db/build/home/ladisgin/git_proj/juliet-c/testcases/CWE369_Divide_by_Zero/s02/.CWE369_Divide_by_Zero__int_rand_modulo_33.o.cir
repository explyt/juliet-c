!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":32:12)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":68:12)
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc74)
  cir.func private @printIntLine(!s32i) loc(#loc75)
  cir.func @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc77)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc78)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc79)
    cir.store %1, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc12)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc14)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc16)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb3(%20 : !u32i) loc(#loc16)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb3(%36 : !u32i) loc(#loc16)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":32:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc16)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.br ^bb5 loc(#loc82)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc8)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc8)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    %41 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %43 = cir.binop(rem, %41, %42) : !s32i loc(#loc83)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc22)
    cir.br ^bb6 loc(#loc19)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc76)
  cir.func internal private @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc85)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc87)
    cir.store %1, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc30)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc31)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc32)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc34)
    cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc89)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %6 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc26)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %8 = cir.const #cir.int<100> : !s32i loc(#loc38)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc91)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc40)
    cir.br ^bb2 loc(#loc37)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc24)
  } loc(#loc84)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc43)
  cir.func internal private @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc96)
    cir.store %1, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc51)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc53)
    cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc55)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc55)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc55)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc55)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc55)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc55)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc55)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc55)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc55)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc55)
    cir.br ^bb3(%20 : !u32i) loc(#loc55)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc55)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc55)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc55)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc55)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc55)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc55)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc55)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc55)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc55)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc55)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc55)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc55)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc55)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc55)
    cir.br ^bb3(%36 : !u32i) loc(#loc55)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":68:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc55)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc55)
    cir.store %38, %1 : !s32i, !cir.ptr<!s32i> loc(#loc98)
    cir.br ^bb5 loc(#loc99)
  ^bb5:  // pred: ^bb4
    %39 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
    %40 = cir.load %39 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    cir.store %40, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb6 loc(#loc100)
  ^bb6:  // pred: ^bb5
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc62)
    %43 = cir.cmp(ne, %41, %42) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %43 ^bb7, ^bb8 loc(#loc102)
  ^bb7:  // pred: ^bb6
    %44 = cir.const #cir.int<100> : !s32i loc(#loc66)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
    %46 = cir.binop(rem, %44, %45) : !s32i loc(#loc103)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc68)
    cir.br ^bb9 loc(#loc64)
  ^bb8:  // pred: ^bb6
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc43)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc69)
    cir.br ^bb9 loc(#loc60)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc60)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc58)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc45)
  } loc(#loc93)
  cir.func @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_33L7goodG2BEv() : () -> () loc(#loc72)
    cir.call @_ZN41CWE369_Divide_by_Zero__int_rand_modulo_33L7goodB2GEv() : () -> () loc(#loc73)
    cir.return loc(#loc71)
  } loc(#loc104)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":25:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":38:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":34:9)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":34:20)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":27:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":27:9)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":28:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":28:20)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":30:13)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":30:12)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":30:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":32:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":33:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":37:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":36:22)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":36:28)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":36:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":45:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":58:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":54:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":54:20)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":47:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":47:9)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":48:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":48:20)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":50:13)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":50:12)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":50:5)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":52:12)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":52:5)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":53:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":57:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":56:22)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":56:28)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":56:9)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":78:23)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":61:1)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":81:1)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":70:9)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":70:20)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":63:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":63:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":64:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":64:20)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":66:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":66:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":66:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":68:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":69:5)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":80:5)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":72:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":79:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":72:13)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":72:21)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":73:9)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":75:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":77:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":74:26)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":74:32)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":74:13)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":78:13)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":83:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":87:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":85:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_33.cpp":86:5)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc7, #loc8])
#loc78 = loc(fused[#loc9, #loc10])
#loc79 = loc(fused[#loc11, #loc12])
#loc80 = loc(fused[#loc15, #loc13])
#loc81 = loc(fused[#loc17, #loc16])
#loc82 = loc(fused[#loc18, #loc19])
#loc83 = loc(fused[#loc20, #loc21])
#loc84 = loc(fused[#loc23, #loc24])
#loc85 = loc(fused[#loc25, #loc26])
#loc86 = loc(fused[#loc27, #loc28])
#loc87 = loc(fused[#loc29, #loc30])
#loc88 = loc(fused[#loc33, #loc31])
#loc89 = loc(fused[#loc35, #loc34])
#loc90 = loc(fused[#loc36, #loc37])
#loc91 = loc(fused[#loc38, #loc39])
#loc92 = loc(fused[#loc41, #loc42])
#loc93 = loc(fused[#loc44, #loc45])
#loc94 = loc(fused[#loc46, #loc47])
#loc95 = loc(fused[#loc48, #loc49])
#loc96 = loc(fused[#loc50, #loc51])
#loc97 = loc(fused[#loc54, #loc52])
#loc98 = loc(fused[#loc56, #loc55])
#loc99 = loc(fused[#loc57, #loc58])
#loc100 = loc(fused[#loc59, #loc60])
#loc101 = loc(fused[#loc61, #loc62])
#loc102 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc103 = loc(fused[#loc66, #loc67])
#loc104 = loc(fused[#loc70, #loc71])
