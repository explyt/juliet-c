!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":89:10)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":89:14)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":89:20)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":89:32)
#loc114 = loc(fused[#loc48, #loc49])
#loc115 = loc(fused[#loc50, #loc51])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_16_bad() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc12)
        cir.condition(%1) loc(#loc12)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc102)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc103)
          %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
          cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc19)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc104)
          cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc105)
          cir.scope {
            %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc24)
            cir.switch (%8 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
                cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc107)
                cir.break loc(#loc27)
              } loc(#loc25)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
                cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
                cir.break loc(#loc30)
              } loc(#loc28)
              cir.yield loc(#loc22)
            } loc(#loc22)
          } loc(#loc106)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc31)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        } loc(#loc101)
        cir.break loc(#loc33)
      } loc(#loc100)
    } loc(#loc100)
    cir.return loc(#loc9)
  } loc(#loc99)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc35)
  } loc(#loc109)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc111)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc45)
  cir.func @main(%arg0: !s32i loc(fused[#loc48, #loc49]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc50, #loc51])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc47)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc52)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc52)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc53)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc54)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc54)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc55)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc42)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc56)
    %8 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_16_good() : () -> () loc(#loc57)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc43)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc44)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %13 = cir.get_global @CWE478_Missing_Default_Case_in_Switch__basic_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call @CWE478_Missing_Default_Case_in_Switch__basic_16_bad() : () -> () loc(#loc61)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc45)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.return %17 : !s32i loc(#loc118)
  } loc(#loc113)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc70)
        cir.condition(%1) loc(#loc70)
      } do {
        cir.scope {
          %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc122)
          %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc123)
          %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc74)
          %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc74)
          cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc122)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc77)
          %5 = cir.const #cir.int<3> : !s32i loc(#loc78)
          %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc124)
          cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc125)
          cir.scope {
            %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc83)
            cir.switch (%8 : !s32i) {
              cir.case(equal, [#cir.int<0> : !s32i]) {
                %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc85)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc85)
                cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc127)
                cir.break loc(#loc87)
              } loc(#loc84)
              cir.case(equal, [#cir.int<1> : !s32i]) {
                %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc89)
                %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc89)
                cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc128)
                cir.break loc(#loc91)
              } loc(#loc88)
              cir.case(default, []) {
                cir.return loc(#loc93)
              } loc(#loc92)
              cir.yield loc(#loc81)
            } loc(#loc81)
          } loc(#loc126)
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc94)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc95)
        } loc(#loc121)
        cir.break loc(#loc96)
      } loc(#loc120)
    } loc(#loc120)
    cir.return loc(#loc67)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_16.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":25:38)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":31:30)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":34:30)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":42:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":22:5)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":41:5)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":22:11)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":24:9)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":39:9)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":25:13)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":26:13)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":26:17)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:18)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:27)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:13)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":27:28)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":28:13)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":37:13)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":28:21)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":30:13)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":31:17)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":32:17)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":33:13)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":34:17)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":35:17)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":38:23)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":38:13)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":40:9)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":75:1)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":78:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":77:5)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":77:11)
#loc38 = loc("/usr/include/stdlib.h":575:1)
#loc39 = loc("/usr/include/stdlib.h":575:41)
#loc40 = loc("/usr/include/time.h":76:1)
#loc41 = loc("/usr/include/time.h":76:38)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":94:15)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":96:15)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":99:15)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":101:15)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":89:1)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":104:1)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":90:1)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":92:27)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":92:22)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":92:5)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":94:5)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":95:5)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":95:58)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":96:5)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":99:5)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":100:5)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":100:57)
#loc63 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":101:5)
#loc64 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":103:12)
#loc65 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":103:5)
#loc66 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":49:1)
#loc67 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":73:1)
#loc68 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":51:5)
#loc69 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":72:5)
#loc70 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":51:11)
#loc71 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":53:9)
#loc72 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":70:9)
#loc73 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":54:13)
#loc74 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":54:38)
#loc75 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":55:13)
#loc76 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":55:17)
#loc77 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:18)
#loc78 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:27)
#loc79 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:13)
#loc80 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":56:28)
#loc81 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":57:13)
#loc82 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":68:13)
#loc83 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":57:21)
#loc84 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":59:13)
#loc85 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":60:30)
#loc86 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":60:17)
#loc87 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":61:17)
#loc88 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":62:13)
#loc89 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":63:30)
#loc90 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":63:17)
#loc91 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":64:17)
#loc92 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":66:13)
#loc93 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":67:17)
#loc94 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":69:23)
#loc95 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":69:13)
#loc96 = loc("CWE478_Missing_Default_Case_in_Switch__basic_16.c":71:9)
#loc97 = loc(fused[#loc2, #loc3])
#loc98 = loc(fused[#loc6, #loc7])
#loc99 = loc(fused[#loc8, #loc9])
#loc100 = loc(fused[#loc10, #loc11])
#loc101 = loc(fused[#loc13, #loc14])
#loc102 = loc(fused[#loc15, #loc1])
#loc103 = loc(fused[#loc16, #loc17])
#loc104 = loc(fused[#loc18, #loc19])
#loc105 = loc(fused[#loc20, #loc21])
#loc106 = loc(fused[#loc22, #loc23])
#loc107 = loc(fused[#loc26, #loc4])
#loc108 = loc(fused[#loc29, #loc5])
#loc109 = loc(fused[#loc34, #loc35])
#loc110 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc38, #loc39])
#loc112 = loc(fused[#loc40, #loc41])
#loc113 = loc(fused[#loc46, #loc47])
#loc116 = loc(fused[#loc57, #loc58])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc65, #loc64])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc71, #loc72])
#loc122 = loc(fused[#loc73, #loc74])
#loc123 = loc(fused[#loc75, #loc76])
#loc124 = loc(fused[#loc77, #loc78])
#loc125 = loc(fused[#loc79, #loc80])
#loc126 = loc(fused[#loc81, #loc82])
#loc127 = loc(fused[#loc86, #loc85])
#loc128 = loc(fused[#loc90, #loc89])
