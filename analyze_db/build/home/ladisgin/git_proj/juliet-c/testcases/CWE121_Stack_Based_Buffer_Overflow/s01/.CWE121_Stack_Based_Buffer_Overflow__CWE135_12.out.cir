!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:10)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:14)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:20)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:32)
#loc228 = loc(fused[#loc79, #loc80])
#loc229 = loc(fused[#loc81, #loc82])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc199)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc4)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc200)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc201)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc202)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc203)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc204)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc206)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc207)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc208)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc209)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc210)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc27)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc211)
    cir.br ^bb1 loc(#loc212)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc213)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc213)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc31)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc31)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc214)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc3)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc3)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc3)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc215)
    cir.br ^bb4 loc(#loc34)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc4)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc4)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc4)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc216)
    cir.br ^bb4 loc(#loc30)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc30)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc217)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc218)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc218)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc40)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc40)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc219)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc220)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc47)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc48)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc48)
    %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc47)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc206)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc20)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc20)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc20)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc20)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc207)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc49)
    %34 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc50)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc50)
    %36 = cir.call @wcscpy(%33, %35) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc51)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc52)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%38) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb9 loc(#loc46)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc43)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc221)
  ^bb11:  // pred: ^bb10
    %39 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc56)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc57)
    %42 = cir.call @wcslen(%41) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc56)
    cir.store %42, %2 : !u64i, !cir.ptr<!u64i> loc(#loc208)
    %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc24)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc24)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc24)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc24)
    %49 = cir.alloca !u8i, !cir.ptr<!u8i>, %48 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc24)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc24)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc209)
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc58)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc58)
    %53 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc59)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc60)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc61)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc62)
    cir.br ^bb12 loc(#loc55)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc39)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc39)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc16)
  } loc(#loc205)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc65)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc224)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc67)
    cir.return loc(#loc64)
  } loc(#loc222)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc225)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc226)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc75)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc76)
  cir.func @main(%arg0: !s32i loc(fused[#loc79, #loc80]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc81, #loc82])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc228)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc229)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc78)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc83)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc84)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc85)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc85)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc86)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %8 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_good() : () -> () loc(#loc88)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc74)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc75)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc91)
    %13 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call @CWE121_Stack_Based_Buffer_Overflow__CWE135_12_bad() : () -> () loc(#loc92)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc76)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc76)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc95)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc232)
    cir.return %17 : !s32i loc(#loc232)
  } loc(#loc227)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc235)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc236)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc237)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc109)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc239)
    cir.br ^bb1 loc(#loc240)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc241)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc241)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc113)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc113)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc242)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc118)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc118)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc118)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc243)
    cir.br ^bb4 loc(#loc116)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc120)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc120)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc120)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc244)
    cir.br ^bb4 loc(#loc112)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc112)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc245)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc246)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc246)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc124)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc124)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc247)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc248)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc131)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc132)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc132)
    %23 = cir.call @wcslen(%22) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc131)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc234)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc102)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc102)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc102)
    %28 = cir.const #cir.int<4> : !u64i loc(#loc102)
    %29 = cir.binop(mul, %27, %28) : !u64i loc(#loc102)
    %30 = cir.alloca !u8i, !cir.ptr<!u8i>, %29 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc102)
    %31 = cir.cast(bitcast, %30 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc102)
    cir.store %31, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc235)
    %32 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc133)
    %33 = cir.cast(bitcast, %32 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc133)
    %34 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc134)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc134)
    %36 = cir.call @wcscpy(%33, %35) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc135)
    %37 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc136)
    %38 = cir.cast(bitcast, %37 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc136)
    cir.call @printWLine(%38) : (!cir.ptr<!s32i>) -> () loc(#loc137)
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc127)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc249)
  ^bb11:  // pred: ^bb10
    %39 = cir.get_global @wcslen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s32i>)>> loc(#loc140)
    %40 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc141)
    %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc141)
    %42 = cir.call @wcslen(%41) : (!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc140)
    cir.store %42, %2 : !u64i, !cir.ptr<!u64i> loc(#loc236)
    %43 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc106)
    %44 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %45 = cir.cast(integral, %44 : !s32i), !u64i loc(#loc106)
    %46 = cir.binop(add, %43, %45) : !u64i loc(#loc106)
    %47 = cir.const #cir.int<4> : !u64i loc(#loc106)
    %48 = cir.binop(mul, %46, %47) : !u64i loc(#loc106)
    %49 = cir.alloca !u8i, !cir.ptr<!u8i>, %48 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc106)
    %50 = cir.cast(bitcast, %49 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc106)
    cir.store %50, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc237)
    %51 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc142)
    %52 = cir.cast(bitcast, %51 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc142)
    %53 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc143)
    %54 = cir.cast(bitcast, %53 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc143)
    %55 = cir.call @wcscpy(%52, %54) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc144)
    %56 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc145)
    %57 = cir.cast(bitcast, %56 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc145)
    cir.call @printWLine(%57) : (!cir.ptr<!s32i>) -> () loc(#loc146)
    cir.br ^bb12 loc(#loc139)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc123)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc123)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc98)
  } loc(#loc233)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc250)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc252)
    %1 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc253)
    %2 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc254)
    %3 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc255)
    %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc256)
    %5 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
    cir.store %5, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc257)
    cir.br ^bb1 loc(#loc258)
  ^bb1:  // pred: ^bb0
    %6 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc259)
    %7 = cir.cast(bitcast, %6 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc259)
    %8 = cir.call %7() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc165)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc165)
    cir.brcond %9 ^bb2, ^bb3 loc(#loc260)
  ^bb2:  // pred: ^bb1
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc170)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc170)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
    cir.store %12, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc261)
    cir.br ^bb4 loc(#loc168)
  ^bb3:  // pred: ^bb1
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc172)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc172)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc172)
    cir.store %15, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc262)
    cir.br ^bb4 loc(#loc164)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc164)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc263)
  ^bb6:  // pred: ^bb5
    %16 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc264)
    %17 = cir.cast(bitcast, %16 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc264)
    %18 = cir.call %17() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc176)
    %19 = cir.cast(int_to_bool, %18 : !s32i), !cir.bool loc(#loc176)
    cir.brcond %19 ^bb7, ^bb10 loc(#loc265)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc266)
  ^bb8:  // pred: ^bb7
    %20 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc183)
    %21 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc184)
    %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
    %23 = cir.call @strlen(%22) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc183)
    cir.store %23, %0 : !u64i, !cir.ptr<!u64i> loc(#loc252)
    %24 = cir.load %0 : !cir.ptr<!u64i>, !u64i loc(#loc154)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc154)
    %27 = cir.binop(add, %24, %26) : !u64i loc(#loc154)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc154)
    %29 = cir.cast(integral, %28 : !s32i), !u64i loc(#loc154)
    %30 = cir.binop(mul, %27, %29) : !u64i loc(#loc154)
    %31 = cir.alloca !u8i, !cir.ptr<!u8i>, %30 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc154)
    %32 = cir.cast(bitcast, %31 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc154)
    cir.store %32, %1 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc253)
    %33 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc185)
    %34 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc186)
    %35 = cir.cast(bitcast, %34 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc186)
    %36 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc187)
    %37 = cir.cast(bitcast, %36 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc187)
    %38 = cir.call @strcpy(%35, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc185)
    %39 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc188)
    %40 = cir.cast(bitcast, %39 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc188)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    cir.br ^bb9 loc(#loc182)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc179)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc267)
  ^bb11:  // pred: ^bb10
    %41 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc192)
    %42 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc193)
    %43 = cir.cast(bitcast, %42 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc193)
    %44 = cir.call @strlen(%43) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc192)
    cir.store %44, %2 : !u64i, !cir.ptr<!u64i> loc(#loc254)
    %45 = cir.load %2 : !cir.ptr<!u64i>, !u64i loc(#loc158)
    %46 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc158)
    %48 = cir.binop(add, %45, %47) : !u64i loc(#loc158)
    %49 = cir.const #cir.int<1> : !s32i loc(#loc158)
    %50 = cir.cast(integral, %49 : !s32i), !u64i loc(#loc158)
    %51 = cir.binop(mul, %48, %50) : !u64i loc(#loc158)
    %52 = cir.alloca !u8i, !cir.ptr<!u8i>, %51 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc158)
    %53 = cir.cast(bitcast, %52 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc158)
    cir.store %53, %3 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc255)
    %54 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc194)
    %55 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
    %56 = cir.cast(bitcast, %55 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc195)
    %57 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc196)
    %58 = cir.cast(bitcast, %57 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc196)
    %59 = cir.call @strcpy(%56, %58) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc194)
    %60 = cir.load %3 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc197)
    %61 = cir.cast(bitcast, %60 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc197)
    cir.call @printLine(%61) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    cir.br ^bb12 loc(#loc191)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc175)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc175)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc150)
  } loc(#loc251)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:24)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:24)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/wchar.h":98:1)
#loc8 = loc("/usr/include/wchar.h":100:14)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc11 = loc("/usr/include/wchar.h":247:1)
#loc12 = loc("/usr/include/wchar.h":247:51)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc14 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":27:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":61:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:13)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:49)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:13)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":46:35)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:52)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":56:35)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:5)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":29:12)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:12)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":30:5)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":40:5)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:8)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":31:33)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":32:5)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":35:5)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":37:5)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":34:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":39:9)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":60:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:8)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":41:33)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":42:5)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":50:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":52:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":43:9)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":49:9)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:30)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":45:45)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:26)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:32)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":47:19)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:31)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":48:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":53:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":59:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":55:48)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:26)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":57:19)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:35)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":58:13)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":145:1)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":149:1)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":147:13)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":148:13)
#loc69 = loc("/usr/include/stdlib.h":575:1)
#loc70 = loc("/usr/include/stdlib.h":575:41)
#loc71 = loc("/usr/include/time.h":76:1)
#loc72 = loc("/usr/include/time.h":76:38)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":165:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":167:15)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":170:15)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":172:15)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":160:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":175:1)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":161:1)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:27)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:22)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":163:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":165:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":166:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":166:56)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":167:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":170:5)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":171:5)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":171:55)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":172:5)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":174:12)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":174:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":70:1)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":104:1)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:13)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:52)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:13)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":89:35)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:13)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:52)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:13)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":99:35)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":72:12)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:12)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":73:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:5)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":83:5)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:8)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":74:33)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":75:5)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":78:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":80:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:24)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":77:9)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:24)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":82:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:5)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":103:5)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:8)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":84:33)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":85:5)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":93:5)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":95:5)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":86:9)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":92:9)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:30)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":88:48)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:26)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:32)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":90:19)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:35)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":91:13)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":96:9)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":102:9)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:30)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":98:48)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:26)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:32)
#loc144 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":100:19)
#loc145 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:35)
#loc146 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":101:13)
#loc147 = loc("/usr/include/string.h":141:1)
#loc148 = loc("/usr/include/string.h":142:14)
#loc149 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":109:1)
#loc150 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":143:1)
#loc151 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:13)
#loc152 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:49)
#loc153 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:13)
#loc154 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":128:35)
#loc155 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:13)
#loc156 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:49)
#loc157 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:13)
#loc158 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":138:35)
#loc159 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:5)
#loc160 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":111:12)
#loc161 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:12)
#loc162 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":112:5)
#loc163 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:5)
#loc164 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":122:5)
#loc165 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:8)
#loc166 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":113:33)
#loc167 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":114:5)
#loc168 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":117:5)
#loc169 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":119:5)
#loc170 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:24)
#loc171 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":116:9)
#loc172 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:24)
#loc173 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":121:9)
#loc174 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:5)
#loc175 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":142:5)
#loc176 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:8)
#loc177 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":123:33)
#loc178 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":124:5)
#loc179 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":132:5)
#loc180 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":134:5)
#loc181 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":125:9)
#loc182 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":131:9)
#loc183 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:30)
#loc184 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":127:45)
#loc185 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:19)
#loc186 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:26)
#loc187 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":129:32)
#loc188 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:31)
#loc189 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":130:13)
#loc190 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":135:9)
#loc191 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":141:9)
#loc192 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:30)
#loc193 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":137:45)
#loc194 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:19)
#loc195 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:26)
#loc196 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":139:32)
#loc197 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:31)
#loc198 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_12.c":140:13)
#loc199 = loc(fused[#loc1, #loc2])
#loc200 = loc(fused[#loc5, #loc6])
#loc201 = loc(fused[#loc7, #loc8])
#loc202 = loc(fused[#loc9, #loc10])
#loc203 = loc(fused[#loc11, #loc12])
#loc204 = loc(fused[#loc13, #loc14])
#loc205 = loc(fused[#loc15, #loc16])
#loc206 = loc(fused[#loc17, #loc18])
#loc207 = loc(fused[#loc19, #loc20])
#loc208 = loc(fused[#loc21, #loc22])
#loc209 = loc(fused[#loc23, #loc24])
#loc210 = loc(fused[#loc25, #loc26])
#loc211 = loc(fused[#loc28, #loc27])
#loc212 = loc(fused[#loc29, #loc30])
#loc213 = loc(fused[#loc31, #loc32])
#loc214 = loc(fused[#loc33, #loc34, #loc35, #loc30])
#loc215 = loc(fused[#loc36, #loc3])
#loc216 = loc(fused[#loc37, #loc4])
#loc217 = loc(fused[#loc38, #loc39])
#loc218 = loc(fused[#loc40, #loc41])
#loc219 = loc(fused[#loc42, #loc43, #loc44, #loc39])
#loc220 = loc(fused[#loc45, #loc46])
#loc221 = loc(fused[#loc54, #loc55])
#loc222 = loc(fused[#loc63, #loc64])
#loc223 = loc(fused[#loc65, #loc66])
#loc224 = loc(fused[#loc67, #loc68])
#loc225 = loc(fused[#loc69, #loc70])
#loc226 = loc(fused[#loc71, #loc72])
#loc227 = loc(fused[#loc77, #loc78])
#loc230 = loc(fused[#loc88, #loc89])
#loc231 = loc(fused[#loc92, #loc93])
#loc232 = loc(fused[#loc96, #loc95])
#loc233 = loc(fused[#loc97, #loc98])
#loc234 = loc(fused[#loc99, #loc100])
#loc235 = loc(fused[#loc101, #loc102])
#loc236 = loc(fused[#loc103, #loc104])
#loc237 = loc(fused[#loc105, #loc106])
#loc238 = loc(fused[#loc107, #loc108])
#loc239 = loc(fused[#loc110, #loc109])
#loc240 = loc(fused[#loc111, #loc112])
#loc241 = loc(fused[#loc113, #loc114])
#loc242 = loc(fused[#loc115, #loc116, #loc117, #loc112])
#loc243 = loc(fused[#loc119, #loc118])
#loc244 = loc(fused[#loc121, #loc120])
#loc245 = loc(fused[#loc122, #loc123])
#loc246 = loc(fused[#loc124, #loc125])
#loc247 = loc(fused[#loc126, #loc127, #loc128, #loc123])
#loc248 = loc(fused[#loc129, #loc130])
#loc249 = loc(fused[#loc138, #loc139])
#loc250 = loc(fused[#loc147, #loc148])
#loc251 = loc(fused[#loc149, #loc150])
#loc252 = loc(fused[#loc151, #loc152])
#loc253 = loc(fused[#loc153, #loc154])
#loc254 = loc(fused[#loc155, #loc156])
#loc255 = loc(fused[#loc157, #loc158])
#loc256 = loc(fused[#loc159, #loc160])
#loc257 = loc(fused[#loc162, #loc161])
#loc258 = loc(fused[#loc163, #loc164])
#loc259 = loc(fused[#loc165, #loc166])
#loc260 = loc(fused[#loc167, #loc168, #loc169, #loc164])
#loc261 = loc(fused[#loc171, #loc170])
#loc262 = loc(fused[#loc173, #loc172])
#loc263 = loc(fused[#loc174, #loc175])
#loc264 = loc(fused[#loc176, #loc177])
#loc265 = loc(fused[#loc178, #loc179, #loc180, #loc175])
#loc266 = loc(fused[#loc181, #loc182])
#loc267 = loc(fused[#loc190, #loc191])
