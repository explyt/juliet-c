!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fputs_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @fputs(!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc63)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"string\00" : !cir.array<!s8i x 7>> : !cir.array<!s8i x 7> {alignment = 1 : i64} loc(#loc3)
  cir.global "private"  external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc64)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc65)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_fputs_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc3)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc3)
        %3 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc64)
        %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc14)
        %5 = cir.call @fputs(%2, %4) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc15)
        cir.break loc(#loc16)
      },
      case (default) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc17)
        cir.break loc(#loc18)
      }
      ] loc(#loc11)
    } loc(#loc67)
    cir.return loc(#loc10)
  } loc(#loc66)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_fputs_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc69)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc70)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc68)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"fputs failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc30)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        cir.break loc(#loc33)
      },
      case (default) {
        cir.scope {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc36)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc36)
          %3 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc64)
          %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc37)
          %5 = cir.call @fputs(%2, %4) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc38)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc39)
          %8 = cir.cmp(eq, %5, %7) : !s32i, !s32i loc(#loc74)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc40)
          cir.if %9 {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc25)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc25)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc42)
          } loc(#loc75)
        } loc(#loc73)
        cir.break loc(#loc43)
      }
      ] loc(#loc28)
    } loc(#loc72)
    cir.return loc(#loc27)
  } loc(#loc71)
  cir.func no_proto internal private  @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc48)
      cir.switch (%0 : !s32i) [
      case (equal, 6) {
        cir.scope {
          %1 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 7>> loc(#loc51)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 7>>), !cir.ptr<!s8i> loc(#loc51)
          %3 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc64)
          %4 = cir.load %3 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc52)
          %5 = cir.call @fputs(%2, %4) : (!cir.ptr<!s8i>, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc53)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %7 = cir.unary(minus, %6) : !s32i, !s32i loc(#loc54)
          %8 = cir.cmp(eq, %5, %7) : !s32i, !s32i loc(#loc79)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc55)
          cir.if %9 {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc57)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc57)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc58)
          } loc(#loc80)
        } loc(#loc78)
        cir.break loc(#loc59)
      },
      case (default) {
        %1 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc60)
        %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc60)
        cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc61)
        cir.break loc(#loc62)
      }
      ] loc(#loc46)
    } loc(#loc77)
    cir.return loc(#loc45)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_fputs_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":717:1)
#loc2 = loc("/usr/include/stdio.h":718:3)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":30:15)
#loc4 = loc("/usr/include/stdio.h":150:1)
#loc5 = loc("/usr/include/stdio.h":150:14)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":34:19)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":24:1)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":37:1)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":26:5)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":36:5)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":26:12)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":30:25)
#loc15 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":30:9)
#loc16 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":31:9)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":34:9)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":35:9)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":81:1)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":85:1)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":83:5)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":83:11)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":84:5)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":84:11)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":56:23)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":44:1)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":60:1)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":46:5)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":59:5)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":46:12)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":50:19)
#loc32 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":50:9)
#loc33 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":51:9)
#loc34 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:9)
#loc35 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":57:9)
#loc36 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:19)
#loc37 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:29)
#loc38 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:13)
#loc39 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:40)
#loc40 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":54:37)
#loc41 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":55:9)
#loc42 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":56:13)
#loc43 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":58:9)
#loc44 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":63:1)
#loc45 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":79:1)
#loc46 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":65:5)
#loc47 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":78:5)
#loc48 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":65:12)
#loc49 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:9)
#loc50 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":72:9)
#loc51 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:19)
#loc52 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:29)
#loc53 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:13)
#loc54 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:40)
#loc55 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":69:37)
#loc56 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":70:9)
#loc57 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":71:23)
#loc58 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":71:13)
#loc59 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":73:9)
#loc60 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":76:19)
#loc61 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":76:9)
#loc62 = loc("CWE252_Unchecked_Return_Value__char_fputs_15.c":77:9)
#loc63 = loc(fused[#loc1, #loc2])
#loc64 = loc(fused[#loc4, #loc5])
#loc65 = loc(fused[#loc6, #loc7])
#loc66 = loc(fused[#loc9, #loc10])
#loc67 = loc(fused[#loc11, #loc12])
#loc68 = loc(fused[#loc19, #loc20])
#loc69 = loc(fused[#loc21, #loc22])
#loc70 = loc(fused[#loc23, #loc24])
#loc71 = loc(fused[#loc26, #loc27])
#loc72 = loc(fused[#loc28, #loc29])
#loc73 = loc(fused[#loc34, #loc35])
#loc74 = loc(fused[#loc38, #loc39])
#loc75 = loc(fused[#loc41, #loc35])
#loc76 = loc(fused[#loc44, #loc45])
#loc77 = loc(fused[#loc46, #loc47])
#loc78 = loc(fused[#loc49, #loc50])
#loc79 = loc(fused[#loc53, #loc54])
#loc80 = loc(fused[#loc56, #loc50])
