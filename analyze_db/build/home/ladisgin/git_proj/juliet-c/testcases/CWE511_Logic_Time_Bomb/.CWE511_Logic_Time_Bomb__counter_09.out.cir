!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_09.c":115:10)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_09.c":115:14)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_09.c":115:20)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_09.c":115:32)
#loc139 = loc(fused[#loc47, #loc48])
#loc140 = loc(fused[#loc49, #loc50])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_09.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant external @GLOBAL_CONST_TRUE : !s32i {alignment = 4 : i64} loc(#loc119)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_09_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc119)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc10)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc125)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc15)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc125)
          cir.scope {
            cir.do {
              cir.scope {
                %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc20)
                %8 = cir.const #cir.int<20000> : !s32i loc(#loc21)
                %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc128)
                cir.if %9 {
                  %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
                  %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
                  %12 = cir.call @unlink(%11) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc23)
                } loc(#loc129)
              } loc(#loc127)
              %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc24)
              %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc25)
              cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc130)
              cir.yield loc(#loc17)
            } while {
              %5 = cir.const #cir.int<1> : !s32i loc(#loc26)
              %6 = cir.const #cir.int<1> : !s32i loc(#loc27)
              %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc131)
              cir.condition(%7) loc(#loc28)
            } loc(#loc126)
          } loc(#loc126)
        } loc(#loc124)
      } loc(#loc123)
    } loc(#loc122)
    cir.return loc(#loc7)
  } loc(#loc121)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_09_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc133)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc132)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc135)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc136)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc140)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc54)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE511_Logic_Time_Bomb__counter_09_good : !cir.ptr<!cir.func<!void ()>> loc(#loc141)
    cir.call @CWE511_Logic_Time_Bomb__counter_09_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE511_Logic_Time_Bomb__counter_09_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call @CWE511_Logic_Time_Bomb__counter_09_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc143)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc143)
    cir.return %17 : !s32i loc(#loc143)
  } loc(#loc138)
  cir.global "private" constant external @GLOBAL_CONST_FALSE : !s32i {alignment = 4 : i64} loc(#loc144)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_FALSE : !cir.ptr<!s32i> loc(#loc144)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc73)
      cir.if %2 {
        %3 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc67)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc67)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc149)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc81)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc149)
          cir.scope {
            cir.do {
              cir.scope {
                %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
                %8 = cir.const #cir.int<20000> : !s32i loc(#loc87)
                %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc152)
                cir.if %9 {
                  %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc68)
                  %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc68)
                  cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc89)
                } loc(#loc153)
              } loc(#loc151)
              %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc91)
              cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc154)
              cir.yield loc(#loc83)
            } while {
              %5 = cir.const #cir.int<1> : !s32i loc(#loc92)
              %6 = cir.const #cir.int<1> : !s32i loc(#loc93)
              %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc155)
              cir.condition(%7) loc(#loc94)
            } loc(#loc150)
          } loc(#loc150)
        } loc(#loc148)
      } loc(#loc147)
    } loc(#loc146)
    cir.return loc(#loc70)
  } loc(#loc145)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @GLOBAL_CONST_TRUE : !cir.ptr<!s32i> loc(#loc119)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc99)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc160)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc104)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc160)
          cir.scope {
            cir.do {
              cir.scope {
                %7 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc109)
                %8 = cir.const #cir.int<20000> : !s32i loc(#loc110)
                %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc163)
                cir.if %9 {
                  %10 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc112)
                  %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc112)
                  cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc113)
                } loc(#loc164)
              } loc(#loc162)
              %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc114)
              %6 = cir.unary(inc, %5) : !s32i, !s32i loc(#loc115)
              cir.store %6, %3 : !s32i, !cir.ptr<!s32i> loc(#loc165)
              cir.yield loc(#loc106)
            } while {
              %5 = cir.const #cir.int<1> : !s32i loc(#loc116)
              %6 = cir.const #cir.int<1> : !s32i loc(#loc117)
              %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc166)
              cir.condition(%7) loc(#loc118)
            } loc(#loc161)
          } loc(#loc161)
        } loc(#loc159)
      } loc(#loc158)
    } loc(#loc157)
    cir.return loc(#loc96)
  } loc(#loc156)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_09.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":109:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":109:18)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_09.c":40:28)
#loc6 = loc("CWE511_Logic_Time_Bomb__counter_09.c":29:1)
#loc7 = loc("CWE511_Logic_Time_Bomb__counter_09.c":47:1)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_09.c":31:5)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_09.c":46:5)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_09.c":31:8)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_09.c":32:5)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_09.c":33:9)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_09.c":45:9)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_09.c":34:13)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_09.c":34:25)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_09.c":35:13)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_09.c":44:25)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_09.c":38:17)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_09.c":41:17)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_09.c":38:21)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_09.c":38:30)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_09.c":39:17)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_09.c":40:21)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_09.c":42:22)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_09.c":42:17)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_09.c":44:19)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_09.c":44:24)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_09.c":44:21)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_09.c":100:1)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_09.c":104:1)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_09.c":102:5)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_09.c":102:11)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_09.c":103:5)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_09.c":103:11)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_09.c":120:15)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_09.c":122:15)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_09.c":125:15)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_09.c":127:15)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_09.c":115:1)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_09.c":130:1)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_09.c":116:1)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_09.c":118:27)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_09.c":118:22)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_09.c":118:5)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_09.c":120:5)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_09.c":121:5)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_09.c":121:45)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_09.c":122:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_09.c":125:5)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_09.c":126:5)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_09.c":126:44)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_09.c":127:5)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_09.c":129:12)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_09.c":129:5)
#loc65 = loc("../../testcasesupport/std_testcase.h":110:1)
#loc66 = loc("../../testcasesupport/std_testcase.h":110:18)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_09.c":59:19)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_09.c":70:31)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_09.c":54:1)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_09.c":77:1)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_09.c":56:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_09.c":76:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_09.c":56:8)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_09.c":57:5)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_09.c":60:5)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_09.c":62:5)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_09.c":59:9)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_09.c":63:9)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_09.c":75:9)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_09.c":64:13)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_09.c":64:25)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_09.c":65:13)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_09.c":74:25)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_09.c":68:17)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_09.c":71:17)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_09.c":68:21)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_09.c":68:30)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_09.c":69:17)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_09.c":70:21)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_09.c":72:22)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_09.c":72:17)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_09.c":74:19)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_09.c":74:24)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_09.c":74:21)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_09.c":80:1)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_09.c":98:1)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_09.c":82:5)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_09.c":97:5)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_09.c":82:8)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_09.c":83:5)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_09.c":84:9)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_09.c":96:9)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_09.c":85:13)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_09.c":85:25)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_09.c":86:13)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_09.c":95:25)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_09.c":89:17)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_09.c":92:17)
#loc109 = loc("CWE511_Logic_Time_Bomb__counter_09.c":89:21)
#loc110 = loc("CWE511_Logic_Time_Bomb__counter_09.c":89:30)
#loc111 = loc("CWE511_Logic_Time_Bomb__counter_09.c":90:17)
#loc112 = loc("CWE511_Logic_Time_Bomb__counter_09.c":91:31)
#loc113 = loc("CWE511_Logic_Time_Bomb__counter_09.c":91:21)
#loc114 = loc("CWE511_Logic_Time_Bomb__counter_09.c":93:22)
#loc115 = loc("CWE511_Logic_Time_Bomb__counter_09.c":93:17)
#loc116 = loc("CWE511_Logic_Time_Bomb__counter_09.c":95:19)
#loc117 = loc("CWE511_Logic_Time_Bomb__counter_09.c":95:24)
#loc118 = loc("CWE511_Logic_Time_Bomb__counter_09.c":95:21)
#loc119 = loc(fused[#loc1, #loc2])
#loc120 = loc(fused[#loc3, #loc4])
#loc121 = loc(fused[#loc6, #loc7])
#loc122 = loc(fused[#loc8, #loc9])
#loc123 = loc(fused[#loc11, #loc9])
#loc124 = loc(fused[#loc12, #loc13])
#loc125 = loc(fused[#loc14, #loc15])
#loc126 = loc(fused[#loc16, #loc17])
#loc127 = loc(fused[#loc18, #loc19])
#loc128 = loc(fused[#loc20, #loc21])
#loc129 = loc(fused[#loc22, #loc19])
#loc130 = loc(fused[#loc25, #loc24])
#loc131 = loc(fused[#loc26, #loc27])
#loc132 = loc(fused[#loc29, #loc30])
#loc133 = loc(fused[#loc31, #loc32])
#loc134 = loc(fused[#loc33, #loc34])
#loc135 = loc(fused[#loc35, #loc36])
#loc136 = loc(fused[#loc37, #loc38])
#loc137 = loc(fused[#loc39, #loc40])
#loc138 = loc(fused[#loc45, #loc46])
#loc141 = loc(fused[#loc56, #loc57])
#loc142 = loc(fused[#loc60, #loc61])
#loc143 = loc(fused[#loc64, #loc63])
#loc144 = loc(fused[#loc65, #loc66])
#loc145 = loc(fused[#loc69, #loc70])
#loc146 = loc(fused[#loc71, #loc72])
#loc147 = loc(fused[#loc74, #loc75, #loc76, #loc72])
#loc148 = loc(fused[#loc78, #loc79])
#loc149 = loc(fused[#loc80, #loc81])
#loc150 = loc(fused[#loc82, #loc83])
#loc151 = loc(fused[#loc84, #loc85])
#loc152 = loc(fused[#loc86, #loc87])
#loc153 = loc(fused[#loc88, #loc85])
#loc154 = loc(fused[#loc91, #loc90])
#loc155 = loc(fused[#loc92, #loc93])
#loc156 = loc(fused[#loc95, #loc96])
#loc157 = loc(fused[#loc97, #loc98])
#loc158 = loc(fused[#loc100, #loc98])
#loc159 = loc(fused[#loc101, #loc102])
#loc160 = loc(fused[#loc103, #loc104])
#loc161 = loc(fused[#loc105, #loc106])
#loc162 = loc(fused[#loc107, #loc108])
#loc163 = loc(fused[#loc109, #loc110])
#loc164 = loc(fused[#loc111, #loc108])
#loc165 = loc(fused[#loc115, #loc114])
#loc166 = loc(fused[#loc116, #loc117])
