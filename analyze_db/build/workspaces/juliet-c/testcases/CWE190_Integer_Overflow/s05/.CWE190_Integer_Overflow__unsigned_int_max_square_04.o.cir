!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc159)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_04_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc7)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc162)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc11)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc13)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc13)
        %7 = cir.const #cir.int<2> : !u32i loc(#loc13)
        %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc13)
        %9 = cir.const #cir.int<1> : !u32i loc(#loc13)
        %10 = cir.binop(add, %8, %9) : !u32i loc(#loc13)
        cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc165)
      } loc(#loc164)
    } loc(#loc163)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc17)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc169)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc22)
          %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc170)
          cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc169)
          %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc24)
          cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc25)
        } loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.return loc(#loc4)
  } loc(#loc160)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_square_04_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    cir.return loc(#loc27)
  } loc(#loc171)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc38)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc39)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc40)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc45)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc179)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc49)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc49)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc51)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc51)
        %7 = cir.const #cir.int<2> : !u32i loc(#loc51)
        %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc51)
        %9 = cir.const #cir.int<1> : !u32i loc(#loc51)
        %10 = cir.binop(add, %8, %9) : !u32i loc(#loc51)
        cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc55)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc55)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc38)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc38)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc59)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc62)
          %6 = cir.cast(integral, %5 : !u32i), !s64i loc(#loc62)
          %7 = cir.cast(integral, %6 : !s64i), !s32i loc(#loc62)
          %8 = cir.abs %7 poison : !s32i loc(#loc63)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc63)
          %10 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc64)
          %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc65)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc65)
          %13 = cir.const #cir.int<2> : !u32i loc(#loc65)
          %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc65)
          %15 = cir.const #cir.int<1> : !u32i loc(#loc65)
          %16 = cir.binop(add, %14, %15) : !u32i loc(#loc65)
          %17 = cir.cast(int_to_float, %16 : !u32i), !cir.double loc(#loc65)
          %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc64)
          %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc64)
          %20 = cir.cmp(lt, %9, %19) : !s64i, !cir.bool loc(#loc186)
          cir.if %20 {
            %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc72)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
            %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc189)
            cir.store %24, %21 : !u32i, !cir.ptr<!u32i> loc(#loc188)
            %25 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc73)
            cir.call @printUnsignedLine(%25) : (!u32i) -> () loc(#loc74)
          } else {
            %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc40)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc40)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc75)
          } loc(#loc187)
        } loc(#loc185)
      } loc(#loc184)
    } loc(#loc183)
    cir.return loc(#loc42)
  } loc(#loc177)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc80)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc80)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc84)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc84)
      cir.if %4 {
        %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc86)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc86)
        %7 = cir.const #cir.int<2> : !u32i loc(#loc86)
        %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc86)
        %9 = cir.const #cir.int<1> : !u32i loc(#loc86)
        %10 = cir.binop(add, %8, %9) : !u32i loc(#loc86)
        cir.store %10, %0 : !u32i, !cir.ptr<!u32i> loc(#loc195)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc90)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc94)
          %6 = cir.cast(integral, %5 : !u32i), !s64i loc(#loc94)
          %7 = cir.cast(integral, %6 : !s64i), !s32i loc(#loc94)
          %8 = cir.abs %7 poison : !s32i loc(#loc95)
          %9 = cir.cast(integral, %8 : !s32i), !s64i loc(#loc95)
          %10 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc96)
          %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
          %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc97)
          %13 = cir.const #cir.int<2> : !u32i loc(#loc97)
          %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc97)
          %15 = cir.const #cir.int<1> : !u32i loc(#loc97)
          %16 = cir.binop(add, %14, %15) : !u32i loc(#loc97)
          %17 = cir.cast(int_to_float, %16 : !u32i), !cir.double loc(#loc97)
          %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc96)
          %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc96)
          %20 = cir.cmp(lt, %9, %19) : !s64i, !cir.bool loc(#loc199)
          cir.if %20 {
            %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
            %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc104)
            %23 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc103)
            %24 = cir.binop(mul, %22, %23) : !u32i loc(#loc202)
            cir.store %24, %21 : !u32i, !cir.ptr<!u32i> loc(#loc201)
            %25 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc105)
            cir.call @printUnsignedLine(%25) : (!u32i) -> () loc(#loc106)
          } else {
            %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc107)
            %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc107)
            cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc108)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc77)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc113)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc113)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc117)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc117)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc121)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc121)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc122)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc123)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc123)
        cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc127)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc127)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc133)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc132)
          %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc213)
          cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc212)
          %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc134)
          cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc135)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc110)
  } loc(#loc203)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc140)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc140)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc144)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc144)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc146)
        %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc146)
        cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc150)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc150)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc156)
          %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc155)
          %8 = cir.binop(mul, %6, %7) : !u32i loc(#loc224)
          cir.store %8, %5 : !u32i, !cir.ptr<!u32i> loc(#loc223)
          %9 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc157)
          cir.call @printUnsignedLine(%9) : (!u32i) -> () loc(#loc158)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc137)
  } loc(#loc214)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_04.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":30:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":47:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":32:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":32:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":33:12)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":33:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":34:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":38:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":34:8)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":35:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":37:16)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":37:9)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":39:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":46:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":39:8)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":40:5)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":41:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":45:9)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":43:13)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":43:42)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":43:35)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":44:31)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":44:13)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":153:1)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":159:1)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":155:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":155:14)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":156:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":156:14)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":157:5)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":157:14)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":158:5)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":158:14)
#loc36 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc37 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":66:19)
#loc39 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":78:23)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":54:1)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":81:1)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":56:5)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":56:18)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":57:12)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":57:5)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":58:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":62:5)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":58:8)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":59:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":61:16)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":61:9)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":63:5)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":80:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":63:8)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":64:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":67:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":69:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":66:9)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:9)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":79:9)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:23)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:13)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:37)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:50)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":71:58)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":72:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":75:9)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":77:9)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":73:13)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":73:42)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":73:35)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":74:31)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":74:13)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":78:13)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":84:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":106:1)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":86:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":86:18)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":87:12)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":87:5)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":88:5)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":92:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":88:8)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":89:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":91:16)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":91:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":93:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":105:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":93:8)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":94:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":104:9)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:23)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:13)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:37)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:50)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":96:58)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":97:9)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":100:9)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":102:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":98:13)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":98:42)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":98:35)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":99:31)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":99:13)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":103:23)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":103:13)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":109:1)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":131:1)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":111:5)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":111:18)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":112:12)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":112:5)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":113:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":122:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":113:8)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":114:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":117:5)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":119:5)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":116:19)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":116:9)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":121:16)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":121:9)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":123:5)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":130:5)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":123:8)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":124:5)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":125:9)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":129:9)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":127:13)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":127:42)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":127:35)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":128:31)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":128:13)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":134:1)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":151:1)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":136:5)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":136:18)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":137:12)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":137:5)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":138:5)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":142:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":138:8)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":139:5)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":141:16)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":141:9)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":143:5)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":150:5)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":143:8)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":144:5)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":145:9)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":149:9)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":147:13)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":147:42)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":147:35)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":148:31)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_04.c":148:13)
#loc159 = loc(fused[#loc1, #loc2])
#loc160 = loc(fused[#loc3, #loc4])
#loc161 = loc(fused[#loc5, #loc6])
#loc162 = loc(fused[#loc8, #loc7])
#loc163 = loc(fused[#loc9, #loc10])
#loc164 = loc(fused[#loc12, #loc10])
#loc165 = loc(fused[#loc14, #loc13])
#loc166 = loc(fused[#loc15, #loc16])
#loc167 = loc(fused[#loc18, #loc16])
#loc168 = loc(fused[#loc19, #loc20])
#loc169 = loc(fused[#loc21, #loc22])
#loc170 = loc(fused[#loc23, #loc22])
#loc171 = loc(fused[#loc26, #loc27])
#loc172 = loc(fused[#loc28, #loc29])
#loc173 = loc(fused[#loc30, #loc31])
#loc174 = loc(fused[#loc32, #loc33])
#loc175 = loc(fused[#loc34, #loc35])
#loc176 = loc(fused[#loc36, #loc37])
#loc177 = loc(fused[#loc41, #loc42])
#loc178 = loc(fused[#loc43, #loc44])
#loc179 = loc(fused[#loc46, #loc45])
#loc180 = loc(fused[#loc47, #loc48])
#loc181 = loc(fused[#loc50, #loc48])
#loc182 = loc(fused[#loc52, #loc51])
#loc183 = loc(fused[#loc53, #loc54])
#loc184 = loc(fused[#loc56, #loc57, #loc58, #loc54])
#loc185 = loc(fused[#loc60, #loc61])
#loc186 = loc(fused[#loc63, #loc66])
#loc187 = loc(fused[#loc67, #loc68, #loc69, #loc61])
#loc188 = loc(fused[#loc70, #loc71])
#loc189 = loc(fused[#loc72, #loc71])
#loc190 = loc(fused[#loc76, #loc77])
#loc191 = loc(fused[#loc78, #loc79])
#loc192 = loc(fused[#loc81, #loc80])
#loc193 = loc(fused[#loc82, #loc83])
#loc194 = loc(fused[#loc85, #loc83])
#loc195 = loc(fused[#loc87, #loc86])
#loc196 = loc(fused[#loc88, #loc89])
#loc197 = loc(fused[#loc91, #loc89])
#loc198 = loc(fused[#loc92, #loc93])
#loc199 = loc(fused[#loc95, #loc98])
#loc200 = loc(fused[#loc99, #loc100, #loc101, #loc93])
#loc201 = loc(fused[#loc102, #loc103])
#loc202 = loc(fused[#loc104, #loc103])
#loc203 = loc(fused[#loc109, #loc110])
#loc204 = loc(fused[#loc111, #loc112])
#loc205 = loc(fused[#loc114, #loc113])
#loc206 = loc(fused[#loc115, #loc116])
#loc207 = loc(fused[#loc118, #loc119, #loc120, #loc116])
#loc208 = loc(fused[#loc124, #loc123])
#loc209 = loc(fused[#loc125, #loc126])
#loc210 = loc(fused[#loc128, #loc126])
#loc211 = loc(fused[#loc129, #loc130])
#loc212 = loc(fused[#loc131, #loc132])
#loc213 = loc(fused[#loc133, #loc132])
#loc214 = loc(fused[#loc136, #loc137])
#loc215 = loc(fused[#loc138, #loc139])
#loc216 = loc(fused[#loc141, #loc140])
#loc217 = loc(fused[#loc142, #loc143])
#loc218 = loc(fused[#loc145, #loc143])
#loc219 = loc(fused[#loc147, #loc146])
#loc220 = loc(fused[#loc148, #loc149])
#loc221 = loc(fused[#loc151, #loc149])
#loc222 = loc(fused[#loc152, #loc153])
#loc223 = loc(fused[#loc154, #loc155])
#loc224 = loc(fused[#loc156, #loc155])
