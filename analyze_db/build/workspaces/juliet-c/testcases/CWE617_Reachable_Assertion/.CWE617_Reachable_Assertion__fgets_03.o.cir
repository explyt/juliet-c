!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc86)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc87)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc88)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc89)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_03.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_03_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc92)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc93)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc20)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.br ^bb1 loc(#loc95)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.int<5> : !s32i loc(#loc24)
    %5 = cir.const #cir.int<5> : !s32i loc(#loc25)
    %6 = cir.cmp(eq, %4, %5) : !s32i, !cir.bool loc(#loc96)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc97)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc98)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc92)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc92)
    cir.br ^bb4 loc(#loc99)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc87)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc100)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc101)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc40)
    cir.store %24, %1 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc12)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc12)
  ^bb13:  // pred: ^bb12
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %28 = cir.const #cir.int<5> : !s32i loc(#loc12)
    %29 = cir.cmp(gt, %27, %28) : !s32i, !cir.bool loc(#loc12)
    cir.brcond %29 ^bb14, ^bb15 loc(#loc12)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16 loc(#loc12)
  ^bb15:  // pred: ^bb13
    %30 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
    %32 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
    %33 = cir.cast(array_to_ptrdecay, %32 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
    %34 = cir.const #cir.int<49> : !s32i loc(#loc12)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc12)
    %36 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
    %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
    cir.call @__assert_fail(%31, %33, %35, %37) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
    cir.br ^bb16 loc(#loc12)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc12)
  ^bb17:  // pred: ^bb16
    cir.br ^bb18 loc(#loc12)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc14)
  } loc(#loc91)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc104)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc105)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    cir.return loc(#loc45)
  } loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"void goodG2B1()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc61)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc62)
    %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    cir.br ^bb4 loc(#loc64)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<5> : !s32i loc(#loc67)
    %9 = cir.const #cir.int<1> : !s32i loc(#loc68)
    %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc67)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc112)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc51)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc51)
  ^bb7:  // pred: ^bb6
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %12 = cir.const #cir.int<5> : !s32i loc(#loc51)
    %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc51)
    cir.brcond %13 ^bb8, ^bb9 loc(#loc51)
  ^bb8:  // pred: ^bb7
    cir.br ^bb10 loc(#loc51)
  ^bb9:  // pred: ^bb7
    %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc51)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc51)
    %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc51)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc51)
    %18 = cir.const #cir.int<73> : !s32i loc(#loc51)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc51)
    %20 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc51)
    cir.br ^bb10 loc(#loc51)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc51)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc51)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc53)
  } loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"void goodG2B2()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc70)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc76)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.br ^bb1 loc(#loc116)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<5> : !s32i loc(#loc80)
    %4 = cir.const #cir.int<5> : !s32i loc(#loc81)
    %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc117)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc118)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<5> : !s32i loc(#loc83)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc83)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.br ^bb3 loc(#loc79)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc79)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc70)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc70)
  ^bb6:  // pred: ^bb5
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %10 = cir.const #cir.int<5> : !s32i loc(#loc70)
    %11 = cir.cmp(gt, %9, %10) : !s32i, !cir.bool loc(#loc70)
    cir.brcond %11 ^bb7, ^bb8 loc(#loc70)
  ^bb7:  // pred: ^bb6
    cir.br ^bb9 loc(#loc70)
  ^bb8:  // pred: ^bb6
    %12 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc70)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc70)
    %14 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc70)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc70)
    %16 = cir.const #cir.int<88> : !s32i loc(#loc70)
    %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc70)
    %18 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc70)
    %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @__assert_fail(%13, %15, %17, %19) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc70)
    cir.br ^bb9 loc(#loc70)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc70)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc70)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc72)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_03.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_03.c":44:27)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_03.c":49:5)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_03.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_03.c":50:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_03.c":35:13)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_03.c":35:49)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_03.c":29:5)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_03.c":29:9)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_03.c":31:13)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_03.c":31:12)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_03.c":31:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_03.c":32:5)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_03.c":47:5)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_03.c":32:8)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_03.c":32:11)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_03.c":33:5)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_03.c":34:9)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_03.c":46:9)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:13)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_03.c":45:13)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:23)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:36)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:53)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:17)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_03.c":37:63)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_03.c":38:13)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_03.c":41:13)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_03.c":43:13)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_03.c":40:29)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_03.c":40:24)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_03.c":40:17)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_03.c":40:40)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_03.c":44:17)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_03.c":91:1)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_03.c":95:1)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_03.c":93:5)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_03.c":93:14)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_03.c":94:5)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_03.c":94:14)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_03.c":65:19)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_03.c":73:5)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_03.c":57:1)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_03.c":74:1)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_03.c":59:5)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_03.c":59:9)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_03.c":61:13)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_03.c":61:12)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_03.c":61:5)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_03.c":62:5)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_03.c":71:5)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_03.c":62:8)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_03.c":62:11)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_03.c":63:5)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_03.c":66:5)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_03.c":68:5)
#loc66 = loc("CWE617_Reachable_Assertion__fgets_03.c":65:9)
#loc67 = loc("CWE617_Reachable_Assertion__fgets_03.c":70:16)
#loc68 = loc("CWE617_Reachable_Assertion__fgets_03.c":70:29)
#loc69 = loc("CWE617_Reachable_Assertion__fgets_03.c":70:9)
#loc70 = loc("CWE617_Reachable_Assertion__fgets_03.c":88:5)
#loc71 = loc("CWE617_Reachable_Assertion__fgets_03.c":77:1)
#loc72 = loc("CWE617_Reachable_Assertion__fgets_03.c":89:1)
#loc73 = loc("CWE617_Reachable_Assertion__fgets_03.c":79:5)
#loc74 = loc("CWE617_Reachable_Assertion__fgets_03.c":79:9)
#loc75 = loc("CWE617_Reachable_Assertion__fgets_03.c":81:13)
#loc76 = loc("CWE617_Reachable_Assertion__fgets_03.c":81:12)
#loc77 = loc("CWE617_Reachable_Assertion__fgets_03.c":81:5)
#loc78 = loc("CWE617_Reachable_Assertion__fgets_03.c":82:5)
#loc79 = loc("CWE617_Reachable_Assertion__fgets_03.c":86:5)
#loc80 = loc("CWE617_Reachable_Assertion__fgets_03.c":82:8)
#loc81 = loc("CWE617_Reachable_Assertion__fgets_03.c":82:11)
#loc82 = loc("CWE617_Reachable_Assertion__fgets_03.c":83:5)
#loc83 = loc("CWE617_Reachable_Assertion__fgets_03.c":85:16)
#loc84 = loc("CWE617_Reachable_Assertion__fgets_03.c":85:29)
#loc85 = loc("CWE617_Reachable_Assertion__fgets_03.c":85:9)
#loc86 = loc(fused[#loc1, #loc2])
#loc87 = loc(fused[#loc3, #loc4])
#loc88 = loc(fused[#loc5, #loc6])
#loc89 = loc(fused[#loc7, #loc8])
#loc90 = loc(fused[#loc10, #loc11])
#loc91 = loc(fused[#loc13, #loc14])
#loc92 = loc(fused[#loc15, #loc16])
#loc93 = loc(fused[#loc17, #loc18])
#loc94 = loc(fused[#loc21, #loc19])
#loc95 = loc(fused[#loc22, #loc23])
#loc96 = loc(fused[#loc24, #loc25])
#loc97 = loc(fused[#loc26, #loc23])
#loc98 = loc(fused[#loc27, #loc28])
#loc99 = loc(fused[#loc29, #loc30])
#loc100 = loc(fused[#loc34, #loc35])
#loc101 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc102 = loc(fused[#loc41, #loc42])
#loc103 = loc(fused[#loc44, #loc45])
#loc104 = loc(fused[#loc46, #loc47])
#loc105 = loc(fused[#loc48, #loc49])
#loc106 = loc(fused[#loc52, #loc53])
#loc107 = loc(fused[#loc54, #loc55])
#loc108 = loc(fused[#loc58, #loc56])
#loc109 = loc(fused[#loc59, #loc60])
#loc110 = loc(fused[#loc61, #loc62])
#loc111 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc112 = loc(fused[#loc69, #loc68])
#loc113 = loc(fused[#loc71, #loc72])
#loc114 = loc(fused[#loc73, #loc74])
#loc115 = loc(fused[#loc77, #loc75])
#loc116 = loc(fused[#loc78, #loc79])
#loc117 = loc(fused[#loc80, #loc81])
#loc118 = loc(fused[#loc82, #loc79])
#loc119 = loc(fused[#loc85, #loc84])
