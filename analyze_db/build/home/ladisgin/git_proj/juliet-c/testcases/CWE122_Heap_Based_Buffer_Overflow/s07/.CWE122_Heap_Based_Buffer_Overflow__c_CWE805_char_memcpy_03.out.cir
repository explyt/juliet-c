!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":119:10)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":119:14)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":119:20)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":119:32)
#loc256 = loc(fused[#loc84, #loc85])
#loc257 = loc(fused[#loc86, #loc87])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc224)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc225)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc226)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc227)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc229)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc230)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc232)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
        %6 = cir.const #cir.int<50> : !s32i loc(#loc21)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc21)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc234)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc235)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc236)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc237)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc239)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc32)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc33)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
          } loc(#loc240)
        } loc(#loc238)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc34)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc34)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc35)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc36)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc37)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc241)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc243)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc42)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc42)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc43)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc44)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc45)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc44)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc44)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc244)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc48)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc48)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc49)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc49)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc51)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc51)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc245)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc52)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc52)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc53)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc53)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc54)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc54)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc246)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc247)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc248)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc59)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc59)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc60)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc61)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc62)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc61)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc63)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc249)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc64)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc66)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc67)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc67)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc66)
    } loc(#loc242)
    cir.return loc(#loc10)
  } loc(#loc228)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc251)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc70)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc252)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc72)
    cir.return loc(#loc69)
  } loc(#loc250)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc253)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc254)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc78)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc79)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc81)
  cir.func @main(%arg0: !s32i loc(fused[#loc84, #loc85]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc86, #loc87])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc256)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc257)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc83)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc88)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc89)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc90)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc90)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc91)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc78)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_good : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_good() : () -> () loc(#loc93)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc79)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc79)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc95)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc80)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc80)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc259)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03_bad() : () -> () loc(#loc97)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc81)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc100)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc260)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc260)
    cir.return %17 : !s32i loc(#loc260)
  } loc(#loc255)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc102)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc107)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %4 = cir.cmp(ne, %2, %3) : !s32i, !cir.bool loc(#loc265)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc116)
      } else {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc117)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc118)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc118)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc267)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc268)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc117)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc269)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc270)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc125)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc126)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc126)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc272)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc129)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc130)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
          } loc(#loc273)
        } loc(#loc271)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc131)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc131)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc132)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc133)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc134)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc274)
      } loc(#loc266)
    } loc(#loc264)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc276)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc139)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc139)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc140)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc141)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc142)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc141)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc141)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc277)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc145)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc145)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc146)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc146)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc148)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc148)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc278)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc149)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc150)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc150)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc151)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc151)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc279)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc280)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc281)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc156)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc156)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc157)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc158)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc159)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc158)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc160)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc282)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc161)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc162)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc163)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc164)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc164)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc163)
    } loc(#loc275)
    cir.return loc(#loc104)
  } loc(#loc261)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc284)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc169)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc173)
      %3 = cir.const #cir.int<5> : !s32i loc(#loc174)
      %4 = cir.cmp(eq, %2, %3) : !s32i, !cir.bool loc(#loc287)
      cir.if %4 {
        %5 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc176)
        %6 = cir.const #cir.int<100> : !s32i loc(#loc177)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc177)
        %8 = cir.const #cir.int<1> : !u64i loc(#loc289)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc290)
        %10 = cir.call @malloc(%9) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc176)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc291)
        cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc292)
        cir.scope {
          %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc184)
          %18 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc185)
          %19 = cir.cast(bitcast, %18 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc185)
          %20 = cir.cmp(eq, %17, %19) : !cir.ptr<!s8i>, !cir.bool loc(#loc294)
          cir.if %20 {
            %21 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc187)
            %22 = cir.const #cir.int<1> : !s32i loc(#loc188)
            %23 = cir.unary(minus, %22) : !s32i, !s32i loc(#loc189)
            cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc187)
          } loc(#loc295)
        } loc(#loc293)
        %12 = cir.const #cir.int<0> : !s32i loc(#loc190)
        %13 = cir.cast(integral, %12 : !s32i), !s8i loc(#loc190)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc191)
        %15 = cir.const #cir.int<0> : !s32i loc(#loc192)
        %16 = cir.ptr_stride(%14 : !cir.ptr<!s8i>, %15 : !s32i), !cir.ptr<!s8i> loc(#loc193)
        cir.store %13, %16 : !s8i, !cir.ptr<!s8i> loc(#loc296)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %2 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc298)
      %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc198)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc198)
      %5 = cir.const #cir.int<67> : !s32i loc(#loc199)
      %6 = cir.const #cir.int<100> : !s32i loc(#loc200)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc201)
      %8 = cir.binop(sub, %6, %7) nsw : !s32i loc(#loc200)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc200)
      cir.libc.memset %9 bytes from %4 set to %5 : !cir.ptr<!void>, !s32i, !u64i loc(#loc299)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc204)
      %11 = cir.cast(integral, %10 : !s32i), !s8i loc(#loc204)
      %12 = cir.const #cir.int<100> : !s32i loc(#loc205)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc206)
      %14 = cir.binop(sub, %12, %13) nsw : !s32i loc(#loc205)
      %15 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc207)
      %16 = cir.ptr_stride(%15 : !cir.ptr<!s8i>, %14 : !s32i), !cir.ptr<!s8i> loc(#loc207)
      cir.store %11, %16 : !s8i, !cir.ptr<!s8i> loc(#loc300)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc208)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc208)
      %19 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc209)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc209)
      %21 = cir.const #cir.int<100> : !s32i loc(#loc210)
      %22 = cir.cast(integral, %21 : !s32i), !u64i loc(#loc210)
      %23 = cir.const #cir.int<1> : !u64i loc(#loc301)
      %24 = cir.binop(mul, %22, %23) : !u64i loc(#loc302)
      cir.libc.memcpy %24 bytes from %20 to %18 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc303)
      %25 = cir.const #cir.int<0> : !s32i loc(#loc215)
      %26 = cir.cast(integral, %25 : !s32i), !s8i loc(#loc215)
      %27 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc216)
      %28 = cir.const #cir.int<100> : !s32i loc(#loc217)
      %29 = cir.const #cir.int<1> : !s32i loc(#loc218)
      %30 = cir.binop(sub, %28, %29) nsw : !s32i loc(#loc217)
      %31 = cir.ptr_stride(%27 : !cir.ptr<!s8i>, %30 : !s32i), !cir.ptr<!s8i> loc(#loc219)
      cir.store %26, %31 : !s8i, !cir.ptr<!s8i> loc(#loc304)
      %32 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc220)
      cir.call @printLine(%32) : (!cir.ptr<!s8i>) -> () loc(#loc221)
      %33 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc222)
      %34 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc223)
      %35 = cir.cast(bitcast, %34 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc223)
      cir.call @free(%35) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc222)
    } loc(#loc297)
    cir.return loc(#loc166)
  } loc(#loc283)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s07/CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":23:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":44:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":25:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":25:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":26:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":27:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":33:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":27:8)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":27:11)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":28:5)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:24)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:34)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:45)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:46)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":30:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:9)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:37)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:13)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:21)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:27)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:28)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:34)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":31:33)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":32:19)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":32:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":32:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":32:15)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":34:5)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":43:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":35:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:16)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:24)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:29)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:33)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":36:34)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":37:25)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":37:16)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":37:20)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":37:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:16)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:22)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:30)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:34)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:45)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":39:46)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":40:23)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":40:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":40:14)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":40:18)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":40:19)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":41:19)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":41:9)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":42:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":42:14)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":103:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":107:1)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":105:5)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":105:14)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":106:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":106:14)
#loc74 = loc("/usr/include/stdlib.h":575:1)
#loc75 = loc("/usr/include/stdlib.h":575:41)
#loc76 = loc("/usr/include/time.h":76:1)
#loc77 = loc("/usr/include/time.h":76:38)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":124:15)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":126:15)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":129:15)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":131:15)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":119:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":134:1)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":120:1)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":122:27)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":122:22)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":122:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":124:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":125:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":125:69)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":126:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":129:5)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":130:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":130:68)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":131:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":133:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":133:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":58:19)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":51:1)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":77:1)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":53:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":53:12)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":54:12)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":54:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":55:5)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":66:5)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":55:8)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":55:11)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":56:5)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":59:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":61:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":58:9)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:24)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:31)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:35)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:46)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:47)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":63:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:37)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:13)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:21)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:27)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:28)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:34)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":64:33)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":65:19)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":65:9)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":65:14)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":65:15)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":67:5)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":76:5)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":68:9)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":68:24)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:16)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:24)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:29)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:33)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":69:34)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":70:25)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":70:16)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":70:20)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":70:9)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:16)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:22)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:30)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:34)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:45)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:9)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":72:46)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":73:23)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":73:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":73:14)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":73:18)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":73:19)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":74:19)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":74:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":75:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":75:14)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":80:1)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":101:1)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":82:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":82:12)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":83:12)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":83:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":84:5)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":90:5)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":84:8)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":84:11)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":85:5)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:24)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:31)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:35)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:46)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:47)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":87:9)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:9)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:37)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:13)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:21)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:27)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:28)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:34)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":88:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":89:19)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":89:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":89:14)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":89:15)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":91:5)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":100:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":92:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":92:24)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:16)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:24)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:29)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:33)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:9)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":93:34)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":94:25)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":94:16)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":94:20)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":94:9)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:16)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:22)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:30)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:34)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:45)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:9)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":96:46)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":97:23)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":97:9)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":97:14)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":97:18)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":97:19)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":98:19)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":98:9)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":99:9)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE805_char_memcpy_03.c":99:14)
#loc224 = loc(fused[#loc1, #loc2])
#loc225 = loc(fused[#loc3, #loc4])
#loc226 = loc(fused[#loc5, #loc6])
#loc227 = loc(fused[#loc7, #loc8])
#loc228 = loc(fused[#loc9, #loc10])
#loc229 = loc(fused[#loc11, #loc12])
#loc230 = loc(fused[#loc14, #loc13])
#loc231 = loc(fused[#loc15, #loc16])
#loc232 = loc(fused[#loc17, #loc18])
#loc233 = loc(fused[#loc19, #loc16])
#loc234 = loc(fused[#loc22, #loc23])
#loc235 = loc(fused[#loc21, #loc23])
#loc236 = loc(fused[#loc20, #loc24])
#loc237 = loc(fused[#loc25, #loc24])
#loc238 = loc(fused[#loc26, #loc27])
#loc239 = loc(fused[#loc28, #loc29])
#loc240 = loc(fused[#loc30, #loc27])
#loc241 = loc(fused[#loc35, #loc34])
#loc242 = loc(fused[#loc38, #loc39])
#loc243 = loc(fused[#loc40, #loc41])
#loc244 = loc(fused[#loc46, #loc47])
#loc245 = loc(fused[#loc51, #loc48])
#loc246 = loc(fused[#loc55, #loc56])
#loc247 = loc(fused[#loc54, #loc56])
#loc248 = loc(fused[#loc57, #loc58])
#loc249 = loc(fused[#loc60, #loc59])
#loc250 = loc(fused[#loc68, #loc69])
#loc251 = loc(fused[#loc70, #loc71])
#loc252 = loc(fused[#loc72, #loc73])
#loc253 = loc(fused[#loc74, #loc75])
#loc254 = loc(fused[#loc76, #loc77])
#loc255 = loc(fused[#loc82, #loc83])
#loc258 = loc(fused[#loc93, #loc94])
#loc259 = loc(fused[#loc97, #loc98])
#loc260 = loc(fused[#loc101, #loc100])
#loc261 = loc(fused[#loc103, #loc104])
#loc262 = loc(fused[#loc105, #loc106])
#loc263 = loc(fused[#loc108, #loc107])
#loc264 = loc(fused[#loc109, #loc110])
#loc265 = loc(fused[#loc111, #loc112])
#loc266 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc267 = loc(fused[#loc119, #loc120])
#loc268 = loc(fused[#loc118, #loc120])
#loc269 = loc(fused[#loc117, #loc121])
#loc270 = loc(fused[#loc122, #loc121])
#loc271 = loc(fused[#loc123, #loc124])
#loc272 = loc(fused[#loc125, #loc126])
#loc273 = loc(fused[#loc127, #loc124])
#loc274 = loc(fused[#loc132, #loc131])
#loc275 = loc(fused[#loc135, #loc136])
#loc276 = loc(fused[#loc137, #loc138])
#loc277 = loc(fused[#loc143, #loc144])
#loc278 = loc(fused[#loc148, #loc145])
#loc279 = loc(fused[#loc152, #loc153])
#loc280 = loc(fused[#loc151, #loc153])
#loc281 = loc(fused[#loc154, #loc155])
#loc282 = loc(fused[#loc157, #loc156])
#loc283 = loc(fused[#loc165, #loc166])
#loc284 = loc(fused[#loc167, #loc168])
#loc285 = loc(fused[#loc170, #loc169])
#loc286 = loc(fused[#loc171, #loc172])
#loc287 = loc(fused[#loc173, #loc174])
#loc288 = loc(fused[#loc175, #loc172])
#loc289 = loc(fused[#loc178, #loc179])
#loc290 = loc(fused[#loc177, #loc179])
#loc291 = loc(fused[#loc176, #loc180])
#loc292 = loc(fused[#loc181, #loc180])
#loc293 = loc(fused[#loc182, #loc183])
#loc294 = loc(fused[#loc184, #loc185])
#loc295 = loc(fused[#loc186, #loc183])
#loc296 = loc(fused[#loc191, #loc190])
#loc297 = loc(fused[#loc194, #loc195])
#loc298 = loc(fused[#loc196, #loc197])
#loc299 = loc(fused[#loc202, #loc203])
#loc300 = loc(fused[#loc207, #loc204])
#loc301 = loc(fused[#loc211, #loc212])
#loc302 = loc(fused[#loc210, #loc212])
#loc303 = loc(fused[#loc213, #loc214])
#loc304 = loc(fused[#loc216, #loc215])
