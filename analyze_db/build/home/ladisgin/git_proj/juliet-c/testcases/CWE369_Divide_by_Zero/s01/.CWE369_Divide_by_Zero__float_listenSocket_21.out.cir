!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc23 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":49:21)
#loc24 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":49:27)
#loc183 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":385:10)
#loc184 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":385:14)
#loc185 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":385:20)
#loc186 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":385:32)
#loc207 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":149:26)
#loc208 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":149:32)
#loc357 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":250:26)
#loc358 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":250:32)
#loc505 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":346:25)
#loc506 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":346:31)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc543 = loc(fused[#loc23, #loc24])
#loc603 = loc(fused[#loc183, #loc184])
#loc604 = loc(fused[#loc185, #loc186])
#loc610 = loc(fused[#loc207, #loc208])
#loc666 = loc(fused[#loc357, #loc358])
#loc722 = loc(fused[#loc505, #loc506])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc532)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc533)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc534)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc535)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc536)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc537)
  cir.func private @atof(!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc538)
  cir.func private @close(!s32i) -> !s32i loc(#loc539)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc540)
  cir.func private @printIntLine(!s32i) loc(#loc541)
  cir.func internal private @badSink(%arg0: !cir.float loc(fused[#loc23, #loc24])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc543)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc25)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc540)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc28)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc547)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc34)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc35)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc35)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc548)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc548)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc547)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc36)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc37)
        } loc(#loc546)
      } loc(#loc545)
    } loc(#loc544)
    cir.return loc(#loc22)
  } loc(#loc542)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc550)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc42)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc551)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc553)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc554)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc555)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc556)
      %9 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc557)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc51)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc51)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc555)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc53)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc53)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc556)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc58)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc59)
          %16 = cir.const #cir.int<6> : !s32i loc(#loc60)
          %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc61)
          cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc559)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc66)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc67)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc67)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc561)
            cir.if %57 {
              cir.break loc(#loc69)
            } loc(#loc562)
          } loc(#loc560)
          %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc563)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc72)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc564)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc565)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc77)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc77)
          %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc566)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc80)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc80)
          %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc81)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc82)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc567)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc84)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc84)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc85)
          %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc568)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc91)
            %55 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc570)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc571)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc571)
            %58 = cir.call @bind(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc96)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc97)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc97)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc572)
            cir.if %61 {
              cir.break loc(#loc99)
            } loc(#loc573)
          } loc(#loc569)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc102)
            %55 = cir.const #cir.int<5> : !s32i loc(#loc103)
            %56 = cir.call @listen(%54, %55) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc104)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc105)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc105)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc575)
            cir.if %59 {
              cir.break loc(#loc107)
            } loc(#loc576)
          } loc(#loc574)
          %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc108)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc109)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc110)
          %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc111)
          cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc577)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc117)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc117)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc579)
            cir.if %57 {
              cir.break loc(#loc119)
            } loc(#loc580)
          } loc(#loc578)
          %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc120)
          %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc121)
          %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc121)
          %39 = cir.const #cir.int<20> : !s32i loc(#loc122)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc123)
          %41 = cir.binop(sub, %39, %40) nsw : !s32i loc(#loc122)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc122)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %44 = cir.call @recv(%36, %38, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc125)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc125)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc581)
          cir.scope {
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc130)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc131)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc131)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc583)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc132)
              cir.yield %59 : !cir.bool loc(#loc132)
            }, false {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc134)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc584)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc132)
                cir.yield %63 : !cir.bool loc(#loc132)
              }, false {
                %63 = cir.const #false loc(#loc132)
                cir.yield %63 : !cir.bool loc(#loc132)
              }) : (!cir.bool) -> !cir.bool loc(#loc132)
              cir.yield %62 : !cir.bool loc(#loc132)
            }) : (!cir.bool) -> !cir.bool loc(#loc132)
            cir.if %58 {
              cir.break loc(#loc136)
            } loc(#loc585)
          } loc(#loc582)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc137)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc137)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc138)
          %49 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc139)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc139)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc586)
          %51 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc140)
          %52 = cir.call @atof(%51) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc141)
          %53 = cir.cast(floating, %52 : !cir.double), !cir.float loc(#loc141)
          cir.store %53, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc587)
          cir.yield loc(#loc57)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc144)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc144)
          cir.condition(%15) loc(#loc144)
        } loc(#loc558)
      } loc(#loc558)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc147)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc148)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc148)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc589)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc150)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc151)
        } loc(#loc590)
      } loc(#loc588)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc154)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc155)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc155)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc592)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc157)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc158)
        } loc(#loc593)
      } loc(#loc591)
    } loc(#loc552)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc159)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc540)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc594)
    %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc161)
    cir.call @badSink(%4) : (!cir.float) -> () loc(#loc162)
    cir.return loc(#loc39)
  } loc(#loc549)
  cir.func no_proto @CWE369_Divide_by_Zero__float_listenSocket_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc596)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc165)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc597)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc167)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc598)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc169)
    cir.return loc(#loc164)
  } loc(#loc595)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc599)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc600)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc601)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc177)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc178)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc179)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc180)
  cir.func @main(%arg0: !s32i loc(fused[#loc183, #loc184]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc185, #loc186])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc603)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc604)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc182)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc187)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc188)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc189)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc189)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc190)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc177)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc177)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %8 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_21_good : !cir.ptr<!cir.func<!void ()>> loc(#loc605)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_21_good() : () -> () loc(#loc192)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc178)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc178)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc179)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc179)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc195)
    %13 = cir.get_global @CWE369_Divide_by_Zero__float_listenSocket_21_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc606)
    cir.call @CWE369_Divide_by_Zero__float_listenSocket_21_bad() : () -> () loc(#loc196)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc180)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc180)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc198)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc199)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc607)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc607)
    cir.return %17 : !s32i loc(#loc607)
  } loc(#loc602)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc608)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc204)
  cir.func internal private @goodB2G1Sink(%arg0: !cir.float loc(fused[#loc207, #loc208])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc610)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc209)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc608)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc212)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc212)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc203)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc203)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc216)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc219)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc219)
          %6 = cir.fabs %5 : !cir.double loc(#loc219)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc220)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc614)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc616)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc227)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc228)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc228)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc617)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc617)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc616)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc229)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc230)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc204)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc204)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc231)
          } loc(#loc615)
        } loc(#loc613)
      } loc(#loc612)
    } loc(#loc611)
    cir.return loc(#loc206)
  } loc(#loc609)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc619)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc236)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc620)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc622)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc623)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc624)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc625)
      %9 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc626)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc245)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc245)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc624)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc247)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc247)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc625)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc252)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc253)
          %16 = cir.const #cir.int<6> : !s32i loc(#loc254)
          %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc255)
          cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc628)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc260)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc261)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc261)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc630)
            cir.if %57 {
              cir.break loc(#loc263)
            } loc(#loc631)
          } loc(#loc629)
          %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc632)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc266)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc633)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc634)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc271)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc271)
          %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc635)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc273)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc273)
          %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc81)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc82)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc636)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc275)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc275)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc276)
          %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc637)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc281)
            %55 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc639)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc640)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc640)
            %58 = cir.call @bind(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc286)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc287)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc287)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc641)
            cir.if %61 {
              cir.break loc(#loc289)
            } loc(#loc642)
          } loc(#loc638)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc292)
            %55 = cir.const #cir.int<5> : !s32i loc(#loc293)
            %56 = cir.call @listen(%54, %55) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc294)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc295)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc295)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc644)
            cir.if %59 {
              cir.break loc(#loc297)
            } loc(#loc645)
          } loc(#loc643)
          %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc298)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc299)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc300)
          %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc301)
          cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc646)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc306)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc307)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc307)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc648)
            cir.if %57 {
              cir.break loc(#loc309)
            } loc(#loc649)
          } loc(#loc647)
          %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc310)
          %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc311)
          %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc311)
          %39 = cir.const #cir.int<20> : !s32i loc(#loc312)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc313)
          %41 = cir.binop(sub, %39, %40) nsw : !s32i loc(#loc312)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc312)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc314)
          %44 = cir.call @recv(%36, %38, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc315)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc315)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc650)
          cir.scope {
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc320)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc321)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc321)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc652)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc322)
              cir.yield %59 : !cir.bool loc(#loc322)
            }, false {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc323)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc324)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc653)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc322)
                cir.yield %63 : !cir.bool loc(#loc322)
              }, false {
                %63 = cir.const #false loc(#loc322)
                cir.yield %63 : !cir.bool loc(#loc322)
              }) : (!cir.bool) -> !cir.bool loc(#loc322)
              cir.yield %62 : !cir.bool loc(#loc322)
            }) : (!cir.bool) -> !cir.bool loc(#loc322)
            cir.if %58 {
              cir.break loc(#loc326)
            } loc(#loc654)
          } loc(#loc651)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc327)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc327)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc328)
          %49 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc329)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc329)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc655)
          %51 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc330)
          %52 = cir.call @atof(%51) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc331)
          %53 = cir.cast(floating, %52 : !cir.double), !cir.float loc(#loc331)
          cir.store %53, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc656)
          cir.yield loc(#loc251)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc334)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc334)
          cir.condition(%15) loc(#loc334)
        } loc(#loc627)
      } loc(#loc627)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc337)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc338)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc338)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc658)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc340)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc341)
        } loc(#loc659)
      } loc(#loc657)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc344)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc345)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc345)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc661)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc347)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc348)
        } loc(#loc662)
      } loc(#loc660)
    } loc(#loc621)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc349)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc608)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc663)
    %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc351)
    cir.call @goodB2G1Sink(%4) : (!cir.float) -> () loc(#loc352)
    cir.return loc(#loc233)
  } loc(#loc618)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc664)
  cir.func internal private @goodB2G2Sink(%arg0: !cir.float loc(fused[#loc357, #loc358])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc666)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc359)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc664)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc362)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc362)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc366)
          %5 = cir.cast(floating, %4 : !cir.float), !cir.double loc(#loc366)
          %6 = cir.fabs %5 : !cir.double loc(#loc366)
          %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc367)
          %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc670)
          cir.if %8 {
            %9 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc672)
            %10 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc374)
            %11 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc375)
            %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc375)
            %13 = cir.binop(div, %10, %12) : !cir.double loc(#loc673)
            %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc673)
            cir.store %14, %9 : !s32i, !cir.ptr<!s32i> loc(#loc672)
            %15 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc376)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc377)
          } else {
            %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc378)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc378)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc379)
          } loc(#loc671)
        } loc(#loc669)
      } loc(#loc668)
    } loc(#loc667)
    cir.return loc(#loc356)
  } loc(#loc665)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc675)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc384)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc676)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc678)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc679)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc680)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc681)
      %9 = cir.alloca !cir.array<!s8i x 20>, !cir.ptr<!cir.array<!s8i x 20>>, ["inputBuffer"] {alignment = 16 : i64} loc(#loc682)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc393)
      %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc393)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc680)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc395)
      %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc395)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc681)
      cir.scope {
        cir.do {
          %14 = cir.const #cir.int<2> : !s32i loc(#loc400)
          %15 = cir.const #cir.int<1> : !s32i loc(#loc401)
          %16 = cir.const #cir.int<6> : !s32i loc(#loc402)
          %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc403)
          cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc684)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc408)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc409)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc409)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc686)
            cir.if %57 {
              cir.break loc(#loc411)
            } loc(#loc687)
          } loc(#loc685)
          %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc688)
          %19 = cir.const #cir.int<0> : !s32i loc(#loc414)
          %20 = cir.const #cir.int<16> : !u64i loc(#loc689)
          cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc690)
          %21 = cir.const #cir.int<2> : !s32i loc(#loc419)
          %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc419)
          %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc78)
          cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc691)
          %24 = cir.const #cir.int<0> : !s32i loc(#loc421)
          %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc421)
          %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc81)
          %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc82)
          cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc692)
          %28 = cir.const #cir.int<27015> : !s32i loc(#loc423)
          %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc423)
          %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc424)
          %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc86)
          cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc693)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc429)
            %55 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc695)
            %56 = cir.const #cir.int<16> : !u64i loc(#loc696)
            %57 = cir.cast(integral, %56 : !u64i), !u32i loc(#loc696)
            %58 = cir.call @bind(%54, %55, %57) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc434)
            %59 = cir.const #cir.int<1> : !s32i loc(#loc435)
            %60 = cir.unary(minus, %59) : !s32i, !s32i loc(#loc435)
            %61 = cir.cmp(eq, %58, %60) : !s32i, !cir.bool loc(#loc697)
            cir.if %61 {
              cir.break loc(#loc437)
            } loc(#loc698)
          } loc(#loc694)
          cir.scope {
            %54 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc440)
            %55 = cir.const #cir.int<5> : !s32i loc(#loc441)
            %56 = cir.call @listen(%54, %55) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc442)
            %57 = cir.const #cir.int<1> : !s32i loc(#loc443)
            %58 = cir.unary(minus, %57) : !s32i, !s32i loc(#loc443)
            %59 = cir.cmp(eq, %56, %58) : !s32i, !cir.bool loc(#loc700)
            cir.if %59 {
              cir.break loc(#loc445)
            } loc(#loc701)
          } loc(#loc699)
          %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc446)
          %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc447)
          %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc448)
          %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc449)
          cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc702)
          cir.scope {
            %54 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc454)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc455)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc455)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc704)
            cir.if %57 {
              cir.break loc(#loc457)
            } loc(#loc705)
          } loc(#loc703)
          %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc458)
          %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc459)
          %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc459)
          %39 = cir.const #cir.int<20> : !s32i loc(#loc460)
          %40 = cir.const #cir.int<1> : !s32i loc(#loc461)
          %41 = cir.binop(sub, %39, %40) nsw : !s32i loc(#loc460)
          %42 = cir.cast(integral, %41 : !s32i), !u64i loc(#loc460)
          %43 = cir.const #cir.int<0> : !s32i loc(#loc462)
          %44 = cir.call @recv(%36, %38, %42, %43) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc463)
          %45 = cir.cast(integral, %44 : !s64i), !s32i loc(#loc463)
          cir.store %45, %5 : !s32i, !cir.ptr<!s32i> loc(#loc706)
          cir.scope {
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc468)
            %55 = cir.const #cir.int<1> : !s32i loc(#loc469)
            %56 = cir.unary(minus, %55) : !s32i, !s32i loc(#loc469)
            %57 = cir.cmp(eq, %54, %56) : !s32i, !cir.bool loc(#loc708)
            %58 = cir.ternary(%57, true {
              %59 = cir.const #true loc(#loc470)
              cir.yield %59 : !cir.bool loc(#loc470)
            }, false {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc471)
              %60 = cir.const #cir.int<0> : !s32i loc(#loc472)
              %61 = cir.cmp(eq, %59, %60) : !s32i, !cir.bool loc(#loc709)
              %62 = cir.ternary(%61, true {
                %63 = cir.const #true loc(#loc470)
                cir.yield %63 : !cir.bool loc(#loc470)
              }, false {
                %63 = cir.const #false loc(#loc470)
                cir.yield %63 : !cir.bool loc(#loc470)
              }) : (!cir.bool) -> !cir.bool loc(#loc470)
              cir.yield %62 : !cir.bool loc(#loc470)
            }) : (!cir.bool) -> !cir.bool loc(#loc470)
            cir.if %58 {
              cir.break loc(#loc474)
            } loc(#loc710)
          } loc(#loc707)
          %46 = cir.const #cir.int<0> : !s32i loc(#loc475)
          %47 = cir.cast(integral, %46 : !s32i), !s8i loc(#loc475)
          %48 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc476)
          %49 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc477)
          %50 = cir.ptr_stride(%49 : !cir.ptr<!s8i>, %48 : !s32i), !cir.ptr<!s8i> loc(#loc477)
          cir.store %47, %50 : !s8i, !cir.ptr<!s8i> loc(#loc711)
          %51 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc478)
          %52 = cir.call @atof(%51) : (!cir.ptr<!s8i>) -> !cir.double extra(#fn_attr) loc(#loc479)
          %53 = cir.cast(floating, %52 : !cir.double), !cir.float loc(#loc479)
          cir.store %53, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc712)
          cir.yield loc(#loc399)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc482)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc482)
          cir.condition(%15) loc(#loc482)
        } loc(#loc683)
      } loc(#loc683)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc485)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc486)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc486)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc714)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc488)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc489)
        } loc(#loc715)
      } loc(#loc713)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc492)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc493)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc493)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc717)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc495)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc496)
        } loc(#loc718)
      } loc(#loc716)
    } loc(#loc677)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc497)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc664)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc719)
    %4 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc499)
    cir.call @goodB2G2Sink(%4) : (!cir.float) -> () loc(#loc500)
    cir.return loc(#loc381)
  } loc(#loc674)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc720)
  cir.func internal private @goodG2BSink(%arg0: !cir.float loc(fused[#loc505, #loc506])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data", init] {alignment = 4 : i64} loc(#loc722)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc507)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc720)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc510)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc510)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc726)
          %5 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc516)
          %6 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc517)
          %7 = cir.cast(floating, %6 : !cir.float), !cir.double loc(#loc517)
          %8 = cir.binop(div, %5, %7) : !cir.double loc(#loc727)
          %9 = cir.cast(float_to_int, %8 : !cir.double), !s32i loc(#loc727)
          cir.store %9, %4 : !s32i, !cir.ptr<!s32i> loc(#loc726)
          %10 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc518)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc519)
        } loc(#loc725)
      } loc(#loc724)
    } loc(#loc723)
    cir.return loc(#loc504)
  } loc(#loc721)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["data"] {alignment = 4 : i64} loc(#loc729)
    %1 = cir.const #cir.fp<0.000000e+00> : !cir.float loc(#loc524)
    cir.store %1, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc730)
    %2 = cir.const #cir.fp<2.000000e+00> : !cir.float loc(#loc526)
    cir.store %2, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc731)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc528)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc720)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc732)
    %5 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc530)
    cir.call @goodG2BSink(%5) : (!cir.float) -> () loc(#loc531)
    cir.return loc(#loc521)
  } loc(#loc728)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_listenSocket_21.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":102:1)
#loc14 = loc("/usr/include/stdlib.h":103:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":47:1)
#loc18 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":47:24)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":49:1)
#loc22 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":59:1)
#loc25 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":50:1)
#loc26 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":51:5)
#loc27 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":58:5)
#loc28 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":51:8)
#loc29 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":52:5)
#loc30 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":53:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":57:9)
#loc32 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":55:13)
#loc33 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":55:44)
#loc34 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":55:32)
#loc35 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":55:40)
#loc36 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":56:26)
#loc37 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":56:13)
#loc38 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":61:1)
#loc39 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":137:1)
#loc40 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":63:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":63:11)
#loc42 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":65:12)
#loc43 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":65:5)
#loc44 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":66:5)
#loc45 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":134:5)
#loc46 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":71:9)
#loc47 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":71:13)
#loc48 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":72:9)
#loc49 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":72:28)
#loc50 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":73:9)
#loc51 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":73:31)
#loc52 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":74:9)
#loc53 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":74:31)
#loc54 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":75:9)
#loc55 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":75:41)
#loc56 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":76:9)
#loc57 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":119:17)
#loc58 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:35)
#loc59 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:44)
#loc60 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:57)
#loc61 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:28)
#loc62 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:13)
#loc63 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":85:68)
#loc64 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":86:13)
#loc65 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":89:13)
#loc66 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":86:17)
#loc67 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":86:33)
#loc68 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":87:13)
#loc69 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":88:17)
#loc70 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:20)
#loc71 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:21)
#loc72 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:30)
#loc73 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:33)
#loc74 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:47)
#loc75 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:13)
#loc76 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":90:48)
#loc77 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":91:34)
#loc78 = loc("/usr/include/netinet/in.h":249:5)
#loc79 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":91:13)
#loc80 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":92:39)
#loc81 = loc("/usr/include/netinet/in.h":251:20)
#loc82 = loc("/usr/include/netinet/in.h":33:15)
#loc83 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":92:13)
#loc84 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":93:38)
#loc85 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":93:32)
#loc86 = loc("/usr/include/netinet/in.h":250:15)
#loc87 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":93:13)
#loc88 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":93:46)
#loc89 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:13)
#loc90 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":97:13)
#loc91 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:22)
#loc92 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:54)
#loc93 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:55)
#loc94 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:64)
#loc95 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:78)
#loc96 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:17)
#loc97 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":94:84)
#loc98 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":95:13)
#loc99 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":96:17)
#loc100 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":98:13)
#loc101 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":101:13)
#loc102 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":98:24)
#loc103 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":98:38)
#loc104 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":98:17)
#loc105 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":98:57)
#loc106 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":99:13)
#loc107 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":100:17)
#loc108 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:35)
#loc109 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:49)
#loc110 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:55)
#loc111 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:28)
#loc112 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:13)
#loc113 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":102:59)
#loc114 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":103:13)
#loc115 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":106:13)
#loc116 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":103:17)
#loc117 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":103:33)
#loc118 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":104:13)
#loc119 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":105:17)
#loc120 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:31)
#loc121 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:45)
#loc122 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:58)
#loc123 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:76)
#loc124 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:79)
#loc125 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:26)
#loc126 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:13)
#loc127 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":109:80)
#loc128 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:13)
#loc129 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":113:13)
#loc130 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:17)
#loc131 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:31)
#loc132 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:44)
#loc133 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:47)
#loc134 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":110:61)
#loc135 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":111:13)
#loc136 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":112:17)
#loc137 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":115:39)
#loc138 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":115:25)
#loc139 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":115:13)
#loc140 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":117:32)
#loc141 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":117:27)
#loc142 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":117:13)
#loc143 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":117:43)
#loc144 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":119:16)
#loc145 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":120:9)
#loc146 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":123:9)
#loc147 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":120:13)
#loc148 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":120:29)
#loc149 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":121:9)
#loc150 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":122:26)
#loc151 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":122:13)
#loc152 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":124:9)
#loc153 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":127:9)
#loc154 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":124:13)
#loc155 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":124:29)
#loc156 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":125:9)
#loc157 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":126:26)
#loc158 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":126:13)
#loc159 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":135:17)
#loc160 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":135:5)
#loc161 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":136:13)
#loc162 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":136:5)
#loc163 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":369:1)
#loc164 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":374:1)
#loc165 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":371:5)
#loc166 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":371:14)
#loc167 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":372:5)
#loc168 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":372:14)
#loc169 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":373:5)
#loc170 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":373:13)
#loc171 = loc("/usr/include/stdlib.h":575:1)
#loc172 = loc("/usr/include/stdlib.h":575:41)
#loc173 = loc("/usr/include/time.h":76:1)
#loc174 = loc("/usr/include/time.h":76:38)
#loc175 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc176 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc177 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":390:15)
#loc178 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":392:15)
#loc179 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":395:15)
#loc180 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":397:15)
#loc181 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":385:1)
#loc182 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":400:1)
#loc187 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":386:1)
#loc188 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":388:27)
#loc189 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":388:22)
#loc190 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":388:5)
#loc191 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":390:5)
#loc192 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":391:5)
#loc193 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":391:55)
#loc194 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":392:5)
#loc195 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":395:5)
#loc196 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":396:5)
#loc197 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":396:54)
#loc198 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":397:5)
#loc199 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":399:12)
#loc200 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":399:5)
#loc201 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":144:1)
#loc202 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":144:29)
#loc203 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":154:19)
#loc204 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":166:23)
#loc205 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":149:1)
#loc206 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":169:1)
#loc209 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":150:1)
#loc210 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":151:5)
#loc211 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":168:5)
#loc212 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":151:8)
#loc213 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":152:5)
#loc214 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":155:5)
#loc215 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":157:5)
#loc216 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":154:9)
#loc217 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":159:9)
#loc218 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":167:9)
#loc219 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":159:17)
#loc220 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":159:25)
#loc221 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":159:12)
#loc222 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":160:9)
#loc223 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":163:9)
#loc224 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":165:9)
#loc225 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":161:13)
#loc226 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":161:44)
#loc227 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":161:32)
#loc228 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":161:40)
#loc229 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":162:26)
#loc230 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":162:13)
#loc231 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":166:13)
#loc232 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":171:1)
#loc233 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":247:1)
#loc234 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":173:5)
#loc235 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":173:11)
#loc236 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":175:12)
#loc237 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":175:5)
#loc238 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":176:5)
#loc239 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":244:5)
#loc240 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":181:9)
#loc241 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":181:13)
#loc242 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":182:9)
#loc243 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":182:28)
#loc244 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":183:9)
#loc245 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":183:31)
#loc246 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":184:9)
#loc247 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":184:31)
#loc248 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":185:9)
#loc249 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":185:41)
#loc250 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":186:9)
#loc251 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":229:17)
#loc252 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:35)
#loc253 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:44)
#loc254 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:57)
#loc255 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:28)
#loc256 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:13)
#loc257 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":195:68)
#loc258 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":196:13)
#loc259 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":199:13)
#loc260 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":196:17)
#loc261 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":196:33)
#loc262 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":197:13)
#loc263 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":198:17)
#loc264 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:20)
#loc265 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:21)
#loc266 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:30)
#loc267 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:33)
#loc268 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:47)
#loc269 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:13)
#loc270 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":200:48)
#loc271 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":201:34)
#loc272 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":201:13)
#loc273 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":202:39)
#loc274 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":202:13)
#loc275 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":203:38)
#loc276 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":203:32)
#loc277 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":203:13)
#loc278 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":203:46)
#loc279 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:13)
#loc280 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":207:13)
#loc281 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:22)
#loc282 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:54)
#loc283 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:55)
#loc284 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:64)
#loc285 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:78)
#loc286 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:17)
#loc287 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":204:84)
#loc288 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":205:13)
#loc289 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":206:17)
#loc290 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":208:13)
#loc291 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":211:13)
#loc292 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":208:24)
#loc293 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":208:38)
#loc294 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":208:17)
#loc295 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":208:57)
#loc296 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":209:13)
#loc297 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":210:17)
#loc298 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:35)
#loc299 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:49)
#loc300 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:55)
#loc301 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:28)
#loc302 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:13)
#loc303 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":212:59)
#loc304 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":213:13)
#loc305 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":216:13)
#loc306 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":213:17)
#loc307 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":213:33)
#loc308 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":214:13)
#loc309 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":215:17)
#loc310 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:31)
#loc311 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:45)
#loc312 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:58)
#loc313 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:76)
#loc314 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:79)
#loc315 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:26)
#loc316 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:13)
#loc317 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":219:80)
#loc318 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:13)
#loc319 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":223:13)
#loc320 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:17)
#loc321 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:31)
#loc322 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:44)
#loc323 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:47)
#loc324 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":220:61)
#loc325 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":221:13)
#loc326 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":222:17)
#loc327 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":225:39)
#loc328 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":225:25)
#loc329 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":225:13)
#loc330 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":227:32)
#loc331 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":227:27)
#loc332 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":227:13)
#loc333 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":227:43)
#loc334 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":229:16)
#loc335 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":230:9)
#loc336 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":233:9)
#loc337 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":230:13)
#loc338 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":230:29)
#loc339 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":231:9)
#loc340 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":232:26)
#loc341 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":232:13)
#loc342 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":234:9)
#loc343 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":237:9)
#loc344 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":234:13)
#loc345 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":234:29)
#loc346 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":235:9)
#loc347 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":236:26)
#loc348 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":236:13)
#loc349 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":245:22)
#loc350 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":245:5)
#loc351 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":246:18)
#loc352 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":246:5)
#loc353 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":145:1)
#loc354 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":145:29)
#loc355 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":250:1)
#loc356 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":265:1)
#loc359 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":251:1)
#loc360 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":252:5)
#loc361 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":264:5)
#loc362 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":252:8)
#loc363 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":253:5)
#loc364 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":255:9)
#loc365 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":263:9)
#loc366 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":255:17)
#loc367 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":255:25)
#loc368 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":255:12)
#loc369 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":256:9)
#loc370 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":259:9)
#loc371 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":261:9)
#loc372 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":257:13)
#loc373 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":257:44)
#loc374 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":257:32)
#loc375 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":257:40)
#loc376 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":258:26)
#loc377 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":258:13)
#loc378 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":262:23)
#loc379 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":262:13)
#loc380 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":267:1)
#loc381 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":343:1)
#loc382 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":269:5)
#loc383 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":269:11)
#loc384 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":271:12)
#loc385 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":271:5)
#loc386 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":272:5)
#loc387 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":340:5)
#loc388 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":277:9)
#loc389 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":277:13)
#loc390 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":278:9)
#loc391 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":278:28)
#loc392 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":279:9)
#loc393 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":279:31)
#loc394 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":280:9)
#loc395 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":280:31)
#loc396 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":281:9)
#loc397 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":281:41)
#loc398 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":282:9)
#loc399 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":325:17)
#loc400 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:35)
#loc401 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:44)
#loc402 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:57)
#loc403 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:28)
#loc404 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:13)
#loc405 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":291:68)
#loc406 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":292:13)
#loc407 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":295:13)
#loc408 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":292:17)
#loc409 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":292:33)
#loc410 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":293:13)
#loc411 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":294:17)
#loc412 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:20)
#loc413 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:21)
#loc414 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:30)
#loc415 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:33)
#loc416 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:47)
#loc417 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:13)
#loc418 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":296:48)
#loc419 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":297:34)
#loc420 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":297:13)
#loc421 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":298:39)
#loc422 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":298:13)
#loc423 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":299:38)
#loc424 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":299:32)
#loc425 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":299:13)
#loc426 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":299:46)
#loc427 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:13)
#loc428 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":303:13)
#loc429 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:22)
#loc430 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:54)
#loc431 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:55)
#loc432 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:64)
#loc433 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:78)
#loc434 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:17)
#loc435 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":300:84)
#loc436 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":301:13)
#loc437 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":302:17)
#loc438 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":304:13)
#loc439 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":307:13)
#loc440 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":304:24)
#loc441 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":304:38)
#loc442 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":304:17)
#loc443 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":304:57)
#loc444 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":305:13)
#loc445 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":306:17)
#loc446 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:35)
#loc447 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:49)
#loc448 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:55)
#loc449 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:28)
#loc450 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:13)
#loc451 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":308:59)
#loc452 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":309:13)
#loc453 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":312:13)
#loc454 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":309:17)
#loc455 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":309:33)
#loc456 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":310:13)
#loc457 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":311:17)
#loc458 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:31)
#loc459 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:45)
#loc460 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:58)
#loc461 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:76)
#loc462 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:79)
#loc463 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:26)
#loc464 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:13)
#loc465 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":315:80)
#loc466 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:13)
#loc467 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":319:13)
#loc468 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:17)
#loc469 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:31)
#loc470 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:44)
#loc471 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:47)
#loc472 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":316:61)
#loc473 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":317:13)
#loc474 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":318:17)
#loc475 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":321:39)
#loc476 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":321:25)
#loc477 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":321:13)
#loc478 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":323:32)
#loc479 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":323:27)
#loc480 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":323:13)
#loc481 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":323:43)
#loc482 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":325:16)
#loc483 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":326:9)
#loc484 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":329:9)
#loc485 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":326:13)
#loc486 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":326:29)
#loc487 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":327:9)
#loc488 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":328:26)
#loc489 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":328:13)
#loc490 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":330:9)
#loc491 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":333:9)
#loc492 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":330:13)
#loc493 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":330:29)
#loc494 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":331:9)
#loc495 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":332:26)
#loc496 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":332:13)
#loc497 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":341:22)
#loc498 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":341:5)
#loc499 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":342:18)
#loc500 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":342:5)
#loc501 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":146:1)
#loc502 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":146:28)
#loc503 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":346:1)
#loc504 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":356:1)
#loc507 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":347:1)
#loc508 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":348:5)
#loc509 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":355:5)
#loc510 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":348:8)
#loc511 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":349:5)
#loc512 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":350:9)
#loc513 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":354:9)
#loc514 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":352:13)
#loc515 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":352:44)
#loc516 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":352:32)
#loc517 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":352:40)
#loc518 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":353:26)
#loc519 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":353:13)
#loc520 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":358:1)
#loc521 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":367:1)
#loc522 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":360:5)
#loc523 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":360:11)
#loc524 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":362:12)
#loc525 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":362:5)
#loc526 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":364:12)
#loc527 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":364:5)
#loc528 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":365:21)
#loc529 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":365:5)
#loc530 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":366:17)
#loc531 = loc("CWE369_Divide_by_Zero__float_listenSocket_21.c":366:5)
#loc532 = loc(fused[#loc1, #loc2])
#loc533 = loc(fused[#loc3, #loc4])
#loc534 = loc(fused[#loc5, #loc6])
#loc535 = loc(fused[#loc7, #loc8])
#loc536 = loc(fused[#loc9, #loc10])
#loc537 = loc(fused[#loc11, #loc12])
#loc538 = loc(fused[#loc13, #loc14])
#loc539 = loc(fused[#loc15, #loc16])
#loc540 = loc(fused[#loc17, #loc18])
#loc541 = loc(fused[#loc19, #loc20])
#loc542 = loc(fused[#loc21, #loc22])
#loc544 = loc(fused[#loc26, #loc27])
#loc545 = loc(fused[#loc29, #loc27])
#loc546 = loc(fused[#loc30, #loc31])
#loc547 = loc(fused[#loc32, #loc33])
#loc548 = loc(fused[#loc34, #loc35])
#loc549 = loc(fused[#loc38, #loc39])
#loc550 = loc(fused[#loc40, #loc41])
#loc551 = loc(fused[#loc43, #loc42])
#loc552 = loc(fused[#loc44, #loc45])
#loc553 = loc(fused[#loc46, #loc47])
#loc554 = loc(fused[#loc48, #loc49])
#loc555 = loc(fused[#loc50, #loc51])
#loc556 = loc(fused[#loc52, #loc53])
#loc557 = loc(fused[#loc54, #loc55])
#loc558 = loc(fused[#loc56, #loc57])
#loc559 = loc(fused[#loc62, #loc63])
#loc560 = loc(fused[#loc64, #loc65])
#loc561 = loc(fused[#loc66, #loc67])
#loc562 = loc(fused[#loc68, #loc65])
#loc563 = loc(fused[#loc70, #loc71])
#loc564 = loc(fused[#loc73, #loc74])
#loc565 = loc(fused[#loc75, #loc76])
#loc566 = loc(fused[#loc79, #loc77])
#loc567 = loc(fused[#loc83, #loc80])
#loc568 = loc(fused[#loc87, #loc88])
#loc569 = loc(fused[#loc89, #loc90])
#loc570 = loc(fused[#loc92, #loc93])
#loc571 = loc(fused[#loc94, #loc95])
#loc572 = loc(fused[#loc96, #loc97])
#loc573 = loc(fused[#loc98, #loc90])
#loc574 = loc(fused[#loc100, #loc101])
#loc575 = loc(fused[#loc104, #loc105])
#loc576 = loc(fused[#loc106, #loc101])
#loc577 = loc(fused[#loc112, #loc113])
#loc578 = loc(fused[#loc114, #loc115])
#loc579 = loc(fused[#loc116, #loc117])
#loc580 = loc(fused[#loc118, #loc115])
#loc581 = loc(fused[#loc126, #loc127])
#loc582 = loc(fused[#loc128, #loc129])
#loc583 = loc(fused[#loc130, #loc131])
#loc584 = loc(fused[#loc133, #loc134])
#loc585 = loc(fused[#loc135, #loc129])
#loc586 = loc(fused[#loc139, #loc137])
#loc587 = loc(fused[#loc142, #loc143])
#loc588 = loc(fused[#loc145, #loc146])
#loc589 = loc(fused[#loc147, #loc148])
#loc590 = loc(fused[#loc149, #loc146])
#loc591 = loc(fused[#loc152, #loc153])
#loc592 = loc(fused[#loc154, #loc155])
#loc593 = loc(fused[#loc156, #loc153])
#loc594 = loc(fused[#loc160, #loc159])
#loc595 = loc(fused[#loc163, #loc164])
#loc596 = loc(fused[#loc165, #loc166])
#loc597 = loc(fused[#loc167, #loc168])
#loc598 = loc(fused[#loc169, #loc170])
#loc599 = loc(fused[#loc171, #loc172])
#loc600 = loc(fused[#loc173, #loc174])
#loc601 = loc(fused[#loc175, #loc176])
#loc602 = loc(fused[#loc181, #loc182])
#loc605 = loc(fused[#loc192, #loc193])
#loc606 = loc(fused[#loc196, #loc197])
#loc607 = loc(fused[#loc200, #loc199])
#loc608 = loc(fused[#loc201, #loc202])
#loc609 = loc(fused[#loc205, #loc206])
#loc611 = loc(fused[#loc210, #loc211])
#loc612 = loc(fused[#loc213, #loc214, #loc215, #loc211])
#loc613 = loc(fused[#loc217, #loc218])
#loc614 = loc(fused[#loc221, #loc220])
#loc615 = loc(fused[#loc222, #loc223, #loc224, #loc218])
#loc616 = loc(fused[#loc225, #loc226])
#loc617 = loc(fused[#loc227, #loc228])
#loc618 = loc(fused[#loc232, #loc233])
#loc619 = loc(fused[#loc234, #loc235])
#loc620 = loc(fused[#loc237, #loc236])
#loc621 = loc(fused[#loc238, #loc239])
#loc622 = loc(fused[#loc240, #loc241])
#loc623 = loc(fused[#loc242, #loc243])
#loc624 = loc(fused[#loc244, #loc245])
#loc625 = loc(fused[#loc246, #loc247])
#loc626 = loc(fused[#loc248, #loc249])
#loc627 = loc(fused[#loc250, #loc251])
#loc628 = loc(fused[#loc256, #loc257])
#loc629 = loc(fused[#loc258, #loc259])
#loc630 = loc(fused[#loc260, #loc261])
#loc631 = loc(fused[#loc262, #loc259])
#loc632 = loc(fused[#loc264, #loc265])
#loc633 = loc(fused[#loc267, #loc268])
#loc634 = loc(fused[#loc269, #loc270])
#loc635 = loc(fused[#loc272, #loc271])
#loc636 = loc(fused[#loc274, #loc273])
#loc637 = loc(fused[#loc277, #loc278])
#loc638 = loc(fused[#loc279, #loc280])
#loc639 = loc(fused[#loc282, #loc283])
#loc640 = loc(fused[#loc284, #loc285])
#loc641 = loc(fused[#loc286, #loc287])
#loc642 = loc(fused[#loc288, #loc280])
#loc643 = loc(fused[#loc290, #loc291])
#loc644 = loc(fused[#loc294, #loc295])
#loc645 = loc(fused[#loc296, #loc291])
#loc646 = loc(fused[#loc302, #loc303])
#loc647 = loc(fused[#loc304, #loc305])
#loc648 = loc(fused[#loc306, #loc307])
#loc649 = loc(fused[#loc308, #loc305])
#loc650 = loc(fused[#loc316, #loc317])
#loc651 = loc(fused[#loc318, #loc319])
#loc652 = loc(fused[#loc320, #loc321])
#loc653 = loc(fused[#loc323, #loc324])
#loc654 = loc(fused[#loc325, #loc319])
#loc655 = loc(fused[#loc329, #loc327])
#loc656 = loc(fused[#loc332, #loc333])
#loc657 = loc(fused[#loc335, #loc336])
#loc658 = loc(fused[#loc337, #loc338])
#loc659 = loc(fused[#loc339, #loc336])
#loc660 = loc(fused[#loc342, #loc343])
#loc661 = loc(fused[#loc344, #loc345])
#loc662 = loc(fused[#loc346, #loc343])
#loc663 = loc(fused[#loc350, #loc349])
#loc664 = loc(fused[#loc353, #loc354])
#loc665 = loc(fused[#loc355, #loc356])
#loc667 = loc(fused[#loc360, #loc361])
#loc668 = loc(fused[#loc363, #loc361])
#loc669 = loc(fused[#loc364, #loc365])
#loc670 = loc(fused[#loc368, #loc367])
#loc671 = loc(fused[#loc369, #loc370, #loc371, #loc365])
#loc672 = loc(fused[#loc372, #loc373])
#loc673 = loc(fused[#loc374, #loc375])
#loc674 = loc(fused[#loc380, #loc381])
#loc675 = loc(fused[#loc382, #loc383])
#loc676 = loc(fused[#loc385, #loc384])
#loc677 = loc(fused[#loc386, #loc387])
#loc678 = loc(fused[#loc388, #loc389])
#loc679 = loc(fused[#loc390, #loc391])
#loc680 = loc(fused[#loc392, #loc393])
#loc681 = loc(fused[#loc394, #loc395])
#loc682 = loc(fused[#loc396, #loc397])
#loc683 = loc(fused[#loc398, #loc399])
#loc684 = loc(fused[#loc404, #loc405])
#loc685 = loc(fused[#loc406, #loc407])
#loc686 = loc(fused[#loc408, #loc409])
#loc687 = loc(fused[#loc410, #loc407])
#loc688 = loc(fused[#loc412, #loc413])
#loc689 = loc(fused[#loc415, #loc416])
#loc690 = loc(fused[#loc417, #loc418])
#loc691 = loc(fused[#loc420, #loc419])
#loc692 = loc(fused[#loc422, #loc421])
#loc693 = loc(fused[#loc425, #loc426])
#loc694 = loc(fused[#loc427, #loc428])
#loc695 = loc(fused[#loc430, #loc431])
#loc696 = loc(fused[#loc432, #loc433])
#loc697 = loc(fused[#loc434, #loc435])
#loc698 = loc(fused[#loc436, #loc428])
#loc699 = loc(fused[#loc438, #loc439])
#loc700 = loc(fused[#loc442, #loc443])
#loc701 = loc(fused[#loc444, #loc439])
#loc702 = loc(fused[#loc450, #loc451])
#loc703 = loc(fused[#loc452, #loc453])
#loc704 = loc(fused[#loc454, #loc455])
#loc705 = loc(fused[#loc456, #loc453])
#loc706 = loc(fused[#loc464, #loc465])
#loc707 = loc(fused[#loc466, #loc467])
#loc708 = loc(fused[#loc468, #loc469])
#loc709 = loc(fused[#loc471, #loc472])
#loc710 = loc(fused[#loc473, #loc467])
#loc711 = loc(fused[#loc477, #loc475])
#loc712 = loc(fused[#loc480, #loc481])
#loc713 = loc(fused[#loc483, #loc484])
#loc714 = loc(fused[#loc485, #loc486])
#loc715 = loc(fused[#loc487, #loc484])
#loc716 = loc(fused[#loc490, #loc491])
#loc717 = loc(fused[#loc492, #loc493])
#loc718 = loc(fused[#loc494, #loc491])
#loc719 = loc(fused[#loc498, #loc497])
#loc720 = loc(fused[#loc501, #loc502])
#loc721 = loc(fused[#loc503, #loc504])
#loc723 = loc(fused[#loc508, #loc509])
#loc724 = loc(fused[#loc511, #loc509])
#loc725 = loc(fused[#loc512, #loc513])
#loc726 = loc(fused[#loc514, #loc515])
#loc727 = loc(fused[#loc516, #loc517])
#loc728 = loc(fused[#loc520, #loc521])
#loc729 = loc(fused[#loc522, #loc523])
#loc730 = loc(fused[#loc525, #loc524])
#loc731 = loc(fused[#loc527, #loc526])
#loc732 = loc(fused[#loc529, #loc528])
