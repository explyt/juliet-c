!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68_badData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc47)
  cir.func private @printIntLine(!s32i) loc(#loc48)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_687badSinkEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc50)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc51)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68_badData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc47)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc10)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc51)
    cir.br ^bb1 loc(#loc52)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc50)
    cir.store %4, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc50)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc13)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc13)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc14)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc14)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc15)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc15)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc53)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc54)
    cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc55)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc20)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc21)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc22)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc20)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc23)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
    cir.delete.array %17 : <!s32i> loc(#loc24)
    cir.br ^bb2 loc(#loc12)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc49)
  cir.global "private" external @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68_goodG2BData : !cir.ptr<!s32i> {alignment = 8 : i64} loc(#loc56)
  cir.func @_ZN60CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_6811goodG2BSinkEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc58)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc59)
    %2 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68_goodG2BData : !cir.ptr<!cir.ptr<!s32i>> loc(#loc56)
    %3 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    cir.store %3, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc59)
    cir.br ^bb1 loc(#loc60)
  ^bb1:  // pred: ^bb0
    %4 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc58)
    cir.store %4, %0 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc58)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
    %7 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc36)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc37)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc37)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc61)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc62)
    cir.libc.memmove %12 bytes from %8 to %6 : !cir.ptr<!void>, !u64i loc(#loc63)
    %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc43)
    %15 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc44)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc42)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc45)
    %17 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc46)
    cir.delete.array %17 : <!s32i> loc(#loc46)
    cir.br ^bb2 loc(#loc34)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc28)
  } loc(#loc57)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s03/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":0:0)
#loc1 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":19:1)
#loc2 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":19:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":29:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":39:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":33:9)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":33:29)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":31:5)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":31:18)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":38:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:17)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:23)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:31)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:35)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:45)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":35:46)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":36:22)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":36:27)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":36:28)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":36:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":37:19)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":20:1)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":20:14)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":46:1)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":56:1)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":50:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":50:29)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":48:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":48:18)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":49:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":55:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:23)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:31)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:35)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:45)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":52:46)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":53:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":53:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":53:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":53:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE805_int_memmove_68b.cpp":54:19)
#loc47 = loc(fused[#loc1, #loc2])
#loc48 = loc(fused[#loc3, #loc4])
#loc49 = loc(fused[#loc5, #loc6])
#loc50 = loc(fused[#loc7, #loc8])
#loc51 = loc(fused[#loc9, #loc10])
#loc52 = loc(fused[#loc11, #loc12])
#loc53 = loc(fused[#loc16, #loc17])
#loc54 = loc(fused[#loc15, #loc17])
#loc55 = loc(fused[#loc18, #loc19])
#loc56 = loc(fused[#loc25, #loc26])
#loc57 = loc(fused[#loc27, #loc28])
#loc58 = loc(fused[#loc29, #loc30])
#loc59 = loc(fused[#loc31, #loc32])
#loc60 = loc(fused[#loc33, #loc34])
#loc61 = loc(fused[#loc38, #loc39])
#loc62 = loc(fused[#loc37, #loc39])
#loc63 = loc(fused[#loc40, #loc41])
