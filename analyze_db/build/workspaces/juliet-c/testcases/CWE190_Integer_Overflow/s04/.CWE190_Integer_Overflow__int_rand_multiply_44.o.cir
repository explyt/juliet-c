!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":22:21)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":22:25)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":40:12)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":50:25)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":50:29)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":72:25)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":72:29)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":96:12)
#loc107 = loc(fused[#loc5, #loc6])
#loc122 = loc(fused[#loc40, #loc41])
#loc134 = loc(fused[#loc70, #loc71])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc105)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc108)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc107)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc9)
    cir.br ^bb1 loc(#loc109)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc110)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc111)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc8)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc15)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc17)
    cir.br ^bb3 loc(#loc11)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc11)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc106)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc112)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc25)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc115)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc26)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc28)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc28)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc28)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc28)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc28)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc28)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc28)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc28)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc28)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc28)
    cir.br ^bb3(%19 : !u32i) loc(#loc28)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc28)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc28)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc28)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc28)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc28)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc28)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc28)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc28)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc28)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc28)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc28)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc28)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc28)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc28)
    cir.br ^bb3(%35 : !u32i) loc(#loc28)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":40:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc28)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc28)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc30)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc31)
    cir.call %38(%39) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc30)
    cir.return loc(#loc21)
  } loc(#loc113)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc119)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc118)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc40, #loc41])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc123)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc122)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc44)
    cir.br ^bb1 loc(#loc124)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc48)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc125)
    cir.brcond %4 ^bb2, ^bb3 loc(#loc126)
  ^bb2:  // pred: ^bb1
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc43)
    %7 = cir.binop(mul, %5, %6) nsw : !s32i loc(#loc50)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc123)
    %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc52)
    cir.br ^bb3 loc(#loc46)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc46)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc39)
  } loc(#loc121)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc129)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc59)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc130)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc61)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc131)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc63)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    cir.call %5(%6) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc63)
    cir.return loc(#loc54)
  } loc(#loc127)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc132)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc67)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc70, #loc71])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc134)
    cir.store %arg0, %1 : !s32i, !cir.ptr<!s32i> loc(#loc74)
    cir.br ^bb1 loc(#loc136)
  ^bb1:  // pred: ^bb0
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc78)
    %4 = cir.cmp(gt, %2, %3) : !s32i, !cir.bool loc(#loc137)
    cir.brcond %4 ^bb2, ^bb8 loc(#loc138)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc139)
  ^bb3:  // pred: ^bb2
    %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc83)
    %7 = cir.const #cir.int<2> : !s32i loc(#loc84)
    %8 = cir.binop(div, %6, %7) : !s32i loc(#loc140)
    %9 = cir.cmp(lt, %5, %8) : !s32i, !cir.bool loc(#loc141)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc142)
  ^bb4:  // pred: ^bb3
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %11 = cir.const #cir.int<2> : !s32i loc(#loc73)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc89)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc90)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc91)
    cir.br ^bb6 loc(#loc87)
  ^bb5:  // pred: ^bb3
    %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc67)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc92)
    cir.br ^bb6 loc(#loc81)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc81)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc76)
  ^bb8:  // 2 preds: ^bb1, ^bb7
    cir.br ^bb9 loc(#loc76)
  ^bb9:  // pred: ^bb8
    cir.return loc(#loc69)
  } loc(#loc133)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc145)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc98)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc145)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc99)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc146)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc101)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc101)
    cir.brcond %7 ^bb1, ^bb2 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %8 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc101)
    %10 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc101)
    %12 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc101)
    %14 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc101)
    %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc101)
    %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc101)
    %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc101)
    cir.br ^bb3(%19 : !u32i) loc(#loc101)
  ^bb2:  // pred: ^bb0
    %20 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc101)
    %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
    %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc101)
    %24 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc101)
    %26 = cir.const #cir.int<15> : !s32i loc(#loc101)
    %27 = cir.shift(left, %25 : !u32i, %26 : !s32i) -> !u32i loc(#loc101)
    %28 = cir.binop(xor, %23, %27) : !u32i loc(#loc101)
    %29 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc101)
    %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc101)
    %31 = cir.binop(xor, %28, %30) : !u32i loc(#loc101)
    %32 = cir.unary(minus, %31) : !u32i, !u32i loc(#loc101)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %34 = cir.cast(integral, %33 : !s32i), !u32i loc(#loc101)
    %35 = cir.binop(sub, %32, %34) : !u32i loc(#loc101)
    cir.br ^bb3(%35 : !u32i) loc(#loc101)
  ^bb3(%36: !u32i loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":96:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc101)
  ^bb4:  // pred: ^bb3
    %37 = cir.cast(integral, %36 : !u32i), !s32i loc(#loc101)
    cir.store %37, %0 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc103)
    %39 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    cir.call %38(%39) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc103)
    cir.return loc(#loc94)
  } loc(#loc143)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":22:1)
#loc4 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":27:9)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":27:29)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":23:1)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":24:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":24:8)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":24:15)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":27:22)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":28:22)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":28:9)
#loc18 = loc("/usr/include/stdlib.h":573:1)
#loc19 = loc("/usr/include/stdlib.h":573:24)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":32:1)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":43:1)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":34:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":36:5)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":36:29)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":38:12)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":38:5)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":40:5)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":42:5)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":42:13)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":100:1)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":104:1)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":102:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":102:13)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":103:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":103:13)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":50:1)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":58:1)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":55:9)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":55:29)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":51:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":52:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":57:5)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":52:8)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":52:15)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":53:5)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":55:22)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":56:22)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":56:9)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":60:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":69:1)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":62:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":63:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":63:29)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":65:12)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":65:5)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":67:12)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":67:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":68:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":68:13)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":84:23)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":72:1)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":87:1)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":79:13)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":79:33)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":73:1)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":86:5)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":74:8)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":74:15)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":75:5)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":77:9)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":85:9)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":77:13)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":77:21)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":77:29)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":77:30)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":78:9)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":81:9)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":83:9)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":79:26)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":80:26)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":80:13)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":84:13)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":89:1)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":98:1)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":91:5)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":91:9)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":92:5)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":92:29)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":94:12)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":94:5)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":96:5)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":97:5)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_multiply_44.c":97:13)
#loc105 = loc(fused[#loc1, #loc2])
#loc106 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc7, #loc8])
#loc109 = loc(fused[#loc10, #loc11])
#loc110 = loc(fused[#loc12, #loc13])
#loc111 = loc(fused[#loc14, #loc11])
#loc112 = loc(fused[#loc18, #loc19])
#loc113 = loc(fused[#loc20, #loc21])
#loc114 = loc(fused[#loc22, #loc23])
#loc115 = loc(fused[#loc24, #loc25])
#loc116 = loc(fused[#loc27, #loc26])
#loc117 = loc(fused[#loc29, #loc28])
#loc118 = loc(fused[#loc32, #loc33])
#loc119 = loc(fused[#loc34, #loc35])
#loc120 = loc(fused[#loc36, #loc37])
#loc121 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc42, #loc43])
#loc124 = loc(fused[#loc45, #loc46])
#loc125 = loc(fused[#loc47, #loc48])
#loc126 = loc(fused[#loc49, #loc46])
#loc127 = loc(fused[#loc53, #loc54])
#loc128 = loc(fused[#loc55, #loc56])
#loc129 = loc(fused[#loc57, #loc58])
#loc130 = loc(fused[#loc60, #loc59])
#loc131 = loc(fused[#loc62, #loc61])
#loc132 = loc(fused[#loc65, #loc66])
#loc133 = loc(fused[#loc68, #loc69])
#loc135 = loc(fused[#loc72, #loc73])
#loc136 = loc(fused[#loc75, #loc76])
#loc137 = loc(fused[#loc77, #loc78])
#loc138 = loc(fused[#loc79, #loc76])
#loc139 = loc(fused[#loc80, #loc81])
#loc140 = loc(fused[#loc83, #loc84])
#loc141 = loc(fused[#loc82, #loc85])
#loc142 = loc(fused[#loc86, #loc87, #loc88, #loc81])
#loc143 = loc(fused[#loc93, #loc94])
#loc144 = loc(fused[#loc95, #loc96])
#loc145 = loc(fused[#loc97, #loc98])
#loc146 = loc(fused[#loc100, #loc99])
#loc147 = loc(fused[#loc102, #loc101])
