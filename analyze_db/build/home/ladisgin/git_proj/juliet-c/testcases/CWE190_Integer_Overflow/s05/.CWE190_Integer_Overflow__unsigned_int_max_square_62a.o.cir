!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc39 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:7)
#loc40 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:12)
#loc94 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_629badSourceERj(!cir.ptr<!u32i>) loc(#loc77)
  cir.func private @printUnsignedLine(!u32i) loc(#loc78)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_623badEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc80)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc11)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc82)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_629badSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc13)
    cir.br ^bb1 loc(#loc83)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc16)
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc84)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc80)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc17)
    cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc18)
    cir.br ^bb2 loc(#loc15)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc6)
  } loc(#loc79)
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_6213goodG2BSourceERj(!cir.ptr<!u32i>) loc(#loc85)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_62L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc27)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc89)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_6213goodG2BSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc29)
    cir.br ^bb1 loc(#loc90)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc24)
    %6 = cir.binop(mul, %4, %5) : !u32i loc(#loc91)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc87)
    %7 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc33)
    cir.call @printUnsignedLine(%7) : (!u32i) -> () loc(#loc34)
    cir.br ^bb2 loc(#loc31)
  ^bb2:  // pred: ^bb1
    cir.return loc(#loc22)
  } loc(#loc86)
  cir.func private @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_6213goodB2GSourceERj(!cir.ptr<!u32i>) loc(#loc92)
  cir.func linkonce_odr @_ZSt3absl(%arg0: !s64i loc(fused[#loc39, #loc40])) -> !s64i extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__i", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc42)
    %3 = cir.abs %2 poison : !s64i loc(#loc43)
    cir.store %3, %1 : !s64i, !cir.ptr<!s64i> loc(#loc95)
    %4 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc95)
    cir.return %4 : !s64i loc(#loc95)
  } loc(#loc93)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc46)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc96)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func internal private @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_62L7goodB2GEv() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc98)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc56)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc56)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc100)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_6213goodB2GSourceERj(%1) : (!cir.ptr<!u32i>) -> () loc(#loc58)
    cir.br ^bb1 loc(#loc101)
  ^bb1:  // pred: ^bb0
    %4 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc61)
    %5 = cir.cast(integral, %4 : !u32i), !s64i loc(#loc61)
    %6 = cir.call @_ZSt3absl(%5) : (!s64i) -> !s64i loc(#loc62)
    %7 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc63)
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc64)
    %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc64)
    %10 = cir.const #cir.int<2> : !u32i loc(#loc64)
    %11 = cir.binop(mul, %9, %10) : !u32i loc(#loc64)
    %12 = cir.const #cir.int<1> : !u32i loc(#loc64)
    %13 = cir.binop(add, %11, %12) : !u32i loc(#loc64)
    %14 = cir.cast(int_to_float, %13 : !u32i), !cir.double loc(#loc64)
    %15 = cir.call @sqrt(%14) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc63)
    %16 = cir.cast(float_to_int, %15 : !cir.double), !s64i loc(#loc63)
    %17 = cir.cmp(lt, %6, %16) : !s64i, !cir.bool loc(#loc102)
    cir.brcond %17 ^bb2, ^bb3 loc(#loc103)
  ^bb2:  // pred: ^bb1
    %18 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc69)
    %19 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc53)
    %20 = cir.binop(mul, %18, %19) : !u32i loc(#loc104)
    cir.store %20, %0 : !u32i, !cir.ptr<!u32i> loc(#loc98)
    %21 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc70)
    cir.call @printUnsignedLine(%21) : (!u32i) -> () loc(#loc71)
    cir.br ^bb4 loc(#loc67)
  ^bb3:  // pred: ^bb1
    %22 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
    %23 = cir.cast(array_to_ptrdecay, %22 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    cir.br ^bb4 loc(#loc60)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc60)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc51)
  } loc(#loc97)
  cir.func @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_624goodEv() extra(#fn_attr) {
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_62L7goodG2BEv() : () -> () loc(#loc75)
    cir.call @_ZN51CWE190_Integer_Overflow__unsigned_int_max_square_62L7goodB2GEv() : () -> () loc(#loc76)
    cir.return loc(#loc74)
  } loc(#loc105)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":28:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":28:34)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":30:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":40:1)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":37:9)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":37:38)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":32:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":32:18)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":33:12)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":33:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":34:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":35:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":39:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":37:31)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":38:27)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":38:9)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":47:1)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":47:38)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":49:1)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":59:1)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":56:9)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":56:38)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":51:5)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":51:18)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":52:12)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":52:5)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":53:5)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":54:5)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":58:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":56:31)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":57:27)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":57:9)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":62:1)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":62:38)
#loc37 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":55:3)
#loc38 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:47)
#loc41 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:17)
#loc42 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:41)
#loc43 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:26)
#loc44 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:19)
#loc45 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/bits/std_abs.h":56:44)
#loc46 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":77:19)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":64:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":79:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":72:9)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":72:38)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":66:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":66:18)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":67:12)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":67:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":68:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":78:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:19)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:9)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:33)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:46)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":70:54)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":71:5)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":74:5)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":76:5)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":72:31)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":73:27)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":73:9)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":77:9)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":81:1)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":85:1)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":83:5)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_square_62a.cpp":84:5)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc79 = loc(fused[#loc5, #loc6])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc9, #loc10])
#loc82 = loc(fused[#loc12, #loc11])
#loc83 = loc(fused[#loc14, #loc15])
#loc84 = loc(fused[#loc16, #loc8])
#loc85 = loc(fused[#loc19, #loc20])
#loc86 = loc(fused[#loc21, #loc22])
#loc87 = loc(fused[#loc23, #loc24])
#loc88 = loc(fused[#loc25, #loc26])
#loc89 = loc(fused[#loc28, #loc27])
#loc90 = loc(fused[#loc30, #loc31])
#loc91 = loc(fused[#loc32, #loc24])
#loc92 = loc(fused[#loc35, #loc36])
#loc93 = loc(fused[#loc37, #loc38])
#loc95 = loc(fused[#loc44, #loc45])
#loc96 = loc(fused[#loc47, #loc48])
#loc97 = loc(fused[#loc50, #loc51])
#loc98 = loc(fused[#loc52, #loc53])
#loc99 = loc(fused[#loc54, #loc55])
#loc100 = loc(fused[#loc57, #loc56])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc62, #loc65])
#loc103 = loc(fused[#loc66, #loc67, #loc68, #loc60])
#loc104 = loc(fused[#loc69, #loc53])
#loc105 = loc(fused[#loc73, #loc74])
