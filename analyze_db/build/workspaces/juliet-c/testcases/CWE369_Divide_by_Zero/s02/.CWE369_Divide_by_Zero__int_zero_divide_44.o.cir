!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":22:21)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":22:25)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":46:25)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":46:29)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":64:25)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":64:29)
#loc85 = loc(fused[#loc5, #loc6])
#loc96 = loc(fused[#loc32, #loc33])
#loc105 = loc(fused[#loc56, #loc57])
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc83)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc85)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc86)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc10)
    cir.return loc(#loc4)
  } loc(#loc84)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc88)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc89)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc16)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc89)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc18)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc90)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc22)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc22)
    cir.return loc(#loc12)
  } loc(#loc87)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc26)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    cir.return loc(#loc25)
  } loc(#loc92)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc96)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc34)
    %1 = cir.const #cir.int<100> : !s32i loc(#loc35)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    %3 = cir.binop(div, %1, %2) : !s32i loc(#loc97)
    cir.call @printIntLine(%3) : (!s32i) -> () loc(#loc37)
    cir.return loc(#loc31)
  } loc(#loc95)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc99)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc100)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc43)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc100)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc45)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc47)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc49)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc49)
    cir.return loc(#loc39)
  } loc(#loc98)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc103)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc53)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc56, #loc57])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc105)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %2 = cir.const #cir.int<0> : !s32i loc(#loc62)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc107)
      cir.if %3 {
        %4 = cir.const #cir.int<100> : !s32i loc(#loc66)
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc67)
        %6 = cir.binop(div, %4, %5) : !s32i loc(#loc109)
        cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc68)
      } else {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc53)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc53)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc55)
  } loc(#loc104)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc111)
    %1 = cir.alloca !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc112)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<(!s32i)>> loc(#loc75)
    cir.store %2, %1 : !cir.ptr<!cir.func<(!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>> loc(#loc112)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
    %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc77)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<(!s32i)>>>, !cir.ptr<!cir.func<(!s32i)>> loc(#loc81)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    cir.call %6(%7) : (!cir.ptr<!cir.func<(!s32i)>>, !s32i) -> () loc(#loc81)
    cir.return loc(#loc71)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":26:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":23:1)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":25:18)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":25:24)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":25:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":28:1)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":39:1)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":30:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":30:9)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":32:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":32:29)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":34:13)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":34:12)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":34:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":36:12)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":36:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":38:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":38:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":88:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":92:1)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":90:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":90:13)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":91:5)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":91:13)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":46:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":50:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":47:1)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":49:18)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":49:24)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":49:5)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":52:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":61:1)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":54:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":54:9)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":55:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":55:29)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":57:13)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":57:12)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":57:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":59:12)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":59:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":60:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":60:13)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":73:19)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":64:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":75:1)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":65:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":67:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":74:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":67:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":67:17)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":68:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":70:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":72:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":69:22)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":69:28)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":69:9)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":73:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":77:1)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":86:1)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":79:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":79:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":80:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":80:29)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":82:13)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":82:12)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":82:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":84:12)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":84:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":85:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_44.c":85:13)
#loc83 = loc(fused[#loc1, #loc2])
#loc84 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc8, #loc9])
#loc87 = loc(fused[#loc11, #loc12])
#loc88 = loc(fused[#loc13, #loc14])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc19, #loc17])
#loc91 = loc(fused[#loc21, #loc20])
#loc92 = loc(fused[#loc24, #loc25])
#loc93 = loc(fused[#loc26, #loc27])
#loc94 = loc(fused[#loc28, #loc29])
#loc95 = loc(fused[#loc30, #loc31])
#loc97 = loc(fused[#loc35, #loc36])
#loc98 = loc(fused[#loc38, #loc39])
#loc99 = loc(fused[#loc40, #loc41])
#loc100 = loc(fused[#loc42, #loc43])
#loc101 = loc(fused[#loc46, #loc44])
#loc102 = loc(fused[#loc48, #loc47])
#loc103 = loc(fused[#loc51, #loc52])
#loc104 = loc(fused[#loc54, #loc55])
#loc106 = loc(fused[#loc59, #loc60])
#loc107 = loc(fused[#loc61, #loc62])
#loc108 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc109 = loc(fused[#loc66, #loc67])
#loc110 = loc(fused[#loc70, #loc71])
#loc111 = loc(fused[#loc72, #loc73])
#loc112 = loc(fused[#loc74, #loc75])
#loc113 = loc(fused[#loc78, #loc76])
#loc114 = loc(fused[#loc80, #loc79])
