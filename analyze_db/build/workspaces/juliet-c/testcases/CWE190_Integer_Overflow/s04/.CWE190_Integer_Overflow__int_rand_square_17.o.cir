!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc141)
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc144)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc145)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc146)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc150)
        cir.condition(%7) loc(#loc20)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc22)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc22)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc22)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc22)
            cir.yield %22 : !u32i loc(#loc22)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc22)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc22)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc22)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc22)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc22)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc22)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc22)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc22)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc22)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc22)
            cir.yield %26 : !u32i loc(#loc22)
          }) : (!cir.bool) -> !u32i loc(#loc22)
          %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc22)
          cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc152)
        } loc(#loc151)
        cir.yield loc(#loc15)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc25)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
        cir.yield loc(#loc148)
      } loc(#loc148)
    } loc(#loc148)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc155)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc156)
        cir.condition(%7) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc159)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc38)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc38)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc159)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc39)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc40)
          } loc(#loc158)
        } loc(#loc157)
        cir.yield loc(#loc27)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc41)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc42)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc160)
        cir.yield loc(#loc154)
      } loc(#loc154)
    } loc(#loc154)
    cir.return loc(#loc6)
  } loc(#loc143)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_square_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc162)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc163)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc161)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc49)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc164)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc52)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc167)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc168)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc60)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc169)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc64)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc67)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc172)
        cir.condition(%7) loc(#loc68)
      } body {
        cir.scope {
          %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc70)
          %7 = cir.binop(and, %5, %6) : !s32i loc(#loc70)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc70)
          %9 = cir.ternary(%8, true {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc70)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc70)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc70)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc70)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc70)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc70)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc70)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc70)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc70)
            cir.yield %22 : !u32i loc(#loc70)
          }, false {
            %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc70)
            %13 = cir.const #cir.int<30> : !s32i loc(#loc70)
            %14 = cir.shift(left, %12 : !u32i, %13 : !s32i) -> !u32i loc(#loc70)
            %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc70)
            %17 = cir.const #cir.int<15> : !s32i loc(#loc70)
            %18 = cir.shift(left, %16 : !u32i, %17 : !s32i) -> !u32i loc(#loc70)
            %19 = cir.binop(xor, %14, %18) : !u32i loc(#loc70)
            %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
            %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc70)
            %22 = cir.binop(xor, %19, %21) : !u32i loc(#loc70)
            %23 = cir.unary(minus, %22) : !u32i, !u32i loc(#loc70)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc70)
            %26 = cir.binop(sub, %23, %25) : !u32i loc(#loc70)
            cir.yield %26 : !u32i loc(#loc70)
          }) : (!cir.bool) -> !u32i loc(#loc70)
          %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc70)
          cir.store %10, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
        } loc(#loc173)
        cir.yield loc(#loc63)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc73)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc175)
        cir.yield loc(#loc170)
      } loc(#loc170)
    } loc(#loc170)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc76)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc177)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc79)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc178)
        cir.condition(%7) loc(#loc80)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc84)
            %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc85)
            %7 = cir.unary(minus, %6) nsw : !s32i, !s32i loc(#loc85)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc85)
            %9 = cir.binop(sub, %7, %8) nsw : !s32i loc(#loc85)
            %10 = cir.cmp(gt, %5, %9) : !s32i, !cir.bool loc(#loc181)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc87)
              %13 = cir.abs %12 poison : !s32i loc(#loc88)
              %14 = cir.cast(integral, %13 : !s32i), !s64i loc(#loc88)
              %15 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc89)
              %16 = cir.const #cir.int<2147483647> : !s32i loc(#loc90)
              %17 = cir.cast(int_to_float, %16 : !s32i), !cir.double loc(#loc90)
              %18 = cir.call @sqrt(%17) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc89)
              %19 = cir.cast(float_to_int, %18 : !cir.double), !s64i loc(#loc89)
              %20 = cir.cmp(lt, %14, %19) : !s64i, !cir.bool loc(#loc182)
              %21 = cir.ternary(%20, true {
                %22 = cir.const #true loc(#loc86)
                cir.yield %22 : !cir.bool loc(#loc86)
              }, false {
                %22 = cir.const #false loc(#loc86)
                cir.yield %22 : !cir.bool loc(#loc86)
              }) : (!cir.bool) -> !cir.bool loc(#loc86)
              cir.yield %21 : !cir.bool loc(#loc86)
            }, false {
              %12 = cir.const #false loc(#loc86)
              cir.yield %12 : !cir.bool loc(#loc86)
            }) : (!cir.bool) -> !cir.bool loc(#loc86)
            cir.if %11 {
              %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc184)
              %13 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc97)
              %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc96)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc97)
              cir.store %15, %12 : !s32i, !cir.ptr<!s32i> loc(#loc184)
              %16 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc98)
              cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc99)
            } else {
              %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc52)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc52)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc100)
            } loc(#loc183)
          } loc(#loc180)
        } loc(#loc179)
        cir.yield loc(#loc75)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc101)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc102)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc185)
        cir.yield loc(#loc176)
      } loc(#loc176)
    } loc(#loc176)
    cir.return loc(#loc54)
  } loc(#loc165)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc188)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc189)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc110)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc190)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc114)
      cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      cir.for : cond {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc193)
        cir.condition(%7) loc(#loc118)
      } body {
        cir.scope {
          %5 = cir.const #cir.int<2> : !s32i loc(#loc120)
          cir.store %5, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
        } loc(#loc194)
        cir.yield loc(#loc113)
      } step {
        %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc123)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
        cir.yield loc(#loc191)
      } loc(#loc191)
    } loc(#loc191)
    cir.scope {
      %4 = cir.const #cir.int<0> : !s32i loc(#loc126)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc198)
      cir.for : cond {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc129)
        %7 = cir.cmp(lt, %5, %6) : !s32i, !cir.bool loc(#loc199)
        cir.condition(%7) loc(#loc130)
      } body {
        cir.scope {
          cir.scope {
            %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc202)
            %6 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc135)
            %8 = cir.binop(mul, %6, %7) nsw : !s32i loc(#loc136)
            cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc202)
            %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc137)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc138)
          } loc(#loc201)
        } loc(#loc200)
        cir.yield loc(#loc125)
      } step {
        %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc139)
        %6 = cir.unary(inc, %5) nsw : !s32i, !s32i loc(#loc140)
        cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc203)
        cir.yield loc(#loc197)
      } loc(#loc197)
    } loc(#loc197)
    cir.return loc(#loc104)
  } loc(#loc186)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_square_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":24:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":43:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":26:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":26:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":26:11)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":27:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":27:9)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":29:12)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":34:5)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:13)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:9)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:16)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:20)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:18)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":31:5)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":33:16)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":33:9)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:24)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":30:23)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:5)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":42:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:9)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:16)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:20)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:18)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":36:5)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":37:9)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":41:9)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":39:13)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":39:33)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":39:26)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":40:26)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":40:13)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:24)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":35:23)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":98:1)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":102:1)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":100:5)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":100:13)
#loc47 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":101:5)
#loc48 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":101:13)
#loc49 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc51 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":71:23)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":50:1)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":74:1)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":52:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":52:9)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":52:11)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":53:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":53:9)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":55:12)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":55:5)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":60:5)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:13)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:9)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:16)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:20)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:18)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":57:5)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":59:16)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":59:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:24)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":56:23)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:5)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":73:5)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:9)
#loc78 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:16)
#loc79 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:20)
#loc80 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:18)
#loc81 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":62:5)
#loc82 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:9)
#loc83 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":72:9)
#loc84 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:13)
#loc85 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:20)
#loc86 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:28)
#loc87 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:35)
#loc88 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:31)
#loc89 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:49)
#loc90 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:62)
#loc91 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":64:69)
#loc92 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":65:9)
#loc93 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":68:9)
#loc94 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":70:9)
#loc95 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":66:13)
#loc96 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":66:33)
#loc97 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":66:26)
#loc98 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":67:26)
#loc99 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":67:13)
#loc100 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":71:13)
#loc101 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:24)
#loc102 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":61:23)
#loc103 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":77:1)
#loc104 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":96:1)
#loc105 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":79:5)
#loc106 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":79:9)
#loc107 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":79:11)
#loc108 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":80:5)
#loc109 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":80:9)
#loc110 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":82:12)
#loc111 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":82:5)
#loc112 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:5)
#loc113 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":87:5)
#loc114 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:13)
#loc115 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:9)
#loc116 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:16)
#loc117 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:20)
#loc118 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:18)
#loc119 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":84:5)
#loc120 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":86:16)
#loc121 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":86:9)
#loc122 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:24)
#loc123 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":83:23)
#loc124 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:5)
#loc125 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":95:5)
#loc126 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:13)
#loc127 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:9)
#loc128 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:16)
#loc129 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:20)
#loc130 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:18)
#loc131 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":89:5)
#loc132 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":90:9)
#loc133 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":94:9)
#loc134 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":92:13)
#loc135 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":92:33)
#loc136 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":92:26)
#loc137 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":93:26)
#loc138 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":93:13)
#loc139 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:24)
#loc140 = loc("CWE190_Integer_Overflow__int_rand_square_17.c":88:23)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc5, #loc6])
#loc144 = loc(fused[#loc7, #loc8])
#loc145 = loc(fused[#loc7, #loc9])
#loc146 = loc(fused[#loc10, #loc11])
#loc147 = loc(fused[#loc13, #loc12])
#loc148 = loc(fused[#loc14, #loc15])
#loc149 = loc(fused[#loc17, #loc16])
#loc150 = loc(fused[#loc18, #loc19])
#loc151 = loc(fused[#loc21, #loc15])
#loc152 = loc(fused[#loc23, #loc22])
#loc153 = loc(fused[#loc25, #loc24])
#loc154 = loc(fused[#loc26, #loc27])
#loc155 = loc(fused[#loc29, #loc28])
#loc156 = loc(fused[#loc30, #loc31])
#loc157 = loc(fused[#loc33, #loc27])
#loc158 = loc(fused[#loc34, #loc35])
#loc159 = loc(fused[#loc36, #loc37])
#loc160 = loc(fused[#loc42, #loc41])
#loc161 = loc(fused[#loc43, #loc44])
#loc162 = loc(fused[#loc45, #loc46])
#loc163 = loc(fused[#loc47, #loc48])
#loc164 = loc(fused[#loc50, #loc51])
#loc165 = loc(fused[#loc53, #loc54])
#loc166 = loc(fused[#loc55, #loc56])
#loc167 = loc(fused[#loc55, #loc57])
#loc168 = loc(fused[#loc58, #loc59])
#loc169 = loc(fused[#loc61, #loc60])
#loc170 = loc(fused[#loc62, #loc63])
#loc171 = loc(fused[#loc65, #loc64])
#loc172 = loc(fused[#loc66, #loc67])
#loc173 = loc(fused[#loc69, #loc63])
#loc174 = loc(fused[#loc71, #loc70])
#loc175 = loc(fused[#loc73, #loc72])
#loc176 = loc(fused[#loc74, #loc75])
#loc177 = loc(fused[#loc77, #loc76])
#loc178 = loc(fused[#loc78, #loc79])
#loc179 = loc(fused[#loc81, #loc75])
#loc180 = loc(fused[#loc82, #loc83])
#loc181 = loc(fused[#loc84, #loc85])
#loc182 = loc(fused[#loc88, #loc91])
#loc183 = loc(fused[#loc92, #loc93, #loc94, #loc83])
#loc184 = loc(fused[#loc95, #loc96])
#loc185 = loc(fused[#loc102, #loc101])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc105, #loc107])
#loc189 = loc(fused[#loc108, #loc109])
#loc190 = loc(fused[#loc111, #loc110])
#loc191 = loc(fused[#loc112, #loc113])
#loc192 = loc(fused[#loc115, #loc114])
#loc193 = loc(fused[#loc116, #loc117])
#loc194 = loc(fused[#loc119, #loc113])
#loc195 = loc(fused[#loc121, #loc120])
#loc196 = loc(fused[#loc123, #loc122])
#loc197 = loc(fused[#loc124, #loc125])
#loc198 = loc(fused[#loc127, #loc126])
#loc199 = loc(fused[#loc128, #loc129])
#loc200 = loc(fused[#loc131, #loc125])
#loc201 = loc(fused[#loc132, #loc133])
#loc202 = loc(fused[#loc134, #loc135])
#loc203 = loc(fused[#loc140, #loc139])
