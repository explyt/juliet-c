!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc74 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:10)
#loc75 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:14)
#loc76 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:20)
#loc77 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:32)
#loc144 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:28)
#loc203 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:28)
#true = #cir.bool<true> : !cir.bool
#loc301 = loc(fused[#loc74, #loc75])
#loc302 = loc(fused[#loc76, #loc77])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc271)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc272)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc273)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc274)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @printIntLine(!s32i) loc(#loc275)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_08_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc277)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc278)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc279)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc20)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc280)
    cir.br ^bb1 loc(#loc281)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc282)
    %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc283)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc284)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc277)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc277)
    cir.br ^bb4 loc(#loc285)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc31)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc32)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc32)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc32)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc32)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc32)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc32)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc32)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc32)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc33)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc34)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc35)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc35)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc286)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc287)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc39)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc40)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc288)
    cir.br ^bb7 loc(#loc37)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    cir.br ^bb7 loc(#loc30)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc30)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc28)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc23)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc289)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc290)
    %28 = cir.call %27() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc46)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc46)
    cir.brcond %29 ^bb13, ^bb16 loc(#loc291)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc292)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    %31 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc17)
    %32 = cir.binop(mul, %30, %31) nsw : !s32i loc(#loc51)
    cir.store %32, %1 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    %33 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc52)
    cir.call @printIntLine(%33) : (!s32i) -> () loc(#loc53)
    cir.br ^bb15 loc(#loc50)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc45)
  ^bb16:  // 2 preds: ^bb12, ^bb15
    cir.br ^bb17 loc(#loc45)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc13)
  } loc(#loc276)
  cir.func no_proto @CWE190_Integer_Overflow__int_fgets_square_08_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc294)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc295)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc296)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc60)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc297)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc62)
    cir.return loc(#loc55)
  } loc(#loc293)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc298)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc299)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc71)
  cir.func @main(%arg0: !s32i loc(fused[#loc74, #loc75]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc76, #loc77])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc301)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc302)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc73)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc78)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc79)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc80)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc80)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc81)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc68)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    %8 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc303)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_08_good() : () -> () loc(#loc83)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc69)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc70)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %13 = cir.get_global @CWE190_Integer_Overflow__int_fgets_square_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc304)
    cir.call @CWE190_Integer_Overflow__int_fgets_square_08_bad() : () -> () loc(#loc87)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc71)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc305)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc305)
    cir.return %17 : !s32i loc(#loc305)
  } loc(#loc300)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc93)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc94)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc307)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc307)
    cir.return %2 : !s32i loc(#loc307)
  } loc(#loc306)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc96)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc97)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc309)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc310)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc311)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc107)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc312)
    cir.br ^bb1 loc(#loc313)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc314)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc111)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc111)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc315)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc316)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc309)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc309)
    cir.br ^bb4 loc(#loc317)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc119)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc119)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc119)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc119)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc119)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc119)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc119)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc119)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc120)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc121)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc122)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc122)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc318)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc319)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc320)
    cir.br ^bb7 loc(#loc124)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc130)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc130)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc131)
    cir.br ^bb7 loc(#loc117)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc117)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc115)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc110)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc110)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc321)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc322)
    %28 = cir.call %27() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc134)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc134)
    cir.brcond %29 ^bb13, ^bb14 loc(#loc323)
  ^bb13:  // pred: ^bb12
    %30 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc96)
    %31 = cir.cast(array_to_ptrdecay, %30 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc96)
    cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc139)
    cir.br ^bb28 loc(#loc137)
  ^bb14:  // pred: ^bb12
    cir.br ^bb15 loc(#loc324)
  ^bb15:  // pred: ^bb14
    %32 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc142)
    %33 = cir.const #cir.int<2147483647> : !s32i loc(#loc143)
    %34 = cir.unary(minus, %33) : !s32i, !s32i loc(#loc143)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc143)
    %36 = cir.binop(sub, %34, %35) nsw : !s32i loc(#loc143)
    %37 = cir.cmp(gt, %32, %36) : !s32i, !cir.bool loc(#loc325)
    cir.brcond %37 ^bb16, ^bb21 loc(#loc144)
  ^bb16:  // pred: ^bb15
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc145)
    %39 = cir.abs %38 poison : !s32i loc(#loc146)
    %40 = cir.cast(integral, %39 : !s32i), !s64i loc(#loc146)
    %41 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc147)
    %42 = cir.const #cir.int<2147483647> : !s32i loc(#loc148)
    %43 = cir.cast(int_to_float, %42 : !s32i), !cir.double loc(#loc148)
    %44 = cir.call @sqrt(%43) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc147)
    %45 = cir.cast(float_to_int, %44 : !cir.double), !s64i loc(#loc147)
    %46 = cir.cmp(lt, %40, %45) : !s64i, !cir.bool loc(#loc326)
    cir.brcond %46 ^bb17, ^bb18 loc(#loc144)
  ^bb17:  // pred: ^bb16
    %47 = cir.const #true loc(#loc144)
    cir.br ^bb19(%47 : !cir.bool) loc(#loc144)
  ^bb18:  // pred: ^bb16
    %48 = cir.const #false loc(#loc144)
    cir.br ^bb19(%48 : !cir.bool) loc(#loc144)
  ^bb19(%49: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:28)):  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc144)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22(%49 : !cir.bool) loc(#loc144)
  ^bb21:  // pred: ^bb15
    %50 = cir.const #false loc(#loc144)
    cir.br ^bb22(%50 : !cir.bool) loc(#loc144)
  ^bb22(%51: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:28)):  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc144)
  ^bb23:  // pred: ^bb22
    cir.brcond %51 ^bb24, ^bb25 loc(#loc327)
  ^bb24:  // pred: ^bb23
    %52 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc153)
    %53 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc104)
    %54 = cir.binop(mul, %52, %53) nsw : !s32i loc(#loc153)
    cir.store %54, %1 : !s32i, !cir.ptr<!s32i> loc(#loc310)
    %55 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc154)
    cir.call @printIntLine(%55) : (!s32i) -> () loc(#loc155)
    cir.br ^bb26 loc(#loc151)
  ^bb25:  // pred: ^bb23
    %56 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc98)
    %57 = cir.cast(array_to_ptrdecay, %56 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc98)
    cir.call @printLine(%57) : (!cir.ptr<!s8i>) -> () loc(#loc156)
    cir.br ^bb26 loc(#loc141)
  ^bb26:  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc141)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc133)
  ^bb28:  // 2 preds: ^bb13, ^bb27
    cir.br ^bb29 loc(#loc133)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc100)
  } loc(#loc308)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc158)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc159)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc329)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc329)
    cir.return %2 : !s32i loc(#loc329)
  } loc(#loc328)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc331)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc332)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc333)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc169)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc334)
    cir.br ^bb1 loc(#loc335)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc336)
    %5 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc173)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc173)
    cir.brcond %6 ^bb2, ^bb10 loc(#loc337)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc338)
  ^bb3:  // pred: ^bb2
    %7 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc331)
    cir.store %7, %0 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc331)
    cir.br ^bb4 loc(#loc339)
  ^bb4:  // pred: ^bb3
    %8 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc180)
    %9 = cir.const #cir.int<3> : !s32i loc(#loc181)
    %10 = cir.cast(integral, %9 : !s32i), !u64i loc(#loc181)
    %11 = cir.const #cir.int<4> : !u64i loc(#loc181)
    %12 = cir.binop(mul, %10, %11) : !u64i loc(#loc181)
    %13 = cir.const #cir.int<2> : !s32i loc(#loc181)
    %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc181)
    %15 = cir.binop(add, %12, %14) : !u64i loc(#loc181)
    %16 = cir.cast(integral, %15 : !u64i), !s32i loc(#loc181)
    %17 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc272)
    %18 = cir.load %17 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc182)
    %19 = cir.call @fgets(%8, %16, %18) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc183)
    %20 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc184)
    %21 = cir.cast(bitcast, %20 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc184)
    %22 = cir.cmp(ne, %19, %21) : !cir.ptr<!s8i>, !cir.bool loc(#loc340)
    cir.brcond %22 ^bb5, ^bb6 loc(#loc341)
  ^bb5:  // pred: ^bb4
    %23 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc188)
    %24 = cir.call @atoi(%23) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc189)
    cir.store %24, %2 : !s32i, !cir.ptr<!s32i> loc(#loc342)
    cir.br ^bb7 loc(#loc186)
  ^bb6:  // pred: ^bb4
    %25 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc192)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc193)
    cir.br ^bb7 loc(#loc179)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc179)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc177)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc172)
  ^bb10:  // 2 preds: ^bb1, ^bb9
    cir.br ^bb11 loc(#loc172)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc343)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc344)
    %28 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc196)
    %29 = cir.cast(int_to_bool, %28 : !s32i), !cir.bool loc(#loc196)
    cir.brcond %29 ^bb13, ^bb27 loc(#loc345)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc346)
  ^bb14:  // pred: ^bb13
    %30 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc201)
    %31 = cir.const #cir.int<2147483647> : !s32i loc(#loc202)
    %32 = cir.unary(minus, %31) : !s32i, !s32i loc(#loc202)
    %33 = cir.const #cir.int<1> : !s32i loc(#loc202)
    %34 = cir.binop(sub, %32, %33) nsw : !s32i loc(#loc202)
    %35 = cir.cmp(gt, %30, %34) : !s32i, !cir.bool loc(#loc347)
    cir.brcond %35 ^bb15, ^bb20 loc(#loc203)
  ^bb15:  // pred: ^bb14
    %36 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc204)
    %37 = cir.abs %36 poison : !s32i loc(#loc205)
    %38 = cir.cast(integral, %37 : !s32i), !s64i loc(#loc205)
    %39 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc206)
    %40 = cir.const #cir.int<2147483647> : !s32i loc(#loc207)
    %41 = cir.cast(int_to_float, %40 : !s32i), !cir.double loc(#loc207)
    %42 = cir.call @sqrt(%41) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc206)
    %43 = cir.cast(float_to_int, %42 : !cir.double), !s64i loc(#loc206)
    %44 = cir.cmp(lt, %38, %43) : !s64i, !cir.bool loc(#loc348)
    cir.brcond %44 ^bb16, ^bb17 loc(#loc203)
  ^bb16:  // pred: ^bb15
    %45 = cir.const #true loc(#loc203)
    cir.br ^bb18(%45 : !cir.bool) loc(#loc203)
  ^bb17:  // pred: ^bb15
    %46 = cir.const #false loc(#loc203)
    cir.br ^bb18(%46 : !cir.bool) loc(#loc203)
  ^bb18(%47: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc203)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%47 : !cir.bool) loc(#loc203)
  ^bb20:  // pred: ^bb14
    %48 = cir.const #false loc(#loc203)
    cir.br ^bb21(%48 : !cir.bool) loc(#loc203)
  ^bb21(%49: !cir.bool loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:28)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc203)
  ^bb22:  // pred: ^bb21
    cir.brcond %49 ^bb23, ^bb24 loc(#loc349)
  ^bb23:  // pred: ^bb22
    %50 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc212)
    %51 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    %52 = cir.binop(mul, %50, %51) nsw : !s32i loc(#loc212)
    cir.store %52, %1 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    %53 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc213)
    cir.call @printIntLine(%53) : (!s32i) -> () loc(#loc214)
    cir.br ^bb25 loc(#loc210)
  ^bb24:  // pred: ^bb22
    %54 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc215)
    %55 = cir.cast(array_to_ptrdecay, %54 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc215)
    cir.call @printLine(%55) : (!cir.ptr<!s8i>) -> () loc(#loc216)
    cir.br ^bb25 loc(#loc200)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc200)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc195)
  ^bb27:  // 2 preds: ^bb12, ^bb26
    cir.br ^bb28 loc(#loc195)
  ^bb28:  // pred: ^bb27
    cir.return loc(#loc162)
  } loc(#loc330)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc351)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc352)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc223)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc353)
    cir.br ^bb1 loc(#loc354)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc355)
    %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc227)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc227)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc356)
  ^bb2:  // pred: ^bb1
    %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc232)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc232)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc233)
    cir.br ^bb4 loc(#loc230)
  ^bb3:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc234)
    cir.store %8, %1 : !s32i, !cir.ptr<!s32i> loc(#loc357)
    cir.br ^bb4 loc(#loc226)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc226)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc358)
  ^bb6:  // pred: ^bb5
    %9 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc359)
    %10 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc238)
    %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc238)
    cir.brcond %11 ^bb7, ^bb10 loc(#loc360)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc361)
  ^bb8:  // pred: ^bb7
    %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc243)
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc220)
    %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc243)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc351)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc244)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc245)
    cir.br ^bb9 loc(#loc242)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc237)
  ^bb10:  // 2 preds: ^bb6, ^bb9
    cir.br ^bb11 loc(#loc237)
  ^bb11:  // pred: ^bb10
    cir.return loc(#loc218)
  } loc(#loc350)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc363)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc364)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc252)
    cir.store %2, %1 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.br ^bb1 loc(#loc366)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc367)
    %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc256)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc256)
    cir.brcond %5 ^bb2, ^bb3 loc(#loc368)
  ^bb2:  // pred: ^bb1
    %6 = cir.const #cir.int<2> : !s32i loc(#loc259)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc369)
    cir.br ^bb3 loc(#loc255)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc255)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc370)
  ^bb5:  // pred: ^bb4
    %7 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc371)
    %8 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc263)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc263)
    cir.brcond %9 ^bb6, ^bb9 loc(#loc372)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc373)
  ^bb7:  // pred: ^bb6
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc268)
    %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc249)
    %12 = cir.binop(mul, %10, %11) nsw : !s32i loc(#loc268)
    cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc363)
    %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc269)
    cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc270)
    cir.br ^bb8 loc(#loc267)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc262)
  ^bb9:  // 2 preds: ^bb5, ^bb8
    cir.br ^bb10 loc(#loc262)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc247)
  } loc(#loc362)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fgets_square_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":56:27)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":39:1)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":68:1)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":47:13)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":47:49)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:13)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:33)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":41:5)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":41:9)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":43:12)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":43:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:5)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":59:5)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:8)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":44:26)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":45:5)
#loc27 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":46:9)
#loc28 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":58:9)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":57:13)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:23)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:36)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:53)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:17)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":49:63)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":50:13)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":53:13)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":55:13)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:29)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:24)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:17)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":52:40)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":56:17)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":67:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:8)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":60:26)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":61:5)
#loc49 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":62:9)
#loc50 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":66:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":64:26)
#loc52 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":65:26)
#loc53 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":65:13)
#loc54 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":200:1)
#loc55 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":206:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":202:5)
#loc57 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":202:14)
#loc58 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":203:5)
#loc59 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":203:14)
#loc60 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":204:5)
#loc61 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":204:14)
#loc62 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":205:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":205:14)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":222:15)
#loc69 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":224:15)
#loc70 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":227:15)
#loc71 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":229:15)
#loc72 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":217:1)
#loc73 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":232:1)
#loc78 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":218:1)
#loc79 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:27)
#loc80 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:22)
#loc81 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":220:5)
#loc82 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":222:5)
#loc83 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":223:5)
#loc84 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":223:55)
#loc85 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":224:5)
#loc86 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":227:5)
#loc87 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":228:5)
#loc88 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":228:54)
#loc89 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":229:5)
#loc90 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":231:12)
#loc91 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":231:5)
#loc92 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":27:1)
#loc93 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":30:1)
#loc94 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":29:12)
#loc95 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":29:5)
#loc96 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":99:19)
#loc97 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc98 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":111:23)
#loc99 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":75:1)
#loc100 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":114:1)
#loc101 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":83:13)
#loc102 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":83:49)
#loc103 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:13)
#loc104 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:33)
#loc105 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":77:5)
#loc106 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":77:9)
#loc107 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":79:12)
#loc108 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":79:5)
#loc109 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:5)
#loc110 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":95:5)
#loc111 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:8)
#loc112 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":80:26)
#loc113 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":81:5)
#loc114 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":82:9)
#loc115 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":94:9)
#loc116 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:13)
#loc117 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":93:13)
#loc118 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:23)
#loc119 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:36)
#loc120 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:53)
#loc121 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:17)
#loc122 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":85:63)
#loc123 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":86:13)
#loc124 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":89:13)
#loc125 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":91:13)
#loc126 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:29)
#loc127 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:24)
#loc128 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:17)
#loc129 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":88:40)
#loc130 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":92:27)
#loc131 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":92:17)
#loc132 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:5)
#loc133 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":113:5)
#loc134 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:8)
#loc135 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":96:27)
#loc136 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":97:5)
#loc137 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":100:5)
#loc138 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":102:5)
#loc139 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":99:9)
#loc140 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:9)
#loc141 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":112:9)
#loc142 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:13)
#loc143 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:20)
#loc145 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:35)
#loc146 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:31)
#loc147 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:49)
#loc148 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:62)
#loc149 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":104:69)
#loc150 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":105:9)
#loc151 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":108:9)
#loc152 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":110:9)
#loc153 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":106:26)
#loc154 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":107:26)
#loc155 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":107:13)
#loc156 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":111:13)
#loc157 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":32:1)
#loc158 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":35:1)
#loc159 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":34:12)
#loc160 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":34:5)
#loc161 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":117:1)
#loc162 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":151:1)
#loc163 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":125:13)
#loc164 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":125:49)
#loc165 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:13)
#loc166 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:33)
#loc167 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":119:5)
#loc168 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":119:9)
#loc169 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":121:12)
#loc170 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":121:5)
#loc171 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:5)
#loc172 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":137:5)
#loc173 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:8)
#loc174 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":122:26)
#loc175 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":123:5)
#loc176 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":124:9)
#loc177 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":136:9)
#loc178 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:13)
#loc179 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":135:13)
#loc180 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:23)
#loc181 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:36)
#loc182 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:53)
#loc183 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:17)
#loc184 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":127:63)
#loc185 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":128:13)
#loc186 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":131:13)
#loc187 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":133:13)
#loc188 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:29)
#loc189 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:24)
#loc190 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:17)
#loc191 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":130:40)
#loc192 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":134:27)
#loc193 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":134:17)
#loc194 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:5)
#loc195 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":150:5)
#loc196 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:8)
#loc197 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":138:26)
#loc198 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":139:5)
#loc199 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:9)
#loc200 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":149:9)
#loc201 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:13)
#loc202 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:20)
#loc204 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:35)
#loc205 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:31)
#loc206 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:49)
#loc207 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:62)
#loc208 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":141:69)
#loc209 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":142:9)
#loc210 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":145:9)
#loc211 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":147:9)
#loc212 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":143:26)
#loc213 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":144:26)
#loc214 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":144:13)
#loc215 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":148:23)
#loc216 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":148:13)
#loc217 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":154:1)
#loc218 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":177:1)
#loc219 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:13)
#loc220 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:33)
#loc221 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":156:5)
#loc222 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":156:9)
#loc223 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":158:12)
#loc224 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":158:5)
#loc225 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:5)
#loc226 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":168:5)
#loc227 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:8)
#loc228 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":159:27)
#loc229 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":160:5)
#loc230 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":163:5)
#loc231 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":165:5)
#loc232 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":162:19)
#loc233 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":162:9)
#loc234 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":167:16)
#loc235 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":167:9)
#loc236 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:5)
#loc237 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":176:5)
#loc238 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:8)
#loc239 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":169:26)
#loc240 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":170:5)
#loc241 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":171:9)
#loc242 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":175:9)
#loc243 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":173:26)
#loc244 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":174:26)
#loc245 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":174:13)
#loc246 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":180:1)
#loc247 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":198:1)
#loc248 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:13)
#loc249 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:33)
#loc250 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":182:5)
#loc251 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":182:9)
#loc252 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":184:12)
#loc253 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":184:5)
#loc254 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:5)
#loc255 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":189:5)
#loc256 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:8)
#loc257 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":185:26)
#loc258 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":186:5)
#loc259 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":188:16)
#loc260 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":188:9)
#loc261 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:5)
#loc262 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":197:5)
#loc263 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:8)
#loc264 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":190:26)
#loc265 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":191:5)
#loc266 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":192:9)
#loc267 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":196:9)
#loc268 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":194:26)
#loc269 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":195:26)
#loc270 = loc("CWE190_Integer_Overflow__int_fgets_square_08.c":195:13)
#loc271 = loc(fused[#loc1, #loc2])
#loc272 = loc(fused[#loc3, #loc4])
#loc273 = loc(fused[#loc5, #loc6])
#loc274 = loc(fused[#loc7, #loc8])
#loc275 = loc(fused[#loc10, #loc11])
#loc276 = loc(fused[#loc12, #loc13])
#loc277 = loc(fused[#loc14, #loc15])
#loc278 = loc(fused[#loc16, #loc17])
#loc279 = loc(fused[#loc18, #loc19])
#loc280 = loc(fused[#loc21, #loc20])
#loc281 = loc(fused[#loc22, #loc23])
#loc282 = loc(fused[#loc24, #loc25])
#loc283 = loc(fused[#loc26, #loc23])
#loc284 = loc(fused[#loc27, #loc28])
#loc285 = loc(fused[#loc29, #loc30])
#loc286 = loc(fused[#loc34, #loc35])
#loc287 = loc(fused[#loc36, #loc37, #loc38, #loc30])
#loc288 = loc(fused[#loc41, #loc42])
#loc289 = loc(fused[#loc44, #loc45])
#loc290 = loc(fused[#loc46, #loc47])
#loc291 = loc(fused[#loc48, #loc45])
#loc292 = loc(fused[#loc49, #loc50])
#loc293 = loc(fused[#loc54, #loc55])
#loc294 = loc(fused[#loc56, #loc57])
#loc295 = loc(fused[#loc58, #loc59])
#loc296 = loc(fused[#loc60, #loc61])
#loc297 = loc(fused[#loc62, #loc63])
#loc298 = loc(fused[#loc64, #loc65])
#loc299 = loc(fused[#loc66, #loc67])
#loc300 = loc(fused[#loc72, #loc73])
#loc303 = loc(fused[#loc83, #loc84])
#loc304 = loc(fused[#loc87, #loc88])
#loc305 = loc(fused[#loc91, #loc90])
#loc306 = loc(fused[#loc92, #loc93])
#loc307 = loc(fused[#loc95, #loc94])
#loc308 = loc(fused[#loc99, #loc100])
#loc309 = loc(fused[#loc101, #loc102])
#loc310 = loc(fused[#loc103, #loc104])
#loc311 = loc(fused[#loc105, #loc106])
#loc312 = loc(fused[#loc108, #loc107])
#loc313 = loc(fused[#loc109, #loc110])
#loc314 = loc(fused[#loc111, #loc112])
#loc315 = loc(fused[#loc113, #loc110])
#loc316 = loc(fused[#loc114, #loc115])
#loc317 = loc(fused[#loc116, #loc117])
#loc318 = loc(fused[#loc121, #loc122])
#loc319 = loc(fused[#loc123, #loc124, #loc125, #loc117])
#loc320 = loc(fused[#loc128, #loc129])
#loc321 = loc(fused[#loc132, #loc133])
#loc322 = loc(fused[#loc134, #loc135])
#loc323 = loc(fused[#loc136, #loc137, #loc138, #loc133])
#loc324 = loc(fused[#loc140, #loc141])
#loc325 = loc(fused[#loc142, #loc143])
#loc326 = loc(fused[#loc146, #loc149])
#loc327 = loc(fused[#loc150, #loc151, #loc152, #loc141])
#loc328 = loc(fused[#loc157, #loc158])
#loc329 = loc(fused[#loc160, #loc159])
#loc330 = loc(fused[#loc161, #loc162])
#loc331 = loc(fused[#loc163, #loc164])
#loc332 = loc(fused[#loc165, #loc166])
#loc333 = loc(fused[#loc167, #loc168])
#loc334 = loc(fused[#loc170, #loc169])
#loc335 = loc(fused[#loc171, #loc172])
#loc336 = loc(fused[#loc173, #loc174])
#loc337 = loc(fused[#loc175, #loc172])
#loc338 = loc(fused[#loc176, #loc177])
#loc339 = loc(fused[#loc178, #loc179])
#loc340 = loc(fused[#loc183, #loc184])
#loc341 = loc(fused[#loc185, #loc186, #loc187, #loc179])
#loc342 = loc(fused[#loc190, #loc191])
#loc343 = loc(fused[#loc194, #loc195])
#loc344 = loc(fused[#loc196, #loc197])
#loc345 = loc(fused[#loc198, #loc195])
#loc346 = loc(fused[#loc199, #loc200])
#loc347 = loc(fused[#loc201, #loc202])
#loc348 = loc(fused[#loc205, #loc208])
#loc349 = loc(fused[#loc209, #loc210, #loc211, #loc200])
#loc350 = loc(fused[#loc217, #loc218])
#loc351 = loc(fused[#loc219, #loc220])
#loc352 = loc(fused[#loc221, #loc222])
#loc353 = loc(fused[#loc224, #loc223])
#loc354 = loc(fused[#loc225, #loc226])
#loc355 = loc(fused[#loc227, #loc228])
#loc356 = loc(fused[#loc229, #loc230, #loc231, #loc226])
#loc357 = loc(fused[#loc235, #loc234])
#loc358 = loc(fused[#loc236, #loc237])
#loc359 = loc(fused[#loc238, #loc239])
#loc360 = loc(fused[#loc240, #loc237])
#loc361 = loc(fused[#loc241, #loc242])
#loc362 = loc(fused[#loc246, #loc247])
#loc363 = loc(fused[#loc248, #loc249])
#loc364 = loc(fused[#loc250, #loc251])
#loc365 = loc(fused[#loc253, #loc252])
#loc366 = loc(fused[#loc254, #loc255])
#loc367 = loc(fused[#loc256, #loc257])
#loc368 = loc(fused[#loc258, #loc255])
#loc369 = loc(fused[#loc260, #loc259])
#loc370 = loc(fused[#loc261, #loc262])
#loc371 = loc(fused[#loc263, #loc264])
#loc372 = loc(fused[#loc265, #loc262])
#loc373 = loc(fused[#loc266, #loc267])
