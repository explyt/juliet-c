!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":30:16)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":133:10)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":133:14)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":133:20)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":133:32)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":65:16)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:27)
#true = #cir.bool<true> : !cir.bool
#loc164 = loc(fused[#loc56, #loc57])
#loc165 = loc(fused[#loc58, #loc59])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc144)
  cir.func private @printIntLine(!s32i) loc(#loc145)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc146)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc148)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc15)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    cir.br ^bb1 loc(#loc151)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc151)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc19)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc19)
    cir.brcond %5 ^bb3, ^bb8 loc(#loc19)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc20)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc20)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc20)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc20)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc20)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc20)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc20)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc20)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc20)
    cir.br ^bb6(%21 : !u32i) loc(#loc20)
  ^bb5:  // pred: ^bb3
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc20)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc20)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc20)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc20)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc20)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc20)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc20)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc20)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc20)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc20)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc20)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc20)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc20)
    cir.br ^bb6(%37 : !u32i) loc(#loc20)
  ^bb6(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_16.c":30:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc20)
  ^bb7:  // pred: ^bb6
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc20)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.br ^bb8 loc(#loc22)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc153)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc153)
  ^bb11:  // pred: ^bb10
    %40 = cir.const #cir.int<1> : !s32i loc(#loc25)
    %41 = cir.cast(int_to_bool, %40 : !s32i), !cir.bool loc(#loc25)
    cir.brcond %41 ^bb12, ^bb20 loc(#loc25)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc154)
  ^bb13:  // pred: ^bb12
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc148)
    cir.store %42, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc148)
    cir.br ^bb14 loc(#loc155)
  ^bb14:  // pred: ^bb13
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
    %44 = cir.const #cir.int<10> : !s32i loc(#loc31)
    %45 = cir.cmp(lt, %43, %44) : !s32i, !cir.bool loc(#loc156)
    cir.brcond %45 ^bb15, ^bb16 loc(#loc157)
  ^bb15:  // pred: ^bb14
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    %47 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
    %48 = cir.ptr_stride(%47 : !cir.ptr<!s32i>, %46 : !s32i), !cir.ptr<!s32i> loc(#loc36)
    %49 = cir.load %48 : !cir.ptr<!s32i>, !s32i loc(#loc36)
    cir.call @printIntLine(%49) : (!s32i) -> () loc(#loc37)
    cir.br ^bb17 loc(#loc33)
  ^bb16:  // pred: ^bb14
    %50 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
    %51 = cir.cast(array_to_ptrdecay, %50 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%51) : (!cir.ptr<!s8i>) -> () loc(#loc38)
    cir.br ^bb17 loc(#loc29)
  ^bb17:  // 2 preds: ^bb15, ^bb16
    cir.br ^bb18 loc(#loc29)
  ^bb18:  // pred: ^bb17
    cir.br ^bb19 loc(#loc27)
  ^bb19:  // pred: ^bb18
    cir.br ^bb20 loc(#loc39)
  ^bb20:  // 2 preds: ^bb11, ^bb19
    cir.br ^bb21 loc(#loc24)
  ^bb21:  // pred: ^bb20
    cir.return loc(#loc9)
  } loc(#loc147)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc159)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc160)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    cir.return loc(#loc41)
  } loc(#loc158)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc161)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc162)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc52)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc53)
  cir.func @main(%arg0: !s32i loc(fused[#loc56, #loc57]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc58, #loc59])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc164)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc165)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc60)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc61)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc62)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc62)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc63)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc50)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %8 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc166)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_16_good() : () -> () loc(#loc65)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc51)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc52)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc68)
    %13 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_16_bad() : () -> () loc(#loc69)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc53)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc53)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc71)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc72)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc168)
    cir.return %17 : !s32i loc(#loc168)
  } loc(#loc163)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc170)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc171)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc81)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc82)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    cir.br ^bb1 loc(#loc173)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc173)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %5 ^bb3, ^bb8 loc(#loc86)
  ^bb3:  // pred: ^bb2
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %7 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %8 = cir.binop(and, %6, %7) : !s32i loc(#loc87)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc87)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc87)
  ^bb4:  // pred: ^bb3
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc87)
    %12 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc87)
    %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc87)
    %16 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc87)
    %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc87)
    %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc87)
    %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc87)
    cir.br ^bb6(%21 : !u32i) loc(#loc87)
  ^bb5:  // pred: ^bb3
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc87)
    %24 = cir.const #cir.int<30> : !s32i loc(#loc87)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc87)
    %26 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc87)
    %28 = cir.const #cir.int<15> : !s32i loc(#loc87)
    %29 = cir.shift(left, %27 : !u32i, %28 : !s32i) -> !u32i loc(#loc87)
    %30 = cir.binop(xor, %25, %29) : !u32i loc(#loc87)
    %31 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc87)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc87)
    %33 = cir.binop(xor, %30, %32) : !u32i loc(#loc87)
    %34 = cir.unary(minus, %33) : !u32i, !u32i loc(#loc87)
    %35 = cir.const #cir.int<1> : !s32i loc(#loc87)
    %36 = cir.cast(integral, %35 : !s32i), !u32i loc(#loc87)
    %37 = cir.binop(sub, %34, %36) : !u32i loc(#loc87)
    cir.br ^bb6(%37 : !u32i) loc(#loc87)
  ^bb6(%38: !u32i loc("CWE127_Buffer_Underread__CWE839_rand_16.c":65:16)):  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc87)
  ^bb7:  // pred: ^bb6
    %39 = cir.cast(integral, %38 : !u32i), !s32i loc(#loc87)
    cir.store %39, %1 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb8 loc(#loc89)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc85)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc175)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc175)
  ^bb11:  // pred: ^bb10
    %40 = cir.const #cir.int<1> : !s32i loc(#loc92)
    %41 = cir.cast(int_to_bool, %40 : !s32i), !cir.bool loc(#loc92)
    cir.brcond %41 ^bb12, ^bb28 loc(#loc92)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc176)
  ^bb13:  // pred: ^bb12
    %42 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc170)
    cir.store %42, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc170)
    cir.br ^bb14 loc(#loc177)
  ^bb14:  // pred: ^bb13
    %43 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc97)
    %44 = cir.const #cir.int<0> : !s32i loc(#loc98)
    %45 = cir.cmp(ge, %43, %44) : !s32i, !cir.bool loc(#loc178)
    cir.brcond %45 ^bb15, ^bb20 loc(#loc99)
  ^bb15:  // pred: ^bb14
    %46 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc100)
    %47 = cir.const #cir.int<10> : !s32i loc(#loc101)
    %48 = cir.cmp(lt, %46, %47) : !s32i, !cir.bool loc(#loc179)
    cir.brcond %48 ^bb16, ^bb17 loc(#loc99)
  ^bb16:  // pred: ^bb15
    %49 = cir.const #true loc(#loc99)
    cir.br ^bb18(%49 : !cir.bool) loc(#loc99)
  ^bb17:  // pred: ^bb15
    %50 = cir.const #false loc(#loc99)
    cir.br ^bb18(%50 : !cir.bool) loc(#loc99)
  ^bb18(%51: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:27)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc99)
  ^bb19:  // pred: ^bb18
    cir.br ^bb21(%51 : !cir.bool) loc(#loc99)
  ^bb20:  // pred: ^bb14
    %52 = cir.const #false loc(#loc99)
    cir.br ^bb21(%52 : !cir.bool) loc(#loc99)
  ^bb21(%53: !cir.bool loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:27)):  // 2 preds: ^bb19, ^bb20
    cir.br ^bb22 loc(#loc99)
  ^bb22:  // pred: ^bb21
    cir.brcond %53 ^bb23, ^bb24 loc(#loc180)
  ^bb23:  // pred: ^bb22
    %54 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %55 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc107)
    %56 = cir.ptr_stride(%55 : !cir.ptr<!s32i>, %54 : !s32i), !cir.ptr<!s32i> loc(#loc107)
    %57 = cir.load %56 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.call @printIntLine(%57) : (!s32i) -> () loc(#loc108)
    cir.br ^bb25 loc(#loc104)
  ^bb24:  // pred: ^bb22
    %58 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc74)
    %59 = cir.cast(array_to_ptrdecay, %58 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%59) : (!cir.ptr<!s8i>) -> () loc(#loc109)
    cir.br ^bb25 loc(#loc96)
  ^bb25:  // 2 preds: ^bb23, ^bb24
    cir.br ^bb26 loc(#loc96)
  ^bb26:  // pred: ^bb25
    cir.br ^bb27 loc(#loc94)
  ^bb27:  // pred: ^bb26
    cir.br ^bb28 loc(#loc110)
  ^bb28:  // 2 preds: ^bb11, ^bb27
    cir.br ^bb29 loc(#loc91)
  ^bb29:  // pred: ^bb28
    cir.return loc(#loc76)
  } loc(#loc169)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc183)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc117)
    %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc118)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc184)
    cir.br ^bb1 loc(#loc185)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc185)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc122)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc122)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc122)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<7> : !s32i loc(#loc123)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc186)
    cir.br ^bb4 loc(#loc125)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc121)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc187)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc187)
  ^bb7:  // pred: ^bb6
    %7 = cir.const #cir.int<1> : !s32i loc(#loc128)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc128)
    cir.brcond %8 ^bb8, ^bb16 loc(#loc128)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc188)
  ^bb9:  // pred: ^bb8
    %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc182)
    cir.store %9, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc182)
    cir.br ^bb10 loc(#loc189)
  ^bb10:  // pred: ^bb9
    %10 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc133)
    %11 = cir.const #cir.int<10> : !s32i loc(#loc134)
    %12 = cir.cmp(lt, %10, %11) : !s32i, !cir.bool loc(#loc190)
    cir.brcond %12 ^bb11, ^bb12 loc(#loc191)
  ^bb11:  // pred: ^bb10
    %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    %14 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc139)
    %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc139)
    %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc140)
    cir.br ^bb13 loc(#loc136)
  ^bb12:  // pred: ^bb10
    %17 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc141)
    %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc141)
    cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    cir.br ^bb13 loc(#loc132)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc132)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc130)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc143)
  ^bb16:  // 2 preds: ^bb7, ^bb15
    cir.br ^bb17 loc(#loc127)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc112)
  } loc(#loc181)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":45:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":22:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":50:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":36:13)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":36:34)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":24:5)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":24:9)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":26:13)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":26:12)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":26:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":27:5)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":32:5)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":27:11)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":30:9)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":31:9)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":33:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":49:5)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":33:11)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":35:9)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":47:9)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":39:13)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":46:13)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":39:17)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":39:24)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":40:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":42:13)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":44:13)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":41:37)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":41:30)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":41:17)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":45:17)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":48:9)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":118:1)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":122:1)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":120:5)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":120:13)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":121:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":121:13)
#loc46 = loc("/usr/include/stdlib.h":575:1)
#loc47 = loc("/usr/include/stdlib.h":575:41)
#loc48 = loc("/usr/include/time.h":76:1)
#loc49 = loc("/usr/include/time.h":76:38)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":138:15)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":140:15)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":143:15)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":145:15)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":133:1)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":148:1)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":134:1)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":136:27)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":136:22)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":136:5)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":138:5)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":139:5)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":139:50)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":140:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":143:5)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":144:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":144:49)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":145:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":147:12)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":147:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":79:27)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":57:1)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":84:1)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":71:13)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":71:34)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":59:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":59:9)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":61:13)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":61:12)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":61:5)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":62:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":67:5)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":62:11)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":65:9)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":66:9)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":68:5)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":83:5)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":68:11)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":70:9)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":81:9)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:13)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":80:13)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:17)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:25)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:30)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:38)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":73:40)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":74:13)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":76:13)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":78:13)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":75:37)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":75:30)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":75:17)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":79:17)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":82:9)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":87:1)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":116:1)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":102:13)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":102:34)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":89:5)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":89:9)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":91:13)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":91:12)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":91:5)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":92:5)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":98:5)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":92:11)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":96:16)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":96:9)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":97:9)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":99:5)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":115:5)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":99:11)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":101:9)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":113:9)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":105:13)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":112:13)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":105:17)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":105:24)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":106:13)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":108:13)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":110:13)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":107:37)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":107:30)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":107:17)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":111:27)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":111:17)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_rand_16.c":114:9)
#loc144 = loc(fused[#loc1, #loc2])
#loc145 = loc(fused[#loc3, #loc4])
#loc146 = loc(fused[#loc5, #loc6])
#loc147 = loc(fused[#loc8, #loc9])
#loc148 = loc(fused[#loc10, #loc11])
#loc149 = loc(fused[#loc12, #loc13])
#loc150 = loc(fused[#loc16, #loc14])
#loc151 = loc(fused[#loc17, #loc18])
#loc152 = loc(fused[#loc21, #loc20])
#loc153 = loc(fused[#loc23, #loc24])
#loc154 = loc(fused[#loc26, #loc27])
#loc155 = loc(fused[#loc28, #loc29])
#loc156 = loc(fused[#loc30, #loc31])
#loc157 = loc(fused[#loc32, #loc33, #loc34, #loc29])
#loc158 = loc(fused[#loc40, #loc41])
#loc159 = loc(fused[#loc42, #loc43])
#loc160 = loc(fused[#loc44, #loc45])
#loc161 = loc(fused[#loc46, #loc47])
#loc162 = loc(fused[#loc48, #loc49])
#loc163 = loc(fused[#loc54, #loc55])
#loc166 = loc(fused[#loc65, #loc66])
#loc167 = loc(fused[#loc69, #loc70])
#loc168 = loc(fused[#loc73, #loc72])
#loc169 = loc(fused[#loc75, #loc76])
#loc170 = loc(fused[#loc77, #loc78])
#loc171 = loc(fused[#loc79, #loc80])
#loc172 = loc(fused[#loc83, #loc81])
#loc173 = loc(fused[#loc84, #loc85])
#loc174 = loc(fused[#loc88, #loc87])
#loc175 = loc(fused[#loc90, #loc91])
#loc176 = loc(fused[#loc93, #loc94])
#loc177 = loc(fused[#loc95, #loc96])
#loc178 = loc(fused[#loc97, #loc98])
#loc179 = loc(fused[#loc100, #loc102])
#loc180 = loc(fused[#loc103, #loc104, #loc105, #loc96])
#loc181 = loc(fused[#loc111, #loc112])
#loc182 = loc(fused[#loc113, #loc114])
#loc183 = loc(fused[#loc115, #loc116])
#loc184 = loc(fused[#loc119, #loc117])
#loc185 = loc(fused[#loc120, #loc121])
#loc186 = loc(fused[#loc124, #loc123])
#loc187 = loc(fused[#loc126, #loc127])
#loc188 = loc(fused[#loc129, #loc130])
#loc189 = loc(fused[#loc131, #loc132])
#loc190 = loc(fused[#loc133, #loc134])
#loc191 = loc(fused[#loc135, #loc136, #loc137, #loc132])
