!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.record<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.record<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.record<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty__IO_FILE = !cir.record<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.record<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_31.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc66)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc67)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc68)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc69)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc9)
  cir.func private @__assert_fail(!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) extra(#fn_attr) loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data > ASSERT_VALUE\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"CWE617_Reachable_Assertion__fgets_31.c\00" : !cir.array<!s8i x 39>> : !cir.array<!s8i x 39> {alignment = 1 : i64} loc(#loc12)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"void CWE617_Reachable_Assertion__fgets_31_bad()\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc12)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_31_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc72)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc17)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc18)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    cir.scope {
      %3 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc75)
      %4 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc75)
      cir.store %4, %3 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc75)
      cir.scope {
        %5 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc26)
        %6 = cir.const #cir.int<3> : !s32i loc(#loc27)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc27)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc27)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc27)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc27)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc27)
        %12 = cir.binop(add, %9, %11) : !u64i loc(#loc27)
        %13 = cir.cast(integral, %12 : !u64i), !s32i loc(#loc27)
        %14 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc67)
        %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc28)
        %16 = cir.call @fgets(%5, %13, %15) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc29)
        %17 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc30)
        %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc30)
        %19 = cir.cmp(ne, %16, %18) : !cir.ptr<!s8i>, !cir.bool loc(#loc77)
        cir.if %19 {
          %20 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
          %21 = cir.call @atoi(%20) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc35)
          cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc79)
        } else {
          %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc9)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc9)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc78)
      } loc(#loc76)
    } loc(#loc74)
    cir.scope {
      %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc81)
      %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc82)
      %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc81)
      %6 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc44)
      cir.store %6, %4 : !s32i, !cir.ptr<!s32i> loc(#loc82)
      %7 = cir.const #cir.int<4> : !u64i loc(#loc12)
      cir.scope {
        cir.scope {
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc12)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc12)
          %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc12)
          cir.if %10 {
          } else {
            %11 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc12)
            %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc12)
            %13 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc12)
            %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc12)
            %15 = cir.const #cir.int<49> : !s32i loc(#loc12)
            %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc12)
            %17 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc12)
            %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @__assert_fail(%12, %14, %16, %18) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc12)
          } loc(#loc12)
        } loc(#loc12)
      } loc(#loc12)
    } loc(#loc80)
    cir.return loc(#loc14)
  } loc(#loc71)
  cir.func no_proto @CWE617_Reachable_Assertion__fgets_31_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc47)
    cir.return loc(#loc46)
  } loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"void goodG2B()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc86)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc55)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    %3 = cir.const #cir.int<5> : !s32i loc(#loc57)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %5 = cir.binop(add, %3, %4) nsw : !s32i loc(#loc57)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc88)
    cir.scope {
      %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc90)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc91)
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc63)
      cir.store %8, %6 : !s32i, !cir.ptr<!s32i> loc(#loc90)
      %9 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc65)
      cir.store %9, %7 : !s32i, !cir.ptr<!s32i> loc(#loc91)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc49)
      cir.scope {
        cir.scope {
          %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc49)
          %12 = cir.const #cir.int<5> : !s32i loc(#loc49)
          %13 = cir.cmp(gt, %11, %12) : !s32i, !cir.bool loc(#loc49)
          cir.if %13 {
          } else {
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc49)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc49)
            %16 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 39>> loc(#loc49)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 39>>), !cir.ptr<!s8i> loc(#loc49)
            %18 = cir.const #cir.int<69> : !s32i loc(#loc49)
            %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc49)
            %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc49)
            %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @__assert_fail(%15, %17, %19, %21) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !u32i, !cir.ptr<!s8i>) -> () extra(#fn_attr) loc(#loc49)
          } loc(#loc49)
        } loc(#loc49)
      } loc(#loc49)
    } loc(#loc89)
    cir.return loc(#loc51)
  } loc(#loc85)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE617_Reachable_Assertion/CWE617_Reachable_Assertion__fgets_31.c":0:0)
#loc1 = loc("/usr/include/stdio.h":654:1)
#loc2 = loc("/usr/include/stdio.h":655:59)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("/usr/include/stdlib.h":105:1)
#loc6 = loc("/usr/include/stdlib.h":106:33)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE617_Reachable_Assertion__fgets_31.c":42:23)
#loc10 = loc("/usr/include/assert.h":69:1)
#loc11 = loc("/usr/include/assert.h":71:43)
#loc12 = loc("CWE617_Reachable_Assertion__fgets_31.c":49:9)
#loc13 = loc("CWE617_Reachable_Assertion__fgets_31.c":27:1)
#loc14 = loc("CWE617_Reachable_Assertion__fgets_31.c":51:1)
#loc15 = loc("CWE617_Reachable_Assertion__fgets_31.c":29:5)
#loc16 = loc("CWE617_Reachable_Assertion__fgets_31.c":29:9)
#loc17 = loc("CWE617_Reachable_Assertion__fgets_31.c":31:13)
#loc18 = loc("CWE617_Reachable_Assertion__fgets_31.c":31:12)
#loc19 = loc("CWE617_Reachable_Assertion__fgets_31.c":31:5)
#loc20 = loc("CWE617_Reachable_Assertion__fgets_31.c":32:5)
#loc21 = loc("CWE617_Reachable_Assertion__fgets_31.c":44:5)
#loc22 = loc("CWE617_Reachable_Assertion__fgets_31.c":33:9)
#loc23 = loc("CWE617_Reachable_Assertion__fgets_31.c":33:45)
#loc24 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:9)
#loc25 = loc("CWE617_Reachable_Assertion__fgets_31.c":43:9)
#loc26 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:19)
#loc27 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:32)
#loc28 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:49)
#loc29 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:13)
#loc30 = loc("CWE617_Reachable_Assertion__fgets_31.c":35:59)
#loc31 = loc("CWE617_Reachable_Assertion__fgets_31.c":36:9)
#loc32 = loc("CWE617_Reachable_Assertion__fgets_31.c":39:9)
#loc33 = loc("CWE617_Reachable_Assertion__fgets_31.c":41:9)
#loc34 = loc("CWE617_Reachable_Assertion__fgets_31.c":38:25)
#loc35 = loc("CWE617_Reachable_Assertion__fgets_31.c":38:20)
#loc36 = loc("CWE617_Reachable_Assertion__fgets_31.c":38:13)
#loc37 = loc("CWE617_Reachable_Assertion__fgets_31.c":38:36)
#loc38 = loc("CWE617_Reachable_Assertion__fgets_31.c":42:13)
#loc39 = loc("CWE617_Reachable_Assertion__fgets_31.c":45:5)
#loc40 = loc("CWE617_Reachable_Assertion__fgets_31.c":50:5)
#loc41 = loc("CWE617_Reachable_Assertion__fgets_31.c":46:9)
#loc42 = loc("CWE617_Reachable_Assertion__fgets_31.c":46:24)
#loc43 = loc("CWE617_Reachable_Assertion__fgets_31.c":47:9)
#loc44 = loc("CWE617_Reachable_Assertion__fgets_31.c":47:20)
#loc45 = loc("CWE617_Reachable_Assertion__fgets_31.c":73:1)
#loc46 = loc("CWE617_Reachable_Assertion__fgets_31.c":76:1)
#loc47 = loc("CWE617_Reachable_Assertion__fgets_31.c":75:5)
#loc48 = loc("CWE617_Reachable_Assertion__fgets_31.c":75:13)
#loc49 = loc("CWE617_Reachable_Assertion__fgets_31.c":69:9)
#loc50 = loc("CWE617_Reachable_Assertion__fgets_31.c":58:1)
#loc51 = loc("CWE617_Reachable_Assertion__fgets_31.c":71:1)
#loc52 = loc("CWE617_Reachable_Assertion__fgets_31.c":60:5)
#loc53 = loc("CWE617_Reachable_Assertion__fgets_31.c":60:9)
#loc54 = loc("CWE617_Reachable_Assertion__fgets_31.c":62:13)
#loc55 = loc("CWE617_Reachable_Assertion__fgets_31.c":62:12)
#loc56 = loc("CWE617_Reachable_Assertion__fgets_31.c":62:5)
#loc57 = loc("CWE617_Reachable_Assertion__fgets_31.c":64:12)
#loc58 = loc("CWE617_Reachable_Assertion__fgets_31.c":64:25)
#loc59 = loc("CWE617_Reachable_Assertion__fgets_31.c":64:5)
#loc60 = loc("CWE617_Reachable_Assertion__fgets_31.c":65:5)
#loc61 = loc("CWE617_Reachable_Assertion__fgets_31.c":70:5)
#loc62 = loc("CWE617_Reachable_Assertion__fgets_31.c":66:9)
#loc63 = loc("CWE617_Reachable_Assertion__fgets_31.c":66:24)
#loc64 = loc("CWE617_Reachable_Assertion__fgets_31.c":67:9)
#loc65 = loc("CWE617_Reachable_Assertion__fgets_31.c":67:20)
#loc66 = loc(fused[#loc1, #loc2])
#loc67 = loc(fused[#loc3, #loc4])
#loc68 = loc(fused[#loc5, #loc6])
#loc69 = loc(fused[#loc7, #loc8])
#loc70 = loc(fused[#loc10, #loc11])
#loc71 = loc(fused[#loc13, #loc14])
#loc72 = loc(fused[#loc15, #loc16])
#loc73 = loc(fused[#loc19, #loc17])
#loc74 = loc(fused[#loc20, #loc21])
#loc75 = loc(fused[#loc22, #loc23])
#loc76 = loc(fused[#loc24, #loc25])
#loc77 = loc(fused[#loc29, #loc30])
#loc78 = loc(fused[#loc31, #loc32, #loc33, #loc25])
#loc79 = loc(fused[#loc36, #loc37])
#loc80 = loc(fused[#loc39, #loc40])
#loc81 = loc(fused[#loc41, #loc42])
#loc82 = loc(fused[#loc43, #loc44])
#loc83 = loc(fused[#loc45, #loc46])
#loc84 = loc(fused[#loc47, #loc48])
#loc85 = loc(fused[#loc50, #loc51])
#loc86 = loc(fused[#loc52, #loc53])
#loc87 = loc(fused[#loc56, #loc54])
#loc88 = loc(fused[#loc59, #loc58])
#loc89 = loc(fused[#loc60, #loc61])
#loc90 = loc(fused[#loc62, #loc63])
#loc91 = loc(fused[#loc64, #loc65])
