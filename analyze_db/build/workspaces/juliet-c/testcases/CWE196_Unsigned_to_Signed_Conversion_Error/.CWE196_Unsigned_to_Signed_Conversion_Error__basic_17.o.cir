!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc90)
  cir.func private @printIntLine(!s32i) loc(#loc91)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc93)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc11)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc13)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc96)
        cir.condition(%4) loc(#loc15)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc99)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc100)
            %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc23)
            %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc23)
            cir.store %5, %2 : !u32i, !cir.ptr<!u32i> loc(#loc101)
            cir.scope {
              %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc28)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc29)
              %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc103)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc30)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc104)
              cir.if %13 {
                %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc32)
                %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc32)
                %16 = cir.const #cir.int<2> : !u32i loc(#loc32)
                %17 = cir.binop(mul, %15, %16) : !u32i loc(#loc32)
                %18 = cir.const #cir.int<1> : !u32i loc(#loc32)
                %19 = cir.binop(add, %17, %18) : !u32i loc(#loc32)
                %20 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc33)
                %21 = cir.binop(sub, %19, %20) : !u32i loc(#loc106)
                cir.store %21, %2 : !u32i, !cir.ptr<!u32i> loc(#loc107)
              } loc(#loc105)
            } loc(#loc102)
            %6 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc35)
            %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc35)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc108)
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc37)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc38)
          } loc(#loc98)
        } loc(#loc97)
        cir.yield loc(#loc10)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc40)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
        cir.yield loc(#loc94)
      } loc(#loc94)
    } loc(#loc94)
    cir.return loc(#loc6)
  } loc(#loc92)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc111)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc43)
    cir.return loc(#loc42)
  } loc(#loc110)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc112)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc114)
    cir.scope {
      %1 = cir.const #cir.int<0> : !s32i loc(#loc53)
      cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc116)
      cir.for : cond {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %4 = cir.cmp(lt, %2, %3) : !s32i, !cir.bool loc(#loc117)
        cir.condition(%4) loc(#loc57)
      } body {
        cir.scope {
          cir.scope {
            %2 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc120)
            %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc121)
            %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc65)
            %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc65)
            cir.store %5, %2 : !u32i, !cir.ptr<!u32i> loc(#loc122)
            cir.scope {
              %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc70)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc71)
              %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc124)
              %12 = cir.const #cir.int<0> : !s32i loc(#loc72)
              %13 = cir.cmp(eq, %11, %12) : !s32i, !cir.bool loc(#loc125)
              cir.if %13 {
                %14 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
                %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc74)
                %16 = cir.const #cir.int<2> : !u32i loc(#loc74)
                %17 = cir.binop(mul, %15, %16) : !u32i loc(#loc74)
                %18 = cir.const #cir.int<1> : !u32i loc(#loc74)
                %19 = cir.binop(add, %17, %18) : !u32i loc(#loc74)
                %20 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc75)
                %21 = cir.binop(sub, %19, %20) : !u32i loc(#loc127)
                cir.store %21, %2 : !u32i, !cir.ptr<!u32i> loc(#loc128)
              } loc(#loc126)
            } loc(#loc123)
            cir.scope {
              %9 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc79)
              %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc80)
              %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc80)
              %12 = cir.cmp(gt, %9, %11) : !u32i, !cir.bool loc(#loc130)
              cir.if %12 {
                %13 = cir.get_global @exit : !cir.ptr<!cir.func<(!s32i)>> loc(#loc82)
                %14 = cir.const #cir.int<1> : !s32i loc(#loc83)
                cir.call @exit(%14) : (!s32i) -> () extra(#fn_attr) loc(#loc82)
              } loc(#loc131)
            } loc(#loc129)
            %6 = cir.load %2 : !cir.ptr<!u32i>, !u32i loc(#loc84)
            %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc84)
            cir.store %7, %3 : !s32i, !cir.ptr<!s32i> loc(#loc132)
            %8 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc87)
          } loc(#loc119)
        } loc(#loc118)
        cir.yield loc(#loc52)
      } step {
        %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
        %3 = cir.unary(inc, %2) nsw : !s32i, !s32i loc(#loc89)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc133)
        cir.yield loc(#loc115)
      } loc(#loc115)
    } loc(#loc115)
    cir.return loc(#loc48)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":20:1)
#loc6 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":38:1)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":22:5)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":22:9)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:5)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":37:5)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:13)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:9)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:16)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:20)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:18)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":24:5)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":25:9)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":36:9)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":26:13)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":26:22)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":27:13)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":27:17)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":28:27)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":28:13)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":28:32)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":29:13)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":32:13)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":29:17)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":29:26)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":29:31)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":30:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":31:31)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":31:42)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":31:17)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":34:25)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":34:13)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":35:26)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":35:13)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:24)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":23:23)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":69:1)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":72:1)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":71:5)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":71:11)
#loc45 = loc("/usr/include/stdlib.h":756:1)
#loc46 = loc("/usr/include/stdlib.h":756:70)
#loc47 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":45:1)
#loc48 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":67:1)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":47:5)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":47:9)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:5)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":66:5)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:13)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:9)
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:16)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:20)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:18)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":49:5)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":50:9)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":65:9)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":51:13)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":51:22)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":52:13)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":52:17)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":53:27)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":53:13)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":53:32)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":54:13)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":57:13)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":54:17)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":54:26)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":54:31)
#loc73 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":55:13)
#loc74 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":56:31)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":56:42)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":56:17)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":59:13)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":62:13)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":59:17)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":59:31)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":60:13)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":61:17)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":61:22)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":63:25)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":63:13)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":64:26)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":64:13)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:24)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_17.c":48:23)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc3, #loc4])
#loc92 = loc(fused[#loc5, #loc6])
#loc93 = loc(fused[#loc7, #loc8])
#loc94 = loc(fused[#loc9, #loc10])
#loc95 = loc(fused[#loc12, #loc11])
#loc96 = loc(fused[#loc13, #loc14])
#loc97 = loc(fused[#loc16, #loc10])
#loc98 = loc(fused[#loc17, #loc18])
#loc99 = loc(fused[#loc19, #loc20])
#loc100 = loc(fused[#loc21, #loc22])
#loc101 = loc(fused[#loc24, #loc25])
#loc102 = loc(fused[#loc26, #loc27])
#loc103 = loc(fused[#loc28, #loc29])
#loc104 = loc(fused[#loc28, #loc30])
#loc105 = loc(fused[#loc31, #loc27])
#loc106 = loc(fused[#loc32, #loc33])
#loc107 = loc(fused[#loc34, #loc33])
#loc108 = loc(fused[#loc36, #loc35])
#loc109 = loc(fused[#loc40, #loc39])
#loc110 = loc(fused[#loc41, #loc42])
#loc111 = loc(fused[#loc43, #loc44])
#loc112 = loc(fused[#loc45, #loc46])
#loc113 = loc(fused[#loc47, #loc48])
#loc114 = loc(fused[#loc49, #loc50])
#loc115 = loc(fused[#loc51, #loc52])
#loc116 = loc(fused[#loc54, #loc53])
#loc117 = loc(fused[#loc55, #loc56])
#loc118 = loc(fused[#loc58, #loc52])
#loc119 = loc(fused[#loc59, #loc60])
#loc120 = loc(fused[#loc61, #loc62])
#loc121 = loc(fused[#loc63, #loc64])
#loc122 = loc(fused[#loc66, #loc67])
#loc123 = loc(fused[#loc68, #loc69])
#loc124 = loc(fused[#loc70, #loc71])
#loc125 = loc(fused[#loc70, #loc72])
#loc126 = loc(fused[#loc73, #loc69])
#loc127 = loc(fused[#loc74, #loc75])
#loc128 = loc(fused[#loc76, #loc75])
#loc129 = loc(fused[#loc77, #loc78])
#loc130 = loc(fused[#loc79, #loc80])
#loc131 = loc(fused[#loc81, #loc78])
#loc132 = loc(fused[#loc85, #loc84])
#loc133 = loc(fused[#loc89, #loc88])
