!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":30:16)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":54:16)
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc88)
  cir.func private @printIntLine(!s32i) loc(#loc89)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc91)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.br ^bb1 loc(#loc93)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc93)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc14)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc14)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc94)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc16)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc16)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc16)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc16)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc16)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc16)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc16)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc16)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc16)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc16)
    cir.br ^bb7(%20 : !u32i) loc(#loc16)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc16)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc16)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc16)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc16)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc16)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc16)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc16)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc16)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc16)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc16)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc16)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc16)
    cir.br ^bb7(%36 : !u32i) loc(#loc16)
  ^bb7(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":30:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc16)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc16)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.br ^bb10 loc(#loc18)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc13)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc13)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc96)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc96)
  ^bb13:  // 2 preds: ^bb12, ^bb16
    %39 = cir.const #cir.int<1> : !s32i loc(#loc21)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %40 ^bb14, ^bb17 loc(#loc21)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc97)
  ^bb15:  // pred: ^bb14
    %41 = cir.const #cir.int<100> : !s32i loc(#loc23)
    %42 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
    %43 = cir.binop(rem, %41, %42) : !s32i loc(#loc98)
    cir.call @printIntLine(%43) : (!s32i) -> () loc(#loc25)
    cir.br ^bb17 loc(#loc26)
  ^bb16:  // no predecessors
    cir.br ^bb13 loc(#loc20)
  ^bb17:  // 2 preds: ^bb13, ^bb15
    cir.br ^bb18 loc(#loc20)
  ^bb18:  // pred: ^bb17
    cir.return loc(#loc6)
  } loc(#loc90)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc100)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc29)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc31)
    cir.return loc(#loc28)
  } loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc102)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc40)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc41)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.br ^bb1 loc(#loc106)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc106)
  ^bb2:  // 2 preds: ^bb1, ^bb9
    %3 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc45)
    cir.brcond %4 ^bb3, ^bb10 loc(#loc45)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc107)
  ^bb4:  // pred: ^bb3
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc47)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc47)
    cir.brcond %8 ^bb5, ^bb6 loc(#loc47)
  ^bb5:  // pred: ^bb4
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc47)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc47)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc47)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc47)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc47)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc47)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc47)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc47)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc47)
    cir.br ^bb7(%20 : !u32i) loc(#loc47)
  ^bb6:  // pred: ^bb4
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc47)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc47)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc47)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc47)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc47)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc47)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc47)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc47)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc47)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc47)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc47)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc47)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc47)
    cir.br ^bb7(%36 : !u32i) loc(#loc47)
  ^bb7(%37: !u32i loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":54:16)):  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc47)
  ^bb8:  // pred: ^bb7
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc47)
    cir.store %38, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    cir.br ^bb10 loc(#loc49)
  ^bb9:  // no predecessors
    cir.br ^bb2 loc(#loc44)
  ^bb10:  // 2 preds: ^bb2, ^bb8
    cir.br ^bb11 loc(#loc44)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc109)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc109)
  ^bb13:  // 2 preds: ^bb12, ^bb21
    %39 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %40 = cir.cast(int_to_bool, %39 : !s32i), !cir.bool loc(#loc52)
    cir.brcond %40 ^bb14, ^bb22 loc(#loc52)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc110)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc111)
  ^bb16:  // pred: ^bb15
    %41 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %42 = cir.const #cir.int<0> : !s32i loc(#loc57)
    %43 = cir.cmp(ne, %41, %42) : !s32i, !cir.bool loc(#loc112)
    cir.brcond %43 ^bb17, ^bb18 loc(#loc113)
  ^bb17:  // pred: ^bb16
    %44 = cir.const #cir.int<100> : !s32i loc(#loc61)
    %45 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
    %46 = cir.binop(rem, %44, %45) : !s32i loc(#loc114)
    cir.call @printIntLine(%46) : (!s32i) -> () loc(#loc63)
    cir.br ^bb19 loc(#loc59)
  ^bb18:  // pred: ^bb16
    %47 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc35)
    %48 = cir.cast(array_to_ptrdecay, %47 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%48) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    cir.br ^bb19 loc(#loc55)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc55)
  ^bb20:  // pred: ^bb19
    cir.br ^bb22 loc(#loc65)
  ^bb21:  // no predecessors
    cir.br ^bb13 loc(#loc51)
  ^bb22:  // 2 preds: ^bb13, ^bb20
    cir.br ^bb23 loc(#loc51)
  ^bb23:  // pred: ^bb22
    cir.return loc(#loc37)
  } loc(#loc103)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc70)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc71)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    cir.br ^bb1 loc(#loc118)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc118)
  ^bb2:  // 2 preds: ^bb1, ^bb5
    %3 = cir.const #cir.int<1> : !s32i loc(#loc75)
    %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc75)
    cir.brcond %4 ^bb3, ^bb6 loc(#loc75)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc119)
  ^bb4:  // pred: ^bb3
    %5 = cir.const #cir.int<7> : !s32i loc(#loc77)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc120)
    cir.br ^bb6 loc(#loc79)
  ^bb5:  // no predecessors
    cir.br ^bb2 loc(#loc74)
  ^bb6:  // 2 preds: ^bb2, ^bb4
    cir.br ^bb7 loc(#loc74)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc121)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc121)
  ^bb9:  // 2 preds: ^bb8, ^bb12
    %6 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc82)
    cir.brcond %7 ^bb10, ^bb13 loc(#loc82)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc122)
  ^bb11:  // pred: ^bb10
    %8 = cir.const #cir.int<100> : !s32i loc(#loc84)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
    %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc123)
    cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc86)
    cir.br ^bb13 loc(#loc87)
  ^bb12:  // no predecessors
    cir.br ^bb9 loc(#loc81)
  ^bb13:  // 2 preds: ^bb9, ^bb11
    cir.br ^bb14 loc(#loc81)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc67)
  } loc(#loc115)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":39:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":26:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":32:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":27:11)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":28:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":30:9)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":31:9)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":33:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":38:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":33:11)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":34:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":36:22)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":36:28)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":36:9)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":37:9)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":92:1)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":96:1)
#loc29 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":94:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":94:13)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":95:5)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":95:13)
#loc33 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc34 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":66:23)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":46:1)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":70:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":48:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":48:9)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":50:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":50:12)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":50:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":51:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":56:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":51:11)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":52:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":54:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":55:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":57:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":69:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":57:11)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":58:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":60:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":67:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":60:13)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":60:21)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":61:9)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":63:9)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":65:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":62:26)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":62:32)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":62:13)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":66:13)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":68:9)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":73:1)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":90:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":75:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":75:9)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":77:13)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":77:12)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":77:5)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":78:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":83:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":78:11)
#loc76 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":79:5)
#loc77 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":81:16)
#loc78 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":81:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":82:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":84:5)
#loc81 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":89:5)
#loc82 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":84:11)
#loc83 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":85:5)
#loc84 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":87:22)
#loc85 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":87:28)
#loc86 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":87:9)
#loc87 = loc("CWE369_Divide_by_Zero__int_rand_modulo_16.c":88:9)
#loc88 = loc(fused[#loc1, #loc2])
#loc89 = loc(fused[#loc3, #loc4])
#loc90 = loc(fused[#loc5, #loc6])
#loc91 = loc(fused[#loc7, #loc8])
#loc92 = loc(fused[#loc11, #loc9])
#loc93 = loc(fused[#loc12, #loc13])
#loc94 = loc(fused[#loc15, #loc13])
#loc95 = loc(fused[#loc17, #loc16])
#loc96 = loc(fused[#loc19, #loc20])
#loc97 = loc(fused[#loc22, #loc20])
#loc98 = loc(fused[#loc23, #loc24])
#loc99 = loc(fused[#loc27, #loc28])
#loc100 = loc(fused[#loc29, #loc30])
#loc101 = loc(fused[#loc31, #loc32])
#loc102 = loc(fused[#loc33, #loc34])
#loc103 = loc(fused[#loc36, #loc37])
#loc104 = loc(fused[#loc38, #loc39])
#loc105 = loc(fused[#loc42, #loc40])
#loc106 = loc(fused[#loc43, #loc44])
#loc107 = loc(fused[#loc46, #loc44])
#loc108 = loc(fused[#loc48, #loc47])
#loc109 = loc(fused[#loc50, #loc51])
#loc110 = loc(fused[#loc53, #loc51])
#loc111 = loc(fused[#loc54, #loc55])
#loc112 = loc(fused[#loc56, #loc57])
#loc113 = loc(fused[#loc58, #loc59, #loc60, #loc55])
#loc114 = loc(fused[#loc61, #loc62])
#loc115 = loc(fused[#loc66, #loc67])
#loc116 = loc(fused[#loc68, #loc69])
#loc117 = loc(fused[#loc72, #loc70])
#loc118 = loc(fused[#loc73, #loc74])
#loc119 = loc(fused[#loc76, #loc74])
#loc120 = loc(fused[#loc78, #loc77])
#loc121 = loc(fused[#loc80, #loc81])
#loc122 = loc(fused[#loc83, #loc81])
#loc123 = loc(fused[#loc84, #loc85])
