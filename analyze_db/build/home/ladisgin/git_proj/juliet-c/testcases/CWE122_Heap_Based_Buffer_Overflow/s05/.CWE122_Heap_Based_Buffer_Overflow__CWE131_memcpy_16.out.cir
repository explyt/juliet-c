!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":81:10)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":81:14)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":81:20)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":81:32)
#loc147 = loc(fused[#loc64, #loc65])
#loc148 = loc(fused[#loc66, #loc67])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc123)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc124)
  cir.func private @printIntLine(!s32i) loc(#loc125)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc126)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc128)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc129)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc17)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc17)
        cir.condition(%3) loc(#loc17)
      } do {
        %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc18)
        %3 = cir.const #cir.int<10> : !s32i loc(#loc19)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc19)
        %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc18)
        %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc131)
        cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc132)
        cir.scope {
          %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc24)
          %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
          %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc25)
          %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc134)
          cir.if %10 {
            %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc29)
            cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
          } loc(#loc135)
        } loc(#loc133)
        cir.break loc(#loc30)
      } loc(#loc130)
    } loc(#loc130)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc137)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc137)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc137)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc35)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc36)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc37)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc37)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc138)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc139)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc140)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc43)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc44)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc42)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc45)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc46)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc47)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc47)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc46)
    } loc(#loc136)
    cir.return loc(#loc10)
  } loc(#loc127)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc142)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc141)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc143)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc144)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc145)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc59)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc60)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc61)
  cir.func @main(%arg0: !s32i loc(fused[#loc64, #loc65]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc66, #loc67])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc147)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc148)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc63)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc68)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc69)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc70)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc70)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc71)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc58)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc72)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc149)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_good() : () -> () loc(#loc73)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc59)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc75)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc60)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc60)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc150)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16_bad() : () -> () loc(#loc77)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc61)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc80)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %17 : !s32i loc(#loc151)
  } loc(#loc146)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc86)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc154)
    cir.scope {
      cir.while {
        %2 = cir.const #cir.int<1> : !s32i loc(#loc90)
        %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc90)
        cir.condition(%3) loc(#loc90)
      } do {
        %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc91)
        %3 = cir.const #cir.int<10> : !s32i loc(#loc92)
        %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc92)
        %5 = cir.const #cir.int<4> : !u64i loc(#loc156)
        %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc157)
        %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
        %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc158)
        cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc159)
        cir.scope {
          %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc99)
          %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc100)
          %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc100)
          %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc161)
          cir.if %12 {
            %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc102)
            %14 = cir.const #cir.int<1> : !s32i loc(#loc103)
            %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc104)
            cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc102)
          } loc(#loc162)
        } loc(#loc160)
        cir.break loc(#loc105)
      } loc(#loc155)
    } loc(#loc155)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc164)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc164)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc164)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc110)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc110)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc111)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc111)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc112)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc112)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc165)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc166)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc167)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc117)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc118)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc119)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc117)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc120)
      %16 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc121)
      %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc122)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc122)
      cir.call @free(%18) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc121)
    } loc(#loc163)
    cir.return loc(#loc83)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":39:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":23:11)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":24:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":31:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":25:11)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:23)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:30)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:32)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":28:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:37)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:21)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:27)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:28)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:34)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":29:33)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":30:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":32:5)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":38:5)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":33:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:16)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:22)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:30)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:43)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":35:44)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:22)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:27)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:28)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":36:9)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":37:14)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":66:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":69:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":68:13)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":86:15)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":88:15)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":91:15)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":93:15)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":81:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":96:1)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":82:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":84:27)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":84:22)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":84:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":86:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":87:5)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":87:62)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":88:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":91:5)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":92:5)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":92:61)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":93:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":95:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":95:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":46:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":64:1)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:5)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":48:11)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:12)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":49:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":56:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":50:11)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:23)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:30)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:43)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:44)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":53:9)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:37)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:13)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:21)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:27)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:28)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:34)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":54:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":55:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":57:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":63:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":58:28)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:16)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:22)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:30)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:33)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:43)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:9)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":60:44)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:27)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:28)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":61:9)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_memcpy_16.c":62:14)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc11, #loc12])
#loc129 = loc(fused[#loc14, #loc13])
#loc130 = loc(fused[#loc15, #loc16])
#loc131 = loc(fused[#loc18, #loc20])
#loc132 = loc(fused[#loc21, #loc20])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc24, #loc25])
#loc135 = loc(fused[#loc26, #loc23])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc38, #loc39])
#loc139 = loc(fused[#loc37, #loc39])
#loc140 = loc(fused[#loc40, #loc41])
#loc141 = loc(fused[#loc48, #loc49])
#loc142 = loc(fused[#loc50, #loc51])
#loc143 = loc(fused[#loc52, #loc53])
#loc144 = loc(fused[#loc54, #loc55])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc62, #loc63])
#loc149 = loc(fused[#loc73, #loc74])
#loc150 = loc(fused[#loc77, #loc78])
#loc151 = loc(fused[#loc81, #loc80])
#loc152 = loc(fused[#loc82, #loc83])
#loc153 = loc(fused[#loc84, #loc85])
#loc154 = loc(fused[#loc87, #loc86])
#loc155 = loc(fused[#loc88, #loc89])
#loc156 = loc(fused[#loc93, #loc94])
#loc157 = loc(fused[#loc92, #loc94])
#loc158 = loc(fused[#loc91, #loc95])
#loc159 = loc(fused[#loc96, #loc95])
#loc160 = loc(fused[#loc97, #loc98])
#loc161 = loc(fused[#loc99, #loc100])
#loc162 = loc(fused[#loc101, #loc98])
#loc163 = loc(fused[#loc106, #loc107])
#loc164 = loc(fused[#loc108, #loc109])
#loc165 = loc(fused[#loc113, #loc114])
#loc166 = loc(fused[#loc112, #loc114])
#loc167 = loc(fused[#loc115, #loc116])
