!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc147)
  cir.func private  @printIntLine(!s32i) loc(#loc148)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc149)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"ERROR: Array index is negative\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_rand_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc152)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc153)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc153)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc16)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc17)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc154)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc156)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc22)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc23)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc156)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc24)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc24)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc24)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc24)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc24)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc24)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc24)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc24)
        cir.yield %27 : !u32i loc(#loc24)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc24)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc24)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc24)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc24)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc24)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc24)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc24)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc24)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc24)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc24)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc24)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc24)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc24)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc24)
        cir.yield %31 : !u32i loc(#loc24)
      }) : (!cir.bool) -> !u32i loc(#loc24)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc24)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc157)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc26)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc158)
    } loc(#loc155)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc160)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc160)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc162)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc162)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc162)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc40)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc41)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc164)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc42)
          cir.if %13 {
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc46)
            %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc47)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc47)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc47)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc48)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc49)
          } loc(#loc165)
        } loc(#loc163)
      } loc(#loc161)
    } loc(#loc159)
    cir.return loc(#loc9)
  } loc(#loc150)
  cir.func no_proto  @CWE126_Buffer_Overread__CWE129_rand_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc167)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc168)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc54)
    cir.return loc(#loc51)
  } loc(#loc166)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc170)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc171)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc172)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc171)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc172)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc64)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc65)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc175)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc70)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc71)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc175)
      %8 = cir.const #cir.int<7> : !s32i loc(#loc72)
      cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc176)
      %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc74)
      %10 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc75)
      cir.store %9, %10 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    } loc(#loc174)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc179)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc80)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc179)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc181)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc181)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc181)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc183)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc90)
          cir.if %13 {
            %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc94)
            %15 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc95)
            %16 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %14 : !s32i), !cir.ptr<!s32i> loc(#loc95)
            %17 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc95)
            cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc96)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc97)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc97)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc98)
          } loc(#loc184)
        } loc(#loc182)
      } loc(#loc180)
    } loc(#loc178)
    cir.return loc(#loc57)
  } loc(#loc169)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc99)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc188)
    cir.store %0, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    cir.store %0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc188)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc108)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc109)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc189)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc191)
      %6 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc115)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc191)
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
      %9 = cir.const #cir.int<1> : !s32i loc(#loc116)
      %10 = cir.binop(and, %8, %9) : !s32i loc(#loc116)
      %11 = cir.cast(int_to_bool, %10 : !s32i), !cir.bool loc(#loc116)
      %12 = cir.ternary(%11, true {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc116)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc116)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc116)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc116)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc116)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc116)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc116)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc116)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc116)
        cir.yield %27 : !u32i loc(#loc116)
      }, false {
        %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc116)
        %18 = cir.const #cir.int<30> : !s32i loc(#loc116)
        %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc116)
        %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc116)
        %22 = cir.const #cir.int<15> : !s32i loc(#loc116)
        %23 = cir.shift(left, %21 : !u32i, %22 : !s32i) -> !u32i loc(#loc116)
        %24 = cir.binop(xor, %19, %23) : !u32i loc(#loc116)
        %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc116)
        %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc116)
        %27 = cir.binop(xor, %24, %26) : !u32i loc(#loc116)
        %28 = cir.unary(minus, %27) : !u32i, !u32i loc(#loc116)
        %29 = cir.const #cir.int<1> : !s32i loc(#loc116)
        %30 = cir.cast(integral, %29 : !s32i), !u32i loc(#loc116)
        %31 = cir.binop(sub, %28, %30) : !u32i loc(#loc116)
        cir.yield %31 : !u32i loc(#loc116)
      }) : (!cir.bool) -> !u32i loc(#loc116)
      %13 = cir.cast(integral, %12 : !u32i), !s32i loc(#loc116)
      cir.store %13, %5 : !s32i, !cir.ptr<!s32i> loc(#loc192)
      %14 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc118)
      %15 = cir.load deref %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc119)
      cir.store %14, %15 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    } loc(#loc190)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc195)
      %6 = cir.load deref %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc124)
      %7 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc125)
      cir.store %7, %5 : !s32i, !cir.ptr<!s32i> loc(#loc195)
      cir.scope {
        %8 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc197)
        %9 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc197)
        cir.store %9, %8 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc197)
        cir.scope {
          %10 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          %11 = cir.const #cir.int<0> : !s32i loc(#loc133)
          %12 = cir.cmp(ge, %10, %11) : !s32i, !s32i loc(#loc199)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc134)
          %14 = cir.ternary(%13, true {
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc136)
            %16 = cir.const #cir.int<10> : !s32i loc(#loc137)
            %17 = cir.cmp(lt, %15, %16) : !s32i, !s32i loc(#loc200)
            %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc139)
            %19 = cir.ternary(%18, true {
              %20 = cir.const #true loc(#loc135)
              cir.yield %20 : !cir.bool loc(#loc135)
            }, false {
              %20 = cir.const #false loc(#loc135)
              cir.yield %20 : !cir.bool loc(#loc135)
            }) : (!cir.bool) -> !cir.bool loc(#loc135)
            cir.yield %19 : !cir.bool loc(#loc135)
          }, false {
            %15 = cir.const #false loc(#loc135)
            cir.yield %15 : !cir.bool loc(#loc135)
          }) : (!cir.bool) -> !cir.bool loc(#loc135)
          cir.if %14 {
            %15 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc143)
            %16 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc144)
            %17 = cir.ptr_stride(%16 : !cir.ptr<!s32i>, %15 : !s32i), !cir.ptr<!s32i> loc(#loc144)
            %18 = cir.load %17 : !cir.ptr<!s32i>, !s32i loc(#loc144)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc145)
          } else {
            %15 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc99)
            %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc99)
            cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc146)
          } loc(#loc201)
        } loc(#loc198)
      } loc(#loc196)
    } loc(#loc194)
    cir.return loc(#loc101)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE126_Buffer_Overread/s01/CWE126_Buffer_Overread__CWE129_rand_32.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":47:27)
#loc8 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":22:1)
#loc9 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":51:1)
#loc10 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":24:5)
#loc11 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":24:9)
#loc12 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":25:5)
#loc13 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":25:22)
#loc14 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":26:5)
#loc15 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":26:22)
#loc16 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:13)
#loc17 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:12)
#loc18 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":28:5)
#loc19 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":29:5)
#loc20 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":34:5)
#loc21 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:9)
#loc22 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:21)
#loc23 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":30:20)
#loc24 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":32:16)
#loc25 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":32:9)
#loc26 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:21)
#loc27 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:10)
#loc28 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":33:9)
#loc29 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":35:5)
#loc30 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":50:5)
#loc31 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:9)
#loc32 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:21)
#loc33 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":36:20)
#loc34 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":37:9)
#loc35 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":49:9)
#loc36 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":38:13)
#loc37 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":38:34)
#loc38 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:13)
#loc39 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":48:13)
#loc40 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:17)
#loc41 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:25)
#loc42 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":41:22)
#loc43 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":42:13)
#loc44 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":44:13)
#loc45 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":46:13)
#loc46 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:37)
#loc47 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:30)
#loc48 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":43:17)
#loc49 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":47:17)
#loc50 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":121:1)
#loc51 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":125:1)
#loc52 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":123:5)
#loc53 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":123:13)
#loc54 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":124:5)
#loc55 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":124:13)
#loc56 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":58:1)
#loc57 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":88:1)
#loc58 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":60:5)
#loc59 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":60:9)
#loc60 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":61:5)
#loc61 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":61:22)
#loc62 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":62:5)
#loc63 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":62:22)
#loc64 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:13)
#loc65 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:12)
#loc66 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":64:5)
#loc67 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":65:5)
#loc68 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":71:5)
#loc69 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:9)
#loc70 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:21)
#loc71 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":66:20)
#loc72 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":69:16)
#loc73 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":69:9)
#loc74 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:21)
#loc75 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:10)
#loc76 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":70:9)
#loc77 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":72:5)
#loc78 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":87:5)
#loc79 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:9)
#loc80 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:21)
#loc81 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":73:20)
#loc82 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":74:9)
#loc83 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":86:9)
#loc84 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":75:13)
#loc85 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":75:34)
#loc86 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:13)
#loc87 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":85:13)
#loc88 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:17)
#loc89 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:25)
#loc90 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":78:22)
#loc91 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":79:13)
#loc92 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":81:13)
#loc93 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":83:13)
#loc94 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:37)
#loc95 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:30)
#loc96 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":80:17)
#loc97 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":84:27)
#loc98 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":84:17)
#loc99 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":115:27)
#loc100 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":91:1)
#loc101 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":119:1)
#loc102 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":93:5)
#loc103 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":93:9)
#loc104 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":94:5)
#loc105 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":94:22)
#loc106 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":95:5)
#loc107 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":95:22)
#loc108 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:13)
#loc109 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:12)
#loc110 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":97:5)
#loc111 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":98:5)
#loc112 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":103:5)
#loc113 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:9)
#loc114 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:21)
#loc115 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":99:20)
#loc116 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":101:16)
#loc117 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":101:9)
#loc118 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:21)
#loc119 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:10)
#loc120 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":102:9)
#loc121 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":104:5)
#loc122 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":118:5)
#loc123 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:9)
#loc124 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:21)
#loc125 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":105:20)
#loc126 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":106:9)
#loc127 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":117:9)
#loc128 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":107:13)
#loc129 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":107:34)
#loc130 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:13)
#loc131 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":116:13)
#loc132 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:17)
#loc133 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:25)
#loc134 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:22)
#loc135 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:27)
#loc136 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:30)
#loc137 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:38)
#loc138 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:40)
#loc139 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":109:35)
#loc140 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":110:13)
#loc141 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":112:13)
#loc142 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":114:13)
#loc143 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:37)
#loc144 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:30)
#loc145 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":111:17)
#loc146 = loc("CWE126_Buffer_Overread__CWE129_rand_32.c":115:17)
#loc147 = loc(fused[#loc1, #loc2])
#loc148 = loc(fused[#loc3, #loc4])
#loc149 = loc(fused[#loc5, #loc6])
#loc150 = loc(fused[#loc8, #loc9])
#loc151 = loc(fused[#loc10, #loc11])
#loc152 = loc(fused[#loc12, #loc13])
#loc153 = loc(fused[#loc14, #loc15])
#loc154 = loc(fused[#loc18, #loc16])
#loc155 = loc(fused[#loc19, #loc20])
#loc156 = loc(fused[#loc21, #loc22])
#loc157 = loc(fused[#loc25, #loc24])
#loc158 = loc(fused[#loc28, #loc26])
#loc159 = loc(fused[#loc29, #loc30])
#loc160 = loc(fused[#loc31, #loc32])
#loc161 = loc(fused[#loc34, #loc35])
#loc162 = loc(fused[#loc36, #loc37])
#loc163 = loc(fused[#loc38, #loc39])
#loc164 = loc(fused[#loc40, #loc41])
#loc165 = loc(fused[#loc43, #loc44, #loc45, #loc39])
#loc166 = loc(fused[#loc50, #loc51])
#loc167 = loc(fused[#loc52, #loc53])
#loc168 = loc(fused[#loc54, #loc55])
#loc169 = loc(fused[#loc56, #loc57])
#loc170 = loc(fused[#loc58, #loc59])
#loc171 = loc(fused[#loc60, #loc61])
#loc172 = loc(fused[#loc62, #loc63])
#loc173 = loc(fused[#loc66, #loc64])
#loc174 = loc(fused[#loc67, #loc68])
#loc175 = loc(fused[#loc69, #loc70])
#loc176 = loc(fused[#loc73, #loc72])
#loc177 = loc(fused[#loc76, #loc74])
#loc178 = loc(fused[#loc77, #loc78])
#loc179 = loc(fused[#loc79, #loc80])
#loc180 = loc(fused[#loc82, #loc83])
#loc181 = loc(fused[#loc84, #loc85])
#loc182 = loc(fused[#loc86, #loc87])
#loc183 = loc(fused[#loc88, #loc89])
#loc184 = loc(fused[#loc91, #loc92, #loc93, #loc87])
#loc185 = loc(fused[#loc100, #loc101])
#loc186 = loc(fused[#loc102, #loc103])
#loc187 = loc(fused[#loc104, #loc105])
#loc188 = loc(fused[#loc106, #loc107])
#loc189 = loc(fused[#loc110, #loc108])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc114])
#loc192 = loc(fused[#loc117, #loc116])
#loc193 = loc(fused[#loc120, #loc118])
#loc194 = loc(fused[#loc121, #loc122])
#loc195 = loc(fused[#loc123, #loc124])
#loc196 = loc(fused[#loc126, #loc127])
#loc197 = loc(fused[#loc128, #loc129])
#loc198 = loc(fused[#loc130, #loc131])
#loc199 = loc(fused[#loc132, #loc133])
#loc200 = loc(fused[#loc136, #loc138])
#loc201 = loc(fused[#loc140, #loc141, #loc142, #loc131])
