!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc46)
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_529badSink_bEi(!s32i) loc(#loc47)
  cir.func  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_523badEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc49)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc50)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc12)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc12)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc12)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc12)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc12)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc12)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc12)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc12)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc12)
      cir.yield %21 : !u32i loc(#loc12)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc12)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc12)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc12)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc12)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc12)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc12)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc12)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc12)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc12)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc12)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc12)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc12)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc12)
      cir.yield %25 : !u32i loc(#loc12)
    }) : (!cir.bool) -> !u32i loc(#loc12)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc12)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_529badSink_bEi(%9) : (!s32i) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc48)
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_5213goodG2BSink_bEi(!s32i) loc(#loc52)
  cir.func internal private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc54)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc23)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc55)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc25)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc56)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_5213goodG2BSink_bEi(%4) : (!s32i) -> () loc(#loc28)
    cir.return loc(#loc19)
  } loc(#loc53)
  cir.func private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_5213goodB2GSink_bEi(!s32i) loc(#loc57)
  cir.func internal private  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc59)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc36)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc60)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc38)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc38)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc38)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc38)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc38)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc38)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc38)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc38)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc38)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc38)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc38)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc38)
      cir.yield %21 : !u32i loc(#loc38)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc38)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc38)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc38)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc38)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc38)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc38)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc38)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc38)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc38)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc38)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc38)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc38)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc38)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc38)
      cir.yield %25 : !u32i loc(#loc38)
    }) : (!cir.bool) -> !u32i loc(#loc38)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc38)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc61)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_5213goodB2GSink_bEi(%9) : (!s32i) -> () loc(#loc41)
    cir.return loc(#loc32)
  } loc(#loc58)
  cir.func  @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_524goodEv() extra(#fn_attr1) {
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52L7goodG2BEv() : () -> () loc(#loc44)
    cir.call @_ZN53CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52L7goodB2GEv() : () -> () loc(#loc45)
    cir.return loc(#loc43)
  } loc(#loc62)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":26:1)
#loc4 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":26:24)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":28:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":36:1)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":30:5)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":30:9)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":32:13)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":32:12)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":32:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":34:12)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":34:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":35:15)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":35:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":43:1)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":43:28)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":45:1)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":54:1)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":47:5)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":47:9)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":49:13)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":49:12)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":49:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":52:12)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":52:5)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":53:19)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":53:5)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":57:1)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":57:28)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":59:1)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":67:1)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":61:5)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":61:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":63:13)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":63:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":63:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":65:12)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":65:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":66:19)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":66:5)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":69:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":73:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":71:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__cpp_CWE129_rand_52a.cpp":72:5)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc48 = loc(fused[#loc5, #loc6])
#loc49 = loc(fused[#loc7, #loc8])
#loc50 = loc(fused[#loc11, #loc9])
#loc51 = loc(fused[#loc13, #loc12])
#loc52 = loc(fused[#loc16, #loc17])
#loc53 = loc(fused[#loc18, #loc19])
#loc54 = loc(fused[#loc20, #loc21])
#loc55 = loc(fused[#loc24, #loc22])
#loc56 = loc(fused[#loc26, #loc25])
#loc57 = loc(fused[#loc29, #loc30])
#loc58 = loc(fused[#loc31, #loc32])
#loc59 = loc(fused[#loc33, #loc34])
#loc60 = loc(fused[#loc37, #loc35])
#loc61 = loc(fused[#loc39, #loc38])
#loc62 = loc(fused[#loc42, #loc43])
