!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc23 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":47:21)
#loc24 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":47:25)
#loc180 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":147:26)
#loc181 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":147:30)
#loc330 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":248:26)
#loc331 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":248:30)
#loc478 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":344:25)
#loc479 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":344:29)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc515 = loc(fused[#loc23, #loc24])
#loc575 = loc(fused[#loc180, #loc181])
#loc632 = loc(fused[#loc330, #loc331])
#loc689 = loc(fused[#loc478, #loc479])
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_add_21.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc504)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc505)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc506)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc507)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc508)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc509)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc510)
  cir.func private @close(!s32i) -> !s32i loc(#loc511)
  cir.global "private" internal dsolocal @badStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc512)
  cir.func private @printIntLine(!s32i) loc(#loc513)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc23, #loc24])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc515)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc25)
    cir.scope {
      %1 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc512)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc28)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc28)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc519)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc34)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc33)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc34)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc519)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc35)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc36)
        } loc(#loc518)
      } loc(#loc517)
    } loc(#loc516)
    cir.return loc(#loc22)
  } loc(#loc514)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_add_21_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc521)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc41)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc522)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc524)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc525)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc526)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc527)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc528)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc50)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc526)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc52)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc527)
      cir.scope {
        cir.do {
          cir.scope {
            %14 = cir.const #cir.int<2> : !s32i loc(#loc59)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc60)
            %16 = cir.const #cir.int<6> : !s32i loc(#loc61)
            %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc62)
            cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc531)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc67)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc68)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc68)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc533)
              cir.if %62 {
                cir.break loc(#loc70)
              } loc(#loc534)
            } loc(#loc532)
            %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc535)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc73)
            %20 = cir.const #cir.int<16> : !u64i loc(#loc536)
            cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc537)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc78)
            %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc78)
            %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
            cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc538)
            %24 = cir.const #cir.int<0> : !s32i loc(#loc81)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc81)
            %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc539)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc85)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc85)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc86)
            %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc540)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc92)
              %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc542)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc543)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc543)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc97)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc98)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc98)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc544)
              cir.if %66 {
                cir.break loc(#loc100)
              } loc(#loc545)
            } loc(#loc541)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc103)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc104)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc105)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc106)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc106)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc547)
              cir.if %64 {
                cir.break loc(#loc108)
              } loc(#loc548)
            } loc(#loc546)
            %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc109)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc110)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc111)
            %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc112)
            cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc549)
            cir.scope {
              %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc117)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc118)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc118)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc551)
              cir.if %62 {
                cir.break loc(#loc120)
              } loc(#loc552)
            } loc(#loc550)
            %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc121)
            %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc122)
            %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc122)
            %39 = cir.const #cir.int<3> : !s32i loc(#loc123)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc123)
            %41 = cir.const #cir.int<4> : !u64i loc(#loc123)
            %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc123)
            %43 = cir.const #cir.int<2> : !s32i loc(#loc123)
            %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc123)
            %45 = cir.binop(add, %42, %44) : !u64i loc(#loc123)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc124)
            %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc124)
            %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc553)
            %49 = cir.const #cir.int<0> : !s32i loc(#loc125)
            %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc126)
            %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc126)
            cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc554)
            cir.scope {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc131)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc132)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc132)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc556)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc133)
                cir.yield %64 : !cir.bool loc(#loc133)
              }, false {
                %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc134)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc135)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc557)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc133)
                  cir.yield %68 : !cir.bool loc(#loc133)
                }, false {
                  %68 = cir.const #false loc(#loc133)
                  cir.yield %68 : !cir.bool loc(#loc133)
                }) : (!cir.bool) -> !cir.bool loc(#loc133)
                cir.yield %67 : !cir.bool loc(#loc133)
              }) : (!cir.bool) -> !cir.bool loc(#loc133)
              cir.if %63 {
                cir.break loc(#loc137)
              } loc(#loc558)
            } loc(#loc555)
            %52 = cir.const #cir.int<0> : !s32i loc(#loc138)
            %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc138)
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc139)
            %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc140)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc140)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc559)
            %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc141)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc142)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc560)
          } loc(#loc530)
          cir.yield loc(#loc56)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc145)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc145)
          cir.condition(%15) loc(#loc145)
        } loc(#loc529)
      } loc(#loc529)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc148)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc149)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc149)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc562)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc151)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc152)
        } loc(#loc563)
      } loc(#loc561)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc155)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc156)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc156)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc565)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc158)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc159)
        } loc(#loc566)
      } loc(#loc564)
    } loc(#loc523)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc160)
    %3 = cir.get_global @badStatic : !cir.ptr<!s32i> loc(#loc512)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc567)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc162)
    cir.call @badSink(%4) : (!s32i) -> () loc(#loc163)
    cir.return loc(#loc38)
  } loc(#loc520)
  cir.func no_proto @CWE190_Integer_Overflow__int_listen_socket_add_21_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc569)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc166)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc570)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc168)
    %2 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc571)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc170)
    cir.return loc(#loc165)
  } loc(#loc568)
  cir.global "private" internal dsolocal @goodB2G1Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc572)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc573)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc176)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc177)
  cir.func internal private @goodB2G1Sink(%arg0: !s32i loc(fused[#loc180, #loc181])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc575)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc182)
    cir.scope {
      %1 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc572)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc185)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc185)
      cir.if %3 {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc189)
      } else {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc192)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc193)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc579)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc581)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc199)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc198)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc199)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc581)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc200)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc201)
          } else {
            %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc177)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc177)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc202)
          } loc(#loc580)
        } loc(#loc578)
      } loc(#loc577)
    } loc(#loc576)
    cir.return loc(#loc179)
  } loc(#loc574)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc583)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc207)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc584)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc586)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc587)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc588)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc589)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc590)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc216)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc216)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc588)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc218)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc218)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc589)
      cir.scope {
        cir.do {
          cir.scope {
            %14 = cir.const #cir.int<2> : !s32i loc(#loc225)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc226)
            %16 = cir.const #cir.int<6> : !s32i loc(#loc227)
            %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc228)
            cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc593)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc233)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc234)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc234)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc595)
              cir.if %62 {
                cir.break loc(#loc236)
              } loc(#loc596)
            } loc(#loc594)
            %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc597)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc239)
            %20 = cir.const #cir.int<16> : !u64i loc(#loc598)
            cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc599)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc244)
            %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc244)
            %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
            cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc600)
            %24 = cir.const #cir.int<0> : !s32i loc(#loc246)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc246)
            %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc601)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc248)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc248)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc249)
            %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc602)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc254)
              %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc604)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc605)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc605)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc259)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc260)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc260)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc606)
              cir.if %66 {
                cir.break loc(#loc262)
              } loc(#loc607)
            } loc(#loc603)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc266)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc267)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc268)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc268)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc609)
              cir.if %64 {
                cir.break loc(#loc270)
              } loc(#loc610)
            } loc(#loc608)
            %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc271)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc272)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc273)
            %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc274)
            cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc611)
            cir.scope {
              %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc279)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc280)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc280)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc613)
              cir.if %62 {
                cir.break loc(#loc282)
              } loc(#loc614)
            } loc(#loc612)
            %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc283)
            %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc284)
            %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc284)
            %39 = cir.const #cir.int<3> : !s32i loc(#loc285)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc285)
            %41 = cir.const #cir.int<4> : !u64i loc(#loc285)
            %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc285)
            %43 = cir.const #cir.int<2> : !s32i loc(#loc285)
            %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc285)
            %45 = cir.binop(add, %42, %44) : !u64i loc(#loc285)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc286)
            %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc286)
            %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc615)
            %49 = cir.const #cir.int<0> : !s32i loc(#loc287)
            %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc288)
            %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc288)
            cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc616)
            cir.scope {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc293)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc294)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc294)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc618)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc295)
                cir.yield %64 : !cir.bool loc(#loc295)
              }, false {
                %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc296)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc297)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc619)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc295)
                  cir.yield %68 : !cir.bool loc(#loc295)
                }, false {
                  %68 = cir.const #false loc(#loc295)
                  cir.yield %68 : !cir.bool loc(#loc295)
                }) : (!cir.bool) -> !cir.bool loc(#loc295)
                cir.yield %67 : !cir.bool loc(#loc295)
              }) : (!cir.bool) -> !cir.bool loc(#loc295)
              cir.if %63 {
                cir.break loc(#loc299)
              } loc(#loc620)
            } loc(#loc617)
            %52 = cir.const #cir.int<0> : !s32i loc(#loc300)
            %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc300)
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc301)
            %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc302)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc302)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc621)
            %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc303)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc304)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc622)
          } loc(#loc592)
          cir.yield loc(#loc222)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc307)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc307)
          cir.condition(%15) loc(#loc307)
        } loc(#loc591)
      } loc(#loc591)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc310)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc311)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc311)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc624)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc313)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc314)
        } loc(#loc625)
      } loc(#loc623)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc317)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc318)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc318)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc627)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc320)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc321)
        } loc(#loc628)
      } loc(#loc626)
    } loc(#loc585)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc322)
    %3 = cir.get_global @goodB2G1Static : !cir.ptr<!s32i> loc(#loc572)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc629)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc324)
    cir.call @goodB2G1Sink(%4) : (!s32i) -> () loc(#loc325)
    cir.return loc(#loc204)
  } loc(#loc582)
  cir.global "private" internal dsolocal @goodB2G2Static = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc630)
  cir.func internal private @goodB2G2Sink(%arg0: !s32i loc(fused[#loc330, #loc331])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc632)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc332)
    cir.scope {
      %1 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc630)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc335)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc335)
      cir.if %3 {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc339)
          %5 = cir.const #cir.int<2147483647> : !s32i loc(#loc340)
          %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc636)
          cir.if %6 {
            %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc638)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc346)
            %9 = cir.const #cir.int<1> : !s32i loc(#loc345)
            %10 = cir.binop(add, %8, %9) nsw : !s32i loc(#loc346)
            cir.store %10, %7 : !s32i, !cir.ptr<!s32i> loc(#loc638)
            %11 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc347)
            cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc348)
          } else {
            %7 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc349)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc349)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc350)
          } loc(#loc637)
        } loc(#loc635)
      } loc(#loc634)
    } loc(#loc633)
    cir.return loc(#loc329)
  } loc(#loc631)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc640)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc355)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc641)
    cir.scope {
      %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc643)
      %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc644)
      %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc645)
      %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc646)
      %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc647)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc364)
      %11 = cir.unary(minus, %10) nsw : !s32i, !s32i loc(#loc364)
      cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc645)
      %12 = cir.const #cir.int<1> : !s32i loc(#loc366)
      %13 = cir.unary(minus, %12) nsw : !s32i, !s32i loc(#loc366)
      cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc646)
      cir.scope {
        cir.do {
          cir.scope {
            %14 = cir.const #cir.int<2> : !s32i loc(#loc373)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc374)
            %16 = cir.const #cir.int<6> : !s32i loc(#loc375)
            %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc376)
            cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc650)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc381)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc382)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc382)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc652)
              cir.if %62 {
                cir.break loc(#loc384)
              } loc(#loc653)
            } loc(#loc651)
            %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc654)
            %19 = cir.const #cir.int<0> : !s32i loc(#loc387)
            %20 = cir.const #cir.int<16> : !u64i loc(#loc655)
            cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc656)
            %21 = cir.const #cir.int<2> : !s32i loc(#loc392)
            %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc392)
            %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc79)
            cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc657)
            %24 = cir.const #cir.int<0> : !s32i loc(#loc394)
            %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc394)
            %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc82)
            %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc83)
            cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc658)
            %28 = cir.const #cir.int<27015> : !s32i loc(#loc396)
            %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc396)
            %30 = cir.call @htons(%29) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc397)
            %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc87)
            cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc659)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc402)
              %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc661)
              %61 = cir.const #cir.int<16> : !u64i loc(#loc662)
              %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc662)
              %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc407)
              %64 = cir.const #cir.int<1> : !s32i loc(#loc408)
              %65 = cir.unary(minus, %64) nsw : !s32i, !s32i loc(#loc408)
              %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc663)
              cir.if %66 {
                cir.break loc(#loc410)
              } loc(#loc664)
            } loc(#loc660)
            cir.scope {
              %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc413)
              %60 = cir.const #cir.int<5> : !s32i loc(#loc414)
              %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc415)
              %62 = cir.const #cir.int<1> : !s32i loc(#loc416)
              %63 = cir.unary(minus, %62) nsw : !s32i, !s32i loc(#loc416)
              %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc666)
              cir.if %64 {
                cir.break loc(#loc418)
              } loc(#loc667)
            } loc(#loc665)
            %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc419)
            %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc420)
            %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc421)
            %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc422)
            cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc668)
            cir.scope {
              %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc427)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc428)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc428)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc670)
              cir.if %62 {
                cir.break loc(#loc430)
              } loc(#loc671)
            } loc(#loc669)
            %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc431)
            %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc432)
            %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc432)
            %39 = cir.const #cir.int<3> : !s32i loc(#loc433)
            %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc433)
            %41 = cir.const #cir.int<4> : !u64i loc(#loc433)
            %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc433)
            %43 = cir.const #cir.int<2> : !s32i loc(#loc433)
            %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc433)
            %45 = cir.binop(add, %42, %44) : !u64i loc(#loc433)
            %46 = cir.const #cir.int<1> : !s32i loc(#loc434)
            %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc434)
            %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc672)
            %49 = cir.const #cir.int<0> : !s32i loc(#loc435)
            %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc436)
            %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc436)
            cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc673)
            cir.scope {
              %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc441)
              %60 = cir.const #cir.int<1> : !s32i loc(#loc442)
              %61 = cir.unary(minus, %60) nsw : !s32i, !s32i loc(#loc442)
              %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc675)
              %63 = cir.ternary(%62, true {
                %64 = cir.const #true loc(#loc443)
                cir.yield %64 : !cir.bool loc(#loc443)
              }, false {
                %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc444)
                %65 = cir.const #cir.int<0> : !s32i loc(#loc445)
                %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc676)
                %67 = cir.ternary(%66, true {
                  %68 = cir.const #true loc(#loc443)
                  cir.yield %68 : !cir.bool loc(#loc443)
                }, false {
                  %68 = cir.const #false loc(#loc443)
                  cir.yield %68 : !cir.bool loc(#loc443)
                }) : (!cir.bool) -> !cir.bool loc(#loc443)
                cir.yield %67 : !cir.bool loc(#loc443)
              }) : (!cir.bool) -> !cir.bool loc(#loc443)
              cir.if %63 {
                cir.break loc(#loc447)
              } loc(#loc677)
            } loc(#loc674)
            %52 = cir.const #cir.int<0> : !s32i loc(#loc448)
            %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc448)
            %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc449)
            %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc450)
            %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc450)
            cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc678)
            %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc451)
            %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i side_effect(pure) extra(#fn_attr) loc(#loc452)
            cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc679)
          } loc(#loc649)
          cir.yield loc(#loc370)
        } while {
          %14 = cir.const #cir.int<0> : !s32i loc(#loc455)
          %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc455)
          cir.condition(%15) loc(#loc455)
        } loc(#loc648)
      } loc(#loc648)
      cir.scope {
        %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc458)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc459)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc459)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc681)
        cir.if %17 {
          %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc461)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc462)
        } loc(#loc682)
      } loc(#loc680)
      cir.scope {
        %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc465)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc466)
        %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc466)
        %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc684)
        cir.if %17 {
          %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc468)
          %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc469)
        } loc(#loc685)
      } loc(#loc683)
    } loc(#loc642)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc470)
    %3 = cir.get_global @goodB2G2Static : !cir.ptr<!s32i> loc(#loc630)
    cir.store %2, %3 : !s32i, !cir.ptr<!s32i> loc(#loc686)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc472)
    cir.call @goodB2G2Sink(%4) : (!s32i) -> () loc(#loc473)
    cir.return loc(#loc352)
  } loc(#loc639)
  cir.global "private" internal dsolocal @goodG2BStatic = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc687)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc478, #loc479])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc689)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc480)
    cir.scope {
      %1 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc687)
      %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc483)
      %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc483)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc693)
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc489)
          %6 = cir.const #cir.int<1> : !s32i loc(#loc488)
          %7 = cir.binop(add, %5, %6) nsw : !s32i loc(#loc489)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc693)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc490)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc491)
        } loc(#loc692)
      } loc(#loc691)
    } loc(#loc690)
    cir.return loc(#loc477)
  } loc(#loc688)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc695)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc496)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc696)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc498)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc697)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc500)
    %4 = cir.get_global @goodG2BStatic : !cir.ptr<!s32i> loc(#loc687)
    cir.store %3, %4 : !s32i, !cir.ptr<!s32i> loc(#loc698)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc502)
    cir.call @goodG2BSink(%5) : (!s32i) -> () loc(#loc503)
    cir.return loc(#loc493)
  } loc(#loc694)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_listen_socket_add_21.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:1)
#loc12 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":45:1)
#loc18 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":45:24)
#loc19 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc20 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc21 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":47:1)
#loc22 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":57:1)
#loc25 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":48:1)
#loc26 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":49:5)
#loc27 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":56:5)
#loc28 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":49:8)
#loc29 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":50:5)
#loc30 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":51:9)
#loc31 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":55:9)
#loc32 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":53:13)
#loc33 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":53:33)
#loc34 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":53:26)
#loc35 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":54:26)
#loc36 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":54:13)
#loc37 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":59:1)
#loc38 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":135:1)
#loc39 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":61:5)
#loc40 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":61:9)
#loc41 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":63:12)
#loc42 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":63:5)
#loc43 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":64:5)
#loc44 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":132:5)
#loc45 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":69:9)
#loc46 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":69:13)
#loc47 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":70:9)
#loc48 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":70:28)
#loc49 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":71:9)
#loc50 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":71:31)
#loc51 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":72:9)
#loc52 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":72:31)
#loc53 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":73:9)
#loc54 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":73:41)
#loc55 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":74:9)
#loc56 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":117:17)
#loc57 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":75:9)
#loc58 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":116:9)
#loc59 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:35)
#loc60 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:44)
#loc61 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:57)
#loc62 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:28)
#loc63 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:13)
#loc64 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":84:68)
#loc65 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":85:13)
#loc66 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":88:13)
#loc67 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":85:17)
#loc68 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":85:33)
#loc69 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":86:13)
#loc70 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":87:17)
#loc71 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:20)
#loc72 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:21)
#loc73 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:30)
#loc74 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:33)
#loc75 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:47)
#loc76 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:13)
#loc77 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":89:48)
#loc78 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":90:34)
#loc79 = loc("/usr/include/netinet/in.h":249:5)
#loc80 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":90:13)
#loc81 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":91:39)
#loc82 = loc("/usr/include/netinet/in.h":251:20)
#loc83 = loc("/usr/include/netinet/in.h":33:15)
#loc84 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":91:13)
#loc85 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":92:38)
#loc86 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":92:32)
#loc87 = loc("/usr/include/netinet/in.h":250:15)
#loc88 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":92:13)
#loc89 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":92:46)
#loc90 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:13)
#loc91 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":96:13)
#loc92 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:22)
#loc93 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:54)
#loc94 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:55)
#loc95 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:64)
#loc96 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:78)
#loc97 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:17)
#loc98 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":93:84)
#loc99 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":94:13)
#loc100 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":95:17)
#loc101 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":97:13)
#loc102 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":100:13)
#loc103 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":97:24)
#loc104 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":97:38)
#loc105 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":97:17)
#loc106 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":97:57)
#loc107 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":98:13)
#loc108 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":99:17)
#loc109 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:35)
#loc110 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:49)
#loc111 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:55)
#loc112 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:28)
#loc113 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:13)
#loc114 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":101:59)
#loc115 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":102:13)
#loc116 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":105:13)
#loc117 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":102:17)
#loc118 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":102:33)
#loc119 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":103:13)
#loc120 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":104:17)
#loc121 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:31)
#loc122 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:45)
#loc123 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:58)
#loc124 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:76)
#loc125 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:79)
#loc126 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:26)
#loc127 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:13)
#loc128 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":107:80)
#loc129 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:13)
#loc130 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":111:13)
#loc131 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:17)
#loc132 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:31)
#loc133 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:44)
#loc134 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:47)
#loc135 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":108:61)
#loc136 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":109:13)
#loc137 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":110:17)
#loc138 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":113:39)
#loc139 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":113:25)
#loc140 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":113:13)
#loc141 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":115:25)
#loc142 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":115:20)
#loc143 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":115:13)
#loc144 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":115:36)
#loc145 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":117:16)
#loc146 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":118:9)
#loc147 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":121:9)
#loc148 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":118:13)
#loc149 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":118:29)
#loc150 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":119:9)
#loc151 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":120:26)
#loc152 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":120:13)
#loc153 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":122:9)
#loc154 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":125:9)
#loc155 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":122:13)
#loc156 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":122:29)
#loc157 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":123:9)
#loc158 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":124:26)
#loc159 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":124:13)
#loc160 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":133:17)
#loc161 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":133:5)
#loc162 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":134:13)
#loc163 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":134:5)
#loc164 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":367:1)
#loc165 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":372:1)
#loc166 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":369:5)
#loc167 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":369:14)
#loc168 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":370:5)
#loc169 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":370:14)
#loc170 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":371:5)
#loc171 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":371:13)
#loc172 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":142:1)
#loc173 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":142:29)
#loc174 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc175 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc176 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":152:19)
#loc177 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":164:23)
#loc178 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":147:1)
#loc179 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":167:1)
#loc182 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":148:1)
#loc183 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":149:5)
#loc184 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":166:5)
#loc185 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":149:8)
#loc186 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":150:5)
#loc187 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":153:5)
#loc188 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":155:5)
#loc189 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":152:9)
#loc190 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":157:9)
#loc191 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":165:9)
#loc192 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":157:13)
#loc193 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":157:20)
#loc194 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":158:9)
#loc195 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":161:9)
#loc196 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":163:9)
#loc197 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":159:13)
#loc198 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":159:33)
#loc199 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":159:26)
#loc200 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":160:26)
#loc201 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":160:13)
#loc202 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":164:13)
#loc203 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":169:1)
#loc204 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":245:1)
#loc205 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":171:5)
#loc206 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":171:9)
#loc207 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":173:12)
#loc208 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":173:5)
#loc209 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":174:5)
#loc210 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":242:5)
#loc211 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":179:9)
#loc212 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":179:13)
#loc213 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":180:9)
#loc214 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":180:28)
#loc215 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":181:9)
#loc216 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":181:31)
#loc217 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":182:9)
#loc218 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":182:31)
#loc219 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":183:9)
#loc220 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":183:41)
#loc221 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":184:9)
#loc222 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":227:17)
#loc223 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":185:9)
#loc224 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":226:9)
#loc225 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:35)
#loc226 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:44)
#loc227 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:57)
#loc228 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:28)
#loc229 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:13)
#loc230 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":194:68)
#loc231 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":195:13)
#loc232 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":198:13)
#loc233 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":195:17)
#loc234 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":195:33)
#loc235 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":196:13)
#loc236 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":197:17)
#loc237 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:20)
#loc238 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:21)
#loc239 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:30)
#loc240 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:33)
#loc241 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:47)
#loc242 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:13)
#loc243 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":199:48)
#loc244 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":200:34)
#loc245 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":200:13)
#loc246 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":201:39)
#loc247 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":201:13)
#loc248 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":202:38)
#loc249 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":202:32)
#loc250 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":202:13)
#loc251 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":202:46)
#loc252 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:13)
#loc253 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":206:13)
#loc254 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:22)
#loc255 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:54)
#loc256 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:55)
#loc257 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:64)
#loc258 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:78)
#loc259 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:17)
#loc260 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":203:84)
#loc261 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":204:13)
#loc262 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":205:17)
#loc263 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":207:13)
#loc264 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":210:13)
#loc265 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":207:24)
#loc266 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":207:38)
#loc267 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":207:17)
#loc268 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":207:57)
#loc269 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":208:13)
#loc270 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":209:17)
#loc271 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:35)
#loc272 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:49)
#loc273 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:55)
#loc274 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:28)
#loc275 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:13)
#loc276 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":211:59)
#loc277 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":212:13)
#loc278 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":215:13)
#loc279 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":212:17)
#loc280 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":212:33)
#loc281 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":213:13)
#loc282 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":214:17)
#loc283 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:31)
#loc284 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:45)
#loc285 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:58)
#loc286 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:76)
#loc287 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:79)
#loc288 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:26)
#loc289 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:13)
#loc290 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":217:80)
#loc291 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:13)
#loc292 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":221:13)
#loc293 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:17)
#loc294 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:31)
#loc295 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:44)
#loc296 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:47)
#loc297 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":218:61)
#loc298 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":219:13)
#loc299 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":220:17)
#loc300 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":223:39)
#loc301 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":223:25)
#loc302 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":223:13)
#loc303 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":225:25)
#loc304 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":225:20)
#loc305 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":225:13)
#loc306 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":225:36)
#loc307 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":227:16)
#loc308 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":228:9)
#loc309 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":231:9)
#loc310 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":228:13)
#loc311 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":228:29)
#loc312 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":229:9)
#loc313 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":230:26)
#loc314 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":230:13)
#loc315 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":232:9)
#loc316 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":235:9)
#loc317 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":232:13)
#loc318 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":232:29)
#loc319 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":233:9)
#loc320 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":234:26)
#loc321 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":234:13)
#loc322 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":243:22)
#loc323 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":243:5)
#loc324 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":244:18)
#loc325 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":244:5)
#loc326 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":143:1)
#loc327 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":143:29)
#loc328 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":248:1)
#loc329 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":263:1)
#loc332 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":249:1)
#loc333 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":250:5)
#loc334 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":262:5)
#loc335 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":250:8)
#loc336 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":251:5)
#loc337 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":253:9)
#loc338 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":261:9)
#loc339 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":253:13)
#loc340 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":253:20)
#loc341 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":254:9)
#loc342 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":257:9)
#loc343 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":259:9)
#loc344 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":255:13)
#loc345 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":255:33)
#loc346 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":255:26)
#loc347 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":256:26)
#loc348 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":256:13)
#loc349 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":260:23)
#loc350 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":260:13)
#loc351 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":265:1)
#loc352 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":341:1)
#loc353 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":267:5)
#loc354 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":267:9)
#loc355 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":269:12)
#loc356 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":269:5)
#loc357 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":270:5)
#loc358 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":338:5)
#loc359 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":275:9)
#loc360 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":275:13)
#loc361 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":276:9)
#loc362 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":276:28)
#loc363 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":277:9)
#loc364 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":277:31)
#loc365 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":278:9)
#loc366 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":278:31)
#loc367 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":279:9)
#loc368 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":279:41)
#loc369 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":280:9)
#loc370 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":323:17)
#loc371 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":281:9)
#loc372 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":322:9)
#loc373 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:35)
#loc374 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:44)
#loc375 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:57)
#loc376 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:28)
#loc377 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:13)
#loc378 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":290:68)
#loc379 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":291:13)
#loc380 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":294:13)
#loc381 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":291:17)
#loc382 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":291:33)
#loc383 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":292:13)
#loc384 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":293:17)
#loc385 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:20)
#loc386 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:21)
#loc387 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:30)
#loc388 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:33)
#loc389 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:47)
#loc390 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:13)
#loc391 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":295:48)
#loc392 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":296:34)
#loc393 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":296:13)
#loc394 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":297:39)
#loc395 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":297:13)
#loc396 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":298:38)
#loc397 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":298:32)
#loc398 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":298:13)
#loc399 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":298:46)
#loc400 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:13)
#loc401 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":302:13)
#loc402 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:22)
#loc403 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:54)
#loc404 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:55)
#loc405 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:64)
#loc406 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:78)
#loc407 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:17)
#loc408 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":299:84)
#loc409 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":300:13)
#loc410 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":301:17)
#loc411 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":303:13)
#loc412 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":306:13)
#loc413 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":303:24)
#loc414 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":303:38)
#loc415 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":303:17)
#loc416 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":303:57)
#loc417 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":304:13)
#loc418 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":305:17)
#loc419 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:35)
#loc420 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:49)
#loc421 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:55)
#loc422 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:28)
#loc423 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:13)
#loc424 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":307:59)
#loc425 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":308:13)
#loc426 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":311:13)
#loc427 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":308:17)
#loc428 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":308:33)
#loc429 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":309:13)
#loc430 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":310:17)
#loc431 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:31)
#loc432 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:45)
#loc433 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:58)
#loc434 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:76)
#loc435 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:79)
#loc436 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:26)
#loc437 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:13)
#loc438 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":313:80)
#loc439 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:13)
#loc440 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":317:13)
#loc441 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:17)
#loc442 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:31)
#loc443 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:44)
#loc444 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:47)
#loc445 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":314:61)
#loc446 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":315:13)
#loc447 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":316:17)
#loc448 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":319:39)
#loc449 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":319:25)
#loc450 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":319:13)
#loc451 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":321:25)
#loc452 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":321:20)
#loc453 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":321:13)
#loc454 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":321:36)
#loc455 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":323:16)
#loc456 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":324:9)
#loc457 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":327:9)
#loc458 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":324:13)
#loc459 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":324:29)
#loc460 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":325:9)
#loc461 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":326:26)
#loc462 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":326:13)
#loc463 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":328:9)
#loc464 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":331:9)
#loc465 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":328:13)
#loc466 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":328:29)
#loc467 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":329:9)
#loc468 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":330:26)
#loc469 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":330:13)
#loc470 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":339:22)
#loc471 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":339:5)
#loc472 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":340:18)
#loc473 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":340:5)
#loc474 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":144:1)
#loc475 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":144:28)
#loc476 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":344:1)
#loc477 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":354:1)
#loc480 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":345:1)
#loc481 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":346:5)
#loc482 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":353:5)
#loc483 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":346:8)
#loc484 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":347:5)
#loc485 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":348:9)
#loc486 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":352:9)
#loc487 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":350:13)
#loc488 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":350:33)
#loc489 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":350:26)
#loc490 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":351:26)
#loc491 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":351:13)
#loc492 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":356:1)
#loc493 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":365:1)
#loc494 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":358:5)
#loc495 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":358:9)
#loc496 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":360:12)
#loc497 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":360:5)
#loc498 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":362:12)
#loc499 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":362:5)
#loc500 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":363:21)
#loc501 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":363:5)
#loc502 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":364:17)
#loc503 = loc("CWE190_Integer_Overflow__int_listen_socket_add_21.c":364:5)
#loc504 = loc(fused[#loc1, #loc2])
#loc505 = loc(fused[#loc3, #loc4])
#loc506 = loc(fused[#loc5, #loc6])
#loc507 = loc(fused[#loc7, #loc8])
#loc508 = loc(fused[#loc9, #loc10])
#loc509 = loc(fused[#loc11, #loc12])
#loc510 = loc(fused[#loc13, #loc14])
#loc511 = loc(fused[#loc15, #loc16])
#loc512 = loc(fused[#loc17, #loc18])
#loc513 = loc(fused[#loc19, #loc20])
#loc514 = loc(fused[#loc21, #loc22])
#loc516 = loc(fused[#loc26, #loc27])
#loc517 = loc(fused[#loc29, #loc27])
#loc518 = loc(fused[#loc30, #loc31])
#loc519 = loc(fused[#loc32, #loc33])
#loc520 = loc(fused[#loc37, #loc38])
#loc521 = loc(fused[#loc39, #loc40])
#loc522 = loc(fused[#loc42, #loc41])
#loc523 = loc(fused[#loc43, #loc44])
#loc524 = loc(fused[#loc45, #loc46])
#loc525 = loc(fused[#loc47, #loc48])
#loc526 = loc(fused[#loc49, #loc50])
#loc527 = loc(fused[#loc51, #loc52])
#loc528 = loc(fused[#loc53, #loc54])
#loc529 = loc(fused[#loc55, #loc56])
#loc530 = loc(fused[#loc57, #loc58])
#loc531 = loc(fused[#loc63, #loc64])
#loc532 = loc(fused[#loc65, #loc66])
#loc533 = loc(fused[#loc67, #loc68])
#loc534 = loc(fused[#loc69, #loc66])
#loc535 = loc(fused[#loc71, #loc72])
#loc536 = loc(fused[#loc74, #loc75])
#loc537 = loc(fused[#loc76, #loc77])
#loc538 = loc(fused[#loc80, #loc78])
#loc539 = loc(fused[#loc84, #loc81])
#loc540 = loc(fused[#loc88, #loc89])
#loc541 = loc(fused[#loc90, #loc91])
#loc542 = loc(fused[#loc93, #loc94])
#loc543 = loc(fused[#loc95, #loc96])
#loc544 = loc(fused[#loc97, #loc98])
#loc545 = loc(fused[#loc99, #loc91])
#loc546 = loc(fused[#loc101, #loc102])
#loc547 = loc(fused[#loc105, #loc106])
#loc548 = loc(fused[#loc107, #loc102])
#loc549 = loc(fused[#loc113, #loc114])
#loc550 = loc(fused[#loc115, #loc116])
#loc551 = loc(fused[#loc117, #loc118])
#loc552 = loc(fused[#loc119, #loc116])
#loc553 = loc(fused[#loc123, #loc124])
#loc554 = loc(fused[#loc127, #loc128])
#loc555 = loc(fused[#loc129, #loc130])
#loc556 = loc(fused[#loc131, #loc132])
#loc557 = loc(fused[#loc134, #loc135])
#loc558 = loc(fused[#loc136, #loc130])
#loc559 = loc(fused[#loc140, #loc138])
#loc560 = loc(fused[#loc143, #loc144])
#loc561 = loc(fused[#loc146, #loc147])
#loc562 = loc(fused[#loc148, #loc149])
#loc563 = loc(fused[#loc150, #loc147])
#loc564 = loc(fused[#loc153, #loc154])
#loc565 = loc(fused[#loc155, #loc156])
#loc566 = loc(fused[#loc157, #loc154])
#loc567 = loc(fused[#loc161, #loc160])
#loc568 = loc(fused[#loc164, #loc165])
#loc569 = loc(fused[#loc166, #loc167])
#loc570 = loc(fused[#loc168, #loc169])
#loc571 = loc(fused[#loc170, #loc171])
#loc572 = loc(fused[#loc172, #loc173])
#loc573 = loc(fused[#loc174, #loc175])
#loc574 = loc(fused[#loc178, #loc179])
#loc576 = loc(fused[#loc183, #loc184])
#loc577 = loc(fused[#loc186, #loc187, #loc188, #loc184])
#loc578 = loc(fused[#loc190, #loc191])
#loc579 = loc(fused[#loc192, #loc193])
#loc580 = loc(fused[#loc194, #loc195, #loc196, #loc191])
#loc581 = loc(fused[#loc197, #loc198])
#loc582 = loc(fused[#loc203, #loc204])
#loc583 = loc(fused[#loc205, #loc206])
#loc584 = loc(fused[#loc208, #loc207])
#loc585 = loc(fused[#loc209, #loc210])
#loc586 = loc(fused[#loc211, #loc212])
#loc587 = loc(fused[#loc213, #loc214])
#loc588 = loc(fused[#loc215, #loc216])
#loc589 = loc(fused[#loc217, #loc218])
#loc590 = loc(fused[#loc219, #loc220])
#loc591 = loc(fused[#loc221, #loc222])
#loc592 = loc(fused[#loc223, #loc224])
#loc593 = loc(fused[#loc229, #loc230])
#loc594 = loc(fused[#loc231, #loc232])
#loc595 = loc(fused[#loc233, #loc234])
#loc596 = loc(fused[#loc235, #loc232])
#loc597 = loc(fused[#loc237, #loc238])
#loc598 = loc(fused[#loc240, #loc241])
#loc599 = loc(fused[#loc242, #loc243])
#loc600 = loc(fused[#loc245, #loc244])
#loc601 = loc(fused[#loc247, #loc246])
#loc602 = loc(fused[#loc250, #loc251])
#loc603 = loc(fused[#loc252, #loc253])
#loc604 = loc(fused[#loc255, #loc256])
#loc605 = loc(fused[#loc257, #loc258])
#loc606 = loc(fused[#loc259, #loc260])
#loc607 = loc(fused[#loc261, #loc253])
#loc608 = loc(fused[#loc263, #loc264])
#loc609 = loc(fused[#loc267, #loc268])
#loc610 = loc(fused[#loc269, #loc264])
#loc611 = loc(fused[#loc275, #loc276])
#loc612 = loc(fused[#loc277, #loc278])
#loc613 = loc(fused[#loc279, #loc280])
#loc614 = loc(fused[#loc281, #loc278])
#loc615 = loc(fused[#loc285, #loc286])
#loc616 = loc(fused[#loc289, #loc290])
#loc617 = loc(fused[#loc291, #loc292])
#loc618 = loc(fused[#loc293, #loc294])
#loc619 = loc(fused[#loc296, #loc297])
#loc620 = loc(fused[#loc298, #loc292])
#loc621 = loc(fused[#loc302, #loc300])
#loc622 = loc(fused[#loc305, #loc306])
#loc623 = loc(fused[#loc308, #loc309])
#loc624 = loc(fused[#loc310, #loc311])
#loc625 = loc(fused[#loc312, #loc309])
#loc626 = loc(fused[#loc315, #loc316])
#loc627 = loc(fused[#loc317, #loc318])
#loc628 = loc(fused[#loc319, #loc316])
#loc629 = loc(fused[#loc323, #loc322])
#loc630 = loc(fused[#loc326, #loc327])
#loc631 = loc(fused[#loc328, #loc329])
#loc633 = loc(fused[#loc333, #loc334])
#loc634 = loc(fused[#loc336, #loc334])
#loc635 = loc(fused[#loc337, #loc338])
#loc636 = loc(fused[#loc339, #loc340])
#loc637 = loc(fused[#loc341, #loc342, #loc343, #loc338])
#loc638 = loc(fused[#loc344, #loc345])
#loc639 = loc(fused[#loc351, #loc352])
#loc640 = loc(fused[#loc353, #loc354])
#loc641 = loc(fused[#loc356, #loc355])
#loc642 = loc(fused[#loc357, #loc358])
#loc643 = loc(fused[#loc359, #loc360])
#loc644 = loc(fused[#loc361, #loc362])
#loc645 = loc(fused[#loc363, #loc364])
#loc646 = loc(fused[#loc365, #loc366])
#loc647 = loc(fused[#loc367, #loc368])
#loc648 = loc(fused[#loc369, #loc370])
#loc649 = loc(fused[#loc371, #loc372])
#loc650 = loc(fused[#loc377, #loc378])
#loc651 = loc(fused[#loc379, #loc380])
#loc652 = loc(fused[#loc381, #loc382])
#loc653 = loc(fused[#loc383, #loc380])
#loc654 = loc(fused[#loc385, #loc386])
#loc655 = loc(fused[#loc388, #loc389])
#loc656 = loc(fused[#loc390, #loc391])
#loc657 = loc(fused[#loc393, #loc392])
#loc658 = loc(fused[#loc395, #loc394])
#loc659 = loc(fused[#loc398, #loc399])
#loc660 = loc(fused[#loc400, #loc401])
#loc661 = loc(fused[#loc403, #loc404])
#loc662 = loc(fused[#loc405, #loc406])
#loc663 = loc(fused[#loc407, #loc408])
#loc664 = loc(fused[#loc409, #loc401])
#loc665 = loc(fused[#loc411, #loc412])
#loc666 = loc(fused[#loc415, #loc416])
#loc667 = loc(fused[#loc417, #loc412])
#loc668 = loc(fused[#loc423, #loc424])
#loc669 = loc(fused[#loc425, #loc426])
#loc670 = loc(fused[#loc427, #loc428])
#loc671 = loc(fused[#loc429, #loc426])
#loc672 = loc(fused[#loc433, #loc434])
#loc673 = loc(fused[#loc437, #loc438])
#loc674 = loc(fused[#loc439, #loc440])
#loc675 = loc(fused[#loc441, #loc442])
#loc676 = loc(fused[#loc444, #loc445])
#loc677 = loc(fused[#loc446, #loc440])
#loc678 = loc(fused[#loc450, #loc448])
#loc679 = loc(fused[#loc453, #loc454])
#loc680 = loc(fused[#loc456, #loc457])
#loc681 = loc(fused[#loc458, #loc459])
#loc682 = loc(fused[#loc460, #loc457])
#loc683 = loc(fused[#loc463, #loc464])
#loc684 = loc(fused[#loc465, #loc466])
#loc685 = loc(fused[#loc467, #loc464])
#loc686 = loc(fused[#loc471, #loc470])
#loc687 = loc(fused[#loc474, #loc475])
#loc688 = loc(fused[#loc476, #loc477])
#loc690 = loc(fused[#loc481, #loc482])
#loc691 = loc(fused[#loc484, #loc482])
#loc692 = loc(fused[#loc485, #loc486])
#loc693 = loc(fused[#loc487, #loc488])
#loc694 = loc(fused[#loc492, #loc493])
#loc695 = loc(fused[#loc494, #loc495])
#loc696 = loc(fused[#loc497, #loc496])
#loc697 = loc(fused[#loc499, #loc498])
#loc698 = loc(fused[#loc501, #loc500])
