!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":173:10)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":173:14)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":173:20)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":173:32)
#true = #cir.bool<true> : !cir.bool
#loc274 = loc(fused[#loc88, #loc89])
#loc275 = loc(fused[#loc90, #loc91])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc236)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc243)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc243)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc17)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc22)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc22)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          cir.yield %24 : !u32i loc(#loc22)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
          cir.yield %28 : !u32i loc(#loc22)
        }) : (!cir.bool) -> !u32i loc(#loc22)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc22)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc24)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc246)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc248)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc248)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc28)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc28)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc251)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc36)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc36)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc251)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc39)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc39)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc253)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc41)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc42)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc42)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc254)
              cir.condition(%15) loc(#loc43)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc7)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc7)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc45)
              } loc(#loc255)
              cir.yield loc(#loc38)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc46)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc47)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc256)
              cir.yield loc(#loc252)
            } loc(#loc252)
          } loc(#loc252)
        } loc(#loc250)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc258)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc51)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc258)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc54)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc55)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc260)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc58)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc261)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc56)
                cir.yield %18 : !cir.bool loc(#loc56)
              }, false {
                %18 = cir.const #false loc(#loc56)
                cir.yield %18 : !cir.bool loc(#loc56)
              }) : (!cir.bool) -> !cir.bool loc(#loc56)
              cir.yield %17 : !cir.bool loc(#loc56)
            }, false {
              %14 = cir.const #false loc(#loc56)
              cir.yield %14 : !cir.bool loc(#loc56)
            }) : (!cir.bool) -> !cir.bool loc(#loc56)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc62)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc62)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc264)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc64)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc65)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc265)
                  cir.condition(%19) loc(#loc66)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc68)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc68)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc69)
                  } loc(#loc266)
                  cir.yield loc(#loc61)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc70)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc71)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc267)
                  cir.yield loc(#loc263)
                } loc(#loc263)
              } loc(#loc263)
            } loc(#loc262)
          } loc(#loc259)
        } loc(#loc257)
      } loc(#loc249)
    } loc(#loc247)
    cir.return loc(#loc9)
  } loc(#loc239)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc269)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc270)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc76)
    cir.return loc(#loc73)
  } loc(#loc268)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc271)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc272)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc84)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc85)
  cir.func @main(%arg0: !s32i loc(fused[#loc88, #loc89]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc90, #loc91])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc274)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc275)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc87)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc92)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc92)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc93)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc94)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc94)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc95)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc82)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc82)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc96)
    %8 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc276)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_12_good() : () -> () loc(#loc97)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc99)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    %13 = cir.get_global @CWE400_Resource_Exhaustion__rand_for_loop_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc277)
    cir.call @CWE400_Resource_Exhaustion__rand_for_loop_12_bad() : () -> () loc(#loc101)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc85)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc103)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc104)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc278)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc278)
    cir.return %17 : !s32i loc(#loc278)
  } loc(#loc273)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc280)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc110)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc111)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc281)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc283)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc283)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc115)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc115)
      cir.if %6 {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc120)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc120)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc120)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc120)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc120)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc120)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc120)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc120)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc120)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc120)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc120)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc120)
          cir.yield %24 : !u32i loc(#loc120)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc120)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc120)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc120)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc120)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc120)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc120)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc120)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc120)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc120)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc120)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc120)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc120)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc120)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc120)
          cir.yield %28 : !u32i loc(#loc120)
        }) : (!cir.bool) -> !u32i loc(#loc120)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc120)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
      } else {
        %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc122)
        %9 = cir.binop(and, %7, %8) : !s32i loc(#loc122)
        %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc122)
        %11 = cir.ternary(%10, true {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc122)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc122)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc122)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc122)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc122)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc122)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc122)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc122)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc122)
          cir.yield %24 : !u32i loc(#loc122)
        }, false {
          %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc122)
          %15 = cir.const #cir.int<30> : !s32i loc(#loc122)
          %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc122)
          %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc122)
          %19 = cir.const #cir.int<15> : !s32i loc(#loc122)
          %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc122)
          %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc122)
          %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc122)
          %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc122)
          %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc122)
          %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc122)
          %26 = cir.const #cir.int<1> : !s32i loc(#loc122)
          %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc122)
          %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc122)
          cir.yield %28 : !u32i loc(#loc122)
        }) : (!cir.bool) -> !u32i loc(#loc122)
        %12 = cir.cast(integral, %11 : !u32i), !s32i loc(#loc122)
        cir.store %12, %0 : !s32i, !cir.ptr<!s32i> loc(#loc286)
      } loc(#loc284)
    } loc(#loc282)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc288)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc288)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc126)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc126)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc291)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc134)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc134)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc291)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc137)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc138)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc293)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc140)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc141)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc294)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc139)
                cir.yield %18 : !cir.bool loc(#loc139)
              }, false {
                %18 = cir.const #false loc(#loc139)
                cir.yield %18 : !cir.bool loc(#loc139)
              }) : (!cir.bool) -> !cir.bool loc(#loc139)
              cir.yield %17 : !cir.bool loc(#loc139)
            }, false {
              %14 = cir.const #false loc(#loc139)
              cir.yield %14 : !cir.bool loc(#loc139)
            }) : (!cir.bool) -> !cir.bool loc(#loc139)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc145)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc145)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc297)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc147)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc148)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc298)
                  cir.condition(%19) loc(#loc149)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc151)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc151)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc152)
                  } loc(#loc299)
                  cir.yield loc(#loc144)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc153)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc154)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc300)
                  cir.yield loc(#loc296)
                } loc(#loc296)
              } loc(#loc296)
            } loc(#loc295)
          } loc(#loc292)
        } loc(#loc290)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc302)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc158)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc158)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc302)
          cir.scope {
            %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc161)
            %11 = cir.const #cir.int<0> : !s32i loc(#loc162)
            %12 = cir.cmp(gt, %10, %11) : !s32i, !cir.bool loc(#loc304)
            %13 = cir.ternary(%12, true {
              %14 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc164)
              %15 = cir.const #cir.int<20> : !s32i loc(#loc165)
              %16 = cir.cmp(le, %14, %15) : !s32i, !cir.bool loc(#loc305)
              %17 = cir.ternary(%16, true {
                %18 = cir.const #true loc(#loc163)
                cir.yield %18 : !cir.bool loc(#loc163)
              }, false {
                %18 = cir.const #false loc(#loc163)
                cir.yield %18 : !cir.bool loc(#loc163)
              }) : (!cir.bool) -> !cir.bool loc(#loc163)
              cir.yield %17 : !cir.bool loc(#loc163)
            }, false {
              %14 = cir.const #false loc(#loc163)
              cir.yield %14 : !cir.bool loc(#loc163)
            }) : (!cir.bool) -> !cir.bool loc(#loc163)
            cir.if %13 {
              cir.scope {
                %14 = cir.const #cir.int<0> : !s32i loc(#loc169)
                %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc169)
                cir.store %15, %7 : !u64i, !cir.ptr<!u64i> loc(#loc308)
                cir.for : cond {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc171)
                  %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
                  %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc172)
                  %19 = cir.cmp(lt, %16, %18) : !u64i, !cir.bool loc(#loc309)
                  cir.condition(%19) loc(#loc173)
                } body {
                  cir.scope {
                    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc175)
                    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc175)
                    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc176)
                  } loc(#loc310)
                  cir.yield loc(#loc168)
                } step {
                  %16 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc177)
                  %17 = cir.unary(inc, %16) : !u64i, !u64i loc(#loc178)
                  cir.store %17, %7 : !u64i, !cir.ptr<!u64i> loc(#loc311)
                  cir.yield loc(#loc307)
                } loc(#loc307)
              } loc(#loc307)
            } loc(#loc306)
          } loc(#loc303)
        } loc(#loc301)
      } loc(#loc289)
    } loc(#loc287)
    cir.return loc(#loc107)
  } loc(#loc279)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc313)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc183)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc184)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc314)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc316)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc316)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc188)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc188)
      cir.if %6 {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc193)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc318)
      } else {
        %7 = cir.const #cir.int<20> : !s32i loc(#loc195)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc319)
      } loc(#loc317)
    } loc(#loc315)
    cir.scope {
      %3 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc321)
      %4 = cir.cast(bitcast, %3 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc321)
      %5 = cir.call %4() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc199)
      %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc199)
      cir.if %6 {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc324)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc207)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc207)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc324)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc210)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc210)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc326)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc212)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc213)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc213)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc327)
              cir.condition(%15) loc(#loc214)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc216)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc216)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc217)
              } loc(#loc328)
              cir.yield loc(#loc209)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc218)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc219)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc329)
              cir.yield loc(#loc325)
            } loc(#loc325)
          } loc(#loc325)
        } loc(#loc323)
      } else {
        cir.scope {
          %7 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc331)
          %8 = cir.const #cir.int<0> : !s32i loc(#loc223)
          %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc223)
          cir.store %9, %7 : !u64i, !cir.ptr<!u64i> loc(#loc331)
          cir.scope {
            %10 = cir.const #cir.int<0> : !s32i loc(#loc226)
            %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc226)
            cir.store %11, %7 : !u64i, !cir.ptr<!u64i> loc(#loc333)
            cir.for : cond {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc228)
              %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc229)
              %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc229)
              %15 = cir.cmp(lt, %12, %14) : !u64i, !cir.bool loc(#loc334)
              cir.condition(%15) loc(#loc230)
            } body {
              cir.scope {
                %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc232)
                %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc232)
                cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc233)
              } loc(#loc335)
              cir.yield loc(#loc225)
            } step {
              %12 = cir.load %7 : !cir.ptr<!u64i>, !u64i loc(#loc234)
              %13 = cir.unary(inc, %12) : !u64i, !u64i loc(#loc235)
              cir.store %13, %7 : !u64i, !cir.ptr<!u64i> loc(#loc336)
              cir.yield loc(#loc332)
            } loc(#loc332)
          } loc(#loc332)
        } loc(#loc330)
      } loc(#loc322)
    } loc(#loc320)
    cir.return loc(#loc180)
  } loc(#loc312)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":44:27)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":22:1)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":62:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":24:5)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":24:9)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":26:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":36:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:8)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":27:33)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":28:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":31:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":33:5)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":30:17)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":30:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":35:17)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":35:9)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:5)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":61:5)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:8)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":37:33)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":38:5)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":47:5)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":49:5)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":39:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":46:9)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":40:13)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":40:24)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":45:13)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:22)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:18)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:25)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:37)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:27)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":43:13)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":44:17)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:45)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":42:44)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":50:9)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":60:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":51:13)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":51:24)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":59:13)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:17)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:25)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:27)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:30)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":53:39)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":54:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:17)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":58:17)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:26)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:22)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:29)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:41)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:31)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":56:17)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":57:31)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":57:21)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:49)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":55:48)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":158:1)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":162:1)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":160:5)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":160:13)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":161:5)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":161:13)
#loc78 = loc("/usr/include/stdlib.h":575:1)
#loc79 = loc("/usr/include/stdlib.h":575:41)
#loc80 = loc("/usr/include/time.h":76:1)
#loc81 = loc("/usr/include/time.h":76:38)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":178:15)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":180:15)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":183:15)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":185:15)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":173:1)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":188:1)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":174:1)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":176:27)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":176:22)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":176:5)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":178:5)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":179:5)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":179:55)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":180:5)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":183:5)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":184:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":184:54)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":185:5)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":187:12)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":187:5)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":71:1)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":114:1)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":73:5)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":73:9)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:14)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:13)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":75:5)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:5)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":85:5)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:8)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":76:33)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":77:5)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":80:5)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":82:5)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":79:17)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":79:9)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":84:17)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":84:9)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:5)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":113:5)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:8)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":86:33)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":87:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":99:5)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":101:5)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":88:9)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":98:9)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":89:13)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":89:24)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:13)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":97:13)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:17)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:25)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:27)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:30)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":91:39)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":92:13)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:17)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":96:17)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:26)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:22)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:29)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:41)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:31)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":94:17)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":95:31)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":95:21)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:49)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":93:48)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":102:9)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":112:9)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":103:13)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":103:24)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:13)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":111:13)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:17)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:25)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:27)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:30)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":105:39)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":106:13)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:17)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":110:17)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:26)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:22)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:29)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:41)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:31)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":108:17)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":109:31)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":109:21)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:49)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":107:48)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":119:1)
#loc180 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":156:1)
#loc181 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":121:5)
#loc182 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":121:9)
#loc183 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:14)
#loc184 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:13)
#loc185 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":123:5)
#loc186 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:5)
#loc187 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":133:5)
#loc188 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:8)
#loc189 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":124:33)
#loc190 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":125:5)
#loc191 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":128:5)
#loc192 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":130:5)
#loc193 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":127:17)
#loc194 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":127:9)
#loc195 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":132:17)
#loc196 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":132:9)
#loc197 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:5)
#loc198 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":155:5)
#loc199 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:8)
#loc200 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":134:33)
#loc201 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":135:5)
#loc202 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":144:5)
#loc203 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":146:5)
#loc204 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":136:9)
#loc205 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":143:9)
#loc206 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":137:13)
#loc207 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":137:24)
#loc208 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:13)
#loc209 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":142:13)
#loc210 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:22)
#loc211 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:18)
#loc212 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:25)
#loc213 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:37)
#loc214 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:27)
#loc215 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":140:13)
#loc216 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":141:27)
#loc217 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":141:17)
#loc218 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:45)
#loc219 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":139:44)
#loc220 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":147:9)
#loc221 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":154:9)
#loc222 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":148:13)
#loc223 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":148:24)
#loc224 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:13)
#loc225 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":153:13)
#loc226 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:22)
#loc227 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:18)
#loc228 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:25)
#loc229 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:37)
#loc230 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:27)
#loc231 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":151:13)
#loc232 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":152:27)
#loc233 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":152:17)
#loc234 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:45)
#loc235 = loc("CWE400_Resource_Exhaustion__rand_for_loop_12.c":150:44)
#loc236 = loc(fused[#loc1, #loc2])
#loc237 = loc(fused[#loc3, #loc4])
#loc238 = loc(fused[#loc5, #loc6])
#loc239 = loc(fused[#loc8, #loc9])
#loc240 = loc(fused[#loc10, #loc11])
#loc241 = loc(fused[#loc14, #loc12])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc17, #loc18])
#loc244 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc245 = loc(fused[#loc23, #loc22])
#loc246 = loc(fused[#loc25, #loc24])
#loc247 = loc(fused[#loc26, #loc27])
#loc248 = loc(fused[#loc28, #loc29])
#loc249 = loc(fused[#loc30, #loc31, #loc32, #loc27])
#loc250 = loc(fused[#loc33, #loc34])
#loc251 = loc(fused[#loc35, #loc36])
#loc252 = loc(fused[#loc37, #loc38])
#loc253 = loc(fused[#loc40, #loc39])
#loc254 = loc(fused[#loc41, #loc42])
#loc255 = loc(fused[#loc44, #loc38])
#loc256 = loc(fused[#loc47, #loc46])
#loc257 = loc(fused[#loc48, #loc49])
#loc258 = loc(fused[#loc50, #loc51])
#loc259 = loc(fused[#loc52, #loc53])
#loc260 = loc(fused[#loc54, #loc55])
#loc261 = loc(fused[#loc57, #loc58])
#loc262 = loc(fused[#loc59, #loc53])
#loc263 = loc(fused[#loc60, #loc61])
#loc264 = loc(fused[#loc63, #loc62])
#loc265 = loc(fused[#loc64, #loc65])
#loc266 = loc(fused[#loc67, #loc61])
#loc267 = loc(fused[#loc71, #loc70])
#loc268 = loc(fused[#loc72, #loc73])
#loc269 = loc(fused[#loc74, #loc75])
#loc270 = loc(fused[#loc76, #loc77])
#loc271 = loc(fused[#loc78, #loc79])
#loc272 = loc(fused[#loc80, #loc81])
#loc273 = loc(fused[#loc86, #loc87])
#loc276 = loc(fused[#loc97, #loc98])
#loc277 = loc(fused[#loc101, #loc102])
#loc278 = loc(fused[#loc105, #loc104])
#loc279 = loc(fused[#loc106, #loc107])
#loc280 = loc(fused[#loc108, #loc109])
#loc281 = loc(fused[#loc112, #loc110])
#loc282 = loc(fused[#loc113, #loc114])
#loc283 = loc(fused[#loc115, #loc116])
#loc284 = loc(fused[#loc117, #loc118, #loc119, #loc114])
#loc285 = loc(fused[#loc121, #loc120])
#loc286 = loc(fused[#loc123, #loc122])
#loc287 = loc(fused[#loc124, #loc125])
#loc288 = loc(fused[#loc126, #loc127])
#loc289 = loc(fused[#loc128, #loc129, #loc130, #loc125])
#loc290 = loc(fused[#loc131, #loc132])
#loc291 = loc(fused[#loc133, #loc134])
#loc292 = loc(fused[#loc135, #loc136])
#loc293 = loc(fused[#loc137, #loc138])
#loc294 = loc(fused[#loc140, #loc141])
#loc295 = loc(fused[#loc142, #loc136])
#loc296 = loc(fused[#loc143, #loc144])
#loc297 = loc(fused[#loc146, #loc145])
#loc298 = loc(fused[#loc147, #loc148])
#loc299 = loc(fused[#loc150, #loc144])
#loc300 = loc(fused[#loc154, #loc153])
#loc301 = loc(fused[#loc155, #loc156])
#loc302 = loc(fused[#loc157, #loc158])
#loc303 = loc(fused[#loc159, #loc160])
#loc304 = loc(fused[#loc161, #loc162])
#loc305 = loc(fused[#loc164, #loc165])
#loc306 = loc(fused[#loc166, #loc160])
#loc307 = loc(fused[#loc167, #loc168])
#loc308 = loc(fused[#loc170, #loc169])
#loc309 = loc(fused[#loc171, #loc172])
#loc310 = loc(fused[#loc174, #loc168])
#loc311 = loc(fused[#loc178, #loc177])
#loc312 = loc(fused[#loc179, #loc180])
#loc313 = loc(fused[#loc181, #loc182])
#loc314 = loc(fused[#loc185, #loc183])
#loc315 = loc(fused[#loc186, #loc187])
#loc316 = loc(fused[#loc188, #loc189])
#loc317 = loc(fused[#loc190, #loc191, #loc192, #loc187])
#loc318 = loc(fused[#loc194, #loc193])
#loc319 = loc(fused[#loc196, #loc195])
#loc320 = loc(fused[#loc197, #loc198])
#loc321 = loc(fused[#loc199, #loc200])
#loc322 = loc(fused[#loc201, #loc202, #loc203, #loc198])
#loc323 = loc(fused[#loc204, #loc205])
#loc324 = loc(fused[#loc206, #loc207])
#loc325 = loc(fused[#loc208, #loc209])
#loc326 = loc(fused[#loc211, #loc210])
#loc327 = loc(fused[#loc212, #loc213])
#loc328 = loc(fused[#loc215, #loc209])
#loc329 = loc(fused[#loc219, #loc218])
#loc330 = loc(fused[#loc220, #loc221])
#loc331 = loc(fused[#loc222, #loc223])
#loc332 = loc(fused[#loc224, #loc225])
#loc333 = loc(fused[#loc227, #loc226])
#loc334 = loc(fused[#loc228, #loc229])
#loc335 = loc(fused[#loc231, #loc225])
#loc336 = loc(fused[#loc235, #loc234])
