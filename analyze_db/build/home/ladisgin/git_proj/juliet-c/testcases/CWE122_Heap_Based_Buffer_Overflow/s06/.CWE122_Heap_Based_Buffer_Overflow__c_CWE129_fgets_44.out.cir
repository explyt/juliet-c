!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":24:21)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":24:25)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":191:10)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":191:14)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":191:20)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":191:32)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":83:25)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":83:29)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":126:25)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":126:29)
#true = #cir.bool<true> : !cir.bool
#loc333 = loc(fused[#loc12, #loc13])
#loc378 = loc(fused[#loc130, #loc131])
#loc379 = loc(fused[#loc132, #loc133])
#loc384 = loc(fused[#loc150, #loc151])
#loc415 = loc(fused[#loc230, #loc231])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc328)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc329)
  cir.func private @printIntLine(!s32i) loc(#loc330)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc7)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc331)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc12, #loc13])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc333)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc14)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc335)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc336)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc21)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc22)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc22)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc337)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc338)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc21)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc339)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc336)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc27)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc28)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc28)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc341)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc31)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc32)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
        } loc(#loc342)
      } loc(#loc340)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc35)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc344)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc37)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc38)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc345)
          cir.condition(%16) loc(#loc39)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc41)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc43)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc44)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc347)
          } loc(#loc346)
          cir.yield loc(#loc34)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc46)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc348)
          cir.yield loc(#loc343)
        } loc(#loc343)
      } loc(#loc343)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc50)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc350)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc54)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc55)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc57)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc352)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc60)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc354)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc62)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc63)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc355)
              cir.condition(%23) loc(#loc64)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc66)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc67)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc68)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc66)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc69)
              } loc(#loc356)
              cir.yield loc(#loc59)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc70)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc71)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc357)
              cir.yield loc(#loc353)
            } loc(#loc353)
          } loc(#loc353)
        } else {
          %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc7)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc7)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc72)
        } loc(#loc351)
      } loc(#loc349)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc73)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc74)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc74)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc73)
    } loc(#loc334)
    cir.return loc(#loc11)
  } loc(#loc332)
  cir.func private @fgets(!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc358)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc359)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc360)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc361)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fgets() failed.\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc83)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc363)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc364)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc89)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc364)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc90)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc91)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc365)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc367)
      %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc367)
      cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc367)
      cir.scope {
        %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc99)
        %10 = cir.const #cir.int<3> : !s32i loc(#loc100)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc100)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc100)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc100)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc100)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc100)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc100)
        %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc100)
        %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc359)
        %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc101)
        %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc102)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc103)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc103)
        %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc369)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc108)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc371)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc83)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc83)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc111)
        } loc(#loc370)
      } loc(#loc368)
    } loc(#loc366)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc112)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc112)
    cir.return loc(#loc85)
  } loc(#loc362)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc373)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc116)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc374)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc118)
    cir.return loc(#loc115)
  } loc(#loc372)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc375)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc376)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc127)
  cir.func @main(%arg0: !s32i loc(fused[#loc130, #loc131]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc132, #loc133])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc378)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc379)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc129)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc134)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc134)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc135)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc136)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc136)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc137)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc124)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc124)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc138)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc380)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_good() : () -> () loc(#loc139)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc125)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc125)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc141)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc126)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc126)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc142)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc381)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44_bad() : () -> () loc(#loc143)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc127)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc145)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc146)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc382)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc382)
    cir.return %17 : !s32i loc(#loc382)
  } loc(#loc377)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc150, #loc151])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc384)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc386)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc387)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc160)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc160)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc388)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc389)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc390)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc387)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc165)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc166)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc166)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc392)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc168)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc169)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc170)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc168)
        } loc(#loc393)
      } loc(#loc391)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc173)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc395)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc175)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc176)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc396)
          cir.condition(%16) loc(#loc177)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc179)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc180)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc181)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc182)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc398)
          } loc(#loc397)
          cir.yield loc(#loc172)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc183)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc184)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc399)
          cir.yield loc(#loc394)
        } loc(#loc394)
      } loc(#loc394)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc188)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc401)
        cir.if %15 {
          %16 = cir.const #cir.int<1> : !s32i loc(#loc192)
          %17 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc193)
          %18 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc194)
          %19 = cir.ptr_stride(%17 : !cir.ptr<!s32i>, %18 : !s32i), !cir.ptr<!s32i> loc(#loc195)
          cir.store %16, %19 : !s32i, !cir.ptr<!s32i> loc(#loc403)
          cir.scope {
            %20 = cir.const #cir.int<0> : !s32i loc(#loc198)
            cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc405)
            cir.for : cond {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc200)
              %22 = cir.const #cir.int<10> : !s32i loc(#loc201)
              %23 = cir.cmp(lt, %21, %22) : !s32i, !cir.bool loc(#loc406)
              cir.condition(%23) loc(#loc202)
            } body {
              cir.scope {
                %21 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc204)
                %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc205)
                %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc206)
                %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc204)
                cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc207)
              } loc(#loc407)
              cir.yield loc(#loc197)
            } step {
              %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc208)
              %22 = cir.unary(inc, %21) : !s32i, !s32i loc(#loc209)
              cir.store %22, %1 : !s32i, !cir.ptr<!s32i> loc(#loc408)
              cir.yield loc(#loc404)
            } loc(#loc404)
          } loc(#loc404)
        } else {
          %16 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc210)
          %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc210)
          cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc211)
        } loc(#loc402)
      } loc(#loc400)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc212)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc213)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc213)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc212)
    } loc(#loc385)
    cir.return loc(#loc149)
  } loc(#loc383)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc410)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc411)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc219)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc411)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc220)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc221)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc412)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc223)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc413)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc225)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc225)
    cir.return loc(#loc215)
  } loc(#loc409)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc227)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc230, #loc231])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc415)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc232)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc417)
      %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["buffer", init] {alignment = 8 : i64} loc(#loc418)
      %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc239)
      %4 = cir.const #cir.int<10> : !s32i loc(#loc240)
      %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc240)
      %6 = cir.const #cir.int<4> : !u64i loc(#loc419)
      %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc420)
      %8 = cir.call @malloc(%7) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc239)
      %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc421)
      cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc418)
      cir.scope {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc245)
        %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc246)
        %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc246)
        %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s32i>, !cir.bool loc(#loc423)
        cir.if %16 {
          %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc248)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc249)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc250)
          cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc248)
        } loc(#loc424)
      } loc(#loc422)
      cir.scope {
        %13 = cir.const #cir.int<0> : !s32i loc(#loc253)
        cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc426)
        cir.for : cond {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc255)
          %15 = cir.const #cir.int<10> : !s32i loc(#loc256)
          %16 = cir.cmp(lt, %14, %15) : !s32i, !cir.bool loc(#loc427)
          cir.condition(%16) loc(#loc257)
        } body {
          cir.scope {
            %14 = cir.const #cir.int<0> : !s32i loc(#loc259)
            %15 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc260)
            %16 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc261)
            %17 = cir.ptr_stride(%15 : !cir.ptr<!s32i>, %16 : !s32i), !cir.ptr<!s32i> loc(#loc262)
            cir.store %14, %17 : !s32i, !cir.ptr<!s32i> loc(#loc429)
          } loc(#loc428)
          cir.yield loc(#loc252)
        } step {
          %14 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc263)
          %15 = cir.unary(inc, %14) : !s32i, !s32i loc(#loc264)
          cir.store %15, %1 : !s32i, !cir.ptr<!s32i> loc(#loc430)
          cir.yield loc(#loc425)
        } loc(#loc425)
      } loc(#loc425)
      cir.scope {
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc267)
        %14 = cir.const #cir.int<0> : !s32i loc(#loc268)
        %15 = cir.cmp(ge, %13, %14) : !s32i, !cir.bool loc(#loc432)
        %16 = cir.ternary(%15, true {
          %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc270)
          %18 = cir.const #cir.int<10> : !s32i loc(#loc271)
          %19 = cir.cmp(lt, %17, %18) : !s32i, !cir.bool loc(#loc433)
          %20 = cir.ternary(%19, true {
            %21 = cir.const #true loc(#loc269)
            cir.yield %21 : !cir.bool loc(#loc269)
          }, false {
            %21 = cir.const #false loc(#loc269)
            cir.yield %21 : !cir.bool loc(#loc269)
          }) : (!cir.bool) -> !cir.bool loc(#loc269)
          cir.yield %20 : !cir.bool loc(#loc269)
        }, false {
          %17 = cir.const #false loc(#loc269)
          cir.yield %17 : !cir.bool loc(#loc269)
        }) : (!cir.bool) -> !cir.bool loc(#loc269)
        cir.if %16 {
          %17 = cir.const #cir.int<1> : !s32i loc(#loc276)
          %18 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc277)
          %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc278)
          %20 = cir.ptr_stride(%18 : !cir.ptr<!s32i>, %19 : !s32i), !cir.ptr<!s32i> loc(#loc279)
          cir.store %17, %20 : !s32i, !cir.ptr<!s32i> loc(#loc435)
          cir.scope {
            %21 = cir.const #cir.int<0> : !s32i loc(#loc282)
            cir.store %21, %1 : !s32i, !cir.ptr<!s32i> loc(#loc437)
            cir.for : cond {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc284)
              %23 = cir.const #cir.int<10> : !s32i loc(#loc285)
              %24 = cir.cmp(lt, %22, %23) : !s32i, !cir.bool loc(#loc438)
              cir.condition(%24) loc(#loc286)
            } body {
              cir.scope {
                %22 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc288)
                %23 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc289)
                %24 = cir.ptr_stride(%22 : !cir.ptr<!s32i>, %23 : !s32i), !cir.ptr<!s32i> loc(#loc290)
                %25 = cir.load %24 : !cir.ptr<!s32i>, !s32i loc(#loc288)
                cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc291)
              } loc(#loc439)
              cir.yield loc(#loc281)
            } step {
              %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc292)
              %23 = cir.unary(inc, %22) : !s32i, !s32i loc(#loc293)
              cir.store %23, %1 : !s32i, !cir.ptr<!s32i> loc(#loc440)
              cir.yield loc(#loc436)
            } loc(#loc436)
          } loc(#loc436)
        } else {
          %17 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc227)
          %18 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc227)
          cir.call @printLine(%18) : (!cir.ptr<!s8i>) -> () loc(#loc294)
        } loc(#loc434)
      } loc(#loc431)
      %10 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc295)
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc296)
      %12 = cir.cast(bitcast, %11 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc296)
      cir.call @free(%12) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc295)
    } loc(#loc416)
    cir.return loc(#loc229)
  } loc(#loc414)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc442)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc443)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc302)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc443)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc303)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc304)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc444)
    cir.scope {
      %7 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc446)
      %8 = cir.const #cir.zero : !cir.array<!s8i x 14> loc(#loc446)
      cir.store %8, %7 : !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>> loc(#loc446)
      cir.scope {
        %9 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc312)
        %10 = cir.const #cir.int<3> : !s32i loc(#loc313)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc313)
        %12 = cir.const #cir.int<4> : !u64i loc(#loc313)
        %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc313)
        %14 = cir.const #cir.int<2> : !s32i loc(#loc313)
        %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc313)
        %16 = cir.binop(add, %13, %15) : !u64i loc(#loc313)
        %17 = cir.cast(integral, %16 : !u64i), !s32i loc(#loc313)
        %18 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc359)
        %19 = cir.load %18 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc314)
        %20 = cir.call @fgets(%9, %17, %19) : (!cir.ptr<!s8i>, !s32i, !cir.ptr<!ty__IO_FILE>) -> !cir.ptr<!s8i> loc(#loc315)
        %21 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc316)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc316)
        %23 = cir.cmp(ne, %20, %22) : !cir.ptr<!s8i>, !cir.bool loc(#loc448)
        cir.if %23 {
          %24 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc320)
          %25 = cir.call @atoi(%24) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc321)
          cir.store %25, %0 : !s32i, !cir.ptr<!s32i> loc(#loc450)
        } else {
          %24 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc324)
          %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc324)
          cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc325)
        } loc(#loc449)
      } loc(#loc447)
    } loc(#loc445)
    %5 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc326)
    %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc327)
    cir.call %5(%6) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc326)
    cir.return loc(#loc298)
  } loc(#loc441)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s06/CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":48:23)
#loc8 = loc("/usr/include/stdlib.h":687:1)
#loc9 = loc("/usr/include/stdlib.h":687:32)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":24:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":52:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":25:1)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":26:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":51:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":27:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":27:13)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:9)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:54)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:31)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:38)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:43)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":28:53)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:39)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:23)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:29)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:36)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":29:35)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:9)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":34:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:18)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:21)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:25)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:23)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":32:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":33:25)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":33:13)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":33:20)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":33:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:30)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":31:29)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":37:9)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":49:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":37:13)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":37:21)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":38:9)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":45:9)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":47:9)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":39:28)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":39:13)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":39:20)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":39:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:13)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":44:13)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:21)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:17)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:24)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:28)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:26)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":42:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":43:30)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":43:37)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":43:38)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":43:17)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:33)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":41:32)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":48:13)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":50:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":50:14)
#loc75 = loc("/usr/include/stdio.h":654:1)
#loc76 = loc("/usr/include/stdio.h":655:59)
#loc77 = loc("/usr/include/stdio.h":149:1)
#loc78 = loc("/usr/include/stdio.h":149:14)
#loc79 = loc("/usr/include/stdlib.h":105:1)
#loc80 = loc("/usr/include/stdlib.h":106:33)
#loc81 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc82 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":71:23)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":54:1)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":76:1)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":56:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":56:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":58:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":58:29)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":60:13)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":60:12)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":60:5)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":61:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":73:5)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":62:9)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":62:45)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:9)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":72:9)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:19)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:32)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:49)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:13)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":64:59)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":65:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":68:9)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":70:9)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":67:25)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":67:20)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":67:13)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":67:36)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":71:13)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":75:5)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":75:13)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":177:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":181:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":179:5)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":179:13)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":180:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":180:13)
#loc120 = loc("/usr/include/stdlib.h":575:1)
#loc121 = loc("/usr/include/stdlib.h":575:41)
#loc122 = loc("/usr/include/time.h":76:1)
#loc123 = loc("/usr/include/time.h":76:38)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":196:15)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":198:15)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":201:15)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":203:15)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":191:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":206:1)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":192:1)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":194:27)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":194:22)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":194:5)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":196:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":197:5)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":197:63)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":198:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":201:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":202:5)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":202:62)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":203:5)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":205:12)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":205:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":83:1)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":111:1)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":84:1)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":85:5)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":110:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":86:9)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":86:13)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:54)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:31)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:38)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:43)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":87:53)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:9)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:39)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:13)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:23)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:29)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:30)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:36)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":88:35)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":93:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:18)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:14)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:21)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:25)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:23)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":91:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":92:25)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":92:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":92:20)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":92:21)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:30)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":90:29)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":96:9)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":108:9)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":96:13)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":96:21)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":97:9)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":104:9)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":106:9)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":98:28)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":98:13)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":98:20)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":98:24)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:13)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":103:13)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:21)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:17)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:24)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:28)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:26)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":101:13)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":102:30)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":102:37)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":102:38)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":102:17)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:33)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":100:32)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":107:23)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":107:13)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":109:9)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":109:14)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":113:1)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":123:1)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":115:5)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":115:9)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":116:5)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":116:29)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":118:13)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":118:12)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":118:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":121:12)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":121:5)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":122:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":122:13)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":149:23)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":126:1)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":153:1)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":127:1)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":128:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":152:5)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":129:9)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":129:13)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:54)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:31)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:38)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:43)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":130:53)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:9)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:39)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:13)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:23)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:29)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:30)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:36)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":131:35)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:9)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":136:9)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:18)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:14)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:21)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:25)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:23)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":134:9)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":135:25)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":135:13)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":135:20)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":135:21)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:30)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":133:29)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":150:9)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:13)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:21)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:23)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:26)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:34)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":138:36)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":139:9)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":146:9)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":148:9)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":140:28)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":140:13)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":140:20)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":140:24)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:13)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":145:13)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:21)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:17)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:24)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:28)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:26)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":143:13)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":144:30)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":144:37)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":144:38)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":144:17)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:33)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":142:32)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":149:13)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":151:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":151:14)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":155:1)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":175:1)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":157:5)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":157:9)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":158:5)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":158:29)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":160:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":160:12)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":160:5)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":161:5)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":173:5)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":162:9)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":162:45)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:9)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":172:9)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:19)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:32)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:49)
#loc315 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:13)
#loc316 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":164:59)
#loc317 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":165:9)
#loc318 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":168:9)
#loc319 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":170:9)
#loc320 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":167:25)
#loc321 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":167:20)
#loc322 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":167:13)
#loc323 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":167:36)
#loc324 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":171:23)
#loc325 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":171:13)
#loc326 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":174:5)
#loc327 = loc("CWE122_Heap_Based_Buffer_Overflow__c_CWE129_fgets_44.c":174:13)
#loc328 = loc(fused[#loc1, #loc2])
#loc329 = loc(fused[#loc3, #loc4])
#loc330 = loc(fused[#loc5, #loc6])
#loc331 = loc(fused[#loc8, #loc9])
#loc332 = loc(fused[#loc10, #loc11])
#loc334 = loc(fused[#loc15, #loc16])
#loc335 = loc(fused[#loc17, #loc18])
#loc336 = loc(fused[#loc19, #loc20])
#loc337 = loc(fused[#loc23, #loc24])
#loc338 = loc(fused[#loc22, #loc24])
#loc339 = loc(fused[#loc21, #loc20])
#loc340 = loc(fused[#loc25, #loc26])
#loc341 = loc(fused[#loc27, #loc28])
#loc342 = loc(fused[#loc29, #loc26])
#loc343 = loc(fused[#loc33, #loc34])
#loc344 = loc(fused[#loc36, #loc35])
#loc345 = loc(fused[#loc37, #loc38])
#loc346 = loc(fused[#loc40, #loc34])
#loc347 = loc(fused[#loc42, #loc41])
#loc348 = loc(fused[#loc46, #loc45])
#loc349 = loc(fused[#loc47, #loc48])
#loc350 = loc(fused[#loc49, #loc50])
#loc351 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc352 = loc(fused[#loc55, #loc54])
#loc353 = loc(fused[#loc58, #loc59])
#loc354 = loc(fused[#loc61, #loc60])
#loc355 = loc(fused[#loc62, #loc63])
#loc356 = loc(fused[#loc65, #loc59])
#loc357 = loc(fused[#loc71, #loc70])
#loc358 = loc(fused[#loc75, #loc76])
#loc359 = loc(fused[#loc77, #loc78])
#loc360 = loc(fused[#loc79, #loc80])
#loc361 = loc(fused[#loc81, #loc82])
#loc362 = loc(fused[#loc84, #loc85])
#loc363 = loc(fused[#loc86, #loc87])
#loc364 = loc(fused[#loc88, #loc89])
#loc365 = loc(fused[#loc92, #loc90])
#loc366 = loc(fused[#loc93, #loc94])
#loc367 = loc(fused[#loc95, #loc96])
#loc368 = loc(fused[#loc97, #loc98])
#loc369 = loc(fused[#loc102, #loc103])
#loc370 = loc(fused[#loc104, #loc105, #loc106, #loc98])
#loc371 = loc(fused[#loc109, #loc110])
#loc372 = loc(fused[#loc114, #loc115])
#loc373 = loc(fused[#loc116, #loc117])
#loc374 = loc(fused[#loc118, #loc119])
#loc375 = loc(fused[#loc120, #loc121])
#loc376 = loc(fused[#loc122, #loc123])
#loc377 = loc(fused[#loc128, #loc129])
#loc380 = loc(fused[#loc139, #loc140])
#loc381 = loc(fused[#loc143, #loc144])
#loc382 = loc(fused[#loc147, #loc146])
#loc383 = loc(fused[#loc148, #loc149])
#loc385 = loc(fused[#loc153, #loc154])
#loc386 = loc(fused[#loc155, #loc156])
#loc387 = loc(fused[#loc157, #loc158])
#loc388 = loc(fused[#loc161, #loc162])
#loc389 = loc(fused[#loc160, #loc162])
#loc390 = loc(fused[#loc159, #loc158])
#loc391 = loc(fused[#loc163, #loc164])
#loc392 = loc(fused[#loc165, #loc166])
#loc393 = loc(fused[#loc167, #loc164])
#loc394 = loc(fused[#loc171, #loc172])
#loc395 = loc(fused[#loc174, #loc173])
#loc396 = loc(fused[#loc175, #loc176])
#loc397 = loc(fused[#loc178, #loc172])
#loc398 = loc(fused[#loc180, #loc179])
#loc399 = loc(fused[#loc184, #loc183])
#loc400 = loc(fused[#loc185, #loc186])
#loc401 = loc(fused[#loc187, #loc188])
#loc402 = loc(fused[#loc189, #loc190, #loc191, #loc186])
#loc403 = loc(fused[#loc193, #loc192])
#loc404 = loc(fused[#loc196, #loc197])
#loc405 = loc(fused[#loc199, #loc198])
#loc406 = loc(fused[#loc200, #loc201])
#loc407 = loc(fused[#loc203, #loc197])
#loc408 = loc(fused[#loc209, #loc208])
#loc409 = loc(fused[#loc214, #loc215])
#loc410 = loc(fused[#loc216, #loc217])
#loc411 = loc(fused[#loc218, #loc219])
#loc412 = loc(fused[#loc222, #loc220])
#loc413 = loc(fused[#loc224, #loc223])
#loc414 = loc(fused[#loc228, #loc229])
#loc416 = loc(fused[#loc233, #loc234])
#loc417 = loc(fused[#loc235, #loc236])
#loc418 = loc(fused[#loc237, #loc238])
#loc419 = loc(fused[#loc241, #loc242])
#loc420 = loc(fused[#loc240, #loc242])
#loc421 = loc(fused[#loc239, #loc238])
#loc422 = loc(fused[#loc243, #loc244])
#loc423 = loc(fused[#loc245, #loc246])
#loc424 = loc(fused[#loc247, #loc244])
#loc425 = loc(fused[#loc251, #loc252])
#loc426 = loc(fused[#loc254, #loc253])
#loc427 = loc(fused[#loc255, #loc256])
#loc428 = loc(fused[#loc258, #loc252])
#loc429 = loc(fused[#loc260, #loc259])
#loc430 = loc(fused[#loc264, #loc263])
#loc431 = loc(fused[#loc265, #loc266])
#loc432 = loc(fused[#loc267, #loc268])
#loc433 = loc(fused[#loc270, #loc272])
#loc434 = loc(fused[#loc273, #loc274, #loc275, #loc266])
#loc435 = loc(fused[#loc277, #loc276])
#loc436 = loc(fused[#loc280, #loc281])
#loc437 = loc(fused[#loc283, #loc282])
#loc438 = loc(fused[#loc284, #loc285])
#loc439 = loc(fused[#loc287, #loc281])
#loc440 = loc(fused[#loc293, #loc292])
#loc441 = loc(fused[#loc297, #loc298])
#loc442 = loc(fused[#loc299, #loc300])
#loc443 = loc(fused[#loc301, #loc302])
#loc444 = loc(fused[#loc305, #loc303])
#loc445 = loc(fused[#loc306, #loc307])
#loc446 = loc(fused[#loc308, #loc309])
#loc447 = loc(fused[#loc310, #loc311])
#loc448 = loc(fused[#loc315, #loc316])
#loc449 = loc(fused[#loc317, #loc318, #loc319, #loc311])
#loc450 = loc(fused[#loc322, #loc323])
