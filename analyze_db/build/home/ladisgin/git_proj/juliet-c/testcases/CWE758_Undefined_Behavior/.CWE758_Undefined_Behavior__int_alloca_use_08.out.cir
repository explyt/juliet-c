!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc37 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":105:10)
#loc38 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":105:14)
#loc39 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":105:20)
#loc40 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":105:32)
#loc132 = loc(fused[#loc37, #loc38])
#loc133 = loc(fused[#loc39, #loc40])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__int_alloca_use_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc117)
  cir.func no_proto @CWE758_Undefined_Behavior__int_alloca_use_08_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc120)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc7)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc7)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc123)
          %4 = cir.const #cir.int<4> : !u64i loc(#loc13)
          %5 = cir.alloca !u8i, !cir.ptr<!u8i>, %4 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc13)
          %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc124)
          %7 = cir.cast(bitcast, %5 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc13)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc13)
          cir.store %8, %3 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc123)
          %9 = cir.load deref %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc15)
          %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          cir.store %10, %6 : !s32i, !cir.ptr<!s32i> loc(#loc124)
          %11 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc17)
          cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc18)
        } loc(#loc122)
      } loc(#loc121)
    } loc(#loc119)
    cir.return loc(#loc4)
  } loc(#loc118)
  cir.func no_proto @CWE758_Undefined_Behavior__int_alloca_use_08_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc127)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc23)
    cir.return loc(#loc20)
  } loc(#loc125)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc128)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc129)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc130)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc31)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc34)
  cir.func @main(%arg0: !s32i loc(fused[#loc37, #loc38]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc39, #loc40])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc132)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc133)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc36)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc41)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc41)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc42)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc43)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc43)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc44)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc31)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %8 = cir.get_global @CWE758_Undefined_Behavior__int_alloca_use_08_good : !cir.ptr<!cir.func<!void ()>> loc(#loc134)
    cir.call @CWE758_Undefined_Behavior__int_alloca_use_08_good() : () -> () loc(#loc46)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc32)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc48)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc33)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %13 = cir.get_global @CWE758_Undefined_Behavior__int_alloca_use_08_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc135)
    cir.call @CWE758_Undefined_Behavior__int_alloca_use_08_bad() : () -> () loc(#loc50)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc34)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc52)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc53)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc136)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc136)
    cir.return %17 : !s32i loc(#loc136)
  } loc(#loc131)
  cir.func no_proto internal private @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc56)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc57)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.return %2 : !s32i loc(#loc138)
  } loc(#loc137)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc141)
      %1 = cir.call %0() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc64)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc64)
      cir.if %2 {
        %3 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc144)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc145)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc75)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc75)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc75)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc75)
          cir.store %8, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc145)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc76)
          cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc146)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc79)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc147)
          cir.scope {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
            %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc84)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc85)
            cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc149)
            %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc86)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc87)
          } loc(#loc148)
        } loc(#loc143)
      } loc(#loc142)
    } loc(#loc140)
    cir.return loc(#loc61)
  } loc(#loc139)
  cir.func no_proto internal private @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc89)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
    cir.return %2 : !s32i loc(#loc151)
  } loc(#loc150)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc154)
      %1 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc96)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc157)
          %4 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["pointer", init] {alignment = 8 : i64} loc(#loc158)
          %5 = cir.const #cir.int<4> : !u64i loc(#loc104)
          %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
          %7 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
          %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc104)
          cir.store %8, %4 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc158)
          %9 = cir.const #cir.int<5> : !s32i loc(#loc105)
          cir.store %9, %3 : !s32i, !cir.ptr<!s32i> loc(#loc159)
          %10 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc107)
          %11 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc108)
          cir.store %10, %11 : !s32i, !cir.ptr<!s32i> loc(#loc160)
          cir.scope {
            %12 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc162)
            %13 = cir.load deref %4 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc113)
            %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc114)
            cir.store %14, %12 : !s32i, !cir.ptr<!s32i> loc(#loc162)
            %15 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc115)
            cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc116)
          } loc(#loc161)
        } loc(#loc156)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc93)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE758_Undefined_Behavior/CWE758_Undefined_Behavior__int_alloca_use_08.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":33:1)
#loc4 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":43:1)
#loc5 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":35:5)
#loc6 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":42:5)
#loc7 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":35:8)
#loc8 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":35:26)
#loc9 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":36:5)
#loc10 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":37:9)
#loc11 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":41:9)
#loc12 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":38:13)
#loc13 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":38:36)
#loc14 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":39:13)
#loc15 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":39:25)
#loc16 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":39:24)
#loc17 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":40:26)
#loc18 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":40:13)
#loc19 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":90:1)
#loc20 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":94:1)
#loc21 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":92:5)
#loc22 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":92:11)
#loc23 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":93:5)
#loc24 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":93:11)
#loc25 = loc("/usr/include/stdlib.h":575:1)
#loc26 = loc("/usr/include/stdlib.h":575:41)
#loc27 = loc("/usr/include/time.h":76:1)
#loc28 = loc("/usr/include/time.h":76:38)
#loc29 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":110:15)
#loc32 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":112:15)
#loc33 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":115:15)
#loc34 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":117:15)
#loc35 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":105:1)
#loc36 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":120:1)
#loc41 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":106:1)
#loc42 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":108:27)
#loc43 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":108:22)
#loc44 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":108:5)
#loc45 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":110:5)
#loc46 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":111:5)
#loc47 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":111:55)
#loc48 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":112:5)
#loc49 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":115:5)
#loc50 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":116:5)
#loc51 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":116:54)
#loc52 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":117:5)
#loc53 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":119:12)
#loc54 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":119:5)
#loc55 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":21:1)
#loc56 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":24:1)
#loc57 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":23:12)
#loc58 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":23:5)
#loc59 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":55:19)
#loc60 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":50:1)
#loc61 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":70:1)
#loc62 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":52:5)
#loc63 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":69:5)
#loc64 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":52:8)
#loc65 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":52:27)
#loc66 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":53:5)
#loc67 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":56:5)
#loc68 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":58:5)
#loc69 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":55:9)
#loc70 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":59:9)
#loc71 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":68:9)
#loc72 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":60:13)
#loc73 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":60:17)
#loc74 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":61:13)
#loc75 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":61:36)
#loc76 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":62:20)
#loc77 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":62:13)
#loc78 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":63:24)
#loc79 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":63:14)
#loc80 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":63:13)
#loc81 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":64:13)
#loc82 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":67:13)
#loc83 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":65:17)
#loc84 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":65:29)
#loc85 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":65:28)
#loc86 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":66:30)
#loc87 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":66:17)
#loc88 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":26:1)
#loc89 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":29:1)
#loc90 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":28:12)
#loc91 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":28:5)
#loc92 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":73:1)
#loc93 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":88:1)
#loc94 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":75:5)
#loc95 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":87:5)
#loc96 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":75:8)
#loc97 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":75:26)
#loc98 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":76:5)
#loc99 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":77:9)
#loc100 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":86:9)
#loc101 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":78:13)
#loc102 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":78:17)
#loc103 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":79:13)
#loc104 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":79:36)
#loc105 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":80:20)
#loc106 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":80:13)
#loc107 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":81:24)
#loc108 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":81:14)
#loc109 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":81:13)
#loc110 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":82:13)
#loc111 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":85:13)
#loc112 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":83:17)
#loc113 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":83:29)
#loc114 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":83:28)
#loc115 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":84:30)
#loc116 = loc("CWE758_Undefined_Behavior__int_alloca_use_08.c":84:17)
#loc117 = loc(fused[#loc1, #loc2])
#loc118 = loc(fused[#loc3, #loc4])
#loc119 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc7, #loc8])
#loc121 = loc(fused[#loc9, #loc6])
#loc122 = loc(fused[#loc10, #loc11])
#loc123 = loc(fused[#loc12, #loc13])
#loc124 = loc(fused[#loc14, #loc15])
#loc125 = loc(fused[#loc19, #loc20])
#loc126 = loc(fused[#loc21, #loc22])
#loc127 = loc(fused[#loc23, #loc24])
#loc128 = loc(fused[#loc25, #loc26])
#loc129 = loc(fused[#loc27, #loc28])
#loc130 = loc(fused[#loc29, #loc30])
#loc131 = loc(fused[#loc35, #loc36])
#loc134 = loc(fused[#loc46, #loc47])
#loc135 = loc(fused[#loc50, #loc51])
#loc136 = loc(fused[#loc54, #loc53])
#loc137 = loc(fused[#loc55, #loc56])
#loc138 = loc(fused[#loc58, #loc57])
#loc139 = loc(fused[#loc60, #loc61])
#loc140 = loc(fused[#loc62, #loc63])
#loc141 = loc(fused[#loc64, #loc65])
#loc142 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc143 = loc(fused[#loc70, #loc71])
#loc144 = loc(fused[#loc72, #loc73])
#loc145 = loc(fused[#loc74, #loc75])
#loc146 = loc(fused[#loc77, #loc76])
#loc147 = loc(fused[#loc80, #loc78])
#loc148 = loc(fused[#loc81, #loc82])
#loc149 = loc(fused[#loc83, #loc84])
#loc150 = loc(fused[#loc88, #loc89])
#loc151 = loc(fused[#loc91, #loc90])
#loc152 = loc(fused[#loc92, #loc93])
#loc153 = loc(fused[#loc94, #loc95])
#loc154 = loc(fused[#loc96, #loc97])
#loc155 = loc(fused[#loc98, #loc95])
#loc156 = loc(fused[#loc99, #loc100])
#loc157 = loc(fused[#loc101, #loc102])
#loc158 = loc(fused[#loc103, #loc104])
#loc159 = loc(fused[#loc106, #loc105])
#loc160 = loc(fused[#loc109, #loc107])
#loc161 = loc(fused[#loc110, #loc111])
#loc162 = loc(fused[#loc112, #loc113])
