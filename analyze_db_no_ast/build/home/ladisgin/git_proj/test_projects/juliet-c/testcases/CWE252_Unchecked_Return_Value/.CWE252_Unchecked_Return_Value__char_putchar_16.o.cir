!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @putchar(!s32i) -> !s32i loc(#loc32)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_putchar_16_bad() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc7)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc7)
        cir.condition(%1) loc(#loc7)
      } do {
        %0 = cir.const #cir.int<65> : !s32i loc(#loc8)
        %1 = cir.call @putchar(%0) : (!s32i) -> !s32i loc(#loc9)
        cir.break loc(#loc10)
      } loc(#loc34)
    } loc(#loc34)
    cir.return loc(#loc4)
  } loc(#loc33)
  cir.func no_proto  @CWE252_Unchecked_Return_Value__char_putchar_16_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc36)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc13)
    cir.return loc(#loc12)
  } loc(#loc35)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc37)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"putchar failed!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc17)
  cir.func no_proto internal private  @good1() extra(#fn_attr) {
    cir.scope {
      cir.while {
        %0 = cir.const #cir.int<1> : !s32i loc(#loc22)
        %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc22)
        cir.condition(%1) loc(#loc22)
      } do {
        cir.scope {
          %0 = cir.const #cir.int<65> : !s32i loc(#loc25)
          %1 = cir.call @putchar(%0) : (!s32i) -> !s32i loc(#loc26)
          %2 = cir.const #cir.int<1> : !s32i loc(#loc27)
          %3 = cir.unary(minus, %2) : !s32i, !s32i loc(#loc27)
          %4 = cir.cmp(eq, %1, %3) : !s32i, !s32i loc(#loc41)
          %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc28)
          cir.if %5 {
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc17)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc17)
            cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc30)
          } loc(#loc42)
        } loc(#loc40)
        cir.break loc(#loc31)
      } loc(#loc39)
    } loc(#loc39)
    cir.return loc(#loc19)
  } loc(#loc38)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE252_Unchecked_Return_Value/CWE252_Unchecked_Return_Value__char_putchar_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":618:1)
#loc2 = loc("/usr/include/stdio.h":618:28)
#loc3 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":24:1)
#loc4 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":32:1)
#loc5 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":26:5)
#loc6 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":31:5)
#loc7 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":26:11)
#loc8 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":29:22)
#loc9 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":29:9)
#loc10 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":30:9)
#loc11 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":52:1)
#loc12 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":55:1)
#loc13 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":54:5)
#loc14 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":54:11)
#loc15 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc16 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc17 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":46:23)
#loc18 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":39:1)
#loc19 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":50:1)
#loc20 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":41:5)
#loc21 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":49:5)
#loc22 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":41:11)
#loc23 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":44:9)
#loc24 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":47:9)
#loc25 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":44:26)
#loc26 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":44:13)
#loc27 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":44:34)
#loc28 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":44:31)
#loc29 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":45:9)
#loc30 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":46:13)
#loc31 = loc("CWE252_Unchecked_Return_Value__char_putchar_16.c":48:9)
#loc32 = loc(fused[#loc1, #loc2])
#loc33 = loc(fused[#loc3, #loc4])
#loc34 = loc(fused[#loc5, #loc6])
#loc35 = loc(fused[#loc11, #loc12])
#loc36 = loc(fused[#loc13, #loc14])
#loc37 = loc(fused[#loc15, #loc16])
#loc38 = loc(fused[#loc18, #loc19])
#loc39 = loc(fused[#loc20, #loc21])
#loc40 = loc(fused[#loc23, #loc24])
#loc41 = loc(fused[#loc26, #loc27])
#loc42 = loc(fused[#loc29, #loc24])
