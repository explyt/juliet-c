!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc50 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":84:10)
#loc51 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":84:14)
#loc52 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":84:20)
#loc53 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":84:32)
#loc114 = loc(fused[#loc50, #loc51])
#loc115 = loc(fused[#loc52, #loc53])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc95)
  cir.func private @fputc(!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc96)
  cir.global "private" external @stdout : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc97)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc98)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"fputc failed!\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc9)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_bad() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc101)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc101)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc14)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc14)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc102)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc103)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<65> : !s32i loc(#loc21)
    %5 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc97)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
    %7 = cir.call @fputc(%4, %6) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc23)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc24)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc104)
    cir.brcond %9 ^bb4, ^bb5 loc(#loc105)
  ^bb4:  // pred: ^bb3
    %10 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc9)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc9)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc20)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc17)
  ^bb7:  // pred: ^bb1
    cir.br ^bb8 loc(#loc106)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.int<65> : !s32i loc(#loc29)
    %13 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc97)
    %14 = cir.load %13 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc30)
    %15 = cir.call @fputc(%12, %14) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc31)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc32)
    %18 = cir.cmp(eq, %15, %17) : !s32i, !cir.bool loc(#loc107)
    cir.brcond %18 ^bb9, ^bb10 loc(#loc108)
  ^bb9:  // pred: ^bb8
    %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc34)
    %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%20) : (!cir.ptr<!s8i>) -> () loc(#loc35)
    cir.br ^bb10 loc(#loc28)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc28)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc13)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc13)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc11)
  } loc(#loc99)
  cir.func no_proto @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc110)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc37)
  } loc(#loc109)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc111)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc112)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc46)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc47)
  cir.func @main(%arg0: !s32i loc(fused[#loc50, #loc51]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc52, #loc53])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc49)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc54)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc54)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc55)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc56)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc56)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc57)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc44)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %8 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_good : !cir.ptr<!cir.func<!void ()>> loc(#loc116)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_good() : () -> () loc(#loc59)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc45)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc46)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %13 = cir.get_global @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call @CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12_bad() : () -> () loc(#loc63)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc47)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc47)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc65)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc66)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc118)
    cir.return %17 : !s32i loc(#loc118)
  } loc(#loc113)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.br ^bb1 loc(#loc120)
  ^bb1:  // pred: ^bb0
    %0 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<!s32i (...)>> loc(#loc121)
    %1 = cir.cast(bitcast, %0 : !cir.ptr<!cir.func<!s32i (...)>>), !cir.ptr<!cir.func<!s32i ()>> loc(#loc121)
    %2 = cir.call %1() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc72)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc72)
    cir.brcond %3 ^bb2, ^bb7 loc(#loc122)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc123)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<65> : !s32i loc(#loc79)
    %5 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc97)
    %6 = cir.load %5 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc80)
    %7 = cir.call @fputc(%4, %6) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc81)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc82)
    %9 = cir.unary(minus, %8) : !s32i, !s32i loc(#loc82)
    %10 = cir.cmp(eq, %7, %9) : !s32i, !cir.bool loc(#loc124)
    cir.brcond %10 ^bb4, ^bb5 loc(#loc125)
  ^bb4:  // pred: ^bb3
    %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc84)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc84)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc85)
    cir.br ^bb5 loc(#loc78)
  ^bb5:  // 2 preds: ^bb3, ^bb4
    cir.br ^bb6 loc(#loc78)
  ^bb6:  // pred: ^bb5
    cir.br ^bb12 loc(#loc75)
  ^bb7:  // pred: ^bb1
    cir.br ^bb8 loc(#loc126)
  ^bb8:  // pred: ^bb7
    %13 = cir.const #cir.int<65> : !s32i loc(#loc88)
    %14 = cir.get_global @stdout : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc97)
    %15 = cir.load %14 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc89)
    %16 = cir.call @fputc(%13, %15) : (!s32i, !cir.ptr<!ty__IO_FILE>) -> !s32i loc(#loc90)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %18 = cir.unary(minus, %17) : !s32i, !s32i loc(#loc91)
    %19 = cir.cmp(eq, %16, %18) : !s32i, !cir.bool loc(#loc127)
    cir.brcond %19 ^bb9, ^bb10 loc(#loc128)
  ^bb9:  // pred: ^bb8
    %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc93)
    %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc93)
    cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc94)
    cir.br ^bb10 loc(#loc87)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc87)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc71)
  ^bb12:  // 2 preds: ^bb6, ^bb11
    cir.br ^bb13 loc(#loc71)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc69)
  } loc(#loc119)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE253_Incorrect_Check_of_Function_Return_Value/CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/stdio.h":611:1)
#loc4 = loc("/usr/include/stdio.h":611:44)
#loc5 = loc("/usr/include/stdio.h":150:1)
#loc6 = loc("/usr/include/stdio.h":150:14)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":32:23)
#loc10 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":24:1)
#loc11 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":43:1)
#loc12 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":26:5)
#loc13 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":42:5)
#loc14 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":26:8)
#loc15 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":26:33)
#loc16 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":27:5)
#loc17 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":34:5)
#loc18 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":36:5)
#loc19 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":30:9)
#loc20 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":33:9)
#loc21 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":30:24)
#loc22 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":30:29)
#loc23 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":30:13)
#loc24 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":30:40)
#loc25 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":31:9)
#loc26 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":32:13)
#loc27 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":38:9)
#loc28 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":41:9)
#loc29 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":38:24)
#loc30 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":38:29)
#loc31 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":38:13)
#loc32 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":38:40)
#loc33 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":39:9)
#loc34 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":40:23)
#loc35 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":40:13)
#loc36 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":70:1)
#loc37 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":73:1)
#loc38 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":72:5)
#loc39 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":72:11)
#loc40 = loc("/usr/include/stdlib.h":575:1)
#loc41 = loc("/usr/include/stdlib.h":575:41)
#loc42 = loc("/usr/include/time.h":76:1)
#loc43 = loc("/usr/include/time.h":76:38)
#loc44 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":89:15)
#loc45 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":91:15)
#loc46 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":94:15)
#loc47 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":96:15)
#loc48 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":84:1)
#loc49 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":99:1)
#loc54 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":85:1)
#loc55 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":87:27)
#loc56 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":87:22)
#loc57 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":87:5)
#loc58 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":89:5)
#loc59 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":90:5)
#loc60 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":90:73)
#loc61 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":91:5)
#loc62 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":94:5)
#loc63 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":95:5)
#loc64 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":95:72)
#loc65 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":96:5)
#loc66 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":98:12)
#loc67 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":98:5)
#loc68 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":50:1)
#loc69 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":68:1)
#loc70 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":52:5)
#loc71 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":67:5)
#loc72 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":52:8)
#loc73 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":52:33)
#loc74 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":53:5)
#loc75 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":59:5)
#loc76 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":61:5)
#loc77 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":55:9)
#loc78 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":58:9)
#loc79 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":55:24)
#loc80 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":55:29)
#loc81 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":55:13)
#loc82 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":55:40)
#loc83 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":56:9)
#loc84 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":57:23)
#loc85 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":57:13)
#loc86 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":63:9)
#loc87 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":66:9)
#loc88 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":63:24)
#loc89 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":63:29)
#loc90 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":63:13)
#loc91 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":63:40)
#loc92 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":64:9)
#loc93 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":65:23)
#loc94 = loc("CWE253_Incorrect_Check_of_Function_Return_Value__char_fputc_12.c":65:13)
#loc95 = loc(fused[#loc1, #loc2])
#loc96 = loc(fused[#loc3, #loc4])
#loc97 = loc(fused[#loc5, #loc6])
#loc98 = loc(fused[#loc7, #loc8])
#loc99 = loc(fused[#loc10, #loc11])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc14, #loc15])
#loc102 = loc(fused[#loc16, #loc17, #loc18, #loc13])
#loc103 = loc(fused[#loc19, #loc20])
#loc104 = loc(fused[#loc23, #loc24])
#loc105 = loc(fused[#loc25, #loc20])
#loc106 = loc(fused[#loc27, #loc28])
#loc107 = loc(fused[#loc31, #loc32])
#loc108 = loc(fused[#loc33, #loc28])
#loc109 = loc(fused[#loc36, #loc37])
#loc110 = loc(fused[#loc38, #loc39])
#loc111 = loc(fused[#loc40, #loc41])
#loc112 = loc(fused[#loc42, #loc43])
#loc113 = loc(fused[#loc48, #loc49])
#loc116 = loc(fused[#loc59, #loc60])
#loc117 = loc(fused[#loc63, #loc64])
#loc118 = loc(fused[#loc67, #loc66])
#loc119 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc70, #loc71])
#loc121 = loc(fused[#loc72, #loc73])
#loc122 = loc(fused[#loc74, #loc75, #loc76, #loc71])
#loc123 = loc(fused[#loc77, #loc78])
#loc124 = loc(fused[#loc81, #loc82])
#loc125 = loc(fused[#loc83, #loc78])
#loc126 = loc(fused[#loc86, #loc87])
#loc127 = loc(fused[#loc90, #loc91])
#loc128 = loc(fused[#loc92, #loc87])
