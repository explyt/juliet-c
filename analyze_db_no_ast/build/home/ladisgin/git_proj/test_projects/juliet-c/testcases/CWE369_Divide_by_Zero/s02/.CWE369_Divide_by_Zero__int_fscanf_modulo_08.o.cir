!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_08.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc168)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc169)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%d\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @printIntLine(!s32i) loc(#loc170)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_08_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc172)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc173)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc175)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc17)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc20)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc21)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc20)
      } loc(#loc176)
    } loc(#loc174)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc178)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc24)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc24)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc27)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc180)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc29)
      } loc(#loc179)
    } loc(#loc177)
    cir.return loc(#loc9)
  } loc(#loc171)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_fscanf_modulo_08_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc182)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc183)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc184)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc185)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc181)
  cir.func no_proto internal private  @staticReturnsTrue() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc41)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc42)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc187)
    cir.return %2 : !s32i loc(#loc187)
  } loc(#loc186)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc188)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc46)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc47)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc190)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc53)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc191)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc193)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc57)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc57)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc60)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc61)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc62)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc62)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc60)
      } loc(#loc194)
    } loc(#loc192)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc196)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<!s32i ()>>) -> !s32i loc(#loc65)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc65)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc46)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc46)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc74)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc199)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc75)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc79)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc201)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc81)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc47)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc47)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc195)
    cir.return loc(#loc49)
  } loc(#loc189)
  cir.func no_proto internal private  @staticReturnsFalse() -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc84)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc85)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc203)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc203)
    cir.return %2 : !s32i loc(#loc203)
  } loc(#loc202)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc91)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc92)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc208)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc96)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc99)
        %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc169)
        %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc100)
        %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc101)
        %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc101)
        %11 = cir.call @__isoc99_fscanf(%8, %10, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s32i>) -> !s32i loc(#loc99)
      } loc(#loc209)
    } loc(#loc207)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc211)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc104)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc104)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc110)
          %8 = cir.cmp(ne, %6, %7) : !s32i, !s32i loc(#loc214)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc111)
          cir.if %9 {
            %10 = cir.const #cir.int<100> : !s32i loc(#loc115)
            %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %12 = cir.binop(rem, %10, %11) : !s32i loc(#loc216)
            cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc117)
          } else {
            %10 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc118)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc118)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } loc(#loc215)
        } loc(#loc213)
      } loc(#loc212)
    } loc(#loc210)
    cir.return loc(#loc88)
  } loc(#loc204)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc218)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc124)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc125)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc219)
    cir.scope {
      %3 = cir.get_global @staticReturnsFalse : !cir.ptr<!cir.func<!s32i ()>> loc(#loc221)
      %4 = cir.call @staticReturnsFalse() : () -> !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
        %6 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc136)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      } loc(#loc222)
    } loc(#loc220)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc225)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc140)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc140)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc143)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc144)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc227)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc145)
      } loc(#loc226)
    } loc(#loc224)
    cir.return loc(#loc121)
  } loc(#loc217)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc229)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc150)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc151)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc230)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc232)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc155)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc155)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc158)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc234)
      } loc(#loc233)
    } loc(#loc231)
    cir.scope {
      %3 = cir.get_global @staticReturnsTrue : !cir.ptr<!cir.func<!s32i ()>> loc(#loc236)
      %4 = cir.call @staticReturnsTrue() : () -> !s32i loc(#loc162)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc162)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc165)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc166)
        %8 = cir.binop(rem, %6, %7) : !s32i loc(#loc238)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc167)
      } loc(#loc237)
    } loc(#loc235)
    cir.return loc(#loc147)
  } loc(#loc228)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:23)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc8 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":35:1)
#loc9 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":50:1)
#loc10 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":37:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":37:9)
#loc12 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:13)
#loc13 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:12)
#loc14 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":39:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:5)
#loc16 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":44:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:8)
#loc18 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":40:26)
#loc19 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":41:5)
#loc20 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:9)
#loc21 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":43:16)
#loc22 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":49:5)
#loc24 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:8)
#loc25 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":45:26)
#loc26 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":46:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:22)
#loc28 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:28)
#loc29 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":48:9)
#loc30 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":152:1)
#loc31 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":158:1)
#loc32 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":154:5)
#loc33 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":154:14)
#loc34 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":155:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":155:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":156:5)
#loc37 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":156:14)
#loc38 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":157:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":157:14)
#loc40 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":23:1)
#loc41 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":26:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":25:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":25:5)
#loc44 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc45 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc46 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":70:19)
#loc47 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":81:23)
#loc48 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":57:1)
#loc49 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":84:1)
#loc50 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":59:5)
#loc51 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":59:9)
#loc52 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:13)
#loc53 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:12)
#loc54 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":61:5)
#loc55 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:5)
#loc56 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":66:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:8)
#loc58 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":62:26)
#loc59 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":63:5)
#loc60 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:16)
#loc62 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":65:23)
#loc63 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":83:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:8)
#loc66 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":67:27)
#loc67 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":68:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":71:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":73:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":70:9)
#loc71 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:9)
#loc72 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":82:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:13)
#loc74 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:21)
#loc75 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":75:18)
#loc76 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":76:9)
#loc77 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":78:9)
#loc78 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":80:9)
#loc79 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:26)
#loc80 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:32)
#loc81 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":77:13)
#loc82 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":81:13)
#loc83 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":28:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":31:1)
#loc85 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":30:12)
#loc86 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":30:5)
#loc87 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":87:1)
#loc88 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":109:1)
#loc89 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":89:5)
#loc90 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":89:9)
#loc91 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:13)
#loc92 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:12)
#loc93 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":91:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:5)
#loc95 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":96:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:8)
#loc97 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":92:26)
#loc98 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":93:5)
#loc99 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:9)
#loc100 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:16)
#loc101 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":95:23)
#loc102 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:5)
#loc103 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":108:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:8)
#loc105 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":97:26)
#loc106 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":98:5)
#loc107 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:9)
#loc108 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":107:9)
#loc109 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:13)
#loc110 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:21)
#loc111 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":100:18)
#loc112 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":101:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":103:9)
#loc114 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":105:9)
#loc115 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:26)
#loc116 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:32)
#loc117 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":102:13)
#loc118 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":106:23)
#loc119 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":106:13)
#loc120 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":112:1)
#loc121 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":132:1)
#loc122 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":114:5)
#loc123 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":114:9)
#loc124 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:13)
#loc125 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:12)
#loc126 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":116:5)
#loc127 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:5)
#loc128 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":126:5)
#loc129 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:8)
#loc130 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":117:27)
#loc131 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":118:5)
#loc132 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":121:5)
#loc133 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":123:5)
#loc134 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":120:19)
#loc135 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":120:9)
#loc136 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":125:16)
#loc137 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":125:9)
#loc138 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:5)
#loc139 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":131:5)
#loc140 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:8)
#loc141 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":127:26)
#loc142 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":128:5)
#loc143 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:22)
#loc144 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:28)
#loc145 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":130:9)
#loc146 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":135:1)
#loc147 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":150:1)
#loc148 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":137:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":137:9)
#loc150 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:13)
#loc151 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:12)
#loc152 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":139:5)
#loc153 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:5)
#loc154 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":144:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:8)
#loc156 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":140:26)
#loc157 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":141:5)
#loc158 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":143:16)
#loc159 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":143:9)
#loc160 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":149:5)
#loc162 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:8)
#loc163 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":145:26)
#loc164 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":146:5)
#loc165 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:22)
#loc166 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:28)
#loc167 = loc("CWE369_Divide_by_Zero__int_fscanf_modulo_08.c":148:9)
#loc168 = loc(fused[#loc1, #loc2])
#loc169 = loc(fused[#loc3, #loc4])
#loc170 = loc(fused[#loc6, #loc7])
#loc171 = loc(fused[#loc8, #loc9])
#loc172 = loc(fused[#loc10, #loc11])
#loc173 = loc(fused[#loc14, #loc12])
#loc174 = loc(fused[#loc15, #loc16])
#loc175 = loc(fused[#loc17, #loc18])
#loc176 = loc(fused[#loc19, #loc16])
#loc177 = loc(fused[#loc22, #loc23])
#loc178 = loc(fused[#loc24, #loc25])
#loc179 = loc(fused[#loc26, #loc23])
#loc180 = loc(fused[#loc27, #loc28])
#loc181 = loc(fused[#loc30, #loc31])
#loc182 = loc(fused[#loc32, #loc33])
#loc183 = loc(fused[#loc34, #loc35])
#loc184 = loc(fused[#loc36, #loc37])
#loc185 = loc(fused[#loc38, #loc39])
#loc186 = loc(fused[#loc40, #loc41])
#loc187 = loc(fused[#loc43, #loc42])
#loc188 = loc(fused[#loc44, #loc45])
#loc189 = loc(fused[#loc48, #loc49])
#loc190 = loc(fused[#loc50, #loc51])
#loc191 = loc(fused[#loc54, #loc52])
#loc192 = loc(fused[#loc55, #loc56])
#loc193 = loc(fused[#loc57, #loc58])
#loc194 = loc(fused[#loc59, #loc56])
#loc195 = loc(fused[#loc63, #loc64])
#loc196 = loc(fused[#loc65, #loc66])
#loc197 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc198 = loc(fused[#loc71, #loc72])
#loc199 = loc(fused[#loc73, #loc74])
#loc200 = loc(fused[#loc76, #loc77, #loc78, #loc72])
#loc201 = loc(fused[#loc79, #loc80])
#loc202 = loc(fused[#loc83, #loc84])
#loc203 = loc(fused[#loc86, #loc85])
#loc204 = loc(fused[#loc87, #loc88])
#loc205 = loc(fused[#loc89, #loc90])
#loc206 = loc(fused[#loc93, #loc91])
#loc207 = loc(fused[#loc94, #loc95])
#loc208 = loc(fused[#loc96, #loc97])
#loc209 = loc(fused[#loc98, #loc95])
#loc210 = loc(fused[#loc102, #loc103])
#loc211 = loc(fused[#loc104, #loc105])
#loc212 = loc(fused[#loc106, #loc103])
#loc213 = loc(fused[#loc107, #loc108])
#loc214 = loc(fused[#loc109, #loc110])
#loc215 = loc(fused[#loc112, #loc113, #loc114, #loc108])
#loc216 = loc(fused[#loc115, #loc116])
#loc217 = loc(fused[#loc120, #loc121])
#loc218 = loc(fused[#loc122, #loc123])
#loc219 = loc(fused[#loc126, #loc124])
#loc220 = loc(fused[#loc127, #loc128])
#loc221 = loc(fused[#loc129, #loc130])
#loc222 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc223 = loc(fused[#loc137, #loc136])
#loc224 = loc(fused[#loc138, #loc139])
#loc225 = loc(fused[#loc140, #loc141])
#loc226 = loc(fused[#loc142, #loc139])
#loc227 = loc(fused[#loc143, #loc144])
#loc228 = loc(fused[#loc146, #loc147])
#loc229 = loc(fused[#loc148, #loc149])
#loc230 = loc(fused[#loc152, #loc150])
#loc231 = loc(fused[#loc153, #loc154])
#loc232 = loc(fused[#loc155, #loc156])
#loc233 = loc(fused[#loc157, #loc154])
#loc234 = loc(fused[#loc159, #loc158])
#loc235 = loc(fused[#loc160, #loc161])
#loc236 = loc(fused[#loc162, #loc163])
#loc237 = loc(fused[#loc164, #loc161])
#loc238 = loc(fused[#loc165, #loc166])
