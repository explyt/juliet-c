!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_65a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_65b_badSink(!s32i) loc(#loc52)
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc53)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_postdec_65_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc55)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc56)
    %2 = cir.get_global @CWE191_Integer_Underflow__int_rand_postdec_65b_badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc10)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc56)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc13)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc13)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc13)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc13)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc13)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc13)
      cir.yield %23 : !u32i loc(#loc13)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc13)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc13)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc13)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc13)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc13)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc13)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc13)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc13)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc13)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc13)
      cir.yield %27 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc13)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc58)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc15)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc16)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc15)
    cir.return loc(#loc6)
  } loc(#loc54)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_postdec_65_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc60)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc19)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc61)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc21)
    cir.return loc(#loc18)
  } loc(#loc59)
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_65b_goodG2BSink(!s32i) loc(#loc62)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc65)
    %2 = cir.get_global @CWE191_Integer_Underflow__int_rand_postdec_65b_goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc65)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc31)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %4 = cir.const #cir.int<2> : !s32i loc(#loc33)
    %5 = cir.unary(minus, %4) : !s32i, !s32i loc(#loc34)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc36)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc36)
    cir.return loc(#loc26)
  } loc(#loc63)
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_65b_goodB2GSink(!s32i) loc(#loc68)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc70)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc71)
    %2 = cir.get_global @CWE191_Integer_Underflow__int_rand_postdec_65b_goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc45)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc71)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc46)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc72)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc48)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc48)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc48)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc48)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc48)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc48)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc48)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc48)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc48)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc48)
      cir.yield %23 : !u32i loc(#loc48)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc48)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc48)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc48)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc48)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc48)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc48)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc48)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc48)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc48)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc48)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc48)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc48)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc48)
      cir.yield %27 : !u32i loc(#loc48)
    }) : (!cir.bool) -> !u32i loc(#loc48)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc48)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc73)
    %10 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc50)
    %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc51)
    cir.call %10(%11) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc50)
    cir.return loc(#loc41)
  } loc(#loc69)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_65a.c":0:0)
#loc1 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":23:1)
#loc2 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":23:69)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":36:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":27:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":29:5)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":29:29)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":31:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":31:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":33:12)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":35:5)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":35:13)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":70:1)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":74:1)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":72:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":72:13)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":73:5)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":73:13)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":43:1)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":43:73)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":45:1)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":54:1)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":47:5)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":47:9)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":48:5)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":48:29)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":50:12)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":50:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":52:13)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":52:12)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":52:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":53:5)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":53:13)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":57:1)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":57:73)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":59:1)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":68:1)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":61:5)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":61:9)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":62:5)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":62:29)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":64:12)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":64:5)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":66:12)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":66:5)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":67:5)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_postdec_65a.c":67:13)
#loc52 = loc(fused[#loc1, #loc2])
#loc53 = loc(fused[#loc3, #loc4])
#loc54 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc7, #loc8])
#loc56 = loc(fused[#loc9, #loc10])
#loc57 = loc(fused[#loc12, #loc11])
#loc58 = loc(fused[#loc14, #loc13])
#loc59 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc19, #loc20])
#loc61 = loc(fused[#loc21, #loc22])
#loc62 = loc(fused[#loc23, #loc24])
#loc63 = loc(fused[#loc25, #loc26])
#loc64 = loc(fused[#loc27, #loc28])
#loc65 = loc(fused[#loc29, #loc30])
#loc66 = loc(fused[#loc32, #loc31])
#loc67 = loc(fused[#loc35, #loc33])
#loc68 = loc(fused[#loc38, #loc39])
#loc69 = loc(fused[#loc40, #loc41])
#loc70 = loc(fused[#loc42, #loc43])
#loc71 = loc(fused[#loc44, #loc45])
#loc72 = loc(fused[#loc47, #loc46])
#loc73 = loc(fused[#loc49, #loc48])
