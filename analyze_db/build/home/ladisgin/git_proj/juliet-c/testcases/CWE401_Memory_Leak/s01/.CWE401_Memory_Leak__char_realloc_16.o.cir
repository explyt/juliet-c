!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_realloc_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @realloc(!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc109)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"A String\00" : !cir.array<!s8i x 9>> : !cir.array<!s8i x 9> {alignment = 1 : i64} loc(#loc7)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.func no_proto @CWE401_Memory_Leak__char_realloc_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc14)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc115)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %3 ^bb3, ^bb8 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc19)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc20)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc20)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc21)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc116)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc117)
    %11 = cir.call @realloc(%6, %10) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc118)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc28)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc29)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc29)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc121)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc122)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc31)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc32)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc33)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc31)
    cir.br ^bb6 loc(#loc27)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc27)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc34)
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc7)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc7)
    %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc35)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb8 loc(#loc38)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc123)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc123)
  ^bb11:  // pred: ^bb10
    %25 = cir.const #cir.int<1> : !s32i loc(#loc41)
    %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc41)
    cir.brcond %26 ^bb12, ^bb13 loc(#loc41)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc42)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc40)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc11)
  } loc(#loc112)
  cir.func no_proto @CWE401_Memory_Leak__char_realloc_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc125)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc45)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc126)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc47)
    cir.return loc(#loc44)
  } loc(#loc124)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc127)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc129)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc55)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
    cir.br ^bb1 loc(#loc131)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc131)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc59)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc59)
    cir.brcond %3 ^bb3, ^bb8 loc(#loc59)
  ^bb3:  // pred: ^bb2
    %4 = cir.get_global @realloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!cir.ptr<!void>, !u64i)>> loc(#loc60)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc61)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc62)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc132)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc133)
    %11 = cir.call @realloc(%6, %10) : (!cir.ptr<!void>, !u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc60)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc134)
    cir.store %12, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc135)
    cir.br ^bb4 loc(#loc136)
  ^bb4:  // pred: ^bb3
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc69)
    %14 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc70)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc70)
    %16 = cir.cmp(eq, %13, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc137)
    cir.brcond %16 ^bb5, ^bb6 loc(#loc138)
  ^bb5:  // pred: ^bb4
    %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc72)
    %18 = cir.const #cir.int<1> : !s32i loc(#loc73)
    %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc74)
    cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc72)
    cir.br ^bb6 loc(#loc68)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc68)
  ^bb7:  // pred: ^bb6
    %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc76)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc76)
    %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc77)
    %24 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%24) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb8 loc(#loc80)
  ^bb8:  // 2 preds: ^bb2, ^bb7
    cir.br ^bb9 loc(#loc58)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc139)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc139)
  ^bb11:  // pred: ^bb10
    %25 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %26 = cir.cast(int_to_bool, %25 : !s32i), !cir.bool loc(#loc83)
    cir.brcond %26 ^bb12, ^bb13 loc(#loc83)
  ^bb12:  // pred: ^bb11
    %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc84)
    %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc85)
    %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc85)
    cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc84)
    cir.br ^bb13 loc(#loc86)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc82)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc52)
  } loc(#loc128)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc141)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc91)
    cir.store %1, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc142)
    cir.br ^bb1 loc(#loc143)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc143)
  ^bb2:  // pred: ^bb1
    %2 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %3 = cir.cast(int_to_bool, %2 : !s32i), !cir.bool loc(#loc95)
    cir.brcond %3 ^bb3, ^bb4 loc(#loc95)
  ^bb3:  // pred: ^bb2
    %4 = cir.const #cir.int<100> : !s32i loc(#loc96)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc96)
    %6 = cir.const #cir.int<1> : !u64i loc(#loc96)
    %7 = cir.binop(mul, %5, %6) : !u64i loc(#loc96)
    %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc96)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc96)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc96)
    cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc144)
    %11 = cir.get_global @strcpy : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc98)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc99)
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 9>> loc(#loc100)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 9>>), !cir.ptr<!s8i> loc(#loc100)
    %15 = cir.call @strcpy(%12, %14) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc98)
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
    cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc102)
    cir.br ^bb4 loc(#loc103)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc94)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc145)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    %17 = cir.const #cir.int<1> : !s32i loc(#loc106)
    %18 = cir.cast(int_to_bool, %17 : !s32i), !cir.bool loc(#loc106)
    cir.brcond %18 ^bb8, ^bb9 loc(#loc106)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc107)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc105)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc88)
  } loc(#loc140)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE401_Memory_Leak/s01/CWE401_Memory_Leak__char_realloc_16.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":683:1)
#loc2 = loc("/usr/include/stdlib.h":684:14)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("/usr/include/string.h":141:1)
#loc6 = loc("/usr/include/string.h":142:14)
#loc7 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:22)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc10 = loc("CWE401_Memory_Leak__char_realloc_16.c":24:1)
#loc11 = loc("CWE401_Memory_Leak__char_realloc_16.c":44:1)
#loc12 = loc("CWE401_Memory_Leak__char_realloc_16.c":26:5)
#loc13 = loc("CWE401_Memory_Leak__char_realloc_16.c":26:12)
#loc14 = loc("CWE401_Memory_Leak__char_realloc_16.c":27:12)
#loc15 = loc("CWE401_Memory_Leak__char_realloc_16.c":27:5)
#loc16 = loc("CWE401_Memory_Leak__char_realloc_16.c":28:5)
#loc17 = loc("CWE401_Memory_Leak__char_realloc_16.c":37:5)
#loc18 = loc("CWE401_Memory_Leak__char_realloc_16.c":28:11)
#loc19 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:24)
#loc20 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:32)
#loc21 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:38)
#loc22 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:42)
#loc23 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:53)
#loc24 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:54)
#loc25 = loc("CWE401_Memory_Leak__char_realloc_16.c":31:9)
#loc26 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:9)
#loc27 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:37)
#loc28 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:13)
#loc29 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:21)
#loc30 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:27)
#loc31 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:28)
#loc32 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:34)
#loc33 = loc("CWE401_Memory_Leak__char_realloc_16.c":32:33)
#loc34 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:16)
#loc35 = loc("CWE401_Memory_Leak__char_realloc_16.c":34:9)
#loc36 = loc("CWE401_Memory_Leak__char_realloc_16.c":35:19)
#loc37 = loc("CWE401_Memory_Leak__char_realloc_16.c":35:9)
#loc38 = loc("CWE401_Memory_Leak__char_realloc_16.c":36:9)
#loc39 = loc("CWE401_Memory_Leak__char_realloc_16.c":38:5)
#loc40 = loc("CWE401_Memory_Leak__char_realloc_16.c":43:5)
#loc41 = loc("CWE401_Memory_Leak__char_realloc_16.c":38:11)
#loc42 = loc("CWE401_Memory_Leak__char_realloc_16.c":42:9)
#loc43 = loc("CWE401_Memory_Leak__char_realloc_16.c":95:1)
#loc44 = loc("CWE401_Memory_Leak__char_realloc_16.c":99:1)
#loc45 = loc("CWE401_Memory_Leak__char_realloc_16.c":97:5)
#loc46 = loc("CWE401_Memory_Leak__char_realloc_16.c":97:13)
#loc47 = loc("CWE401_Memory_Leak__char_realloc_16.c":98:5)
#loc48 = loc("CWE401_Memory_Leak__char_realloc_16.c":98:13)
#loc49 = loc("/usr/include/stdlib.h":687:1)
#loc50 = loc("/usr/include/stdlib.h":687:32)
#loc51 = loc("CWE401_Memory_Leak__char_realloc_16.c":51:1)
#loc52 = loc("CWE401_Memory_Leak__char_realloc_16.c":71:1)
#loc53 = loc("CWE401_Memory_Leak__char_realloc_16.c":53:5)
#loc54 = loc("CWE401_Memory_Leak__char_realloc_16.c":53:12)
#loc55 = loc("CWE401_Memory_Leak__char_realloc_16.c":54:12)
#loc56 = loc("CWE401_Memory_Leak__char_realloc_16.c":54:5)
#loc57 = loc("CWE401_Memory_Leak__char_realloc_16.c":55:5)
#loc58 = loc("CWE401_Memory_Leak__char_realloc_16.c":64:5)
#loc59 = loc("CWE401_Memory_Leak__char_realloc_16.c":55:11)
#loc60 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:24)
#loc61 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:32)
#loc62 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:38)
#loc63 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:42)
#loc64 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:53)
#loc65 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:54)
#loc66 = loc("CWE401_Memory_Leak__char_realloc_16.c":58:9)
#loc67 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:9)
#loc68 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:37)
#loc69 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:13)
#loc70 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:21)
#loc71 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:27)
#loc72 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:28)
#loc73 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:34)
#loc74 = loc("CWE401_Memory_Leak__char_realloc_16.c":59:33)
#loc75 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:16)
#loc76 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:22)
#loc77 = loc("CWE401_Memory_Leak__char_realloc_16.c":61:9)
#loc78 = loc("CWE401_Memory_Leak__char_realloc_16.c":62:19)
#loc79 = loc("CWE401_Memory_Leak__char_realloc_16.c":62:9)
#loc80 = loc("CWE401_Memory_Leak__char_realloc_16.c":63:9)
#loc81 = loc("CWE401_Memory_Leak__char_realloc_16.c":65:5)
#loc82 = loc("CWE401_Memory_Leak__char_realloc_16.c":70:5)
#loc83 = loc("CWE401_Memory_Leak__char_realloc_16.c":65:11)
#loc84 = loc("CWE401_Memory_Leak__char_realloc_16.c":68:9)
#loc85 = loc("CWE401_Memory_Leak__char_realloc_16.c":68:14)
#loc86 = loc("CWE401_Memory_Leak__char_realloc_16.c":69:9)
#loc87 = loc("CWE401_Memory_Leak__char_realloc_16.c":74:1)
#loc88 = loc("CWE401_Memory_Leak__char_realloc_16.c":93:1)
#loc89 = loc("CWE401_Memory_Leak__char_realloc_16.c":76:5)
#loc90 = loc("CWE401_Memory_Leak__char_realloc_16.c":76:12)
#loc91 = loc("CWE401_Memory_Leak__char_realloc_16.c":77:12)
#loc92 = loc("CWE401_Memory_Leak__char_realloc_16.c":77:5)
#loc93 = loc("CWE401_Memory_Leak__char_realloc_16.c":78:5)
#loc94 = loc("CWE401_Memory_Leak__char_realloc_16.c":86:5)
#loc95 = loc("CWE401_Memory_Leak__char_realloc_16.c":78:11)
#loc96 = loc("CWE401_Memory_Leak__char_realloc_16.c":81:24)
#loc97 = loc("CWE401_Memory_Leak__char_realloc_16.c":81:9)
#loc98 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:9)
#loc99 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:16)
#loc100 = loc("CWE401_Memory_Leak__char_realloc_16.c":83:22)
#loc101 = loc("CWE401_Memory_Leak__char_realloc_16.c":84:19)
#loc102 = loc("CWE401_Memory_Leak__char_realloc_16.c":84:9)
#loc103 = loc("CWE401_Memory_Leak__char_realloc_16.c":85:9)
#loc104 = loc("CWE401_Memory_Leak__char_realloc_16.c":87:5)
#loc105 = loc("CWE401_Memory_Leak__char_realloc_16.c":92:5)
#loc106 = loc("CWE401_Memory_Leak__char_realloc_16.c":87:11)
#loc107 = loc("CWE401_Memory_Leak__char_realloc_16.c":91:9)
#loc108 = loc(fused[#loc1, #loc2])
#loc109 = loc(fused[#loc3, #loc4])
#loc110 = loc(fused[#loc5, #loc6])
#loc111 = loc(fused[#loc8, #loc9])
#loc112 = loc(fused[#loc10, #loc11])
#loc113 = loc(fused[#loc12, #loc13])
#loc114 = loc(fused[#loc15, #loc14])
#loc115 = loc(fused[#loc16, #loc17])
#loc116 = loc(fused[#loc22, #loc23])
#loc117 = loc(fused[#loc21, #loc23])
#loc118 = loc(fused[#loc19, #loc24])
#loc119 = loc(fused[#loc25, #loc24])
#loc120 = loc(fused[#loc26, #loc27])
#loc121 = loc(fused[#loc28, #loc29])
#loc122 = loc(fused[#loc30, #loc27])
#loc123 = loc(fused[#loc39, #loc40])
#loc124 = loc(fused[#loc43, #loc44])
#loc125 = loc(fused[#loc45, #loc46])
#loc126 = loc(fused[#loc47, #loc48])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc51, #loc52])
#loc129 = loc(fused[#loc53, #loc54])
#loc130 = loc(fused[#loc56, #loc55])
#loc131 = loc(fused[#loc57, #loc58])
#loc132 = loc(fused[#loc63, #loc64])
#loc133 = loc(fused[#loc62, #loc64])
#loc134 = loc(fused[#loc60, #loc65])
#loc135 = loc(fused[#loc66, #loc65])
#loc136 = loc(fused[#loc67, #loc68])
#loc137 = loc(fused[#loc69, #loc70])
#loc138 = loc(fused[#loc71, #loc68])
#loc139 = loc(fused[#loc81, #loc82])
#loc140 = loc(fused[#loc87, #loc88])
#loc141 = loc(fused[#loc89, #loc90])
#loc142 = loc(fused[#loc92, #loc91])
#loc143 = loc(fused[#loc93, #loc94])
#loc144 = loc(fused[#loc97, #loc96])
#loc145 = loc(fused[#loc104, #loc105])
