!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc158)
  cir.func private  @printUnsignedLine(!u32i) loc(#loc159)
  cir.func no_proto  @CWE191_Integer_Underflow__unsigned_int_rand_sub_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc9)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc162)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc13)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc15)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc15)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc15)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          cir.yield %23 : !u32i loc(#loc15)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc15)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc15)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc15)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc15)
          cir.yield %27 : !u32i loc(#loc15)
        }) : (!cir.bool) -> !u32i loc(#loc15)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc15)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc15)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc165)
      } loc(#loc164)
    } loc(#loc163)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc19)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc19)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc169)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc25)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc24)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc24)
          %9 = cir.binop(sub, %6, %8) : !u32i loc(#loc170)
          cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc169)
          %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc26)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc27)
        } loc(#loc168)
      } loc(#loc167)
    } loc(#loc166)
    cir.return loc(#loc6)
  } loc(#loc160)
  cir.func no_proto  @CWE191_Integer_Underflow__unsigned_int_rand_sub_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc172)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc173)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc34)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    cir.return loc(#loc29)
  } loc(#loc171)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc40)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"data value is too large to perform subtraction.\00" : !cir.array<!s8i x 48>> : !cir.array<!s8i x 48> {alignment = 1 : i64} loc(#loc41)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc46)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc46)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc179)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc50)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc52)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc52)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc52)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc52)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc52)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc52)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc52)
          cir.yield %23 : !u32i loc(#loc52)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc52)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc52)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc52)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc52)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc52)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc52)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc52)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc52)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc52)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc52)
          cir.yield %27 : !u32i loc(#loc52)
        }) : (!cir.bool) -> !u32i loc(#loc52)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc52)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc52)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc182)
      } loc(#loc181)
    } loc(#loc180)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc56)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc56)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc40)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc40)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc60)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc63)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc64)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc64)
          %8 = cir.cmp(gt, %5, %7) : !u32i, !s32i loc(#loc186)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc65)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc188)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc71)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc70)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc70)
            %14 = cir.binop(sub, %11, %13) : !u32i loc(#loc189)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc188)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc72)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc73)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc41)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc41)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc74)
          } loc(#loc187)
        } loc(#loc185)
      } loc(#loc184)
    } loc(#loc183)
    cir.return loc(#loc43)
  } loc(#loc177)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc79)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc83)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc83)
      cir.if %4 {
        %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
        %6 = cir.const #cir.int<1> : !s32i loc(#loc85)
        %7 = cir.binop(and, %5, %6) : !s32i loc(#loc85)
        %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc85)
        %9 = cir.ternary(%8, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc85)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc85)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc85)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc85)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc85)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc85)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc85)
          cir.yield %23 : !u32i loc(#loc85)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc85)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc85)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc85)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc85)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc85)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc85)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc85)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc85)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc85)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc85)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc85)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc85)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc85)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc85)
          cir.yield %27 : !u32i loc(#loc85)
        }) : (!cir.bool) -> !u32i loc(#loc85)
        %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc85)
        %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc85)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc195)
      } loc(#loc194)
    } loc(#loc193)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc89)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc89)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc93)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc94)
          %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc94)
          %8 = cir.cmp(gt, %5, %7) : !u32i, !s32i loc(#loc199)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc95)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc201)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc101)
            %12 = cir.const #cir.int<1> : !s32i loc(#loc100)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc100)
            %14 = cir.binop(sub, %11, %13) : !u32i loc(#loc202)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc201)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc102)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc103)
          } else {
            %10 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 48>> loc(#loc104)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 48>>), !cir.ptr<!s8i> loc(#loc104)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc105)
          } loc(#loc200)
        } loc(#loc198)
      } loc(#loc197)
    } loc(#loc196)
    cir.return loc(#loc76)
  } loc(#loc190)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc204)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc110)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc110)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc205)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc114)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc114)
      cir.if %4 {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc118)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc118)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc119)
      } else {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc120)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc121)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc121)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc208)
      } loc(#loc207)
    } loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc125)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc125)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc212)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc131)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc130)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc130)
          %9 = cir.binop(sub, %6, %8) : !u32i loc(#loc213)
          cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc212)
          %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc132)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc133)
        } loc(#loc211)
      } loc(#loc210)
    } loc(#loc209)
    cir.return loc(#loc107)
  } loc(#loc203)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc138)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc138)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc142)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc142)
      cir.if %4 {
        %5 = cir.const #cir.int<2> : !s32i loc(#loc144)
        %6 = cir.unary(minus, %5) : !s32i, !s32i loc(#loc145)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc145)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc219)
      } loc(#loc218)
    } loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc149)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc149)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc223)
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc155)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc154)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc154)
          %9 = cir.binop(sub, %6, %8) : !u32i loc(#loc224)
          cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc223)
          %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc156)
          cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc157)
        } loc(#loc222)
      } loc(#loc221)
    } loc(#loc220)
    cir.return loc(#loc135)
  } loc(#loc214)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s03/CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc5 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":45:1)
#loc7 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":30:18)
#loc9 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":31:12)
#loc10 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":31:5)
#loc11 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":32:5)
#loc12 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":36:5)
#loc13 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":32:8)
#loc14 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":33:5)
#loc15 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":35:30)
#loc16 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":35:9)
#loc17 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":37:5)
#loc18 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":44:5)
#loc19 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":37:8)
#loc20 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":38:5)
#loc21 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":39:9)
#loc22 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":43:9)
#loc23 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":41:13)
#loc24 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":41:42)
#loc25 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":41:35)
#loc26 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":42:31)
#loc27 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":42:13)
#loc28 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":151:1)
#loc29 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":157:1)
#loc30 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":153:5)
#loc31 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":153:14)
#loc32 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":154:5)
#loc33 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":154:14)
#loc34 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":155:5)
#loc35 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":155:14)
#loc36 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":156:5)
#loc37 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":156:14)
#loc38 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc40 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":64:19)
#loc41 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":76:23)
#loc42 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":52:1)
#loc43 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":79:1)
#loc44 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":54:5)
#loc45 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":54:18)
#loc46 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":55:12)
#loc47 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":55:5)
#loc48 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":56:5)
#loc49 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":60:5)
#loc50 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":56:8)
#loc51 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":57:5)
#loc52 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":59:30)
#loc53 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":59:9)
#loc54 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":61:5)
#loc55 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":78:5)
#loc56 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":61:8)
#loc57 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":62:5)
#loc58 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":65:5)
#loc59 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":67:5)
#loc60 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":64:9)
#loc61 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":69:9)
#loc62 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":77:9)
#loc63 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":69:13)
#loc64 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":69:20)
#loc65 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":69:18)
#loc66 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":70:9)
#loc67 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":73:9)
#loc68 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":75:9)
#loc69 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":71:13)
#loc70 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":71:42)
#loc71 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":71:35)
#loc72 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":72:31)
#loc73 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":72:13)
#loc74 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":76:13)
#loc75 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":82:1)
#loc76 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":104:1)
#loc77 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":84:5)
#loc78 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":84:18)
#loc79 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":85:12)
#loc80 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":85:5)
#loc81 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":86:5)
#loc82 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":90:5)
#loc83 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":86:8)
#loc84 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":87:5)
#loc85 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":89:30)
#loc86 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":89:9)
#loc87 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":91:5)
#loc88 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":103:5)
#loc89 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":91:8)
#loc90 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":92:5)
#loc91 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":94:9)
#loc92 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":102:9)
#loc93 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":94:13)
#loc94 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":94:20)
#loc95 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":94:18)
#loc96 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":95:9)
#loc97 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":98:9)
#loc98 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":100:9)
#loc99 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":96:13)
#loc100 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":96:42)
#loc101 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":96:35)
#loc102 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":97:31)
#loc103 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":97:13)
#loc104 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":101:23)
#loc105 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":101:13)
#loc106 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":107:1)
#loc107 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":129:1)
#loc108 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":109:5)
#loc109 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":109:18)
#loc110 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":110:12)
#loc111 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":110:5)
#loc112 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":111:5)
#loc113 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":120:5)
#loc114 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":111:8)
#loc115 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":112:5)
#loc116 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":115:5)
#loc117 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":117:5)
#loc118 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":114:19)
#loc119 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":114:9)
#loc120 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":119:17)
#loc121 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":119:16)
#loc122 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":119:9)
#loc123 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":121:5)
#loc124 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":128:5)
#loc125 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":121:8)
#loc126 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":122:5)
#loc127 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":123:9)
#loc128 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":127:9)
#loc129 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":125:13)
#loc130 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":125:42)
#loc131 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":125:35)
#loc132 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":126:31)
#loc133 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":126:13)
#loc134 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":132:1)
#loc135 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":149:1)
#loc136 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":134:5)
#loc137 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":134:18)
#loc138 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":135:12)
#loc139 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":135:5)
#loc140 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":136:5)
#loc141 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":140:5)
#loc142 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":136:8)
#loc143 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":137:5)
#loc144 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":139:17)
#loc145 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":139:16)
#loc146 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":139:9)
#loc147 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":141:5)
#loc148 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":148:5)
#loc149 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":141:8)
#loc150 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":142:5)
#loc151 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":143:9)
#loc152 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":147:9)
#loc153 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":145:13)
#loc154 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":145:42)
#loc155 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":145:35)
#loc156 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":146:31)
#loc157 = loc("CWE191_Integer_Underflow__unsigned_int_rand_sub_04.c":146:13)
#loc158 = loc(fused[#loc1, #loc2])
#loc159 = loc(fused[#loc3, #loc4])
#loc160 = loc(fused[#loc5, #loc6])
#loc161 = loc(fused[#loc7, #loc8])
#loc162 = loc(fused[#loc10, #loc9])
#loc163 = loc(fused[#loc11, #loc12])
#loc164 = loc(fused[#loc14, #loc12])
#loc165 = loc(fused[#loc16, #loc15])
#loc166 = loc(fused[#loc17, #loc18])
#loc167 = loc(fused[#loc20, #loc18])
#loc168 = loc(fused[#loc21, #loc22])
#loc169 = loc(fused[#loc23, #loc24])
#loc170 = loc(fused[#loc25, #loc24])
#loc171 = loc(fused[#loc28, #loc29])
#loc172 = loc(fused[#loc30, #loc31])
#loc173 = loc(fused[#loc32, #loc33])
#loc174 = loc(fused[#loc34, #loc35])
#loc175 = loc(fused[#loc36, #loc37])
#loc176 = loc(fused[#loc38, #loc39])
#loc177 = loc(fused[#loc42, #loc43])
#loc178 = loc(fused[#loc44, #loc45])
#loc179 = loc(fused[#loc47, #loc46])
#loc180 = loc(fused[#loc48, #loc49])
#loc181 = loc(fused[#loc51, #loc49])
#loc182 = loc(fused[#loc53, #loc52])
#loc183 = loc(fused[#loc54, #loc55])
#loc184 = loc(fused[#loc57, #loc58, #loc59, #loc55])
#loc185 = loc(fused[#loc61, #loc62])
#loc186 = loc(fused[#loc63, #loc64])
#loc187 = loc(fused[#loc66, #loc67, #loc68, #loc62])
#loc188 = loc(fused[#loc69, #loc70])
#loc189 = loc(fused[#loc71, #loc70])
#loc190 = loc(fused[#loc75, #loc76])
#loc191 = loc(fused[#loc77, #loc78])
#loc192 = loc(fused[#loc80, #loc79])
#loc193 = loc(fused[#loc81, #loc82])
#loc194 = loc(fused[#loc84, #loc82])
#loc195 = loc(fused[#loc86, #loc85])
#loc196 = loc(fused[#loc87, #loc88])
#loc197 = loc(fused[#loc90, #loc88])
#loc198 = loc(fused[#loc91, #loc92])
#loc199 = loc(fused[#loc93, #loc94])
#loc200 = loc(fused[#loc96, #loc97, #loc98, #loc92])
#loc201 = loc(fused[#loc99, #loc100])
#loc202 = loc(fused[#loc101, #loc100])
#loc203 = loc(fused[#loc106, #loc107])
#loc204 = loc(fused[#loc108, #loc109])
#loc205 = loc(fused[#loc111, #loc110])
#loc206 = loc(fused[#loc112, #loc113])
#loc207 = loc(fused[#loc115, #loc116, #loc117, #loc113])
#loc208 = loc(fused[#loc122, #loc120])
#loc209 = loc(fused[#loc123, #loc124])
#loc210 = loc(fused[#loc126, #loc124])
#loc211 = loc(fused[#loc127, #loc128])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc130])
#loc214 = loc(fused[#loc134, #loc135])
#loc215 = loc(fused[#loc136, #loc137])
#loc216 = loc(fused[#loc139, #loc138])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc143, #loc141])
#loc219 = loc(fused[#loc146, #loc144])
#loc220 = loc(fused[#loc147, #loc148])
#loc221 = loc(fused[#loc150, #loc148])
#loc222 = loc(fused[#loc151, #loc152])
#loc223 = loc(fused[#loc153, #loc154])
#loc224 = loc(fused[#loc155, #loc154])
