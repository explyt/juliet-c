!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc91)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc92)
  cir.func private @printDoubleLine(!cir.double) loc(#loc93)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc94)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc96)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc97)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc15)
    cir.store %2, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc98)
    cir.br ^bb1 loc(#loc99)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc19)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc100)
    cir.br ^bb2 loc(#loc99)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc101)
    cir.brcond %6 ^bb3, ^bb11 loc(#loc23)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc102)
  ^bb4:  // pred: ^bb3
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc25)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc103)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc25)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc104)
    cir.store %10, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc105)
    cir.br ^bb5 loc(#loc106)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc32)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc33)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc33)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!cir.double>, !cir.bool loc(#loc107)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc108)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc35)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc37)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc35)
    cir.br ^bb7 loc(#loc31)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc31)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc38)
    %19 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc39)
    cir.store %18, %19 : !cir.double, !cir.ptr<!cir.double> loc(#loc109)
    cir.br ^bb9 loc(#loc18)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc18)
  ^bb10:  // pred: ^bb9
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc41)
    %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc42)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc110)
    cir.br ^bb2 loc(#loc99)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc18)
  ^bb12:  // pred: ^bb11
    %22 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc43)
    %23 = cir.load %22 : !cir.ptr<!cir.double>, !cir.double loc(#loc44)
    cir.call @printDoubleLine(%23) : (!cir.double) -> () loc(#loc45)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc46)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc46)
    cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc47)
    cir.return loc(#loc10)
  } loc(#loc95)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc49)
  } loc(#loc111)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc114)
    %1 = cir.alloca !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>>, ["data"] {alignment = 8 : i64} loc(#loc115)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!cir.double> loc(#loc58)
    cir.store %2, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc116)
    cir.br ^bb1 loc(#loc117)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.int<0> : !s32i loc(#loc62)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    cir.br ^bb2 loc(#loc117)
  ^bb2:  // 2 preds: ^bb1, ^bb10
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc64)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc119)
    cir.brcond %6 ^bb3, ^bb11 loc(#loc66)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc120)
  ^bb4:  // pred: ^bb3
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc68)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc121)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc68)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc122)
    cir.store %10, %1 : !cir.ptr<!cir.double>, !cir.ptr<!cir.ptr<!cir.double>> loc(#loc123)
    cir.br ^bb5 loc(#loc124)
  ^bb5:  // pred: ^bb4
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc75)
    %12 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc76)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!cir.double> loc(#loc76)
    %14 = cir.cmp(eq, %11, %13) : !cir.ptr<!cir.double>, !cir.bool loc(#loc125)
    cir.brcond %14 ^bb6, ^bb7 loc(#loc126)
  ^bb6:  // pred: ^bb5
    %15 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc78)
    %16 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %17 = cir.unary(minus, %16) : !s32i, !s32i loc(#loc80)
    cir.call @exit(%17) : (!s32i) -> () extra(#fn_attr) loc(#loc78)
    cir.br ^bb7 loc(#loc74)
  ^bb7:  // 2 preds: ^bb5, ^bb6
    cir.br ^bb8 loc(#loc74)
  ^bb8:  // pred: ^bb7
    %18 = cir.const #cir.fp<1.700000e+300> : !cir.double loc(#loc81)
    %19 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc82)
    cir.store %18, %19 : !cir.double, !cir.ptr<!cir.double> loc(#loc127)
    cir.br ^bb9 loc(#loc61)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc61)
  ^bb10:  // pred: ^bb9
    %20 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %21 = cir.unary(inc, %20) : !s32i, !s32i loc(#loc85)
    cir.store %21, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.br ^bb2 loc(#loc117)
  ^bb11:  // pred: ^bb2
    cir.br ^bb12 loc(#loc61)
  ^bb12:  // pred: ^bb11
    %22 = cir.load deref %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc86)
    %23 = cir.load %22 : !cir.ptr<!cir.double>, !cir.double loc(#loc87)
    cir.call @printDoubleLine(%23) : (!cir.double) -> () loc(#loc88)
    %24 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.double>>, !cir.ptr<!cir.double> loc(#loc89)
    %25 = cir.cast(bitcast, %24 : !cir.ptr<!cir.double>), !cir.ptr<!void> loc(#loc89)
    cir.call @free(%25) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc90)
    cir.return loc(#loc53)
  } loc(#loc113)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":38:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":38:41)
#loc7 = loc("/usr/include/stdlib.h":687:1)
#loc8 = loc("/usr/include/stdlib.h":687:32)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":21:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":38:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":23:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":23:9)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":24:5)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":24:14)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":26:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":34:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:13)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:9)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:16)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:20)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:18)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":28:5)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":31:26)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":31:33)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":31:44)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":31:45)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":31:9)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:13)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:21)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:27)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:28)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:34)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":32:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":33:17)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":33:10)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":33:9)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:24)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":27:23)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":36:22)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":36:21)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":36:5)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":37:10)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":37:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":63:1)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":66:1)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":65:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":65:13)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":45:1)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":61:1)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":47:5)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":47:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":48:5)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":48:14)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":50:12)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":50:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:5)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":57:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:9)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:16)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:20)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:18)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":52:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":54:26)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":54:33)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":54:45)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":54:46)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":54:9)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:37)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:13)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:21)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:27)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:28)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:34)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":55:33)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":56:17)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":56:10)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":56:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:24)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":51:23)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":59:22)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":59:21)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":59:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":60:10)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__sizeof_double_17.c":60:5)
#loc91 = loc(fused[#loc1, #loc2])
#loc92 = loc(fused[#loc3, #loc4])
#loc93 = loc(fused[#loc5, #loc6])
#loc94 = loc(fused[#loc7, #loc8])
#loc95 = loc(fused[#loc9, #loc10])
#loc96 = loc(fused[#loc11, #loc12])
#loc97 = loc(fused[#loc13, #loc14])
#loc98 = loc(fused[#loc16, #loc15])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc20, #loc19])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc24, #loc18])
#loc103 = loc(fused[#loc26, #loc27])
#loc104 = loc(fused[#loc25, #loc28])
#loc105 = loc(fused[#loc29, #loc28])
#loc106 = loc(fused[#loc30, #loc31])
#loc107 = loc(fused[#loc32, #loc33])
#loc108 = loc(fused[#loc34, #loc31])
#loc109 = loc(fused[#loc40, #loc38])
#loc110 = loc(fused[#loc42, #loc41])
#loc111 = loc(fused[#loc48, #loc49])
#loc112 = loc(fused[#loc50, #loc51])
#loc113 = loc(fused[#loc52, #loc53])
#loc114 = loc(fused[#loc54, #loc55])
#loc115 = loc(fused[#loc56, #loc57])
#loc116 = loc(fused[#loc59, #loc58])
#loc117 = loc(fused[#loc60, #loc61])
#loc118 = loc(fused[#loc63, #loc62])
#loc119 = loc(fused[#loc64, #loc65])
#loc120 = loc(fused[#loc67, #loc61])
#loc121 = loc(fused[#loc69, #loc70])
#loc122 = loc(fused[#loc68, #loc71])
#loc123 = loc(fused[#loc72, #loc71])
#loc124 = loc(fused[#loc73, #loc74])
#loc125 = loc(fused[#loc75, #loc76])
#loc126 = loc(fused[#loc77, #loc74])
#loc127 = loc(fused[#loc83, #loc81])
#loc128 = loc(fused[#loc85, #loc84])
