!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc109)
  cir.func private @unlink(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc110)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"important_file.txt\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc111)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Happy New Year!\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc113)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc114)
    cir.br ^bb1 loc(#loc115)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc116)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc116)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc17)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc17)
    cir.brcond %5 ^bb2, ^bb16 loc(#loc117)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc118)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc12)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.br ^bb4 loc(#loc119)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc119)
  ^bb5:  // pred: ^bb12
    %7 = cir.const #cir.int<1> : !s32i loc(#loc26)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc27)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc120)
    cir.brcond %9 ^bb6, ^bb13 loc(#loc28)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc121)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc122)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc34)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc123)
    cir.brcond %12 ^bb9, ^bb10 loc(#loc124)
  ^bb9:  // pred: ^bb8
    %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc5)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc5)
    %15 = cir.call @unlink(%14) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc36)
    cir.br ^bb10 loc(#loc32)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc32)
  ^bb11:  // pred: ^bb10
    %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
    %17 = cir.unary(inc, %16) nsw : !s32i, !s32i loc(#loc38)
    cir.store %17, %0 : !s32i, !cir.ptr<!s32i> loc(#loc125)
    cir.br ^bb12 loc(#loc30)
  ^bb12:  // pred: ^bb11
    cir.br ^bb5 loc(#loc25)
  ^bb13:  // pred: ^bb5
    cir.br ^bb14 loc(#loc25)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc23)
  ^bb15:  // pred: ^bb14
    cir.br ^bb30 loc(#loc20)
  ^bb16:  // pred: ^bb1
    cir.br ^bb17 loc(#loc126)
  ^bb17:  // pred: ^bb16
    %18 = cir.const #cir.int<0> : !s32i loc(#loc14)
    cir.store %18, %1 : !s32i, !cir.ptr<!s32i> loc(#loc114)
    cir.br ^bb18 loc(#loc127)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20 loc(#loc127)
  ^bb19:  // pred: ^bb26
    %19 = cir.const #cir.int<1> : !s32i loc(#loc43)
    %20 = cir.const #cir.int<1> : !s32i loc(#loc44)
    %21 = cir.cmp(eq, %19, %20) : !s32i, !cir.bool loc(#loc128)
    cir.brcond %21 ^bb20, ^bb27 loc(#loc45)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc129)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc130)
  ^bb22:  // pred: ^bb21
    %22 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
    %23 = cir.const #cir.int<20000> : !s32i loc(#loc51)
    %24 = cir.cmp(eq, %22, %23) : !s32i, !cir.bool loc(#loc131)
    cir.brcond %24 ^bb23, ^bb24 loc(#loc132)
  ^bb23:  // pred: ^bb22
    %25 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc8)
    %26 = cir.cast(array_to_ptrdecay, %25 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%26) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    cir.br ^bb24 loc(#loc49)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc49)
  ^bb25:  // pred: ^bb24
    %27 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc54)
    %28 = cir.unary(inc, %27) nsw : !s32i, !s32i loc(#loc55)
    cir.store %28, %1 : !s32i, !cir.ptr<!s32i> loc(#loc133)
    cir.br ^bb26 loc(#loc47)
  ^bb26:  // pred: ^bb25
    cir.br ^bb19 loc(#loc42)
  ^bb27:  // pred: ^bb19
    cir.br ^bb28 loc(#loc42)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc40)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc16)
  ^bb30:  // 2 preds: ^bb15, ^bb29
    cir.br ^bb31 loc(#loc16)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc10)
  } loc(#loc112)
  cir.func no_proto @CWE511_Logic_Time_Bomb__counter_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc135)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc58)
    cir.return loc(#loc57)
  } loc(#loc134)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc137)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count", init] {alignment = 4 : i64} loc(#loc138)
    cir.br ^bb1 loc(#loc139)
  ^bb1:  // pred: ^bb0
    %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc140)
    %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc140)
    %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc68)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc68)
    cir.brcond %5 ^bb2, ^bb16 loc(#loc141)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc142)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc137)
    cir.br ^bb4 loc(#loc143)
  ^bb4:  // pred: ^bb3
    cir.br ^bb6 loc(#loc143)
  ^bb5:  // pred: ^bb12
    %7 = cir.const #cir.int<1> : !s32i loc(#loc77)
    %8 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc144)
    cir.brcond %9 ^bb6, ^bb13 loc(#loc79)
  ^bb6:  // 2 preds: ^bb4, ^bb5
    cir.br ^bb7 loc(#loc145)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc146)
  ^bb8:  // pred: ^bb7
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc84)
    %11 = cir.const #cir.int<20000> : !s32i loc(#loc85)
    %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc147)
    cir.brcond %12 ^bb9, ^bb10 loc(#loc148)
  ^bb9:  // pred: ^bb8
    %13 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc87)
    %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc87)
    cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc88)
    cir.br ^bb10 loc(#loc83)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    cir.br ^bb11 loc(#loc83)
  ^bb11:  // pred: ^bb10
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    %16 = cir.unary(inc, %15) nsw : !s32i, !s32i loc(#loc90)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc149)
    cir.br ^bb12 loc(#loc81)
  ^bb12:  // pred: ^bb11
    cir.br ^bb5 loc(#loc76)
  ^bb13:  // pred: ^bb5
    cir.br ^bb14 loc(#loc76)
  ^bb14:  // pred: ^bb13
    cir.br ^bb15 loc(#loc74)
  ^bb15:  // pred: ^bb14
    cir.br ^bb30 loc(#loc71)
  ^bb16:  // pred: ^bb1
    cir.br ^bb17 loc(#loc150)
  ^bb17:  // pred: ^bb16
    %17 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %17, %1 : !s32i, !cir.ptr<!s32i> loc(#loc138)
    cir.br ^bb18 loc(#loc151)
  ^bb18:  // pred: ^bb17
    cir.br ^bb20 loc(#loc151)
  ^bb19:  // pred: ^bb26
    %18 = cir.const #cir.int<1> : !s32i loc(#loc95)
    %19 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %20 = cir.cmp(eq, %18, %19) : !s32i, !cir.bool loc(#loc152)
    cir.brcond %20 ^bb20, ^bb27 loc(#loc97)
  ^bb20:  // 2 preds: ^bb18, ^bb19
    cir.br ^bb21 loc(#loc153)
  ^bb21:  // pred: ^bb20
    cir.br ^bb22 loc(#loc154)
  ^bb22:  // pred: ^bb21
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    %22 = cir.const #cir.int<20000> : !s32i loc(#loc103)
    %23 = cir.cmp(eq, %21, %22) : !s32i, !cir.bool loc(#loc155)
    cir.brcond %23 ^bb23, ^bb24 loc(#loc156)
  ^bb23:  // pred: ^bb22
    %24 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc105)
    %25 = cir.cast(array_to_ptrdecay, %24 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc106)
    cir.br ^bb24 loc(#loc101)
  ^bb24:  // 2 preds: ^bb22, ^bb23
    cir.br ^bb25 loc(#loc101)
  ^bb25:  // pred: ^bb24
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    %27 = cir.unary(inc, %26) nsw : !s32i, !s32i loc(#loc108)
    cir.store %27, %1 : !s32i, !cir.ptr<!s32i> loc(#loc157)
    cir.br ^bb26 loc(#loc99)
  ^bb26:  // pred: ^bb25
    cir.br ^bb19 loc(#loc94)
  ^bb27:  // pred: ^bb19
    cir.br ^bb28 loc(#loc94)
  ^bb28:  // pred: ^bb27
    cir.br ^bb29 loc(#loc92)
  ^bb29:  // pred: ^bb28
    cir.br ^bb30 loc(#loc67)
  ^bb30:  // 2 preds: ^bb15, ^bb29
    cir.br ^bb31 loc(#loc67)
  ^bb31:  // pred: ^bb30
    cir.return loc(#loc61)
  } loc(#loc136)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE511_Logic_Time_Bomb/CWE511_Logic_Time_Bomb__counter_12.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("/usr/include/unistd.h":858:1)
#loc4 = loc("/usr/include/unistd.h":858:48)
#loc5 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:28)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:31)
#loc9 = loc("CWE511_Logic_Time_Bomb__counter_12.c":29:1)
#loc10 = loc("CWE511_Logic_Time_Bomb__counter_12.c":63:1)
#loc11 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:13)
#loc12 = loc("CWE511_Logic_Time_Bomb__counter_12.c":34:25)
#loc13 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:13)
#loc14 = loc("CWE511_Logic_Time_Bomb__counter_12.c":50:25)
#loc15 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:5)
#loc16 = loc("CWE511_Logic_Time_Bomb__counter_12.c":62:5)
#loc17 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:8)
#loc18 = loc("CWE511_Logic_Time_Bomb__counter_12.c":31:33)
#loc19 = loc("CWE511_Logic_Time_Bomb__counter_12.c":32:5)
#loc20 = loc("CWE511_Logic_Time_Bomb__counter_12.c":46:5)
#loc21 = loc("CWE511_Logic_Time_Bomb__counter_12.c":48:5)
#loc22 = loc("CWE511_Logic_Time_Bomb__counter_12.c":33:9)
#loc23 = loc("CWE511_Logic_Time_Bomb__counter_12.c":45:9)
#loc24 = loc("CWE511_Logic_Time_Bomb__counter_12.c":35:13)
#loc25 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:25)
#loc26 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:19)
#loc27 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:24)
#loc28 = loc("CWE511_Logic_Time_Bomb__counter_12.c":44:21)
#loc29 = loc("CWE511_Logic_Time_Bomb__counter_12.c":36:13)
#loc30 = loc("CWE511_Logic_Time_Bomb__counter_12.c":43:13)
#loc31 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:17)
#loc32 = loc("CWE511_Logic_Time_Bomb__counter_12.c":41:17)
#loc33 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:21)
#loc34 = loc("CWE511_Logic_Time_Bomb__counter_12.c":38:30)
#loc35 = loc("CWE511_Logic_Time_Bomb__counter_12.c":39:17)
#loc36 = loc("CWE511_Logic_Time_Bomb__counter_12.c":40:21)
#loc37 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:22)
#loc38 = loc("CWE511_Logic_Time_Bomb__counter_12.c":42:17)
#loc39 = loc("CWE511_Logic_Time_Bomb__counter_12.c":49:9)
#loc40 = loc("CWE511_Logic_Time_Bomb__counter_12.c":61:9)
#loc41 = loc("CWE511_Logic_Time_Bomb__counter_12.c":51:13)
#loc42 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:25)
#loc43 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:19)
#loc44 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:24)
#loc45 = loc("CWE511_Logic_Time_Bomb__counter_12.c":60:21)
#loc46 = loc("CWE511_Logic_Time_Bomb__counter_12.c":52:13)
#loc47 = loc("CWE511_Logic_Time_Bomb__counter_12.c":59:13)
#loc48 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:17)
#loc49 = loc("CWE511_Logic_Time_Bomb__counter_12.c":57:17)
#loc50 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:21)
#loc51 = loc("CWE511_Logic_Time_Bomb__counter_12.c":54:30)
#loc52 = loc("CWE511_Logic_Time_Bomb__counter_12.c":55:17)
#loc53 = loc("CWE511_Logic_Time_Bomb__counter_12.c":56:21)
#loc54 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:22)
#loc55 = loc("CWE511_Logic_Time_Bomb__counter_12.c":58:17)
#loc56 = loc("CWE511_Logic_Time_Bomb__counter_12.c":106:1)
#loc57 = loc("CWE511_Logic_Time_Bomb__counter_12.c":109:1)
#loc58 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:5)
#loc59 = loc("CWE511_Logic_Time_Bomb__counter_12.c":108:11)
#loc60 = loc("CWE511_Logic_Time_Bomb__counter_12.c":70:1)
#loc61 = loc("CWE511_Logic_Time_Bomb__counter_12.c":104:1)
#loc62 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:13)
#loc63 = loc("CWE511_Logic_Time_Bomb__counter_12.c":75:25)
#loc64 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:13)
#loc65 = loc("CWE511_Logic_Time_Bomb__counter_12.c":91:25)
#loc66 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:5)
#loc67 = loc("CWE511_Logic_Time_Bomb__counter_12.c":103:5)
#loc68 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:8)
#loc69 = loc("CWE511_Logic_Time_Bomb__counter_12.c":72:33)
#loc70 = loc("CWE511_Logic_Time_Bomb__counter_12.c":73:5)
#loc71 = loc("CWE511_Logic_Time_Bomb__counter_12.c":87:5)
#loc72 = loc("CWE511_Logic_Time_Bomb__counter_12.c":89:5)
#loc73 = loc("CWE511_Logic_Time_Bomb__counter_12.c":74:9)
#loc74 = loc("CWE511_Logic_Time_Bomb__counter_12.c":86:9)
#loc75 = loc("CWE511_Logic_Time_Bomb__counter_12.c":76:13)
#loc76 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:25)
#loc77 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:19)
#loc78 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:24)
#loc79 = loc("CWE511_Logic_Time_Bomb__counter_12.c":85:21)
#loc80 = loc("CWE511_Logic_Time_Bomb__counter_12.c":77:13)
#loc81 = loc("CWE511_Logic_Time_Bomb__counter_12.c":84:13)
#loc82 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:17)
#loc83 = loc("CWE511_Logic_Time_Bomb__counter_12.c":82:17)
#loc84 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:21)
#loc85 = loc("CWE511_Logic_Time_Bomb__counter_12.c":79:30)
#loc86 = loc("CWE511_Logic_Time_Bomb__counter_12.c":80:17)
#loc87 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:31)
#loc88 = loc("CWE511_Logic_Time_Bomb__counter_12.c":81:21)
#loc89 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:22)
#loc90 = loc("CWE511_Logic_Time_Bomb__counter_12.c":83:17)
#loc91 = loc("CWE511_Logic_Time_Bomb__counter_12.c":90:9)
#loc92 = loc("CWE511_Logic_Time_Bomb__counter_12.c":102:9)
#loc93 = loc("CWE511_Logic_Time_Bomb__counter_12.c":92:13)
#loc94 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:25)
#loc95 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:19)
#loc96 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:24)
#loc97 = loc("CWE511_Logic_Time_Bomb__counter_12.c":101:21)
#loc98 = loc("CWE511_Logic_Time_Bomb__counter_12.c":93:13)
#loc99 = loc("CWE511_Logic_Time_Bomb__counter_12.c":100:13)
#loc100 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:17)
#loc101 = loc("CWE511_Logic_Time_Bomb__counter_12.c":98:17)
#loc102 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:21)
#loc103 = loc("CWE511_Logic_Time_Bomb__counter_12.c":95:30)
#loc104 = loc("CWE511_Logic_Time_Bomb__counter_12.c":96:17)
#loc105 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:31)
#loc106 = loc("CWE511_Logic_Time_Bomb__counter_12.c":97:21)
#loc107 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:22)
#loc108 = loc("CWE511_Logic_Time_Bomb__counter_12.c":99:17)
#loc109 = loc(fused[#loc1, #loc2])
#loc110 = loc(fused[#loc3, #loc4])
#loc111 = loc(fused[#loc6, #loc7])
#loc112 = loc(fused[#loc9, #loc10])
#loc113 = loc(fused[#loc11, #loc12])
#loc114 = loc(fused[#loc13, #loc14])
#loc115 = loc(fused[#loc15, #loc16])
#loc116 = loc(fused[#loc17, #loc18])
#loc117 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc118 = loc(fused[#loc22, #loc23])
#loc119 = loc(fused[#loc24, #loc25])
#loc120 = loc(fused[#loc26, #loc27])
#loc121 = loc(fused[#loc29, #loc30])
#loc122 = loc(fused[#loc31, #loc32])
#loc123 = loc(fused[#loc33, #loc34])
#loc124 = loc(fused[#loc35, #loc32])
#loc125 = loc(fused[#loc38, #loc37])
#loc126 = loc(fused[#loc39, #loc40])
#loc127 = loc(fused[#loc41, #loc42])
#loc128 = loc(fused[#loc43, #loc44])
#loc129 = loc(fused[#loc46, #loc47])
#loc130 = loc(fused[#loc48, #loc49])
#loc131 = loc(fused[#loc50, #loc51])
#loc132 = loc(fused[#loc52, #loc49])
#loc133 = loc(fused[#loc55, #loc54])
#loc134 = loc(fused[#loc56, #loc57])
#loc135 = loc(fused[#loc58, #loc59])
#loc136 = loc(fused[#loc60, #loc61])
#loc137 = loc(fused[#loc62, #loc63])
#loc138 = loc(fused[#loc64, #loc65])
#loc139 = loc(fused[#loc66, #loc67])
#loc140 = loc(fused[#loc68, #loc69])
#loc141 = loc(fused[#loc70, #loc71, #loc72, #loc67])
#loc142 = loc(fused[#loc73, #loc74])
#loc143 = loc(fused[#loc75, #loc76])
#loc144 = loc(fused[#loc77, #loc78])
#loc145 = loc(fused[#loc80, #loc81])
#loc146 = loc(fused[#loc82, #loc83])
#loc147 = loc(fused[#loc84, #loc85])
#loc148 = loc(fused[#loc86, #loc83])
#loc149 = loc(fused[#loc90, #loc89])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc98, #loc99])
#loc154 = loc(fused[#loc100, #loc101])
#loc155 = loc(fused[#loc102, #loc103])
#loc156 = loc(fused[#loc104, #loc101])
#loc157 = loc(fused[#loc108, #loc107])
