!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc174 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":385:10)
#loc175 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":385:14)
#loc176 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":385:20)
#loc177 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":385:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc585 = loc(fused[#loc174, #loc175])
#loc586 = loc(fused[#loc176, #loc177])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc516)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc517)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc518)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc519)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc520)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc521)
  cir.func private @atoi(!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc522)
  cir.func private @close(!s32i) -> !s32i loc(#loc523)
  cir.func private @printIntLine(!s32i) loc(#loc524)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc526)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc23)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc24)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc527)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc28)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc28)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc531)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc532)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc533)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc534)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc535)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc37)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc37)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc533)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc39)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc39)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc534)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc44)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc45)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc46)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc47)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc537)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc52)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc53)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc53)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc539)
                cir.if %62 {
                  cir.break loc(#loc55)
                } loc(#loc540)
              } loc(#loc538)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc541)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc58)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc542)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc543)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc63)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc63)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc544)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc66)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc66)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc545)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc70)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc70)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc71)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc546)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc77)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc548)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc549)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc549)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc82)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc83)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc83)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc550)
                cir.if %66 {
                  cir.break loc(#loc85)
                } loc(#loc551)
              } loc(#loc547)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc88)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc89)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc90)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc91)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc553)
                cir.if %64 {
                  cir.break loc(#loc93)
                } loc(#loc554)
              } loc(#loc552)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc95)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc96)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc97)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc555)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc102)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc103)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc103)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc557)
                cir.if %62 {
                  cir.break loc(#loc105)
                } loc(#loc558)
              } loc(#loc556)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc106)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc107)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc107)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc108)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc108)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc108)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc108)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc108)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc108)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc108)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc109)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc109)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc559)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc110)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc111)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc111)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc560)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc116)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc117)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc117)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc562)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc118)
                  cir.yield %64 : !cir.bool loc(#loc118)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc120)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc563)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc118)
                    cir.yield %68 : !cir.bool loc(#loc118)
                  }, false {
                    %68 = cir.const #false loc(#loc118)
                    cir.yield %68 : !cir.bool loc(#loc118)
                  }) : (!cir.bool) -> !cir.bool loc(#loc118)
                  cir.yield %67 : !cir.bool loc(#loc118)
                }) : (!cir.bool) -> !cir.bool loc(#loc118)
                cir.if %63 {
                  cir.break loc(#loc122)
                } loc(#loc564)
              } loc(#loc561)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc123)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc123)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc124)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc125)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc125)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc565)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc126)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc127)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc566)
              cir.yield loc(#loc43)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc130)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc130)
              cir.condition(%15) loc(#loc130)
            } loc(#loc536)
          } loc(#loc536)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc133)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc134)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc134)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc568)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc136)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc137)
            } loc(#loc569)
          } loc(#loc567)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc140)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc141)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc141)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc571)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc143)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc144)
            } loc(#loc572)
          } loc(#loc570)
        } loc(#loc530)
      } loc(#loc529)
    } loc(#loc528)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc147)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc147)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc149)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc150)
        %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc575)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc151)
      } loc(#loc574)
    } loc(#loc573)
    cir.return loc(#loc20)
  } loc(#loc525)
  cir.func no_proto @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc577)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc154)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc578)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc156)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc579)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc158)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc580)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc160)
    cir.return loc(#loc153)
  } loc(#loc576)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc581)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc582)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc583)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc168)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc170)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc171)
  cir.func @main(%arg0: !s32i loc(fused[#loc174, #loc175]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc176, #loc177])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc585)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc586)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc173)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc178)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc179)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc180)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc180)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc181)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc168)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc168)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc182)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good : !cir.ptr<!cir.func<!void ()>> loc(#loc587)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_good() : () -> () loc(#loc183)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc169)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc169)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc185)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc170)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc170)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc186)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc588)
    cir.call @CWE369_Divide_by_Zero__int_listen_socket_modulo_04_bad() : () -> () loc(#loc187)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc171)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc171)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc189)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc190)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc589)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc589)
    cir.return %17 : !s32i loc(#loc589)
  } loc(#loc584)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc193)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc591)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc198)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc199)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc592)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc203)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc203)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc596)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc597)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc598)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc599)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc600)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc212)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc212)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc598)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc214)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc214)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc599)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc219)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc220)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc221)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc222)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc602)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc227)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc228)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc228)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc604)
                cir.if %62 {
                  cir.break loc(#loc230)
                } loc(#loc605)
              } loc(#loc603)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc606)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc233)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc607)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc608)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc238)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc238)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc609)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc240)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc240)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc610)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc242)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc242)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc243)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc611)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc248)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc613)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc614)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc614)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc253)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc254)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc254)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc615)
                cir.if %66 {
                  cir.break loc(#loc256)
                } loc(#loc616)
              } loc(#loc612)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc259)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc260)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc261)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc262)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc262)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc618)
                cir.if %64 {
                  cir.break loc(#loc264)
                } loc(#loc619)
              } loc(#loc617)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc265)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc266)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc267)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc268)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc620)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc273)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc274)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc274)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc622)
                cir.if %62 {
                  cir.break loc(#loc276)
                } loc(#loc623)
              } loc(#loc621)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc277)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc278)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc278)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc279)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc279)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc279)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc279)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc279)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc279)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc279)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc280)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc280)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc624)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc281)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc282)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc282)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc625)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc287)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc288)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc288)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc627)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc289)
                  cir.yield %64 : !cir.bool loc(#loc289)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc290)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc291)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc628)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc289)
                    cir.yield %68 : !cir.bool loc(#loc289)
                  }, false {
                    %68 = cir.const #false loc(#loc289)
                    cir.yield %68 : !cir.bool loc(#loc289)
                  }) : (!cir.bool) -> !cir.bool loc(#loc289)
                  cir.yield %67 : !cir.bool loc(#loc289)
                }) : (!cir.bool) -> !cir.bool loc(#loc289)
                cir.if %63 {
                  cir.break loc(#loc293)
                } loc(#loc629)
              } loc(#loc626)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc294)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc294)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc295)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc296)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc296)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc630)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc297)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc298)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc631)
              cir.yield loc(#loc218)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc301)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc301)
              cir.condition(%15) loc(#loc301)
            } loc(#loc601)
          } loc(#loc601)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc304)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc305)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc305)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc633)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc307)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc308)
            } loc(#loc634)
          } loc(#loc632)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc311)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc312)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc312)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc636)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc314)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc315)
            } loc(#loc637)
          } loc(#loc635)
        } loc(#loc595)
      } loc(#loc594)
    } loc(#loc593)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc318)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc318)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc192)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc192)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc322)
      } else {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc325)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc326)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc641)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc330)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc331)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc643)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc332)
          } else {
            %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc193)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc193)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc333)
          } loc(#loc642)
        } loc(#loc640)
      } loc(#loc639)
    } loc(#loc638)
    cir.return loc(#loc195)
  } loc(#loc590)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc645)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc338)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc339)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc646)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc343)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc343)
      cir.if %4 {
        cir.scope {
          %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc650)
          %6 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc651)
          %7 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc652)
          %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc653)
          %9 = cir.alloca !cir.array<!s8i x 14>, !cir.ptr<!cir.array<!s8i x 14>>, ["inputBuffer"] {alignment = 1 : i64} loc(#loc654)
          %10 = cir.const #cir.int<1> : !s32i loc(#loc352)
          %11 = cir.unary(minus, %10) : !s32i, !s32i loc(#loc352)
          cir.store %11, %7 : !s32i, !cir.ptr<!s32i> loc(#loc652)
          %12 = cir.const #cir.int<1> : !s32i loc(#loc354)
          %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc354)
          cir.store %13, %8 : !s32i, !cir.ptr<!s32i> loc(#loc653)
          cir.scope {
            cir.do {
              %14 = cir.const #cir.int<2> : !s32i loc(#loc359)
              %15 = cir.const #cir.int<1> : !s32i loc(#loc360)
              %16 = cir.const #cir.int<6> : !s32i loc(#loc361)
              %17 = cir.call @socket(%14, %15, %16) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc362)
              cir.store %17, %7 : !s32i, !cir.ptr<!s32i> loc(#loc656)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc367)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc368)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc368)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc658)
                cir.if %62 {
                  cir.break loc(#loc370)
                } loc(#loc659)
              } loc(#loc657)
              %18 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc660)
              %19 = cir.const #cir.int<0> : !s32i loc(#loc373)
              %20 = cir.const #cir.int<16> : !u64i loc(#loc661)
              cir.libc.memset %20 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc662)
              %21 = cir.const #cir.int<2> : !s32i loc(#loc378)
              %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc378)
              %23 = cir.get_member %6[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc64)
              cir.store %22, %23 : !u16i, !cir.ptr<!u16i> loc(#loc663)
              %24 = cir.const #cir.int<0> : !s32i loc(#loc380)
              %25 = cir.cast(integral, %24 : !s32i), !u32i loc(#loc380)
              %26 = cir.get_member %6[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc67)
              %27 = cir.get_member %26[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc68)
              cir.store %25, %27 : !u32i, !cir.ptr<!u32i> loc(#loc664)
              %28 = cir.const #cir.int<27015> : !s32i loc(#loc382)
              %29 = cir.cast(integral, %28 : !s32i), !u16i loc(#loc382)
              %30 = cir.call @htons(%29) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc383)
              %31 = cir.get_member %6[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc72)
              cir.store %30, %31 : !u16i, !cir.ptr<!u16i> loc(#loc665)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc388)
                %60 = cir.cast(bitcast, %6 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc667)
                %61 = cir.const #cir.int<16> : !u64i loc(#loc668)
                %62 = cir.cast(integral, %61 : !u64i), !u32i loc(#loc668)
                %63 = cir.call @bind(%59, %60, %62) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc393)
                %64 = cir.const #cir.int<1> : !s32i loc(#loc394)
                %65 = cir.unary(minus, %64) : !s32i, !s32i loc(#loc394)
                %66 = cir.cmp(eq, %63, %65) : !s32i, !cir.bool loc(#loc669)
                cir.if %66 {
                  cir.break loc(#loc396)
                } loc(#loc670)
              } loc(#loc666)
              cir.scope {
                %59 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc399)
                %60 = cir.const #cir.int<5> : !s32i loc(#loc400)
                %61 = cir.call @listen(%59, %60) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc401)
                %62 = cir.const #cir.int<1> : !s32i loc(#loc402)
                %63 = cir.unary(minus, %62) : !s32i, !s32i loc(#loc402)
                %64 = cir.cmp(eq, %61, %63) : !s32i, !cir.bool loc(#loc672)
                cir.if %64 {
                  cir.break loc(#loc404)
                } loc(#loc673)
              } loc(#loc671)
              %32 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc405)
              %33 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc406)
              %34 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc407)
              %35 = cir.call @accept(%32, %33, %34) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc408)
              cir.store %35, %8 : !s32i, !cir.ptr<!s32i> loc(#loc674)
              cir.scope {
                %59 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc413)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc414)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc414)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc676)
                cir.if %62 {
                  cir.break loc(#loc416)
                } loc(#loc677)
              } loc(#loc675)
              %36 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc417)
              %37 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc418)
              %38 = cir.cast(bitcast, %37 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc418)
              %39 = cir.const #cir.int<3> : !s32i loc(#loc419)
              %40 = cir.cast(integral, %39 : !s32i), !u64i loc(#loc419)
              %41 = cir.const #cir.int<4> : !u64i loc(#loc419)
              %42 = cir.binop(mul, %40, %41) : !u64i loc(#loc419)
              %43 = cir.const #cir.int<2> : !s32i loc(#loc419)
              %44 = cir.cast(integral, %43 : !s32i), !u64i loc(#loc419)
              %45 = cir.binop(add, %42, %44) : !u64i loc(#loc419)
              %46 = cir.const #cir.int<1> : !s32i loc(#loc420)
              %47 = cir.cast(integral, %46 : !s32i), !u64i loc(#loc420)
              %48 = cir.binop(sub, %45, %47) : !u64i loc(#loc678)
              %49 = cir.const #cir.int<0> : !s32i loc(#loc421)
              %50 = cir.call @recv(%36, %38, %48, %49) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc422)
              %51 = cir.cast(integral, %50 : !s64i), !s32i loc(#loc422)
              cir.store %51, %5 : !s32i, !cir.ptr<!s32i> loc(#loc679)
              cir.scope {
                %59 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc427)
                %60 = cir.const #cir.int<1> : !s32i loc(#loc428)
                %61 = cir.unary(minus, %60) : !s32i, !s32i loc(#loc428)
                %62 = cir.cmp(eq, %59, %61) : !s32i, !cir.bool loc(#loc681)
                %63 = cir.ternary(%62, true {
                  %64 = cir.const #true loc(#loc429)
                  cir.yield %64 : !cir.bool loc(#loc429)
                }, false {
                  %64 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc430)
                  %65 = cir.const #cir.int<0> : !s32i loc(#loc431)
                  %66 = cir.cmp(eq, %64, %65) : !s32i, !cir.bool loc(#loc682)
                  %67 = cir.ternary(%66, true {
                    %68 = cir.const #true loc(#loc429)
                    cir.yield %68 : !cir.bool loc(#loc429)
                  }, false {
                    %68 = cir.const #false loc(#loc429)
                    cir.yield %68 : !cir.bool loc(#loc429)
                  }) : (!cir.bool) -> !cir.bool loc(#loc429)
                  cir.yield %67 : !cir.bool loc(#loc429)
                }) : (!cir.bool) -> !cir.bool loc(#loc429)
                cir.if %63 {
                  cir.break loc(#loc433)
                } loc(#loc683)
              } loc(#loc680)
              %52 = cir.const #cir.int<0> : !s32i loc(#loc434)
              %53 = cir.cast(integral, %52 : !s32i), !s8i loc(#loc434)
              %54 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc435)
              %55 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc436)
              %56 = cir.ptr_stride(%55 : !cir.ptr<!s8i>, %54 : !s32i), !cir.ptr<!s8i> loc(#loc436)
              cir.store %53, %56 : !s8i, !cir.ptr<!s8i> loc(#loc684)
              %57 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc437)
              %58 = cir.call @atoi(%57) : (!cir.ptr<!s8i>) -> !s32i extra(#fn_attr) loc(#loc438)
              cir.store %58, %0 : !s32i, !cir.ptr<!s32i> loc(#loc685)
              cir.yield loc(#loc358)
            } while {
              %14 = cir.const #cir.int<0> : !s32i loc(#loc441)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc441)
              cir.condition(%15) loc(#loc441)
            } loc(#loc655)
          } loc(#loc655)
          cir.scope {
            %14 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc444)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc445)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc445)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc687)
            cir.if %17 {
              %18 = cir.load %7 : !cir.ptr<!s32i>, !s32i loc(#loc447)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc448)
            } loc(#loc688)
          } loc(#loc686)
          cir.scope {
            %14 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc451)
            %15 = cir.const #cir.int<1> : !s32i loc(#loc452)
            %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc452)
            %17 = cir.cmp(ne, %14, %16) : !s32i, !cir.bool loc(#loc690)
            cir.if %17 {
              %18 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc454)
              %19 = cir.call @close(%18) : (!s32i) -> !s32i loc(#loc455)
            } loc(#loc691)
          } loc(#loc689)
        } loc(#loc649)
      } loc(#loc648)
    } loc(#loc647)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc458)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc458)
      cir.if %4 {
        cir.scope {
          %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc462)
          %6 = cir.const #cir.int<0> : !s32i loc(#loc463)
          %7 = cir.cmp(ne, %5, %6) : !s32i, !cir.bool loc(#loc695)
          cir.if %7 {
            %8 = cir.const #cir.int<100> : !s32i loc(#loc467)
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc468)
            %10 = cir.binop(rem, %8, %9) : !s32i loc(#loc697)
            cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc469)
          } else {
            %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc470)
            %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc470)
            cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc471)
          } loc(#loc696)
        } loc(#loc694)
      } loc(#loc693)
    } loc(#loc692)
    cir.return loc(#loc335)
  } loc(#loc644)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc699)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc476)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc477)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc700)
    cir.scope {
      %3 = cir.const #cir.int<0> : !s32i loc(#loc481)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc481)
      cir.if %4 {
        %5 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc485)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc485)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc486)
      } else {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc487)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc703)
      } loc(#loc702)
    } loc(#loc701)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc491)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc491)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc493)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc494)
        %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc706)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc495)
      } loc(#loc705)
    } loc(#loc704)
    cir.return loc(#loc473)
  } loc(#loc698)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc708)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc500)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc501)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc709)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc505)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc505)
      cir.if %4 {
        %5 = cir.const #cir.int<7> : !s32i loc(#loc507)
        cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc712)
      } loc(#loc711)
    } loc(#loc710)
    cir.scope {
      %3 = cir.const #cir.int<1> : !s32i loc(#loc511)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc511)
      cir.if %4 {
        %5 = cir.const #cir.int<100> : !s32i loc(#loc513)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc514)
        %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc715)
        cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc515)
      } loc(#loc714)
    } loc(#loc713)
    cir.return loc(#loc497)
  } loc(#loc707)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":0:0)
#loc1 = loc("/usr/include/sys/socket.h":102:1)
#loc2 = loc("/usr/include/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":404:1)
#loc4 = loc("/usr/include/netinet/in.h":405:40)
#loc5 = loc("/usr/include/sys/socket.h":112:1)
#loc6 = loc("/usr/include/sys/socket.h":113:6)
#loc7 = loc("/usr/include/sys/socket.h":296:1)
#loc8 = loc("/usr/include/sys/socket.h":296:39)
#loc9 = loc("/usr/include/sys/socket.h":306:1)
#loc10 = loc("/usr/include/sys/socket.h":307:38)
#loc11 = loc("/usr/include/sys/socket.h":145:1)
#loc12 = loc("/usr/include/sys/socket.h":145:68)
#loc13 = loc("/usr/include/stdlib.h":105:1)
#loc14 = loc("/usr/include/stdlib.h":106:33)
#loc15 = loc("/usr/include/unistd.h":358:1)
#loc16 = loc("/usr/include/unistd.h":358:27)
#loc17 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc18 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc19 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":50:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":132:1)
#loc21 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":52:5)
#loc22 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":52:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":54:13)
#loc24 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":54:12)
#loc25 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":54:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":55:5)
#loc27 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":126:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":55:8)
#loc29 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":56:5)
#loc30 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":57:9)
#loc31 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":125:9)
#loc32 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":62:13)
#loc33 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":62:17)
#loc34 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":63:13)
#loc35 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":63:32)
#loc36 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":64:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":64:35)
#loc38 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":65:13)
#loc39 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":65:35)
#loc40 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":66:13)
#loc41 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":66:45)
#loc42 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":67:13)
#loc43 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":110:21)
#loc44 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:39)
#loc45 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:48)
#loc46 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:61)
#loc47 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:32)
#loc48 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:17)
#loc49 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":77:72)
#loc50 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":78:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":81:17)
#loc52 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":78:21)
#loc53 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":78:37)
#loc54 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":79:17)
#loc55 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":80:21)
#loc56 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:24)
#loc57 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:25)
#loc58 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:34)
#loc59 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:37)
#loc60 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:51)
#loc61 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:17)
#loc62 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":82:52)
#loc63 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":83:38)
#loc64 = loc("/usr/include/netinet/in.h":249:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":83:17)
#loc66 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":84:43)
#loc67 = loc("/usr/include/netinet/in.h":251:20)
#loc68 = loc("/usr/include/netinet/in.h":33:15)
#loc69 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":84:17)
#loc70 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":85:42)
#loc71 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":85:36)
#loc72 = loc("/usr/include/netinet/in.h":250:15)
#loc73 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":85:17)
#loc74 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":85:50)
#loc75 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":89:17)
#loc77 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:26)
#loc78 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:58)
#loc79 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:59)
#loc80 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:68)
#loc81 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:82)
#loc82 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:21)
#loc83 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":86:88)
#loc84 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":87:17)
#loc85 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":88:21)
#loc86 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":90:17)
#loc87 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":93:17)
#loc88 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":90:28)
#loc89 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":90:42)
#loc90 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":90:21)
#loc91 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":90:61)
#loc92 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":91:17)
#loc93 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":92:21)
#loc94 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:39)
#loc95 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:53)
#loc96 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:59)
#loc97 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:32)
#loc98 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:17)
#loc99 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":94:63)
#loc100 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":95:17)
#loc101 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":98:17)
#loc102 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":95:21)
#loc103 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":95:37)
#loc104 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":96:17)
#loc105 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":97:21)
#loc106 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:35)
#loc107 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:49)
#loc108 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:62)
#loc109 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:80)
#loc110 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:83)
#loc111 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:30)
#loc112 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:17)
#loc113 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":100:84)
#loc114 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:17)
#loc115 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":104:17)
#loc116 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:21)
#loc117 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:35)
#loc118 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:48)
#loc119 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:51)
#loc120 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":101:65)
#loc121 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":102:17)
#loc122 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":103:21)
#loc123 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":106:43)
#loc124 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":106:29)
#loc125 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":106:17)
#loc126 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":108:29)
#loc127 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":108:24)
#loc128 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":108:17)
#loc129 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":108:40)
#loc130 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":110:20)
#loc131 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":111:13)
#loc132 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":114:13)
#loc133 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":111:17)
#loc134 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":111:33)
#loc135 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":112:13)
#loc136 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":113:30)
#loc137 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":113:17)
#loc138 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":115:13)
#loc139 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":118:13)
#loc140 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":115:17)
#loc141 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":115:33)
#loc142 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":116:13)
#loc143 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":117:30)
#loc144 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":117:17)
#loc145 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":127:5)
#loc146 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":131:5)
#loc147 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":127:8)
#loc148 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":128:5)
#loc149 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":130:22)
#loc150 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":130:28)
#loc151 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":130:9)
#loc152 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":368:1)
#loc153 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":374:1)
#loc154 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":370:5)
#loc155 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":370:14)
#loc156 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":371:5)
#loc157 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":371:14)
#loc158 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":372:5)
#loc159 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":372:14)
#loc160 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":373:5)
#loc161 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":373:14)
#loc162 = loc("/usr/include/stdlib.h":575:1)
#loc163 = loc("/usr/include/stdlib.h":575:41)
#loc164 = loc("/usr/include/time.h":76:1)
#loc165 = loc("/usr/include/time.h":76:38)
#loc166 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc167 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc168 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":390:15)
#loc169 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":392:15)
#loc170 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":395:15)
#loc171 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":397:15)
#loc172 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":385:1)
#loc173 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":400:1)
#loc178 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":386:1)
#loc179 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":388:27)
#loc180 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":388:22)
#loc181 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":388:5)
#loc182 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":390:5)
#loc183 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":391:5)
#loc184 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":391:61)
#loc185 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":392:5)
#loc186 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":395:5)
#loc187 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":396:5)
#loc188 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":396:60)
#loc189 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":397:5)
#loc190 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":399:12)
#loc191 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":399:5)
#loc192 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":219:19)
#loc193 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":230:23)
#loc194 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":139:1)
#loc195 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":233:1)
#loc196 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":141:5)
#loc197 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":141:9)
#loc198 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":143:13)
#loc199 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":143:12)
#loc200 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":143:5)
#loc201 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":144:5)
#loc202 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":215:5)
#loc203 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":144:8)
#loc204 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":145:5)
#loc205 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":146:9)
#loc206 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":214:9)
#loc207 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":151:13)
#loc208 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":151:17)
#loc209 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":152:13)
#loc210 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":152:32)
#loc211 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":153:13)
#loc212 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":153:35)
#loc213 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":154:13)
#loc214 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":154:35)
#loc215 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":155:13)
#loc216 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":155:45)
#loc217 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":156:13)
#loc218 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":199:21)
#loc219 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:39)
#loc220 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:48)
#loc221 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:61)
#loc222 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:32)
#loc223 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:17)
#loc224 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":166:72)
#loc225 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":167:17)
#loc226 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":170:17)
#loc227 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":167:21)
#loc228 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":167:37)
#loc229 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":168:17)
#loc230 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":169:21)
#loc231 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:24)
#loc232 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:25)
#loc233 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:34)
#loc234 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:37)
#loc235 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:51)
#loc236 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:17)
#loc237 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":171:52)
#loc238 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":172:38)
#loc239 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":172:17)
#loc240 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":173:43)
#loc241 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":173:17)
#loc242 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":174:42)
#loc243 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":174:36)
#loc244 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":174:17)
#loc245 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":174:50)
#loc246 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:17)
#loc247 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":178:17)
#loc248 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:26)
#loc249 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:58)
#loc250 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:59)
#loc251 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:68)
#loc252 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:82)
#loc253 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:21)
#loc254 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":175:88)
#loc255 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":176:17)
#loc256 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":177:21)
#loc257 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":179:17)
#loc258 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":182:17)
#loc259 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":179:28)
#loc260 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":179:42)
#loc261 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":179:21)
#loc262 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":179:61)
#loc263 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":180:17)
#loc264 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":181:21)
#loc265 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:39)
#loc266 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:53)
#loc267 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:59)
#loc268 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:32)
#loc269 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:17)
#loc270 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":183:63)
#loc271 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":184:17)
#loc272 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":187:17)
#loc273 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":184:21)
#loc274 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":184:37)
#loc275 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":185:17)
#loc276 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":186:21)
#loc277 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:35)
#loc278 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:49)
#loc279 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:62)
#loc280 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:80)
#loc281 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:83)
#loc282 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:30)
#loc283 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:17)
#loc284 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":189:84)
#loc285 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:17)
#loc286 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":193:17)
#loc287 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:21)
#loc288 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:35)
#loc289 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:48)
#loc290 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:51)
#loc291 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":190:65)
#loc292 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":191:17)
#loc293 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":192:21)
#loc294 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":195:43)
#loc295 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":195:29)
#loc296 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":195:17)
#loc297 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":197:29)
#loc298 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":197:24)
#loc299 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":197:17)
#loc300 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":197:40)
#loc301 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":199:20)
#loc302 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":200:13)
#loc303 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":203:13)
#loc304 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":200:17)
#loc305 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":200:33)
#loc306 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":201:13)
#loc307 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":202:30)
#loc308 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":202:17)
#loc309 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":204:13)
#loc310 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":207:13)
#loc311 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":204:17)
#loc312 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":204:33)
#loc313 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":205:13)
#loc314 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":206:30)
#loc315 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":206:17)
#loc316 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":216:5)
#loc317 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":232:5)
#loc318 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":216:8)
#loc319 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":217:5)
#loc320 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":220:5)
#loc321 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":222:5)
#loc322 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":219:9)
#loc323 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":224:9)
#loc324 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":231:9)
#loc325 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":224:13)
#loc326 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":224:21)
#loc327 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":225:9)
#loc328 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":227:9)
#loc329 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":229:9)
#loc330 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":226:26)
#loc331 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":226:32)
#loc332 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":226:13)
#loc333 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":230:13)
#loc334 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":236:1)
#loc335 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":325:1)
#loc336 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":238:5)
#loc337 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":238:9)
#loc338 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":240:13)
#loc339 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":240:12)
#loc340 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":240:5)
#loc341 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":241:5)
#loc342 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":312:5)
#loc343 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":241:8)
#loc344 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":242:5)
#loc345 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":243:9)
#loc346 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":311:9)
#loc347 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":248:13)
#loc348 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":248:17)
#loc349 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":249:13)
#loc350 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":249:32)
#loc351 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":250:13)
#loc352 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":250:35)
#loc353 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":251:13)
#loc354 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":251:35)
#loc355 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":252:13)
#loc356 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":252:45)
#loc357 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":253:13)
#loc358 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":296:21)
#loc359 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:39)
#loc360 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:48)
#loc361 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:61)
#loc362 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:32)
#loc363 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:17)
#loc364 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":263:72)
#loc365 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":264:17)
#loc366 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":267:17)
#loc367 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":264:21)
#loc368 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":264:37)
#loc369 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":265:17)
#loc370 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":266:21)
#loc371 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:24)
#loc372 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:25)
#loc373 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:34)
#loc374 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:37)
#loc375 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:51)
#loc376 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:17)
#loc377 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":268:52)
#loc378 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":269:38)
#loc379 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":269:17)
#loc380 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":270:43)
#loc381 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":270:17)
#loc382 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":271:42)
#loc383 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":271:36)
#loc384 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":271:17)
#loc385 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":271:50)
#loc386 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:17)
#loc387 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":275:17)
#loc388 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:26)
#loc389 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:58)
#loc390 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:59)
#loc391 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:68)
#loc392 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:82)
#loc393 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:21)
#loc394 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":272:88)
#loc395 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":273:17)
#loc396 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":274:21)
#loc397 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":276:17)
#loc398 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":279:17)
#loc399 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":276:28)
#loc400 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":276:42)
#loc401 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":276:21)
#loc402 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":276:61)
#loc403 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":277:17)
#loc404 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":278:21)
#loc405 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:39)
#loc406 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:53)
#loc407 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:59)
#loc408 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:32)
#loc409 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:17)
#loc410 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":280:63)
#loc411 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":281:17)
#loc412 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":284:17)
#loc413 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":281:21)
#loc414 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":281:37)
#loc415 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":282:17)
#loc416 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":283:21)
#loc417 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:35)
#loc418 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:49)
#loc419 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:62)
#loc420 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:80)
#loc421 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:83)
#loc422 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:30)
#loc423 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:17)
#loc424 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":286:84)
#loc425 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:17)
#loc426 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":290:17)
#loc427 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:21)
#loc428 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:35)
#loc429 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:48)
#loc430 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:51)
#loc431 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":287:65)
#loc432 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":288:17)
#loc433 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":289:21)
#loc434 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":292:43)
#loc435 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":292:29)
#loc436 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":292:17)
#loc437 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":294:29)
#loc438 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":294:24)
#loc439 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":294:17)
#loc440 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":294:40)
#loc441 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":296:20)
#loc442 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":297:13)
#loc443 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":300:13)
#loc444 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":297:17)
#loc445 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":297:33)
#loc446 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":298:13)
#loc447 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":299:30)
#loc448 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":299:17)
#loc449 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":301:13)
#loc450 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":304:13)
#loc451 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":301:17)
#loc452 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":301:33)
#loc453 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":302:13)
#loc454 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":303:30)
#loc455 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":303:17)
#loc456 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":313:5)
#loc457 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":324:5)
#loc458 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":313:8)
#loc459 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":314:5)
#loc460 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":316:9)
#loc461 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":323:9)
#loc462 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":316:13)
#loc463 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":316:21)
#loc464 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":317:9)
#loc465 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":319:9)
#loc466 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":321:9)
#loc467 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":318:26)
#loc468 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":318:32)
#loc469 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":318:13)
#loc470 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":322:23)
#loc471 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":322:13)
#loc472 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":328:1)
#loc473 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":348:1)
#loc474 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":330:5)
#loc475 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":330:9)
#loc476 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":332:13)
#loc477 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":332:12)
#loc478 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":332:5)
#loc479 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":333:5)
#loc480 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":342:5)
#loc481 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":333:8)
#loc482 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":334:5)
#loc483 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":337:5)
#loc484 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":339:5)
#loc485 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":336:19)
#loc486 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":336:9)
#loc487 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":341:16)
#loc488 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":341:9)
#loc489 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":343:5)
#loc490 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":347:5)
#loc491 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":343:8)
#loc492 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":344:5)
#loc493 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":346:22)
#loc494 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":346:28)
#loc495 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":346:9)
#loc496 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":351:1)
#loc497 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":366:1)
#loc498 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":353:5)
#loc499 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":353:9)
#loc500 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":355:13)
#loc501 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":355:12)
#loc502 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":355:5)
#loc503 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":356:5)
#loc504 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":360:5)
#loc505 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":356:8)
#loc506 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":357:5)
#loc507 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":359:16)
#loc508 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":359:9)
#loc509 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":361:5)
#loc510 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":365:5)
#loc511 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":361:8)
#loc512 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":362:5)
#loc513 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":364:22)
#loc514 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":364:28)
#loc515 = loc("CWE369_Divide_by_Zero__int_listen_socket_modulo_04.c":364:9)
#loc516 = loc(fused[#loc1, #loc2])
#loc517 = loc(fused[#loc3, #loc4])
#loc518 = loc(fused[#loc5, #loc6])
#loc519 = loc(fused[#loc7, #loc8])
#loc520 = loc(fused[#loc9, #loc10])
#loc521 = loc(fused[#loc11, #loc12])
#loc522 = loc(fused[#loc13, #loc14])
#loc523 = loc(fused[#loc15, #loc16])
#loc524 = loc(fused[#loc17, #loc18])
#loc525 = loc(fused[#loc19, #loc20])
#loc526 = loc(fused[#loc21, #loc22])
#loc527 = loc(fused[#loc25, #loc23])
#loc528 = loc(fused[#loc26, #loc27])
#loc529 = loc(fused[#loc29, #loc27])
#loc530 = loc(fused[#loc30, #loc31])
#loc531 = loc(fused[#loc32, #loc33])
#loc532 = loc(fused[#loc34, #loc35])
#loc533 = loc(fused[#loc36, #loc37])
#loc534 = loc(fused[#loc38, #loc39])
#loc535 = loc(fused[#loc40, #loc41])
#loc536 = loc(fused[#loc42, #loc43])
#loc537 = loc(fused[#loc48, #loc49])
#loc538 = loc(fused[#loc50, #loc51])
#loc539 = loc(fused[#loc52, #loc53])
#loc540 = loc(fused[#loc54, #loc51])
#loc541 = loc(fused[#loc56, #loc57])
#loc542 = loc(fused[#loc59, #loc60])
#loc543 = loc(fused[#loc61, #loc62])
#loc544 = loc(fused[#loc65, #loc63])
#loc545 = loc(fused[#loc69, #loc66])
#loc546 = loc(fused[#loc73, #loc74])
#loc547 = loc(fused[#loc75, #loc76])
#loc548 = loc(fused[#loc78, #loc79])
#loc549 = loc(fused[#loc80, #loc81])
#loc550 = loc(fused[#loc82, #loc83])
#loc551 = loc(fused[#loc84, #loc76])
#loc552 = loc(fused[#loc86, #loc87])
#loc553 = loc(fused[#loc90, #loc91])
#loc554 = loc(fused[#loc92, #loc87])
#loc555 = loc(fused[#loc98, #loc99])
#loc556 = loc(fused[#loc100, #loc101])
#loc557 = loc(fused[#loc102, #loc103])
#loc558 = loc(fused[#loc104, #loc101])
#loc559 = loc(fused[#loc108, #loc109])
#loc560 = loc(fused[#loc112, #loc113])
#loc561 = loc(fused[#loc114, #loc115])
#loc562 = loc(fused[#loc116, #loc117])
#loc563 = loc(fused[#loc119, #loc120])
#loc564 = loc(fused[#loc121, #loc115])
#loc565 = loc(fused[#loc125, #loc123])
#loc566 = loc(fused[#loc128, #loc129])
#loc567 = loc(fused[#loc131, #loc132])
#loc568 = loc(fused[#loc133, #loc134])
#loc569 = loc(fused[#loc135, #loc132])
#loc570 = loc(fused[#loc138, #loc139])
#loc571 = loc(fused[#loc140, #loc141])
#loc572 = loc(fused[#loc142, #loc139])
#loc573 = loc(fused[#loc145, #loc146])
#loc574 = loc(fused[#loc148, #loc146])
#loc575 = loc(fused[#loc149, #loc150])
#loc576 = loc(fused[#loc152, #loc153])
#loc577 = loc(fused[#loc154, #loc155])
#loc578 = loc(fused[#loc156, #loc157])
#loc579 = loc(fused[#loc158, #loc159])
#loc580 = loc(fused[#loc160, #loc161])
#loc581 = loc(fused[#loc162, #loc163])
#loc582 = loc(fused[#loc164, #loc165])
#loc583 = loc(fused[#loc166, #loc167])
#loc584 = loc(fused[#loc172, #loc173])
#loc587 = loc(fused[#loc183, #loc184])
#loc588 = loc(fused[#loc187, #loc188])
#loc589 = loc(fused[#loc191, #loc190])
#loc590 = loc(fused[#loc194, #loc195])
#loc591 = loc(fused[#loc196, #loc197])
#loc592 = loc(fused[#loc200, #loc198])
#loc593 = loc(fused[#loc201, #loc202])
#loc594 = loc(fused[#loc204, #loc202])
#loc595 = loc(fused[#loc205, #loc206])
#loc596 = loc(fused[#loc207, #loc208])
#loc597 = loc(fused[#loc209, #loc210])
#loc598 = loc(fused[#loc211, #loc212])
#loc599 = loc(fused[#loc213, #loc214])
#loc600 = loc(fused[#loc215, #loc216])
#loc601 = loc(fused[#loc217, #loc218])
#loc602 = loc(fused[#loc223, #loc224])
#loc603 = loc(fused[#loc225, #loc226])
#loc604 = loc(fused[#loc227, #loc228])
#loc605 = loc(fused[#loc229, #loc226])
#loc606 = loc(fused[#loc231, #loc232])
#loc607 = loc(fused[#loc234, #loc235])
#loc608 = loc(fused[#loc236, #loc237])
#loc609 = loc(fused[#loc239, #loc238])
#loc610 = loc(fused[#loc241, #loc240])
#loc611 = loc(fused[#loc244, #loc245])
#loc612 = loc(fused[#loc246, #loc247])
#loc613 = loc(fused[#loc249, #loc250])
#loc614 = loc(fused[#loc251, #loc252])
#loc615 = loc(fused[#loc253, #loc254])
#loc616 = loc(fused[#loc255, #loc247])
#loc617 = loc(fused[#loc257, #loc258])
#loc618 = loc(fused[#loc261, #loc262])
#loc619 = loc(fused[#loc263, #loc258])
#loc620 = loc(fused[#loc269, #loc270])
#loc621 = loc(fused[#loc271, #loc272])
#loc622 = loc(fused[#loc273, #loc274])
#loc623 = loc(fused[#loc275, #loc272])
#loc624 = loc(fused[#loc279, #loc280])
#loc625 = loc(fused[#loc283, #loc284])
#loc626 = loc(fused[#loc285, #loc286])
#loc627 = loc(fused[#loc287, #loc288])
#loc628 = loc(fused[#loc290, #loc291])
#loc629 = loc(fused[#loc292, #loc286])
#loc630 = loc(fused[#loc296, #loc294])
#loc631 = loc(fused[#loc299, #loc300])
#loc632 = loc(fused[#loc302, #loc303])
#loc633 = loc(fused[#loc304, #loc305])
#loc634 = loc(fused[#loc306, #loc303])
#loc635 = loc(fused[#loc309, #loc310])
#loc636 = loc(fused[#loc311, #loc312])
#loc637 = loc(fused[#loc313, #loc310])
#loc638 = loc(fused[#loc316, #loc317])
#loc639 = loc(fused[#loc319, #loc320, #loc321, #loc317])
#loc640 = loc(fused[#loc323, #loc324])
#loc641 = loc(fused[#loc325, #loc326])
#loc642 = loc(fused[#loc327, #loc328, #loc329, #loc324])
#loc643 = loc(fused[#loc330, #loc331])
#loc644 = loc(fused[#loc334, #loc335])
#loc645 = loc(fused[#loc336, #loc337])
#loc646 = loc(fused[#loc340, #loc338])
#loc647 = loc(fused[#loc341, #loc342])
#loc648 = loc(fused[#loc344, #loc342])
#loc649 = loc(fused[#loc345, #loc346])
#loc650 = loc(fused[#loc347, #loc348])
#loc651 = loc(fused[#loc349, #loc350])
#loc652 = loc(fused[#loc351, #loc352])
#loc653 = loc(fused[#loc353, #loc354])
#loc654 = loc(fused[#loc355, #loc356])
#loc655 = loc(fused[#loc357, #loc358])
#loc656 = loc(fused[#loc363, #loc364])
#loc657 = loc(fused[#loc365, #loc366])
#loc658 = loc(fused[#loc367, #loc368])
#loc659 = loc(fused[#loc369, #loc366])
#loc660 = loc(fused[#loc371, #loc372])
#loc661 = loc(fused[#loc374, #loc375])
#loc662 = loc(fused[#loc376, #loc377])
#loc663 = loc(fused[#loc379, #loc378])
#loc664 = loc(fused[#loc381, #loc380])
#loc665 = loc(fused[#loc384, #loc385])
#loc666 = loc(fused[#loc386, #loc387])
#loc667 = loc(fused[#loc389, #loc390])
#loc668 = loc(fused[#loc391, #loc392])
#loc669 = loc(fused[#loc393, #loc394])
#loc670 = loc(fused[#loc395, #loc387])
#loc671 = loc(fused[#loc397, #loc398])
#loc672 = loc(fused[#loc401, #loc402])
#loc673 = loc(fused[#loc403, #loc398])
#loc674 = loc(fused[#loc409, #loc410])
#loc675 = loc(fused[#loc411, #loc412])
#loc676 = loc(fused[#loc413, #loc414])
#loc677 = loc(fused[#loc415, #loc412])
#loc678 = loc(fused[#loc419, #loc420])
#loc679 = loc(fused[#loc423, #loc424])
#loc680 = loc(fused[#loc425, #loc426])
#loc681 = loc(fused[#loc427, #loc428])
#loc682 = loc(fused[#loc430, #loc431])
#loc683 = loc(fused[#loc432, #loc426])
#loc684 = loc(fused[#loc436, #loc434])
#loc685 = loc(fused[#loc439, #loc440])
#loc686 = loc(fused[#loc442, #loc443])
#loc687 = loc(fused[#loc444, #loc445])
#loc688 = loc(fused[#loc446, #loc443])
#loc689 = loc(fused[#loc449, #loc450])
#loc690 = loc(fused[#loc451, #loc452])
#loc691 = loc(fused[#loc453, #loc450])
#loc692 = loc(fused[#loc456, #loc457])
#loc693 = loc(fused[#loc459, #loc457])
#loc694 = loc(fused[#loc460, #loc461])
#loc695 = loc(fused[#loc462, #loc463])
#loc696 = loc(fused[#loc464, #loc465, #loc466, #loc461])
#loc697 = loc(fused[#loc467, #loc468])
#loc698 = loc(fused[#loc472, #loc473])
#loc699 = loc(fused[#loc474, #loc475])
#loc700 = loc(fused[#loc478, #loc476])
#loc701 = loc(fused[#loc479, #loc480])
#loc702 = loc(fused[#loc482, #loc483, #loc484, #loc480])
#loc703 = loc(fused[#loc488, #loc487])
#loc704 = loc(fused[#loc489, #loc490])
#loc705 = loc(fused[#loc492, #loc490])
#loc706 = loc(fused[#loc493, #loc494])
#loc707 = loc(fused[#loc496, #loc497])
#loc708 = loc(fused[#loc498, #loc499])
#loc709 = loc(fused[#loc502, #loc500])
#loc710 = loc(fused[#loc503, #loc504])
#loc711 = loc(fused[#loc506, #loc504])
#loc712 = loc(fused[#loc508, #loc507])
#loc713 = loc(fused[#loc509, #loc510])
#loc714 = loc(fused[#loc512, #loc510])
#loc715 = loc(fused[#loc513, #loc514])
