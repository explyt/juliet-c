!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":129:10)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":129:14)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":129:20)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":129:32)
#loc232 = loc(fused[#loc78, #loc79])
#loc233 = loc(fused[#loc80, #loc81])
!ty__charVoid = !cir.struct<struct "_charVoid" {!cir.array<!s8i x 16>, !cir.ptr<!void>, !cir.ptr<!void>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc202)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc203)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"0123456789abcdef0123456789abcde\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc204)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc13)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc208)
            %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc19)
            %3 = cir.const #cir.int<32> : !u64i loc(#loc209)
            %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc19)
            %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc210)
            cir.store %5, %1 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc208)
            cir.scope {
              %42 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc24)
              %43 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc25)
              %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc25)
              %45 = cir.cmp(eq, %42, %44) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc212)
              cir.if %45 {
                %46 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc27)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc28)
                %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc29)
                cir.call @exit(%48) : (!s32i) -> () extra(#fn_attr) loc(#loc27)
              } loc(#loc213)
            } loc(#loc211)
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc5)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc5)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc5)
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc30)
            %10 = cir.get_member %9[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            cir.store %8, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc214)
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc32)
            %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %13 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc33)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc215)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc34)
            %15 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc35)
            %16 = cir.get_member %15[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc216)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc216)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc38)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc38)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc38)
            %22 = cir.const #cir.int<32> : !u64i loc(#loc217)
            cir.libc.memmove %22 bytes from %21 to %18 : !cir.ptr<!void>, !u64i loc(#loc218)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc43)
            %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc43)
            %25 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc44)
            %26 = cir.get_member %25[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %27 = cir.const #cir.int<16> : !u64i loc(#loc219)
            %28 = cir.const #cir.int<1> : !u64i loc(#loc220)
            %29 = cir.binop(div, %27, %28) : !u64i loc(#loc221)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc49)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc49)
            %32 = cir.binop(sub, %29, %31) : !u64i loc(#loc222)
            %33 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc51)
            cir.store %24, %34 : !s8i, !cir.ptr<!s8i> loc(#loc223)
            %35 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc52)
            %36 = cir.get_member %35[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc224)
            cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc54)
            %38 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc55)
            %39 = cir.get_member %38[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %40 = cir.load %39 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc56)
            %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc225)
            cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc57)
          } loc(#loc207)
          cir.break loc(#loc58)
        } loc(#loc14)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc8)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc8)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc60)
          cir.break loc(#loc61)
        } loc(#loc59)
        cir.yield loc(#loc11)
      } loc(#loc11)
    } loc(#loc206)
    cir.return loc(#loc10)
  } loc(#loc205)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc227)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc64)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc228)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc66)
    cir.return loc(#loc63)
  } loc(#loc226)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc229)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc230)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc74)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc75)
  cir.func @main(%arg0: !s32i loc(fused[#loc78, #loc79]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc80, #loc81])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc232)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc233)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc77)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc82)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc83)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc84)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc84)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc85)
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc72)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc234)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_good() : () -> () loc(#loc87)
    %9 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc73)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %11 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc74)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc74)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc90)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc235)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15_bad() : () -> () loc(#loc91)
    %14 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc75)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc93)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc94)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc236)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc236)
    cir.return %17 : !s32i loc(#loc236)
  } loc(#loc231)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc100)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc102)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc103)
          cir.break loc(#loc104)
        } loc(#loc101)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc240)
            %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc110)
            %3 = cir.const #cir.int<32> : !u64i loc(#loc241)
            %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc110)
            %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc242)
            cir.store %5, %1 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc240)
            cir.scope {
              %42 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc115)
              %43 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc116)
              %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc116)
              %45 = cir.cmp(eq, %42, %44) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc244)
              cir.if %45 {
                %46 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc118)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc119)
                %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc120)
                cir.call @exit(%48) : (!s32i) -> () extra(#fn_attr) loc(#loc118)
              } loc(#loc245)
            } loc(#loc243)
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc121)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc121)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc121)
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc122)
            %10 = cir.get_member %9[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            cir.store %8, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc246)
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc123)
            %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %13 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc124)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc247)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc125)
            %15 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc126)
            %16 = cir.get_member %15[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc248)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc248)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc128)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc128)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc128)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc249)
            cir.libc.memmove %22 bytes from %21 to %18 : !cir.ptr<!void>, !u64i loc(#loc250)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc133)
            %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc133)
            %25 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc134)
            %26 = cir.get_member %25[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %27 = cir.const #cir.int<16> : !u64i loc(#loc251)
            %28 = cir.const #cir.int<1> : !u64i loc(#loc252)
            %29 = cir.binop(div, %27, %28) : !u64i loc(#loc253)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc139)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc139)
            %32 = cir.binop(sub, %29, %31) : !u64i loc(#loc254)
            %33 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc134)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc141)
            cir.store %24, %34 : !s8i, !cir.ptr<!s8i> loc(#loc255)
            %35 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc142)
            %36 = cir.get_member %35[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc256)
            cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc144)
            %38 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc145)
            %39 = cir.get_member %38[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %40 = cir.load %39 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc146)
            %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc257)
            cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc147)
          } loc(#loc239)
          cir.break loc(#loc148)
        } loc(#loc105)
        cir.yield loc(#loc98)
      } loc(#loc98)
    } loc(#loc238)
    cir.return loc(#loc97)
  } loc(#loc237)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc153)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>>, ["structCharVoid", init] {alignment = 8 : i64} loc(#loc261)
            %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc159)
            %3 = cir.const #cir.int<32> : !u64i loc(#loc262)
            %4 = cir.call @malloc(%3) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc159)
            %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc263)
            cir.store %5, %1 : !cir.ptr<!ty__charVoid>, !cir.ptr<!cir.ptr<!ty__charVoid>> loc(#loc261)
            cir.scope {
              %42 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc164)
              %43 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc165)
              %44 = cir.cast(bitcast, %43 : !cir.ptr<!void>), !cir.ptr<!ty__charVoid> loc(#loc165)
              %45 = cir.cmp(eq, %42, %44) : !cir.ptr<!ty__charVoid>, !cir.bool loc(#loc265)
              cir.if %45 {
                %46 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc167)
                %47 = cir.const #cir.int<1> : !s32i loc(#loc168)
                %48 = cir.unary(minus, %47) : !s32i, !s32i loc(#loc169)
                cir.call @exit(%48) : (!s32i) -> () extra(#fn_attr) loc(#loc167)
              } loc(#loc266)
            } loc(#loc264)
            %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc170)
            %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc170)
            %8 = cir.cast(bitcast, %7 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc170)
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc171)
            %10 = cir.get_member %9[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            cir.store %8, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc267)
            %11 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc172)
            %12 = cir.get_member %11[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %13 = cir.load %12 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc173)
            %14 = cir.cast(bitcast, %13 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc268)
            cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc174)
            %15 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc175)
            %16 = cir.get_member %15[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc269)
            %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc269)
            %19 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc177)
            %20 = cir.cast(array_to_ptrdecay, %19 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc177)
            %21 = cir.cast(bitcast, %20 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc177)
            %22 = cir.const #cir.int<16> : !u64i loc(#loc270)
            cir.libc.memmove %22 bytes from %21 to %18 : !cir.ptr<!void>, !u64i loc(#loc271)
            %23 = cir.const #cir.int<0> : !s32i loc(#loc182)
            %24 = cir.cast(integral, %23 : !s32i), !s8i loc(#loc182)
            %25 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc183)
            %26 = cir.get_member %25[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %27 = cir.const #cir.int<16> : !u64i loc(#loc272)
            %28 = cir.const #cir.int<1> : !u64i loc(#loc273)
            %29 = cir.binop(div, %27, %28) : !u64i loc(#loc274)
            %30 = cir.const #cir.int<1> : !s32i loc(#loc188)
            %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc188)
            %32 = cir.binop(sub, %29, %31) : !u64i loc(#loc275)
            %33 = cir.cast(array_to_ptrdecay, %26 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc183)
            %34 = cir.ptr_stride(%33 : !cir.ptr<!s8i>, %32 : !u64i), !cir.ptr<!s8i> loc(#loc190)
            cir.store %24, %34 : !s8i, !cir.ptr<!s8i> loc(#loc276)
            %35 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc191)
            %36 = cir.get_member %35[0] {name = "charFirst"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.array<!s8i x 16>> loc(#loc36)
            %37 = cir.cast(array_to_ptrdecay, %36 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc277)
            cir.call @printLine(%37) : (!cir.ptr<!s8i>) -> () loc(#loc193)
            %38 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__charVoid>>, !cir.ptr<!ty__charVoid> loc(#loc194)
            %39 = cir.get_member %38[1] {name = "voidSecond"} : !cir.ptr<!ty__charVoid> -> !cir.ptr<!cir.ptr<!void>> loc(#loc31)
            %40 = cir.load %39 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc195)
            %41 = cir.cast(bitcast, %40 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc278)
            cir.call @printLine(%41) : (!cir.ptr<!s8i>) -> () loc(#loc196)
          } loc(#loc260)
          cir.break loc(#loc197)
        } loc(#loc154)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc199)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc199)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc200)
          cir.break loc(#loc201)
        } loc(#loc198)
        cir.yield loc(#loc151)
      } loc(#loc151)
    } loc(#loc259)
    cir.return loc(#loc150)
  } loc(#loc258)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s01/CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":41:46)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":53:19)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":33:1)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":56:1)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":35:5)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":55:5)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":35:12)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":37:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":38:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":49:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":39:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":39:72)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":39:49)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":39:56)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":39:71)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:9)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:47)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:31)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:37)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:38)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:44)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":40:43)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":41:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":27:12)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":43:27)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":43:43)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":43:9)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:17)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":26:10)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:33)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:44)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:53)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:75)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:9)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":45:76)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:89)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:9)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:36)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:68)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:70)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:81)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:84)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:35)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":46:25)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":47:27)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":47:43)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":47:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":48:27)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":48:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":48:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":50:5)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":51:5)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":53:9)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":54:9)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":114:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":118:1)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":116:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":116:11)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":117:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":117:11)
#loc68 = loc("/usr/include/stdlib.h":575:1)
#loc69 = loc("/usr/include/stdlib.h":575:41)
#loc70 = loc("/usr/include/time.h":76:1)
#loc71 = loc("/usr/include/time.h":76:38)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":134:15)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":136:15)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":139:15)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":141:15)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":129:1)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":144:1)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":130:1)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":132:27)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":132:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":132:5)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":134:5)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":135:5)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":135:74)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":136:5)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":139:5)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":140:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":140:73)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":141:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":143:12)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":143:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":63:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":86:1)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":65:5)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":85:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":65:12)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":67:5)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":69:19)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":69:9)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":70:9)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":71:5)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":72:5)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":83:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":73:9)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":73:72)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":73:49)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":73:56)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":73:71)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:47)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:13)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:31)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:37)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:38)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:44)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":74:43)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":75:46)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":75:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":77:27)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":77:43)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":77:9)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:17)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:33)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:44)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:53)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:85)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:9)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":79:86)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:89)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:9)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:36)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:68)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:70)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:81)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:84)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:35)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":80:25)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":81:27)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":81:43)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":81:9)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":82:27)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":82:43)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":82:9)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":84:5)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":89:1)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":112:1)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":91:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":111:5)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":91:12)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":93:5)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":94:5)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":105:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":95:9)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":95:72)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":95:49)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":95:56)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":95:71)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:9)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:47)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:13)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:31)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:37)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:38)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:44)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":96:43)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":97:46)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":97:9)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":99:27)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":99:43)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":99:9)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:17)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:33)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:44)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:53)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:85)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:9)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":101:86)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:89)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:9)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:36)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:68)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:70)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:81)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:84)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:35)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":102:25)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":103:27)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":103:43)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":103:9)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":104:27)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":104:43)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":104:9)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":106:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":107:5)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":109:19)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":109:9)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__char_type_overrun_memmove_15.c":110:9)
#loc202 = loc(fused[#loc1, #loc2])
#loc203 = loc(fused[#loc3, #loc4])
#loc204 = loc(fused[#loc6, #loc7])
#loc205 = loc(fused[#loc9, #loc10])
#loc206 = loc(fused[#loc11, #loc12])
#loc207 = loc(fused[#loc15, #loc16])
#loc208 = loc(fused[#loc17, #loc18])
#loc209 = loc(fused[#loc20, #loc21])
#loc210 = loc(fused[#loc19, #loc18])
#loc211 = loc(fused[#loc22, #loc23])
#loc212 = loc(fused[#loc24, #loc25])
#loc213 = loc(fused[#loc26, #loc23])
#loc214 = loc(fused[#loc30, #loc5])
#loc215 = loc(fused[#loc32, #loc33])
#loc216 = loc(fused[#loc35, #loc37])
#loc217 = loc(fused[#loc39, #loc40])
#loc218 = loc(fused[#loc41, #loc42])
#loc219 = loc(fused[#loc45, #loc46])
#loc220 = loc(fused[#loc47, #loc48])
#loc221 = loc(fused[#loc45, #loc48])
#loc222 = loc(fused[#loc50, #loc49])
#loc223 = loc(fused[#loc44, #loc43])
#loc224 = loc(fused[#loc52, #loc53])
#loc225 = loc(fused[#loc55, #loc56])
#loc226 = loc(fused[#loc62, #loc63])
#loc227 = loc(fused[#loc64, #loc65])
#loc228 = loc(fused[#loc66, #loc67])
#loc229 = loc(fused[#loc68, #loc69])
#loc230 = loc(fused[#loc70, #loc71])
#loc231 = loc(fused[#loc76, #loc77])
#loc234 = loc(fused[#loc87, #loc88])
#loc235 = loc(fused[#loc91, #loc92])
#loc236 = loc(fused[#loc95, #loc94])
#loc237 = loc(fused[#loc96, #loc97])
#loc238 = loc(fused[#loc98, #loc99])
#loc239 = loc(fused[#loc106, #loc107])
#loc240 = loc(fused[#loc108, #loc109])
#loc241 = loc(fused[#loc111, #loc112])
#loc242 = loc(fused[#loc110, #loc109])
#loc243 = loc(fused[#loc113, #loc114])
#loc244 = loc(fused[#loc115, #loc116])
#loc245 = loc(fused[#loc117, #loc114])
#loc246 = loc(fused[#loc122, #loc121])
#loc247 = loc(fused[#loc123, #loc124])
#loc248 = loc(fused[#loc126, #loc127])
#loc249 = loc(fused[#loc129, #loc130])
#loc250 = loc(fused[#loc131, #loc132])
#loc251 = loc(fused[#loc135, #loc136])
#loc252 = loc(fused[#loc137, #loc138])
#loc253 = loc(fused[#loc135, #loc138])
#loc254 = loc(fused[#loc140, #loc139])
#loc255 = loc(fused[#loc134, #loc133])
#loc256 = loc(fused[#loc142, #loc143])
#loc257 = loc(fused[#loc145, #loc146])
#loc258 = loc(fused[#loc149, #loc150])
#loc259 = loc(fused[#loc151, #loc152])
#loc260 = loc(fused[#loc155, #loc156])
#loc261 = loc(fused[#loc157, #loc158])
#loc262 = loc(fused[#loc160, #loc161])
#loc263 = loc(fused[#loc159, #loc158])
#loc264 = loc(fused[#loc162, #loc163])
#loc265 = loc(fused[#loc164, #loc165])
#loc266 = loc(fused[#loc166, #loc163])
#loc267 = loc(fused[#loc171, #loc170])
#loc268 = loc(fused[#loc172, #loc173])
#loc269 = loc(fused[#loc175, #loc176])
#loc270 = loc(fused[#loc178, #loc179])
#loc271 = loc(fused[#loc180, #loc181])
#loc272 = loc(fused[#loc184, #loc185])
#loc273 = loc(fused[#loc186, #loc187])
#loc274 = loc(fused[#loc184, #loc187])
#loc275 = loc(fused[#loc189, #loc188])
#loc276 = loc(fused[#loc183, #loc182])
#loc277 = loc(fused[#loc191, #loc192])
#loc278 = loc(fused[#loc194, #loc195])
