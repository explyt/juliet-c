!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:21)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:25)
#loc55 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":124:10)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":124:14)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":124:20)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":124:32)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:25)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:29)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:25)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:29)
#true = #cir.bool<true> : !cir.bool
#loc144 = loc(fused[#loc8, #loc9])
#loc161 = loc(fused[#loc55, #loc56])
#loc162 = loc(fused[#loc57, #loc58])
#loc167 = loc(fused[#loc76, #loc77])
#loc179 = loc(fused[#loc111, #loc112])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc141)
  cir.func private @printIntLine(!s32i) loc(#loc142)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc5)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc8, #loc9])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc144)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc10)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc146)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc146)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc146)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc18)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc148)
        cir.if %5 {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc22)
          %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc23)
          %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc23)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc24)
        } else {
          %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc5)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc25)
        } loc(#loc149)
      } loc(#loc147)
    } loc(#loc145)
    cir.return loc(#loc7)
  } loc(#loc143)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc151)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc30)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc31)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc33)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc33)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc33)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc33)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc33)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc33)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc33)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc33)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc33)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc33)
      cir.yield %21 : !u32i loc(#loc33)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc33)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc33)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc33)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc33)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc33)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc33)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc33)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc33)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc33)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc33)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc33)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc33)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc33)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc33)
      cir.yield %25 : !u32i loc(#loc33)
    }) : (!cir.bool) -> !u32i loc(#loc33)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc33)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc153)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc35)
    cir.call @badSink(%9) : (!s32i) -> () loc(#loc36)
    cir.return loc(#loc27)
  } loc(#loc150)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc155)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc39)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc156)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    cir.return loc(#loc38)
  } loc(#loc154)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc157)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc158)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc159)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc161)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc162)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc163)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_41_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_41_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc165)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.return %17 : !s32i loc(#loc165)
  } loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc73)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc76, #loc77])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc167)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc169)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc169)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc169)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc85)
        %4 = cir.const #cir.int<0> : !s32i loc(#loc86)
        %5 = cir.cmp(ge, %3, %4) : !s32i, !cir.bool loc(#loc171)
        %6 = cir.ternary(%5, true {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          %8 = cir.const #cir.int<10> : !s32i loc(#loc89)
          %9 = cir.cmp(lt, %7, %8) : !s32i, !cir.bool loc(#loc172)
          %10 = cir.ternary(%9, true {
            %11 = cir.const #true loc(#loc87)
            cir.yield %11 : !cir.bool loc(#loc87)
          }, false {
            %11 = cir.const #false loc(#loc87)
            cir.yield %11 : !cir.bool loc(#loc87)
          }) : (!cir.bool) -> !cir.bool loc(#loc87)
          cir.yield %10 : !cir.bool loc(#loc87)
        }, false {
          %7 = cir.const #false loc(#loc87)
          cir.yield %7 : !cir.bool loc(#loc87)
        }) : (!cir.bool) -> !cir.bool loc(#loc87)
        cir.if %6 {
          %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
          %8 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc95)
          %9 = cir.ptr_stride(%8 : !cir.ptr<!s32i>, %7 : !s32i), !cir.ptr<!s32i> loc(#loc95)
          %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc96)
        } else {
          %7 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc73)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc73)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc97)
        } loc(#loc173)
      } loc(#loc170)
    } loc(#loc168)
    cir.return loc(#loc75)
  } loc(#loc166)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc102)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc103)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc176)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc105)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc105)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc105)
    %7 = cir.ternary(%6, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc105)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc105)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc105)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc105)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc105)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc105)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc105)
      cir.yield %21 : !u32i loc(#loc105)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc105)
      %12 = cir.const #cir.int<30> : !s32i loc(#loc105)
      %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc105)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc105)
      %16 = cir.const #cir.int<15> : !s32i loc(#loc105)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc105)
      %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc105)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc105)
      %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc105)
      %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc105)
      %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc105)
      %23 = cir.const #cir.int<1> : !s32i loc(#loc105)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc105)
      %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc105)
      cir.yield %25 : !u32i loc(#loc105)
    }) : (!cir.bool) -> !u32i loc(#loc105)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc105)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc177)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.call @goodB2GSink(%9) : (!s32i) -> () loc(#loc108)
    cir.return loc(#loc99)
  } loc(#loc174)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc111, #loc112])) extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc179)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.scope {
      %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc181)
      %2 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc181)
      cir.store %2, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc181)
      cir.scope {
        %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc120)
        %4 = cir.const #cir.int<10> : !s32i loc(#loc121)
        %5 = cir.cmp(lt, %3, %4) : !s32i, !cir.bool loc(#loc183)
        cir.if %5 {
          %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc125)
          %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc126)
          %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc126)
          %9 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc126)
          cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc127)
        } else {
          %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc128)
          %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc128)
          cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc129)
        } loc(#loc184)
      } loc(#loc182)
    } loc(#loc180)
    cir.return loc(#loc110)
  } loc(#loc178)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc186)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc134)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc135)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc137)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc188)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc139)
    cir.call @goodG2BSink(%4) : (!s32i) -> () loc(#loc140)
    cir.return loc(#loc131)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_41.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":34:23)
#loc6 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":22:1)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":37:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":23:1)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":24:5)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":36:5)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":25:9)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":25:30)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:9)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":35:9)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:13)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":28:20)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":29:9)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":31:9)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":33:9)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:33)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:26)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":30:13)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":34:13)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":39:1)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":47:1)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":41:5)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":41:9)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:13)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:12)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":43:5)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":45:12)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":45:5)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":46:13)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":46:5)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":109:1)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":113:1)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":111:5)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":111:13)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":112:5)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":112:13)
#loc43 = loc("/usr/include/stdlib.h":575:1)
#loc44 = loc("/usr/include/stdlib.h":575:41)
#loc45 = loc("/usr/include/time.h":76:1)
#loc46 = loc("/usr/include/time.h":76:38)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":129:15)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":131:15)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":134:15)
#loc52 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":136:15)
#loc53 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":124:1)
#loc54 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":139:1)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":125:1)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":127:27)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":127:22)
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":127:5)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":129:5)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":130:5)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":130:50)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":131:5)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":134:5)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":135:5)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":135:49)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":136:5)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":138:12)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":138:5)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":94:23)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":83:1)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":97:1)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":84:1)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":85:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":96:5)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":86:9)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":86:30)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:9)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":95:9)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:13)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:21)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:23)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:26)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:34)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":88:36)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":89:9)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":91:9)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":93:9)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:33)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:26)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":90:13)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":94:13)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":99:1)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":107:1)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":101:5)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":101:9)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:13)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:12)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":103:5)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":105:12)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":105:5)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":106:17)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":106:5)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":54:1)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":69:1)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":55:1)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":56:5)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":68:5)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":57:9)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":57:30)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:9)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":67:9)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:13)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":60:20)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":61:9)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":63:9)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":65:9)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:33)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:26)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":62:13)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":66:23)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":66:13)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":71:1)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":80:1)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":73:5)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":73:9)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:13)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:12)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":75:5)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":78:12)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":78:5)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":79:17)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_41.c":79:5)
#loc141 = loc(fused[#loc1, #loc2])
#loc142 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc6, #loc7])
#loc145 = loc(fused[#loc11, #loc12])
#loc146 = loc(fused[#loc13, #loc14])
#loc147 = loc(fused[#loc15, #loc16])
#loc148 = loc(fused[#loc17, #loc18])
#loc149 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc150 = loc(fused[#loc26, #loc27])
#loc151 = loc(fused[#loc28, #loc29])
#loc152 = loc(fused[#loc32, #loc30])
#loc153 = loc(fused[#loc34, #loc33])
#loc154 = loc(fused[#loc37, #loc38])
#loc155 = loc(fused[#loc39, #loc40])
#loc156 = loc(fused[#loc41, #loc42])
#loc157 = loc(fused[#loc43, #loc44])
#loc158 = loc(fused[#loc45, #loc46])
#loc159 = loc(fused[#loc47, #loc48])
#loc160 = loc(fused[#loc53, #loc54])
#loc163 = loc(fused[#loc64, #loc65])
#loc164 = loc(fused[#loc68, #loc69])
#loc165 = loc(fused[#loc72, #loc71])
#loc166 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc79, #loc80])
#loc169 = loc(fused[#loc81, #loc82])
#loc170 = loc(fused[#loc83, #loc84])
#loc171 = loc(fused[#loc85, #loc86])
#loc172 = loc(fused[#loc88, #loc90])
#loc173 = loc(fused[#loc91, #loc92, #loc93, #loc84])
#loc174 = loc(fused[#loc98, #loc99])
#loc175 = loc(fused[#loc100, #loc101])
#loc176 = loc(fused[#loc104, #loc102])
#loc177 = loc(fused[#loc106, #loc105])
#loc178 = loc(fused[#loc109, #loc110])
#loc180 = loc(fused[#loc114, #loc115])
#loc181 = loc(fused[#loc116, #loc117])
#loc182 = loc(fused[#loc118, #loc119])
#loc183 = loc(fused[#loc120, #loc121])
#loc184 = loc(fused[#loc122, #loc123, #loc124, #loc119])
#loc185 = loc(fused[#loc130, #loc131])
#loc186 = loc(fused[#loc132, #loc133])
#loc187 = loc(fused[#loc136, #loc134])
#loc188 = loc(fused[#loc138, #loc137])
