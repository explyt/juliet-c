!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc84)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc85)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc5)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc6)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc87)
    cir.br ^bb1 loc(#loc88)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc13)
    cir.br ^bb2 loc(#loc11)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb13 [
      6: ^bb4
    ] loc(#loc11)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc14)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc89)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc17)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc18)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc90)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc87)
    cir.br ^bb6 loc(#loc91)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    cir.br ^bb7 loc(#loc19)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %5 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc19)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc22)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc23)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc20)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc16)
  ^bb12:  // pred: ^bb11
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc5)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc5)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc24)
    cir.br ^bb14 loc(#loc25)
  ^bb13:  // pred: ^bb2
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc6)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc6)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc26)
    cir.br ^bb14 loc(#loc27)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc12)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc8)
  } loc(#loc86)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_case_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc93)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc94)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc32)
    cir.return loc(#loc29)
  } loc(#loc92)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the case statement\00" : !cir.array<!s8i x 26>> : !cir.array<!s8i x 26> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc35)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc96)
    cir.br ^bb1 loc(#loc97)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<5> : !s32i loc(#loc42)
    cir.br ^bb2 loc(#loc40)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc40)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc43)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb14 loc(#loc46)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc98)
  ^bb6:  // pred: ^bb5
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc49)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc50)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc99)
    cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    cir.br ^bb7 loc(#loc100)
  ^bb7:  // pred: ^bb6
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.br ^bb8 loc(#loc51)
  ^bb8:  // pred: ^bb7
    cir.switch.flat %7 : !s32i, ^bb11 [
      0: ^bb10
    ] loc(#loc51)
  ^bb9:  // no predecessors
    cir.br ^bb10 loc(#loc54)
  ^bb10:  // 2 preds: ^bb8, ^bb9
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc34)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    cir.br ^bb11 loc(#loc56)
  ^bb11:  // 2 preds: ^bb8, ^bb10
    cir.br ^bb12 loc(#loc52)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc48)
  ^bb13:  // pred: ^bb12
    %10 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc35)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    cir.br ^bb14 loc(#loc58)
  ^bb14:  // 2 preds: ^bb4, ^bb13
    cir.br ^bb15 loc(#loc41)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc37)
  } loc(#loc95)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x", init] {alignment = 4 : i64} loc(#loc102)
    cir.br ^bb1 loc(#loc103)
  ^bb1:  // pred: ^bb0
    %1 = cir.const #cir.int<6> : !s32i loc(#loc65)
    cir.br ^bb2 loc(#loc63)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %1 : !s32i, ^bb13 [
      6: ^bb4
    ] loc(#loc63)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc66)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc104)
  ^bb5:  // pred: ^bb4
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc69)
    %3 = cir.const #cir.int<3> : !s32i loc(#loc70)
    %4 = cir.binop(rem, %2, %3) : !s32i loc(#loc105)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    cir.br ^bb6 loc(#loc106)
  ^bb6:  // pred: ^bb5
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc73)
    cir.br ^bb7 loc(#loc71)
  ^bb7:  // pred: ^bb6
    cir.switch.flat %5 : !s32i, ^bb10 [
      0: ^bb9
    ] loc(#loc71)
  ^bb8:  // no predecessors
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 26>> loc(#loc75)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 26>>), !cir.ptr<!s8i> loc(#loc75)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    cir.br ^bb10 loc(#loc77)
  ^bb10:  // 2 preds: ^bb7, ^bb9
    cir.br ^bb11 loc(#loc72)
  ^bb11:  // pred: ^bb10
    cir.br ^bb12 loc(#loc68)
  ^bb12:  // pred: ^bb11
    %8 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc78)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc78)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc79)
    cir.br ^bb14 loc(#loc80)
  ^bb13:  // pred: ^bb2
    %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc81)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc81)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc82)
    cir.br ^bb14 loc(#loc83)
  ^bb14:  // 2 preds: ^bb12, ^bb13
    cir.br ^bb15 loc(#loc64)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc60)
  } loc(#loc101)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_case_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":34:15)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":38:19)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":20:1)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":41:1)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:9)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:28)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":22:5)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":40:5)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":22:12)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":24:5)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":26:5)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":33:5)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:18)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":27:27)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":28:9)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":32:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":28:17)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":30:9)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":31:13)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":34:5)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":35:5)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":38:9)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":39:9)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":97:1)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":101:1)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":99:5)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":99:11)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":100:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":100:11)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":63:23)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":67:15)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":48:1)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":70:1)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:9)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:28)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":50:5)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":69:5)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":50:12)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":52:5)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":54:19)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":54:9)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":55:9)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":58:5)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":66:5)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:18)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":59:27)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":60:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":65:9)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":60:17)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":62:9)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":63:13)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":64:13)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":67:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":68:5)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":73:1)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":95:1)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:9)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:28)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":75:5)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":94:5)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":75:12)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":77:5)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":79:5)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":87:5)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:18)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":80:27)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":81:9)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":86:9)
#loc73 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":81:17)
#loc74 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":83:9)
#loc75 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":84:23)
#loc76 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":84:13)
#loc77 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":85:13)
#loc78 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":88:15)
#loc79 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":88:5)
#loc80 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":89:5)
#loc81 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":92:19)
#loc82 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":92:9)
#loc83 = loc("CWE398_Poor_Code_Quality__empty_case_15.c":93:9)
#loc84 = loc(fused[#loc1, #loc2])
#loc85 = loc(fused[#loc3, #loc4])
#loc86 = loc(fused[#loc7, #loc8])
#loc87 = loc(fused[#loc9, #loc10])
#loc88 = loc(fused[#loc11, #loc12])
#loc89 = loc(fused[#loc15, #loc16])
#loc90 = loc(fused[#loc17, #loc18])
#loc91 = loc(fused[#loc19, #loc20])
#loc92 = loc(fused[#loc28, #loc29])
#loc93 = loc(fused[#loc30, #loc31])
#loc94 = loc(fused[#loc32, #loc33])
#loc95 = loc(fused[#loc36, #loc37])
#loc96 = loc(fused[#loc38, #loc39])
#loc97 = loc(fused[#loc40, #loc41])
#loc98 = loc(fused[#loc47, #loc48])
#loc99 = loc(fused[#loc49, #loc50])
#loc100 = loc(fused[#loc51, #loc52])
#loc101 = loc(fused[#loc59, #loc60])
#loc102 = loc(fused[#loc61, #loc62])
#loc103 = loc(fused[#loc63, #loc64])
#loc104 = loc(fused[#loc67, #loc68])
#loc105 = loc(fused[#loc69, #loc70])
#loc106 = loc(fused[#loc71, #loc72])
