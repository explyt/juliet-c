!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc7 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":21:64)
#loc8 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":21:70)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":50:68)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":50:74)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":91:10)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":91:14)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":91:20)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":91:32)
#loc154 = loc(fused[#loc7, #loc8])
#loc175 = loc(fused[#loc64, #loc65])
#loc191 = loc(fused[#loc111, #loc112])
#loc192 = loc(fused[#loc113, #loc114])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc151)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc152)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc7, #loc8])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc155)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc156)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc154)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc13)
    cir.br ^bb1 loc(#loc157)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc155)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc155)
    cir.br ^bb2 loc(#loc158)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc18)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc18)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc159)
    cir.br ^bb3 loc(#loc158)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc20)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc21)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc21)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc160)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc22)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc161)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc24)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc25)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc25)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc28)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc162)
    cir.br ^bb6 loc(#loc17)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc17)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc30)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc31)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc163)
    cir.br ^bb3 loc(#loc158)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc17)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc32)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc33)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc34)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc32)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc35)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc36)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc37)
    cir.br ^bb10 loc(#loc15)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc6)
  } loc(#loc153)
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc165)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc167)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc46)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc168)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc48)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc49)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc49)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc48)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc169)
    cir.store %6, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    cir.br ^bb1 loc(#loc171)
  ^bb1:  // pred: ^bb0
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc54)
    %8 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc55)
    %10 = cir.cmp(eq, %7, %9) : !cir.ptr<!s32i>, !cir.bool loc(#loc172)
    cir.brcond %10 ^bb2, ^bb3 loc(#loc173)
  ^bb2:  // pred: ^bb1
    %11 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc57)
    %12 = cir.const #cir.int<1> : !s32i loc(#loc58)
    %13 = cir.unary(minus, %12) : !s32i, !s32i loc(#loc59)
    cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc57)
    cir.br ^bb3 loc(#loc53)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc53)
  ^bb4:  // pred: ^bb3
    %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc60)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_badSink(%14) : (!cir.ptr<!s32i>) -> () loc(#loc61)
    cir.return loc(#loc43)
  } loc(#loc166)
  cir.func @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_goodG2BSink(%arg0: !cir.ptr<!s32i> loc(fused[#loc64, #loc65])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc176)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc177)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc175)
    cir.store %arg0, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc70)
    cir.br ^bb1 loc(#loc178)
  ^bb1:  // pred: ^bb0
    %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc176)
    cir.store %3, %0 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc176)
    cir.br ^bb2 loc(#loc179)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %5 = cir.cast(integral, %4 : !s32i), !u64i loc(#loc75)
    cir.store %5, %1 : !u64i, !cir.ptr<!u64i> loc(#loc180)
    cir.br ^bb3 loc(#loc179)
  ^bb3:  // 2 preds: ^bb2, ^bb7
    %6 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc77)
    %7 = cir.const #cir.int<10> : !s32i loc(#loc78)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc78)
    %9 = cir.cmp(lt, %6, %8) : !u64i, !cir.bool loc(#loc181)
    cir.brcond %9 ^bb4, ^bb8 loc(#loc79)
  ^bb4:  // pred: ^bb3
    cir.br ^bb5 loc(#loc182)
  ^bb5:  // pred: ^bb4
    %10 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc81)
    %11 = cir.cast(array_to_ptrdecay, %0 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc82)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !u64i), !cir.ptr<!s32i> loc(#loc82)
    %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc82)
    %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc83)
    %15 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc84)
    %16 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %15 : !u64i), !cir.ptr<!s32i> loc(#loc85)
    cir.store %13, %16 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.br ^bb6 loc(#loc74)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc74)
  ^bb7:  // pred: ^bb6
    %17 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc87)
    %18 = cir.unary(inc, %17) : !u64i, !u64i loc(#loc88)
    cir.store %18, %1 : !u64i, !cir.ptr<!u64i> loc(#loc184)
    cir.br ^bb3 loc(#loc179)
  ^bb8:  // pred: ^bb3
    cir.br ^bb9 loc(#loc74)
  ^bb9:  // pred: ^bb8
    %19 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc89)
    %20 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %21 = cir.ptr_stride(%19 : !cir.ptr<!s32i>, %20 : !s32i), !cir.ptr<!s32i> loc(#loc91)
    %22 = cir.load %21 : !cir.ptr<!s32i>, !s32i loc(#loc89)
    cir.call @printIntLine(%22) : (!s32i) -> () loc(#loc92)
    %23 = cir.load %2 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc93)
    %24 = cir.cast(bitcast, %23 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc93)
    cir.call @free(%24) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc94)
    cir.br ^bb10 loc(#loc72)
  ^bb10:  // pred: ^bb9
    cir.return loc(#loc63)
  } loc(#loc174)
  cir.func no_proto @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc186)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc97)
    cir.return loc(#loc96)
  } loc(#loc185)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc187)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc188)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc189)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc105)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc106)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc108)
  cir.func @main(%arg0: !s32i loc(fused[#loc111, #loc112]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc113, #loc114])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc191)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc192)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc110)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc115)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc115)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc116)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc117)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc117)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc118)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc105)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc105)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc119)
    %8 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_good : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_good() : () -> () loc(#loc120)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc106)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc106)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc122)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc107)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc107)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc123)
    %13 = cir.get_global @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc194)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_bad() : () -> () loc(#loc124)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc108)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc108)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc126)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc127)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc195)
    cir.return %17 : !s32i loc(#loc195)
  } loc(#loc190)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc197)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc133)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc198)
    %2 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc135)
    %3 = cir.const #cir.int<10> : !s32i loc(#loc136)
    %4 = cir.cast(integral, %3 : !s32i), !u64i loc(#loc136)
    %5 = cir.const #cir.int<4> : !u64i loc(#loc199)
    %6 = cir.binop(mul, %4, %5) : !u64i loc(#loc200)
    %7 = cir.call @malloc(%6) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc135)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc201)
    cir.store %8, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc202)
    cir.br ^bb1 loc(#loc203)
  ^bb1:  // pred: ^bb0
    %9 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc143)
    %10 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc144)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc144)
    %12 = cir.cmp(eq, %9, %11) : !cir.ptr<!s32i>, !cir.bool loc(#loc204)
    cir.brcond %12 ^bb2, ^bb3 loc(#loc205)
  ^bb2:  // pred: ^bb1
    %13 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc146)
    %14 = cir.const #cir.int<1> : !s32i loc(#loc147)
    %15 = cir.unary(minus, %14) : !s32i, !s32i loc(#loc148)
    cir.call @exit(%15) : (!s32i) -> () extra(#fn_attr) loc(#loc146)
    cir.br ^bb3 loc(#loc142)
  ^bb3:  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc142)
  ^bb4:  // pred: ^bb3
    %16 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc149)
    cir.call @CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41_goodG2BSink(%16) : (!cir.ptr<!s32i>) -> () loc(#loc150)
    cir.return loc(#loc130)
  } loc(#loc196)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s05/CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("/usr/include/stdlib.h":687:1)
#loc4 = loc("/usr/include/stdlib.h":687:32)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":21:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":34:1)
#loc9 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":24:9)
#loc10 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":24:28)
#loc11 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":25:9)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":25:16)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":22:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":23:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":33:5)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:9)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":30:9)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:18)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:14)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:21)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:25)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:23)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":28:9)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:30)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:23)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:13)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:18)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:19)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":29:31)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:30)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":27:29)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":31:22)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":31:27)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":31:28)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":31:9)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":32:14)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":32:9)
#loc38 = loc("/usr/include/stdlib.h":672:1)
#loc39 = loc("/usr/include/stdlib.h":672:45)
#loc40 = loc("/usr/include/stdlib.h":756:1)
#loc41 = loc("/usr/include/stdlib.h":756:70)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":36:1)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":44:1)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":38:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":38:11)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":39:12)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":39:5)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":41:19)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":41:26)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":41:28)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":41:5)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:5)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:33)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:17)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:23)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:24)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:30)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":42:29)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":43:63)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":43:5)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":50:1)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":63:1)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":53:9)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":53:28)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":54:9)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":54:16)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":51:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":52:5)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":62:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:9)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":59:9)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:18)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:14)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:21)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:25)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:23)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":57:9)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:30)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:23)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:13)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:18)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:19)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":58:31)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:30)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":56:29)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":60:22)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":60:27)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":60:28)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":60:9)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":61:14)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":61:9)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":76:1)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":79:1)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":78:5)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":78:13)
#loc99 = loc("/usr/include/stdlib.h":575:1)
#loc100 = loc("/usr/include/stdlib.h":575:41)
#loc101 = loc("/usr/include/time.h":76:1)
#loc102 = loc("/usr/include/time.h":76:38)
#loc103 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc104 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":96:15)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":98:15)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":101:15)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":103:15)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":91:1)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":106:1)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":92:1)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":94:27)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":94:22)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":94:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":96:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":97:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":97:60)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":98:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":101:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":102:5)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":102:59)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":103:5)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":105:12)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":105:5)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":66:1)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":74:1)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":68:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":68:11)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":69:12)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":69:5)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:19)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:26)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:29)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:39)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:40)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":71:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:5)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:33)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:17)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:23)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:24)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:30)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":72:29)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":73:67)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__CWE131_loop_41.c":73:5)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc155 = loc(fused[#loc9, #loc10])
#loc156 = loc(fused[#loc11, #loc12])
#loc157 = loc(fused[#loc14, #loc15])
#loc158 = loc(fused[#loc16, #loc17])
#loc159 = loc(fused[#loc19, #loc18])
#loc160 = loc(fused[#loc20, #loc21])
#loc161 = loc(fused[#loc23, #loc17])
#loc162 = loc(fused[#loc26, #loc29])
#loc163 = loc(fused[#loc31, #loc30])
#loc164 = loc(fused[#loc38, #loc39])
#loc165 = loc(fused[#loc40, #loc41])
#loc166 = loc(fused[#loc42, #loc43])
#loc167 = loc(fused[#loc44, #loc45])
#loc168 = loc(fused[#loc47, #loc46])
#loc169 = loc(fused[#loc48, #loc50])
#loc170 = loc(fused[#loc51, #loc50])
#loc171 = loc(fused[#loc52, #loc53])
#loc172 = loc(fused[#loc54, #loc55])
#loc173 = loc(fused[#loc56, #loc53])
#loc174 = loc(fused[#loc62, #loc63])
#loc176 = loc(fused[#loc66, #loc67])
#loc177 = loc(fused[#loc68, #loc69])
#loc178 = loc(fused[#loc71, #loc72])
#loc179 = loc(fused[#loc73, #loc74])
#loc180 = loc(fused[#loc76, #loc75])
#loc181 = loc(fused[#loc77, #loc78])
#loc182 = loc(fused[#loc80, #loc74])
#loc183 = loc(fused[#loc83, #loc86])
#loc184 = loc(fused[#loc88, #loc87])
#loc185 = loc(fused[#loc95, #loc96])
#loc186 = loc(fused[#loc97, #loc98])
#loc187 = loc(fused[#loc99, #loc100])
#loc188 = loc(fused[#loc101, #loc102])
#loc189 = loc(fused[#loc103, #loc104])
#loc190 = loc(fused[#loc109, #loc110])
#loc193 = loc(fused[#loc120, #loc121])
#loc194 = loc(fused[#loc124, #loc125])
#loc195 = loc(fused[#loc128, #loc127])
#loc196 = loc(fused[#loc129, #loc130])
#loc197 = loc(fused[#loc131, #loc132])
#loc198 = loc(fused[#loc134, #loc133])
#loc199 = loc(fused[#loc137, #loc138])
#loc200 = loc(fused[#loc136, #loc138])
#loc201 = loc(fused[#loc135, #loc139])
#loc202 = loc(fused[#loc140, #loc139])
#loc203 = loc(fused[#loc141, #loc142])
#loc204 = loc(fused[#loc143, #loc144])
#loc205 = loc(fused[#loc145, #loc142])
