!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":24:15)
#loc6 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":24:19)
#loc8 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":27:12)
#loc14 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":36:19)
#loc15 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":36:23)
#loc23 = loc(fused[#loc5, #loc6])
#loc27 = loc(fused[#loc14, #loc15])
module @"/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc21)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_619badSourceEi(%arg0: !s32i loc(fused[#loc5, #loc6])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc23)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    cir.brcond %5 ^bb1, ^bb2 loc(#loc8)
  ^bb1:  // pred: ^bb0
    %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc8)
    %8 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %9 = cir.shift(left, %7 : !u32i, %8 : !s32i) -> !u32i loc(#loc8)
    %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc8)
    %12 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc8)
    %14 = cir.binop(xor, %9, %13) : !u32i loc(#loc8)
    %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc8)
    %17 = cir.binop(xor, %14, %16) : !u32i loc(#loc8)
    cir.br ^bb3(%17 : !u32i) loc(#loc8)
  ^bb2:  // pred: ^bb0
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc8)
    %20 = cir.const #cir.int<30> : !s32i loc(#loc8)
    %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc8)
    %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc8)
    %24 = cir.const #cir.int<15> : !s32i loc(#loc8)
    %25 = cir.shift(left, %23 : !u32i, %24 : !s32i) -> !u32i loc(#loc8)
    %26 = cir.binop(xor, %21, %25) : !u32i loc(#loc8)
    %27 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc8)
    %29 = cir.binop(xor, %26, %28) : !u32i loc(#loc8)
    %30 = cir.unary(minus, %29) : !u32i, !u32i loc(#loc8)
    %31 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %32 = cir.cast(integral, %31 : !s32i), !u32i loc(#loc8)
    %33 = cir.binop(sub, %30, %32) : !u32i loc(#loc8)
    cir.br ^bb3(%33 : !u32i) loc(#loc8)
  ^bb3(%34: !u32i loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":27:12)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc8)
  ^bb4:  // pred: ^bb3
    %35 = cir.cast(integral, %34 : !u32i), !s32i loc(#loc8)
    cir.store %35, %0 : !s32i, !cir.ptr<!s32i> loc(#loc24)
    %36 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc10)
    cir.store %36, %1 : !s32i, !cir.ptr<!s32i> loc(#loc25)
    %37 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
    cir.return %37 : !s32i loc(#loc25)
  } loc(#loc22)
  cir.func @_ZN55CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_6113goodG2BSourceEi(%arg0: !s32i loc(fused[#loc14, #loc15])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc27)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc13)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc16)
    %2 = cir.const #cir.int<20> : !s32i loc(#loc17)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc28)
    %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc19)
    cir.store %3, %1 : !s32i, !cir.ptr<!s32i> loc(#loc29)
    %4 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
    cir.return %4 : !s32i loc(#loc29)
  } loc(#loc26)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE680_Integer_Overflow_to_Buffer_Overflow/CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":24:1)
#loc4 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":29:1)
#loc7 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":25:1)
#loc9 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":27:5)
#loc10 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":28:12)
#loc11 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":28:5)
#loc12 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":36:1)
#loc13 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":41:1)
#loc16 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":37:1)
#loc17 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":39:12)
#loc18 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":39:5)
#loc19 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":40:12)
#loc20 = loc("CWE680_Integer_Overflow_to_Buffer_Overflow__new_rand_61b.cpp":40:5)
#loc21 = loc(fused[#loc1, #loc2])
#loc22 = loc(fused[#loc3, #loc4])
#loc24 = loc(fused[#loc9, #loc8])
#loc25 = loc(fused[#loc11, #loc10])
#loc26 = loc(fused[#loc12, #loc13])
#loc28 = loc(fused[#loc18, #loc17])
#loc29 = loc(fused[#loc20, #loc19])
