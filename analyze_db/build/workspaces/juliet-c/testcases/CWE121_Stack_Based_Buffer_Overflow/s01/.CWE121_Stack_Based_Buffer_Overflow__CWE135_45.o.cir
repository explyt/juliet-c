!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc112)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc114)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc8)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc11)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc117)
    %7 = cir.get_global @badSink : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %7() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc13)
    cir.return loc(#loc5)
  } loc(#loc113)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc120)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc17)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc19)
    cir.return loc(#loc16)
  } loc(#loc119)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr1) loc(#loc122)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc123)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_badData : !cir.ptr<!cir.ptr<!void>> loc(#loc112)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc126)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc128)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc129)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc37)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc38)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc38)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc37)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc128)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc36)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc36)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc36)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc36)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc36)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc36)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc36)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc36)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc129)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc39)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc39)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc40)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc40)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc41)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc42)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc42)
      cir.call @printLine(%23) : (!cir.ptr<!s8i>) -> () loc(#loc43)
    } loc(#loc127)
    cir.return loc(#loc28)
  } loc(#loc125)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc130)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc132)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc51)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc133)
    %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc44)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc44)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc44)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc134)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc54)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc135)
    %7 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<()>> loc(#loc136)
    cir.call %7() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc56)
    cir.return loc(#loc48)
  } loc(#loc131)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc137)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc139)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodG2BData : !cir.ptr<!cir.ptr<!void>> loc(#loc130)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc63)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc139)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc141)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc142)
      %5 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc70)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc71)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc71)
      %8 = cir.call @strlen(%7) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc70)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc141)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc69)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc69)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc69)
      %13 = cir.const #cir.int<1> : !s32i loc(#loc69)
      %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc69)
      %15 = cir.binop(mul, %12, %14) : !u64i loc(#loc69)
      %16 = cir.alloca !u8i, !cir.ptr<!u8i>, %15 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
      %17 = cir.cast(bitcast, %16 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
      cir.store %17, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc142)
      %18 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc72)
      %19 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc73)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc73)
      %21 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc74)
      %22 = cir.cast(bitcast, %21 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc74)
      %23 = cir.call @strcpy(%20, %22) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr1) loc(#loc72)
      %24 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc75)
      %25 = cir.cast(bitcast, %24 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc75)
      cir.call @printLine(%25) : (!cir.ptr<!s8i>) -> () loc(#loc76)
    } loc(#loc140)
    cir.return loc(#loc61)
  } loc(#loc138)
  cir.global "private" internal dsolocal @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData = #cir.ptr<null> : !cir.ptr<!void> {alignment = 8 : i64} loc(#loc143)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc145)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc83)
    cir.store %1, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc146)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc85)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc85)
    %4 = cir.cast(bitcast, %3 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc85)
    cir.store %4, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc147)
    %5 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc87)
    %6 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    cir.store %5, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc148)
    %7 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<()>> loc(#loc149)
    cir.call %7() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc89)
    cir.return loc(#loc80)
  } loc(#loc144)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr1) loc(#loc150)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc151)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc153)
    %1 = cir.get_global @CWE121_Stack_Based_Buffer_Overflow__CWE135_45_goodB2GData : !cir.ptr<!cir.ptr<!void>> loc(#loc143)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc98)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc153)
    cir.scope {
      %3 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc155)
      %4 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc156)
      %5 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc105)
      %6 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc106)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
      %8 = cir.call @wcslen(%7) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr1) loc(#loc105)
      cir.store %8, %3 : !u64i, !cir.ptr<!u64i> loc(#loc155)
      %9 = cir.load %3 : !cir.ptr<!u64i>, !u64i loc(#loc104)
      %10 = cir.const #cir.int<1> : !s32i loc(#loc104)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc104)
      %12 = cir.binop(add, %9, %11) : !u64i loc(#loc104)
      %13 = cir.const #cir.int<4> : !u64i loc(#loc104)
      %14 = cir.binop(mul, %12, %13) : !u64i loc(#loc104)
      %15 = cir.alloca !u8i, !cir.ptr<!u8i>, %14 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc104)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc104)
      cir.store %16, %4 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc156)
      %17 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc107)
      %18 = cir.cast(bitcast, %17 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc107)
      %19 = cir.load %0 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc108)
      %20 = cir.cast(bitcast, %19 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
      %21 = cir.call @wcscpy(%18, %20) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr1) loc(#loc109)
      %22 = cir.load %4 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc110)
      %23 = cir.cast(bitcast, %22 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc110)
      cir.call @printWLine(%23) : (!cir.ptr<!s32i>) -> () loc(#loc111)
    } loc(#loc154)
    cir.return loc(#loc96)
  } loc(#loc152)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":48:20)
#loc2 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":25:1)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":25:15)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":43:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":51:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":45:5)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":45:12)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":46:12)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":46:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":48:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":49:61)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":49:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":50:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":50:13)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":103:1)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":107:1)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":105:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":105:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":106:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":106:13)
#loc21 = loc("/usr/include/string.h":407:1)
#loc22 = loc("/usr/include/string.h":408:33)
#loc23 = loc("/usr/include/wchar.h":98:1)
#loc24 = loc("/usr/include/wchar.h":100:14)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":31:1)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":41:1)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":33:5)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":33:19)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":34:5)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":40:5)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:45)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":37:9)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":37:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:26)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":36:41)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:22)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:28)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":38:15)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":39:27)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":39:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":75:20)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":26:1)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":26:15)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":70:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":78:1)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":72:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":72:12)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":73:12)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":73:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":75:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":76:65)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":76:5)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":77:5)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":77:17)
#loc58 = loc("/usr/include/string.h":141:1)
#loc59 = loc("/usr/include/string.h":142:14)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":58:1)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":68:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":60:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":60:19)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":61:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":67:5)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:9)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:45)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":64:9)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":64:31)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:26)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":63:41)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:22)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":65:28)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":66:27)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":66:9)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":27:1)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":27:15)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":93:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":101:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":95:5)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":95:12)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":96:12)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":96:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":98:20)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":98:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":99:65)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":99:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":100:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":100:17)
#loc91 = loc("/usr/include/wchar.h":247:1)
#loc92 = loc("/usr/include/wchar.h":247:51)
#loc93 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc94 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":81:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":91:1)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":83:5)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":83:19)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":84:5)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":90:5)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:9)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:48)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":87:9)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":87:31)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:26)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":86:44)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:22)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:28)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":88:15)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":89:31)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_45.c":89:9)
#loc112 = loc(fused[#loc2, #loc3])
#loc113 = loc(fused[#loc4, #loc5])
#loc114 = loc(fused[#loc6, #loc7])
#loc115 = loc(fused[#loc9, #loc8])
#loc116 = loc(fused[#loc10, #loc1])
#loc117 = loc(fused[#loc12, #loc11])
#loc118 = loc(fused[#loc13, #loc14])
#loc119 = loc(fused[#loc15, #loc16])
#loc120 = loc(fused[#loc17, #loc18])
#loc121 = loc(fused[#loc19, #loc20])
#loc122 = loc(fused[#loc21, #loc22])
#loc123 = loc(fused[#loc23, #loc24])
#loc124 = loc(fused[#loc25, #loc26])
#loc125 = loc(fused[#loc27, #loc28])
#loc126 = loc(fused[#loc29, #loc30])
#loc127 = loc(fused[#loc31, #loc32])
#loc128 = loc(fused[#loc33, #loc34])
#loc129 = loc(fused[#loc35, #loc36])
#loc130 = loc(fused[#loc45, #loc46])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc49, #loc50])
#loc133 = loc(fused[#loc52, #loc51])
#loc134 = loc(fused[#loc53, #loc44])
#loc135 = loc(fused[#loc55, #loc54])
#loc136 = loc(fused[#loc56, #loc57])
#loc137 = loc(fused[#loc58, #loc59])
#loc138 = loc(fused[#loc60, #loc61])
#loc139 = loc(fused[#loc62, #loc63])
#loc140 = loc(fused[#loc64, #loc65])
#loc141 = loc(fused[#loc66, #loc67])
#loc142 = loc(fused[#loc68, #loc69])
#loc143 = loc(fused[#loc77, #loc78])
#loc144 = loc(fused[#loc79, #loc80])
#loc145 = loc(fused[#loc81, #loc82])
#loc146 = loc(fused[#loc84, #loc83])
#loc147 = loc(fused[#loc86, #loc85])
#loc148 = loc(fused[#loc88, #loc87])
#loc149 = loc(fused[#loc89, #loc90])
#loc150 = loc(fused[#loc91, #loc92])
#loc151 = loc(fused[#loc93, #loc94])
#loc152 = loc(fused[#loc95, #loc96])
#loc153 = loc(fused[#loc97, #loc98])
#loc154 = loc(fused[#loc99, #loc100])
#loc155 = loc(fused[#loc101, #loc102])
#loc156 = loc(fused[#loc103, #loc104])
