!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printUnsignedLine(!u32i) loc(#loc185)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc187)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc7)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc7)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc188)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc11)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc12)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc190)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc14)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc14)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc14)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc14)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc14)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc14)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc19)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc194)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc23)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc24)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc24)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc197)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc199)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc27)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc27)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc200)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc199)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc29)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc30)
          } loc(#loc198)
        } loc(#loc196)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc4)
  } loc(#loc186)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_multiply_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc202)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc203)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc204)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc37)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc205)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc32)
  } loc(#loc201)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc206)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc44)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc208)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc49)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc49)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc209)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc53)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc54)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc211)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc56)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc56)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc56)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc56)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc56)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc56)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc213)
      } loc(#loc212)
    } loc(#loc210)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc60)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc61)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc215)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc43)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc43)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc65)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc68)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc69)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc69)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc218)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc73)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc74)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc74)
              %13 = cir.const #cir.int<2> : !u32i loc(#loc74)
              %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc74)
              %15 = cir.const #cir.int<1> : !u32i loc(#loc74)
              %16 = cir.binop(add, %14, %15) : !u32i loc(#loc74)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc75)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc75)
              %19 = cir.binop(div, %16, %18) : !u32i loc(#loc221)
              %20 = cir.cmp(lt, %10, %19) : !u32i, !cir.bool loc(#loc222)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc224)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc82)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc81)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc81)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc225)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc224)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc83)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc84)
              } else {
                %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc44)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc44)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc85)
              } loc(#loc223)
            } loc(#loc220)
          } loc(#loc219)
        } loc(#loc217)
      } loc(#loc216)
    } loc(#loc214)
    cir.return loc(#loc46)
  } loc(#loc207)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc227)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc90)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc90)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc228)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc94)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc95)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc230)
      cir.if %5 {
        %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc97)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc97)
        %8 = cir.const #cir.int<2> : !u32i loc(#loc97)
        %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc97)
        %10 = cir.const #cir.int<1> : !u32i loc(#loc97)
        %11 = cir.binop(add, %9, %10) : !u32i loc(#loc97)
        cir.store %11, %0 : !u32i, !cir.ptr<!u32i> loc(#loc232)
      } loc(#loc231)
    } loc(#loc229)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc101)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc102)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc234)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc106)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc107)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc237)
          cir.if %9 {
            cir.scope {
              %10 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc111)
              %11 = cir.const #cir.int<2147483647> : !s32i loc(#loc112)
              %12 = cir.cast(integral, %11 : !s32i), !u32i loc(#loc112)
              %13 = cir.const #cir.int<2> : !u32i loc(#loc112)
              %14 = cir.binop(mul, %12, %13) : !u32i loc(#loc112)
              %15 = cir.const #cir.int<1> : !u32i loc(#loc112)
              %16 = cir.binop(add, %14, %15) : !u32i loc(#loc112)
              %17 = cir.const #cir.int<2> : !s32i loc(#loc113)
              %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc113)
              %19 = cir.binop(div, %16, %18) : !u32i loc(#loc240)
              %20 = cir.cmp(lt, %10, %19) : !u32i, !cir.bool loc(#loc241)
              cir.if %20 {
                %21 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc243)
                %22 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc120)
                %23 = cir.const #cir.int<2> : !s32i loc(#loc119)
                %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc119)
                %25 = cir.binop(mul, %22, %24) : !u32i loc(#loc244)
                cir.store %25, %21 : !u32i, !cir.ptr<!u32i> loc(#loc243)
                %26 = cir.load %21 : !cir.ptr<!u32i>, !u32i loc(#loc121)
                cir.call @printUnsignedLine(%26) : (!u32i) -> () loc(#loc122)
              } else {
                %21 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc123)
                %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc123)
                cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc124)
              } loc(#loc242)
            } loc(#loc239)
          } loc(#loc238)
        } loc(#loc236)
      } loc(#loc235)
    } loc(#loc233)
    cir.return loc(#loc87)
  } loc(#loc226)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc246)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc129)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc129)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc247)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc133)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc134)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc249)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc138)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc138)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc139)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc140)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc140)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc251)
      } loc(#loc250)
    } loc(#loc248)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc144)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc145)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc253)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc149)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc150)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc150)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc256)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc258)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc154)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc153)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc153)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc259)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc258)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc155)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc156)
          } loc(#loc257)
        } loc(#loc255)
      } loc(#loc254)
    } loc(#loc252)
    cir.return loc(#loc126)
  } loc(#loc245)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc261)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc161)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc161)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc262)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc165)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc166)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc264)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc168)
        %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc168)
        cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc266)
      } loc(#loc265)
    } loc(#loc263)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc172)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc173)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc268)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc177)
          %7 = cir.const #cir.int<0> : !s32i loc(#loc178)
          %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc178)
          %9 = cir.cmp(gt, %6, %8) : !u32i, !cir.bool loc(#loc271)
          cir.if %9 {
            %10 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc273)
            %11 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc182)
            %12 = cir.const #cir.int<2> : !s32i loc(#loc181)
            %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc181)
            %14 = cir.binop(mul, %11, %13) : !u32i loc(#loc274)
            cir.store %14, %10 : !u32i, !cir.ptr<!u32i> loc(#loc273)
            %15 = cir.load %10 : !cir.ptr<!u32i>, !u32i loc(#loc183)
            cir.call @printUnsignedLine(%15) : (!u32i) -> () loc(#loc184)
          } loc(#loc272)
        } loc(#loc270)
      } loc(#loc269)
    } loc(#loc267)
    cir.return loc(#loc158)
  } loc(#loc260)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":27:1)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":45:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":29:5)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":29:18)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":30:12)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":30:5)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":31:5)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":35:5)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":31:8)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":31:27)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":32:5)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":34:16)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":34:9)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":44:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":36:8)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":36:27)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":37:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":38:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":43:9)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":38:12)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":38:19)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":39:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":41:13)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":41:42)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":41:35)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":42:31)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":42:13)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":159:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":165:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":161:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":161:14)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":162:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":162:14)
#loc37 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":163:5)
#loc38 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":163:14)
#loc39 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":164:5)
#loc40 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":164:14)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":64:19)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":78:27)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":52:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":82:1)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":54:5)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":54:18)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":55:12)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":55:5)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":56:5)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":56:8)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":56:27)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":57:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":59:16)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":59:9)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":61:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":81:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":61:8)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":61:27)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":62:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":65:5)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":67:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":64:9)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":68:9)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":80:9)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":68:12)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":68:19)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":69:9)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":71:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":79:13)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":71:17)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":71:25)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":71:34)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":71:35)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":72:13)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":75:13)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":77:13)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":73:17)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":73:46)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":73:39)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":74:35)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":74:17)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":78:17)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":85:1)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":110:1)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":87:5)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":87:18)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":88:12)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":88:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":89:5)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":93:5)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":89:8)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":89:27)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":90:5)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":92:16)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":92:9)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":94:5)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":109:5)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":94:8)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":94:27)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":95:5)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":96:9)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":108:9)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":96:12)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":96:19)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":97:9)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":99:13)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":107:13)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":99:17)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":99:25)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":99:34)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":99:35)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":100:13)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":103:13)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":105:13)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":101:17)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":101:46)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":101:39)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":102:35)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":102:17)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":106:27)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":106:17)
#loc125 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":113:1)
#loc126 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":136:1)
#loc127 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":115:5)
#loc128 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":115:18)
#loc129 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":116:12)
#loc130 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":116:5)
#loc131 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":117:5)
#loc132 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":126:5)
#loc133 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":117:8)
#loc134 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":117:27)
#loc135 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":118:5)
#loc136 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":121:5)
#loc137 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":123:5)
#loc138 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":120:19)
#loc139 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":120:9)
#loc140 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":125:16)
#loc141 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":125:9)
#loc142 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":127:5)
#loc143 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":135:5)
#loc144 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":127:8)
#loc145 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":127:27)
#loc146 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":128:5)
#loc147 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":129:9)
#loc148 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":134:9)
#loc149 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":129:12)
#loc150 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":129:19)
#loc151 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":130:9)
#loc152 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":132:13)
#loc153 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":132:42)
#loc154 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":132:35)
#loc155 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":133:31)
#loc156 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":133:13)
#loc157 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":139:1)
#loc158 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":157:1)
#loc159 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":141:5)
#loc160 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":141:18)
#loc161 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":142:12)
#loc162 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":142:5)
#loc163 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":143:5)
#loc164 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":147:5)
#loc165 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":143:8)
#loc166 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":143:27)
#loc167 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":144:5)
#loc168 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":146:16)
#loc169 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":146:9)
#loc170 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":148:5)
#loc171 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":156:5)
#loc172 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":148:8)
#loc173 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":148:27)
#loc174 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":149:5)
#loc175 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":150:9)
#loc176 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":155:9)
#loc177 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":150:12)
#loc178 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":150:19)
#loc179 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":151:9)
#loc180 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":153:13)
#loc181 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":153:42)
#loc182 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":153:35)
#loc183 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":154:31)
#loc184 = loc("CWE190_Integer_Overflow__unsigned_int_max_multiply_06.c":154:13)
#loc185 = loc(fused[#loc1, #loc2])
#loc186 = loc(fused[#loc3, #loc4])
#loc187 = loc(fused[#loc5, #loc6])
#loc188 = loc(fused[#loc8, #loc7])
#loc189 = loc(fused[#loc9, #loc10])
#loc190 = loc(fused[#loc11, #loc12])
#loc191 = loc(fused[#loc13, #loc10])
#loc192 = loc(fused[#loc15, #loc14])
#loc193 = loc(fused[#loc16, #loc17])
#loc194 = loc(fused[#loc18, #loc19])
#loc195 = loc(fused[#loc20, #loc17])
#loc196 = loc(fused[#loc21, #loc22])
#loc197 = loc(fused[#loc23, #loc24])
#loc198 = loc(fused[#loc25, #loc22])
#loc199 = loc(fused[#loc26, #loc27])
#loc200 = loc(fused[#loc28, #loc27])
#loc201 = loc(fused[#loc31, #loc32])
#loc202 = loc(fused[#loc33, #loc34])
#loc203 = loc(fused[#loc35, #loc36])
#loc204 = loc(fused[#loc37, #loc38])
#loc205 = loc(fused[#loc39, #loc40])
#loc206 = loc(fused[#loc41, #loc42])
#loc207 = loc(fused[#loc45, #loc46])
#loc208 = loc(fused[#loc47, #loc48])
#loc209 = loc(fused[#loc50, #loc49])
#loc210 = loc(fused[#loc51, #loc52])
#loc211 = loc(fused[#loc53, #loc54])
#loc212 = loc(fused[#loc55, #loc52])
#loc213 = loc(fused[#loc57, #loc56])
#loc214 = loc(fused[#loc58, #loc59])
#loc215 = loc(fused[#loc60, #loc61])
#loc216 = loc(fused[#loc62, #loc63, #loc64, #loc59])
#loc217 = loc(fused[#loc66, #loc67])
#loc218 = loc(fused[#loc68, #loc69])
#loc219 = loc(fused[#loc70, #loc67])
#loc220 = loc(fused[#loc71, #loc72])
#loc221 = loc(fused[#loc74, #loc75])
#loc222 = loc(fused[#loc73, #loc76])
#loc223 = loc(fused[#loc77, #loc78, #loc79, #loc72])
#loc224 = loc(fused[#loc80, #loc81])
#loc225 = loc(fused[#loc82, #loc81])
#loc226 = loc(fused[#loc86, #loc87])
#loc227 = loc(fused[#loc88, #loc89])
#loc228 = loc(fused[#loc91, #loc90])
#loc229 = loc(fused[#loc92, #loc93])
#loc230 = loc(fused[#loc94, #loc95])
#loc231 = loc(fused[#loc96, #loc93])
#loc232 = loc(fused[#loc98, #loc97])
#loc233 = loc(fused[#loc99, #loc100])
#loc234 = loc(fused[#loc101, #loc102])
#loc235 = loc(fused[#loc103, #loc100])
#loc236 = loc(fused[#loc104, #loc105])
#loc237 = loc(fused[#loc106, #loc107])
#loc238 = loc(fused[#loc108, #loc105])
#loc239 = loc(fused[#loc109, #loc110])
#loc240 = loc(fused[#loc112, #loc113])
#loc241 = loc(fused[#loc111, #loc114])
#loc242 = loc(fused[#loc115, #loc116, #loc117, #loc110])
#loc243 = loc(fused[#loc118, #loc119])
#loc244 = loc(fused[#loc120, #loc119])
#loc245 = loc(fused[#loc125, #loc126])
#loc246 = loc(fused[#loc127, #loc128])
#loc247 = loc(fused[#loc130, #loc129])
#loc248 = loc(fused[#loc131, #loc132])
#loc249 = loc(fused[#loc133, #loc134])
#loc250 = loc(fused[#loc135, #loc136, #loc137, #loc132])
#loc251 = loc(fused[#loc141, #loc140])
#loc252 = loc(fused[#loc142, #loc143])
#loc253 = loc(fused[#loc144, #loc145])
#loc254 = loc(fused[#loc146, #loc143])
#loc255 = loc(fused[#loc147, #loc148])
#loc256 = loc(fused[#loc149, #loc150])
#loc257 = loc(fused[#loc151, #loc148])
#loc258 = loc(fused[#loc152, #loc153])
#loc259 = loc(fused[#loc154, #loc153])
#loc260 = loc(fused[#loc157, #loc158])
#loc261 = loc(fused[#loc159, #loc160])
#loc262 = loc(fused[#loc162, #loc161])
#loc263 = loc(fused[#loc163, #loc164])
#loc264 = loc(fused[#loc165, #loc166])
#loc265 = loc(fused[#loc167, #loc164])
#loc266 = loc(fused[#loc169, #loc168])
#loc267 = loc(fused[#loc170, #loc171])
#loc268 = loc(fused[#loc172, #loc173])
#loc269 = loc(fused[#loc174, #loc171])
#loc270 = loc(fused[#loc175, #loc176])
#loc271 = loc(fused[#loc177, #loc178])
#loc272 = loc(fused[#loc179, #loc176])
#loc273 = loc(fused[#loc180, #loc181])
#loc274 = loc(fused[#loc182, #loc181])
