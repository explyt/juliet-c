!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
!ty_in_addr = !cir.record<struct "in_addr" {!u32i} #cir.record.decl.ast>
!ty_sockaddr = !cir.record<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.record<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc104)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc105)
  cir.func private @bind(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc106)
  cir.func private @listen(!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc107)
  cir.func private @accept(!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc108)
  cir.func private @close(!s32i) -> !s32i loc(#loc109)
  cir.func no_proto @CWE510_Trapdoor__network_listen_01_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc112)
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["listenSocket", init] {alignment = 4 : i64} loc(#loc113)
      %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["acceptSocket", init] {alignment = 4 : i64} loc(#loc114)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc20)
      %4 = cir.unary(minus, %3) nsw : !s32i, !s32i loc(#loc20)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc113)
      %5 = cir.const #cir.int<1> : !s32i loc(#loc22)
      %6 = cir.unary(minus, %5) nsw : !s32i, !s32i loc(#loc22)
      cir.store %6, %2 : !s32i, !cir.ptr<!s32i> loc(#loc114)
      cir.scope {
        cir.do {
          cir.scope {
            %7 = cir.const #cir.int<2> : !s32i loc(#loc27)
            %8 = cir.const #cir.int<1> : !s32i loc(#loc28)
            %9 = cir.const #cir.int<6> : !s32i loc(#loc29)
            %10 = cir.call @socket(%7, %8, %9) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc30)
            cir.store %10, %1 : !s32i, !cir.ptr<!s32i> loc(#loc117)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc36)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc36)
              %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc119)
              cir.if %32 {
                cir.break loc(#loc38)
              } loc(#loc120)
            } loc(#loc118)
            %11 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc121)
            %12 = cir.const #cir.int<0> : !s32i loc(#loc41)
            %13 = cir.const #cir.int<16> : !u64i loc(#loc122)
            cir.libc.memset %13 bytes from %11 set to %12 : !cir.ptr<!void>, !s32i, !u64i loc(#loc123)
            %14 = cir.const #cir.int<2> : !s32i loc(#loc46)
            %15 = cir.cast(integral, %14 : !s32i), !u16i loc(#loc46)
            %16 = cir.get_member %0[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc47)
            cir.store %15, %16 : !u16i, !cir.ptr<!u16i> loc(#loc124)
            %17 = cir.const #cir.int<0> : !s32i loc(#loc49)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc49)
            %19 = cir.get_member %0[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc50)
            %20 = cir.get_member %19[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc51)
            cir.store %18, %20 : !u32i, !cir.ptr<!u32i> loc(#loc125)
            %21 = cir.const #cir.int<30000> : !s32i loc(#loc53)
            %22 = cir.cast(integral, %21 : !s32i), !u16i loc(#loc53)
            %23 = cir.call @htons(%22) : (!u16i) -> !u16i side_effect(const) extra(#fn_attr) loc(#loc54)
            %24 = cir.get_member %0[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc55)
            cir.store %23, %24 : !u16i, !cir.ptr<!u16i> loc(#loc126)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc60)
              %30 = cir.cast(bitcast, %0 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc128)
              %31 = cir.const #cir.int<16> : !u64i loc(#loc129)
              %32 = cir.cast(integral, %31 : !u64i), !u32i loc(#loc129)
              %33 = cir.call @bind(%29, %30, %32) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i extra(#fn_attr) loc(#loc65)
              %34 = cir.const #cir.int<1> : !s32i loc(#loc66)
              %35 = cir.unary(minus, %34) nsw : !s32i, !s32i loc(#loc66)
              %36 = cir.cmp(eq, %33, %35) : !s32i, !cir.bool loc(#loc130)
              cir.if %36 {
                cir.break loc(#loc68)
              } loc(#loc131)
            } loc(#loc127)
            cir.scope {
              %29 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc71)
              %30 = cir.const #cir.int<5> : !s32i loc(#loc72)
              %31 = cir.call @listen(%29, %30) : (!s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc73)
              %32 = cir.const #cir.int<1> : !s32i loc(#loc74)
              %33 = cir.unary(minus, %32) nsw : !s32i, !s32i loc(#loc74)
              %34 = cir.cmp(eq, %31, %33) : !s32i, !cir.bool loc(#loc133)
              cir.if %34 {
                cir.break loc(#loc76)
              } loc(#loc134)
            } loc(#loc132)
            %25 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc77)
            %26 = cir.const #cir.ptr<null> : !cir.ptr<!ty_sockaddr> loc(#loc78)
            %27 = cir.const #cir.ptr<null> : !cir.ptr<!u32i> loc(#loc79)
            %28 = cir.call @accept(%25, %26, %27) : (!s32i, !cir.ptr<!ty_sockaddr>, !cir.ptr<!u32i>) -> !s32i loc(#loc80)
            cir.store %28, %2 : !s32i, !cir.ptr<!s32i> loc(#loc135)
            cir.scope {
              %29 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc85)
              %30 = cir.const #cir.int<1> : !s32i loc(#loc86)
              %31 = cir.unary(minus, %30) nsw : !s32i, !s32i loc(#loc86)
              %32 = cir.cmp(eq, %29, %31) : !s32i, !cir.bool loc(#loc137)
              cir.if %32 {
                cir.break loc(#loc88)
              } loc(#loc138)
            } loc(#loc136)
          } loc(#loc116)
          cir.yield loc(#loc24)
        } while {
          %7 = cir.const #cir.int<0> : !s32i loc(#loc89)
          %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc89)
          cir.condition(%8) loc(#loc89)
        } loc(#loc115)
      } loc(#loc115)
      cir.scope {
        %7 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc92)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc93)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc140)
        cir.if %10 {
          %11 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc95)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc96)
        } loc(#loc141)
      } loc(#loc139)
      cir.scope {
        %7 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %8 = cir.const #cir.int<1> : !s32i loc(#loc100)
        %9 = cir.unary(minus, %8) nsw : !s32i, !s32i loc(#loc100)
        %10 = cir.cmp(ne, %7, %9) : !s32i, !cir.bool loc(#loc143)
        cir.if %10 {
          %11 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc102)
          %12 = cir.call @close(%11) : (!s32i) -> !s32i loc(#loc103)
        } loc(#loc144)
      } loc(#loc142)
    } loc(#loc111)
    cir.return loc(#loc14)
  } loc(#loc110)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE510_Trapdoor/CWE510_Trapdoor__network_listen_01.c":0:0)
#loc1 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:1)
#loc2 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":102:62)
#loc3 = loc("/usr/include/netinet/in.h":402:1)
#loc4 = loc("/usr/include/netinet/in.h":403:40)
#loc5 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":112:1)
#loc6 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":113:6)
#loc7 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:1)
#loc8 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":296:39)
#loc9 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":306:1)
#loc10 = loc("/usr/include/x86_64-linux-gnu/sys/socket.h":307:38)
#loc11 = loc("/usr/include/unistd.h":358:1)
#loc12 = loc("/usr/include/unistd.h":358:27)
#loc13 = loc("CWE510_Trapdoor__network_listen_01.c":39:1)
#loc14 = loc("CWE510_Trapdoor__network_listen_01.c":99:1)
#loc15 = loc("CWE510_Trapdoor__network_listen_01.c":41:5)
#loc16 = loc("CWE510_Trapdoor__network_listen_01.c":98:5)
#loc17 = loc("CWE510_Trapdoor__network_listen_01.c":46:9)
#loc18 = loc("CWE510_Trapdoor__network_listen_01.c":46:28)
#loc19 = loc("CWE510_Trapdoor__network_listen_01.c":47:9)
#loc20 = loc("CWE510_Trapdoor__network_listen_01.c":47:31)
#loc21 = loc("CWE510_Trapdoor__network_listen_01.c":48:9)
#loc22 = loc("CWE510_Trapdoor__network_listen_01.c":48:31)
#loc23 = loc("CWE510_Trapdoor__network_listen_01.c":49:9)
#loc24 = loc("CWE510_Trapdoor__network_listen_01.c":83:17)
#loc25 = loc("CWE510_Trapdoor__network_listen_01.c":50:9)
#loc26 = loc("CWE510_Trapdoor__network_listen_01.c":82:9)
#loc27 = loc("CWE510_Trapdoor__network_listen_01.c":58:35)
#loc28 = loc("CWE510_Trapdoor__network_listen_01.c":58:44)
#loc29 = loc("CWE510_Trapdoor__network_listen_01.c":58:57)
#loc30 = loc("CWE510_Trapdoor__network_listen_01.c":58:28)
#loc31 = loc("CWE510_Trapdoor__network_listen_01.c":58:13)
#loc32 = loc("CWE510_Trapdoor__network_listen_01.c":58:68)
#loc33 = loc("CWE510_Trapdoor__network_listen_01.c":59:13)
#loc34 = loc("CWE510_Trapdoor__network_listen_01.c":62:13)
#loc35 = loc("CWE510_Trapdoor__network_listen_01.c":59:17)
#loc36 = loc("CWE510_Trapdoor__network_listen_01.c":59:33)
#loc37 = loc("CWE510_Trapdoor__network_listen_01.c":60:13)
#loc38 = loc("CWE510_Trapdoor__network_listen_01.c":61:17)
#loc39 = loc("CWE510_Trapdoor__network_listen_01.c":63:20)
#loc40 = loc("CWE510_Trapdoor__network_listen_01.c":63:21)
#loc41 = loc("CWE510_Trapdoor__network_listen_01.c":63:30)
#loc42 = loc("CWE510_Trapdoor__network_listen_01.c":63:33)
#loc43 = loc("CWE510_Trapdoor__network_listen_01.c":63:47)
#loc44 = loc("CWE510_Trapdoor__network_listen_01.c":63:13)
#loc45 = loc("CWE510_Trapdoor__network_listen_01.c":63:48)
#loc46 = loc("CWE510_Trapdoor__network_listen_01.c":64:34)
#loc47 = loc("/usr/include/netinet/in.h":249:5)
#loc48 = loc("CWE510_Trapdoor__network_listen_01.c":64:13)
#loc49 = loc("CWE510_Trapdoor__network_listen_01.c":65:39)
#loc50 = loc("/usr/include/netinet/in.h":251:20)
#loc51 = loc("/usr/include/netinet/in.h":33:15)
#loc52 = loc("CWE510_Trapdoor__network_listen_01.c":65:13)
#loc53 = loc("CWE510_Trapdoor__network_listen_01.c":66:38)
#loc54 = loc("CWE510_Trapdoor__network_listen_01.c":66:32)
#loc55 = loc("/usr/include/netinet/in.h":250:15)
#loc56 = loc("CWE510_Trapdoor__network_listen_01.c":66:13)
#loc57 = loc("CWE510_Trapdoor__network_listen_01.c":66:43)
#loc58 = loc("CWE510_Trapdoor__network_listen_01.c":67:13)
#loc59 = loc("CWE510_Trapdoor__network_listen_01.c":70:13)
#loc60 = loc("CWE510_Trapdoor__network_listen_01.c":67:22)
#loc61 = loc("CWE510_Trapdoor__network_listen_01.c":67:54)
#loc62 = loc("CWE510_Trapdoor__network_listen_01.c":67:55)
#loc63 = loc("CWE510_Trapdoor__network_listen_01.c":67:64)
#loc64 = loc("CWE510_Trapdoor__network_listen_01.c":67:78)
#loc65 = loc("CWE510_Trapdoor__network_listen_01.c":67:17)
#loc66 = loc("CWE510_Trapdoor__network_listen_01.c":67:84)
#loc67 = loc("CWE510_Trapdoor__network_listen_01.c":68:13)
#loc68 = loc("CWE510_Trapdoor__network_listen_01.c":69:17)
#loc69 = loc("CWE510_Trapdoor__network_listen_01.c":71:13)
#loc70 = loc("CWE510_Trapdoor__network_listen_01.c":74:13)
#loc71 = loc("CWE510_Trapdoor__network_listen_01.c":71:24)
#loc72 = loc("CWE510_Trapdoor__network_listen_01.c":71:38)
#loc73 = loc("CWE510_Trapdoor__network_listen_01.c":71:17)
#loc74 = loc("CWE510_Trapdoor__network_listen_01.c":71:44)
#loc75 = loc("CWE510_Trapdoor__network_listen_01.c":72:13)
#loc76 = loc("CWE510_Trapdoor__network_listen_01.c":73:17)
#loc77 = loc("CWE510_Trapdoor__network_listen_01.c":76:35)
#loc78 = loc("CWE510_Trapdoor__network_listen_01.c":76:49)
#loc79 = loc("CWE510_Trapdoor__network_listen_01.c":76:55)
#loc80 = loc("CWE510_Trapdoor__network_listen_01.c":76:28)
#loc81 = loc("CWE510_Trapdoor__network_listen_01.c":76:13)
#loc82 = loc("CWE510_Trapdoor__network_listen_01.c":76:59)
#loc83 = loc("CWE510_Trapdoor__network_listen_01.c":77:13)
#loc84 = loc("CWE510_Trapdoor__network_listen_01.c":80:13)
#loc85 = loc("CWE510_Trapdoor__network_listen_01.c":77:17)
#loc86 = loc("CWE510_Trapdoor__network_listen_01.c":77:33)
#loc87 = loc("CWE510_Trapdoor__network_listen_01.c":78:13)
#loc88 = loc("CWE510_Trapdoor__network_listen_01.c":79:17)
#loc89 = loc("CWE510_Trapdoor__network_listen_01.c":83:16)
#loc90 = loc("CWE510_Trapdoor__network_listen_01.c":84:9)
#loc91 = loc("CWE510_Trapdoor__network_listen_01.c":87:9)
#loc92 = loc("CWE510_Trapdoor__network_listen_01.c":84:13)
#loc93 = loc("CWE510_Trapdoor__network_listen_01.c":84:29)
#loc94 = loc("CWE510_Trapdoor__network_listen_01.c":85:9)
#loc95 = loc("CWE510_Trapdoor__network_listen_01.c":86:26)
#loc96 = loc("CWE510_Trapdoor__network_listen_01.c":86:13)
#loc97 = loc("CWE510_Trapdoor__network_listen_01.c":88:9)
#loc98 = loc("CWE510_Trapdoor__network_listen_01.c":91:9)
#loc99 = loc("CWE510_Trapdoor__network_listen_01.c":88:13)
#loc100 = loc("CWE510_Trapdoor__network_listen_01.c":88:29)
#loc101 = loc("CWE510_Trapdoor__network_listen_01.c":89:9)
#loc102 = loc("CWE510_Trapdoor__network_listen_01.c":90:26)
#loc103 = loc("CWE510_Trapdoor__network_listen_01.c":90:13)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc106 = loc(fused[#loc5, #loc6])
#loc107 = loc(fused[#loc7, #loc8])
#loc108 = loc(fused[#loc9, #loc10])
#loc109 = loc(fused[#loc11, #loc12])
#loc110 = loc(fused[#loc13, #loc14])
#loc111 = loc(fused[#loc15, #loc16])
#loc112 = loc(fused[#loc17, #loc18])
#loc113 = loc(fused[#loc19, #loc20])
#loc114 = loc(fused[#loc21, #loc22])
#loc115 = loc(fused[#loc23, #loc24])
#loc116 = loc(fused[#loc25, #loc26])
#loc117 = loc(fused[#loc31, #loc32])
#loc118 = loc(fused[#loc33, #loc34])
#loc119 = loc(fused[#loc35, #loc36])
#loc120 = loc(fused[#loc37, #loc34])
#loc121 = loc(fused[#loc39, #loc40])
#loc122 = loc(fused[#loc42, #loc43])
#loc123 = loc(fused[#loc44, #loc45])
#loc124 = loc(fused[#loc48, #loc46])
#loc125 = loc(fused[#loc52, #loc49])
#loc126 = loc(fused[#loc56, #loc57])
#loc127 = loc(fused[#loc58, #loc59])
#loc128 = loc(fused[#loc61, #loc62])
#loc129 = loc(fused[#loc63, #loc64])
#loc130 = loc(fused[#loc65, #loc66])
#loc131 = loc(fused[#loc67, #loc59])
#loc132 = loc(fused[#loc69, #loc70])
#loc133 = loc(fused[#loc73, #loc74])
#loc134 = loc(fused[#loc75, #loc70])
#loc135 = loc(fused[#loc81, #loc82])
#loc136 = loc(fused[#loc83, #loc84])
#loc137 = loc(fused[#loc85, #loc86])
#loc138 = loc(fused[#loc87, #loc84])
#loc139 = loc(fused[#loc90, #loc91])
#loc140 = loc(fused[#loc92, #loc93])
#loc141 = loc(fused[#loc94, #loc91])
#loc142 = loc(fused[#loc97, #loc98])
#loc143 = loc(fused[#loc99, #loc100])
#loc144 = loc(fused[#loc101, #loc98])
