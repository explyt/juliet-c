!s32i = !cir.int<s, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc73)
  cir.func private @printIntLine(!s32i) loc(#loc74)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc76)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc9)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc77)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc79)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc79)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc18)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc18)
        %8 = cir.alloca !u8i, !cir.ptr<!u8i>, %7 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc18)
        %9 = cir.cast(bitcast, %8 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc18)
        %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc18)
        cir.store %10, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc81)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc20)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc20)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc20)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc20)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc20)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc82)
      } loc(#loc80)
    } loc(#loc78)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc84)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc84)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc84)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc26)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc26)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc27)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc27)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc28)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc28)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc85)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc86)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc87)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc33)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc35)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc33)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc36)
    } loc(#loc83)
    cir.return loc(#loc6)
  } loc(#loc75)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc39)
    cir.return loc(#loc38)
  } loc(#loc88)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc91)
    %1 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc45)
    cir.store %1, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc92)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc94)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc94)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc49)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc49)
      cir.if %5 {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc54)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc54)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc54)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc54)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc54)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc54)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc54)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc96)
      } else {
        %6 = cir.const #cir.int<10> : !s32i loc(#loc56)
        %7 = cir.cast(integral, %6 : !s32i), !u64i loc(#loc56)
        %8 = cir.const #cir.int<4> : !u64i loc(#loc56)
        %9 = cir.binop(mul, %7, %8) : !u64i loc(#loc56)
        %10 = cir.alloca !u8i, !cir.ptr<!u8i>, %9 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc56)
        %11 = cir.cast(bitcast, %10 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc56)
        %12 = cir.cast(bitcast, %11 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc56)
        cir.store %12, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc97)
      } loc(#loc95)
    } loc(#loc93)
    cir.scope {
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc99)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc99)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc99)
      %4 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc62)
      %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc62)
      %6 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc63)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc63)
      %8 = cir.const #cir.int<10> : !s32i loc(#loc64)
      %9 = cir.cast(integral, %8 : !s32i), !u64i loc(#loc64)
      %10 = cir.const #cir.int<4> : !u64i loc(#loc100)
      %11 = cir.binop(mul, %9, %10) : !u64i loc(#loc101)
      cir.libc.memcpy %11 bytes from %7 to %5 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc102)
      %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc69)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc70)
      %14 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc71)
      %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc69)
      cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc72)
    } loc(#loc98)
    cir.return loc(#loc42)
  } loc(#loc90)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":21:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":41:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":23:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":23:11)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":24:12)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":24:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":25:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":34:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":25:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":25:33)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":29:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":28:23)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":28:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":33:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":33:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":35:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":40:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":36:9)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":36:28)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:30)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:33)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:43)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:9)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":38:44)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":39:22)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":39:27)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":39:28)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":39:9)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":71:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":74:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":73:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":73:13)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":49:1)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":69:1)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":51:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":51:11)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":52:12)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":52:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":53:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":62:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":53:8)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":53:33)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":54:5)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":57:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":59:5)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":56:23)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":56:9)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":61:23)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":61:9)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":63:5)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":68:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":64:9)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":64:28)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:16)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:22)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:30)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:33)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:43)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:9)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":66:44)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":67:22)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":67:27)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":67:28)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_12.c":67:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc3, #loc4])
#loc75 = loc(fused[#loc5, #loc6])
#loc76 = loc(fused[#loc7, #loc8])
#loc77 = loc(fused[#loc10, #loc9])
#loc78 = loc(fused[#loc11, #loc12])
#loc79 = loc(fused[#loc13, #loc14])
#loc80 = loc(fused[#loc15, #loc16, #loc17, #loc12])
#loc81 = loc(fused[#loc19, #loc18])
#loc82 = loc(fused[#loc21, #loc20])
#loc83 = loc(fused[#loc22, #loc23])
#loc84 = loc(fused[#loc24, #loc25])
#loc85 = loc(fused[#loc29, #loc30])
#loc86 = loc(fused[#loc28, #loc30])
#loc87 = loc(fused[#loc31, #loc32])
#loc88 = loc(fused[#loc37, #loc38])
#loc89 = loc(fused[#loc39, #loc40])
#loc90 = loc(fused[#loc41, #loc42])
#loc91 = loc(fused[#loc43, #loc44])
#loc92 = loc(fused[#loc46, #loc45])
#loc93 = loc(fused[#loc47, #loc48])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc96 = loc(fused[#loc55, #loc54])
#loc97 = loc(fused[#loc57, #loc56])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc60, #loc61])
#loc100 = loc(fused[#loc65, #loc66])
#loc101 = loc(fused[#loc64, #loc66])
#loc102 = loc(fused[#loc67, #loc68])
