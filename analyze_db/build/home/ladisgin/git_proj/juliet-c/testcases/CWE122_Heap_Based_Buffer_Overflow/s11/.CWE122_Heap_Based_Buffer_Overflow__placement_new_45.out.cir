!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc126 = loc("../../../testcasesupport/std_testcase.h":68:7)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":148:10)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":148:14)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":148:20)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":148:32)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
#loc292 = loc(fused[#loc196, #loc197])
#loc293 = loc(fused[#loc198, #loc199])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc212)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc213)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7badDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc214)
  cir.func linkonce_odr @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private @printIntLine(!s32i) loc(#loc215)
  cir.func private @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc216)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7badSinkEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc218)
    %1 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7badDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc15)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc218)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc220)
      %4 = cir.const #cir.int<8> : !u64i loc(#loc221)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc21)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc221)
      cir.call @_ZN12TwoIntsClassC2Ev(%7) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc19)
      cir.store %7, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc220)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc22)
      %9 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc23)
      %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
      cir.store %8, %10 : !s32i, !cir.ptr<!s32i> loc(#loc222)
      %11 = cir.const #cir.int<10> : !s32i loc(#loc25)
      %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc26)
      %13 = cir.get_member %12[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc223)
      %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc28)
      %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc29)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc30)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc31)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc32)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc32)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc31)
    } loc(#loc219)
    cir.return loc(#loc13)
  } loc(#loc217)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_453badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc225)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc226)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc227)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc41)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc228)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc41)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc229)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc226)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc46)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc47)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc231)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc49)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc50)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc51)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc49)
      } loc(#loc232)
    } loc(#loc230)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc52)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc233)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc52)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc234)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc227)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc57)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc58)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc236)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc60)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc61)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc62)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc60)
      } loc(#loc237)
    } loc(#loc235)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc63)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc238)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc65)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7badDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc214)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc239)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7badSinkEv() : () -> () loc(#loc67)
    cir.return loc(#loc34)
  } loc(#loc224)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodG2BDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc240)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodG2BSinkEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc242)
    %1 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodG2BDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc73)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc242)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc244)
      %4 = cir.const #cir.int<8> : !u64i loc(#loc245)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc79)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc79)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc245)
      cir.call @_ZN12TwoIntsClassC2Ev(%7) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc77)
      cir.store %7, %3 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc244)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc80)
      %9 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc81)
      %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
      cir.store %8, %10 : !s32i, !cir.ptr<!s32i> loc(#loc246)
      %11 = cir.const #cir.int<10> : !s32i loc(#loc82)
      %12 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc83)
      %13 = cir.get_member %12[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc27)
      cir.store %11, %13 : !s32i, !cir.ptr<!s32i> loc(#loc247)
      %14 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc84)
      %15 = cir.get_member %14[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc24)
      %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc85)
      cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc86)
      %17 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc87)
      %18 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc88)
      %19 = cir.cast(bitcast, %18 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc88)
      cir.call @free(%19) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc87)
    } loc(#loc243)
    cir.return loc(#loc71)
  } loc(#loc241)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7goodG2BEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc249)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc250)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc251)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc97)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc252)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc97)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc253)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc250)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc102)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc103)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc255)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc105)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc106)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc107)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc105)
      } loc(#loc256)
    } loc(#loc254)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc108)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc257)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc108)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc258)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc251)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc113)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc114)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc260)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc116)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc117)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc118)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc116)
      } loc(#loc261)
    } loc(#loc259)
    %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc119)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc262)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc121)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodG2BDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc240)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc263)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodG2BSinkEv() : () -> () loc(#loc123)
    cir.return loc(#loc90)
  } loc(#loc248)
  cir.global "private" internal dsolocal @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodB2GDataE = #cir.ptr<null> : !cir.ptr<!s8i> {alignment = 8 : i64} loc(#loc264)
  cir.func linkonce_odr @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc126)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc126)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc126)
    cir.return loc(#loc126)
  } loc(#loc126)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodB2GSinkEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc266)
    %1 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodB2GDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc130)
    cir.store %2, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc266)
    cir.scope {
      %3 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc268)
      %4 = cir.const #cir.int<4> : !u64i loc(#loc269)
      %5 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
      %6 = cir.cast(bitcast, %5 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc136)
      %7 = cir.cast(bitcast, %6 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc269)
      cir.call @_ZN11OneIntClassC2Ev(%7) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc134)
      cir.store %7, %3 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc268)
      %8 = cir.const #cir.int<5> : !s32i loc(#loc137)
      %9 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc138)
      %10 = cir.get_member %9[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc139)
      cir.store %8, %10 : !s32i, !cir.ptr<!s32i> loc(#loc270)
      %11 = cir.load %3 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc140)
      %12 = cir.get_member %11[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc139)
      %13 = cir.load %12 : !cir.ptr<!s32i>, !s32i loc(#loc141)
      cir.call @printIntLine(%13) : (!s32i) -> () loc(#loc142)
      %14 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc143)
      %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc144)
      %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc144)
      cir.call @free(%16) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc143)
    } loc(#loc267)
    cir.return loc(#loc128)
  } loc(#loc265)
  cir.func internal private @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7goodB2GEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc273)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc274)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc153)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc275)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc153)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc276)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
    cir.scope {
      %14 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc158)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc159)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc278)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc161)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc162)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc163)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc161)
      } loc(#loc279)
    } loc(#loc277)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc164)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc280)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc164)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc281)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc274)
    cir.scope {
      %14 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc169)
      %15 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc170)
      %16 = cir.cmp(eq, %14, %15) : !cir.ptr<!s8i>, !cir.bool loc(#loc283)
      cir.if %16 {
        %17 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc172)
        %18 = cir.const #cir.int<1> : !s32i loc(#loc173)
        %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc174)
        cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc172)
      } loc(#loc284)
    } loc(#loc282)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc175)
    cir.store %11, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc285)
    %12 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc177)
    %13 = cir.get_global @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodB2GDataE : !cir.ptr<!cir.ptr<!s8i>> loc(#loc264)
    cir.store %12, %13 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc286)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L11goodB2GSinkEv() : () -> () loc(#loc179)
    cir.return loc(#loc146)
  } loc(#loc271)
  cir.func @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_454goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7goodG2BEv() : () -> () loc(#loc182)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_45L7goodB2GEv() : () -> () loc(#loc183)
    cir.return loc(#loc181)
  } loc(#loc287)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc288)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc289)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc290)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc190)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc191)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc193)
  cir.func @main(%arg0: !s32i loc(fused[#loc196, #loc197]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc198, #loc199])) -> !s32i extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc292)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc293)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc195)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc200)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc201)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc202)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc202)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc203)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc190)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc190)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc204)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_454goodEv() : () -> () loc(#loc205)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc191)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc191)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc206)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc192)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc192)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc207)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_453badEv() : () -> () loc(#loc208)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc193)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc193)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc209)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc210)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc294)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc294)
    cir.return %15 : !s32i loc(#loc294)
  } loc(#loc291)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":23:1)
#loc6 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":23:15)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":29:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":46:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":31:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":31:19)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":32:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":45:5)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":38:9)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":38:45)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":38:35)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":38:39)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":40:28)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":40:9)
#loc24 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":41:28)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":41:9)
#loc27 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":42:22)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":42:32)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":42:9)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":44:9)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":44:14)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":48:1)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":59:1)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":50:5)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":50:12)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":51:5)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":51:62)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":53:5)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":53:64)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":51:36)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":51:43)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":51:61)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:5)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:42)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:9)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:26)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:32)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:33)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:39)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":52:38)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":53:37)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":53:44)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":53:63)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:5)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:43)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:9)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:27)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:33)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:34)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:40)
#loc62 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":54:39)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":56:12)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":56:5)
#loc65 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":57:15)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":57:5)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":58:5)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":24:1)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":24:15)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":66:1)
#loc71 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":83:1)
#loc72 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":68:5)
#loc73 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":68:19)
#loc74 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":69:5)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":82:5)
#loc76 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":75:9)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":75:45)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":75:35)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":75:39)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":77:28)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":77:9)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":78:28)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":78:9)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":79:22)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":79:32)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":79:9)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":81:9)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":81:14)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":85:1)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":96:1)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":87:5)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":87:12)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":88:5)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":88:62)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":90:5)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":90:64)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":88:36)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":88:43)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":88:61)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:5)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:42)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:9)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:26)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:32)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:33)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:39)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":89:38)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":90:37)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":90:44)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":90:63)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:43)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:27)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:33)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:34)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:40)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":91:39)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":93:12)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":93:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":94:19)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":94:5)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":95:5)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":25:1)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":25:15)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":99:1)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":114:1)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":101:5)
#loc130 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":101:19)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":102:5)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":113:5)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":108:9)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":108:44)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":108:34)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":108:38)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":110:28)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":110:9)
#loc139 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":111:22)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":111:32)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":111:9)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":112:9)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":112:14)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":116:1)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":127:1)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":118:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":118:12)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":119:5)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":119:62)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":121:5)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":121:64)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":119:36)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":119:43)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":119:61)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:5)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:42)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:9)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:26)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:32)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:33)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:39)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":120:38)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":121:37)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":121:44)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":121:63)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:43)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:9)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:27)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:33)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:34)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:40)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":122:39)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":124:12)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":124:5)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":125:19)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":125:5)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":126:5)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":129:1)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":133:1)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":131:5)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":132:5)
#loc184 = loc("/usr/include/stdlib.h":575:1)
#loc185 = loc("/usr/include/stdlib.h":575:41)
#loc186 = loc("/usr/include/time.h":76:1)
#loc187 = loc("/usr/include/time.h":76:38)
#loc188 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc189 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":153:15)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":155:15)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":158:15)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":160:15)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":148:1)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":163:1)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":149:1)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":151:27)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":151:22)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":151:5)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":153:5)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":154:5)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":155:5)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":158:5)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":159:5)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":160:5)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":162:12)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_45.cpp":162:5)
#loc212 = loc(fused[#loc1, #loc2])
#loc213 = loc(fused[#loc3, #loc4])
#loc214 = loc(fused[#loc5, #loc6])
#loc215 = loc(fused[#loc8, #loc9])
#loc216 = loc(fused[#loc10, #loc11])
#loc217 = loc(fused[#loc12, #loc13])
#loc218 = loc(fused[#loc14, #loc15])
#loc219 = loc(fused[#loc16, #loc17])
#loc220 = loc(fused[#loc18, #loc19])
#loc221 = loc(fused[#loc20, #loc19])
#loc222 = loc(fused[#loc23, #loc22])
#loc223 = loc(fused[#loc26, #loc25])
#loc224 = loc(fused[#loc33, #loc34])
#loc225 = loc(fused[#loc35, #loc36])
#loc226 = loc(fused[#loc37, #loc38])
#loc227 = loc(fused[#loc39, #loc40])
#loc228 = loc(fused[#loc42, #loc43])
#loc229 = loc(fused[#loc41, #loc38])
#loc230 = loc(fused[#loc44, #loc45])
#loc231 = loc(fused[#loc46, #loc47])
#loc232 = loc(fused[#loc48, #loc45])
#loc233 = loc(fused[#loc53, #loc54])
#loc234 = loc(fused[#loc52, #loc40])
#loc235 = loc(fused[#loc55, #loc56])
#loc236 = loc(fused[#loc57, #loc58])
#loc237 = loc(fused[#loc59, #loc56])
#loc238 = loc(fused[#loc64, #loc63])
#loc239 = loc(fused[#loc66, #loc65])
#loc240 = loc(fused[#loc68, #loc69])
#loc241 = loc(fused[#loc70, #loc71])
#loc242 = loc(fused[#loc72, #loc73])
#loc243 = loc(fused[#loc74, #loc75])
#loc244 = loc(fused[#loc76, #loc77])
#loc245 = loc(fused[#loc78, #loc77])
#loc246 = loc(fused[#loc81, #loc80])
#loc247 = loc(fused[#loc83, #loc82])
#loc248 = loc(fused[#loc89, #loc90])
#loc249 = loc(fused[#loc91, #loc92])
#loc250 = loc(fused[#loc93, #loc94])
#loc251 = loc(fused[#loc95, #loc96])
#loc252 = loc(fused[#loc98, #loc99])
#loc253 = loc(fused[#loc97, #loc94])
#loc254 = loc(fused[#loc100, #loc101])
#loc255 = loc(fused[#loc102, #loc103])
#loc256 = loc(fused[#loc104, #loc101])
#loc257 = loc(fused[#loc109, #loc110])
#loc258 = loc(fused[#loc108, #loc96])
#loc259 = loc(fused[#loc111, #loc112])
#loc260 = loc(fused[#loc113, #loc114])
#loc261 = loc(fused[#loc115, #loc112])
#loc262 = loc(fused[#loc120, #loc119])
#loc263 = loc(fused[#loc122, #loc121])
#loc264 = loc(fused[#loc124, #loc125])
#loc265 = loc(fused[#loc127, #loc128])
#loc266 = loc(fused[#loc129, #loc130])
#loc267 = loc(fused[#loc131, #loc132])
#loc268 = loc(fused[#loc133, #loc134])
#loc269 = loc(fused[#loc135, #loc134])
#loc270 = loc(fused[#loc138, #loc137])
#loc271 = loc(fused[#loc145, #loc146])
#loc272 = loc(fused[#loc147, #loc148])
#loc273 = loc(fused[#loc149, #loc150])
#loc274 = loc(fused[#loc151, #loc152])
#loc275 = loc(fused[#loc154, #loc155])
#loc276 = loc(fused[#loc153, #loc150])
#loc277 = loc(fused[#loc156, #loc157])
#loc278 = loc(fused[#loc158, #loc159])
#loc279 = loc(fused[#loc160, #loc157])
#loc280 = loc(fused[#loc165, #loc166])
#loc281 = loc(fused[#loc164, #loc152])
#loc282 = loc(fused[#loc167, #loc168])
#loc283 = loc(fused[#loc169, #loc170])
#loc284 = loc(fused[#loc171, #loc168])
#loc285 = loc(fused[#loc176, #loc175])
#loc286 = loc(fused[#loc178, #loc177])
#loc287 = loc(fused[#loc180, #loc181])
#loc288 = loc(fused[#loc184, #loc185])
#loc289 = loc(fused[#loc186, #loc187])
#loc290 = loc(fused[#loc188, #loc189])
#loc291 = loc(fused[#loc194, #loc195])
#loc294 = loc(fused[#loc211, #loc210])
