!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_04.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc73)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello from bad()\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc3)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_04_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc8)
      cir.if %1 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc78)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc13)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc78)
          cir.scope {
            cir.while {
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
              %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc17)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc80)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc18)
              %9 = cir.cmp(lt, %6, %8) : !s32i, !cir.bool loc(#loc81)
              cir.condition(%9) loc(#loc19)
            } do {
              cir.yield loc(#loc15)
            } loc(#loc79)
          } loc(#loc79)
        } loc(#loc77)
        %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc3)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc3)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc20)
      } loc(#loc76)
    } loc(#loc75)
    cir.return loc(#loc5)
  } loc(#loc74)
  cir.func no_proto @CWE398_Poor_Code_Quality__empty_while_04_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc83)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc23)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc84)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    cir.return loc(#loc22)
  } loc(#loc82)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc27)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Inside the while statement\00" : !cir.array<!s8i x 27>> : !cir.array<!s8i x 27> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Hello from good()\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc29)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<0> : !s32i loc(#loc34)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc34)
      cir.if %1 {
        %2 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc27)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc27)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc38)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc89)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc42)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc89)
          cir.scope {
            cir.while {
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc45)
              %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc46)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc91)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc47)
              %9 = cir.cmp(lt, %6, %8) : !s32i, !cir.bool loc(#loc92)
              cir.condition(%9) loc(#loc48)
            } do {
              cir.scope {
                %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc28)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc28)
                cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc50)
              } loc(#loc93)
              cir.yield loc(#loc44)
            } loc(#loc90)
          } loc(#loc90)
        } loc(#loc88)
        %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc29)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc51)
      } loc(#loc87)
    } loc(#loc86)
    cir.return loc(#loc31)
  } loc(#loc85)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %1 = cir.cast(int_to_bool, %0 : !s32i), !cir.bool loc(#loc56)
      cir.if %1 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i", init] {alignment = 4 : i64} loc(#loc98)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc61)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc98)
          cir.scope {
            cir.while {
              %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc64)
              %7 = cir.unary(inc, %6) nsw : !s32i, !s32i loc(#loc65)
              cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc100)
              %8 = cir.const #cir.int<10> : !s32i loc(#loc66)
              %9 = cir.cmp(lt, %6, %8) : !s32i, !cir.bool loc(#loc101)
              cir.condition(%9) loc(#loc67)
            } do {
              cir.scope {
                %6 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 27>> loc(#loc69)
                %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 27>>), !cir.ptr<!s8i> loc(#loc69)
                cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
              } loc(#loc102)
              cir.yield loc(#loc63)
            } loc(#loc99)
          } loc(#loc99)
        } loc(#loc97)
        %2 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc71)
        %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc71)
        cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc72)
      } loc(#loc96)
    } loc(#loc95)
    cir.return loc(#loc53)
  } loc(#loc94)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE398_Poor_Code_Quality/CWE398_Poor_Code_Quality__empty_while_04.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":37:19)
#loc4 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":26:1)
#loc5 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":39:1)
#loc6 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":28:5)
#loc7 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":38:5)
#loc8 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":28:8)
#loc9 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":29:5)
#loc10 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":31:9)
#loc11 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":36:9)
#loc12 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":32:13)
#loc13 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":32:21)
#loc14 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":33:13)
#loc15 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":35:13)
#loc16 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":33:20)
#loc17 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":33:19)
#loc18 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":33:25)
#loc19 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":33:23)
#loc20 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":37:9)
#loc21 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":84:1)
#loc22 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":88:1)
#loc23 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":86:5)
#loc24 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":86:11)
#loc25 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":87:5)
#loc26 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":87:11)
#loc27 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":51:19)
#loc28 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":60:27)
#loc29 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":63:19)
#loc30 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":46:1)
#loc31 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":65:1)
#loc32 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":48:5)
#loc33 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":64:5)
#loc34 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":48:8)
#loc35 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":49:5)
#loc36 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":52:5)
#loc37 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":54:5)
#loc38 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":51:9)
#loc39 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":56:9)
#loc40 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":62:9)
#loc41 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":57:13)
#loc42 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":57:21)
#loc43 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":58:13)
#loc44 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":61:13)
#loc45 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":58:20)
#loc46 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":58:19)
#loc47 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":58:25)
#loc48 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":58:23)
#loc49 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":59:13)
#loc50 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":60:17)
#loc51 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":63:9)
#loc52 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":68:1)
#loc53 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":82:1)
#loc54 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":70:5)
#loc55 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":81:5)
#loc56 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":70:8)
#loc57 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":71:5)
#loc58 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":73:9)
#loc59 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":79:9)
#loc60 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":74:13)
#loc61 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":74:21)
#loc62 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":75:13)
#loc63 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":78:13)
#loc64 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":75:20)
#loc65 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":75:19)
#loc66 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":75:25)
#loc67 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":75:23)
#loc68 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":76:13)
#loc69 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":77:27)
#loc70 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":77:17)
#loc71 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":80:19)
#loc72 = loc("CWE398_Poor_Code_Quality__empty_while_04.c":80:9)
#loc73 = loc(fused[#loc1, #loc2])
#loc74 = loc(fused[#loc4, #loc5])
#loc75 = loc(fused[#loc6, #loc7])
#loc76 = loc(fused[#loc9, #loc7])
#loc77 = loc(fused[#loc10, #loc11])
#loc78 = loc(fused[#loc12, #loc13])
#loc79 = loc(fused[#loc14, #loc15])
#loc80 = loc(fused[#loc17, #loc16])
#loc81 = loc(fused[#loc17, #loc18])
#loc82 = loc(fused[#loc21, #loc22])
#loc83 = loc(fused[#loc23, #loc24])
#loc84 = loc(fused[#loc25, #loc26])
#loc85 = loc(fused[#loc30, #loc31])
#loc86 = loc(fused[#loc32, #loc33])
#loc87 = loc(fused[#loc35, #loc36, #loc37, #loc33])
#loc88 = loc(fused[#loc39, #loc40])
#loc89 = loc(fused[#loc41, #loc42])
#loc90 = loc(fused[#loc43, #loc44])
#loc91 = loc(fused[#loc46, #loc45])
#loc92 = loc(fused[#loc46, #loc47])
#loc93 = loc(fused[#loc49, #loc44])
#loc94 = loc(fused[#loc52, #loc53])
#loc95 = loc(fused[#loc54, #loc55])
#loc96 = loc(fused[#loc57, #loc55])
#loc97 = loc(fused[#loc58, #loc59])
#loc98 = loc(fused[#loc60, #loc61])
#loc99 = loc(fused[#loc62, #loc63])
#loc100 = loc(fused[#loc65, #loc64])
#loc101 = loc(fused[#loc65, #loc66])
#loc102 = loc(fused[#loc68, #loc63])
