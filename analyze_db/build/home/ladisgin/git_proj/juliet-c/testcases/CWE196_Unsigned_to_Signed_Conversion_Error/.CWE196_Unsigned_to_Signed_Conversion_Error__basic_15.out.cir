!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc55 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:10)
#loc56 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:14)
#loc57 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:20)
#loc58 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:32)
#loc175 = loc(fused[#loc55, #loc56])
#loc176 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc153)
  cir.func private @printIntLine(!s32i) loc(#loc154)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc155)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc157)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc158)
    cir.br ^bb1 loc(#loc159)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc16)
    cir.br ^bb2 loc(#loc14)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb11 [
      6: ^bb4
    ] loc(#loc14)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc17)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc160)
  ^bb5:  // pred: ^bb4
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc20)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc161)
    cir.br ^bb6 loc(#loc162)
  ^bb6:  // pred: ^bb5
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc25)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc26)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc163)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc27)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc164)
    cir.brcond %9 ^bb7, ^bb8 loc(#loc165)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc29)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc29)
    %12 = cir.const #cir.int<2> : !u32i loc(#loc29)
    %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc29)
    %14 = cir.const #cir.int<1> : !u32i loc(#loc29)
    %15 = cir.binop(add, %13, %14) : !u32i loc(#loc29)
    %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc30)
    %17 = cir.binop(sub, %15, %16) : !u32i loc(#loc166)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc167)
    cir.br ^bb8 loc(#loc24)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc24)
  ^bb9:  // pred: ^bb8
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc32)
    %19 = cir.cast(integral, %18 : !u32i), !s32i loc(#loc32)
    cir.store %19, %1 : !s32i, !cir.ptr<!s32i> loc(#loc168)
    %20 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc34)
    cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc35)
    cir.br ^bb10 loc(#loc19)
  ^bb10:  // pred: ^bb9
    cir.br ^bb12 loc(#loc36)
  ^bb11:  // pred: ^bb2
    %21 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc7)
    %22 = cir.cast(array_to_ptrdecay, %21 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc7)
    cir.call @printLine(%22) : (!cir.ptr<!s8i>) -> () loc(#loc37)
    cir.br ^bb12 loc(#loc38)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc15)
  ^bb13:  // pred: ^bb12
    cir.return loc(#loc9)
  } loc(#loc156)
  cir.func no_proto @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc170)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc171)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc169)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc172)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc175)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc176)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc177)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc178)
    cir.call @CWE196_Unsigned_to_Signed_Conversion_Error__basic_15_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc179)
    cir.return %17 : !s32i loc(#loc179)
  } loc(#loc174)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc180)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc182)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc183)
    cir.br ^bb1 loc(#loc184)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<5> : !s32i loc(#loc83)
    cir.br ^bb2 loc(#loc81)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb5 [
      6: ^bb4
    ] loc(#loc81)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc84)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
    cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    cir.br ^bb16 loc(#loc87)
  ^bb5:  // pred: ^bb2
    cir.br ^bb6 loc(#loc185)
  ^bb6:  // pred: ^bb5
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc90)
    %6 = cir.cast(integral, %5 : !s32i), !u32i loc(#loc90)
    cir.store %6, %0 : !u32i, !cir.ptr<!u32i> loc(#loc186)
    cir.br ^bb7 loc(#loc187)
  ^bb7:  // pred: ^bb6
    %7 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
    %8 = cir.const #cir.int<2> : !s32i loc(#loc96)
    %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc188)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc97)
    %11 = cir.cmp(eq, %9, %10) : !s32i, !cir.bool loc(#loc189)
    cir.brcond %11 ^bb8, ^bb9 loc(#loc190)
  ^bb8:  // pred: ^bb7
    %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc99)
    %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc99)
    %14 = cir.const #cir.int<2> : !u32i loc(#loc99)
    %15 = cir.binop(mul, %13, %14) : !u32i loc(#loc99)
    %16 = cir.const #cir.int<1> : !u32i loc(#loc99)
    %17 = cir.binop(add, %15, %16) : !u32i loc(#loc99)
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc100)
    %19 = cir.binop(sub, %17, %18) : !u32i loc(#loc191)
    cir.store %19, %0 : !u32i, !cir.ptr<!u32i> loc(#loc192)
    cir.br ^bb9 loc(#loc94)
  ^bb9:  // 2 preds: ^bb7, ^bb8
    cir.br ^bb10 loc(#loc94)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc193)
  ^bb11:  // pred: ^bb10
    %20 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc104)
    %21 = cir.const #cir.int<2147483647> : !s32i loc(#loc105)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc105)
    %23 = cir.cmp(gt, %20, %22) : !u32i, !cir.bool loc(#loc194)
    cir.brcond %23 ^bb12, ^bb13 loc(#loc195)
  ^bb12:  // pred: ^bb11
    %24 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc107)
    %25 = cir.const #cir.int<1> : !s32i loc(#loc108)
    cir.call @exit(%25) : (!s32i) -> () extra(#fn_attr) loc(#loc107)
    cir.br ^bb13 loc(#loc103)
  ^bb13:  // 2 preds: ^bb11, ^bb12
    cir.br ^bb14 loc(#loc103)
  ^bb14:  // pred: ^bb13
    %26 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc109)
    %27 = cir.cast(integral, %26 : !u32i), !s32i loc(#loc109)
    cir.store %27, %1 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    %28 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc111)
    cir.call @printIntLine(%28) : (!s32i) -> () loc(#loc112)
    cir.br ^bb15 loc(#loc89)
  ^bb15:  // pred: ^bb14
    cir.br ^bb16 loc(#loc113)
  ^bb16:  // 2 preds: ^bb4, ^bb15
    cir.br ^bb17 loc(#loc82)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc76)
  } loc(#loc181)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["intUnsigned"] {alignment = 4 : i64} loc(#loc198)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intSigned"] {alignment = 4 : i64} loc(#loc199)
    cir.br ^bb1 loc(#loc200)
  ^bb1:  // pred: ^bb0
    %2 = cir.const #cir.int<6> : !s32i loc(#loc122)
    cir.br ^bb2 loc(#loc120)
  ^bb2:  // pred: ^bb1
    cir.switch.flat %2 : !s32i, ^bb15 [
      6: ^bb4
    ] loc(#loc120)
  ^bb3:  // no predecessors
    cir.br ^bb4 loc(#loc123)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc201)
  ^bb5:  // pred: ^bb4
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc126)
    %4 = cir.cast(integral, %3 : !s32i), !u32i loc(#loc126)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc202)
    cir.br ^bb6 loc(#loc203)
  ^bb6:  // pred: ^bb5
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc131)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc132)
    %7 = cir.binop(rem, %5, %6) : !s32i loc(#loc204)
    %8 = cir.const #cir.int<0> : !s32i loc(#loc133)
    %9 = cir.cmp(eq, %7, %8) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %9 ^bb7, ^bb8 loc(#loc206)
  ^bb7:  // pred: ^bb6
    %10 = cir.const #cir.int<2147483647> : !s32i loc(#loc135)
    %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc135)
    %12 = cir.const #cir.int<2> : !u32i loc(#loc135)
    %13 = cir.binop(mul, %11, %12) : !u32i loc(#loc135)
    %14 = cir.const #cir.int<1> : !u32i loc(#loc135)
    %15 = cir.binop(add, %13, %14) : !u32i loc(#loc135)
    %16 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc136)
    %17 = cir.binop(sub, %15, %16) : !u32i loc(#loc207)
    cir.store %17, %0 : !u32i, !cir.ptr<!u32i> loc(#loc208)
    cir.br ^bb8 loc(#loc130)
  ^bb8:  // 2 preds: ^bb6, ^bb7
    cir.br ^bb9 loc(#loc130)
  ^bb9:  // pred: ^bb8
    cir.br ^bb10 loc(#loc209)
  ^bb10:  // pred: ^bb9
    %18 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc140)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc141)
    %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc141)
    %21 = cir.cmp(gt, %18, %20) : !u32i, !cir.bool loc(#loc210)
    cir.brcond %21 ^bb11, ^bb12 loc(#loc211)
  ^bb11:  // pred: ^bb10
    %22 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc143)
    %23 = cir.const #cir.int<1> : !s32i loc(#loc144)
    cir.call @exit(%23) : (!s32i) -> () extra(#fn_attr) loc(#loc143)
    cir.br ^bb12 loc(#loc139)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc139)
  ^bb13:  // pred: ^bb12
    %24 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc145)
    %25 = cir.cast(integral, %24 : !u32i), !s32i loc(#loc145)
    cir.store %25, %1 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %26 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc148)
    cir.br ^bb14 loc(#loc125)
  ^bb14:  // pred: ^bb13
    cir.br ^bb16 loc(#loc149)
  ^bb15:  // pred: ^bb2
    %27 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
    %28 = cir.cast(array_to_ptrdecay, %27 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
    cir.call @printLine(%28) : (!cir.ptr<!s8i>) -> () loc(#loc151)
    cir.br ^bb16 loc(#loc152)
  ^bb16:  // 2 preds: ^bb14, ^bb15
    cir.br ^bb17 loc(#loc121)
  ^bb17:  // pred: ^bb16
    cir.return loc(#loc115)
  } loc(#loc197)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE196_Unsigned_to_Signed_Conversion_Error/CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:19)
#loc8 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":20:1)
#loc9 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":43:1)
#loc10 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:9)
#loc11 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":26:18)
#loc12 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:9)
#loc13 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":27:13)
#loc14 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:5)
#loc15 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":42:5)
#loc16 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":22:12)
#loc17 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":24:5)
#loc18 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":25:5)
#loc19 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":36:5)
#loc20 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:23)
#loc21 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:9)
#loc22 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":28:28)
#loc23 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:9)
#loc24 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":32:9)
#loc25 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:13)
#loc26 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:22)
#loc27 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":29:27)
#loc28 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":30:9)
#loc29 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:27)
#loc30 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:38)
#loc31 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":31:13)
#loc32 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:21)
#loc33 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":34:9)
#loc34 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:22)
#loc35 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":35:9)
#loc36 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":37:5)
#loc37 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":40:9)
#loc38 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":41:9)
#loc39 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":109:1)
#loc40 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":113:1)
#loc41 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:5)
#loc42 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":111:11)
#loc43 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:5)
#loc44 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":112:11)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":129:15)
#loc50 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":131:15)
#loc51 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":134:15)
#loc52 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":136:15)
#loc53 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":124:1)
#loc54 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":139:1)
#loc59 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":125:1)
#loc60 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:27)
#loc61 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:22)
#loc62 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":127:5)
#loc63 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":129:5)
#loc64 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":130:5)
#loc65 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":130:63)
#loc66 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":131:5)
#loc67 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":134:5)
#loc68 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":135:5)
#loc69 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":135:62)
#loc70 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":136:5)
#loc71 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":138:12)
#loc72 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":138:5)
#loc73 = loc("/usr/include/stdlib.h":756:1)
#loc74 = loc("/usr/include/stdlib.h":756:70)
#loc75 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":50:1)
#loc76 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":77:1)
#loc77 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:9)
#loc78 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":60:18)
#loc79 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:9)
#loc80 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":61:13)
#loc81 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:5)
#loc82 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":76:5)
#loc83 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":52:12)
#loc84 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":54:5)
#loc85 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:19)
#loc86 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":56:9)
#loc87 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":57:9)
#loc88 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":59:5)
#loc89 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":74:5)
#loc90 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:23)
#loc91 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:9)
#loc92 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":62:28)
#loc93 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:9)
#loc94 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":66:9)
#loc95 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:13)
#loc96 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:22)
#loc97 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":63:27)
#loc98 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":64:9)
#loc99 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:27)
#loc100 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:38)
#loc101 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":65:13)
#loc102 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:9)
#loc103 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":71:9)
#loc104 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:13)
#loc105 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":68:27)
#loc106 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":69:9)
#loc107 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:13)
#loc108 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":70:18)
#loc109 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:21)
#loc110 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":72:9)
#loc111 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:22)
#loc112 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":73:9)
#loc113 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":75:5)
#loc114 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":80:1)
#loc115 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":107:1)
#loc116 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:9)
#loc117 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":86:18)
#loc118 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:9)
#loc119 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":87:13)
#loc120 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:5)
#loc121 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":106:5)
#loc122 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":82:12)
#loc123 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":84:5)
#loc124 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":85:5)
#loc125 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":100:5)
#loc126 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:23)
#loc127 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:9)
#loc128 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":88:28)
#loc129 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:9)
#loc130 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":92:9)
#loc131 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:13)
#loc132 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:22)
#loc133 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":89:27)
#loc134 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":90:9)
#loc135 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:27)
#loc136 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:38)
#loc137 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":91:13)
#loc138 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:9)
#loc139 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":97:9)
#loc140 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:13)
#loc141 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":94:27)
#loc142 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":95:9)
#loc143 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:13)
#loc144 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":96:18)
#loc145 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:21)
#loc146 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":98:9)
#loc147 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:22)
#loc148 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":99:9)
#loc149 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":101:5)
#loc150 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:19)
#loc151 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":104:9)
#loc152 = loc("CWE196_Unsigned_to_Signed_Conversion_Error__basic_15.c":105:9)
#loc153 = loc(fused[#loc1, #loc2])
#loc154 = loc(fused[#loc3, #loc4])
#loc155 = loc(fused[#loc5, #loc6])
#loc156 = loc(fused[#loc8, #loc9])
#loc157 = loc(fused[#loc10, #loc11])
#loc158 = loc(fused[#loc12, #loc13])
#loc159 = loc(fused[#loc14, #loc15])
#loc160 = loc(fused[#loc18, #loc19])
#loc161 = loc(fused[#loc21, #loc22])
#loc162 = loc(fused[#loc23, #loc24])
#loc163 = loc(fused[#loc25, #loc26])
#loc164 = loc(fused[#loc25, #loc27])
#loc165 = loc(fused[#loc28, #loc24])
#loc166 = loc(fused[#loc29, #loc30])
#loc167 = loc(fused[#loc31, #loc30])
#loc168 = loc(fused[#loc33, #loc32])
#loc169 = loc(fused[#loc39, #loc40])
#loc170 = loc(fused[#loc41, #loc42])
#loc171 = loc(fused[#loc43, #loc44])
#loc172 = loc(fused[#loc45, #loc46])
#loc173 = loc(fused[#loc47, #loc48])
#loc174 = loc(fused[#loc53, #loc54])
#loc177 = loc(fused[#loc64, #loc65])
#loc178 = loc(fused[#loc68, #loc69])
#loc179 = loc(fused[#loc72, #loc71])
#loc180 = loc(fused[#loc73, #loc74])
#loc181 = loc(fused[#loc75, #loc76])
#loc182 = loc(fused[#loc77, #loc78])
#loc183 = loc(fused[#loc79, #loc80])
#loc184 = loc(fused[#loc81, #loc82])
#loc185 = loc(fused[#loc88, #loc89])
#loc186 = loc(fused[#loc91, #loc92])
#loc187 = loc(fused[#loc93, #loc94])
#loc188 = loc(fused[#loc95, #loc96])
#loc189 = loc(fused[#loc95, #loc97])
#loc190 = loc(fused[#loc98, #loc94])
#loc191 = loc(fused[#loc99, #loc100])
#loc192 = loc(fused[#loc101, #loc100])
#loc193 = loc(fused[#loc102, #loc103])
#loc194 = loc(fused[#loc104, #loc105])
#loc195 = loc(fused[#loc106, #loc103])
#loc196 = loc(fused[#loc110, #loc109])
#loc197 = loc(fused[#loc114, #loc115])
#loc198 = loc(fused[#loc116, #loc117])
#loc199 = loc(fused[#loc118, #loc119])
#loc200 = loc(fused[#loc120, #loc121])
#loc201 = loc(fused[#loc124, #loc125])
#loc202 = loc(fused[#loc127, #loc128])
#loc203 = loc(fused[#loc129, #loc130])
#loc204 = loc(fused[#loc131, #loc132])
#loc205 = loc(fused[#loc131, #loc133])
#loc206 = loc(fused[#loc134, #loc130])
#loc207 = loc(fused[#loc135, #loc136])
#loc208 = loc(fused[#loc137, #loc136])
#loc209 = loc(fused[#loc138, #loc139])
#loc210 = loc(fused[#loc140, #loc141])
#loc211 = loc(fused[#loc142, #loc139])
#loc212 = loc(fused[#loc146, #loc145])
