!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc81)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc83)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc12)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc12)
        cir.condition(%4) loc(#loc12)
      } do {
        %3 = cir.const #cir.int<0> : !s32i loc(#loc13)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc86)
        cir.break loc(#loc15)
      } loc(#loc85)
    } loc(#loc85)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc18)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc18)
        cir.condition(%4) loc(#loc18)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc19)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc88)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc21)
        cir.break loc(#loc22)
      } loc(#loc87)
    } loc(#loc87)
    cir.return loc(#loc4)
  } loc(#loc82)
  cir.func no_proto  @CWE369_Divide_by_Zero__int_zero_modulo_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc90)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc91)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc89)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc92)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc94)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc95)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc41)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc41)
        cir.condition(%4) loc(#loc41)
      } do {
        %3 = cir.const #cir.int<0> : !s32i loc(#loc42)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
        cir.break loc(#loc44)
      } loc(#loc96)
    } loc(#loc96)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc47)
        cir.condition(%4) loc(#loc47)
      } do {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc50)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc51)
          %5 = cir.cmp(ne, %3, %4) : !s32i, !s32i loc(#loc100)
          %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc52)
          cir.if %6 {
            %7 = cir.const #cir.int<100> : !s32i loc(#loc56)
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc57)
            %9 = cir.binop(rem, %7, %8) : !s32i loc(#loc102)
            cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc58)
          } else {
            %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc59)
          } loc(#loc101)
        } loc(#loc99)
        cir.break loc(#loc60)
      } loc(#loc98)
    } loc(#loc98)
    cir.return loc(#loc33)
  } loc(#loc93)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc104)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc65)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc66)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc105)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc70)
        cir.condition(%4) loc(#loc70)
      } do {
        %3 = cir.const #cir.int<7> : !s32i loc(#loc71)
        cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc107)
        cir.break loc(#loc73)
      } loc(#loc106)
    } loc(#loc106)
    cir.scope {
      cir.while {
        %3 = cir.const #cir.int<1> : !s32i loc(#loc76)
        %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc76)
        cir.condition(%4) loc(#loc76)
      } do {
        %3 = cir.const #cir.int<100> : !s32i loc(#loc77)
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
        %5 = cir.binop(rem, %3, %4) : !s32i loc(#loc109)
        cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc79)
        cir.break loc(#loc80)
      } loc(#loc108)
    } loc(#loc108)
    cir.return loc(#loc62)
  } loc(#loc103)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_modulo_16.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":22:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":39:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":24:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":24:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":26:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":26:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":26:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":27:5)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":32:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":27:11)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":30:16)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":30:9)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":31:9)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":33:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":38:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":33:11)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":36:22)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":36:28)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":36:9)
#loc22 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":37:9)
#loc23 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":92:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":96:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":94:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":94:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":95:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":95:13)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":66:23)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":46:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":70:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":48:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":48:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":50:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":50:12)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":50:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":51:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":56:5)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":51:11)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":54:16)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":54:9)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":55:9)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":57:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":69:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":57:11)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":60:9)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":67:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":60:13)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":60:21)
#loc52 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":60:18)
#loc53 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":61:9)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":63:9)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":65:9)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":62:26)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":62:32)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":62:13)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":66:13)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":68:9)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":73:1)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":90:1)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":75:5)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":75:9)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":77:13)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":77:12)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":77:5)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":78:5)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":83:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":78:11)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":81:16)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":81:9)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":82:9)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":84:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":89:5)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":84:11)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":87:22)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":87:28)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":87:9)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_modulo_16.c":88:9)
#loc81 = loc(fused[#loc1, #loc2])
#loc82 = loc(fused[#loc3, #loc4])
#loc83 = loc(fused[#loc5, #loc6])
#loc84 = loc(fused[#loc9, #loc7])
#loc85 = loc(fused[#loc10, #loc11])
#loc86 = loc(fused[#loc14, #loc13])
#loc87 = loc(fused[#loc16, #loc17])
#loc88 = loc(fused[#loc19, #loc20])
#loc89 = loc(fused[#loc23, #loc24])
#loc90 = loc(fused[#loc25, #loc26])
#loc91 = loc(fused[#loc27, #loc28])
#loc92 = loc(fused[#loc29, #loc30])
#loc93 = loc(fused[#loc32, #loc33])
#loc94 = loc(fused[#loc34, #loc35])
#loc95 = loc(fused[#loc38, #loc36])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc43, #loc42])
#loc98 = loc(fused[#loc45, #loc46])
#loc99 = loc(fused[#loc48, #loc49])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc53, #loc54, #loc55, #loc49])
#loc102 = loc(fused[#loc56, #loc57])
#loc103 = loc(fused[#loc61, #loc62])
#loc104 = loc(fused[#loc63, #loc64])
#loc105 = loc(fused[#loc67, #loc65])
#loc106 = loc(fused[#loc68, #loc69])
#loc107 = loc(fused[#loc72, #loc71])
#loc108 = loc(fused[#loc74, #loc75])
#loc109 = loc(fused[#loc77, #loc78])
