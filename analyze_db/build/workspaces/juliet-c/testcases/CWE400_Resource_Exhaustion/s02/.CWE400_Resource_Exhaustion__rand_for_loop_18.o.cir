!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Hello\00" : !cir.array<!s8i x 6>> : !cir.array<!s8i x 6> {alignment = 1 : i64} loc(#loc5)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc13)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc111)
    cir.goto "source" loc(#loc112)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc17)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc18)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc18)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
      cir.yield %23 : !u32i loc(#loc18)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc18)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc18)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc18)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc18)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc18)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc18)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc18)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc18)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc18)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc18)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc18)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc18)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc18)
      cir.yield %27 : !u32i loc(#loc18)
    }) : (!cir.bool) -> !u32i loc(#loc18)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc18)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    cir.goto "sink" loc(#loc114)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc22)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc11)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc11)
    cir.store %11, %1 : !u64i, !cir.ptr<!u64i> loc(#loc110)
    cir.scope {
      %12 = cir.const #cir.int<0> : !s32i loc(#loc25)
      %13 = cir.cast(integral, %12 : !s32i), !u64i loc(#loc25)
      cir.store %13, %1 : !u64i, !cir.ptr<!u64i> loc(#loc116)
      cir.for : cond {
        %14 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc27)
        %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc28)
        %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc28)
        %17 = cir.cmp(lt, %14, %16) : !u64i, !cir.bool loc(#loc117)
        cir.condition(%17) loc(#loc29)
      } body {
        cir.scope {
          %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc5)
          %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc5)
          cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc31)
        } loc(#loc118)
        cir.yield loc(#loc24)
      } step {
        %14 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc32)
        %15 = cir.unary(inc, %14) : !u64i, !u64i loc(#loc33)
        cir.store %15, %1 : !u64i, !cir.ptr<!u64i> loc(#loc119)
        cir.yield loc(#loc115)
      } loc(#loc115)
    } loc(#loc115)
    cir.return loc(#loc7)
  } loc(#loc108)
  cir.func no_proto @CWE400_Resource_Exhaustion__rand_for_loop_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc121)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc122)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc35)
  } loc(#loc120)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc124)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc125)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc46)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc47)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc126)
    cir.goto "source" loc(#loc127)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc51)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
    %5 = cir.const #cir.int<1> : !s32i loc(#loc52)
    %6 = cir.binop(and, %4, %5) : !s32i loc(#loc52)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc52)
    %8 = cir.ternary(%7, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc52)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc52)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc52)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc52)
      cir.yield %23 : !u32i loc(#loc52)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc52)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc52)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc52)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc52)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc52)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc52)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc52)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc52)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc52)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc52)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc52)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc52)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc52)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc52)
      cir.yield %27 : !u32i loc(#loc52)
    }) : (!cir.bool) -> !u32i loc(#loc52)
    %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc52)
    cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc128)
    cir.goto "sink" loc(#loc129)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc56)
    %10 = cir.const #cir.int<0> : !s32i loc(#loc45)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc45)
    cir.store %11, %1 : !u64i, !cir.ptr<!u64i> loc(#loc125)
    cir.scope {
      %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
      %13 = cir.const #cir.int<0> : !s32i loc(#loc60)
      %14 = cir.cmp(gt, %12, %13) : !s32i, !cir.bool loc(#loc131)
      %15 = cir.ternary(%14, true {
        %16 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc62)
        %17 = cir.const #cir.int<20> : !s32i loc(#loc63)
        %18 = cir.cmp(le, %16, %17) : !s32i, !cir.bool loc(#loc132)
        %19 = cir.ternary(%18, true {
          %20 = cir.const #true loc(#loc61)
          cir.yield %20 : !cir.bool loc(#loc61)
        }, false {
          %20 = cir.const #false loc(#loc61)
          cir.yield %20 : !cir.bool loc(#loc61)
        }) : (!cir.bool) -> !cir.bool loc(#loc61)
        cir.yield %19 : !cir.bool loc(#loc61)
      }, false {
        %16 = cir.const #false loc(#loc61)
        cir.yield %16 : !cir.bool loc(#loc61)
      }) : (!cir.bool) -> !cir.bool loc(#loc61)
      cir.if %15 {
        cir.scope {
          %16 = cir.const #cir.int<0> : !s32i loc(#loc67)
          %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc67)
          cir.store %17, %1 : !u64i, !cir.ptr<!u64i> loc(#loc135)
          cir.for : cond {
            %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc69)
            %19 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
            %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc70)
            %21 = cir.cmp(lt, %18, %20) : !u64i, !cir.bool loc(#loc136)
            cir.condition(%21) loc(#loc71)
          } body {
            cir.scope {
              %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc73)
              %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc73)
              cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc74)
            } loc(#loc137)
            cir.yield loc(#loc66)
          } step {
            %18 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc75)
            %19 = cir.unary(inc, %18) : !u64i, !u64i loc(#loc76)
            cir.store %19, %1 : !u64i, !cir.ptr<!u64i> loc(#loc138)
            cir.yield loc(#loc134)
          } loc(#loc134)
        } loc(#loc134)
      } loc(#loc133)
    } loc(#loc130)
    cir.return loc(#loc41)
  } loc(#loc123)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc140)
    %1 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i", init] {alignment = 8 : i64} loc(#loc141)
    %2 = cir.const #cir.int<1> : !s32i loc(#loc83)
    %3 = cir.unary(minus, %2) nsw : !s32i, !s32i loc(#loc84)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    cir.goto "source" loc(#loc143)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc88)
    %4 = cir.const #cir.int<20> : !s32i loc(#loc89)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.goto "sink" loc(#loc145)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc93)
    %5 = cir.const #cir.int<0> : !s32i loc(#loc82)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc82)
    cir.store %6, %1 : !u64i, !cir.ptr<!u64i> loc(#loc141)
    cir.scope {
      %7 = cir.const #cir.int<0> : !s32i loc(#loc96)
      %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc96)
      cir.store %8, %1 : !u64i, !cir.ptr<!u64i> loc(#loc147)
      cir.for : cond {
        %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc98)
        %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc99)
        %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc99)
        %12 = cir.cmp(lt, %9, %11) : !u64i, !cir.bool loc(#loc148)
        cir.condition(%12) loc(#loc100)
      } body {
        cir.scope {
          %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 6>> loc(#loc102)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 6>>), !cir.ptr<!s8i> loc(#loc102)
          cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc103)
        } loc(#loc149)
        cir.yield loc(#loc95)
      } step {
        %9 = cir.load %1 : !cir.ptr<!u64i>, !u64i loc(#loc104)
        %10 = cir.unary(inc, %9) : !u64i, !u64i loc(#loc105)
        cir.store %10, %1 : !u64i, !cir.ptr<!u64i> loc(#loc150)
        cir.yield loc(#loc146)
      } loc(#loc146)
    } loc(#loc146)
    cir.return loc(#loc78)
  } loc(#loc139)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_for_loop_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":38:23)
#loc6 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":22:1)
#loc7 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":41:1)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":24:5)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":24:9)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":34:9)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":34:20)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":26:14)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":26:13)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":26:5)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":27:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":27:10)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":28:1)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":30:13)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":30:5)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":31:5)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":31:10)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":32:1)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":39:9)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:18)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:14)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:21)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:33)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:23)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":37:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":38:13)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:41)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":36:40)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":94:1)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":98:1)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":96:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":96:13)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":97:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":97:13)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":48:1)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":70:1)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":50:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":50:9)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":60:9)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":60:20)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":52:14)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":52:13)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":52:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":53:5)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":53:10)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":54:1)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":56:13)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":56:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":57:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":57:10)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":58:1)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":68:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:13)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:21)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:23)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:26)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":62:35)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":63:9)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:13)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":67:13)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:22)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:18)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:25)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:37)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:27)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":65:13)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":66:27)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":66:17)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:45)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":64:44)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":73:1)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":92:1)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":75:5)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":75:9)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":85:9)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":85:20)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":77:14)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":77:13)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":77:5)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":78:5)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":78:10)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":79:1)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":81:13)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":81:5)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":82:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":82:10)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":83:1)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:9)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":90:9)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:18)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:14)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:21)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:33)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:23)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":88:9)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":89:23)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":89:13)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:41)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_for_loop_18.c":87:40)
#loc106 = loc(fused[#loc1, #loc2])
#loc107 = loc(fused[#loc3, #loc4])
#loc108 = loc(fused[#loc6, #loc7])
#loc109 = loc(fused[#loc8, #loc9])
#loc110 = loc(fused[#loc10, #loc11])
#loc111 = loc(fused[#loc14, #loc12])
#loc112 = loc(fused[#loc15, #loc16])
#loc113 = loc(fused[#loc19, #loc18])
#loc114 = loc(fused[#loc20, #loc21])
#loc115 = loc(fused[#loc23, #loc24])
#loc116 = loc(fused[#loc26, #loc25])
#loc117 = loc(fused[#loc27, #loc28])
#loc118 = loc(fused[#loc30, #loc24])
#loc119 = loc(fused[#loc33, #loc32])
#loc120 = loc(fused[#loc34, #loc35])
#loc121 = loc(fused[#loc36, #loc37])
#loc122 = loc(fused[#loc38, #loc39])
#loc123 = loc(fused[#loc40, #loc41])
#loc124 = loc(fused[#loc42, #loc43])
#loc125 = loc(fused[#loc44, #loc45])
#loc126 = loc(fused[#loc48, #loc46])
#loc127 = loc(fused[#loc49, #loc50])
#loc128 = loc(fused[#loc53, #loc52])
#loc129 = loc(fused[#loc54, #loc55])
#loc130 = loc(fused[#loc57, #loc58])
#loc131 = loc(fused[#loc59, #loc60])
#loc132 = loc(fused[#loc62, #loc63])
#loc133 = loc(fused[#loc64, #loc58])
#loc134 = loc(fused[#loc65, #loc66])
#loc135 = loc(fused[#loc68, #loc67])
#loc136 = loc(fused[#loc69, #loc70])
#loc137 = loc(fused[#loc72, #loc66])
#loc138 = loc(fused[#loc76, #loc75])
#loc139 = loc(fused[#loc77, #loc78])
#loc140 = loc(fused[#loc79, #loc80])
#loc141 = loc(fused[#loc81, #loc82])
#loc142 = loc(fused[#loc85, #loc83])
#loc143 = loc(fused[#loc86, #loc87])
#loc144 = loc(fused[#loc90, #loc89])
#loc145 = loc(fused[#loc91, #loc92])
#loc146 = loc(fused[#loc94, #loc95])
#loc147 = loc(fused[#loc97, #loc96])
#loc148 = loc(fused[#loc98, #loc99])
#loc149 = loc(fused[#loc101, #loc95])
#loc150 = loc(fused[#loc105, #loc104])
