!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc6 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":22:21)
#loc7 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":22:25)
#loc72 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":146:10)
#loc73 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":146:14)
#loc74 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":146:20)
#loc75 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":146:32)
#loc92 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":63:25)
#loc93 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":63:29)
#loc142 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":99:25)
#loc143 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":99:29)
#true = #cir.bool<true> : !cir.bool
#loc194 = loc(fused[#loc6, #loc7])
#loc220 = loc(fused[#loc72, #loc73])
#loc221 = loc(fused[#loc74, #loc75])
#loc226 = loc(fused[#loc92, #loc93])
#loc245 = loc(fused[#loc142, #loc143])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_44.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc192)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"ERROR: Array index is negative.\00" : !cir.array<!s8i x 32>> : !cir.array<!s8i x 32> {alignment = 1 : i64} loc(#loc3)
  cir.func internal private @badSink(%arg0: !s32i loc(fused[#loc6, #loc7])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc194)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc8)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc196)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc197)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc197)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc197)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc18)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc199)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc24)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc24)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc201)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc27)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc203)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc29)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc30)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc204)
              cir.condition(%14) loc(#loc31)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc33)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc34)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc34)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc34)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc35)
              } loc(#loc205)
              cir.yield loc(#loc26)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc36)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc37)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc206)
              cir.yield loc(#loc202)
            } loc(#loc202)
          } loc(#loc202)
        } else {
          %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc3)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc3)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc38)
        } loc(#loc200)
      } loc(#loc198)
    } loc(#loc195)
    cir.return loc(#loc5)
  } loc(#loc193)
  cir.func private @rand() -> !s32i extra(#fn_attr1) loc(#loc207)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_44_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc209)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc210)
    %2 = cir.get_global @badSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc46)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc210)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc47)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc48)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc50)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc50)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc50)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc50)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc50)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc50)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc50)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc50)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc50)
      cir.yield %24 : !u32i loc(#loc50)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc50)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc50)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc50)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc50)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc50)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc50)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc50)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc50)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc50)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc50)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc50)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc50)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc50)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc50)
      cir.yield %28 : !u32i loc(#loc50)
    }) : (!cir.bool) -> !u32i loc(#loc50)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc50)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc212)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc52)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc53)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc52)
    cir.return loc(#loc42)
  } loc(#loc208)
  cir.func no_proto @CWE124_Buffer_Underwrite__CWE839_rand_44_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc214)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc56)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc215)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc58)
    cir.return loc(#loc55)
  } loc(#loc213)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc216)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc217)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc218)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc66)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc68)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc69)
  cir.func @main(%arg0: !s32i loc(fused[#loc72, #loc73]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc74, #loc75])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc220)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc221)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc71)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc76)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc77)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc78)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc78)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc79)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc66)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc66)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc80)
    %8 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_rand_44_good : !cir.ptr<!cir.func<!void ()>> loc(#loc222)
    cir.call @CWE124_Buffer_Underwrite__CWE839_rand_44_good() : () -> () loc(#loc81)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc67)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc67)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc83)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc68)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    %13 = cir.get_global @CWE124_Buffer_Underwrite__CWE839_rand_44_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc223)
    cir.call @CWE124_Buffer_Underwrite__CWE839_rand_44_bad() : () -> () loc(#loc85)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc69)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc69)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc88)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc224)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc224)
    cir.return %17 : !s32i loc(#loc224)
  } loc(#loc219)
  cir.func internal private @goodG2BSink(%arg0: !s32i loc(fused[#loc92, #loc93])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc226)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc228)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc229)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc229)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc229)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc103)
        %5 = cir.const #cir.int<10> : !s32i loc(#loc104)
        %6 = cir.cmp(lt, %4, %5) : !s32i, !cir.bool loc(#loc231)
        cir.if %6 {
          %7 = cir.const #cir.int<1> : !s32i loc(#loc108)
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc109)
          %9 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc110)
          %10 = cir.ptr_stride(%9 : !cir.ptr<!s32i>, %8 : !s32i), !cir.ptr<!s32i> loc(#loc110)
          cir.store %7, %10 : !s32i, !cir.ptr<!s32i> loc(#loc233)
          cir.scope {
            %11 = cir.const #cir.int<0> : !s32i loc(#loc113)
            cir.store %11, %1 : !s32i, !cir.ptr<!s32i> loc(#loc235)
            cir.for : cond {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc115)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc116)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc236)
              cir.condition(%14) loc(#loc117)
            } body {
              cir.scope {
                %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc119)
                %13 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc120)
                %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc120)
                %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc120)
                cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc121)
              } loc(#loc237)
              cir.yield loc(#loc112)
            } step {
              %12 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %13 = cir.unary(inc, %12) : !s32i, !s32i loc(#loc123)
              cir.store %13, %1 : !s32i, !cir.ptr<!s32i> loc(#loc238)
              cir.yield loc(#loc234)
            } loc(#loc234)
          } loc(#loc234)
        } else {
          %7 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 32>> loc(#loc124)
          %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 32>>), !cir.ptr<!s8i> loc(#loc124)
          cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc125)
        } loc(#loc232)
      } loc(#loc230)
    } loc(#loc227)
    cir.return loc(#loc91)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc241)
    %2 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc131)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc241)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc132)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc133)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc242)
    %5 = cir.const #cir.int<7> : !s32i loc(#loc135)
    cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc243)
    %6 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc137)
    %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc138)
    cir.call %6(%7) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc137)
    cir.return loc(#loc127)
  } loc(#loc239)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc139)
  cir.func internal private @goodB2GSink(%arg0: !s32i loc(fused[#loc142, #loc143])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc245)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc144)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc247)
      %2 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc248)
      %3 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc248)
      cir.store %3, %2 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc248)
      cir.scope {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc153)
        %5 = cir.const #cir.int<0> : !s32i loc(#loc154)
        %6 = cir.cmp(ge, %4, %5) : !s32i, !cir.bool loc(#loc250)
        %7 = cir.ternary(%6, true {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc156)
          %9 = cir.const #cir.int<10> : !s32i loc(#loc157)
          %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc251)
          %11 = cir.ternary(%10, true {
            %12 = cir.const #true loc(#loc155)
            cir.yield %12 : !cir.bool loc(#loc155)
          }, false {
            %12 = cir.const #false loc(#loc155)
            cir.yield %12 : !cir.bool loc(#loc155)
          }) : (!cir.bool) -> !cir.bool loc(#loc155)
          cir.yield %11 : !cir.bool loc(#loc155)
        }, false {
          %8 = cir.const #false loc(#loc155)
          cir.yield %8 : !cir.bool loc(#loc155)
        }) : (!cir.bool) -> !cir.bool loc(#loc155)
        cir.if %7 {
          %8 = cir.const #cir.int<1> : !s32i loc(#loc162)
          %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc163)
          %10 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc164)
          %11 = cir.ptr_stride(%10 : !cir.ptr<!s32i>, %9 : !s32i), !cir.ptr<!s32i> loc(#loc164)
          cir.store %8, %11 : !s32i, !cir.ptr<!s32i> loc(#loc253)
          cir.scope {
            %12 = cir.const #cir.int<0> : !s32i loc(#loc167)
            cir.store %12, %1 : !s32i, !cir.ptr<!s32i> loc(#loc255)
            cir.for : cond {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc169)
              %14 = cir.const #cir.int<10> : !s32i loc(#loc170)
              %15 = cir.cmp(lt, %13, %14) : !s32i, !cir.bool loc(#loc256)
              cir.condition(%15) loc(#loc171)
            } body {
              cir.scope {
                %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc173)
                %14 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc174)
                %15 = cir.ptr_stride(%14 : !cir.ptr<!s32i>, %13 : !s32i), !cir.ptr<!s32i> loc(#loc174)
                %16 = cir.load %15 : !cir.ptr<!s32i>, !s32i loc(#loc174)
                cir.call @printIntLine(%16) : (!s32i) -> () loc(#loc175)
              } loc(#loc257)
              cir.yield loc(#loc166)
            } step {
              %13 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc176)
              %14 = cir.unary(inc, %13) : !s32i, !s32i loc(#loc177)
              cir.store %14, %1 : !s32i, !cir.ptr<!s32i> loc(#loc258)
              cir.yield loc(#loc254)
            } loc(#loc254)
          } loc(#loc254)
        } else {
          %8 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc139)
          %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc139)
          cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc178)
        } loc(#loc252)
      } loc(#loc249)
    } loc(#loc246)
    cir.return loc(#loc141)
  } loc(#loc244)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc260)
    %1 = cir.alloca !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, ["funcPtr", init] {alignment = 8 : i64} loc(#loc261)
    %2 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc184)
    cir.store %2, %1 : !cir.ptr<!cir.func<!void (!s32i)>>, !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>> loc(#loc261)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc185)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc186)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc262)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc188)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc188)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc188)
    %9 = cir.ternary(%8, true {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc188)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc188)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc188)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc188)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc188)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc188)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc188)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc188)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc188)
      cir.yield %24 : !u32i loc(#loc188)
    }, false {
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc188)
      %15 = cir.const #cir.int<30> : !s32i loc(#loc188)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc188)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc188)
      %19 = cir.const #cir.int<15> : !s32i loc(#loc188)
      %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc188)
      %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc188)
      %22 = cir.call @rand() : () -> !s32i extra(#fn_attr1) loc(#loc188)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc188)
      %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc188)
      %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc188)
      %26 = cir.const #cir.int<1> : !s32i loc(#loc188)
      %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc188)
      %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc188)
      cir.yield %28 : !u32i loc(#loc188)
    }) : (!cir.bool) -> !u32i loc(#loc188)
    %10 = cir.cast(integral, %9 : !u32i), !s32i loc(#loc188)
    cir.store %10, %0 : !s32i, !cir.ptr<!s32i> loc(#loc263)
    %11 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.func<!void (!s32i)>>>, !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc190)
    %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
    cir.call %11(%12) : (!cir.ptr<!cir.func<!void (!s32i)>>, !s32i) -> () loc(#loc190)
    cir.return loc(#loc180)
  } loc(#loc259)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE124_Buffer_Underwrite/s02/CWE124_Buffer_Underwrite__CWE839_rand_44.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":40:23)
#loc4 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":22:1)
#loc5 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":43:1)
#loc8 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":23:1)
#loc9 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":24:5)
#loc10 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":42:5)
#loc11 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":25:9)
#loc12 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":25:13)
#loc13 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":26:9)
#loc14 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":26:30)
#loc15 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":29:9)
#loc16 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":41:9)
#loc17 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":29:13)
#loc18 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":29:20)
#loc19 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":30:9)
#loc20 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":37:9)
#loc21 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":39:9)
#loc22 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":31:28)
#loc23 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":31:20)
#loc24 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":31:13)
#loc25 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:13)
#loc26 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":36:13)
#loc27 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:21)
#loc28 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:17)
#loc29 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:24)
#loc30 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:28)
#loc31 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:26)
#loc32 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":34:13)
#loc33 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":35:37)
#loc34 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":35:30)
#loc35 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":35:17)
#loc36 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:33)
#loc37 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":33:32)
#loc38 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":40:13)
#loc39 = loc("/usr/include/stdlib.h":573:1)
#loc40 = loc("/usr/include/stdlib.h":573:24)
#loc41 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":45:1)
#loc42 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":56:1)
#loc43 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":47:5)
#loc44 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":47:9)
#loc45 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":49:5)
#loc46 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":49:29)
#loc47 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":51:13)
#loc48 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":51:12)
#loc49 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":51:5)
#loc50 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":53:12)
#loc51 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":53:5)
#loc52 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":55:5)
#loc53 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":55:13)
#loc54 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":132:1)
#loc55 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":136:1)
#loc56 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":134:5)
#loc57 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":134:13)
#loc58 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":135:5)
#loc59 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":135:13)
#loc60 = loc("/usr/include/stdlib.h":575:1)
#loc61 = loc("/usr/include/stdlib.h":575:41)
#loc62 = loc("/usr/include/time.h":76:1)
#loc63 = loc("/usr/include/time.h":76:38)
#loc64 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc66 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":151:15)
#loc67 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":153:15)
#loc68 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":156:15)
#loc69 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":158:15)
#loc70 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":146:1)
#loc71 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":161:1)
#loc76 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":147:1)
#loc77 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":149:27)
#loc78 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":149:22)
#loc79 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":149:5)
#loc80 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":151:5)
#loc81 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":152:5)
#loc82 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":152:51)
#loc83 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":153:5)
#loc84 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":156:5)
#loc85 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":157:5)
#loc86 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":157:50)
#loc87 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":158:5)
#loc88 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":160:12)
#loc89 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":160:5)
#loc90 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":63:1)
#loc91 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":84:1)
#loc94 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":64:1)
#loc95 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":65:5)
#loc96 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":83:5)
#loc97 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":66:9)
#loc98 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":66:13)
#loc99 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":67:9)
#loc100 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":67:30)
#loc101 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":70:9)
#loc102 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":82:9)
#loc103 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":70:13)
#loc104 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":70:20)
#loc105 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":71:9)
#loc106 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":78:9)
#loc107 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":80:9)
#loc108 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":72:28)
#loc109 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":72:20)
#loc110 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":72:13)
#loc111 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:13)
#loc112 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":77:13)
#loc113 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:21)
#loc114 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:17)
#loc115 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:24)
#loc116 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:28)
#loc117 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:26)
#loc118 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":75:13)
#loc119 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":76:37)
#loc120 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":76:30)
#loc121 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":76:17)
#loc122 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:33)
#loc123 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":74:32)
#loc124 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":81:23)
#loc125 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":81:13)
#loc126 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":86:1)
#loc127 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":96:1)
#loc128 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":88:5)
#loc129 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":88:9)
#loc130 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":89:5)
#loc131 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":89:29)
#loc132 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":91:13)
#loc133 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":91:12)
#loc134 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":91:5)
#loc135 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":94:12)
#loc136 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":94:5)
#loc137 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":95:5)
#loc138 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":95:13)
#loc139 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":116:23)
#loc140 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":99:1)
#loc141 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":119:1)
#loc144 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":100:1)
#loc145 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":101:5)
#loc146 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":118:5)
#loc147 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":102:9)
#loc148 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":102:13)
#loc149 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":103:9)
#loc150 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":103:30)
#loc151 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:9)
#loc152 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":117:9)
#loc153 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:13)
#loc154 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:21)
#loc155 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:23)
#loc156 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:26)
#loc157 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:34)
#loc158 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":105:36)
#loc159 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":106:9)
#loc160 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":113:9)
#loc161 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":115:9)
#loc162 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":107:28)
#loc163 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":107:20)
#loc164 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":107:13)
#loc165 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:13)
#loc166 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":112:13)
#loc167 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:21)
#loc168 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:17)
#loc169 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:24)
#loc170 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:28)
#loc171 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:26)
#loc172 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":110:13)
#loc173 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":111:37)
#loc174 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":111:30)
#loc175 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":111:17)
#loc176 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:33)
#loc177 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":109:32)
#loc178 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":116:13)
#loc179 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":121:1)
#loc180 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":130:1)
#loc181 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":123:5)
#loc182 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":123:9)
#loc183 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":124:5)
#loc184 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":124:29)
#loc185 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":126:13)
#loc186 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":126:12)
#loc187 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":126:5)
#loc188 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":128:12)
#loc189 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":128:5)
#loc190 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":129:5)
#loc191 = loc("CWE124_Buffer_Underwrite__CWE839_rand_44.c":129:13)
#loc192 = loc(fused[#loc1, #loc2])
#loc193 = loc(fused[#loc4, #loc5])
#loc195 = loc(fused[#loc9, #loc10])
#loc196 = loc(fused[#loc11, #loc12])
#loc197 = loc(fused[#loc13, #loc14])
#loc198 = loc(fused[#loc15, #loc16])
#loc199 = loc(fused[#loc17, #loc18])
#loc200 = loc(fused[#loc19, #loc20, #loc21, #loc16])
#loc201 = loc(fused[#loc24, #loc22])
#loc202 = loc(fused[#loc25, #loc26])
#loc203 = loc(fused[#loc28, #loc27])
#loc204 = loc(fused[#loc29, #loc30])
#loc205 = loc(fused[#loc32, #loc26])
#loc206 = loc(fused[#loc37, #loc36])
#loc207 = loc(fused[#loc39, #loc40])
#loc208 = loc(fused[#loc41, #loc42])
#loc209 = loc(fused[#loc43, #loc44])
#loc210 = loc(fused[#loc45, #loc46])
#loc211 = loc(fused[#loc49, #loc47])
#loc212 = loc(fused[#loc51, #loc50])
#loc213 = loc(fused[#loc54, #loc55])
#loc214 = loc(fused[#loc56, #loc57])
#loc215 = loc(fused[#loc58, #loc59])
#loc216 = loc(fused[#loc60, #loc61])
#loc217 = loc(fused[#loc62, #loc63])
#loc218 = loc(fused[#loc64, #loc65])
#loc219 = loc(fused[#loc70, #loc71])
#loc222 = loc(fused[#loc81, #loc82])
#loc223 = loc(fused[#loc85, #loc86])
#loc224 = loc(fused[#loc89, #loc88])
#loc225 = loc(fused[#loc90, #loc91])
#loc227 = loc(fused[#loc95, #loc96])
#loc228 = loc(fused[#loc97, #loc98])
#loc229 = loc(fused[#loc99, #loc100])
#loc230 = loc(fused[#loc101, #loc102])
#loc231 = loc(fused[#loc103, #loc104])
#loc232 = loc(fused[#loc105, #loc106, #loc107, #loc102])
#loc233 = loc(fused[#loc110, #loc108])
#loc234 = loc(fused[#loc111, #loc112])
#loc235 = loc(fused[#loc114, #loc113])
#loc236 = loc(fused[#loc115, #loc116])
#loc237 = loc(fused[#loc118, #loc112])
#loc238 = loc(fused[#loc123, #loc122])
#loc239 = loc(fused[#loc126, #loc127])
#loc240 = loc(fused[#loc128, #loc129])
#loc241 = loc(fused[#loc130, #loc131])
#loc242 = loc(fused[#loc134, #loc132])
#loc243 = loc(fused[#loc136, #loc135])
#loc244 = loc(fused[#loc140, #loc141])
#loc246 = loc(fused[#loc145, #loc146])
#loc247 = loc(fused[#loc147, #loc148])
#loc248 = loc(fused[#loc149, #loc150])
#loc249 = loc(fused[#loc151, #loc152])
#loc250 = loc(fused[#loc153, #loc154])
#loc251 = loc(fused[#loc156, #loc158])
#loc252 = loc(fused[#loc159, #loc160, #loc161, #loc152])
#loc253 = loc(fused[#loc164, #loc162])
#loc254 = loc(fused[#loc165, #loc166])
#loc255 = loc(fused[#loc168, #loc167])
#loc256 = loc(fused[#loc169, #loc170])
#loc257 = loc(fused[#loc172, #loc166])
#loc258 = loc(fused[#loc177, #loc176])
#loc259 = loc(fused[#loc179, #loc180])
#loc260 = loc(fused[#loc181, #loc182])
#loc261 = loc(fused[#loc183, #loc184])
#loc262 = loc(fused[#loc187, #loc185])
#loc263 = loc(fused[#loc189, #loc188])
