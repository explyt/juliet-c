!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc76)
  cir.func private @printIntLine(!s32i) loc(#loc77)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc79)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc9)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc10)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.goto "source" loc(#loc81)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc14)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc15)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc15)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc15)
    %7 = cir.ternary(%6, true {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
      cir.yield %23 : !u32i loc(#loc15)
    }, false {
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc15)
      %14 = cir.const #cir.int<30> : !s32i loc(#loc15)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc15)
      %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc15)
      %18 = cir.const #cir.int<15> : !s32i loc(#loc15)
      %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc15)
      %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc15)
      %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc15)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc15)
      %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc15)
      %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc15)
      %25 = cir.const #cir.int<1> : !s32i loc(#loc15)
      %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc15)
      %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc15)
      cir.yield %27 : !u32i loc(#loc15)
    }) : (!cir.bool) -> !u32i loc(#loc15)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc15)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    cir.goto "sink" loc(#loc83)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc19)
    %9 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %10 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc21)
    %11 = cir.binop(rem, %9, %10) : !s32i loc(#loc84)
    cir.call @printIntLine(%11) : (!s32i) -> () loc(#loc22)
    cir.return loc(#loc6)
  } loc(#loc78)
  cir.func no_proto @CWE369_Divide_by_Zero__int_rand_modulo_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc85)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc31)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc90)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc36)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc37)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc91)
    cir.goto "source" loc(#loc92)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc41)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc42)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc42)
    %7 = cir.ternary(%6, true {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      cir.yield %20 : !u32i loc(#loc42)
    }, false {
      %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc42)
      %11 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc42)
      %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc42)
      %15 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc42)
      %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc42)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc42)
      %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc42)
      %21 = cir.unary(minus, %20) : !u32i, !u32i loc(#loc42)
      %22 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc42)
      %24 = cir.binop(sub, %21, %23) : !u32i loc(#loc42)
      cir.yield %24 : !u32i loc(#loc42)
    }) : (!cir.bool) -> !u32i loc(#loc42)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc42)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    cir.goto "sink" loc(#loc94)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc46)
    cir.scope {
      %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc49)
      %10 = cir.const #cir.int<0> : !s32i loc(#loc50)
      %11 = cir.cmp(ne, %9, %10) : !s32i, !cir.bool loc(#loc96)
      cir.if %11 {
        %12 = cir.const #cir.int<100> : !s32i loc(#loc54)
        %13 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc55)
        %14 = cir.binop(rem, %12, %13) : !s32i loc(#loc98)
        cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc56)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc31)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc57)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc33)
  } loc(#loc89)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc100)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc62)
    %2 = cir.unary(minus, %1) nsw : !s32i, !s32i loc(#loc63)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc101)
    cir.goto "source" loc(#loc102)
  ^bb1:  // no predecessors
    cir.label "source" loc(#loc67)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc68)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.goto "sink" loc(#loc104)
  ^bb2:  // no predecessors
    cir.label "sink" loc(#loc72)
    %4 = cir.const #cir.int<100> : !s32i loc(#loc73)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc105)
    cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc75)
    cir.return loc(#loc59)
  } loc(#loc99)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_rand_modulo_18.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":22:1)
#loc6 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":35:1)
#loc7 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":24:5)
#loc8 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":24:9)
#loc9 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":26:13)
#loc10 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":26:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":26:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":27:5)
#loc13 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":27:10)
#loc14 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":28:1)
#loc15 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":30:12)
#loc16 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":30:5)
#loc17 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":31:5)
#loc18 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":31:10)
#loc19 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":32:1)
#loc20 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":34:18)
#loc21 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":34:24)
#loc22 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":34:5)
#loc23 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":80:1)
#loc24 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":84:1)
#loc25 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":82:5)
#loc26 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":82:13)
#loc27 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":83:5)
#loc28 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":83:13)
#loc29 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc30 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc31 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":60:19)
#loc32 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":42:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":62:1)
#loc34 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":44:5)
#loc35 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":44:9)
#loc36 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":46:13)
#loc37 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":46:12)
#loc38 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":46:5)
#loc39 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":47:5)
#loc40 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":47:10)
#loc41 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":48:1)
#loc42 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":50:12)
#loc43 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":50:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":51:5)
#loc45 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":51:10)
#loc46 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":52:1)
#loc47 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":54:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":61:5)
#loc49 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":54:9)
#loc50 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":54:17)
#loc51 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":55:5)
#loc52 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":57:5)
#loc53 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":59:5)
#loc54 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":56:22)
#loc55 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":56:28)
#loc56 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":56:9)
#loc57 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":60:9)
#loc58 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":65:1)
#loc59 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":78:1)
#loc60 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":67:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":67:9)
#loc62 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":69:13)
#loc63 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":69:12)
#loc64 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":69:5)
#loc65 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":70:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":70:10)
#loc67 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":71:1)
#loc68 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":73:12)
#loc69 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":73:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":74:5)
#loc71 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":74:10)
#loc72 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":75:1)
#loc73 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":77:18)
#loc74 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":77:24)
#loc75 = loc("CWE369_Divide_by_Zero__int_rand_modulo_18.c":77:5)
#loc76 = loc(fused[#loc1, #loc2])
#loc77 = loc(fused[#loc3, #loc4])
#loc78 = loc(fused[#loc5, #loc6])
#loc79 = loc(fused[#loc7, #loc8])
#loc80 = loc(fused[#loc11, #loc9])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc16, #loc15])
#loc83 = loc(fused[#loc17, #loc18])
#loc84 = loc(fused[#loc20, #loc21])
#loc85 = loc(fused[#loc23, #loc24])
#loc86 = loc(fused[#loc25, #loc26])
#loc87 = loc(fused[#loc27, #loc28])
#loc88 = loc(fused[#loc29, #loc30])
#loc89 = loc(fused[#loc32, #loc33])
#loc90 = loc(fused[#loc34, #loc35])
#loc91 = loc(fused[#loc38, #loc36])
#loc92 = loc(fused[#loc39, #loc40])
#loc93 = loc(fused[#loc43, #loc42])
#loc94 = loc(fused[#loc44, #loc45])
#loc95 = loc(fused[#loc47, #loc48])
#loc96 = loc(fused[#loc49, #loc50])
#loc97 = loc(fused[#loc51, #loc52, #loc53, #loc48])
#loc98 = loc(fused[#loc54, #loc55])
#loc99 = loc(fused[#loc58, #loc59])
#loc100 = loc(fused[#loc60, #loc61])
#loc101 = loc(fused[#loc64, #loc62])
#loc102 = loc(fused[#loc65, #loc66])
#loc103 = loc(fused[#loc69, #loc68])
#loc104 = loc(fused[#loc70, #loc71])
#loc105 = loc(fused[#loc73, #loc74])
