!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_01.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc78)
  cir.func private @printIntLine(!s32i) loc(#loc79)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_01_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc82)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc11)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc11)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      cir.yield %19 : !u32i loc(#loc11)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc11)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc11)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc11)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc11)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc11)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc11)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc11)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc11)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc11)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc11)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc11)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc11)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc11)
      cir.yield %23 : !u32i loc(#loc11)
    }) : (!cir.bool) -> !u32i loc(#loc11)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc11)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc16)
      %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc85)
      cir.if %10 {
        %11 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc87)
        %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc20)
        %13 = cir.const #cir.int<2> : !s32i loc(#loc19)
        %14 = cir.binop(mul, %12, %13) nsw : !s32i loc(#loc20)
        cir.store %14, %11 : !s32i, !cir.ptr<!s32i> loc(#loc87)
        %15 = cir.load %11 : !cir.ptr<!s32i>, !s32i loc(#loc21)
        cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc22)
      } loc(#loc86)
    } loc(#loc84)
    cir.return loc(#loc6)
  } loc(#loc80)
  cir.func no_proto @CWE190_Integer_Overflow__int_rand_multiply_01_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc89)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc25)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc90)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc27)
    cir.return loc(#loc24)
  } loc(#loc88)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc92)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc33)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc93)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc35)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc94)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc40)
      %5 = cir.cmp(gt, %3, %4) : !s32i, !cir.bool loc(#loc96)
      cir.if %5 {
        %6 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc98)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc44)
        %8 = cir.const #cir.int<2> : !s32i loc(#loc43)
        %9 = cir.binop(mul, %7, %8) nsw : !s32i loc(#loc44)
        cir.store %9, %6 : !s32i, !cir.ptr<!s32i> loc(#loc98)
        %10 = cir.load %6 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        cir.call @printIntLine(%10) : (!s32i) -> () loc(#loc46)
      } loc(#loc97)
    } loc(#loc95)
    cir.return loc(#loc30)
  } loc(#loc91)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc99)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc49)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc101)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc102)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc56)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc56)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc56)
    %6 = cir.ternary(%5, true {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc56)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc56)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc56)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc56)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc56)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc56)
      cir.yield %19 : !u32i loc(#loc56)
    }, false {
      %8 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %9 = cir.cast(integral, %8 : !s32i), !u32i loc(#loc56)
      %10 = cir.const #cir.int<30> : !s32i loc(#loc56)
      %11 = cir.shift(left, %9 : !u32i, %10 : !s32i) -> !u32i loc(#loc56)
      %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc56)
      %14 = cir.const #cir.int<15> : !s32i loc(#loc56)
      %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc56)
      %16 = cir.binop(xor, %11, %15) : !u32i loc(#loc56)
      %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
      %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc56)
      %19 = cir.binop(xor, %16, %18) : !u32i loc(#loc56)
      %20 = cir.unary(minus, %19) : !u32i, !u32i loc(#loc56)
      %21 = cir.const #cir.int<1> : !s32i loc(#loc56)
      %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc56)
      %23 = cir.binop(sub, %20, %22) : !u32i loc(#loc56)
      cir.yield %23 : !u32i loc(#loc56)
    }) : (!cir.bool) -> !u32i loc(#loc56)
    %7 = cir.cast(integral, %6 : !u32i), !s32i loc(#loc56)
    cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc103)
    cir.scope {
      %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %9 = cir.const #cir.int<0> : !s32i loc(#loc61)
      %10 = cir.cmp(gt, %8, %9) : !s32i, !cir.bool loc(#loc105)
      cir.if %10 {
        cir.scope {
          %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc65)
          %12 = cir.const #cir.int<2147483647> : !s32i loc(#loc66)
          %13 = cir.const #cir.int<2> : !s32i loc(#loc67)
          %14 = cir.binop(div, %12, %13) : !s32i loc(#loc108)
          %15 = cir.cmp(lt, %11, %14) : !s32i, !cir.bool loc(#loc109)
          cir.if %15 {
            %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc111)
            %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %18 = cir.const #cir.int<2> : !s32i loc(#loc73)
            %19 = cir.binop(mul, %17, %18) nsw : !s32i loc(#loc74)
            cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc111)
            %20 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc75)
            cir.call @printIntLine(%20) : (!s32i) -> () loc(#loc76)
          } else {
            %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc49)
            %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc49)
            cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc77)
          } loc(#loc110)
        } loc(#loc107)
      } loc(#loc106)
    } loc(#loc104)
    cir.return loc(#loc51)
  } loc(#loc100)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__int_rand_multiply_01.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":35:1)
#loc7 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":26:12)
#loc10 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":26:5)
#loc11 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":28:12)
#loc12 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":28:5)
#loc13 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:5)
#loc14 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":34:5)
#loc15 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:8)
#loc16 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":29:15)
#loc17 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":30:5)
#loc18 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:9)
#loc19 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:29)
#loc20 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":32:22)
#loc21 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":33:22)
#loc22 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":33:9)
#loc23 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":80:1)
#loc24 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":84:1)
#loc25 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":82:5)
#loc26 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":82:13)
#loc27 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":83:5)
#loc28 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":83:13)
#loc29 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":42:1)
#loc30 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":55:1)
#loc31 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":44:5)
#loc32 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":44:9)
#loc33 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":46:12)
#loc34 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":46:5)
#loc35 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":48:12)
#loc36 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:5)
#loc38 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":54:5)
#loc39 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:8)
#loc40 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":49:15)
#loc41 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":50:5)
#loc42 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:9)
#loc43 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:29)
#loc44 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":52:22)
#loc45 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":53:22)
#loc46 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":53:9)
#loc47 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc48 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc49 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":75:23)
#loc50 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":58:1)
#loc51 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":78:1)
#loc52 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":60:5)
#loc53 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":60:9)
#loc54 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":62:12)
#loc55 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":62:5)
#loc56 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":64:12)
#loc57 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":64:5)
#loc58 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:5)
#loc59 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":77:5)
#loc60 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:8)
#loc61 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":65:15)
#loc62 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":66:5)
#loc63 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:9)
#loc64 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":76:9)
#loc65 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:13)
#loc66 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:21)
#loc67 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:29)
#loc68 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":68:30)
#loc69 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":69:9)
#loc70 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":72:9)
#loc71 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:13)
#loc73 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:33)
#loc74 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":70:26)
#loc75 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":71:26)
#loc76 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":71:13)
#loc77 = loc("CWE190_Integer_Overflow__int_rand_multiply_01.c":75:13)
#loc78 = loc(fused[#loc1, #loc2])
#loc79 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc5, #loc6])
#loc81 = loc(fused[#loc7, #loc8])
#loc82 = loc(fused[#loc10, #loc9])
#loc83 = loc(fused[#loc12, #loc11])
#loc84 = loc(fused[#loc13, #loc14])
#loc85 = loc(fused[#loc15, #loc16])
#loc86 = loc(fused[#loc17, #loc14])
#loc87 = loc(fused[#loc18, #loc19])
#loc88 = loc(fused[#loc23, #loc24])
#loc89 = loc(fused[#loc25, #loc26])
#loc90 = loc(fused[#loc27, #loc28])
#loc91 = loc(fused[#loc29, #loc30])
#loc92 = loc(fused[#loc31, #loc32])
#loc93 = loc(fused[#loc34, #loc33])
#loc94 = loc(fused[#loc36, #loc35])
#loc95 = loc(fused[#loc37, #loc38])
#loc96 = loc(fused[#loc39, #loc40])
#loc97 = loc(fused[#loc41, #loc38])
#loc98 = loc(fused[#loc42, #loc43])
#loc99 = loc(fused[#loc47, #loc48])
#loc100 = loc(fused[#loc50, #loc51])
#loc101 = loc(fused[#loc52, #loc53])
#loc102 = loc(fused[#loc55, #loc54])
#loc103 = loc(fused[#loc57, #loc56])
#loc104 = loc(fused[#loc58, #loc59])
#loc105 = loc(fused[#loc60, #loc61])
#loc106 = loc(fused[#loc62, #loc59])
#loc107 = loc(fused[#loc63, #loc64])
#loc108 = loc(fused[#loc66, #loc67])
#loc109 = loc(fused[#loc65, #loc68])
#loc110 = loc(fused[#loc69, #loc70, #loc71, #loc64])
#loc111 = loc(fused[#loc72, #loc73])
