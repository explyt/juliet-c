!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc179 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":184:10)
#loc180 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":184:14)
#loc181 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":184:20)
#loc182 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":184:32)
#true = #cir.bool<true> : !cir.bool
!ty_in_addr = !cir.struct<struct "in_addr" {!u32i} #cir.record.decl.ast>
#loc286 = loc(fused[#loc179, #loc180])
#loc287 = loc(fused[#loc181, #loc182])
!ty_sockaddr = !cir.struct<struct "sockaddr" {!u16i, !cir.array<!s8i x 14>} #cir.record.decl.ast>
!ty_sockaddr_in = !cir.struct<struct "sockaddr_in" {!u16i, !u16i, !ty_in_addr, !cir.array<!u8i x 8>}>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f64 = dense<64> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" constant cir_private @__const.goodG2B.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc218)
  cir.global "private" constant cir_private @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_16_bad.dataBuffer = #cir.const_array<"ls " : !cir.array<!s8i x 3>, trailing_zeros> : !cir.array<!s8i x 100> loc(#loc219)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc220)
  cir.func private @socket(!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc221)
  cir.func private @inet_addr(!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc222)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"127.0.0.1\00" : !cir.array<!s8i x 10>> : !cir.array<!s8i x 10> {alignment = 1 : i64} loc(#loc11)
  cir.func private @htons(!u16i) -> !u16i extra(#fn_attr) loc(#loc223)
  cir.func private @connect(!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc224)
  cir.func private @recv(!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc225)
  cir.func private @strchr(!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc226)
  cir.func private @close(!s32i) -> !s32i loc(#loc227)
  cir.func private @execlp(!cir.ptr<!s8i>, !cir.ptr<!s8i>, ...) -> !s32i extra(#fn_attr) loc(#loc228)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"sh\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc24)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"-c\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc25)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc230)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc219)
    %2 = cir.get_global @__const.CWE78_OS_Command_Injection__char_connect_socket_execlp_16_bad.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc219)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc219)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc30)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc231)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc34)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc34)
        cir.condition(%14) loc(#loc34)
      } do {
        cir.scope {
          %13 = cir.alloca !s32i, !cir.ptr<!s32i>, ["recvResult"] {alignment = 4 : i64} loc(#loc234)
          %14 = cir.alloca !ty_sockaddr_in, !cir.ptr<!ty_sockaddr_in>, ["service"] {alignment = 4 : i64} loc(#loc235)
          %15 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["replace"] {alignment = 8 : i64} loc(#loc236)
          %16 = cir.alloca !s32i, !cir.ptr<!s32i>, ["connectSocket", init] {alignment = 4 : i64} loc(#loc237)
          %17 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc238)
          %18 = cir.const #cir.int<1> : !s32i loc(#loc44)
          %19 = cir.unary(minus, %18) : !s32i, !s32i loc(#loc44)
          cir.store %19, %16 : !s32i, !cir.ptr<!s32i> loc(#loc237)
          %20 = cir.get_global @strlen : !cir.ptr<!cir.func<!u64i (!cir.ptr<!s8i>)>> loc(#loc47)
          %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
          %22 = cir.call @strlen(%21) : (!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc47)
          cir.store %22, %17 : !u64i, !cir.ptr<!u64i> loc(#loc238)
          cir.scope {
            cir.do {
              %23 = cir.const #cir.int<2> : !s32i loc(#loc51)
              %24 = cir.const #cir.int<1> : !s32i loc(#loc52)
              %25 = cir.const #cir.int<6> : !s32i loc(#loc53)
              %26 = cir.call @socket(%23, %24, %25) : (!s32i, !s32i, !s32i) -> !s32i extra(#fn_attr) loc(#loc54)
              cir.store %26, %16 : !s32i, !cir.ptr<!s32i> loc(#loc240)
              cir.scope {
                %77 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc59)
                %78 = cir.const #cir.int<1> : !s32i loc(#loc60)
                %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc60)
                %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc242)
                cir.if %80 {
                  cir.break loc(#loc62)
                } loc(#loc243)
              } loc(#loc241)
              %27 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!void> loc(#loc244)
              %28 = cir.const #cir.int<0> : !s32i loc(#loc65)
              %29 = cir.const #cir.int<16> : !u64i loc(#loc245)
              cir.libc.memset %29 bytes from %27 set to %28 : !cir.ptr<!void>, !s32i, !u64i loc(#loc246)
              %30 = cir.const #cir.int<2> : !s32i loc(#loc70)
              %31 = cir.cast(integral, %30 : !s32i), !u16i loc(#loc70)
              %32 = cir.get_member %14[0] {name = "sin_family"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc71)
              cir.store %31, %32 : !u16i, !cir.ptr<!u16i> loc(#loc247)
              %33 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 10>> loc(#loc11)
              %34 = cir.cast(array_to_ptrdecay, %33 : !cir.ptr<!cir.array<!s8i x 10>>), !cir.ptr<!s8i> loc(#loc11)
              %35 = cir.call @inet_addr(%34) : (!cir.ptr<!s8i>) -> !u32i extra(#fn_attr) loc(#loc73)
              %36 = cir.get_member %14[2] {name = "sin_addr"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!ty_in_addr> loc(#loc74)
              %37 = cir.get_member %36[0] {name = "s_addr"} : !cir.ptr<!ty_in_addr> -> !cir.ptr<!u32i> loc(#loc75)
              cir.store %35, %37 : !u32i, !cir.ptr<!u32i> loc(#loc248)
              %38 = cir.const #cir.int<27015> : !s32i loc(#loc78)
              %39 = cir.cast(integral, %38 : !s32i), !u16i loc(#loc78)
              %40 = cir.call @htons(%39) : (!u16i) -> !u16i extra(#fn_attr) loc(#loc79)
              %41 = cir.get_member %14[1] {name = "sin_port"} : !cir.ptr<!ty_sockaddr_in> -> !cir.ptr<!u16i> loc(#loc80)
              cir.store %40, %41 : !u16i, !cir.ptr<!u16i> loc(#loc249)
              cir.scope {
                %77 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc85)
                %78 = cir.cast(bitcast, %14 : !cir.ptr<!ty_sockaddr_in>), !cir.ptr<!ty_sockaddr> loc(#loc251)
                %79 = cir.const #cir.int<16> : !u64i loc(#loc252)
                %80 = cir.cast(integral, %79 : !u64i), !u32i loc(#loc252)
                %81 = cir.call @connect(%77, %78, %80) : (!s32i, !cir.ptr<!ty_sockaddr>, !u32i) -> !s32i loc(#loc90)
                %82 = cir.const #cir.int<1> : !s32i loc(#loc91)
                %83 = cir.unary(minus, %82) : !s32i, !s32i loc(#loc91)
                %84 = cir.cmp(eq, %81, %83) : !s32i, !cir.bool loc(#loc253)
                cir.if %84 {
                  cir.break loc(#loc93)
                } loc(#loc254)
              } loc(#loc250)
              %42 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc94)
              %43 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc95)
              %44 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc96)
              %45 = cir.ptr_stride(%43 : !cir.ptr<!s8i>, %44 : !u64i), !cir.ptr<!s8i> loc(#loc97)
              %46 = cir.cast(bitcast, %45 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc255)
              %47 = cir.const #cir.int<1> : !u64i loc(#loc256)
              %48 = cir.const #cir.int<100> : !s32i loc(#loc102)
              %49 = cir.cast(integral, %48 : !s32i), !u64i loc(#loc102)
              %50 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc103)
              %51 = cir.binop(sub, %49, %50) : !u64i loc(#loc257)
              %52 = cir.const #cir.int<1> : !s32i loc(#loc104)
              %53 = cir.cast(integral, %52 : !s32i), !u64i loc(#loc104)
              %54 = cir.binop(sub, %51, %53) : !u64i loc(#loc258)
              %55 = cir.binop(mul, %47, %54) : !u64i loc(#loc259)
              %56 = cir.const #cir.int<0> : !s32i loc(#loc106)
              %57 = cir.call @recv(%42, %46, %55, %56) : (!s32i, !cir.ptr<!void>, !u64i, !s32i) -> !s64i loc(#loc107)
              %58 = cir.cast(integral, %57 : !s64i), !s32i loc(#loc107)
              cir.store %58, %13 : !s32i, !cir.ptr<!s32i> loc(#loc260)
              cir.scope {
                %77 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc112)
                %78 = cir.const #cir.int<1> : !s32i loc(#loc113)
                %79 = cir.unary(minus, %78) : !s32i, !s32i loc(#loc113)
                %80 = cir.cmp(eq, %77, %79) : !s32i, !cir.bool loc(#loc262)
                %81 = cir.ternary(%80, true {
                  %82 = cir.const #true loc(#loc114)
                  cir.yield %82 : !cir.bool loc(#loc114)
                }, false {
                  %82 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc115)
                  %83 = cir.const #cir.int<0> : !s32i loc(#loc116)
                  %84 = cir.cmp(eq, %82, %83) : !s32i, !cir.bool loc(#loc263)
                  %85 = cir.ternary(%84, true {
                    %86 = cir.const #true loc(#loc114)
                    cir.yield %86 : !cir.bool loc(#loc114)
                  }, false {
                    %86 = cir.const #false loc(#loc114)
                    cir.yield %86 : !cir.bool loc(#loc114)
                  }) : (!cir.bool) -> !cir.bool loc(#loc114)
                  cir.yield %85 : !cir.bool loc(#loc114)
                }) : (!cir.bool) -> !cir.bool loc(#loc114)
                cir.if %81 {
                  cir.break loc(#loc118)
                } loc(#loc264)
              } loc(#loc261)
              %59 = cir.const #cir.int<0> : !s32i loc(#loc119)
              %60 = cir.cast(integral, %59 : !s32i), !s8i loc(#loc119)
              %61 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc120)
              %62 = cir.load %17 : !cir.ptr<!u64i>, !u64i loc(#loc121)
              %63 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc122)
              %64 = cir.cast(integral, %63 : !s32i), !u64i loc(#loc122)
              %65 = cir.const #cir.int<1> : !u64i loc(#loc265)
              %66 = cir.binop(div, %64, %65) : !u64i loc(#loc266)
              %67 = cir.binop(add, %62, %66) : !u64i loc(#loc267)
              %68 = cir.ptr_stride(%61 : !cir.ptr<!s8i>, %67 : !u64i), !cir.ptr<!s8i> loc(#loc125)
              cir.store %60, %68 : !s8i, !cir.ptr<!s8i> loc(#loc268)
              %69 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc126)
              %70 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
              %71 = cir.const #cir.int<13> : !s32i loc(#loc128)
              %72 = cir.call @strchr(%70, %71) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc126)
              cir.store %72, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc269)
              cir.scope {
                %77 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc133)
                %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc133)
                cir.if %78 {
                  %79 = cir.const #cir.int<0> : !s32i loc(#loc135)
                  %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc135)
                  %81 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc136)
                  cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc272)
                } loc(#loc271)
              } loc(#loc270)
              %73 = cir.get_global @strchr : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !s32i)>> loc(#loc138)
              %74 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc139)
              %75 = cir.const #cir.int<10> : !s32i loc(#loc140)
              %76 = cir.call @strchr(%74, %75) : (!cir.ptr<!s8i>, !s32i) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc138)
              cir.store %76, %15 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc273)
              cir.scope {
                %77 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc145)
                %78 = cir.cast(ptr_to_bool, %77 : !cir.ptr<!s8i>), !cir.bool loc(#loc145)
                cir.if %78 {
                  %79 = cir.const #cir.int<0> : !s32i loc(#loc147)
                  %80 = cir.cast(integral, %79 : !s32i), !s8i loc(#loc147)
                  %81 = cir.load deref %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc148)
                  cir.store %80, %81 : !s8i, !cir.ptr<!s8i> loc(#loc276)
                } loc(#loc275)
              } loc(#loc274)
              cir.yield loc(#loc50)
            } while {
              %23 = cir.const #cir.int<0> : !s32i loc(#loc150)
              %24 = cir.cast(int_to_bool, %23 : !s32i), !cir.bool loc(#loc150)
              cir.condition(%24) loc(#loc150)
            } loc(#loc239)
          } loc(#loc239)
          cir.scope {
            %23 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc153)
            %24 = cir.const #cir.int<1> : !s32i loc(#loc154)
            %25 = cir.unary(minus, %24) : !s32i, !s32i loc(#loc154)
            %26 = cir.cmp(ne, %23, %25) : !s32i, !cir.bool loc(#loc278)
            cir.if %26 {
              %27 = cir.load %16 : !cir.ptr<!s32i>, !s32i loc(#loc156)
              %28 = cir.call @close(%27) : (!s32i) -> !s32i loc(#loc157)
            } loc(#loc279)
          } loc(#loc277)
        } loc(#loc233)
        cir.break loc(#loc158)
      } loc(#loc232)
    } loc(#loc232)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc24)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc24)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc159)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc159)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc25)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc25)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc161)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc162)
    cir.return loc(#loc27)
  } loc(#loc229)
  cir.func no_proto @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc281)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc165)
    cir.return loc(#loc164)
  } loc(#loc280)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc282)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc283)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc284)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc173)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc174)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc175)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc176)
  cir.func @main(%arg0: !s32i loc(fused[#loc179, #loc180]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc181, #loc182])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc286)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc287)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc178)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc183)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc184)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc185)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc185)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc186)
    %6 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc173)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc173)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc187)
    %8 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc288)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_good() : () -> () loc(#loc188)
    %9 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc174)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc174)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc190)
    %11 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc175)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc175)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc191)
    %13 = cir.get_global @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc289)
    cir.call @CWE78_OS_Command_Injection__char_connect_socket_execlp_16_bad() : () -> () loc(#loc192)
    %14 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc176)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc176)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc194)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc195)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc290)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc290)
    cir.return %17 : !s32i loc(#loc290)
  } loc(#loc285)
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc291)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"*.*\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc199)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc293)
    %1 = cir.alloca !cir.array<!s8i x 100>, !cir.ptr<!cir.array<!s8i x 100>>, ["dataBuffer"] {alignment = 16 : i64} loc(#loc218)
    %2 = cir.get_global @__const.goodG2B.dataBuffer : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc218)
    cir.copy %2 to %1 : !cir.ptr<!cir.array<!s8i x 100>> loc(#loc218)
    %3 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 100>>), !cir.ptr<!s8i> loc(#loc204)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc294)
    cir.scope {
      cir.while {
        %13 = cir.const #cir.int<1> : !s32i loc(#loc208)
        %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc208)
        cir.condition(%14) loc(#loc208)
      } do {
        %13 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc209)
        %14 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc210)
        %15 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc199)
        %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc199)
        %17 = cir.call @strcat(%14, %16) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc209)
        cir.break loc(#loc211)
      } loc(#loc295)
    } loc(#loc295)
    %4 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc212)
    %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc212)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc213)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc213)
    %8 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc214)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc214)
    %10 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
    %11 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc216)
    %12 = cir.call @execlp(%5, %7, %9, %10, %11) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!void>) -> !s32i extra(#fn_attr) loc(#loc217)
    cir.return loc(#loc201)
  } loc(#loc292)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE78_OS_Command_Injection/s01/CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":0:0)
#loc1 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":155:5)
#loc2 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":155:28)
#loc3 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":68:5)
#loc4 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":68:28)
#loc5 = loc("/usr/include/string.h":407:1)
#loc6 = loc("/usr/include/string.h":408:33)
#loc7 = loc("/usr/include/sys/socket.h":102:1)
#loc8 = loc("/usr/include/sys/socket.h":102:62)
#loc9 = loc("/usr/include/arpa/inet.h":34:1)
#loc10 = loc("/usr/include/arpa/inet.h":34:47)
#loc11 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":99:53)
#loc12 = loc("/usr/include/netinet/in.h":404:1)
#loc13 = loc("/usr/include/netinet/in.h":405:40)
#loc14 = loc("/usr/include/sys/socket.h":126:1)
#loc15 = loc("/usr/include/sys/socket.h":126:75)
#loc16 = loc("/usr/include/sys/socket.h":145:1)
#loc17 = loc("/usr/include/sys/socket.h":145:68)
#loc18 = loc("/usr/include/string.h":246:1)
#loc19 = loc("/usr/include/string.h":247:33)
#loc20 = loc("/usr/include/unistd.h":358:1)
#loc21 = loc("/usr/include/unistd.h":358:27)
#loc22 = loc("/usr/include/unistd.h":605:1)
#loc23 = loc("/usr/include/unistd.h":606:14)
#loc24 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:12)
#loc25 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:38)
#loc26 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":65:1)
#loc27 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":145:1)
#loc28 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":67:5)
#loc29 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":67:12)
#loc30 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":69:12)
#loc31 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":69:5)
#loc32 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":70:5)
#loc33 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":140:5)
#loc34 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":70:11)
#loc35 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":72:9)
#loc36 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":138:9)
#loc37 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":77:13)
#loc38 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":77:17)
#loc39 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":78:13)
#loc40 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":78:32)
#loc41 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":79:13)
#loc42 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":79:19)
#loc43 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":80:13)
#loc44 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":80:36)
#loc45 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":81:13)
#loc46 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":81:41)
#loc47 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":81:30)
#loc48 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":81:37)
#loc49 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":82:13)
#loc50 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":127:21)
#loc51 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:40)
#loc52 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:49)
#loc53 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:62)
#loc54 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:33)
#loc55 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:17)
#loc56 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":92:73)
#loc57 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":93:17)
#loc58 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":96:17)
#loc59 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":93:21)
#loc60 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":93:38)
#loc61 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":94:17)
#loc62 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":95:21)
#loc63 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:24)
#loc64 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:25)
#loc65 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:34)
#loc66 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:37)
#loc67 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:51)
#loc68 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:17)
#loc69 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":97:52)
#loc70 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":98:38)
#loc71 = loc("/usr/include/netinet/in.h":249:5)
#loc72 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":98:17)
#loc73 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":99:43)
#loc74 = loc("/usr/include/netinet/in.h":251:20)
#loc75 = loc("/usr/include/netinet/in.h":33:15)
#loc76 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":99:17)
#loc77 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":99:63)
#loc78 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":100:42)
#loc79 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":100:36)
#loc80 = loc("/usr/include/netinet/in.h":250:15)
#loc81 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":100:17)
#loc82 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":100:50)
#loc83 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:17)
#loc84 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":104:17)
#loc85 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:29)
#loc86 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:62)
#loc87 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:63)
#loc88 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:72)
#loc89 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:86)
#loc90 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:21)
#loc91 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":101:92)
#loc92 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":102:17)
#loc93 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":103:21)
#loc94 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:35)
#loc95 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:59)
#loc96 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:66)
#loc97 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:64)
#loc98 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:50)
#loc99 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:73)
#loc100 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:76)
#loc101 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:87)
#loc102 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:92)
#loc103 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:98)
#loc104 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:108)
#loc105 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:109)
#loc106 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:112)
#loc107 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:30)
#loc108 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:17)
#loc109 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":108:113)
#loc110 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:17)
#loc111 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":112:17)
#loc112 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:21)
#loc113 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:35)
#loc114 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:48)
#loc115 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:51)
#loc116 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":109:65)
#loc117 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":110:17)
#loc118 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":111:21)
#loc119 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:61)
#loc120 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:17)
#loc121 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:22)
#loc122 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:32)
#loc123 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:45)
#loc124 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:56)
#loc125 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":114:57)
#loc126 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":116:27)
#loc127 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":116:34)
#loc128 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":116:40)
#loc129 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":116:17)
#loc130 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":116:44)
#loc131 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":117:17)
#loc132 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":120:17)
#loc133 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":117:21)
#loc134 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":118:17)
#loc135 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":119:32)
#loc136 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":119:22)
#loc137 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":119:21)
#loc138 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":121:27)
#loc139 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":121:34)
#loc140 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":121:40)
#loc141 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":121:17)
#loc142 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":121:44)
#loc143 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":122:17)
#loc144 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":125:17)
#loc145 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":122:21)
#loc146 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":123:17)
#loc147 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":124:32)
#loc148 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":124:22)
#loc149 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":124:21)
#loc150 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":127:20)
#loc151 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":128:13)
#loc152 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":131:13)
#loc153 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":128:17)
#loc154 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":128:34)
#loc155 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":129:13)
#loc156 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":130:30)
#loc157 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":130:17)
#loc158 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":139:9)
#loc159 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:25)
#loc160 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:52)
#loc161 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:66)
#loc162 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":144:5)
#loc163 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":169:1)
#loc164 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":172:1)
#loc165 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":171:5)
#loc166 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":171:13)
#loc167 = loc("/usr/include/stdlib.h":575:1)
#loc168 = loc("/usr/include/stdlib.h":575:41)
#loc169 = loc("/usr/include/time.h":76:1)
#loc170 = loc("/usr/include/time.h":76:38)
#loc171 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc172 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc173 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":189:15)
#loc174 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":191:15)
#loc175 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":194:15)
#loc176 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":196:15)
#loc177 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":184:1)
#loc178 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":199:1)
#loc183 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":185:1)
#loc184 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":187:27)
#loc185 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":187:22)
#loc186 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":187:5)
#loc187 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":189:5)
#loc188 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":190:5)
#loc189 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":190:68)
#loc190 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":191:5)
#loc191 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":194:5)
#loc192 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":195:5)
#loc193 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":195:67)
#loc194 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":196:5)
#loc195 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":198:12)
#loc196 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":198:5)
#loc197 = loc("/usr/include/string.h":149:1)
#loc198 = loc("/usr/include/string.h":150:14)
#loc199 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":160:22)
#loc200 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":152:1)
#loc201 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":167:1)
#loc202 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":154:5)
#loc203 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":154:12)
#loc204 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":156:12)
#loc205 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":156:5)
#loc206 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":157:5)
#loc207 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":162:5)
#loc208 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":157:11)
#loc209 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":160:9)
#loc210 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":160:16)
#loc211 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":161:9)
#loc212 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:12)
#loc213 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:25)
#loc214 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:38)
#loc215 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:52)
#loc216 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:66)
#loc217 = loc("CWE78_OS_Command_Injection__char_connect_socket_execlp_16.c":166:5)
#loc218 = loc(fused[#loc1, #loc2])
#loc219 = loc(fused[#loc3, #loc4])
#loc220 = loc(fused[#loc5, #loc6])
#loc221 = loc(fused[#loc7, #loc8])
#loc222 = loc(fused[#loc9, #loc10])
#loc223 = loc(fused[#loc12, #loc13])
#loc224 = loc(fused[#loc14, #loc15])
#loc225 = loc(fused[#loc16, #loc17])
#loc226 = loc(fused[#loc18, #loc19])
#loc227 = loc(fused[#loc20, #loc21])
#loc228 = loc(fused[#loc22, #loc23])
#loc229 = loc(fused[#loc26, #loc27])
#loc230 = loc(fused[#loc28, #loc29])
#loc231 = loc(fused[#loc31, #loc30])
#loc232 = loc(fused[#loc32, #loc33])
#loc233 = loc(fused[#loc35, #loc36])
#loc234 = loc(fused[#loc37, #loc38])
#loc235 = loc(fused[#loc39, #loc40])
#loc236 = loc(fused[#loc41, #loc42])
#loc237 = loc(fused[#loc43, #loc44])
#loc238 = loc(fused[#loc45, #loc46])
#loc239 = loc(fused[#loc49, #loc50])
#loc240 = loc(fused[#loc55, #loc56])
#loc241 = loc(fused[#loc57, #loc58])
#loc242 = loc(fused[#loc59, #loc60])
#loc243 = loc(fused[#loc61, #loc58])
#loc244 = loc(fused[#loc63, #loc64])
#loc245 = loc(fused[#loc66, #loc67])
#loc246 = loc(fused[#loc68, #loc69])
#loc247 = loc(fused[#loc72, #loc70])
#loc248 = loc(fused[#loc76, #loc77])
#loc249 = loc(fused[#loc81, #loc82])
#loc250 = loc(fused[#loc83, #loc84])
#loc251 = loc(fused[#loc86, #loc87])
#loc252 = loc(fused[#loc88, #loc89])
#loc253 = loc(fused[#loc90, #loc91])
#loc254 = loc(fused[#loc92, #loc84])
#loc255 = loc(fused[#loc98, #loc99])
#loc256 = loc(fused[#loc100, #loc101])
#loc257 = loc(fused[#loc102, #loc103])
#loc258 = loc(fused[#loc102, #loc104])
#loc259 = loc(fused[#loc100, #loc105])
#loc260 = loc(fused[#loc108, #loc109])
#loc261 = loc(fused[#loc110, #loc111])
#loc262 = loc(fused[#loc112, #loc113])
#loc263 = loc(fused[#loc115, #loc116])
#loc264 = loc(fused[#loc117, #loc111])
#loc265 = loc(fused[#loc123, #loc124])
#loc266 = loc(fused[#loc122, #loc124])
#loc267 = loc(fused[#loc121, #loc124])
#loc268 = loc(fused[#loc120, #loc119])
#loc269 = loc(fused[#loc129, #loc130])
#loc270 = loc(fused[#loc131, #loc132])
#loc271 = loc(fused[#loc134, #loc132])
#loc272 = loc(fused[#loc137, #loc135])
#loc273 = loc(fused[#loc141, #loc142])
#loc274 = loc(fused[#loc143, #loc144])
#loc275 = loc(fused[#loc146, #loc144])
#loc276 = loc(fused[#loc149, #loc147])
#loc277 = loc(fused[#loc151, #loc152])
#loc278 = loc(fused[#loc153, #loc154])
#loc279 = loc(fused[#loc155, #loc152])
#loc280 = loc(fused[#loc163, #loc164])
#loc281 = loc(fused[#loc165, #loc166])
#loc282 = loc(fused[#loc167, #loc168])
#loc283 = loc(fused[#loc169, #loc170])
#loc284 = loc(fused[#loc171, #loc172])
#loc285 = loc(fused[#loc177, #loc178])
#loc288 = loc(fused[#loc188, #loc189])
#loc289 = loc(fused[#loc192, #loc193])
#loc290 = loc(fused[#loc196, #loc195])
#loc291 = loc(fused[#loc197, #loc198])
#loc292 = loc(fused[#loc200, #loc201])
#loc293 = loc(fused[#loc202, #loc203])
#loc294 = loc(fused[#loc205, #loc204])
#loc295 = loc(fused[#loc206, #loc207])
