!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":21:81)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":21:101)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":44:85)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":44:105)
#loc79 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc42, #loc43])
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printLongLongLine(!s64i) loc(#loc77)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b_badSink(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc79)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc80)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc9)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc10)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc11)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s64i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s64i>> loc(#loc8)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc10)
    cir.store %5, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc80)
    cir.scope {
      %6 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc82)
      %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc82)
      cir.store %7, %6 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc82)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc84)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc22)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc22)
          cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc86)
          cir.for : cond {
            %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc24)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc25)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc25)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc87)
            cir.condition(%18) loc(#loc26)
          } body {
            cir.scope {
              %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc28)
              %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc29)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc29)
              %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc29)
              %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc30)
              %20 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc31)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !u64i), !cir.ptr<!s64i> loc(#loc32)
              cir.store %18, %21 : !s64i, !cir.ptr<!s64i> loc(#loc89)
            } loc(#loc88)
            cir.yield loc(#loc21)
          } step {
            %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc34)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc35)
            cir.store %16, %8 : !u64i, !cir.ptr<!u64i> loc(#loc90)
            cir.yield loc(#loc85)
          } loc(#loc85)
        } loc(#loc85)
        %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc36)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc37)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!s64i>, %10 : !s32i), !cir.ptr<!s64i> loc(#loc38)
        %12 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc36)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc39)
      } loc(#loc83)
    } loc(#loc81)
    cir.return loc(#loc4)
  } loc(#loc78)
  cir.func @CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b_goodG2BSink(%arg0: !cir.ptr<!cir.ptr<!s64i>> loc(fused[#loc42, #loc43])) extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, ["dataArray", init] {alignment = 8 : i64} loc(#loc92)
    %1 = cir.alloca !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>>, ["data", init] {alignment = 8 : i64} loc(#loc93)
    cir.store %arg0, %0 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>> loc(#loc46)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!cir.ptr<!s64i>>>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc47)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc48)
    %4 = cir.ptr_stride(%2 : !cir.ptr<!cir.ptr<!s64i>>, %3 : !s32i), !cir.ptr<!cir.ptr<!s64i>> loc(#loc45)
    %5 = cir.load %4 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc47)
    cir.store %5, %1 : !cir.ptr<!s64i>, !cir.ptr<!cir.ptr<!s64i>> loc(#loc93)
    cir.scope {
      %6 = cir.alloca !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc95)
      %7 = cir.const #cir.zero : !cir.array<!s64i x 100> loc(#loc95)
      cir.store %7, %6 : !cir.array<!s64i x 100>, !cir.ptr<!cir.array<!s64i x 100>> loc(#loc95)
      cir.scope {
        %8 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc97)
        cir.scope {
          %13 = cir.const #cir.int<0> : !s32i loc(#loc59)
          %14 = cir.cast(integral, %13 : !s32i), !u64i loc(#loc59)
          cir.store %14, %8 : !u64i, !cir.ptr<!u64i> loc(#loc99)
          cir.for : cond {
            %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc61)
            %16 = cir.const #cir.int<100> : !s32i loc(#loc62)
            %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc62)
            %18 = cir.cmp(lt, %15, %17) : !u64i, !cir.bool loc(#loc100)
            cir.condition(%18) loc(#loc63)
          } body {
            cir.scope {
              %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc65)
              %16 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s64i x 100>>), !cir.ptr<!s64i> loc(#loc66)
              %17 = cir.ptr_stride(%16 : !cir.ptr<!s64i>, %15 : !u64i), !cir.ptr<!s64i> loc(#loc66)
              %18 = cir.load %17 : !cir.ptr<!s64i>, !s64i loc(#loc66)
              %19 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc67)
              %20 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc68)
              %21 = cir.ptr_stride(%19 : !cir.ptr<!s64i>, %20 : !u64i), !cir.ptr<!s64i> loc(#loc69)
              cir.store %18, %21 : !s64i, !cir.ptr<!s64i> loc(#loc102)
            } loc(#loc101)
            cir.yield loc(#loc58)
          } step {
            %15 = cir.load %8 : !cir.ptr<!u64i>, !u64i loc(#loc71)
            %16 = cir.unary(inc, %15) : !u64i, !u64i loc(#loc72)
            cir.store %16, %8 : !u64i, !cir.ptr<!u64i> loc(#loc103)
            cir.yield loc(#loc98)
          } loc(#loc98)
        } loc(#loc98)
        %9 = cir.load %1 : !cir.ptr<!cir.ptr<!s64i>>, !cir.ptr<!s64i> loc(#loc73)
        %10 = cir.const #cir.int<0> : !s32i loc(#loc74)
        %11 = cir.ptr_stride(%9 : !cir.ptr<!s64i>, %10 : !s32i), !cir.ptr<!s64i> loc(#loc75)
        %12 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc73)
        cir.call @printLongLongLine(%12) : (!s64i) -> () loc(#loc76)
      } loc(#loc96)
    } loc(#loc94)
    cir.return loc(#loc41)
  } loc(#loc91)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":21:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":37:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":24:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":24:33)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":22:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":24:22)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":24:32)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":25:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":36:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":26:9)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":26:33)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":27:9)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":35:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":28:13)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":28:20)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:13)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":33:13)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:22)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:18)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:25)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:29)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:27)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":31:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:34)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:27)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:17)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:22)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:23)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":32:35)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:35)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":30:34)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":34:31)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":34:36)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":34:37)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":34:13)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":44:1)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":59:1)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":46:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":46:33)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":45:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":46:22)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":46:32)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":47:5)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":58:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":48:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":48:33)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":49:9)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":57:9)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":50:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":50:20)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:13)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":55:13)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:22)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:18)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:25)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:29)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:27)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":53:13)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:34)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:17)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:22)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:23)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":54:35)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:35)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":52:34)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":56:31)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":56:36)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":56:37)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int64_t_alloca_loop_66b.c":56:13)
#loc77 = loc(fused[#loc1, #loc2])
#loc78 = loc(fused[#loc3, #loc4])
#loc80 = loc(fused[#loc7, #loc8])
#loc81 = loc(fused[#loc12, #loc13])
#loc82 = loc(fused[#loc14, #loc15])
#loc83 = loc(fused[#loc16, #loc17])
#loc84 = loc(fused[#loc18, #loc19])
#loc85 = loc(fused[#loc20, #loc21])
#loc86 = loc(fused[#loc23, #loc22])
#loc87 = loc(fused[#loc24, #loc25])
#loc88 = loc(fused[#loc27, #loc21])
#loc89 = loc(fused[#loc30, #loc33])
#loc90 = loc(fused[#loc35, #loc34])
#loc91 = loc(fused[#loc40, #loc41])
#loc93 = loc(fused[#loc44, #loc45])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc52])
#loc96 = loc(fused[#loc53, #loc54])
#loc97 = loc(fused[#loc55, #loc56])
#loc98 = loc(fused[#loc57, #loc58])
#loc99 = loc(fused[#loc60, #loc59])
#loc100 = loc(fused[#loc61, #loc62])
#loc101 = loc(fused[#loc64, #loc58])
#loc102 = loc(fused[#loc67, #loc70])
#loc103 = loc(fused[#loc72, #loc71])
