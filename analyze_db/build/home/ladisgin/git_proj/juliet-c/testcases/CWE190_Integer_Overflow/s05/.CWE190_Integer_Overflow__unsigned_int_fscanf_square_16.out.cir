!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":113:10)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":113:14)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":113:20)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":113:32)
#loc143 = loc(fused[#loc49, #loc50])
#loc144 = loc(fused[#loc51, #loc52])
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !cir.ptr<!cir.ptr<!cir.struct<struct "_IO_FILE">>>, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc125)
  cir.global "private" external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"%u\00" : !cir.array<!s8i x 3>> : !cir.array<!s8i x 3> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printUnsignedLine(!u32i) loc(#loc127)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc129)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc14)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc14)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc131)
    cir.br ^bb1 loc(#loc132)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc132)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc18)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc18)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc18)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc19)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc126)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc20)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc5)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc5)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc19)
    cir.br ^bb4 loc(#loc21)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc17)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc133)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc133)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<1> : !s32i loc(#loc24)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc24)
    cir.brcond %13 ^bb8, ^bb11 loc(#loc24)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc134)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc27)
    %15 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc11)
    %16 = cir.binop(mul, %14, %15) : !u32i loc(#loc135)
    cir.store %16, %0 : !u32i, !cir.ptr<!u32i> loc(#loc129)
    %17 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc28)
    cir.call @printUnsignedLine(%17) : (!u32i) -> () loc(#loc29)
    cir.br ^bb10 loc(#loc26)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc30)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc23)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc9)
  } loc(#loc128)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc56)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE190_Integer_Overflow__unsigned_int_fscanf_square_16_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc67)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc68)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc150)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc75)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc75)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc151)
    cir.br ^bb1 loc(#loc152)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc152)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc79)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc79)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc79)
  ^bb3:  // pred: ^bb2
    %6 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc80)
    %7 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc126)
    %8 = cir.load %7 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc81)
    %9 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 3>> loc(#loc82)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 3>>), !cir.ptr<!s8i> loc(#loc82)
    %11 = cir.call @__isoc99_fscanf(%8, %10, %1) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!u32i>) -> !s32i loc(#loc80)
    cir.br ^bb4 loc(#loc83)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc78)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc153)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc153)
  ^bb7:  // pred: ^bb6
    %12 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc86)
    cir.brcond %13 ^bb8, ^bb14 loc(#loc86)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc154)
  ^bb9:  // pred: ^bb8
    %14 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc89)
    %15 = cir.cast(integral, %14 : !u32i), !s64i loc(#loc89)
    %16 = cir.cast(integral, %15 : !s64i), !s32i loc(#loc89)
    %17 = cir.abs %16 poison : !s32i loc(#loc90)
    %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc90)
    %19 = cir.get_global @sqrt : !cir.ptr<!cir.func<!cir.double (!cir.double)>> loc(#loc91)
    %20 = cir.const #cir.int<2147483647> : !s32i loc(#loc92)
    %21 = cir.cast(integral, %20 : !s32i), !u32i loc(#loc92)
    %22 = cir.const #cir.int<2> : !u32i loc(#loc92)
    %23 = cir.binop(mul, %21, %22) : !u32i loc(#loc92)
    %24 = cir.const #cir.int<1> : !u32i loc(#loc92)
    %25 = cir.binop(add, %23, %24) : !u32i loc(#loc92)
    %26 = cir.cast(int_to_float, %25 : !u32i), !cir.double loc(#loc92)
    %27 = cir.call @sqrt(%26) : (!cir.double) -> !cir.double extra(#fn_attr1) loc(#loc91)
    %28 = cir.cast(float_to_int, %27 : !cir.double), !s64i loc(#loc91)
    %29 = cir.cmp(lt, %18, %28) : !s64i, !cir.bool loc(#loc155)
    cir.brcond %29 ^bb10, ^bb11 loc(#loc156)
  ^bb10:  // pred: ^bb9
    %30 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc97)
    %31 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc72)
    %32 = cir.binop(mul, %30, %31) : !u32i loc(#loc157)
    cir.store %32, %0 : !u32i, !cir.ptr<!u32i> loc(#loc149)
    %33 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc98)
    cir.call @printUnsignedLine(%33) : (!u32i) -> () loc(#loc99)
    cir.br ^bb12 loc(#loc95)
  ^bb11:  // pred: ^bb9
    %34 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc68)
    %35 = cir.cast(array_to_ptrdecay, %34 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc68)
    cir.call @printLine(%35) : (!cir.ptr<!s8i>) -> () loc(#loc100)
    cir.br ^bb12 loc(#loc88)
  ^bb12:  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc88)
  ^bb13:  // pred: ^bb12
    cir.br ^bb14 loc(#loc101)
  ^bb14:  // 2 preds: ^bb7, ^bb13
    cir.br ^bb15 loc(#loc85)
  ^bb15:  // pred: ^bb14
    cir.return loc(#loc70)
  } loc(#loc148)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc159)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc160)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc108)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc108)
    cir.store %3, %1 : !u32i, !cir.ptr<!u32i> loc(#loc161)
    cir.br ^bb1 loc(#loc162)
  ^bb1:  // pred: ^bb0
    cir.br ^bb2 loc(#loc162)
  ^bb2:  // pred: ^bb1
    %4 = cir.const #cir.int<1> : !s32i loc(#loc112)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc112)
    cir.brcond %5 ^bb3, ^bb4 loc(#loc112)
  ^bb3:  // pred: ^bb2
    %6 = cir.const #cir.int<2> : !s32i loc(#loc113)
    %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc113)
    cir.store %7, %1 : !u32i, !cir.ptr<!u32i> loc(#loc163)
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc111)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc164)
  ^bb6:  // pred: ^bb5
    cir.br ^bb7 loc(#loc164)
  ^bb7:  // pred: ^bb6
    %8 = cir.const #cir.int<1> : !s32i loc(#loc118)
    %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc118)
    cir.brcond %9 ^bb8, ^bb11 loc(#loc118)
  ^bb8:  // pred: ^bb7
    cir.br ^bb9 loc(#loc165)
  ^bb9:  // pred: ^bb8
    %10 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc121)
    %11 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    %12 = cir.binop(mul, %10, %11) : !u32i loc(#loc166)
    cir.store %12, %0 : !u32i, !cir.ptr<!u32i> loc(#loc159)
    %13 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc122)
    cir.call @printUnsignedLine(%13) : (!u32i) -> () loc(#loc123)
    cir.br ^bb10 loc(#loc120)
  ^bb10:  // pred: ^bb9
    cir.br ^bb11 loc(#loc124)
  ^bb11:  // 2 preds: ^bb7, ^bb10
    cir.br ^bb12 loc(#loc117)
  ^bb12:  // pred: ^bb11
    cir.return loc(#loc103)
  } loc(#loc158)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":31:24)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":24:1)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":43:1)
#loc10 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":38:13)
#loc11 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":38:42)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":26:5)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":26:18)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":27:12)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":27:5)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":28:5)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":33:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":28:11)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":31:9)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":31:17)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":32:9)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":42:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":34:11)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":40:9)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":38:35)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":39:31)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":41:9)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":98:1)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":102:1)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":100:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":100:13)
#loc35 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":101:5)
#loc36 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":101:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":118:15)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":120:15)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":123:15)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":125:15)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":113:1)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":128:1)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":114:1)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":116:27)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":116:22)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":116:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":118:5)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":119:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":119:65)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":120:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":123:5)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":124:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":124:64)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":125:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":127:12)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":127:5)
#loc67 = loc("/usr/include/bits/mathcalls.h":158:1)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":70:23)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":50:1)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":74:1)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":65:13)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":65:42)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":52:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":52:18)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":53:12)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":53:5)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":54:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":59:5)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":54:11)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":57:9)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":57:17)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":57:24)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":58:9)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":60:5)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":73:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":60:11)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":71:9)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:23)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:13)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:37)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:50)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":63:58)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":64:9)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":67:9)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":69:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":65:35)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":66:31)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":66:13)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":70:13)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":72:9)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":77:1)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":96:1)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":91:13)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":91:42)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":79:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":79:18)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":80:12)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":80:5)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":81:5)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":86:5)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":81:11)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":84:16)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":84:9)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":85:9)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":87:5)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":95:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":87:11)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":89:9)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":93:9)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":91:35)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":92:31)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":92:13)
#loc124 = loc("CWE190_Integer_Overflow__unsigned_int_fscanf_square_16.c":94:9)
#loc125 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc3, #loc4])
#loc127 = loc(fused[#loc6, #loc7])
#loc128 = loc(fused[#loc8, #loc9])
#loc129 = loc(fused[#loc10, #loc11])
#loc130 = loc(fused[#loc12, #loc13])
#loc131 = loc(fused[#loc15, #loc14])
#loc132 = loc(fused[#loc16, #loc17])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc27, #loc11])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc41, #loc42])
#loc142 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc58, #loc59])
#loc146 = loc(fused[#loc62, #loc63])
#loc147 = loc(fused[#loc66, #loc65])
#loc148 = loc(fused[#loc69, #loc70])
#loc149 = loc(fused[#loc71, #loc72])
#loc150 = loc(fused[#loc73, #loc74])
#loc151 = loc(fused[#loc76, #loc75])
#loc152 = loc(fused[#loc77, #loc78])
#loc153 = loc(fused[#loc84, #loc85])
#loc154 = loc(fused[#loc87, #loc88])
#loc155 = loc(fused[#loc90, #loc93])
#loc156 = loc(fused[#loc94, #loc95, #loc96, #loc88])
#loc157 = loc(fused[#loc97, #loc72])
#loc158 = loc(fused[#loc102, #loc103])
#loc159 = loc(fused[#loc104, #loc105])
#loc160 = loc(fused[#loc106, #loc107])
#loc161 = loc(fused[#loc109, #loc108])
#loc162 = loc(fused[#loc110, #loc111])
#loc163 = loc(fused[#loc114, #loc113])
#loc164 = loc(fused[#loc116, #loc117])
#loc165 = loc(fused[#loc119, #loc120])
#loc166 = loc(fused[#loc121, #loc105])
