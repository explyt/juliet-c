!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":83:10)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":83:14)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":83:20)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":83:32)
#loc122 = loc(fused[#loc76, #loc77])
#loc123 = loc(fused[#loc78, #loc79])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printIntLine(!s32i) loc(#loc92)
  cir.func @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_333badEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc94)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc95)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc96)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc97)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc12)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc13)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc98)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc15)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc15)
    %7 = cir.alloca !u8i, !cir.ptr<!u8i>, %6 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc15)
    %8 = cir.cast(bitcast, %7 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc15)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc15)
    cir.store %9, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc99)
    cir.br ^bb1 loc(#loc100)
  ^bb1:  // pred: ^bb0
    %10 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc6)
    %11 = cir.load %10 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc6)
    cir.store %11, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc94)
    cir.br ^bb2 loc(#loc101)
  ^bb2:  // pred: ^bb1
    %12 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc95)
    cir.store %12, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc95)
    %13 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc21)
    %14 = cir.cast(bitcast, %13 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc21)
    %15 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc22)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc22)
    %17 = cir.const #cir.int<10> : !s32i loc(#loc23)
    %18 = cir.cast(integral, %17 : !s32i), !u64i loc(#loc23)
    %19 = cir.const #cir.int<4> : !u64i loc(#loc102)
    %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc103)
    cir.libc.memcpy %20 bytes from %16 to %14 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc104)
    %21 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc28)
    %22 = cir.const #cir.int<0> : !s32i loc(#loc29)
    %23 = cir.ptr_stride(%21 : !cir.ptr<!s32i>, %22 : !s32i), !cir.ptr<!s32i> loc(#loc30)
    %24 = cir.load %23 : !cir.ptr<!s32i>, !s32i loc(#loc28)
    cir.call @printIntLine(%24) : (!s32i) -> () loc(#loc31)
    cir.br ^bb3 loc(#loc20)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc18)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc4)
  } loc(#loc93)
  cir.func internal private @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33L7goodG2BEv() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["source"] {alignment = 16 : i64} loc(#loc107)
    %2 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc108)
    %3 = cir.alloca !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc109)
    cir.store %2, %3 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>> loc(#loc41)
    %4 = cir.const #cir.ptr<null> : !cir.ptr<!s32i> loc(#loc42)
    cir.store %4, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc110)
    %5 = cir.const #cir.int<10> : !s32i loc(#loc44)
    %6 = cir.cast(integral, %5 : !s32i), !u64i loc(#loc44)
    %7 = cir.const #cir.int<4> : !u64i loc(#loc44)
    %8 = cir.binop(mul, %6, %7) : !u64i loc(#loc44)
    %9 = cir.alloca !u8i, !cir.ptr<!u8i>, %8 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc44)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc44)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc44)
    cir.store %11, %2 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc111)
    cir.br ^bb1 loc(#loc112)
  ^bb1:  // pred: ^bb0
    %12 = cir.load %3 : !cir.ptr<!cir.ptr<!cir.ptr<!s32i>>>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc35)
    %13 = cir.load %12 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc35)
    cir.store %13, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc106)
    cir.br ^bb2 loc(#loc113)
  ^bb2:  // pred: ^bb1
    %14 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc107)
    cir.store %14, %1 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc107)
    %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc50)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc50)
    %17 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc51)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc51)
    %19 = cir.const #cir.int<10> : !s32i loc(#loc52)
    %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc52)
    %21 = cir.const #cir.int<4> : !u64i loc(#loc114)
    %22 = cir.binop(mul, %20, %21) : !u64i loc(#loc115)
    cir.libc.memcpy %22 bytes from %18 to %16 : !u64i, !cir.ptr<!void> -> !cir.ptr<!void> loc(#loc116)
    %23 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc57)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc58)
    %25 = cir.ptr_stride(%23 : !cir.ptr<!s32i>, %24 : !s32i), !cir.ptr<!s32i> loc(#loc59)
    %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc60)
    cir.br ^bb3 loc(#loc49)
  ^bb3:  // pred: ^bb2
    cir.br ^bb4 loc(#loc47)
  ^bb4:  // pred: ^bb3
    cir.return loc(#loc33)
  } loc(#loc105)
  cir.func @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_334goodEv() extra(#fn_attr) {
    cir.call @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33L7goodG2BEv() : () -> () loc(#loc63)
    cir.return loc(#loc62)
  } loc(#loc117)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc118)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc119)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc120)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc70)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc71)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc72)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc73)
  cir.func @main(%arg0: !s32i loc(fused[#loc76, #loc77]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc78, #loc79])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc122)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc123)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc75)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc80)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc80)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc81)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc82)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc82)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc83)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc70)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc70)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc84)
    cir.call @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_334goodEv() : () -> () loc(#loc85)
    %8 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc71)
    %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc71)
    cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc86)
    %10 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc72)
    %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc72)
    cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc87)
    cir.call @_ZN52CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_333badEv() : () -> () loc(#loc88)
    %12 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc73)
    %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc73)
    cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc89)
    %14 = cir.const #cir.int<0> : !s32i loc(#loc90)
    cir.store %14, %2 : !s32i, !cir.ptr<!s32i> loc(#loc124)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    cir.return %15 : !s32i loc(#loc124)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":24:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":40:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":32:9)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":32:22)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":34:13)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":34:32)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":26:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":26:11)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":27:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":27:22)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":28:12)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":28:5)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:19)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":30:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":31:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":39:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":33:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":38:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:20)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:26)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:34)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:37)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:47)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":36:48)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:26)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:31)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:32)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":37:13)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":47:1)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":63:1)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:9)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":55:22)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":57:13)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":57:32)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":49:5)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":49:11)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":50:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":50:22)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":51:12)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":51:5)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":53:19)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":53:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":54:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":62:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":56:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":61:9)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:20)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:26)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:34)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:37)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:47)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:13)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":59:48)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:26)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:31)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:32)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":60:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":65:1)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":68:1)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":67:5)
#loc64 = loc("/usr/include/stdlib.h":575:1)
#loc65 = loc("/usr/include/stdlib.h":575:41)
#loc66 = loc("/usr/include/time.h":76:1)
#loc67 = loc("/usr/include/time.h":76:38)
#loc68 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc69 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":88:15)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":90:15)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":93:15)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":95:15)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":83:1)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":98:1)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":84:1)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":86:27)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":86:22)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":86:5)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":88:5)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":89:5)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":90:5)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":93:5)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":94:5)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":95:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":97:12)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE131_memcpy_33.cpp":97:5)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc7, #loc8])
#loc96 = loc(fused[#loc9, #loc10])
#loc97 = loc(fused[#loc11, #loc12])
#loc98 = loc(fused[#loc14, #loc13])
#loc99 = loc(fused[#loc16, #loc15])
#loc100 = loc(fused[#loc17, #loc18])
#loc101 = loc(fused[#loc19, #loc20])
#loc102 = loc(fused[#loc24, #loc25])
#loc103 = loc(fused[#loc23, #loc25])
#loc104 = loc(fused[#loc26, #loc27])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc38, #loc39])
#loc109 = loc(fused[#loc40, #loc41])
#loc110 = loc(fused[#loc43, #loc42])
#loc111 = loc(fused[#loc45, #loc44])
#loc112 = loc(fused[#loc46, #loc47])
#loc113 = loc(fused[#loc48, #loc49])
#loc114 = loc(fused[#loc53, #loc54])
#loc115 = loc(fused[#loc52, #loc54])
#loc116 = loc(fused[#loc55, #loc56])
#loc117 = loc(fused[#loc61, #loc62])
#loc118 = loc(fused[#loc64, #loc65])
#loc119 = loc(fused[#loc66, #loc67])
#loc120 = loc(fused[#loc68, #loc69])
#loc121 = loc(fused[#loc74, #loc75])
#loc124 = loc(fused[#loc91, #loc90])
