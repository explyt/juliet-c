!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_11.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrue(...) -> !s32i loc(#loc175)
  cir.func private @printLongLongLine(!s64i) loc(#loc176)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_11_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc178)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc9)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc179)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc181)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc181)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc13)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc13)
      cir.if %5 {
        %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc16)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc183)
      } loc(#loc182)
    } loc(#loc180)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc185)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc185)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc20)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc20)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc188)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc26)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc27)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc188)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc28)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc29)
        } loc(#loc187)
      } loc(#loc186)
    } loc(#loc184)
    cir.return loc(#loc6)
  } loc(#loc177)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_max_square_11_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc32)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc38)
    cir.return loc(#loc31)
  } loc(#loc189)
  cir.func no_proto private @globalReturnsFalse(...) -> !s32i loc(#loc194)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc195)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc44)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr1) loc(#loc196)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc47)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc48)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc198)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc53)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc199)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc201)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc201)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc57)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc57)
      cir.if %5 {
        %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc60)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc203)
      } loc(#loc202)
    } loc(#loc200)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc205)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc205)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc64)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc64)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc69)
      } else {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc72)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc73)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc73)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc74)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc75)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc75)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc74)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc208)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc210)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc82)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc81)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc82)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc210)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc83)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc84)
          } else {
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc48)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc48)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc85)
          } loc(#loc209)
        } loc(#loc207)
      } loc(#loc206)
    } loc(#loc204)
    cir.return loc(#loc50)
  } loc(#loc197)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc212)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc90)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc213)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc215)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc215)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc94)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc94)
      cir.if %5 {
        %6 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc97)
        cir.store %6, %0 : !s64i, !cir.ptr<!s64i> loc(#loc217)
      } loc(#loc216)
    } loc(#loc214)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc219)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc219)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc101)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc101)
      cir.if %5 {
        cir.scope {
          %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc106)
          %7 = cir.call @imaxabs(%6) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr1) loc(#loc107)
          %8 = cir.cast(int_to_float, %7 : !s64i), !cir.long_double<!cir.f80> loc(#loc107)
          %9 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc108)
          %10 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc109)
          %11 = cir.cast(int_to_float, %10 : !s64i), !cir.long_double<!cir.f80> loc(#loc109)
          %12 = cir.call @sqrtl(%11) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr1) loc(#loc108)
          %13 = cir.cmp(le, %8, %12) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc222)
          cir.if %13 {
            %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc224)
            %15 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc116)
            %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc115)
            %17 = cir.binop(mul, %15, %16) nsw : !s64i loc(#loc116)
            cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc224)
            %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc117)
            cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc118)
          } else {
            %14 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc119)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc119)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc120)
          } loc(#loc223)
        } loc(#loc221)
      } loc(#loc220)
    } loc(#loc218)
    cir.return loc(#loc87)
  } loc(#loc211)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc226)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc125)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc227)
    cir.scope {
      %2 = cir.get_global @globalReturnsFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc229)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc229)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc129)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc129)
      cir.if %5 {
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc134)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc134)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc135)
      } else {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc136)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc136)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc231)
      } loc(#loc230)
    } loc(#loc228)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc233)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc233)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc140)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc140)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc236)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc147)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc146)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc147)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc236)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc148)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc149)
        } loc(#loc235)
      } loc(#loc234)
    } loc(#loc232)
    cir.return loc(#loc122)
  } loc(#loc225)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc238)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc154)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc239)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc241)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc241)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc158)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc158)
      cir.if %5 {
        %6 = cir.const #cir.int<2> : !s32i loc(#loc161)
        %7 = cir.cast(integral, %6 : !s32i), !s64i loc(#loc161)
        cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc243)
      } loc(#loc242)
    } loc(#loc240)
    cir.scope {
      %2 = cir.get_global @globalReturnsTrue : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc245)
      %3 = cir.cast(bitcast, %2 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc245)
      %4 = cir.call %3() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc165)
      %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc165)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc248)
          %7 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc172)
          %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc171)
          %9 = cir.binop(mul, %7, %8) nsw : !s64i loc(#loc172)
          cir.store %9, %6 : !s64i, !cir.ptr<!s64i> loc(#loc248)
          %10 = cir.load %6 : !cir.ptr<!s64i>, !s64i loc(#loc173)
          cir.call @printLongLongLine(%10) : (!s64i) -> () loc(#loc174)
        } loc(#loc247)
      } loc(#loc246)
    } loc(#loc244)
    cir.return loc(#loc151)
  } loc(#loc237)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_max_square_11.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":42:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":27:13)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":28:12)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":28:5)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:5)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":33:5)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:8)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":29:26)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":30:5)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":32:16)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":32:9)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":41:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:8)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":34:26)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":35:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":36:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":40:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:13)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:37)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":38:30)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":39:31)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":39:13)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":148:1)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":154:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":150:5)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":150:14)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":151:5)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":151:14)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":152:5)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":152:14)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":153:5)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":153:14)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc43 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":61:19)
#loc45 = loc("/usr/include/inttypes.h":351:1)
#loc46 = loc("/usr/include/inttypes.h":351:74)
#loc47 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":73:23)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":49:1)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":76:1)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":51:5)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":51:13)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":52:12)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":52:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:5)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":57:5)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:8)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":53:26)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":54:5)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":56:16)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":56:9)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":75:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:8)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":58:27)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":59:5)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":62:5)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":64:5)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":61:9)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":74:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:31)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:13)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:40)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:46)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":66:55)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":67:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":70:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":72:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:13)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:37)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":68:30)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":69:31)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":69:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":73:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":79:1)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":101:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":81:5)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":81:13)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":82:12)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":82:5)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":87:5)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:8)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":83:26)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":84:5)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":86:16)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":86:9)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:5)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":100:5)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:8)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":88:26)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":89:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:9)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":99:9)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:31)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:13)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:40)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:46)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":91:55)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":92:9)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":95:9)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":97:9)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:13)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:37)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":93:30)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":94:31)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":94:13)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":98:23)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":98:13)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":104:1)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":126:1)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":106:5)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":106:13)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":107:12)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":107:5)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:5)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":117:5)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:8)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":108:27)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":109:5)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":112:5)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":114:5)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":111:19)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":111:9)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":116:16)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":116:9)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:5)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":125:5)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:8)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":118:26)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":119:5)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":120:9)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":124:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:13)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:37)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":122:30)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":123:31)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":123:13)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":129:1)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":146:1)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":131:5)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":131:13)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":132:12)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":132:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:5)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":137:5)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:8)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":133:26)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":134:5)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":136:16)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":136:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":145:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:8)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":138:26)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":139:5)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":140:9)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":144:9)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:13)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:37)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":142:30)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":143:31)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_max_square_11.c":143:13)
#loc175 = loc(fused[#loc1, #loc2])
#loc176 = loc(fused[#loc3, #loc4])
#loc177 = loc(fused[#loc5, #loc6])
#loc178 = loc(fused[#loc7, #loc8])
#loc179 = loc(fused[#loc10, #loc9])
#loc180 = loc(fused[#loc11, #loc12])
#loc181 = loc(fused[#loc13, #loc14])
#loc182 = loc(fused[#loc15, #loc12])
#loc183 = loc(fused[#loc17, #loc16])
#loc184 = loc(fused[#loc18, #loc19])
#loc185 = loc(fused[#loc20, #loc21])
#loc186 = loc(fused[#loc22, #loc19])
#loc187 = loc(fused[#loc23, #loc24])
#loc188 = loc(fused[#loc25, #loc26])
#loc189 = loc(fused[#loc30, #loc31])
#loc190 = loc(fused[#loc32, #loc33])
#loc191 = loc(fused[#loc34, #loc35])
#loc192 = loc(fused[#loc36, #loc37])
#loc193 = loc(fused[#loc38, #loc39])
#loc194 = loc(fused[#loc40, #loc41])
#loc195 = loc(fused[#loc42, #loc43])
#loc196 = loc(fused[#loc45, #loc46])
#loc197 = loc(fused[#loc49, #loc50])
#loc198 = loc(fused[#loc51, #loc52])
#loc199 = loc(fused[#loc54, #loc53])
#loc200 = loc(fused[#loc55, #loc56])
#loc201 = loc(fused[#loc57, #loc58])
#loc202 = loc(fused[#loc59, #loc56])
#loc203 = loc(fused[#loc61, #loc60])
#loc204 = loc(fused[#loc62, #loc63])
#loc205 = loc(fused[#loc64, #loc65])
#loc206 = loc(fused[#loc66, #loc67, #loc68, #loc63])
#loc207 = loc(fused[#loc70, #loc71])
#loc208 = loc(fused[#loc73, #loc76])
#loc209 = loc(fused[#loc77, #loc78, #loc79, #loc71])
#loc210 = loc(fused[#loc80, #loc81])
#loc211 = loc(fused[#loc86, #loc87])
#loc212 = loc(fused[#loc88, #loc89])
#loc213 = loc(fused[#loc91, #loc90])
#loc214 = loc(fused[#loc92, #loc93])
#loc215 = loc(fused[#loc94, #loc95])
#loc216 = loc(fused[#loc96, #loc93])
#loc217 = loc(fused[#loc98, #loc97])
#loc218 = loc(fused[#loc99, #loc100])
#loc219 = loc(fused[#loc101, #loc102])
#loc220 = loc(fused[#loc103, #loc100])
#loc221 = loc(fused[#loc104, #loc105])
#loc222 = loc(fused[#loc107, #loc110])
#loc223 = loc(fused[#loc111, #loc112, #loc113, #loc105])
#loc224 = loc(fused[#loc114, #loc115])
#loc225 = loc(fused[#loc121, #loc122])
#loc226 = loc(fused[#loc123, #loc124])
#loc227 = loc(fused[#loc126, #loc125])
#loc228 = loc(fused[#loc127, #loc128])
#loc229 = loc(fused[#loc129, #loc130])
#loc230 = loc(fused[#loc131, #loc132, #loc133, #loc128])
#loc231 = loc(fused[#loc137, #loc136])
#loc232 = loc(fused[#loc138, #loc139])
#loc233 = loc(fused[#loc140, #loc141])
#loc234 = loc(fused[#loc142, #loc139])
#loc235 = loc(fused[#loc143, #loc144])
#loc236 = loc(fused[#loc145, #loc146])
#loc237 = loc(fused[#loc150, #loc151])
#loc238 = loc(fused[#loc152, #loc153])
#loc239 = loc(fused[#loc155, #loc154])
#loc240 = loc(fused[#loc156, #loc157])
#loc241 = loc(fused[#loc158, #loc159])
#loc242 = loc(fused[#loc160, #loc157])
#loc243 = loc(fused[#loc162, #loc161])
#loc244 = loc(fused[#loc163, #loc164])
#loc245 = loc(fused[#loc165, #loc166])
#loc246 = loc(fused[#loc167, #loc164])
#loc247 = loc(fused[#loc168, #loc169])
#loc248 = loc(fused[#loc170, #loc171])
