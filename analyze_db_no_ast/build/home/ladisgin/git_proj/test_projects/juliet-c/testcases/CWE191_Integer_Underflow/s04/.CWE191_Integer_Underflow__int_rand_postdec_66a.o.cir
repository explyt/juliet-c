!s32i = !cir.int<s, 32>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_66a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc61)
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_66b_badSink(!cir.ptr<!s32i>) loc(#loc62)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_postdec_66_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc64)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc65)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc11)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc13)
      cir.yield %25 : !u32i loc(#loc13)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc13)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc13)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc13)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc13)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc13)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc13)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc13)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc13)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc13)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc13)
      cir.yield %29 : !u32i loc(#loc13)
    }) : (!cir.bool) -> !u32i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc13)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc67)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc15)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc16)
    %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc17)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc17)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc68)
    %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc18)
    cir.call @CWE191_Integer_Underflow__int_rand_postdec_66b_badSink(%13) : (!cir.ptr<!s32i>) -> () loc(#loc19)
    cir.return loc(#loc6)
  } loc(#loc63)
  cir.func no_proto  @CWE191_Integer_Underflow__int_rand_postdec_66_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc70)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc71)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc69)
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_66b_goodG2BSink(!cir.ptr<!s32i>) loc(#loc72)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc74)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc75)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc34)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc76)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc36)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc37)
    cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc77)
    %5 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %6 = cir.const #cir.int<2> : !s32i loc(#loc40)
    %7 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc41)
    %8 = cir.ptr_stride(%7 : !cir.ptr<!s32i>, %6 : !s32i), !cir.ptr<!s32i> loc(#loc41)
    cir.store %5, %8 : !s32i, !cir.ptr<!s32i> loc(#loc78)
    %9 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc42)
    cir.call @CWE191_Integer_Underflow__int_rand_postdec_66b_goodG2BSink(%9) : (!cir.ptr<!s32i>) -> () loc(#loc43)
    cir.return loc(#loc29)
  } loc(#loc73)
  cir.func private  @CWE191_Integer_Underflow__int_rand_postdec_66b_goodB2GSink(!cir.ptr<!s32i>) loc(#loc79)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc81)
    %1 = cir.alloca !cir.array<!s32i x 5>, !cir.ptr<!cir.array<!s32i x 5>>, ["dataArray"] {alignment = 16 : i64} loc(#loc82)
    %2 = cir.const #cir.int<0> : !s32i loc(#loc52)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc83)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc54)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc54)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc54)
    %7 = cir.ternary(%6, true {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc54)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc54)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc54)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc54)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc54)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc54)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc54)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc54)
      cir.yield %25 : !u32i loc(#loc54)
    }, false {
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc54)
      %16 = cir.const #cir.int<30> : !s32i loc(#loc54)
      %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc54)
      %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc54)
      %20 = cir.const #cir.int<15> : !s32i loc(#loc54)
      %21 = cir.shift(left, %19 : !u32i, %20 : !s32i) -> !u32i loc(#loc54)
      %22 = cir.binop(xor, %17, %21) : !u32i loc(#loc54)
      %23 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc54)
      %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc54)
      %25 = cir.binop(xor, %22, %24) : !u32i loc(#loc54)
      %26 = cir.unary(minus, %25) : !u32i, !u32i loc(#loc54)
      %27 = cir.const #cir.int<1> : !s32i loc(#loc54)
      %28 = cir.cast(integral, %27 : !s32i), !u32i loc(#loc54)
      %29 = cir.binop(sub, %26, %28) : !u32i loc(#loc54)
      cir.yield %29 : !u32i loc(#loc54)
    }) : (!cir.bool) -> !u32i loc(#loc54)
    %8 = cir.cast(integral, %7 : !u32i), !s32i loc(#loc54)
    cir.store %8, %0 : !s32i, !cir.ptr<!s32i> loc(#loc84)
    %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    %10 = cir.const #cir.int<2> : !s32i loc(#loc57)
    %11 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc58)
    %12 = cir.ptr_stride(%11 : !cir.ptr<!s32i>, %10 : !s32i), !cir.ptr<!s32i> loc(#loc58)
    cir.store %9, %12 : !s32i, !cir.ptr<!s32i> loc(#loc85)
    %13 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s32i x 5>>), !cir.ptr<!s32i> loc(#loc59)
    cir.call @CWE191_Integer_Underflow__int_rand_postdec_66b_goodB2GSink(%13) : (!cir.ptr<!s32i>) -> () loc(#loc60)
    cir.return loc(#loc47)
  } loc(#loc80)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int_rand_postdec_66a.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":23:1)
#loc4 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":23:76)
#loc5 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":25:1)
#loc6 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":36:1)
#loc7 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":27:5)
#loc8 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":27:9)
#loc9 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":28:5)
#loc10 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":28:20)
#loc11 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":30:12)
#loc12 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":30:5)
#loc13 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":32:12)
#loc14 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":32:5)
#loc15 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":34:20)
#loc16 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":34:15)
#loc17 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":34:5)
#loc18 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":35:60)
#loc19 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":35:5)
#loc20 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":72:1)
#loc21 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":76:1)
#loc22 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":74:5)
#loc23 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":74:13)
#loc24 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":75:5)
#loc25 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":75:13)
#loc26 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":43:1)
#loc27 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":43:80)
#loc28 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":45:1)
#loc29 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":55:1)
#loc30 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":47:5)
#loc31 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":47:9)
#loc32 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":48:5)
#loc33 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":48:20)
#loc34 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":50:12)
#loc35 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":50:5)
#loc36 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":52:13)
#loc37 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":52:12)
#loc38 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":52:5)
#loc39 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":53:20)
#loc40 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":53:15)
#loc41 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":53:5)
#loc42 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":54:64)
#loc43 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":54:5)
#loc44 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":58:1)
#loc45 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":58:80)
#loc46 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":60:1)
#loc47 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":70:1)
#loc48 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":62:5)
#loc49 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":62:9)
#loc50 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":63:5)
#loc51 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":63:20)
#loc52 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":65:12)
#loc53 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":65:5)
#loc54 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":67:12)
#loc55 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":67:5)
#loc56 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":68:20)
#loc57 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":68:15)
#loc58 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":68:5)
#loc59 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":69:64)
#loc60 = loc("CWE191_Integer_Underflow__int_rand_postdec_66a.c":69:5)
#loc61 = loc(fused[#loc1, #loc2])
#loc62 = loc(fused[#loc3, #loc4])
#loc63 = loc(fused[#loc5, #loc6])
#loc64 = loc(fused[#loc7, #loc8])
#loc65 = loc(fused[#loc9, #loc10])
#loc66 = loc(fused[#loc12, #loc11])
#loc67 = loc(fused[#loc14, #loc13])
#loc68 = loc(fused[#loc17, #loc15])
#loc69 = loc(fused[#loc20, #loc21])
#loc70 = loc(fused[#loc22, #loc23])
#loc71 = loc(fused[#loc24, #loc25])
#loc72 = loc(fused[#loc26, #loc27])
#loc73 = loc(fused[#loc28, #loc29])
#loc74 = loc(fused[#loc30, #loc31])
#loc75 = loc(fused[#loc32, #loc33])
#loc76 = loc(fused[#loc35, #loc34])
#loc77 = loc(fused[#loc38, #loc36])
#loc78 = loc(fused[#loc41, #loc39])
#loc79 = loc(fused[#loc44, #loc45])
#loc80 = loc(fused[#loc46, #loc47])
#loc81 = loc(fused[#loc48, #loc49])
#loc82 = loc(fused[#loc50, #loc51])
#loc83 = loc(fused[#loc53, #loc52])
#loc84 = loc(fused[#loc55, #loc54])
#loc85 = loc(fused[#loc58, #loc56])
