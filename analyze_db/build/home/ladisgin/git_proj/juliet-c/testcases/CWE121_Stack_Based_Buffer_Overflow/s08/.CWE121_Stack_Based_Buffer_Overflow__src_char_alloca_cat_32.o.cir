!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @strcat(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc103)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc104)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc105)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc106)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc107)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc108)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc106)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc107)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc20)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc20)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc20)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc20)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc20)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc20)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc20)
    cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc108)
    %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc21)
    cir.store %14, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc109)
    cir.br ^bb1 loc(#loc110)
  ^bb1:  // pred: ^bb0
    %15 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc8)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
    cir.store %16, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc102)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc26)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc26)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc27)
    %20 = cir.const #cir.int<100> : !s32i loc(#loc28)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc29)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc28)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc28)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc111)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc32)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc32)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc33)
    %27 = cir.const #cir.int<100> : !s32i loc(#loc34)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc35)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc34)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc36)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc112)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc37)
    %32 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc38)
    cir.store %31, %32 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc113)
    cir.br ^bb2 loc(#loc24)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc114)
  ^bb3:  // pred: ^bb2
    %33 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc10)
    %34 = cir.load %33 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc42)
    cir.store %34, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc103)
    cir.br ^bb4 loc(#loc115)
  ^bb4:  // pred: ^bb3
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc104)
    cir.store %35, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc104)
    %36 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc45)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc46)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
    %39 = cir.call @strcat(%37, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc45)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc48)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    cir.br ^bb5 loc(#loc44)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc41)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc6)
  } loc(#loc101)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc51)
  } loc(#loc116)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc119)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data", init] {alignment = 8 : i64} loc(#loc120)
    %2 = cir.alloca !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>>, ["dest"] {alignment = 16 : i64} loc(#loc121)
    %3 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc122)
    %4 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr1", init] {alignment = 8 : i64} loc(#loc123)
    %5 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["dataPtr2", init] {alignment = 8 : i64} loc(#loc124)
    %6 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBuffer", init] {alignment = 8 : i64} loc(#loc125)
    cir.store %3, %4 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc123)
    cir.store %3, %5 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc124)
    %7 = cir.const #cir.int<100> : !s32i loc(#loc69)
    %8 = cir.cast(integral, %7 : !s32i), !u64i loc(#loc69)
    %9 = cir.const #cir.int<1> : !u64i loc(#loc69)
    %10 = cir.binop(mul, %8, %9) : !u64i loc(#loc69)
    %11 = cir.alloca !u8i, !cir.ptr<!u8i>, %10 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc69)
    %12 = cir.cast(bitcast, %11 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc69)
    %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc69)
    cir.store %13, %6 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc125)
    %14 = cir.load %6 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
    cir.store %14, %3 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc126)
    cir.br ^bb1 loc(#loc127)
  ^bb1:  // pred: ^bb0
    %15 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc57)
    %16 = cir.load %15 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc74)
    cir.store %16, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc119)
    %17 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc75)
    %18 = cir.cast(bitcast, %17 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc75)
    %19 = cir.const #cir.int<65> : !s32i loc(#loc76)
    %20 = cir.const #cir.int<50> : !s32i loc(#loc77)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc78)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc77)
    %23 = cir.cast(integral, %22 : !s32i), !u64i loc(#loc77)
    cir.libc.memset %23 bytes from %18 set to %19 : !cir.ptr<!void>, !s32i, !u64i loc(#loc128)
    %24 = cir.const #cir.int<0> : !s32i loc(#loc81)
    %25 = cir.cast(integral, %24 : !s32i), !s8i loc(#loc81)
    %26 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc82)
    %27 = cir.const #cir.int<50> : !s32i loc(#loc83)
    %28 = cir.const #cir.int<1> : !s32i loc(#loc84)
    %29 = cir.binop(sub, %27, %28) nsw : !s32i loc(#loc83)
    %30 = cir.ptr_stride(%26 : !cir.ptr<!s8i>, %29 : !s32i), !cir.ptr<!s8i> loc(#loc85)
    cir.store %25, %30 : !s8i, !cir.ptr<!s8i> loc(#loc129)
    %31 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc86)
    %32 = cir.load deref %4 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc87)
    cir.store %31, %32 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc130)
    cir.br ^bb2 loc(#loc73)
  ^bb2:  // pred: ^bb1
    cir.br ^bb3 loc(#loc131)
  ^bb3:  // pred: ^bb2
    %33 = cir.load deref %5 : !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc59)
    %34 = cir.load %33 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc91)
    cir.store %34, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc120)
    cir.br ^bb4 loc(#loc132)
  ^bb4:  // pred: ^bb3
    %35 = cir.const #cir.zero : !cir.array<!s8i x 50> loc(#loc121)
    cir.store %35, %2 : !cir.array<!s8i x 50>, !cir.ptr<!cir.array<!s8i x 50>> loc(#loc121)
    %36 = cir.get_global @strcat : !cir.ptr<!cir.func<!cir.ptr<!s8i> (!cir.ptr<!s8i>, !cir.ptr<!s8i>)>> loc(#loc94)
    %37 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 50>>), !cir.ptr<!s8i> loc(#loc95)
    %38 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc96)
    %39 = cir.call @strcat(%37, %38) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc94)
    %40 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc97)
    cir.call @printLine(%40) : (!cir.ptr<!s8i>) -> () loc(#loc98)
    cir.br ^bb5 loc(#loc93)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc90)
  ^bb6:  // pred: ^bb5
    cir.return loc(#loc55)
  } loc(#loc118)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s08/CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":0:0)
#loc1 = loc("/usr/include/string.h":149:1)
#loc2 = loc("/usr/include/string.h":150:14)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":23:1)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":46:1)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":31:9)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":31:24)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":38:9)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":38:24)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":40:13)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":40:29)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":25:5)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":25:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":26:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":26:25)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":27:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":27:25)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":28:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":28:33)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":29:12)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":29:5)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":30:5)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":36:5)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":31:23)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:16)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:22)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:27)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:31)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:9)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":33:32)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":34:23)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":34:9)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":34:14)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":34:18)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":34:19)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":35:21)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":35:10)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":35:9)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":37:5)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":45:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":38:23)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":39:9)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":44:9)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":42:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":42:20)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":42:26)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":43:23)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":43:13)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":78:1)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":81:1)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":80:5)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":80:13)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":53:1)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":76:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":61:9)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":61:24)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":68:9)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":68:24)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":70:13)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":70:29)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":55:5)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":55:12)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":56:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":56:25)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":57:5)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":57:25)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":58:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":58:33)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":59:12)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":59:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":60:5)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":66:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":61:23)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:16)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:22)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:27)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:30)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":63:31)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":64:22)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":64:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":64:14)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":64:17)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":64:18)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":65:21)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":65:10)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":65:9)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":67:5)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":75:5)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":68:23)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":69:9)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":74:9)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":72:13)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":72:20)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":72:26)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":73:23)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__src_char_alloca_cat_32.c":73:13)
#loc99 = loc(fused[#loc1, #loc2])
#loc100 = loc(fused[#loc3, #loc4])
#loc101 = loc(fused[#loc5, #loc6])
#loc102 = loc(fused[#loc7, #loc8])
#loc103 = loc(fused[#loc9, #loc10])
#loc104 = loc(fused[#loc11, #loc12])
#loc105 = loc(fused[#loc13, #loc14])
#loc106 = loc(fused[#loc15, #loc16])
#loc107 = loc(fused[#loc17, #loc18])
#loc108 = loc(fused[#loc19, #loc20])
#loc109 = loc(fused[#loc22, #loc21])
#loc110 = loc(fused[#loc23, #loc24])
#loc111 = loc(fused[#loc30, #loc31])
#loc112 = loc(fused[#loc33, #loc32])
#loc113 = loc(fused[#loc39, #loc37])
#loc114 = loc(fused[#loc40, #loc41])
#loc115 = loc(fused[#loc43, #loc44])
#loc116 = loc(fused[#loc50, #loc51])
#loc117 = loc(fused[#loc52, #loc53])
#loc118 = loc(fused[#loc54, #loc55])
#loc119 = loc(fused[#loc56, #loc57])
#loc120 = loc(fused[#loc58, #loc59])
#loc121 = loc(fused[#loc60, #loc61])
#loc122 = loc(fused[#loc62, #loc63])
#loc123 = loc(fused[#loc64, #loc65])
#loc124 = loc(fused[#loc66, #loc67])
#loc125 = loc(fused[#loc68, #loc69])
#loc126 = loc(fused[#loc71, #loc70])
#loc127 = loc(fused[#loc72, #loc73])
#loc128 = loc(fused[#loc79, #loc80])
#loc129 = loc(fused[#loc82, #loc81])
#loc130 = loc(fused[#loc88, #loc86])
#loc131 = loc(fused[#loc89, #loc90])
#loc132 = loc(fused[#loc92, #loc93])
