!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_61a.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @CWE190_Integer_Overflow__int_fscanf_multiply_61b_badSource(!s32i) -> !s32i loc(#loc92)
  cir.func private  @printIntLine(!s32i) loc(#loc93)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_61_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc95)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc9)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc96)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc11)
    %3 = cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_61b_badSource(%2) : (!s32i) -> !s32i loc(#loc12)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc97)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc17)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc18)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc99)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc101)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc23)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc22)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc23)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc101)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc25)
      } loc(#loc100)
    } loc(#loc98)
    cir.return loc(#loc6)
  } loc(#loc94)
  cir.func no_proto  @CWE190_Integer_Overflow__int_fscanf_multiply_61_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc28)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc102)
  cir.func private  @CWE190_Integer_Overflow__int_fscanf_multiply_61b_goodG2BSource(!s32i) -> !s32i loc(#loc105)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc107)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc38)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc108)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    %3 = cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_61b_goodG2BSource(%2) : (!s32i) -> !s32i loc(#loc41)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc109)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc46)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc47)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc111)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc48)
      cir.if %7 {
        %8 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc113)
        %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc52)
        %10 = cir.const #cir.int<2> : !s32i loc(#loc51)
        %11 = cir.binop(mul, %9, %10) nsw : !s32i loc(#loc52)
        cir.store %11, %8 : !s32i, !cir.ptr<!s32i> loc(#loc113)
        %12 = cir.load %8 : !cir.ptr<!s32i>, !s32i loc(#loc53)
        cir.call @printIntLine(%12) : (!s32i) -> () loc(#loc54)
      } loc(#loc112)
    } loc(#loc110)
    cir.return loc(#loc35)
  } loc(#loc106)
  cir.func private  @CWE190_Integer_Overflow__int_fscanf_multiply_61b_goodB2GSource(!s32i) -> !s32i loc(#loc114)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc115)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc59)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc117)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc64)
    cir.store %1, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc66)
    %3 = cir.call @CWE190_Integer_Overflow__int_fscanf_multiply_61b_goodB2GSource(%2) : (!s32i) -> !s32i loc(#loc67)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
      %5 = cir.const #cir.int<0> : !s32i loc(#loc73)
      %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc121)
      %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc74)
      cir.if %7 {
        cir.scope {
          %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc78)
          %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc79)
          %10 = cir.const #cir.int<2> : !s32i loc(#loc80)
          %11 = cir.binop(div, %9, %10) : !s32i loc(#loc124)
          %12 = cir.cmp(lt, %8, %11) : !s32i, !s32i loc(#loc125)
          %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc82)
          cir.if %13 {
            %14 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc127)
            %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc88)
            %16 = cir.const #cir.int<2> : !s32i loc(#loc87)
            %17 = cir.binop(mul, %15, %16) nsw : !s32i loc(#loc88)
            cir.store %17, %14 : !s32i, !cir.ptr<!s32i> loc(#loc127)
            %18 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc89)
            cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc90)
          } else {
            %14 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc59)
            %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc59)
            cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc91)
          } loc(#loc126)
        } loc(#loc123)
      } loc(#loc122)
    } loc(#loc120)
    cir.return loc(#loc61)
  } loc(#loc116)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":23:1)
#loc2 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":23:72)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":25:1)
#loc6 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":37:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":27:5)
#loc8 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":27:9)
#loc9 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":29:12)
#loc10 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":29:5)
#loc11 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":30:71)
#loc12 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":30:12)
#loc13 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":30:5)
#loc14 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":30:75)
#loc15 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":36:5)
#loc17 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":31:8)
#loc18 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":31:15)
#loc19 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":31:13)
#loc20 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":32:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":34:9)
#loc22 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":34:29)
#loc23 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":34:22)
#loc24 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":35:22)
#loc25 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":35:9)
#loc26 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":84:1)
#loc27 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":88:1)
#loc28 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":86:5)
#loc29 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":86:13)
#loc30 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":87:5)
#loc31 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":87:13)
#loc32 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":44:1)
#loc33 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":44:76)
#loc34 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":46:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":58:1)
#loc36 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":48:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":50:12)
#loc39 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":50:5)
#loc40 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":51:75)
#loc41 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":51:12)
#loc42 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":51:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":51:79)
#loc44 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":52:5)
#loc45 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":57:5)
#loc46 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":52:8)
#loc47 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":52:15)
#loc48 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":52:13)
#loc49 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":53:5)
#loc50 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":55:9)
#loc51 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":55:29)
#loc52 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":55:22)
#loc53 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":56:22)
#loc54 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":56:9)
#loc55 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":61:1)
#loc56 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":61:76)
#loc57 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc58 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc59 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":79:23)
#loc60 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":63:1)
#loc61 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":82:1)
#loc62 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":65:5)
#loc63 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":65:9)
#loc64 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":67:12)
#loc65 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":67:5)
#loc66 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":68:75)
#loc67 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":68:12)
#loc68 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":68:5)
#loc69 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":68:79)
#loc70 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":69:5)
#loc71 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":81:5)
#loc72 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":69:8)
#loc73 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":69:15)
#loc74 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":69:13)
#loc75 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":70:5)
#loc76 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:9)
#loc77 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":80:9)
#loc78 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:13)
#loc79 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:21)
#loc80 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:29)
#loc81 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:30)
#loc82 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":72:18)
#loc83 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":73:9)
#loc84 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":76:9)
#loc85 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":78:9)
#loc86 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":74:13)
#loc87 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":74:33)
#loc88 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":74:26)
#loc89 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":75:26)
#loc90 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":75:13)
#loc91 = loc("CWE190_Integer_Overflow__int_fscanf_multiply_61a.c":79:13)
#loc92 = loc(fused[#loc1, #loc2])
#loc93 = loc(fused[#loc3, #loc4])
#loc94 = loc(fused[#loc5, #loc6])
#loc95 = loc(fused[#loc7, #loc8])
#loc96 = loc(fused[#loc10, #loc9])
#loc97 = loc(fused[#loc13, #loc14])
#loc98 = loc(fused[#loc15, #loc16])
#loc99 = loc(fused[#loc17, #loc18])
#loc100 = loc(fused[#loc20, #loc16])
#loc101 = loc(fused[#loc21, #loc22])
#loc102 = loc(fused[#loc26, #loc27])
#loc103 = loc(fused[#loc28, #loc29])
#loc104 = loc(fused[#loc30, #loc31])
#loc105 = loc(fused[#loc32, #loc33])
#loc106 = loc(fused[#loc34, #loc35])
#loc107 = loc(fused[#loc36, #loc37])
#loc108 = loc(fused[#loc39, #loc38])
#loc109 = loc(fused[#loc42, #loc43])
#loc110 = loc(fused[#loc44, #loc45])
#loc111 = loc(fused[#loc46, #loc47])
#loc112 = loc(fused[#loc49, #loc45])
#loc113 = loc(fused[#loc50, #loc51])
#loc114 = loc(fused[#loc55, #loc56])
#loc115 = loc(fused[#loc57, #loc58])
#loc116 = loc(fused[#loc60, #loc61])
#loc117 = loc(fused[#loc62, #loc63])
#loc118 = loc(fused[#loc65, #loc64])
#loc119 = loc(fused[#loc68, #loc69])
#loc120 = loc(fused[#loc70, #loc71])
#loc121 = loc(fused[#loc72, #loc73])
#loc122 = loc(fused[#loc75, #loc71])
#loc123 = loc(fused[#loc76, #loc77])
#loc124 = loc(fused[#loc79, #loc80])
#loc125 = loc(fused[#loc78, #loc81])
#loc126 = loc(fused[#loc83, #loc84, #loc85, #loc77])
#loc127 = loc(fused[#loc86, #loc87])
