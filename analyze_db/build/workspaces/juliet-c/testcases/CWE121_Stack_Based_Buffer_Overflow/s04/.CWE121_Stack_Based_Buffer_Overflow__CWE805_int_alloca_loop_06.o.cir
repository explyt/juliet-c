!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e", "dlti.endianness" = "little">} {
  cir.func private @printIntLine(!s32i) loc(#loc144)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06_bad() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc146)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc147)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc8)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc8)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc8)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc8)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc8)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc148)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc8)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc8)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc147)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc10)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc10)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc10)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc10)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc10)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc10)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc10)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc148)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc13)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc14)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc150)
      cir.if %19 {
        %20 = cir.load %1 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc16)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc152)
      } loc(#loc151)
    } loc(#loc149)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc154)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc154)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc154)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc156)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc28)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc28)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc158)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc30)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc31)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc31)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc159)
            cir.condition(%29) loc(#loc32)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc34)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc35)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc35)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc35)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc36)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc37)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc38)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc161)
            } loc(#loc160)
            cir.yield loc(#loc27)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc40)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc41)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc162)
            cir.yield loc(#loc157)
          } loc(#loc157)
        } loc(#loc157)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc42)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc43)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc44)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc42)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc45)
      } loc(#loc155)
    } loc(#loc153)
    cir.return loc(#loc4)
  } loc(#loc145)
  cir.func no_proto @CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<()>> loc(#loc164)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc48)
    %1 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<()>> loc(#loc165)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc50)
    cir.return loc(#loc47)
  } loc(#loc163)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc166)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc168)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc169)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc60)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc60)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc60)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc60)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc60)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc170)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc60)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc60)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc169)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc62)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc62)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc62)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc62)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc62)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc62)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc62)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc170)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc65)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc66)
      %19 = cir.cmp(ne, %17, %18) : !s32i, !cir.bool loc(#loc172)
      cir.if %19 {
        %20 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc54)
        %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc54)
        cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc70)
      } else {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc71)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc174)
      } loc(#loc173)
    } loc(#loc171)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc176)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc176)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc176)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc178)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc83)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc83)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc180)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc85)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc86)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc86)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc181)
            cir.condition(%29) loc(#loc87)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc89)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc90)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc90)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc90)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc91)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc92)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc93)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc183)
            } loc(#loc182)
            cir.yield loc(#loc82)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc95)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc96)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc184)
            cir.yield loc(#loc179)
          } loc(#loc179)
        } loc(#loc179)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc97)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc98)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc99)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc97)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc100)
      } loc(#loc177)
    } loc(#loc175)
    cir.return loc(#loc56)
  } loc(#loc167)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["data"] {alignment = 8 : i64} loc(#loc186)
    %1 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc187)
    %2 = cir.const #cir.int<50> : !s32i loc(#loc106)
    %3 = cir.cast(integral, %2 : !s32i), !u64i loc(#loc106)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc106)
    %5 = cir.binop(mul, %3, %4) : !u64i loc(#loc106)
    %6 = cir.alloca !u8i, !cir.ptr<!u8i>, %5 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc106)
    %7 = cir.alloca !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc188)
    %8 = cir.cast(bitcast, %6 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc106)
    %9 = cir.cast(bitcast, %8 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc106)
    cir.store %9, %1 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc187)
    %10 = cir.const #cir.int<100> : !s32i loc(#loc108)
    %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc108)
    %12 = cir.const #cir.int<4> : !u64i loc(#loc108)
    %13 = cir.binop(mul, %11, %12) : !u64i loc(#loc108)
    %14 = cir.alloca !u8i, !cir.ptr<!u8i>, %13 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc108)
    %15 = cir.cast(bitcast, %14 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc108)
    %16 = cir.cast(bitcast, %15 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc108)
    cir.store %16, %7 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc188)
    cir.scope {
      %17 = cir.const #cir.int<5> : !s32i loc(#loc111)
      %18 = cir.const #cir.int<5> : !s32i loc(#loc112)
      %19 = cir.cmp(eq, %17, %18) : !s32i, !cir.bool loc(#loc190)
      cir.if %19 {
        %20 = cir.load %7 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc114)
        cir.store %20, %0 : !cir.ptr<!s32i>, !cir.ptr<!cir.ptr<!s32i>> loc(#loc192)
      } loc(#loc191)
    } loc(#loc189)
    cir.scope {
      %17 = cir.alloca !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>>, ["source"] {alignment = 16 : i64} loc(#loc194)
      %18 = cir.const #cir.zero : !cir.array<!s32i x 100> loc(#loc194)
      cir.store %18, %17 : !cir.array<!s32i x 100>, !cir.ptr<!cir.array<!s32i x 100>> loc(#loc194)
      cir.scope {
        %19 = cir.alloca !u64i, !cir.ptr<!u64i>, ["i"] {alignment = 8 : i64} loc(#loc196)
        cir.scope {
          %24 = cir.const #cir.int<0> : !s32i loc(#loc126)
          %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc126)
          cir.store %25, %19 : !u64i, !cir.ptr<!u64i> loc(#loc198)
          cir.for : cond {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc128)
            %27 = cir.const #cir.int<100> : !s32i loc(#loc129)
            %28 = cir.cast(integral, %27 : !s32i), !u64i loc(#loc129)
            %29 = cir.cmp(lt, %26, %28) : !u64i, !cir.bool loc(#loc199)
            cir.condition(%29) loc(#loc130)
          } body {
            cir.scope {
              %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc132)
              %27 = cir.cast(array_to_ptrdecay, %17 : !cir.ptr<!cir.array<!s32i x 100>>), !cir.ptr<!s32i> loc(#loc133)
              %28 = cir.ptr_stride(%27 : !cir.ptr<!s32i>, %26 : !u64i), !cir.ptr<!s32i> loc(#loc133)
              %29 = cir.load %28 : !cir.ptr<!s32i>, !s32i loc(#loc133)
              %30 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc134)
              %31 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc135)
              %32 = cir.ptr_stride(%30 : !cir.ptr<!s32i>, %31 : !u64i), !cir.ptr<!s32i> loc(#loc136)
              cir.store %29, %32 : !s32i, !cir.ptr<!s32i> loc(#loc201)
            } loc(#loc200)
            cir.yield loc(#loc125)
          } step {
            %26 = cir.load %19 : !cir.ptr<!u64i>, !u64i loc(#loc138)
            %27 = cir.unary(inc, %26) : !u64i, !u64i loc(#loc139)
            cir.store %27, %19 : !u64i, !cir.ptr<!u64i> loc(#loc202)
            cir.yield loc(#loc197)
          } loc(#loc197)
        } loc(#loc197)
        %20 = cir.load %0 : !cir.ptr<!cir.ptr<!s32i>>, !cir.ptr<!s32i> loc(#loc140)
        %21 = cir.const #cir.int<0> : !s32i loc(#loc141)
        %22 = cir.ptr_stride(%20 : !cir.ptr<!s32i>, %21 : !s32i), !cir.ptr<!s32i> loc(#loc142)
        %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc140)
        cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc143)
      } loc(#loc195)
    } loc(#loc193)
    cir.return loc(#loc102)
  } loc(#loc185)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s04/CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":25:1)
#loc4 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":48:1)
#loc5 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":27:5)
#loc6 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":27:11)
#loc7 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":28:5)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":28:34)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":29:5)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":29:35)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":30:5)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":35:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":30:8)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":30:27)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":31:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":34:16)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":34:9)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":36:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":47:5)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":37:9)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":37:29)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":38:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":46:9)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":39:13)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":39:20)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:13)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":44:13)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:22)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:18)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:25)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:29)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:27)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":42:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:34)
#loc35 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:27)
#loc36 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:17)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:22)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:23)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":43:35)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:35)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":41:34)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":45:26)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":45:31)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":45:32)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":45:13)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":109:1)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":113:1)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":111:5)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":111:14)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":112:5)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":112:14)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":63:19)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":55:1)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":82:1)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":57:5)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":57:11)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":58:5)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":58:34)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":59:5)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":59:35)
#loc63 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":60:5)
#loc64 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":69:5)
#loc65 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":60:8)
#loc66 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":60:27)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":61:5)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":64:5)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":66:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":63:9)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":68:16)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":68:9)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":70:5)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":81:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":71:9)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":71:29)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":72:9)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":80:9)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":73:13)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":73:20)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:13)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":78:13)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:22)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:18)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:25)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:29)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:27)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":76:13)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:34)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:27)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:17)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:22)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:23)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":77:35)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:35)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":75:34)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":79:26)
#loc98 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":79:31)
#loc99 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":79:32)
#loc100 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":79:13)
#loc101 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":85:1)
#loc102 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":107:1)
#loc103 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":87:5)
#loc104 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":87:11)
#loc105 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":88:5)
#loc106 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":88:34)
#loc107 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":89:5)
#loc108 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":89:35)
#loc109 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":90:5)
#loc110 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":94:5)
#loc111 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":90:8)
#loc112 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":90:27)
#loc113 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":91:5)
#loc114 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":93:16)
#loc115 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":93:9)
#loc116 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":95:5)
#loc117 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":106:5)
#loc118 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":96:9)
#loc119 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":96:29)
#loc120 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":97:9)
#loc121 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":105:9)
#loc122 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":98:13)
#loc123 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":98:20)
#loc124 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:13)
#loc125 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":103:13)
#loc126 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:22)
#loc127 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:18)
#loc128 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:25)
#loc129 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:29)
#loc130 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:27)
#loc131 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":101:13)
#loc132 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:34)
#loc133 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:27)
#loc134 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:17)
#loc135 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:22)
#loc136 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:23)
#loc137 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":102:35)
#loc138 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:35)
#loc139 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":100:34)
#loc140 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":104:26)
#loc141 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":104:31)
#loc142 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":104:32)
#loc143 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE805_int_alloca_loop_06.c":104:13)
#loc144 = loc(fused[#loc1, #loc2])
#loc145 = loc(fused[#loc3, #loc4])
#loc146 = loc(fused[#loc5, #loc6])
#loc147 = loc(fused[#loc7, #loc8])
#loc148 = loc(fused[#loc9, #loc10])
#loc149 = loc(fused[#loc11, #loc12])
#loc150 = loc(fused[#loc13, #loc14])
#loc151 = loc(fused[#loc15, #loc12])
#loc152 = loc(fused[#loc17, #loc16])
#loc153 = loc(fused[#loc18, #loc19])
#loc154 = loc(fused[#loc20, #loc21])
#loc155 = loc(fused[#loc22, #loc23])
#loc156 = loc(fused[#loc24, #loc25])
#loc157 = loc(fused[#loc26, #loc27])
#loc158 = loc(fused[#loc29, #loc28])
#loc159 = loc(fused[#loc30, #loc31])
#loc160 = loc(fused[#loc33, #loc27])
#loc161 = loc(fused[#loc36, #loc39])
#loc162 = loc(fused[#loc41, #loc40])
#loc163 = loc(fused[#loc46, #loc47])
#loc164 = loc(fused[#loc48, #loc49])
#loc165 = loc(fused[#loc50, #loc51])
#loc166 = loc(fused[#loc52, #loc53])
#loc167 = loc(fused[#loc55, #loc56])
#loc168 = loc(fused[#loc57, #loc58])
#loc169 = loc(fused[#loc59, #loc60])
#loc170 = loc(fused[#loc61, #loc62])
#loc171 = loc(fused[#loc63, #loc64])
#loc172 = loc(fused[#loc65, #loc66])
#loc173 = loc(fused[#loc67, #loc68, #loc69, #loc64])
#loc174 = loc(fused[#loc72, #loc71])
#loc175 = loc(fused[#loc73, #loc74])
#loc176 = loc(fused[#loc75, #loc76])
#loc177 = loc(fused[#loc77, #loc78])
#loc178 = loc(fused[#loc79, #loc80])
#loc179 = loc(fused[#loc81, #loc82])
#loc180 = loc(fused[#loc84, #loc83])
#loc181 = loc(fused[#loc85, #loc86])
#loc182 = loc(fused[#loc88, #loc82])
#loc183 = loc(fused[#loc91, #loc94])
#loc184 = loc(fused[#loc96, #loc95])
#loc185 = loc(fused[#loc101, #loc102])
#loc186 = loc(fused[#loc103, #loc104])
#loc187 = loc(fused[#loc105, #loc106])
#loc188 = loc(fused[#loc107, #loc108])
#loc189 = loc(fused[#loc109, #loc110])
#loc190 = loc(fused[#loc111, #loc112])
#loc191 = loc(fused[#loc113, #loc110])
#loc192 = loc(fused[#loc115, #loc114])
#loc193 = loc(fused[#loc116, #loc117])
#loc194 = loc(fused[#loc118, #loc119])
#loc195 = loc(fused[#loc120, #loc121])
#loc196 = loc(fused[#loc122, #loc123])
#loc197 = loc(fused[#loc124, #loc125])
#loc198 = loc(fused[#loc127, #loc126])
#loc199 = loc(fused[#loc128, #loc129])
#loc200 = loc(fused[#loc131, #loc125])
#loc201 = loc(fused[#loc134, #loc137])
#loc202 = loc(fused[#loc139, #loc138])
