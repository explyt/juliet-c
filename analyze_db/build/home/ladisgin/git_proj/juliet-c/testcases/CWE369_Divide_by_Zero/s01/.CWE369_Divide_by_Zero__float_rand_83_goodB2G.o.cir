!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G = !cir.struct<class "CWE369_Divide_by_Zero__float_rand_83::CWE369_Divide_by_Zero__float_rand_83_goodB2G" {!cir.float} #cir.record.decl.ast>
!u32i = !cir.int<u, 32>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":24:47)
#loc6 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":24:92)
#loc7 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":24:98)
#loc12 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":28:19)
#loc16 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:8)
#loc17 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":238:14)
#loc29 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":31:47)
#loc48 = loc(fused[#loc6, #loc7])
#loc52 = loc(fused[#loc16, #loc17])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, i32 = dense<32> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc46)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GC2Ef(%arg0: !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":24:47), %arg1: !cir.float loc(fused[#loc6, #loc7])) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc5)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["dataCopy", init] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>> loc(#loc8)
    cir.store %arg1, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc8)
    %2 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>>, !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> loc(#loc5)
    %3 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc9)
    %4 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> -> !cir.ptr<!cir.float> loc(#loc10)
    cir.store %3, %4 : !cir.float, !cir.ptr<!cir.float> loc(#loc49)
    %5 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %6 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %7 = cir.binop(and, %5, %6) : !s32i loc(#loc12)
    %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc12)
    cir.brcond %8 ^bb1, ^bb2 loc(#loc12)
  ^bb1:  // pred: ^bb0
    %9 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc12)
    %11 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %12 = cir.shift(left, %10 : !u32i, %11 : !s32i) -> !u32i loc(#loc12)
    %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc12)
    %15 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc12)
    %17 = cir.binop(xor, %12, %16) : !u32i loc(#loc12)
    %18 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %19 = cir.cast(integral, %18 : !s32i), !u32i loc(#loc12)
    %20 = cir.binop(xor, %17, %19) : !u32i loc(#loc12)
    cir.br ^bb3(%20 : !u32i) loc(#loc12)
  ^bb2:  // pred: ^bb0
    %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc12)
    %23 = cir.const #cir.int<30> : !s32i loc(#loc12)
    %24 = cir.shift(left, %22 : !u32i, %23 : !s32i) -> !u32i loc(#loc12)
    %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc12)
    %27 = cir.const #cir.int<15> : !s32i loc(#loc12)
    %28 = cir.shift(left, %26 : !u32i, %27 : !s32i) -> !u32i loc(#loc12)
    %29 = cir.binop(xor, %24, %28) : !u32i loc(#loc12)
    %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc12)
    %31 = cir.cast(integral, %30 : !s32i), !u32i loc(#loc12)
    %32 = cir.binop(xor, %29, %31) : !u32i loc(#loc12)
    %33 = cir.unary(minus, %32) : !u32i, !u32i loc(#loc12)
    %34 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %35 = cir.cast(integral, %34 : !s32i), !u32i loc(#loc12)
    %36 = cir.binop(sub, %33, %35) : !u32i loc(#loc12)
    cir.br ^bb3(%36 : !u32i) loc(#loc12)
  ^bb3(%37: !u32i loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":28:19)):  // 2 preds: ^bb1, ^bb2
    cir.br ^bb4 loc(#loc12)
  ^bb4:  // pred: ^bb3
    %38 = cir.cast(integral, %37 : !u32i), !s32i loc(#loc12)
    %39 = cir.cast(int_to_float, %38 : !s32i), !cir.float loc(#loc12)
    %40 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> -> !cir.ptr<!cir.float> loc(#loc10)
    cir.store %39, %40 : !cir.float, !cir.ptr<!cir.float> loc(#loc50)
    cir.return loc(#loc4)
  } loc(#loc47)
  cir.func private @_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GC1Ef(!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>, !cir.float) alias(@_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GC2Ef) loc(#loc47)
  cir.func linkonce_odr @_ZSt4fabsf(%arg0: !cir.float loc(fused[#loc16, #loc17])) -> !cir.float extra(#fn_attr1) {
    %0 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__x", init] {alignment = 4 : i64} loc(#loc52)
    %1 = cir.alloca !cir.float, !cir.ptr<!cir.float>, ["__retval"] {alignment = 4 : i64} loc(#loc15)
    cir.store %arg0, %0 : !cir.float, !cir.ptr<!cir.float> loc(#loc18)
    %2 = cir.load %0 : !cir.ptr<!cir.float>, !cir.float loc(#loc19)
    %3 = cir.fabs %2 : !cir.float loc(#loc19)
    cir.store %3, %1 : !cir.float, !cir.ptr<!cir.float> loc(#loc53)
    %4 = cir.load %1 : !cir.ptr<!cir.float>, !cir.float loc(#loc53)
    cir.return %4 : !cir.float loc(#loc53)
  } loc(#loc51)
  cir.func private @printIntLine(!s32i) loc(#loc54)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc55)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc26)
  cir.func @_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GD2Ev(%arg0: !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":31:47)) extra(#fn_attr2) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc57)
    %1 = cir.alloca !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>>, ["this", init] {alignment = 8 : i64} loc(#loc29)
    cir.store %arg0, %1 : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>, !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>> loc(#loc32)
    %2 = cir.load %1 : !cir.ptr<!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>>, !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> loc(#loc29)
    cir.br ^bb1 loc(#loc58)
  ^bb1:  // pred: ^bb0
    %3 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> -> !cir.ptr<!cir.float> loc(#loc10)
    %4 = cir.load %3 : !cir.ptr<!cir.float>, !cir.float loc(#loc35)
    %5 = cir.call @_ZSt4fabsf(%4) : (!cir.float) -> !cir.float loc(#loc36)
    %6 = cir.cast(floating, %5 : !cir.float), !cir.double loc(#loc36)
    %7 = cir.const #cir.fp<9.9999999999999995E-7> : !cir.double loc(#loc37)
    %8 = cir.cmp(gt, %6, %7) : !cir.double, !cir.bool loc(#loc59)
    cir.brcond %8 ^bb2, ^bb3 loc(#loc60)
  ^bb2:  // pred: ^bb1
    %9 = cir.const #cir.fp<1.000000e+02> : !cir.double loc(#loc41)
    %10 = cir.get_member %2[0] {name = "data"} : !cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G> -> !cir.ptr<!cir.float> loc(#loc10)
    %11 = cir.load %10 : !cir.ptr<!cir.float>, !cir.float loc(#loc42)
    %12 = cir.cast(floating, %11 : !cir.float), !cir.double loc(#loc42)
    %13 = cir.binop(div, %9, %12) : !cir.double loc(#loc61)
    %14 = cir.cast(float_to_int, %13 : !cir.double), !s32i loc(#loc61)
    cir.store %14, %0 : !s32i, !cir.ptr<!s32i> loc(#loc57)
    %15 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc43)
    cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc44)
    cir.br ^bb4 loc(#loc39)
  ^bb3:  // pred: ^bb1
    %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc26)
    %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc26)
    cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    cir.br ^bb4 loc(#loc34)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc34)
  ^bb5:  // pred: ^bb4
    cir.return loc(#loc28)
  } loc(#loc56)
  cir.func private @_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GD1Ev(!cir.ptr<!ty_CWE369_Divide_by_Zero__float_rand_833A3ACWE369_Divide_by_Zero__float_rand_83_goodB2G>) alias(@_ZN36CWE369_Divide_by_Zero__float_rand_8344CWE369_Divide_by_Zero__float_rand_83_goodB2GD2Ev) loc(#loc56)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s01/CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":24:1)
#loc4 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":29:1)
#loc8 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":25:1)
#loc9 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":26:12)
#loc10 = loc("./CWE369_Divide_by_Zero__float_rand_83.h":58:11)
#loc11 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":26:5)
#loc13 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":28:5)
#loc14 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":237:3)
#loc15 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:34)
#loc18 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:3)
#loc19 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:28)
#loc20 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:5)
#loc21 = loc("/usr/lib/gcc/x86_64-redhat-linux/14/../../../../include/c++/14/cmath":239:31)
#loc22 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc23 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc24 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc25 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc26 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":41:19)
#loc27 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":31:1)
#loc28 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":43:1)
#loc30 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":36:9)
#loc31 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":36:40)
#loc32 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":32:1)
#loc33 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":34:5)
#loc34 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":42:5)
#loc35 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":34:13)
#loc36 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":34:8)
#loc37 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":34:21)
#loc38 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":35:5)
#loc39 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":38:5)
#loc40 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":40:5)
#loc41 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":36:28)
#loc42 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":36:36)
#loc43 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":37:22)
#loc44 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":37:9)
#loc45 = loc("CWE369_Divide_by_Zero__float_rand_83_goodB2G.cpp":41:9)
#loc46 = loc(fused[#loc1, #loc2])
#loc47 = loc(fused[#loc3, #loc4])
#loc49 = loc(fused[#loc11, #loc9])
#loc50 = loc(fused[#loc13, #loc12])
#loc51 = loc(fused[#loc14, #loc15])
#loc53 = loc(fused[#loc20, #loc21])
#loc54 = loc(fused[#loc22, #loc23])
#loc55 = loc(fused[#loc24, #loc25])
#loc56 = loc(fused[#loc27, #loc28])
#loc57 = loc(fused[#loc30, #loc31])
#loc58 = loc(fused[#loc33, #loc34])
#loc59 = loc(fused[#loc36, #loc37])
#loc60 = loc(fused[#loc38, #loc39, #loc40, #loc34])
#loc61 = loc(fused[#loc41, #loc42])
