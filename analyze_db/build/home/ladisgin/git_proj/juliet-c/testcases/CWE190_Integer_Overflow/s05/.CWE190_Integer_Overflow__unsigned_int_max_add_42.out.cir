!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc3 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":22:31)
#loc4 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":22:44)
#loc47 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":105:10)
#loc48 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":105:14)
#loc49 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":105:20)
#loc50 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":105:32)
#loc67 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":66:35)
#loc68 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":66:48)
#loc100 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":46:35)
#loc101 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":46:48)
#loc125 = loc(fused[#loc3, #loc4])
#loc143 = loc(fused[#loc47, #loc48])
#loc144 = loc(fused[#loc49, #loc50])
#loc149 = loc(fused[#loc67, #loc68])
#loc162 = loc(fused[#loc100, #loc101])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func internal private @badSource(%arg0: !u32i loc(fused[#loc3, #loc4])) -> !u32i extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc125)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc2)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc5)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc6)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc6)
    %4 = cir.const #cir.int<2> : !u32i loc(#loc6)
    %5 = cir.binop(mul, %3, %4) : !u32i loc(#loc6)
    %6 = cir.const #cir.int<1> : !u32i loc(#loc6)
    %7 = cir.binop(add, %5, %6) : !u32i loc(#loc6)
    cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc126)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc8)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc127)
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc127)
    cir.return %9 : !u32i loc(#loc127)
  } loc(#loc124)
  cir.func private @printUnsignedLine(!u32i) loc(#loc128)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_42_bad() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc130)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc16)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc16)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc131)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc18)
    %4 = cir.call @badSource(%3) : (!u32i) -> !u32i loc(#loc19)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc132)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc134)
      %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc26)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc25)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc25)
      %9 = cir.binop(add, %6, %8) : !u32i loc(#loc135)
      cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc134)
      %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc27)
      cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc28)
    } loc(#loc133)
    cir.return loc(#loc13)
  } loc(#loc129)
  cir.func no_proto @CWE190_Integer_Overflow__unsigned_int_max_add_42_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc31)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    cir.return loc(#loc30)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc41)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc42)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc44)
  cir.func @main(%arg0: !s32i loc(fused[#loc47, #loc48]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc49, #loc50])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc46)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc51)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc51)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc52)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc53)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc53)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc54)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc41)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc41)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc55)
    %8 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_42_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_42_good() : () -> () loc(#loc56)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc42)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc42)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc43)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc59)
    %13 = cir.get_global @CWE190_Integer_Overflow__unsigned_int_max_add_42_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE190_Integer_Overflow__unsigned_int_max_add_42_bad() : () -> () loc(#loc60)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc44)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc63)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func internal private @goodB2GSource(%arg0: !u32i loc(fused[#loc67, #loc68])) -> !u32i extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc66)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc69)
    %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc70)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc70)
    %4 = cir.const #cir.int<2> : !u32i loc(#loc70)
    %5 = cir.binop(mul, %3, %4) : !u32i loc(#loc70)
    %6 = cir.const #cir.int<1> : !u32i loc(#loc70)
    %7 = cir.binop(add, %5, %6) : !u32i loc(#loc70)
    cir.store %7, %0 : !u32i, !cir.ptr<!u32i> loc(#loc150)
    %8 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc72)
    cir.store %8, %1 : !u32i, !cir.ptr<!u32i> loc(#loc151)
    %9 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc151)
    cir.return %9 : !u32i loc(#loc151)
  } loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc74)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc153)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc79)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc79)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc154)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc81)
    %4 = cir.call @goodB2GSource(%3) : (!u32i) -> !u32i loc(#loc82)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc155)
    cir.scope {
      %5 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc87)
      %6 = cir.const #cir.int<2147483647> : !s32i loc(#loc88)
      %7 = cir.cast(integral, %6 : !s32i), !u32i loc(#loc88)
      %8 = cir.const #cir.int<2> : !u32i loc(#loc88)
      %9 = cir.binop(mul, %7, %8) : !u32i loc(#loc88)
      %10 = cir.const #cir.int<1> : !u32i loc(#loc88)
      %11 = cir.binop(add, %9, %10) : !u32i loc(#loc88)
      %12 = cir.cmp(lt, %5, %11) : !u32i, !cir.bool loc(#loc157)
      cir.if %12 {
        %13 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc159)
        %14 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc94)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc93)
        %16 = cir.cast(integral, %15 : !s32i), !u32i loc(#loc93)
        %17 = cir.binop(add, %14, %16) : !u32i loc(#loc160)
        cir.store %17, %13 : !u32i, !cir.ptr<!u32i> loc(#loc159)
        %18 = cir.load %13 : !cir.ptr<!u32i>, !u32i loc(#loc95)
        cir.call @printUnsignedLine(%18) : (!u32i) -> () loc(#loc96)
      } else {
        %13 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc74)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc74)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc97)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc76)
  } loc(#loc152)
  cir.func internal private @goodG2BSource(%arg0: !u32i loc(fused[#loc100, #loc101])) -> !u32i extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !u32i, !cir.ptr<!u32i>, ["__retval"] {alignment = 4 : i64} loc(#loc99)
    cir.store %arg0, %0 : !u32i, !cir.ptr<!u32i> loc(#loc102)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc103)
    %3 = cir.cast(integral, %2 : !s32i), !u32i loc(#loc103)
    cir.store %3, %0 : !u32i, !cir.ptr<!u32i> loc(#loc163)
    %4 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc105)
    cir.store %4, %1 : !u32i, !cir.ptr<!u32i> loc(#loc164)
    %5 = cir.load %1 : !cir.ptr<!u32i>, !u32i loc(#loc164)
    cir.return %5 : !u32i loc(#loc164)
  } loc(#loc161)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !u32i, !cir.ptr<!u32i>, ["data"] {alignment = 4 : i64} loc(#loc166)
    %1 = cir.const #cir.int<0> : !s32i loc(#loc111)
    %2 = cir.cast(integral, %1 : !s32i), !u32i loc(#loc111)
    cir.store %2, %0 : !u32i, !cir.ptr<!u32i> loc(#loc167)
    %3 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc113)
    %4 = cir.call @goodG2BSource(%3) : (!u32i) -> !u32i loc(#loc114)
    cir.store %4, %0 : !u32i, !cir.ptr<!u32i> loc(#loc168)
    cir.scope {
      %5 = cir.alloca !u32i, !cir.ptr<!u32i>, ["result", init] {alignment = 4 : i64} loc(#loc170)
      %6 = cir.load %0 : !cir.ptr<!u32i>, !u32i loc(#loc121)
      %7 = cir.const #cir.int<1> : !s32i loc(#loc120)
      %8 = cir.cast(integral, %7 : !s32i), !u32i loc(#loc120)
      %9 = cir.binop(add, %6, %8) : !u32i loc(#loc171)
      cir.store %9, %5 : !u32i, !cir.ptr<!u32i> loc(#loc170)
      %10 = cir.load %5 : !cir.ptr<!u32i>, !u32i loc(#loc122)
      cir.call @printUnsignedLine(%10) : (!u32i) -> () loc(#loc123)
    } loc(#loc169)
    cir.return loc(#loc108)
  } loc(#loc165)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE190_Integer_Overflow/s05/CWE190_Integer_Overflow__unsigned_int_max_add_42.c":0:0)
#loc1 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":22:1)
#loc2 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":27:1)
#loc5 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":23:1)
#loc6 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":25:12)
#loc7 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":25:5)
#loc8 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":26:12)
#loc9 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":26:5)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":34:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":34:47)
#loc12 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":29:1)
#loc13 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":39:1)
#loc14 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":31:5)
#loc15 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":31:18)
#loc16 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":32:12)
#loc17 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":32:5)
#loc18 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":33:22)
#loc19 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":33:12)
#loc20 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":33:5)
#loc21 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":33:26)
#loc22 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":34:5)
#loc23 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":38:5)
#loc24 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":36:9)
#loc25 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":36:38)
#loc26 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":36:31)
#loc27 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":37:27)
#loc28 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":37:9)
#loc29 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":90:1)
#loc30 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":94:1)
#loc31 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":92:5)
#loc32 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":92:13)
#loc33 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":93:5)
#loc34 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":93:13)
#loc35 = loc("/usr/include/stdlib.h":575:1)
#loc36 = loc("/usr/include/stdlib.h":575:41)
#loc37 = loc("/usr/include/time.h":76:1)
#loc38 = loc("/usr/include/time.h":76:38)
#loc39 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc40 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc41 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":110:15)
#loc42 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":112:15)
#loc43 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":115:15)
#loc44 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":117:15)
#loc45 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":105:1)
#loc46 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":120:1)
#loc51 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":106:1)
#loc52 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":108:27)
#loc53 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":108:22)
#loc54 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":108:5)
#loc55 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":110:5)
#loc56 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":111:5)
#loc57 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":111:59)
#loc58 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":112:5)
#loc59 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":115:5)
#loc60 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":116:5)
#loc61 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":116:58)
#loc62 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":117:5)
#loc63 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":119:12)
#loc64 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":119:5)
#loc65 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":66:1)
#loc66 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":71:1)
#loc69 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":67:1)
#loc70 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":69:12)
#loc71 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":69:5)
#loc72 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":70:12)
#loc73 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":70:5)
#loc74 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":86:19)
#loc75 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":73:1)
#loc76 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":88:1)
#loc77 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":75:5)
#loc78 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":75:18)
#loc79 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":76:12)
#loc80 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":76:5)
#loc81 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":77:26)
#loc82 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":77:12)
#loc83 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":77:5)
#loc84 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":77:30)
#loc85 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":79:5)
#loc86 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":87:5)
#loc87 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":79:9)
#loc88 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":79:16)
#loc89 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":80:5)
#loc90 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":83:5)
#loc91 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":85:5)
#loc92 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":81:9)
#loc93 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":81:38)
#loc94 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":81:31)
#loc95 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":82:27)
#loc96 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":82:9)
#loc97 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":86:9)
#loc98 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":46:1)
#loc99 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":51:1)
#loc102 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":47:1)
#loc103 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":49:12)
#loc104 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":49:5)
#loc105 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":50:12)
#loc106 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":50:5)
#loc107 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":53:1)
#loc108 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":63:1)
#loc109 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":55:5)
#loc110 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":55:18)
#loc111 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":56:12)
#loc112 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":56:5)
#loc113 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":57:26)
#loc114 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":57:12)
#loc115 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":57:5)
#loc116 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":57:30)
#loc117 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":58:5)
#loc118 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":62:5)
#loc119 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":60:9)
#loc120 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":60:38)
#loc121 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":60:31)
#loc122 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":61:27)
#loc123 = loc("CWE190_Integer_Overflow__unsigned_int_max_add_42.c":61:9)
#loc124 = loc(fused[#loc1, #loc2])
#loc126 = loc(fused[#loc7, #loc6])
#loc127 = loc(fused[#loc9, #loc8])
#loc128 = loc(fused[#loc10, #loc11])
#loc129 = loc(fused[#loc12, #loc13])
#loc130 = loc(fused[#loc14, #loc15])
#loc131 = loc(fused[#loc17, #loc16])
#loc132 = loc(fused[#loc20, #loc21])
#loc133 = loc(fused[#loc22, #loc23])
#loc134 = loc(fused[#loc24, #loc25])
#loc135 = loc(fused[#loc26, #loc25])
#loc136 = loc(fused[#loc29, #loc30])
#loc137 = loc(fused[#loc31, #loc32])
#loc138 = loc(fused[#loc33, #loc34])
#loc139 = loc(fused[#loc35, #loc36])
#loc140 = loc(fused[#loc37, #loc38])
#loc141 = loc(fused[#loc39, #loc40])
#loc142 = loc(fused[#loc45, #loc46])
#loc145 = loc(fused[#loc56, #loc57])
#loc146 = loc(fused[#loc60, #loc61])
#loc147 = loc(fused[#loc64, #loc63])
#loc148 = loc(fused[#loc65, #loc66])
#loc150 = loc(fused[#loc71, #loc70])
#loc151 = loc(fused[#loc73, #loc72])
#loc152 = loc(fused[#loc75, #loc76])
#loc153 = loc(fused[#loc77, #loc78])
#loc154 = loc(fused[#loc80, #loc79])
#loc155 = loc(fused[#loc83, #loc84])
#loc156 = loc(fused[#loc85, #loc86])
#loc157 = loc(fused[#loc87, #loc88])
#loc158 = loc(fused[#loc89, #loc90, #loc91, #loc86])
#loc159 = loc(fused[#loc92, #loc93])
#loc160 = loc(fused[#loc94, #loc93])
#loc161 = loc(fused[#loc98, #loc99])
#loc163 = loc(fused[#loc104, #loc103])
#loc164 = loc(fused[#loc106, #loc105])
#loc165 = loc(fused[#loc107, #loc108])
#loc166 = loc(fused[#loc109, #loc110])
#loc167 = loc(fused[#loc112, #loc111])
#loc168 = loc(fused[#loc115, #loc116])
#loc169 = loc(fused[#loc117, #loc118])
#loc170 = loc(fused[#loc119, #loc120])
#loc171 = loc(fused[#loc121, #loc120])
