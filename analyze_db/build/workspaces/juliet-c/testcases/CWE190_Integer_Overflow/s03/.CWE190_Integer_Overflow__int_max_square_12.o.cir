!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc46 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:28)
#loc97 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:28)
#loc115 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:28)
#true = #cir.bool<true> : !cir.bool
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_12.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.func no_proto private @globalReturnsTrueOrFalse(...) -> !s32i loc(#loc167)
  cir.func private @printIntLine(!s32i) loc(#loc168)
  cir.func private @sqrt(!cir.double) -> !cir.double extra(#fn_attr) loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc169)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_12_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc171)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc172)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc173)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc17)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc174)
    cir.br ^bb1 loc(#loc175)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc176)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc176)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc21)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc21)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc177)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc26)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc178)
    cir.br ^bb4 loc(#loc24)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc28)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc179)
    cir.br ^bb4 loc(#loc20)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc20)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc180)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc181)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc181)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc32)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc32)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc182)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc183)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc39)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc39)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc171)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc40)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc41)
    cir.br ^bb9 loc(#loc38)
  ^bb9:  // pred: ^bb8
    cir.br ^bb24 loc(#loc35)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc184)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc44)
    %19 = cir.const #cir.int<2147483647> : !s32i loc(#loc45)
    %20 = cir.unary(minus, %19) nsw : !s32i, !s32i loc(#loc45)
    %21 = cir.const #cir.int<1> : !s32i loc(#loc45)
    %22 = cir.binop(sub, %20, %21) nsw : !s32i loc(#loc45)
    %23 = cir.cmp(gt, %18, %22) : !s32i, !cir.bool loc(#loc185)
    cir.brcond %23 ^bb12, ^bb17 loc(#loc46)
  ^bb12:  // pred: ^bb11
    %24 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc47)
    %25 = cir.abs %24 poison : !s32i loc(#loc48)
    %26 = cir.cast(integral, %25 : !s32i), !s64i loc(#loc48)
    %27 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc49)
    %28 = cir.const #cir.int<2147483647> : !s32i loc(#loc50)
    %29 = cir.cast(int_to_float, %28 : !s32i), !cir.double loc(#loc50)
    %30 = cir.call @sqrt(%29) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc49)
    %31 = cir.cast(float_to_int, %30 : !cir.double), !s64i loc(#loc49)
    %32 = cir.cmp(lt, %26, %31) : !s64i, !cir.bool loc(#loc186)
    cir.brcond %32 ^bb13, ^bb14 loc(#loc46)
  ^bb13:  // pred: ^bb12
    %33 = cir.const #true loc(#loc46)
    cir.br ^bb15(%33 : !cir.bool) loc(#loc46)
  ^bb14:  // pred: ^bb12
    %34 = cir.const #false loc(#loc46)
    cir.br ^bb15(%34 : !cir.bool) loc(#loc46)
  ^bb15(%35: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":50:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc46)
  ^bb16:  // pred: ^bb15
    cir.br ^bb18(%35 : !cir.bool) loc(#loc46)
  ^bb17:  // pred: ^bb11
    %36 = cir.const #false loc(#loc46)
    cir.br ^bb18(%36 : !cir.bool) loc(#loc46)
  ^bb18(%37: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":50:28)):  // 2 preds: ^bb16, ^bb17
    cir.br ^bb19 loc(#loc46)
  ^bb19:  // pred: ^bb18
    cir.brcond %37 ^bb20, ^bb21 loc(#loc187)
  ^bb20:  // pred: ^bb19
    %38 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc55)
    %39 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc14)
    %40 = cir.binop(mul, %38, %39) nsw : !s32i loc(#loc55)
    cir.store %40, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
    %41 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc56)
    cir.call @printIntLine(%41) : (!s32i) -> () loc(#loc57)
    cir.br ^bb22 loc(#loc53)
  ^bb21:  // pred: ^bb19
    %42 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc8)
    %43 = cir.cast(array_to_ptrdecay, %42 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc8)
    cir.call @printLine(%43) : (!cir.ptr<!s8i>) -> () loc(#loc58)
    cir.br ^bb22 loc(#loc43)
  ^bb22:  // 2 preds: ^bb20, ^bb21
    cir.br ^bb23 loc(#loc43)
  ^bb23:  // pred: ^bb22
    cir.br ^bb24 loc(#loc31)
  ^bb24:  // 2 preds: ^bb9, ^bb23
    cir.br ^bb25 loc(#loc31)
  ^bb25:  // pred: ^bb24
    cir.return loc(#loc10)
  } loc(#loc170)
  cir.func no_proto @CWE190_Integer_Overflow__int_max_square_12_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc189)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc61)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc190)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc63)
    cir.return loc(#loc60)
  } loc(#loc188)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc192)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc193)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc194)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc73)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc195)
    cir.br ^bb1 loc(#loc196)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc197)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc197)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc77)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc77)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc198)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2147483647> : !s32i loc(#loc82)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc199)
    cir.br ^bb4 loc(#loc80)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2147483647> : !s32i loc(#loc84)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc200)
    cir.br ^bb4 loc(#loc76)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc76)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc201)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc202)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc202)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc88)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc88)
    cir.brcond %13 ^bb7, ^bb21 loc(#loc203)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc204)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc95)
    %15 = cir.const #cir.int<2147483647> : !s32i loc(#loc96)
    %16 = cir.unary(minus, %15) nsw : !s32i, !s32i loc(#loc96)
    %17 = cir.const #cir.int<1> : !s32i loc(#loc96)
    %18 = cir.binop(sub, %16, %17) nsw : !s32i loc(#loc96)
    %19 = cir.cmp(gt, %14, %18) : !s32i, !cir.bool loc(#loc205)
    cir.brcond %19 ^bb9, ^bb14 loc(#loc97)
  ^bb9:  // pred: ^bb8
    %20 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc98)
    %21 = cir.abs %20 poison : !s32i loc(#loc99)
    %22 = cir.cast(integral, %21 : !s32i), !s64i loc(#loc99)
    %23 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc100)
    %24 = cir.const #cir.int<2147483647> : !s32i loc(#loc101)
    %25 = cir.cast(int_to_float, %24 : !s32i), !cir.double loc(#loc101)
    %26 = cir.call @sqrt(%25) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc100)
    %27 = cir.cast(float_to_int, %26 : !cir.double), !s64i loc(#loc100)
    %28 = cir.cmp(lt, %22, %27) : !s64i, !cir.bool loc(#loc206)
    cir.brcond %28 ^bb10, ^bb11 loc(#loc97)
  ^bb10:  // pred: ^bb9
    %29 = cir.const #true loc(#loc97)
    cir.br ^bb12(%29 : !cir.bool) loc(#loc97)
  ^bb11:  // pred: ^bb9
    %30 = cir.const #false loc(#loc97)
    cir.br ^bb12(%30 : !cir.bool) loc(#loc97)
  ^bb12(%31: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":87:28)):  // 2 preds: ^bb10, ^bb11
    cir.br ^bb13 loc(#loc97)
  ^bb13:  // pred: ^bb12
    cir.br ^bb15(%31 : !cir.bool) loc(#loc97)
  ^bb14:  // pred: ^bb8
    %32 = cir.const #false loc(#loc97)
    cir.br ^bb15(%32 : !cir.bool) loc(#loc97)
  ^bb15(%33: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":87:28)):  // 2 preds: ^bb13, ^bb14
    cir.br ^bb16 loc(#loc97)
  ^bb16:  // pred: ^bb15
    cir.brcond %33 ^bb17, ^bb18 loc(#loc207)
  ^bb17:  // pred: ^bb16
    %34 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc106)
    %35 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc68)
    %36 = cir.binop(mul, %34, %35) nsw : !s32i loc(#loc106)
    cir.store %36, %0 : !s32i, !cir.ptr<!s32i> loc(#loc192)
    %37 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc107)
    cir.call @printIntLine(%37) : (!s32i) -> () loc(#loc108)
    cir.br ^bb19 loc(#loc104)
  ^bb18:  // pred: ^bb16
    %38 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc109)
    %39 = cir.cast(array_to_ptrdecay, %38 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc109)
    cir.call @printLine(%39) : (!cir.ptr<!s8i>) -> () loc(#loc110)
    cir.br ^bb19 loc(#loc94)
  ^bb19:  // 2 preds: ^bb17, ^bb18
    cir.br ^bb20 loc(#loc94)
  ^bb20:  // pred: ^bb19
    cir.br ^bb35 loc(#loc91)
  ^bb21:  // pred: ^bb6
    cir.br ^bb22 loc(#loc208)
  ^bb22:  // pred: ^bb21
    %40 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    %41 = cir.const #cir.int<2147483647> : !s32i loc(#loc114)
    %42 = cir.unary(minus, %41) nsw : !s32i, !s32i loc(#loc114)
    %43 = cir.const #cir.int<1> : !s32i loc(#loc114)
    %44 = cir.binop(sub, %42, %43) nsw : !s32i loc(#loc114)
    %45 = cir.cmp(gt, %40, %44) : !s32i, !cir.bool loc(#loc209)
    cir.brcond %45 ^bb23, ^bb28 loc(#loc115)
  ^bb23:  // pred: ^bb22
    %46 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc116)
    %47 = cir.abs %46 poison : !s32i loc(#loc117)
    %48 = cir.cast(integral, %47 : !s32i), !s64i loc(#loc117)
    %49 = cir.get_global @sqrt : !cir.ptr<!cir.func<(!cir.double) -> !cir.double>> loc(#loc118)
    %50 = cir.const #cir.int<2147483647> : !s32i loc(#loc119)
    %51 = cir.cast(int_to_float, %50 : !s32i), !cir.double loc(#loc119)
    %52 = cir.call @sqrt(%51) : (!cir.double) -> !cir.double extra(#fn_attr) loc(#loc118)
    %53 = cir.cast(float_to_int, %52 : !cir.double), !s64i loc(#loc118)
    %54 = cir.cmp(lt, %48, %53) : !s64i, !cir.bool loc(#loc210)
    cir.brcond %54 ^bb24, ^bb25 loc(#loc115)
  ^bb24:  // pred: ^bb23
    %55 = cir.const #true loc(#loc115)
    cir.br ^bb26(%55 : !cir.bool) loc(#loc115)
  ^bb25:  // pred: ^bb23
    %56 = cir.const #false loc(#loc115)
    cir.br ^bb26(%56 : !cir.bool) loc(#loc115)
  ^bb26(%57: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":100:28)):  // 2 preds: ^bb24, ^bb25
    cir.br ^bb27 loc(#loc115)
  ^bb27:  // pred: ^bb26
    cir.br ^bb29(%57 : !cir.bool) loc(#loc115)
  ^bb28:  // pred: ^bb22
    %58 = cir.const #false loc(#loc115)
    cir.br ^bb29(%58 : !cir.bool) loc(#loc115)
  ^bb29(%59: !cir.bool loc("CWE190_Integer_Overflow__int_max_square_12.c":100:28)):  // 2 preds: ^bb27, ^bb28
    cir.br ^bb30 loc(#loc115)
  ^bb30:  // pred: ^bb29
    cir.brcond %59 ^bb31, ^bb32 loc(#loc211)
  ^bb31:  // pred: ^bb30
    %60 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc124)
    %61 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc70)
    %62 = cir.binop(mul, %60, %61) nsw : !s32i loc(#loc124)
    cir.store %62, %1 : !s32i, !cir.ptr<!s32i> loc(#loc193)
    %63 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc125)
    cir.call @printIntLine(%63) : (!s32i) -> () loc(#loc126)
    cir.br ^bb33 loc(#loc122)
  ^bb32:  // pred: ^bb30
    %64 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc127)
    %65 = cir.cast(array_to_ptrdecay, %64 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc127)
    cir.call @printLine(%65) : (!cir.ptr<!s8i>) -> () loc(#loc128)
    cir.br ^bb33 loc(#loc112)
  ^bb33:  // 2 preds: ^bb31, ^bb32
    cir.br ^bb34 loc(#loc112)
  ^bb34:  // pred: ^bb33
    cir.br ^bb35 loc(#loc87)
  ^bb35:  // 2 preds: ^bb20, ^bb34
    cir.br ^bb36 loc(#loc87)
  ^bb36:  // pred: ^bb35
    cir.return loc(#loc66)
  } loc(#loc191)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc213)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc214)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc215)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc137)
    cir.store %3, %2 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.br ^bb1 loc(#loc217)
  ^bb1:  // pred: ^bb0
    %4 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc218)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc218)
    %6 = cir.call %5() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc141)
    %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc141)
    cir.brcond %7 ^bb2, ^bb3 loc(#loc219)
  ^bb2:  // pred: ^bb1
    %8 = cir.const #cir.int<2> : !s32i loc(#loc146)
    cir.store %8, %2 : !s32i, !cir.ptr<!s32i> loc(#loc220)
    cir.br ^bb4 loc(#loc144)
  ^bb3:  // pred: ^bb1
    %9 = cir.const #cir.int<2> : !s32i loc(#loc148)
    cir.store %9, %2 : !s32i, !cir.ptr<!s32i> loc(#loc221)
    cir.br ^bb4 loc(#loc140)
  ^bb4:  // 2 preds: ^bb2, ^bb3
    cir.br ^bb5 loc(#loc140)
  ^bb5:  // pred: ^bb4
    cir.br ^bb6 loc(#loc222)
  ^bb6:  // pred: ^bb5
    %10 = cir.get_global @globalReturnsTrueOrFalse : !cir.ptr<!cir.func<(...) -> !s32i>> loc(#loc223)
    %11 = cir.cast(bitcast, %10 : !cir.ptr<!cir.func<(...) -> !s32i>>), !cir.ptr<!cir.func<() -> !s32i>> loc(#loc223)
    %12 = cir.call %11() : (!cir.ptr<!cir.func<() -> !s32i>>) -> !s32i loc(#loc152)
    %13 = cir.cast(int_to_bool, %12 : !s32i), !cir.bool loc(#loc152)
    cir.brcond %13 ^bb7, ^bb10 loc(#loc224)
  ^bb7:  // pred: ^bb6
    cir.br ^bb8 loc(#loc225)
  ^bb8:  // pred: ^bb7
    %14 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc159)
    %15 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    %16 = cir.binop(mul, %14, %15) nsw : !s32i loc(#loc159)
    cir.store %16, %0 : !s32i, !cir.ptr<!s32i> loc(#loc213)
    %17 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc160)
    cir.call @printIntLine(%17) : (!s32i) -> () loc(#loc161)
    cir.br ^bb9 loc(#loc158)
  ^bb9:  // pred: ^bb8
    cir.br ^bb13 loc(#loc155)
  ^bb10:  // pred: ^bb6
    cir.br ^bb11 loc(#loc226)
  ^bb11:  // pred: ^bb10
    %18 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc164)
    %19 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc134)
    %20 = cir.binop(mul, %18, %19) nsw : !s32i loc(#loc164)
    cir.store %20, %1 : !s32i, !cir.ptr<!s32i> loc(#loc214)
    %21 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc165)
    cir.call @printIntLine(%21) : (!s32i) -> () loc(#loc166)
    cir.br ^bb12 loc(#loc163)
  ^bb12:  // pred: ^bb11
    cir.br ^bb13 loc(#loc151)
  ^bb13:  // 2 preds: ^bb9, ^bb12
    cir.br ^bb14 loc(#loc151)
  ^bb14:  // pred: ^bb13
    cir.return loc(#loc130)
  } loc(#loc212)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s03/CWE190_Integer_Overflow__int_max_square_12.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":52:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":52:30)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE190_Integer_Overflow__int_max_square_12.c":57:23)
#loc9 = loc("CWE190_Integer_Overflow__int_max_square_12.c":24:1)
#loc10 = loc("CWE190_Integer_Overflow__int_max_square_12.c":60:1)
#loc11 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:13)
#loc12 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:33)
#loc13 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:13)
#loc14 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:33)
#loc15 = loc("CWE190_Integer_Overflow__int_max_square_12.c":26:5)
#loc16 = loc("CWE190_Integer_Overflow__int_max_square_12.c":26:9)
#loc17 = loc("CWE190_Integer_Overflow__int_max_square_12.c":28:12)
#loc18 = loc("CWE190_Integer_Overflow__int_max_square_12.c":28:5)
#loc19 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:5)
#loc20 = loc("CWE190_Integer_Overflow__int_max_square_12.c":38:5)
#loc21 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:8)
#loc22 = loc("CWE190_Integer_Overflow__int_max_square_12.c":29:33)
#loc23 = loc("CWE190_Integer_Overflow__int_max_square_12.c":30:5)
#loc24 = loc("CWE190_Integer_Overflow__int_max_square_12.c":33:5)
#loc25 = loc("CWE190_Integer_Overflow__int_max_square_12.c":35:5)
#loc26 = loc("CWE190_Integer_Overflow__int_max_square_12.c":32:16)
#loc27 = loc("CWE190_Integer_Overflow__int_max_square_12.c":32:9)
#loc28 = loc("CWE190_Integer_Overflow__int_max_square_12.c":37:16)
#loc29 = loc("CWE190_Integer_Overflow__int_max_square_12.c":37:9)
#loc30 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:5)
#loc31 = loc("CWE190_Integer_Overflow__int_max_square_12.c":59:5)
#loc32 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:8)
#loc33 = loc("CWE190_Integer_Overflow__int_max_square_12.c":39:33)
#loc34 = loc("CWE190_Integer_Overflow__int_max_square_12.c":40:5)
#loc35 = loc("CWE190_Integer_Overflow__int_max_square_12.c":46:5)
#loc36 = loc("CWE190_Integer_Overflow__int_max_square_12.c":48:5)
#loc37 = loc("CWE190_Integer_Overflow__int_max_square_12.c":41:9)
#loc38 = loc("CWE190_Integer_Overflow__int_max_square_12.c":45:9)
#loc39 = loc("CWE190_Integer_Overflow__int_max_square_12.c":43:26)
#loc40 = loc("CWE190_Integer_Overflow__int_max_square_12.c":44:26)
#loc41 = loc("CWE190_Integer_Overflow__int_max_square_12.c":44:13)
#loc42 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:9)
#loc43 = loc("CWE190_Integer_Overflow__int_max_square_12.c":58:9)
#loc44 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:13)
#loc45 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:20)
#loc47 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:35)
#loc48 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:31)
#loc49 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:49)
#loc50 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:62)
#loc51 = loc("CWE190_Integer_Overflow__int_max_square_12.c":50:69)
#loc52 = loc("CWE190_Integer_Overflow__int_max_square_12.c":51:9)
#loc53 = loc("CWE190_Integer_Overflow__int_max_square_12.c":54:9)
#loc54 = loc("CWE190_Integer_Overflow__int_max_square_12.c":56:9)
#loc55 = loc("CWE190_Integer_Overflow__int_max_square_12.c":52:26)
#loc56 = loc("CWE190_Integer_Overflow__int_max_square_12.c":53:26)
#loc57 = loc("CWE190_Integer_Overflow__int_max_square_12.c":53:13)
#loc58 = loc("CWE190_Integer_Overflow__int_max_square_12.c":57:13)
#loc59 = loc("CWE190_Integer_Overflow__int_max_square_12.c":148:1)
#loc60 = loc("CWE190_Integer_Overflow__int_max_square_12.c":152:1)
#loc61 = loc("CWE190_Integer_Overflow__int_max_square_12.c":150:5)
#loc62 = loc("CWE190_Integer_Overflow__int_max_square_12.c":150:13)
#loc63 = loc("CWE190_Integer_Overflow__int_max_square_12.c":151:5)
#loc64 = loc("CWE190_Integer_Overflow__int_max_square_12.c":151:13)
#loc65 = loc("CWE190_Integer_Overflow__int_max_square_12.c":69:1)
#loc66 = loc("CWE190_Integer_Overflow__int_max_square_12.c":110:1)
#loc67 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:13)
#loc68 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:33)
#loc69 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:13)
#loc70 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:33)
#loc71 = loc("CWE190_Integer_Overflow__int_max_square_12.c":71:5)
#loc72 = loc("CWE190_Integer_Overflow__int_max_square_12.c":71:9)
#loc73 = loc("CWE190_Integer_Overflow__int_max_square_12.c":73:12)
#loc74 = loc("CWE190_Integer_Overflow__int_max_square_12.c":73:5)
#loc75 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:5)
#loc76 = loc("CWE190_Integer_Overflow__int_max_square_12.c":83:5)
#loc77 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:8)
#loc78 = loc("CWE190_Integer_Overflow__int_max_square_12.c":74:33)
#loc79 = loc("CWE190_Integer_Overflow__int_max_square_12.c":75:5)
#loc80 = loc("CWE190_Integer_Overflow__int_max_square_12.c":78:5)
#loc81 = loc("CWE190_Integer_Overflow__int_max_square_12.c":80:5)
#loc82 = loc("CWE190_Integer_Overflow__int_max_square_12.c":77:16)
#loc83 = loc("CWE190_Integer_Overflow__int_max_square_12.c":77:9)
#loc84 = loc("CWE190_Integer_Overflow__int_max_square_12.c":82:16)
#loc85 = loc("CWE190_Integer_Overflow__int_max_square_12.c":82:9)
#loc86 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:5)
#loc87 = loc("CWE190_Integer_Overflow__int_max_square_12.c":109:5)
#loc88 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:8)
#loc89 = loc("CWE190_Integer_Overflow__int_max_square_12.c":84:33)
#loc90 = loc("CWE190_Integer_Overflow__int_max_square_12.c":85:5)
#loc91 = loc("CWE190_Integer_Overflow__int_max_square_12.c":96:5)
#loc92 = loc("CWE190_Integer_Overflow__int_max_square_12.c":98:5)
#loc93 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:9)
#loc94 = loc("CWE190_Integer_Overflow__int_max_square_12.c":95:9)
#loc95 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:13)
#loc96 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:20)
#loc98 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:35)
#loc99 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:31)
#loc100 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:49)
#loc101 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:62)
#loc102 = loc("CWE190_Integer_Overflow__int_max_square_12.c":87:69)
#loc103 = loc("CWE190_Integer_Overflow__int_max_square_12.c":88:9)
#loc104 = loc("CWE190_Integer_Overflow__int_max_square_12.c":91:9)
#loc105 = loc("CWE190_Integer_Overflow__int_max_square_12.c":93:9)
#loc106 = loc("CWE190_Integer_Overflow__int_max_square_12.c":89:26)
#loc107 = loc("CWE190_Integer_Overflow__int_max_square_12.c":90:26)
#loc108 = loc("CWE190_Integer_Overflow__int_max_square_12.c":90:13)
#loc109 = loc("CWE190_Integer_Overflow__int_max_square_12.c":94:23)
#loc110 = loc("CWE190_Integer_Overflow__int_max_square_12.c":94:13)
#loc111 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:9)
#loc112 = loc("CWE190_Integer_Overflow__int_max_square_12.c":108:9)
#loc113 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:13)
#loc114 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:20)
#loc116 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:35)
#loc117 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:31)
#loc118 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:49)
#loc119 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:62)
#loc120 = loc("CWE190_Integer_Overflow__int_max_square_12.c":100:69)
#loc121 = loc("CWE190_Integer_Overflow__int_max_square_12.c":101:9)
#loc122 = loc("CWE190_Integer_Overflow__int_max_square_12.c":104:9)
#loc123 = loc("CWE190_Integer_Overflow__int_max_square_12.c":106:9)
#loc124 = loc("CWE190_Integer_Overflow__int_max_square_12.c":102:26)
#loc125 = loc("CWE190_Integer_Overflow__int_max_square_12.c":103:26)
#loc126 = loc("CWE190_Integer_Overflow__int_max_square_12.c":103:13)
#loc127 = loc("CWE190_Integer_Overflow__int_max_square_12.c":107:23)
#loc128 = loc("CWE190_Integer_Overflow__int_max_square_12.c":107:13)
#loc129 = loc("CWE190_Integer_Overflow__int_max_square_12.c":115:1)
#loc130 = loc("CWE190_Integer_Overflow__int_max_square_12.c":146:1)
#loc131 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:13)
#loc132 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:33)
#loc133 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:13)
#loc134 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:33)
#loc135 = loc("CWE190_Integer_Overflow__int_max_square_12.c":117:5)
#loc136 = loc("CWE190_Integer_Overflow__int_max_square_12.c":117:9)
#loc137 = loc("CWE190_Integer_Overflow__int_max_square_12.c":119:12)
#loc138 = loc("CWE190_Integer_Overflow__int_max_square_12.c":119:5)
#loc139 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:5)
#loc140 = loc("CWE190_Integer_Overflow__int_max_square_12.c":129:5)
#loc141 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:8)
#loc142 = loc("CWE190_Integer_Overflow__int_max_square_12.c":120:33)
#loc143 = loc("CWE190_Integer_Overflow__int_max_square_12.c":121:5)
#loc144 = loc("CWE190_Integer_Overflow__int_max_square_12.c":124:5)
#loc145 = loc("CWE190_Integer_Overflow__int_max_square_12.c":126:5)
#loc146 = loc("CWE190_Integer_Overflow__int_max_square_12.c":123:16)
#loc147 = loc("CWE190_Integer_Overflow__int_max_square_12.c":123:9)
#loc148 = loc("CWE190_Integer_Overflow__int_max_square_12.c":128:16)
#loc149 = loc("CWE190_Integer_Overflow__int_max_square_12.c":128:9)
#loc150 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:5)
#loc151 = loc("CWE190_Integer_Overflow__int_max_square_12.c":145:5)
#loc152 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:8)
#loc153 = loc("CWE190_Integer_Overflow__int_max_square_12.c":130:33)
#loc154 = loc("CWE190_Integer_Overflow__int_max_square_12.c":131:5)
#loc155 = loc("CWE190_Integer_Overflow__int_max_square_12.c":137:5)
#loc156 = loc("CWE190_Integer_Overflow__int_max_square_12.c":139:5)
#loc157 = loc("CWE190_Integer_Overflow__int_max_square_12.c":132:9)
#loc158 = loc("CWE190_Integer_Overflow__int_max_square_12.c":136:9)
#loc159 = loc("CWE190_Integer_Overflow__int_max_square_12.c":134:26)
#loc160 = loc("CWE190_Integer_Overflow__int_max_square_12.c":135:26)
#loc161 = loc("CWE190_Integer_Overflow__int_max_square_12.c":135:13)
#loc162 = loc("CWE190_Integer_Overflow__int_max_square_12.c":140:9)
#loc163 = loc("CWE190_Integer_Overflow__int_max_square_12.c":144:9)
#loc164 = loc("CWE190_Integer_Overflow__int_max_square_12.c":142:26)
#loc165 = loc("CWE190_Integer_Overflow__int_max_square_12.c":143:26)
#loc166 = loc("CWE190_Integer_Overflow__int_max_square_12.c":143:13)
#loc167 = loc(fused[#loc1, #loc2])
#loc168 = loc(fused[#loc3, #loc4])
#loc169 = loc(fused[#loc6, #loc7])
#loc170 = loc(fused[#loc9, #loc10])
#loc171 = loc(fused[#loc11, #loc12])
#loc172 = loc(fused[#loc13, #loc14])
#loc173 = loc(fused[#loc15, #loc16])
#loc174 = loc(fused[#loc18, #loc17])
#loc175 = loc(fused[#loc19, #loc20])
#loc176 = loc(fused[#loc21, #loc22])
#loc177 = loc(fused[#loc23, #loc24, #loc25, #loc20])
#loc178 = loc(fused[#loc27, #loc26])
#loc179 = loc(fused[#loc29, #loc28])
#loc180 = loc(fused[#loc30, #loc31])
#loc181 = loc(fused[#loc32, #loc33])
#loc182 = loc(fused[#loc34, #loc35, #loc36, #loc31])
#loc183 = loc(fused[#loc37, #loc38])
#loc184 = loc(fused[#loc42, #loc43])
#loc185 = loc(fused[#loc44, #loc45])
#loc186 = loc(fused[#loc48, #loc51])
#loc187 = loc(fused[#loc52, #loc53, #loc54, #loc43])
#loc188 = loc(fused[#loc59, #loc60])
#loc189 = loc(fused[#loc61, #loc62])
#loc190 = loc(fused[#loc63, #loc64])
#loc191 = loc(fused[#loc65, #loc66])
#loc192 = loc(fused[#loc67, #loc68])
#loc193 = loc(fused[#loc69, #loc70])
#loc194 = loc(fused[#loc71, #loc72])
#loc195 = loc(fused[#loc74, #loc73])
#loc196 = loc(fused[#loc75, #loc76])
#loc197 = loc(fused[#loc77, #loc78])
#loc198 = loc(fused[#loc79, #loc80, #loc81, #loc76])
#loc199 = loc(fused[#loc83, #loc82])
#loc200 = loc(fused[#loc85, #loc84])
#loc201 = loc(fused[#loc86, #loc87])
#loc202 = loc(fused[#loc88, #loc89])
#loc203 = loc(fused[#loc90, #loc91, #loc92, #loc87])
#loc204 = loc(fused[#loc93, #loc94])
#loc205 = loc(fused[#loc95, #loc96])
#loc206 = loc(fused[#loc99, #loc102])
#loc207 = loc(fused[#loc103, #loc104, #loc105, #loc94])
#loc208 = loc(fused[#loc111, #loc112])
#loc209 = loc(fused[#loc113, #loc114])
#loc210 = loc(fused[#loc117, #loc120])
#loc211 = loc(fused[#loc121, #loc122, #loc123, #loc112])
#loc212 = loc(fused[#loc129, #loc130])
#loc213 = loc(fused[#loc131, #loc132])
#loc214 = loc(fused[#loc133, #loc134])
#loc215 = loc(fused[#loc135, #loc136])
#loc216 = loc(fused[#loc138, #loc137])
#loc217 = loc(fused[#loc139, #loc140])
#loc218 = loc(fused[#loc141, #loc142])
#loc219 = loc(fused[#loc143, #loc144, #loc145, #loc140])
#loc220 = loc(fused[#loc147, #loc146])
#loc221 = loc(fused[#loc149, #loc148])
#loc222 = loc(fused[#loc150, #loc151])
#loc223 = loc(fused[#loc152, #loc153])
#loc224 = loc(fused[#loc154, #loc155, #loc156, #loc151])
#loc225 = loc(fused[#loc157, #loc158])
#loc226 = loc(fused[#loc162, #loc163])
