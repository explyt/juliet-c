!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc38 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":96:10)
#loc39 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":96:14)
#loc40 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":96:20)
#loc41 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":96:32)
#loc109 = loc(fused[#loc38, #loc39])
#loc110 = loc(fused[#loc40, #loc41])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE482_Comparing_Instead_of_Assigning/CWE482_Comparing_Instead_of_Assigning__basic_07.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @staticFive = #cir.int<5> : !s32i {alignment = 4 : i64} loc(#loc94)
  cir.func private @printIntLine(!s32i) loc(#loc95)
  cir.func no_proto @CWE482_Comparing_Instead_of_Assigning__basic_07_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc94)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc9)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc10)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc98)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intBadSink", init] {alignment = 4 : i64} loc(#loc101)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc15)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc101)
          %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc16)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc17)
          %7 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc18)
          cir.call @printIntLine(%7) : (!s32i) -> () loc(#loc19)
        } loc(#loc100)
      } loc(#loc99)
    } loc(#loc97)
    cir.return loc(#loc6)
  } loc(#loc96)
  cir.func no_proto @CWE482_Comparing_Instead_of_Assigning__basic_07_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc103)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc22)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc104)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc24)
    cir.return loc(#loc21)
  } loc(#loc102)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc105)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc106)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc107)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc32)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc33)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc34)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc35)
  cir.func @main(%arg0: !s32i loc(fused[#loc38, #loc39]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc40, #loc41])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc109)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc110)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc37)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc42)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc42)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc43)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc44)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc44)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc45)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc32)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc32)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %8 = cir.get_global @CWE482_Comparing_Instead_of_Assigning__basic_07_good : !cir.ptr<!cir.func<!void ()>> loc(#loc111)
    cir.call @CWE482_Comparing_Instead_of_Assigning__basic_07_good() : () -> () loc(#loc47)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc33)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc33)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc34)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc34)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc50)
    %13 = cir.get_global @CWE482_Comparing_Instead_of_Assigning__basic_07_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc112)
    cir.call @CWE482_Comparing_Instead_of_Assigning__basic_07_bad() : () -> () loc(#loc51)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc35)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc35)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc53)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc54)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc113)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc113)
    cir.return %17 : !s32i loc(#loc113)
  } loc(#loc108)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc56)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc94)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc61)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc62)
      %3 = cir.cmp(ne, %1, %2) : !s32i, !cir.bool loc(#loc116)
      cir.if %3 {
        %4 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc56)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc56)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
      } else {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intGoodSink", init] {alignment = 4 : i64} loc(#loc119)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc70)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc119)
          %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc71)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc72)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc73)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc120)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc75)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc76)
        } loc(#loc118)
      } loc(#loc117)
    } loc(#loc115)
    cir.return loc(#loc58)
  } loc(#loc114)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.get_global @staticFive : !cir.ptr<!s32i> loc(#loc94)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
      %2 = cir.const #cir.int<5> : !s32i loc(#loc82)
      %3 = cir.cmp(eq, %1, %2) : !s32i, !cir.bool loc(#loc123)
      cir.if %3 {
        cir.scope {
          %4 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intGoodSink", init] {alignment = 4 : i64} loc(#loc126)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc87)
          cir.store %5, %4 : !s32i, !cir.ptr<!s32i> loc(#loc126)
          %6 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc88)
          cir.call @printIntLine(%6) : (!s32i) -> () loc(#loc89)
          %7 = cir.const #cir.int<5> : !s32i loc(#loc90)
          cir.store %7, %4 : !s32i, !cir.ptr<!s32i> loc(#loc127)
          %8 = cir.load %4 : !cir.ptr<!s32i>, !s32i loc(#loc92)
          cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc93)
        } loc(#loc125)
      } loc(#loc124)
    } loc(#loc122)
    cir.return loc(#loc78)
  } loc(#loc121)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE482_Comparing_Instead_of_Assigning/CWE482_Comparing_Instead_of_Assigning__basic_07.c":0:0)
#loc1 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":21:1)
#loc2 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":21:25)
#loc3 = loc("../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":25:1)
#loc6 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":38:1)
#loc7 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":27:5)
#loc8 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":37:5)
#loc9 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":27:8)
#loc10 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":27:20)
#loc11 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":28:5)
#loc12 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":29:9)
#loc13 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":36:9)
#loc14 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":30:13)
#loc15 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":30:30)
#loc16 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":32:26)
#loc17 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":32:13)
#loc18 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":35:26)
#loc19 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":35:13)
#loc20 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":81:1)
#loc21 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":85:1)
#loc22 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":83:5)
#loc23 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":83:11)
#loc24 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":84:5)
#loc25 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":84:11)
#loc26 = loc("/usr/include/stdlib.h":575:1)
#loc27 = loc("/usr/include/stdlib.h":575:41)
#loc28 = loc("/usr/include/time.h":76:1)
#loc29 = loc("/usr/include/time.h":76:38)
#loc30 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc31 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc32 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":101:15)
#loc33 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":103:15)
#loc34 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":106:15)
#loc35 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":108:15)
#loc36 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":96:1)
#loc37 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":111:1)
#loc42 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":97:1)
#loc43 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":99:27)
#loc44 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":99:22)
#loc45 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":99:5)
#loc46 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":101:5)
#loc47 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":102:5)
#loc48 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":102:58)
#loc49 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":103:5)
#loc50 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":106:5)
#loc51 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":107:5)
#loc52 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":107:57)
#loc53 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":108:5)
#loc54 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":110:12)
#loc55 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":110:5)
#loc56 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":50:19)
#loc57 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":45:1)
#loc58 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":63:1)
#loc59 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":47:5)
#loc60 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":62:5)
#loc61 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":47:8)
#loc62 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":47:20)
#loc63 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":48:5)
#loc64 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":51:5)
#loc65 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":53:5)
#loc66 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":50:9)
#loc67 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":54:9)
#loc68 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":61:9)
#loc69 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":55:13)
#loc70 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":55:31)
#loc71 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":57:26)
#loc72 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":57:13)
#loc73 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":59:27)
#loc74 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":59:13)
#loc75 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":60:26)
#loc76 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":60:13)
#loc77 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":66:1)
#loc78 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":79:1)
#loc79 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":68:5)
#loc80 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":78:5)
#loc81 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":68:8)
#loc82 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":68:20)
#loc83 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":69:5)
#loc84 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":70:9)
#loc85 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":77:9)
#loc86 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":71:13)
#loc87 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":71:31)
#loc88 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":73:26)
#loc89 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":73:13)
#loc90 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":75:27)
#loc91 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":75:13)
#loc92 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":76:26)
#loc93 = loc("CWE482_Comparing_Instead_of_Assigning__basic_07.c":76:13)
#loc94 = loc(fused[#loc1, #loc2])
#loc95 = loc(fused[#loc3, #loc4])
#loc96 = loc(fused[#loc5, #loc6])
#loc97 = loc(fused[#loc7, #loc8])
#loc98 = loc(fused[#loc9, #loc10])
#loc99 = loc(fused[#loc11, #loc8])
#loc100 = loc(fused[#loc12, #loc13])
#loc101 = loc(fused[#loc14, #loc15])
#loc102 = loc(fused[#loc20, #loc21])
#loc103 = loc(fused[#loc22, #loc23])
#loc104 = loc(fused[#loc24, #loc25])
#loc105 = loc(fused[#loc26, #loc27])
#loc106 = loc(fused[#loc28, #loc29])
#loc107 = loc(fused[#loc30, #loc31])
#loc108 = loc(fused[#loc36, #loc37])
#loc111 = loc(fused[#loc47, #loc48])
#loc112 = loc(fused[#loc51, #loc52])
#loc113 = loc(fused[#loc55, #loc54])
#loc114 = loc(fused[#loc57, #loc58])
#loc115 = loc(fused[#loc59, #loc60])
#loc116 = loc(fused[#loc61, #loc62])
#loc117 = loc(fused[#loc63, #loc64, #loc65, #loc60])
#loc118 = loc(fused[#loc67, #loc68])
#loc119 = loc(fused[#loc69, #loc70])
#loc120 = loc(fused[#loc74, #loc73])
#loc121 = loc(fused[#loc77, #loc78])
#loc122 = loc(fused[#loc79, #loc80])
#loc123 = loc(fused[#loc81, #loc82])
#loc124 = loc(fused[#loc83, #loc80])
#loc125 = loc(fused[#loc84, #loc85])
#loc126 = loc(fused[#loc86, #loc87])
#loc127 = loc(fused[#loc91, #loc90])
