!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_10.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i128 = dense<128> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" external @globalTrue : !s32i {alignment = 4 : i64} loc(#loc74)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc75)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc76)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"i was 5\00" : !cir.array<!s8i x 8>> : !cir.array<!s8i x 8> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_10_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc74)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc12)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc81)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc18)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc81)
          cir.scope {
            %5 = cir.const #cir.int<5> : !s32i loc(#loc21)
            cir.store %5, %3 : !s32i, !cir.ptr<!s32i> loc(#loc83)
            %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc23)
            cir.if %6 {
              %7 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc7)
              %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc25)
            } loc(#loc84)
          } loc(#loc82)
        } loc(#loc80)
      } loc(#loc79)
    } loc(#loc78)
    cir.return loc(#loc9)
  } loc(#loc77)
  cir.func no_proto @CWE481_Assigning_Instead_of_Comparing__basic_10_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc86)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc28)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc87)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc30)
    cir.return loc(#loc27)
  } loc(#loc85)
  cir.global "private" external @globalFalse : !s32i {alignment = 4 : i64} loc(#loc88)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc34)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalFalse : !cir.ptr<!s32i> loc(#loc88)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc39)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc39)
      cir.if %2 {
        %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc34)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc34)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc43)
      } else {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc93)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc48)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc93)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc51)
            %6 = cir.const #cir.int<5> : !s32i loc(#loc52)
            %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc95)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc54)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc54)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc55)
            } loc(#loc96)
          } loc(#loc94)
        } loc(#loc92)
      } loc(#loc91)
    } loc(#loc90)
    cir.return loc(#loc36)
  } loc(#loc89)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.get_global @globalTrue : !cir.ptr<!s32i> loc(#loc74)
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc60)
      %2 = cir.cast(int_to_bool, %1 : !s32i), !cir.bool loc(#loc60)
      cir.if %2 {
        cir.scope {
          %3 = cir.alloca !s32i, !cir.ptr<!s32i>, ["intRand", init] {alignment = 4 : i64} loc(#loc101)
          %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc66)
          cir.store %4, %3 : !s32i, !cir.ptr<!s32i> loc(#loc101)
          cir.scope {
            %5 = cir.load %3 : !cir.ptr<!s32i>, !s32i loc(#loc69)
            %6 = cir.const #cir.int<5> : !s32i loc(#loc70)
            %7 = cir.cmp(eq, %5, %6) : !s32i, !cir.bool loc(#loc103)
            cir.if %7 {
              %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 8>> loc(#loc72)
              %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 8>>), !cir.ptr<!s8i> loc(#loc72)
              cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc73)
            } loc(#loc104)
          } loc(#loc102)
        } loc(#loc100)
      } loc(#loc99)
    } loc(#loc98)
    cir.return loc(#loc57)
  } loc(#loc97)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE481_Assigning_Instead_of_Comparing/CWE481_Assigning_Instead_of_Comparing__basic_10.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase.h":116:1)
#loc2 = loc("../../testcasesupport/std_testcase.h":116:12)
#loc3 = loc("/usr/include/stdlib.h":573:1)
#loc4 = loc("/usr/include/stdlib.h":573:24)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":29:27)
#loc8 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":20:1)
#loc9 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":33:1)
#loc10 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":22:5)
#loc11 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":32:5)
#loc12 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":22:8)
#loc13 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":23:5)
#loc14 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":24:9)
#loc15 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":31:9)
#loc16 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":25:13)
#loc17 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":25:32)
#loc18 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":25:27)
#loc19 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":27:13)
#loc20 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":30:13)
#loc21 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":27:26)
#loc22 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":27:16)
#loc23 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":27:24)
#loc24 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":28:13)
#loc25 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":29:17)
#loc26 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":76:1)
#loc27 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":80:1)
#loc28 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":78:5)
#loc29 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":78:11)
#loc30 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":79:5)
#loc31 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":79:11)
#loc32 = loc("../../testcasesupport/std_testcase.h":117:1)
#loc33 = loc("../../testcasesupport/std_testcase.h":117:12)
#loc34 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":45:19)
#loc35 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":40:1)
#loc36 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":58:1)
#loc37 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":42:5)
#loc38 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":57:5)
#loc39 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":42:8)
#loc40 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":43:5)
#loc41 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":46:5)
#loc42 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":48:5)
#loc43 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":45:9)
#loc44 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":49:9)
#loc45 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":56:9)
#loc46 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":50:13)
#loc47 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":50:32)
#loc48 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":50:27)
#loc49 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":52:13)
#loc50 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":55:13)
#loc51 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":52:16)
#loc52 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":52:27)
#loc53 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":53:13)
#loc54 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":54:27)
#loc55 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":54:17)
#loc56 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":61:1)
#loc57 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":74:1)
#loc58 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":63:5)
#loc59 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":73:5)
#loc60 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":63:8)
#loc61 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":64:5)
#loc62 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":65:9)
#loc63 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":72:9)
#loc64 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":66:13)
#loc65 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":66:32)
#loc66 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":66:27)
#loc67 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":68:13)
#loc68 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":71:13)
#loc69 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":68:16)
#loc70 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":68:27)
#loc71 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":69:13)
#loc72 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":70:27)
#loc73 = loc("CWE481_Assigning_Instead_of_Comparing__basic_10.c":70:17)
#loc74 = loc(fused[#loc1, #loc2])
#loc75 = loc(fused[#loc3, #loc4])
#loc76 = loc(fused[#loc5, #loc6])
#loc77 = loc(fused[#loc8, #loc9])
#loc78 = loc(fused[#loc10, #loc11])
#loc79 = loc(fused[#loc13, #loc11])
#loc80 = loc(fused[#loc14, #loc15])
#loc81 = loc(fused[#loc16, #loc17])
#loc82 = loc(fused[#loc19, #loc20])
#loc83 = loc(fused[#loc22, #loc21])
#loc84 = loc(fused[#loc24, #loc20])
#loc85 = loc(fused[#loc26, #loc27])
#loc86 = loc(fused[#loc28, #loc29])
#loc87 = loc(fused[#loc30, #loc31])
#loc88 = loc(fused[#loc32, #loc33])
#loc89 = loc(fused[#loc35, #loc36])
#loc90 = loc(fused[#loc37, #loc38])
#loc91 = loc(fused[#loc40, #loc41, #loc42, #loc38])
#loc92 = loc(fused[#loc44, #loc45])
#loc93 = loc(fused[#loc46, #loc47])
#loc94 = loc(fused[#loc49, #loc50])
#loc95 = loc(fused[#loc51, #loc52])
#loc96 = loc(fused[#loc53, #loc50])
#loc97 = loc(fused[#loc56, #loc57])
#loc98 = loc(fused[#loc58, #loc59])
#loc99 = loc(fused[#loc61, #loc59])
#loc100 = loc(fused[#loc62, #loc63])
#loc101 = loc(fused[#loc64, #loc65])
#loc102 = loc(fused[#loc67, #loc68])
#loc103 = loc(fused[#loc69, #loc70])
#loc104 = loc(fused[#loc71, #loc68])
