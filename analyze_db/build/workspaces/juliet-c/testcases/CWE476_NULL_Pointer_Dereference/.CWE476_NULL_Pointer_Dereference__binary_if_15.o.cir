!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#true = #cir.bool<true> : !cir.bool
!ty__twoIntsStruct = !cir.record<struct "_twoIntsStruct" {!s32i, !s32i} #cir.record.decl.ast>
module @"/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc90)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"intOne == 5\00" : !cir.array<!s8i x 12>> : !cir.array<!s8i x 12> {alignment = 1 : i64} loc(#loc3)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc4)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_15_bad() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc9)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc94)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc14)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc94)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc17)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc18)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc18)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc96)
              %7 = cir.cast(bool_to_int, %6 : !cir.bool), !s32i loc(#loc96)
              %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc19)
              %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
              %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc21)
              %11 = cir.const #cir.int<5> : !s32i loc(#loc22)
              %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc97)
              %13 = cir.cast(bool_to_int, %12 : !cir.bool), !s32i loc(#loc97)
              %14 = cir.binop(and, %7, %13) : !s32i loc(#loc98)
              %15 = cir.cast(int_to_bool, %14 : !s32i), !cir.bool loc(#loc25)
              cir.if %15 {
                %16 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc3)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc3)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc27)
              } loc(#loc99)
            } loc(#loc95)
          } loc(#loc93)
          cir.break loc(#loc28)
        } loc(#loc10)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc4)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc4)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc30)
          cir.break loc(#loc31)
        } loc(#loc29)
        cir.yield loc(#loc7)
      } loc(#loc7)
    } loc(#loc92)
    cir.return loc(#loc6)
  } loc(#loc91)
  cir.func no_proto @CWE476_NULL_Pointer_Dereference__binary_if_15_good() extra(#fn_attr) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc101)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc34)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<()>> loc(#loc102)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc36)
    cir.return loc(#loc33)
  } loc(#loc100)
  cir.func no_proto internal private @good1() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc42)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc44)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc44)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc45)
          cir.break loc(#loc46)
        } loc(#loc43)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc106)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc51)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc106)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc54)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc55)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc55)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc108)
              %7 = cir.ternary(%6, true {
                %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc57)
                %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
                %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc58)
                %11 = cir.const #cir.int<5> : !s32i loc(#loc59)
                %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc109)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc56)
                  cir.yield %14 : !cir.bool loc(#loc56)
                }, false {
                  %14 = cir.const #false loc(#loc56)
                  cir.yield %14 : !cir.bool loc(#loc56)
                }) : (!cir.bool) -> !cir.bool loc(#loc56)
                cir.yield %13 : !cir.bool loc(#loc56)
              }, false {
                %8 = cir.const #false loc(#loc56)
                cir.yield %8 : !cir.bool loc(#loc56)
              }) : (!cir.bool) -> !cir.bool loc(#loc56)
              cir.if %7 {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc61)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc61)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc62)
              } loc(#loc110)
            } loc(#loc107)
          } loc(#loc105)
          cir.break loc(#loc63)
        } loc(#loc47)
        cir.yield loc(#loc40)
      } loc(#loc40)
    } loc(#loc104)
    cir.return loc(#loc39)
  } loc(#loc103)
  cir.func no_proto internal private @good2() extra(#fn_attr) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc68)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.alloca !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, ["twoIntsStructPointer", init] {alignment = 8 : i64} loc(#loc114)
            %2 = cir.const #cir.ptr<null> : !cir.ptr<!ty__twoIntsStruct> loc(#loc73)
            cir.store %2, %1 : !cir.ptr<!ty__twoIntsStruct>, !cir.ptr<!cir.ptr<!ty__twoIntsStruct>> loc(#loc114)
            cir.scope {
              %3 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc76)
              %4 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc77)
              %5 = cir.cast(bitcast, %4 : !cir.ptr<!void>), !cir.ptr<!ty__twoIntsStruct> loc(#loc77)
              %6 = cir.cmp(ne, %3, %5) : !cir.ptr<!ty__twoIntsStruct>, !cir.bool loc(#loc116)
              %7 = cir.ternary(%6, true {
                %8 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__twoIntsStruct>>, !cir.ptr<!ty__twoIntsStruct> loc(#loc79)
                %9 = cir.get_member %8[0] {name = "intOne"} : !cir.ptr<!ty__twoIntsStruct> -> !cir.ptr<!s32i> loc(#loc20)
                %10 = cir.load %9 : !cir.ptr<!s32i>, !s32i loc(#loc80)
                %11 = cir.const #cir.int<5> : !s32i loc(#loc81)
                %12 = cir.cmp(eq, %10, %11) : !s32i, !cir.bool loc(#loc117)
                %13 = cir.ternary(%12, true {
                  %14 = cir.const #true loc(#loc78)
                  cir.yield %14 : !cir.bool loc(#loc78)
                }, false {
                  %14 = cir.const #false loc(#loc78)
                  cir.yield %14 : !cir.bool loc(#loc78)
                }) : (!cir.bool) -> !cir.bool loc(#loc78)
                cir.yield %13 : !cir.bool loc(#loc78)
              }, false {
                %8 = cir.const #false loc(#loc78)
                cir.yield %8 : !cir.bool loc(#loc78)
              }) : (!cir.bool) -> !cir.bool loc(#loc78)
              cir.if %7 {
                %8 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 12>> loc(#loc83)
                %9 = cir.cast(array_to_ptrdecay, %8 : !cir.ptr<!cir.array<!s8i x 12>>), !cir.ptr<!s8i> loc(#loc83)
                cir.call @printLine(%9) : (!cir.ptr<!s8i>) -> () loc(#loc84)
              } loc(#loc118)
            } loc(#loc115)
          } loc(#loc113)
          cir.break loc(#loc85)
        } loc(#loc69)
        cir.case(default, []) {
          %1 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc87)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc87)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc88)
          cir.break loc(#loc89)
        } loc(#loc86)
        cir.yield loc(#loc66)
      } loc(#loc66)
    } loc(#loc112)
    cir.return loc(#loc65)
  } loc(#loc111)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE476_NULL_Pointer_Dereference/CWE476_NULL_Pointer_Dereference__binary_if_15.c":0:0)
#loc1 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc2 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc3 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":31:23)
#loc4 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":37:19)
#loc5 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":20:1)
#loc6 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":40:1)
#loc7 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":22:5)
#loc8 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":39:5)
#loc9 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":22:12)
#loc10 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":24:5)
#loc11 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":25:5)
#loc12 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":33:5)
#loc13 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":26:9)
#loc14 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":26:47)
#loc15 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:9)
#loc16 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":32:9)
#loc17 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:14)
#loc18 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:38)
#loc19 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:47)
#loc20 = loc("../../testcasesupport/std_testcase.h":98:9)
#loc21 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:69)
#loc22 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:79)
#loc23 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:13)
#loc24 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:80)
#loc25 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":29:44)
#loc26 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":30:9)
#loc27 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":31:13)
#loc28 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":34:5)
#loc29 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":35:5)
#loc30 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":37:9)
#loc31 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":38:9)
#loc32 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":92:1)
#loc33 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":96:1)
#loc34 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":94:5)
#loc35 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":94:11)
#loc36 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":95:5)
#loc37 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":95:11)
#loc38 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":47:1)
#loc39 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":67:1)
#loc40 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":49:5)
#loc41 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":66:5)
#loc42 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":49:12)
#loc43 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":51:5)
#loc44 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":53:19)
#loc45 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":53:9)
#loc46 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":54:9)
#loc47 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":55:5)
#loc48 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":56:5)
#loc49 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":64:5)
#loc50 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":57:9)
#loc51 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":57:47)
#loc52 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:9)
#loc53 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":63:9)
#loc54 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:14)
#loc55 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:38)
#loc56 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:44)
#loc57 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:48)
#loc58 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:70)
#loc59 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":60:80)
#loc60 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":61:9)
#loc61 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":62:23)
#loc62 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":62:13)
#loc63 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":65:5)
#loc64 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":70:1)
#loc65 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":90:1)
#loc66 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":72:5)
#loc67 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":89:5)
#loc68 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":72:12)
#loc69 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":74:5)
#loc70 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":75:5)
#loc71 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":83:5)
#loc72 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":76:9)
#loc73 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":76:47)
#loc74 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:9)
#loc75 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":82:9)
#loc76 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:14)
#loc77 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:38)
#loc78 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:44)
#loc79 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:48)
#loc80 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:70)
#loc81 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":79:80)
#loc82 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":80:9)
#loc83 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":81:23)
#loc84 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":81:13)
#loc85 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":84:5)
#loc86 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":85:5)
#loc87 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":87:19)
#loc88 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":87:9)
#loc89 = loc("CWE476_NULL_Pointer_Dereference__binary_if_15.c":88:9)
#loc90 = loc(fused[#loc1, #loc2])
#loc91 = loc(fused[#loc5, #loc6])
#loc92 = loc(fused[#loc7, #loc8])
#loc93 = loc(fused[#loc11, #loc12])
#loc94 = loc(fused[#loc13, #loc14])
#loc95 = loc(fused[#loc15, #loc16])
#loc96 = loc(fused[#loc17, #loc18])
#loc97 = loc(fused[#loc19, #loc22])
#loc98 = loc(fused[#loc23, #loc24])
#loc99 = loc(fused[#loc26, #loc16])
#loc100 = loc(fused[#loc32, #loc33])
#loc101 = loc(fused[#loc34, #loc35])
#loc102 = loc(fused[#loc36, #loc37])
#loc103 = loc(fused[#loc38, #loc39])
#loc104 = loc(fused[#loc40, #loc41])
#loc105 = loc(fused[#loc48, #loc49])
#loc106 = loc(fused[#loc50, #loc51])
#loc107 = loc(fused[#loc52, #loc53])
#loc108 = loc(fused[#loc54, #loc55])
#loc109 = loc(fused[#loc57, #loc59])
#loc110 = loc(fused[#loc60, #loc53])
#loc111 = loc(fused[#loc64, #loc65])
#loc112 = loc(fused[#loc66, #loc67])
#loc113 = loc(fused[#loc70, #loc71])
#loc114 = loc(fused[#loc72, #loc73])
#loc115 = loc(fused[#loc74, #loc75])
#loc116 = loc(fused[#loc76, #loc77])
#loc117 = loc(fused[#loc79, #loc81])
#loc118 = loc(fused[#loc82, #loc75])
