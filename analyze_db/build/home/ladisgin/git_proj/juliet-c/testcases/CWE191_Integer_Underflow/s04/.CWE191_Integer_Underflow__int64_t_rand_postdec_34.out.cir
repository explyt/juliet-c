!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc49 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":110:10)
#loc50 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":110:14)
#loc51 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":110:20)
#loc52 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":110:32)
!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType = !cir.struct<union "CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType" {!s64i, !s64i}>
#loc143 = loc(fused[#loc49, #loc50])
#loc144 = loc(fused[#loc51, #loc52])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_34.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc123)
  cir.func private @printLongLongLine(!s64i) loc(#loc124)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_34_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc127)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc11)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc13)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc13)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc13)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc13)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc13)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc13)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc13)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc13)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc13)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc13)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc13)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc13)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc13)
      cir.yield %32 : !u64i loc(#loc13)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc13)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc13)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc13)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc13)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc13)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc13)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc13)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc13)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc13)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc13)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc13)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc13)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc13)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc13)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc13)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc13)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc13)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc13)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc13)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc13)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc13)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc13)
      cir.yield %36 : !u64i loc(#loc13)
    }) : (!cir.bool) -> !u64i loc(#loc13)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc13)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc129)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc15)
    %10 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc16)
    cir.store %9, %10 : !s64i, !cir.ptr<!s64i> loc(#loc130)
    cir.scope {
      %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc132)
      %12 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc22)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc21)
      cir.store %13, %11 : !s64i, !cir.ptr<!s64i> loc(#loc132)
      cir.scope {
        %14 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc134)
        %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc27)
        %16 = cir.unary(dec, %15) : !s64i, !s64i loc(#loc28)
        cir.store %16, %11 : !s64i, !cir.ptr<!s64i> loc(#loc135)
        %17 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc26)
        cir.store %17, %14 : !s64i, !cir.ptr<!s64i> loc(#loc134)
        %18 = cir.load %14 : !cir.ptr<!s64i>, !s64i loc(#loc29)
        cir.call @printLongLongLine(%18) : (!s64i) -> () loc(#loc30)
      } loc(#loc133)
    } loc(#loc131)
    cir.return loc(#loc6)
  } loc(#loc125)
  cir.func no_proto @CWE191_Integer_Underflow__int64_t_rand_postdec_34_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc137)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc138)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc136)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc139)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc140)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc141)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc43)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc44)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc45)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc46)
  cir.func @main(%arg0: !s32i loc(fused[#loc49, #loc50]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc51, #loc52])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc143)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc144)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc48)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc53)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc53)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc54)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc55)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc55)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc56)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc43)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc43)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc57)
    %8 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_postdec_34_good : !cir.ptr<!cir.func<!void ()>> loc(#loc145)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_postdec_34_good() : () -> () loc(#loc58)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc44)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc44)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc60)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc45)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc45)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc61)
    %13 = cir.get_global @CWE191_Integer_Underflow__int64_t_rand_postdec_34_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc146)
    cir.call @CWE191_Integer_Underflow__int64_t_rand_postdec_34_bad() : () -> () loc(#loc62)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc46)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc46)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc64)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc65)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc147)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc147)
    cir.return %17 : !s32i loc(#loc147)
  } loc(#loc142)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc149)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc150)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc73)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc151)
    %3 = cir.const #cir.int<2> : !s32i loc(#loc75)
    %4 = cir.unary(minus, %3) : !s32i, !s32i loc(#loc76)
    %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc76)
    cir.store %5, %0 : !s64i, !cir.ptr<!s64i> loc(#loc152)
    %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc78)
    %7 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc16)
    cir.store %6, %7 : !s64i, !cir.ptr<!s64i> loc(#loc153)
    cir.scope {
      %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc155)
      %9 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc22)
      %10 = cir.load %9 : !cir.ptr<!s64i>, !s64i loc(#loc83)
      cir.store %10, %8 : !s64i, !cir.ptr<!s64i> loc(#loc155)
      cir.scope {
        %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc157)
        %12 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc88)
        %13 = cir.unary(dec, %12) : !s64i, !s64i loc(#loc89)
        cir.store %13, %8 : !s64i, !cir.ptr<!s64i> loc(#loc158)
        %14 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc87)
        cir.store %14, %11 : !s64i, !cir.ptr<!s64i> loc(#loc157)
        %15 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc90)
        cir.call @printLongLongLine(%15) : (!s64i) -> () loc(#loc91)
      } loc(#loc156)
    } loc(#loc154)
    cir.return loc(#loc68)
  } loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc92)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc160)
    %1 = cir.alloca !ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType, !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType>, ["myUnion"] {alignment = 8 : i64} loc(#loc161)
    %2 = cir.const #cir.int<0> : !s64i loc(#loc99)
    cir.store %2, %0 : !s64i, !cir.ptr<!s64i> loc(#loc162)
    %3 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
    %4 = cir.const #cir.int<1> : !s32i loc(#loc101)
    %5 = cir.binop(and, %3, %4) : !s32i loc(#loc101)
    %6 = cir.cast(int_to_bool, %5 : !s32i), !cir.bool loc(#loc101)
    %7 = cir.ternary(%6, true {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc101)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc101)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc101)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc101)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc101)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc101)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc101)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc101)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc101)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc101)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc101)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc101)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc101)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc101)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc101)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc101)
      cir.yield %32 : !u64i loc(#loc101)
    }, false {
      %11 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %12 = cir.cast(integral, %11 : !s32i), !u64i loc(#loc101)
      %13 = cir.const #cir.int<60> : !s32i loc(#loc101)
      %14 = cir.shift(left, %12 : !u64i, %13 : !s32i) -> !u64i loc(#loc101)
      %15 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %16 = cir.cast(integral, %15 : !s32i), !u64i loc(#loc101)
      %17 = cir.const #cir.int<45> : !s32i loc(#loc101)
      %18 = cir.shift(left, %16 : !u64i, %17 : !s32i) -> !u64i loc(#loc101)
      %19 = cir.binop(xor, %14, %18) : !u64i loc(#loc101)
      %20 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %21 = cir.cast(integral, %20 : !s32i), !u64i loc(#loc101)
      %22 = cir.const #cir.int<30> : !s32i loc(#loc101)
      %23 = cir.shift(left, %21 : !u64i, %22 : !s32i) -> !u64i loc(#loc101)
      %24 = cir.binop(xor, %19, %23) : !u64i loc(#loc101)
      %25 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %26 = cir.cast(integral, %25 : !s32i), !u64i loc(#loc101)
      %27 = cir.const #cir.int<15> : !s32i loc(#loc101)
      %28 = cir.shift(left, %26 : !u64i, %27 : !s32i) -> !u64i loc(#loc101)
      %29 = cir.binop(xor, %24, %28) : !u64i loc(#loc101)
      %30 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc101)
      %31 = cir.cast(integral, %30 : !s32i), !u64i loc(#loc101)
      %32 = cir.binop(xor, %29, %31) : !u64i loc(#loc101)
      %33 = cir.unary(minus, %32) : !u64i, !u64i loc(#loc101)
      %34 = cir.const #cir.int<1> : !s32i loc(#loc101)
      %35 = cir.cast(integral, %34 : !s32i), !u64i loc(#loc101)
      %36 = cir.binop(sub, %33, %35) : !u64i loc(#loc101)
      cir.yield %36 : !u64i loc(#loc101)
    }) : (!cir.bool) -> !u64i loc(#loc101)
    %8 = cir.cast(integral, %7 : !u64i), !s64i loc(#loc101)
    cir.store %8, %0 : !s64i, !cir.ptr<!s64i> loc(#loc163)
    %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc103)
    %10 = cir.get_member %1[0] {name = "unionFirst"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc16)
    cir.store %9, %10 : !s64i, !cir.ptr<!s64i> loc(#loc164)
    cir.scope {
      %11 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc166)
      %12 = cir.get_member %1[1] {name = "unionSecond"} : !cir.ptr<!ty_CWE191_Integer_Underflow__int64_t_rand_postdec_34_unionType> -> !cir.ptr<!s64i> loc(#loc22)
      %13 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc108)
      cir.store %13, %11 : !s64i, !cir.ptr<!s64i> loc(#loc166)
      cir.scope {
        %14 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc111)
        %15 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc112)
        %16 = cir.unary(minus, %15) : !s64i, !s64i loc(#loc112)
        %17 = cir.const #cir.int<1> : !s64i loc(#loc112)
        %18 = cir.binop(sub, %16, %17) nsw : !s64i loc(#loc112)
        %19 = cir.cmp(gt, %14, %18) : !s64i, !cir.bool loc(#loc168)
        cir.if %19 {
          %20 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc170)
          %21 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc118)
          %22 = cir.unary(dec, %21) : !s64i, !s64i loc(#loc119)
          cir.store %22, %11 : !s64i, !cir.ptr<!s64i> loc(#loc171)
          %23 = cir.load %11 : !cir.ptr<!s64i>, !s64i loc(#loc117)
          cir.store %23, %20 : !s64i, !cir.ptr<!s64i> loc(#loc170)
          %24 = cir.load %20 : !cir.ptr<!s64i>, !s64i loc(#loc120)
          cir.call @printLongLongLine(%24) : (!s64i) -> () loc(#loc121)
        } else {
          %20 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc92)
          %21 = cir.cast(array_to_ptrdecay, %20 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc92)
          cir.call @printLine(%21) : (!cir.ptr<!s8i>) -> () loc(#loc122)
        } loc(#loc169)
      } loc(#loc167)
    } loc(#loc165)
    cir.return loc(#loc94)
  } loc(#loc159)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE191_Integer_Underflow/s04/CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc5 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":28:1)
#loc6 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":45:1)
#loc7 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":30:5)
#loc8 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":30:13)
#loc9 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":31:5)
#loc10 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":31:65)
#loc11 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":32:12)
#loc12 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":32:5)
#loc13 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":34:21)
#loc14 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":34:5)
#loc15 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":35:26)
#loc16 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":22:13)
#loc17 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":35:5)
#loc18 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":36:5)
#loc19 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":44:5)
#loc20 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":37:9)
#loc21 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":37:32)
#loc22 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":23:13)
#loc23 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":38:9)
#loc24 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":43:9)
#loc25 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":41:13)
#loc26 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":41:30)
#loc27 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":40:17)
#loc28 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":40:13)
#loc29 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":42:31)
#loc30 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":42:13)
#loc31 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":96:1)
#loc32 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":100:1)
#loc33 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":98:5)
#loc34 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":98:13)
#loc35 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":99:5)
#loc36 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":99:13)
#loc37 = loc("/usr/include/stdlib.h":575:1)
#loc38 = loc("/usr/include/stdlib.h":575:41)
#loc39 = loc("/usr/include/time.h":76:1)
#loc40 = loc("/usr/include/time.h":76:38)
#loc41 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc42 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc43 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":115:15)
#loc44 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":117:15)
#loc45 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":120:15)
#loc46 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":122:15)
#loc47 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":110:1)
#loc48 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":125:1)
#loc53 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":111:1)
#loc54 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":113:27)
#loc55 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":113:22)
#loc56 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":113:5)
#loc57 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":115:5)
#loc58 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":116:5)
#loc59 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":116:60)
#loc60 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":117:5)
#loc61 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":120:5)
#loc62 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":121:5)
#loc63 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":121:59)
#loc64 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":122:5)
#loc65 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":124:12)
#loc66 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":124:5)
#loc67 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":52:1)
#loc68 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":69:1)
#loc69 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":54:5)
#loc70 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":54:13)
#loc71 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":55:5)
#loc72 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":55:65)
#loc73 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":56:12)
#loc74 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":56:5)
#loc75 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":58:13)
#loc76 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":58:12)
#loc77 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":58:5)
#loc78 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":59:26)
#loc79 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":59:5)
#loc80 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":60:5)
#loc81 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":68:5)
#loc82 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":61:9)
#loc83 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":61:32)
#loc84 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":62:9)
#loc85 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":67:9)
#loc86 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":65:13)
#loc87 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":65:30)
#loc88 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":64:17)
#loc89 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":64:13)
#loc90 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":66:31)
#loc91 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":66:13)
#loc92 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":91:23)
#loc93 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":72:1)
#loc94 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":94:1)
#loc95 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":74:5)
#loc96 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":74:13)
#loc97 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":75:5)
#loc98 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":75:65)
#loc99 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":76:12)
#loc100 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":76:5)
#loc101 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":78:21)
#loc102 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":78:5)
#loc103 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":79:26)
#loc104 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":79:5)
#loc105 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":80:5)
#loc106 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":93:5)
#loc107 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":81:9)
#loc108 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":81:32)
#loc109 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":83:9)
#loc110 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":92:9)
#loc111 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":83:13)
#loc112 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":83:20)
#loc113 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":84:9)
#loc114 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":88:9)
#loc115 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":90:9)
#loc116 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":86:13)
#loc117 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":86:30)
#loc118 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":85:17)
#loc119 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":85:13)
#loc120 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":87:31)
#loc121 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":87:13)
#loc122 = loc("CWE191_Integer_Underflow__int64_t_rand_postdec_34.c":91:13)
#loc123 = loc(fused[#loc1, #loc2])
#loc124 = loc(fused[#loc3, #loc4])
#loc125 = loc(fused[#loc5, #loc6])
#loc126 = loc(fused[#loc7, #loc8])
#loc127 = loc(fused[#loc9, #loc10])
#loc128 = loc(fused[#loc12, #loc11])
#loc129 = loc(fused[#loc14, #loc13])
#loc130 = loc(fused[#loc17, #loc15])
#loc131 = loc(fused[#loc18, #loc19])
#loc132 = loc(fused[#loc20, #loc21])
#loc133 = loc(fused[#loc23, #loc24])
#loc134 = loc(fused[#loc25, #loc26])
#loc135 = loc(fused[#loc28, #loc27])
#loc136 = loc(fused[#loc31, #loc32])
#loc137 = loc(fused[#loc33, #loc34])
#loc138 = loc(fused[#loc35, #loc36])
#loc139 = loc(fused[#loc37, #loc38])
#loc140 = loc(fused[#loc39, #loc40])
#loc141 = loc(fused[#loc41, #loc42])
#loc142 = loc(fused[#loc47, #loc48])
#loc145 = loc(fused[#loc58, #loc59])
#loc146 = loc(fused[#loc62, #loc63])
#loc147 = loc(fused[#loc66, #loc65])
#loc148 = loc(fused[#loc67, #loc68])
#loc149 = loc(fused[#loc69, #loc70])
#loc150 = loc(fused[#loc71, #loc72])
#loc151 = loc(fused[#loc74, #loc73])
#loc152 = loc(fused[#loc77, #loc75])
#loc153 = loc(fused[#loc79, #loc78])
#loc154 = loc(fused[#loc80, #loc81])
#loc155 = loc(fused[#loc82, #loc83])
#loc156 = loc(fused[#loc84, #loc85])
#loc157 = loc(fused[#loc86, #loc87])
#loc158 = loc(fused[#loc89, #loc88])
#loc159 = loc(fused[#loc93, #loc94])
#loc160 = loc(fused[#loc95, #loc96])
#loc161 = loc(fused[#loc97, #loc98])
#loc162 = loc(fused[#loc100, #loc99])
#loc163 = loc(fused[#loc102, #loc101])
#loc164 = loc(fused[#loc104, #loc103])
#loc165 = loc(fused[#loc105, #loc106])
#loc166 = loc(fused[#loc107, #loc108])
#loc167 = loc(fused[#loc109, #loc110])
#loc168 = loc(fused[#loc111, #loc112])
#loc169 = loc(fused[#loc113, #loc114, #loc115, #loc110])
#loc170 = loc(fused[#loc116, #loc117])
#loc171 = loc(fused[#loc119, #loc118])
