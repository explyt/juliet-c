!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
#loc5 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":25:26)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":25:34)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":69:30)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":69:38)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":49:30)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":49:38)
#loc106 = loc(fused[#loc5, #loc6])
#loc120 = loc(fused[#loc39, #loc40])
#loc134 = loc(fused[#loc80, #loc81])
module @"/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_42.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64, "dlti.mangling_mode" = "e">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc104)
  cir.func internal private @badSource(%arg0: !s64i loc(fused[#loc5, #loc6])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc106)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc4)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc7)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc8)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc8)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc8)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc8)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc8)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc8)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc8)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc8)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc8)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc8)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc8)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc8)
      cir.yield %31 : !u64i loc(#loc8)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc8)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc8)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc8)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc8)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc8)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc8)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc8)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc8)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc8)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc8)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc8)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc8)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc8)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc8)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc8)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc8)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc8)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc8)
      %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc8)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc8)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc8)
      %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc8)
      cir.yield %35 : !u64i loc(#loc8)
    }) : (!cir.bool) -> !u64i loc(#loc8)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc8)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc107)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc10)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc108)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc108)
    cir.return %9 : !s64i loc(#loc108)
  } loc(#loc105)
  cir.func private @printLongLongLine(!s64i) loc(#loc109)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_42_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc111)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc18)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc112)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc20)
    %3 = cir.call @badSource(%2) : (!s64i) -> !s64i loc(#loc21)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc113)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc115)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc28)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc27)
      %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc28)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc115)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc29)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc30)
    } loc(#loc114)
    cir.return loc(#loc15)
  } loc(#loc110)
  cir.func no_proto @CWE190_Integer_Overflow__int64_t_rand_square_42_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<()>> loc(#loc117)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<()>> loc(#loc118)
    cir.call %1() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc35)
    cir.return loc(#loc32)
  } loc(#loc116)
  cir.func internal private @goodB2GSource(%arg0: !s64i loc(fused[#loc39, #loc40])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc120)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc38)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc41)
    %2 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
    %3 = cir.const #cir.int<1> : !s32i loc(#loc42)
    %4 = cir.binop(and, %2, %3) : !s32i loc(#loc42)
    %5 = cir.cast(int_to_bool, %4 : !s32i), !cir.bool loc(#loc42)
    %6 = cir.ternary(%5, true {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc42)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc42)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc42)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc42)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc42)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc42)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc42)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc42)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc42)
      cir.yield %31 : !u64i loc(#loc42)
    }, false {
      %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %11 = cir.cast(integral, %10 : !s32i), !u64i loc(#loc42)
      %12 = cir.const #cir.int<60> : !s32i loc(#loc42)
      %13 = cir.shift(left, %11 : !u64i, %12 : !s32i) -> !u64i loc(#loc42)
      %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %15 = cir.cast(integral, %14 : !s32i), !u64i loc(#loc42)
      %16 = cir.const #cir.int<45> : !s32i loc(#loc42)
      %17 = cir.shift(left, %15 : !u64i, %16 : !s32i) -> !u64i loc(#loc42)
      %18 = cir.binop(xor, %13, %17) : !u64i loc(#loc42)
      %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc42)
      %21 = cir.const #cir.int<30> : !s32i loc(#loc42)
      %22 = cir.shift(left, %20 : !u64i, %21 : !s32i) -> !u64i loc(#loc42)
      %23 = cir.binop(xor, %18, %22) : !u64i loc(#loc42)
      %24 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %25 = cir.cast(integral, %24 : !s32i), !u64i loc(#loc42)
      %26 = cir.const #cir.int<15> : !s32i loc(#loc42)
      %27 = cir.shift(left, %25 : !u64i, %26 : !s32i) -> !u64i loc(#loc42)
      %28 = cir.binop(xor, %23, %27) : !u64i loc(#loc42)
      %29 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc42)
      %30 = cir.cast(integral, %29 : !s32i), !u64i loc(#loc42)
      %31 = cir.binop(xor, %28, %30) : !u64i loc(#loc42)
      %32 = cir.unary(minus, %31) : !u64i, !u64i loc(#loc42)
      %33 = cir.const #cir.int<1> : !s32i loc(#loc42)
      %34 = cir.cast(integral, %33 : !s32i), !u64i loc(#loc42)
      %35 = cir.binop(sub, %32, %34) : !u64i loc(#loc42)
      cir.yield %35 : !u64i loc(#loc42)
    }) : (!cir.bool) -> !u64i loc(#loc42)
    %7 = cir.cast(integral, %6 : !u64i), !s64i loc(#loc42)
    cir.store %7, %0 : !s64i, !cir.ptr<!s64i> loc(#loc121)
    %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc44)
    cir.store %8, %1 : !s64i, !cir.ptr<!s64i> loc(#loc122)
    %9 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc122)
    cir.return %9 : !s64i loc(#loc122)
  } loc(#loc119)
  cir.func private @imaxabs(!s64i) -> !s64i extra(#fn_attr) loc(#loc123)
  cir.func private @sqrtl(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc48)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc124)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc51)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc126)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc56)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc127)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc58)
    %3 = cir.call @goodB2GSource(%2) : (!s64i) -> !s64i loc(#loc59)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc128)
    cir.scope {
      %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc64)
      %5 = cir.call @imaxabs(%4) : (!s64i) -> !s64i side_effect(const) extra(#fn_attr) loc(#loc65)
      %6 = cir.cast(int_to_float, %5 : !s64i), !cir.long_double<!cir.f80> loc(#loc65)
      %7 = cir.get_global @sqrtl : !cir.ptr<!cir.func<(!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80>>> loc(#loc66)
      %8 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc67)
      %9 = cir.cast(int_to_float, %8 : !s64i), !cir.long_double<!cir.f80> loc(#loc67)
      %10 = cir.call @sqrtl(%9) : (!cir.long_double<!cir.f80>) -> !cir.long_double<!cir.f80> extra(#fn_attr) loc(#loc66)
      %11 = cir.cmp(le, %6, %10) : !cir.long_double<!cir.f80>, !cir.bool loc(#loc130)
      cir.if %11 {
        %12 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc132)
        %13 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc74)
        %14 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc73)
        %15 = cir.binop(mul, %13, %14) nsw : !s64i loc(#loc74)
        cir.store %15, %12 : !s64i, !cir.ptr<!s64i> loc(#loc132)
        %16 = cir.load %12 : !cir.ptr<!s64i>, !s64i loc(#loc75)
        cir.call @printLongLongLine(%16) : (!s64i) -> () loc(#loc76)
      } else {
        %12 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc51)
        %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc51)
        cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc77)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc53)
  } loc(#loc125)
  cir.func internal private @goodG2BSource(%arg0: !s64i loc(fused[#loc80, #loc81])) -> !s64i extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data", init] {alignment = 8 : i64} loc(#loc134)
    %1 = cir.alloca !s64i, !cir.ptr<!s64i>, ["__retval"] {alignment = 8 : i64} loc(#loc79)
    cir.store %arg0, %0 : !s64i, !cir.ptr<!s64i> loc(#loc82)
    %2 = cir.const #cir.int<2> : !s32i loc(#loc83)
    %3 = cir.cast(integral, %2 : !s32i), !s64i loc(#loc83)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc135)
    %4 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc85)
    cir.store %4, %1 : !s64i, !cir.ptr<!s64i> loc(#loc136)
    %5 = cir.load %1 : !cir.ptr<!s64i>, !s64i loc(#loc136)
    cir.return %5 : !s64i loc(#loc136)
  } loc(#loc133)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc138)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc91)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc139)
    %2 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc93)
    %3 = cir.call @goodG2BSource(%2) : (!s64i) -> !s64i loc(#loc94)
    cir.store %3, %0 : !s64i, !cir.ptr<!s64i> loc(#loc140)
    cir.scope {
      %4 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc142)
      %5 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc101)
      %6 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc100)
      %7 = cir.binop(mul, %5, %6) nsw : !s64i loc(#loc101)
      cir.store %7, %4 : !s64i, !cir.ptr<!s64i> loc(#loc142)
      %8 = cir.load %4 : !cir.ptr<!s64i>, !s64i loc(#loc102)
      cir.call @printLongLongLine(%8) : (!s64i) -> () loc(#loc103)
    } loc(#loc141)
    cir.return loc(#loc88)
  } loc(#loc137)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int64_t_rand_square_42.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":25:1)
#loc4 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":30:1)
#loc7 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":26:1)
#loc8 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":28:21)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":28:5)
#loc10 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":29:12)
#loc11 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":29:5)
#loc12 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc13 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":32:1)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":42:1)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":34:5)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":34:13)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":35:12)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":35:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":36:22)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":36:12)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":36:5)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":36:26)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":37:5)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":41:5)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":39:9)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":39:33)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":39:26)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":40:27)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":40:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":93:1)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":97:1)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":95:5)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":95:13)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":96:5)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":96:13)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":69:1)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":74:1)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":70:1)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":72:21)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":72:5)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":73:12)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":73:5)
#loc46 = loc("/usr/include/inttypes.h":351:1)
#loc47 = loc("/usr/include/inttypes.h":351:74)
#loc48 = loc("/usr/include/x86_64-linux-gnu/bits/mathcalls.h":143:1)
#loc49 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc50 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":89:19)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":76:1)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":91:1)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":78:5)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":78:13)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":79:12)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":79:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":80:26)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":80:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":80:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":80:30)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":90:5)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:27)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:9)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:36)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:42)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":82:51)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":83:5)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":86:5)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":88:5)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":84:9)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":84:33)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":84:26)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":85:27)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":85:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":89:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":49:1)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":54:1)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":50:1)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":52:12)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":52:5)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":53:12)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":53:5)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":56:1)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":66:1)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":58:5)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":58:13)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":59:12)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":59:5)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":60:26)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":60:12)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":60:5)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":60:30)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":61:5)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":65:5)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":63:9)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":63:33)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":63:26)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":64:27)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_rand_square_42.c":64:9)
#loc104 = loc(fused[#loc1, #loc2])
#loc105 = loc(fused[#loc3, #loc4])
#loc107 = loc(fused[#loc9, #loc8])
#loc108 = loc(fused[#loc11, #loc10])
#loc109 = loc(fused[#loc12, #loc13])
#loc110 = loc(fused[#loc14, #loc15])
#loc111 = loc(fused[#loc16, #loc17])
#loc112 = loc(fused[#loc19, #loc18])
#loc113 = loc(fused[#loc22, #loc23])
#loc114 = loc(fused[#loc24, #loc25])
#loc115 = loc(fused[#loc26, #loc27])
#loc116 = loc(fused[#loc31, #loc32])
#loc117 = loc(fused[#loc33, #loc34])
#loc118 = loc(fused[#loc35, #loc36])
#loc119 = loc(fused[#loc37, #loc38])
#loc121 = loc(fused[#loc43, #loc42])
#loc122 = loc(fused[#loc45, #loc44])
#loc123 = loc(fused[#loc46, #loc47])
#loc124 = loc(fused[#loc49, #loc50])
#loc125 = loc(fused[#loc52, #loc53])
#loc126 = loc(fused[#loc54, #loc55])
#loc127 = loc(fused[#loc57, #loc56])
#loc128 = loc(fused[#loc60, #loc61])
#loc129 = loc(fused[#loc62, #loc63])
#loc130 = loc(fused[#loc65, #loc68])
#loc131 = loc(fused[#loc69, #loc70, #loc71, #loc63])
#loc132 = loc(fused[#loc72, #loc73])
#loc133 = loc(fused[#loc78, #loc79])
#loc135 = loc(fused[#loc84, #loc83])
#loc136 = loc(fused[#loc86, #loc85])
#loc137 = loc(fused[#loc87, #loc88])
#loc138 = loc(fused[#loc89, #loc90])
#loc139 = loc(fused[#loc92, #loc91])
#loc140 = loc(fused[#loc95, #loc96])
#loc141 = loc(fused[#loc97, #loc98])
#loc142 = loc(fused[#loc99, #loc100])
