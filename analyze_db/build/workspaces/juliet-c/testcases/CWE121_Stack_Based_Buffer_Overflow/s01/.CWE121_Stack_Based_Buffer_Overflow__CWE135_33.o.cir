!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!u8i = !cir.int<u, 8>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little", "dlti.mangling_mode" = "e">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<[#cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<65> : !s32i, #cir.int<0> : !s32i]> : !cir.array<!s32i x 43> {alignment = 4 : i64} loc(#loc1)
  cir.func private @strlen(!cir.ptr<!s8i>) -> !u64i extra(#fn_attr) loc(#loc98)
  cir.func private @wcscpy(!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc99)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc100)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_333badEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc102)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc103)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc13)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc14)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc104)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc1)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc1)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc1)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc105)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc107)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc20)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc20)
      cir.store %8, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc107)
      cir.scope {
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc109)
        %10 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc110)
        %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc27)
        %12 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc28)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc28)
        %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc27)
        cir.store %14, %9 : !u64i, !cir.ptr<!u64i> loc(#loc109)
        %15 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc26)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc26)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc26)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc26)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc26)
        %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc26)
        %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc26)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc26)
        cir.store %22, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc110)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc29)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc29)
        %25 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc30)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc30)
        %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc31)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc32)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc32)
        cir.call @printLine(%29) : (!cir.ptr<!s8i>) -> () loc(#loc33)
      } loc(#loc108)
    } loc(#loc106)
    cir.return loc(#loc9)
  } loc(#loc101)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\00" : !cir.array<!s8i x 43>> : !cir.array<!s8i x 43> {alignment = 1 : i64} loc(#loc34)
  cir.func private @strcpy(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc111)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc113)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc114)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc42)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc43)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc115)
    %3 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 43>> loc(#loc34)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 43>>), !cir.ptr<!s8i> loc(#loc34)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc34)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc116)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc118)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc49)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc49)
      cir.store %8, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc118)
      cir.scope {
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc120)
        %10 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc121)
        %11 = cir.get_global @strlen : !cir.ptr<!cir.func<(!cir.ptr<!s8i>) -> !u64i>> loc(#loc56)
        %12 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc57)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc57)
        %14 = cir.call @strlen(%13) : (!cir.ptr<!s8i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc56)
        cir.store %14, %9 : !u64i, !cir.ptr<!u64i> loc(#loc120)
        %15 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc55)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc55)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc55)
        %19 = cir.const #cir.int<1> : !s32i loc(#loc55)
        %20 = cir.cast(integral, %19 : !s32i), !u64i loc(#loc55)
        %21 = cir.binop(mul, %18, %20) : !u64i loc(#loc55)
        %22 = cir.alloca !u8i, !cir.ptr<!u8i>, %21 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc55)
        %23 = cir.cast(bitcast, %22 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc55)
        cir.store %23, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc121)
        %24 = cir.get_global @strcpy : !cir.ptr<!cir.func<(!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i>>> loc(#loc58)
        %25 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc59)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc59)
        %27 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc60)
        %28 = cir.cast(bitcast, %27 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc60)
        %29 = cir.call @strcpy(%26, %28) : (!cir.ptr<!s8i>, !cir.ptr<!s8i>) -> !cir.ptr<!s8i> extra(#fn_attr) loc(#loc58)
        %30 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc61)
        %31 = cir.cast(bitcast, %30 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc61)
        cir.call @printLine(%31) : (!cir.ptr<!s8i>) -> () loc(#loc62)
      } loc(#loc119)
    } loc(#loc117)
    cir.return loc(#loc38)
  } loc(#loc112)
  cir.func private @wcslen(!cir.ptr<!s32i>) -> !u64i extra(#fn_attr) loc(#loc122)
  cir.func private @printWLine(!cir.ptr<!s32i>) loc(#loc123)
  cir.func internal private @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data"] {alignment = 8 : i64} loc(#loc125)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, ["dataRef", init, const] {alignment = 8 : i64} loc(#loc126)
    cir.store %0, %1 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!cir.ptr<!cir.ptr<!void>>> loc(#loc72)
    %2 = cir.const #cir.ptr<null> : !cir.ptr<!void> loc(#loc73)
    cir.store %2, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc127)
    %3 = cir.get_global @".str" : !cir.ptr<!cir.array<!s32i x 43>> loc(#loc75)
    %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s32i x 43>>), !cir.ptr<!s32i> loc(#loc75)
    %5 = cir.cast(bitcast, %4 : !cir.ptr<!s32i>), !cir.ptr<!void> loc(#loc75)
    cir.store %5, %0 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc128)
    cir.scope {
      %6 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["data", init] {alignment = 8 : i64} loc(#loc130)
      %7 = cir.load %1 : !cir.ptr<!cir.ptr<!cir.ptr<!void>>>, !cir.ptr<!cir.ptr<!void>> loc(#loc80)
      %8 = cir.load %7 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc80)
      cir.store %8, %6 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc130)
      cir.scope {
        %9 = cir.alloca !u64i, !cir.ptr<!u64i>, ["dataLen", init] {alignment = 8 : i64} loc(#loc132)
        %10 = cir.alloca !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>>, ["dest", init] {alignment = 8 : i64} loc(#loc133)
        %11 = cir.get_global @wcslen : !cir.ptr<!cir.func<(!cir.ptr<!s32i>) -> !u64i>> loc(#loc87)
        %12 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc88)
        %13 = cir.cast(bitcast, %12 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc88)
        %14 = cir.call @wcslen(%13) : (!cir.ptr<!s32i>) -> !u64i side_effect(pure) extra(#fn_attr) loc(#loc87)
        cir.store %14, %9 : !u64i, !cir.ptr<!u64i> loc(#loc132)
        %15 = cir.load %9 : !cir.ptr<!u64i>, !u64i loc(#loc86)
        %16 = cir.const #cir.int<1> : !s32i loc(#loc86)
        %17 = cir.cast(integral, %16 : !s32i), !u64i loc(#loc86)
        %18 = cir.binop(add, %15, %17) : !u64i loc(#loc86)
        %19 = cir.const #cir.int<4> : !u64i loc(#loc86)
        %20 = cir.binop(mul, %18, %19) : !u64i loc(#loc86)
        %21 = cir.alloca !u8i, !cir.ptr<!u8i>, %20 : !u64i, ["bi_alloca"] {alignment = 16 : i64} loc(#loc86)
        %22 = cir.cast(bitcast, %21 : !cir.ptr<!u8i>), !cir.ptr<!void> loc(#loc86)
        cir.store %22, %10 : !cir.ptr<!void>, !cir.ptr<!cir.ptr<!void>> loc(#loc133)
        %23 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc89)
        %24 = cir.cast(bitcast, %23 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc89)
        %25 = cir.load %6 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc90)
        %26 = cir.cast(bitcast, %25 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc90)
        %27 = cir.call @wcscpy(%24, %26) : (!cir.ptr<!s32i>, !cir.ptr<!s32i>) -> !cir.ptr<!s32i> extra(#fn_attr) loc(#loc91)
        %28 = cir.load %10 : !cir.ptr<!cir.ptr<!void>>, !cir.ptr<!void> loc(#loc92)
        %29 = cir.cast(bitcast, %28 : !cir.ptr<!void>), !cir.ptr<!s32i> loc(#loc92)
        cir.call @printWLine(%29) : (!cir.ptr<!s32i>) -> () loc(#loc93)
      } loc(#loc131)
    } loc(#loc129)
    cir.return loc(#loc68)
  } loc(#loc124)
  cir.func @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_334goodEv() extra(#fn_attr1) {
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodG2BEv() : () -> () loc(#loc96)
    cir.call @_ZN45CWE121_Stack_Based_Buffer_Overflow__CWE135_33L7goodB2GEv() : () -> () loc(#loc97)
    cir.return loc(#loc95)
  } loc(#loc134)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE121_Stack_Based_Buffer_Overflow/s01/CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":0:0)
#loc1 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":36:20)
#loc2 = loc("/usr/include/string.h":407:1)
#loc3 = loc("/usr/include/string.h":408:33)
#loc4 = loc("/usr/include/wchar.h":98:1)
#loc5 = loc("/usr/include/wchar.h":100:14)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":30:1)
#loc9 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":47:1)
#loc10 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":32:5)
#loc11 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":32:12)
#loc12 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":33:5)
#loc13 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":33:23)
#loc14 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":34:12)
#loc15 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":34:5)
#loc16 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":36:5)
#loc17 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":37:5)
#loc18 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":46:5)
#loc19 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":38:9)
#loc20 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":38:23)
#loc21 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":39:9)
#loc22 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":45:9)
#loc23 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:13)
#loc24 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:49)
#loc25 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":42:13)
#loc26 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":42:35)
#loc27 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:30)
#loc28 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":41:45)
#loc29 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:37)
#loc30 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:54)
#loc31 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":43:19)
#loc32 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":44:31)
#loc33 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":44:13)
#loc34 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":60:20)
#loc35 = loc("/usr/include/string.h":141:1)
#loc36 = loc("/usr/include/string.h":142:14)
#loc37 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":54:1)
#loc38 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":71:1)
#loc39 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":56:5)
#loc40 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":56:12)
#loc41 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":57:5)
#loc42 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":57:23)
#loc43 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":58:12)
#loc44 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":58:5)
#loc45 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":60:5)
#loc46 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":61:5)
#loc47 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":70:5)
#loc48 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":62:9)
#loc49 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":62:23)
#loc50 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":63:9)
#loc51 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":69:9)
#loc52 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:13)
#loc53 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:49)
#loc54 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":66:13)
#loc55 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":66:35)
#loc56 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:30)
#loc57 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":65:45)
#loc58 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:19)
#loc59 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:34)
#loc60 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":67:48)
#loc61 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":68:31)
#loc62 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":68:13)
#loc63 = loc("/usr/include/wchar.h":247:1)
#loc64 = loc("/usr/include/wchar.h":247:51)
#loc65 = loc("../../../testcasesupport/std_testcase_io.h":16:1)
#loc66 = loc("../../../testcasesupport/std_testcase_io.h":16:37)
#loc67 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":74:1)
#loc68 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":91:1)
#loc69 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":76:5)
#loc70 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":76:12)
#loc71 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":77:5)
#loc72 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":77:23)
#loc73 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":78:12)
#loc74 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":78:5)
#loc75 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":80:20)
#loc76 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":80:5)
#loc77 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":81:5)
#loc78 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":90:5)
#loc79 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":82:9)
#loc80 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":82:23)
#loc81 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":83:9)
#loc82 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":89:9)
#loc83 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:13)
#loc84 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:52)
#loc85 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":86:13)
#loc86 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":86:35)
#loc87 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:30)
#loc88 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":85:48)
#loc89 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:37)
#loc90 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:54)
#loc91 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":87:19)
#loc92 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":88:35)
#loc93 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":88:13)
#loc94 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":93:1)
#loc95 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":97:1)
#loc96 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":95:5)
#loc97 = loc("CWE121_Stack_Based_Buffer_Overflow__CWE135_33.cpp":96:5)
#loc98 = loc(fused[#loc2, #loc3])
#loc99 = loc(fused[#loc4, #loc5])
#loc100 = loc(fused[#loc6, #loc7])
#loc101 = loc(fused[#loc8, #loc9])
#loc102 = loc(fused[#loc10, #loc11])
#loc103 = loc(fused[#loc12, #loc13])
#loc104 = loc(fused[#loc15, #loc14])
#loc105 = loc(fused[#loc16, #loc1])
#loc106 = loc(fused[#loc17, #loc18])
#loc107 = loc(fused[#loc19, #loc20])
#loc108 = loc(fused[#loc21, #loc22])
#loc109 = loc(fused[#loc23, #loc24])
#loc110 = loc(fused[#loc25, #loc26])
#loc111 = loc(fused[#loc35, #loc36])
#loc112 = loc(fused[#loc37, #loc38])
#loc113 = loc(fused[#loc39, #loc40])
#loc114 = loc(fused[#loc41, #loc42])
#loc115 = loc(fused[#loc44, #loc43])
#loc116 = loc(fused[#loc45, #loc34])
#loc117 = loc(fused[#loc46, #loc47])
#loc118 = loc(fused[#loc48, #loc49])
#loc119 = loc(fused[#loc50, #loc51])
#loc120 = loc(fused[#loc52, #loc53])
#loc121 = loc(fused[#loc54, #loc55])
#loc122 = loc(fused[#loc63, #loc64])
#loc123 = loc(fused[#loc65, #loc66])
#loc124 = loc(fused[#loc67, #loc68])
#loc125 = loc(fused[#loc69, #loc70])
#loc126 = loc(fused[#loc71, #loc72])
#loc127 = loc(fused[#loc74, #loc73])
#loc128 = loc(fused[#loc76, #loc75])
#loc129 = loc(fused[#loc77, #loc78])
#loc130 = loc(fused[#loc79, #loc80])
#loc131 = loc(fused[#loc81, #loc82])
#loc132 = loc(fused[#loc83, #loc84])
#loc133 = loc(fused[#loc85, #loc86])
#loc134 = loc(fused[#loc94, #loc95])
