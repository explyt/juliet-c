!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc5 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":24:57)
#loc6 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":24:61)
#loc17 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":38:61)
#loc18 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":38:65)
#loc32 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":48:61)
#loc33 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":48:65)
#loc51 = loc(fused[#loc5, #loc6])
#loc55 = loc(fused[#loc17, #loc18])
#loc60 = loc(fused[#loc32, #loc33])
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_53d.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @printIntLine(!s32i) loc(#loc49)
  cir.func  @CWE190_Integer_Overflow__int_fgets_add_53d_badSink(%arg0: !s32i loc(fused[#loc5, #loc6])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc51)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc7)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc53)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc11)
      %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc12)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc53)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc13)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc14)
    } loc(#loc52)
    cir.return loc(#loc4)
  } loc(#loc50)
  cir.func  @CWE190_Integer_Overflow__int_fgets_add_53d_goodG2BSink(%arg0: !s32i loc(fused[#loc17, #loc18])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc55)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc19)
    cir.scope {
      %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc57)
      %2 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
      %3 = cir.const #cir.int<1> : !s32i loc(#loc23)
      %4 = cir.binop(add, %2, %3) nsw : !s32i loc(#loc24)
      cir.store %4, %1 : !s32i, !cir.ptr<!s32i> loc(#loc57)
      %5 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc25)
      cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc26)
    } loc(#loc56)
    cir.return loc(#loc16)
  } loc(#loc54)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc58)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc29)
  cir.func  @CWE190_Integer_Overflow__int_fgets_add_53d_goodB2GSink(%arg0: !s32i loc(fused[#loc32, #loc33])) extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc60)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc34)
    cir.scope {
      %1 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc37)
      %2 = cir.const #cir.int<2147483647> : !s32i loc(#loc38)
      %3 = cir.cmp(lt, %1, %2) : !s32i, !s32i loc(#loc62)
      %4 = cir.cast(int_to_bool, %3 : !s32i), !cir.bool loc(#loc39)
      cir.if %4 {
        %5 = cir.alloca !s32i, !cir.ptr<!s32i>, ["result", init] {alignment = 4 : i64} loc(#loc64)
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc44)
        %8 = cir.binop(add, %6, %7) nsw : !s32i loc(#loc45)
        cir.store %8, %5 : !s32i, !cir.ptr<!s32i> loc(#loc64)
        %9 = cir.load %5 : !cir.ptr<!s32i>, !s32i loc(#loc46)
        cir.call @printIntLine(%9) : (!s32i) -> () loc(#loc47)
      } else {
        %5 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc29)
        %6 = cir.cast(array_to_ptrdecay, %5 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc29)
        cir.call @printLine(%6) : (!cir.ptr<!s8i>) -> () loc(#loc48)
      } loc(#loc63)
    } loc(#loc61)
    cir.return loc(#loc31)
  } loc(#loc59)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s02/CWE190_Integer_Overflow__int_fgets_add_53d.c":0:0)
#loc1 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc2 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc3 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":24:1)
#loc4 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":31:1)
#loc7 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":25:1)
#loc8 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":26:5)
#loc9 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":30:5)
#loc10 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":28:9)
#loc11 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":28:29)
#loc12 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":28:22)
#loc13 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":29:22)
#loc14 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":29:9)
#loc15 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":38:1)
#loc16 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":45:1)
#loc19 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":39:1)
#loc20 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":40:5)
#loc21 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":44:5)
#loc22 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":42:9)
#loc23 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":42:29)
#loc24 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":42:22)
#loc25 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":43:22)
#loc26 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":43:9)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc28 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc29 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":58:19)
#loc30 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":48:1)
#loc31 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":60:1)
#loc34 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":49:1)
#loc35 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":51:5)
#loc36 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":59:5)
#loc37 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":51:9)
#loc38 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":51:16)
#loc39 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":51:14)
#loc40 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":52:5)
#loc41 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":55:5)
#loc42 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":57:5)
#loc43 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":53:9)
#loc44 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":53:29)
#loc45 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":53:22)
#loc46 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":54:22)
#loc47 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":54:9)
#loc48 = loc("CWE190_Integer_Overflow__int_fgets_add_53d.c":58:9)
#loc49 = loc(fused[#loc1, #loc2])
#loc50 = loc(fused[#loc3, #loc4])
#loc52 = loc(fused[#loc8, #loc9])
#loc53 = loc(fused[#loc10, #loc11])
#loc54 = loc(fused[#loc15, #loc16])
#loc56 = loc(fused[#loc20, #loc21])
#loc57 = loc(fused[#loc22, #loc23])
#loc58 = loc(fused[#loc27, #loc28])
#loc59 = loc(fused[#loc30, #loc31])
#loc61 = loc(fused[#loc35, #loc36])
#loc62 = loc(fused[#loc37, #loc38])
#loc63 = loc(fused[#loc40, #loc41, #loc42, #loc36])
#loc64 = loc(fused[#loc43, #loc44])
