!s16i = !cir.int<s, 16>
!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_17.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc151)
  cir.func private  @printIntLine(!s32i) loc(#loc152)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_multiply_17_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc154)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc155)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc156)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc12)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc12)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc157)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc16)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc159)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc18)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc160)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
        cir.condition(%9) loc(#loc20)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc22)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc22)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc22)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            cir.yield %24 : !u32i loc(#loc22)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc22)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc22)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc22)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc22)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc22)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc22)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc22)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc22)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc22)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc22)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc22)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc22)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc22)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc22)
            cir.yield %28 : !u32i loc(#loc22)
          }) : (!cir.bool) -> !u32i loc(#loc22)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc22)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc22)
          cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc162)
        } loc(#loc161)
        cir.yield loc(#loc15)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc24)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc25)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc163)
        cir.yield loc(#loc158)
      } loc(#loc158)
    } loc(#loc158)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc28)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc165)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc30)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc31)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc166)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc32)
        cir.condition(%9) loc(#loc32)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc36)
            %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc36)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc37)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc169)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc38)
            cir.if %10 {
              %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc171)
              %12 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc42)
              %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc42)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc41)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc42)
              %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc42)
              cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc171)
              %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc43)
              %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc43)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc44)
            } loc(#loc170)
          } loc(#loc168)
        } loc(#loc167)
        cir.yield loc(#loc27)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc45)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc46)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc172)
        cir.yield loc(#loc164)
      } loc(#loc164)
    } loc(#loc164)
    cir.return loc(#loc6)
  } loc(#loc153)
  cir.func no_proto  @CWE190_Integer_Overflow__short_rand_multiply_17_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc174)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc49)
    %1 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc175)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc51)
    cir.return loc(#loc48)
  } loc(#loc173)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc176)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc55)
  cir.func no_proto internal private  @goodB2G() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["i"] {alignment = 4 : i64} loc(#loc178)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["k"] {alignment = 4 : i64} loc(#loc179)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc180)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc63)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc63)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc181)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc67)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc183)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc69)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc70)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc184)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc71)
        cir.condition(%9) loc(#loc71)
      } body {
        cir.scope {
          %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
          %7 = cir.const #cir.int<1> : !s32i loc(#loc73)
          %8 = cir.binop(and, %6, %7) : !s32i loc(#loc73)
          %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc73)
          %10 = cir.ternary(%9, true {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc73)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc73)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc73)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc73)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc73)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc73)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc73)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc73)
            cir.yield %24 : !u32i loc(#loc73)
          }, false {
            %13 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %14 = cir.cast(integral, %13 : !s32i), !u32i loc(#loc73)
            %15 = cir.const #cir.int<30> : !s32i loc(#loc73)
            %16 = cir.shift(left, %14 : !u32i, %15 : !s32i) -> !u32i loc(#loc73)
            %17 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %18 = cir.cast(integral, %17 : !s32i), !u32i loc(#loc73)
            %19 = cir.const #cir.int<15> : !s32i loc(#loc73)
            %20 = cir.shift(left, %18 : !u32i, %19 : !s32i) -> !u32i loc(#loc73)
            %21 = cir.binop(xor, %16, %20) : !u32i loc(#loc73)
            %22 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc73)
            %23 = cir.cast(integral, %22 : !s32i), !u32i loc(#loc73)
            %24 = cir.binop(xor, %21, %23) : !u32i loc(#loc73)
            %25 = cir.unary(minus, %24) : !u32i, !u32i loc(#loc73)
            %26 = cir.const #cir.int<1> : !s32i loc(#loc73)
            %27 = cir.cast(integral, %26 : !s32i), !u32i loc(#loc73)
            %28 = cir.binop(sub, %25, %27) : !u32i loc(#loc73)
            cir.yield %28 : !u32i loc(#loc73)
          }) : (!cir.bool) -> !u32i loc(#loc73)
          %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc73)
          %12 = cir.cast(integral, %11 : !s32i), !s16i loc(#loc73)
          cir.store %12, %2 : !s16i, !cir.ptr<!s16i> loc(#loc186)
        } loc(#loc185)
        cir.yield loc(#loc66)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc75)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc76)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.yield loc(#loc182)
      } loc(#loc182)
    } loc(#loc182)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc79)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc189)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc81)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc82)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc190)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc83)
        cir.condition(%9) loc(#loc83)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc87)
            %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc87)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc88)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc193)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc89)
            cir.if %10 {
              cir.scope {
                %11 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc93)
                %12 = cir.cast(integral, %11 : !s16i), !s32i loc(#loc93)
                %13 = cir.const #cir.int<32767> : !s32i loc(#loc94)
                %14 = cir.const #cir.int<2> : !s32i loc(#loc95)
                %15 = cir.binop(div, %13, %14) : !s32i loc(#loc196)
                %16 = cir.cmp(lt, %12, %15) : !s32i, !s32i loc(#loc197)
                %17 = cir.cast(int_to_bool, %16 : !s32i), !cir.bool loc(#loc97)
                cir.if %17 {
                  %18 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc199)
                  %19 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc103)
                  %20 = cir.cast(integral, %19 : !s16i), !s32i loc(#loc103)
                  %21 = cir.const #cir.int<2> : !s32i loc(#loc102)
                  %22 = cir.binop(mul, %20, %21) nsw : !s32i loc(#loc103)
                  %23 = cir.cast(integral, %22 : !s32i), !s16i loc(#loc103)
                  cir.store %23, %18 : !s16i, !cir.ptr<!s16i> loc(#loc199)
                  %24 = cir.load %18 : !cir.ptr<!s16i>, !s16i loc(#loc104)
                  %25 = cir.cast(integral, %24 : !s16i), !s32i loc(#loc104)
                  cir.call @printIntLine(%25) : (!s32i) -> () loc(#loc105)
                } else {
                  %18 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc55)
                  %19 = cir.cast(array_to_ptrdecay, %18 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc55)
                  cir.call @printLine(%19) : (!cir.ptr<!s8i>) -> () loc(#loc106)
                } loc(#loc198)
              } loc(#loc195)
            } loc(#loc194)
          } loc(#loc192)
        } loc(#loc191)
        cir.yield loc(#loc78)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc107)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc108)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc200)
        cir.yield loc(#loc188)
      } loc(#loc188)
    } loc(#loc188)
    cir.return loc(#loc57)
  } loc(#loc177)
  cir.func no_proto internal private  @goodG2B() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["h"] {alignment = 4 : i64} loc(#loc202)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["j"] {alignment = 4 : i64} loc(#loc203)
    %2 = cir.alloca !s16i, !cir.ptr<!s16i>, ["data"] {alignment = 2 : i64} loc(#loc204)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc116)
    %4 = cir.cast(integral, %3 : !s32i), !s16i loc(#loc116)
    cir.store %4, %2 : !s16i, !cir.ptr<!s16i> loc(#loc205)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc120)
      cir.store %5, %0 : !s32i, !cir.ptr<!s32i> loc(#loc207)
      cir.for : cond {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc122)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc123)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc208)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc124)
        cir.condition(%9) loc(#loc124)
      } body {
        cir.scope {
          %6 = cir.const #cir.int<2> : !s32i loc(#loc126)
          %7 = cir.cast(integral, %6 : !s32i), !s16i loc(#loc126)
          cir.store %7, %2 : !s16i, !cir.ptr<!s16i> loc(#loc210)
        } loc(#loc209)
        cir.yield loc(#loc119)
      } step {
        %6 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc128)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc129)
        cir.store %7, %0 : !s32i, !cir.ptr<!s32i> loc(#loc211)
        cir.yield loc(#loc206)
      } loc(#loc206)
    } loc(#loc206)
    cir.scope {
      %5 = cir.const #cir.int<0> : !s32i loc(#loc132)
      cir.store %5, %1 : !s32i, !cir.ptr<!s32i> loc(#loc213)
      cir.for : cond {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc134)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %8 = cir.cmp(lt, %6, %7) : !s32i, !s32i loc(#loc214)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc136)
        cir.condition(%9) loc(#loc136)
      } body {
        cir.scope {
          cir.scope {
            %6 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc140)
            %7 = cir.cast(integral, %6 : !s16i), !s32i loc(#loc140)
            %8 = cir.const #cir.int<0> : !s32i loc(#loc141)
            %9 = cir.cmp(gt, %7, %8) : !s32i, !s32i loc(#loc217)
            %10 = cir.cast(int_to_bool, %9 : !s32i), !cir.bool loc(#loc142)
            cir.if %10 {
              %11 = cir.alloca !s16i, !cir.ptr<!s16i>, ["result", init] {alignment = 2 : i64} loc(#loc219)
              %12 = cir.load %2 : !cir.ptr<!s16i>, !s16i loc(#loc146)
              %13 = cir.cast(integral, %12 : !s16i), !s32i loc(#loc146)
              %14 = cir.const #cir.int<2> : !s32i loc(#loc145)
              %15 = cir.binop(mul, %13, %14) nsw : !s32i loc(#loc146)
              %16 = cir.cast(integral, %15 : !s32i), !s16i loc(#loc146)
              cir.store %16, %11 : !s16i, !cir.ptr<!s16i> loc(#loc219)
              %17 = cir.load %11 : !cir.ptr<!s16i>, !s16i loc(#loc147)
              %18 = cir.cast(integral, %17 : !s16i), !s32i loc(#loc147)
              cir.call @printIntLine(%18) : (!s32i) -> () loc(#loc148)
            } loc(#loc218)
          } loc(#loc216)
        } loc(#loc215)
        cir.yield loc(#loc131)
      } step {
        %6 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc149)
        %7 = cir.unary(inc, %6) : !s32i, !s32i loc(#loc150)
        cir.store %7, %1 : !s32i, !cir.ptr<!s32i> loc(#loc220)
        cir.yield loc(#loc212)
      } loc(#loc212)
    } loc(#loc212)
    cir.return loc(#loc110)
  } loc(#loc201)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s04/CWE190_Integer_Overflow__short_rand_multiply_17.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":22:1)
#loc6 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":41:1)
#loc7 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":24:5)
#loc8 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":24:9)
#loc9 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":24:11)
#loc10 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":25:5)
#loc11 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":25:11)
#loc12 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":26:12)
#loc13 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":26:5)
#loc14 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:5)
#loc15 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":31:5)
#loc16 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:13)
#loc17 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:9)
#loc18 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:16)
#loc19 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:20)
#loc20 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:18)
#loc21 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":28:5)
#loc22 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":30:23)
#loc23 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":30:9)
#loc24 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:24)
#loc25 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":27:23)
#loc26 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:5)
#loc27 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":40:5)
#loc28 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:13)
#loc29 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:9)
#loc30 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:16)
#loc31 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:20)
#loc32 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:18)
#loc33 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":33:5)
#loc34 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":34:9)
#loc35 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":39:9)
#loc36 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":34:12)
#loc37 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":34:19)
#loc38 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":34:17)
#loc39 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":35:9)
#loc40 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":37:13)
#loc41 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":37:35)
#loc42 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":37:28)
#loc43 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":38:26)
#loc44 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":38:13)
#loc45 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:24)
#loc46 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":32:23)
#loc47 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":98:1)
#loc48 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":102:1)
#loc49 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":100:5)
#loc50 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":100:13)
#loc51 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":101:5)
#loc52 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":101:13)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc54 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc55 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":70:27)
#loc56 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":48:1)
#loc57 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":74:1)
#loc58 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":50:5)
#loc59 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":50:9)
#loc60 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":50:11)
#loc61 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":51:5)
#loc62 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":51:11)
#loc63 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":52:12)
#loc64 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":52:5)
#loc65 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:5)
#loc66 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":57:5)
#loc67 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:13)
#loc68 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:9)
#loc69 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:16)
#loc70 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:20)
#loc71 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:18)
#loc72 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":54:5)
#loc73 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":56:23)
#loc74 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":56:9)
#loc75 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:24)
#loc76 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":53:23)
#loc77 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:5)
#loc78 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":73:5)
#loc79 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:13)
#loc80 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:9)
#loc81 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:16)
#loc82 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:20)
#loc83 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:18)
#loc84 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":59:5)
#loc85 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":60:9)
#loc86 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":72:9)
#loc87 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":60:12)
#loc88 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":60:19)
#loc89 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":60:17)
#loc90 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":61:9)
#loc91 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:13)
#loc92 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":71:13)
#loc93 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:17)
#loc94 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:25)
#loc95 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:34)
#loc96 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:35)
#loc97 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":63:22)
#loc98 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":64:13)
#loc99 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":67:13)
#loc100 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":69:13)
#loc101 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":65:17)
#loc102 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":65:39)
#loc103 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":65:32)
#loc104 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":66:30)
#loc105 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":66:17)
#loc106 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":70:17)
#loc107 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:24)
#loc108 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":58:23)
#loc109 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":77:1)
#loc110 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":96:1)
#loc111 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":79:5)
#loc112 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":79:9)
#loc113 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":79:11)
#loc114 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":80:5)
#loc115 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":80:11)
#loc116 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":81:12)
#loc117 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":81:5)
#loc118 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:5)
#loc119 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":86:5)
#loc120 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:13)
#loc121 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:9)
#loc122 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:16)
#loc123 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:20)
#loc124 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:18)
#loc125 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":83:5)
#loc126 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":85:16)
#loc127 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":85:9)
#loc128 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:24)
#loc129 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":82:23)
#loc130 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:5)
#loc131 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":95:5)
#loc132 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:13)
#loc133 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:9)
#loc134 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:16)
#loc135 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:20)
#loc136 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:18)
#loc137 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":88:5)
#loc138 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":89:9)
#loc139 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":94:9)
#loc140 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":89:12)
#loc141 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":89:19)
#loc142 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":89:17)
#loc143 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":90:9)
#loc144 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":92:13)
#loc145 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":92:35)
#loc146 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":92:28)
#loc147 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":93:26)
#loc148 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":93:13)
#loc149 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:24)
#loc150 = loc("CWE190_Integer_Overflow__short_rand_multiply_17.c":87:23)
#loc151 = loc(fused[#loc1, #loc2])
#loc152 = loc(fused[#loc3, #loc4])
#loc153 = loc(fused[#loc5, #loc6])
#loc154 = loc(fused[#loc7, #loc8])
#loc155 = loc(fused[#loc7, #loc9])
#loc156 = loc(fused[#loc10, #loc11])
#loc157 = loc(fused[#loc13, #loc12])
#loc158 = loc(fused[#loc14, #loc15])
#loc159 = loc(fused[#loc17, #loc16])
#loc160 = loc(fused[#loc18, #loc19])
#loc161 = loc(fused[#loc21, #loc15])
#loc162 = loc(fused[#loc23, #loc22])
#loc163 = loc(fused[#loc25, #loc24])
#loc164 = loc(fused[#loc26, #loc27])
#loc165 = loc(fused[#loc29, #loc28])
#loc166 = loc(fused[#loc30, #loc31])
#loc167 = loc(fused[#loc33, #loc27])
#loc168 = loc(fused[#loc34, #loc35])
#loc169 = loc(fused[#loc36, #loc37])
#loc170 = loc(fused[#loc39, #loc35])
#loc171 = loc(fused[#loc40, #loc41])
#loc172 = loc(fused[#loc46, #loc45])
#loc173 = loc(fused[#loc47, #loc48])
#loc174 = loc(fused[#loc49, #loc50])
#loc175 = loc(fused[#loc51, #loc52])
#loc176 = loc(fused[#loc53, #loc54])
#loc177 = loc(fused[#loc56, #loc57])
#loc178 = loc(fused[#loc58, #loc59])
#loc179 = loc(fused[#loc58, #loc60])
#loc180 = loc(fused[#loc61, #loc62])
#loc181 = loc(fused[#loc64, #loc63])
#loc182 = loc(fused[#loc65, #loc66])
#loc183 = loc(fused[#loc68, #loc67])
#loc184 = loc(fused[#loc69, #loc70])
#loc185 = loc(fused[#loc72, #loc66])
#loc186 = loc(fused[#loc74, #loc73])
#loc187 = loc(fused[#loc76, #loc75])
#loc188 = loc(fused[#loc77, #loc78])
#loc189 = loc(fused[#loc80, #loc79])
#loc190 = loc(fused[#loc81, #loc82])
#loc191 = loc(fused[#loc84, #loc78])
#loc192 = loc(fused[#loc85, #loc86])
#loc193 = loc(fused[#loc87, #loc88])
#loc194 = loc(fused[#loc90, #loc86])
#loc195 = loc(fused[#loc91, #loc92])
#loc196 = loc(fused[#loc94, #loc95])
#loc197 = loc(fused[#loc93, #loc96])
#loc198 = loc(fused[#loc98, #loc99, #loc100, #loc92])
#loc199 = loc(fused[#loc101, #loc102])
#loc200 = loc(fused[#loc108, #loc107])
#loc201 = loc(fused[#loc109, #loc110])
#loc202 = loc(fused[#loc111, #loc112])
#loc203 = loc(fused[#loc111, #loc113])
#loc204 = loc(fused[#loc114, #loc115])
#loc205 = loc(fused[#loc117, #loc116])
#loc206 = loc(fused[#loc118, #loc119])
#loc207 = loc(fused[#loc121, #loc120])
#loc208 = loc(fused[#loc122, #loc123])
#loc209 = loc(fused[#loc125, #loc119])
#loc210 = loc(fused[#loc127, #loc126])
#loc211 = loc(fused[#loc129, #loc128])
#loc212 = loc(fused[#loc130, #loc131])
#loc213 = loc(fused[#loc133, #loc132])
#loc214 = loc(fused[#loc134, #loc135])
#loc215 = loc(fused[#loc137, #loc131])
#loc216 = loc(fused[#loc138, #loc139])
#loc217 = loc(fused[#loc140, #loc141])
#loc218 = loc(fused[#loc143, #loc139])
#loc219 = loc(fused[#loc144, #loc145])
#loc220 = loc(fused[#loc150, #loc149])
