!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone, uwtable = #cir.uwtable<async>})>
module @"/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_18.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", cir.type_size_info = #cir.type_size_info<char = 8, int = 32, size_t = 64>, cir.uwtable = #cir.uwtable<async>, dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f64 = dense<64> : vector<2xi64>, "dlti.mangling_mode" = "e", "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"shouldn't see this value\00" : !cir.array<!s8i x 25>> : !cir.array<!s8i x 25> {alignment = 1 : i64} loc(#loc1)
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc63)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"0\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc4)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"1\00" : !cir.array<!s8i x 2>> : !cir.array<!s8i x 2> {alignment = 1 : i64} loc(#loc5)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc64)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_18_bad() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc66)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc67)
    cir.goto "sink" loc(#loc68)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc15)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc1)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc1)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc66)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc16)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc17)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc69)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc70)
    cir.scope {
      %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc22)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<0> : !s32i]) {
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc4)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc4)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc72)
          cir.break loc(#loc25)
        } loc(#loc23)
        cir.case(equal, [#cir.int<1> : !s32i]) {
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc5)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc5)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc73)
          cir.break loc(#loc28)
        } loc(#loc26)
        cir.yield loc(#loc20)
      } loc(#loc20)
    } loc(#loc71)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc30)
    cir.return loc(#loc9)
  } loc(#loc65)
  cir.func no_proto @CWE478_Missing_Default_Case_in_Switch__basic_18_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<()>> loc(#loc75)
    cir.call %0() : (!cir.ptr<!cir.func<()>>) -> () loc(#loc33)
    cir.return loc(#loc32)
  } loc(#loc74)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["charString", init] {alignment = 8 : i64} loc(#loc77)
    %1 = cir.alloca !s32i, !cir.ptr<!s32i>, ["x"] {alignment = 4 : i64} loc(#loc78)
    cir.goto "sink" loc(#loc79)
  ^bb1:  // no predecessors
    cir.label "sink" loc(#loc43)
    %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 25>> loc(#loc38)
    %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 25>>), !cir.ptr<!s8i> loc(#loc38)
    cir.store %3, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc77)
    %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc44)
    %5 = cir.const #cir.int<3> : !s32i loc(#loc45)
    %6 = cir.binop(rem, %4, %5) : !s32i loc(#loc80)
    cir.store %6, %1 : !s32i, !cir.ptr<!s32i> loc(#loc81)
    cir.scope {
      %8 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc50)
      cir.switch (%8 : !s32i) {
        cir.case(equal, [#cir.int<0> : !s32i]) {
          %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc52)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc52)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc83)
          cir.break loc(#loc54)
        } loc(#loc51)
        cir.case(equal, [#cir.int<1> : !s32i]) {
          %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 2>> loc(#loc56)
          %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 2>>), !cir.ptr<!s8i> loc(#loc56)
          cir.store %10, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc84)
          cir.break loc(#loc58)
        } loc(#loc55)
        cir.case(default, []) {
          cir.return loc(#loc60)
        } loc(#loc59)
        cir.yield loc(#loc48)
      } loc(#loc48)
    } loc(#loc82)
    %7 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc61)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc62)
    cir.return loc(#loc36)
  } loc(#loc76)
} loc(#loc)
#loc = loc("/workspaces/juliet-c/testcases/CWE478_Missing_Default_Case_in_Switch/CWE478_Missing_Default_Case_in_Switch__basic_18.c":0:0)
#loc1 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":25:34)
#loc2 = loc("/usr/include/stdlib.h":573:1)
#loc3 = loc("/usr/include/stdlib.h":573:24)
#loc4 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":31:26)
#loc5 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":34:26)
#loc6 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc7 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc8 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":20:1)
#loc9 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":40:1)
#loc10 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":25:9)
#loc11 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":26:9)
#loc12 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":26:13)
#loc13 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":22:5)
#loc14 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":22:10)
#loc15 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":23:1)
#loc16 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":27:14)
#loc17 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":27:23)
#loc18 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":27:9)
#loc19 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":27:24)
#loc20 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":28:9)
#loc21 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":37:9)
#loc22 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":28:17)
#loc23 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":30:9)
#loc24 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":31:13)
#loc25 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":32:13)
#loc26 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":33:9)
#loc27 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":34:13)
#loc28 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":35:13)
#loc29 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":38:19)
#loc30 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":38:9)
#loc31 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":71:1)
#loc32 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":74:1)
#loc33 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":73:5)
#loc34 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":73:11)
#loc35 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":47:1)
#loc36 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":69:1)
#loc37 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":52:9)
#loc38 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":52:34)
#loc39 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":53:9)
#loc40 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":53:13)
#loc41 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":49:5)
#loc42 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":49:10)
#loc43 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":50:1)
#loc44 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":54:14)
#loc45 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":54:23)
#loc46 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":54:9)
#loc47 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":54:24)
#loc48 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":55:9)
#loc49 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":66:9)
#loc50 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":55:17)
#loc51 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":57:9)
#loc52 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":58:26)
#loc53 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":58:13)
#loc54 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":59:13)
#loc55 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":60:9)
#loc56 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":61:26)
#loc57 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":61:13)
#loc58 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":62:13)
#loc59 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":64:9)
#loc60 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":65:13)
#loc61 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":67:19)
#loc62 = loc("CWE478_Missing_Default_Case_in_Switch__basic_18.c":67:9)
#loc63 = loc(fused[#loc2, #loc3])
#loc64 = loc(fused[#loc6, #loc7])
#loc65 = loc(fused[#loc8, #loc9])
#loc66 = loc(fused[#loc10, #loc1])
#loc67 = loc(fused[#loc11, #loc12])
#loc68 = loc(fused[#loc13, #loc14])
#loc69 = loc(fused[#loc16, #loc17])
#loc70 = loc(fused[#loc18, #loc19])
#loc71 = loc(fused[#loc20, #loc21])
#loc72 = loc(fused[#loc24, #loc4])
#loc73 = loc(fused[#loc27, #loc5])
#loc74 = loc(fused[#loc31, #loc32])
#loc75 = loc(fused[#loc33, #loc34])
#loc76 = loc(fused[#loc35, #loc36])
#loc77 = loc(fused[#loc37, #loc38])
#loc78 = loc(fused[#loc39, #loc40])
#loc79 = loc(fused[#loc41, #loc42])
#loc80 = loc(fused[#loc44, #loc45])
#loc81 = loc(fused[#loc46, #loc47])
#loc82 = loc(fused[#loc48, #loc49])
#loc83 = loc(fused[#loc53, #loc52])
#loc84 = loc(fused[#loc57, #loc56])
