!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr2 = #cir<extra({inline = #cir.inline<no>, optnone = #cir.optnone})>
#loc7 = loc("../../../testcasesupport/std_testcase.h":61:7)
#loc76 = loc("../../../testcasesupport/std_testcase.h":68:7)
!ty_OneIntClass = !cir.struct<class "OneIntClass" {!s32i} #cir.record.decl.ast>
!ty_TwoIntsClass = !cir.struct<class "TwoIntsClass" {!s32i, !s32i} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp" attributes {cir.lang = #cir.lang<cxx>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @malloc(!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc315)
  cir.func private  @exit(!s32i) extra(#fn_attr) loc(#loc316)
  cir.func private  @globalReturnsTrue() -> !s32i loc(#loc317)
  cir.func linkonce_odr  @_ZN12TwoIntsClassC2Ev(%arg0: !cir.ptr<!ty_TwoIntsClass> loc("../../../testcasesupport/std_testcase.h":61:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["this", init] {alignment = 8 : i64} loc(#loc7)
    cir.store %arg0, %0 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc7)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc7)
    cir.return loc(#loc7)
  } loc(#loc7)
  cir.func private  @printIntLine(!s32i) loc(#loc318)
  cir.func private  @free(!cir.ptr<!void>) extra(#fn_attr) loc(#loc319)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_113badEv() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc321)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc322)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc323)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc20)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc324)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc20)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc325)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc322)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc25)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc26)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc327)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc28)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc29)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc30)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc28)
      } loc(#loc328)
    } loc(#loc326)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc31)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc329)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc31)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc330)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc323)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc36)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc37)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc332)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc39)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc40)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc41)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc39)
      } loc(#loc333)
    } loc(#loc331)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc44)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc335)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc47)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc337)
      } loc(#loc336)
    } loc(#loc334)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc51)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc339)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc342)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc343)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc59)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc59)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc343)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc57)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc342)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc60)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc61)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc344)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc63)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc64)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc345)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc66)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc67)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc68)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc69)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc70)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc70)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc69)
        } loc(#loc341)
      } loc(#loc340)
    } loc(#loc338)
    cir.return loc(#loc13)
  } loc(#loc320)
  cir.func private  @globalReturnsFalse() -> !s32i loc(#loc346)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc347)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc75)
  cir.func linkonce_odr  @_ZN11OneIntClassC2Ev(%arg0: !cir.ptr<!ty_OneIntClass> loc("../../../testcasesupport/std_testcase.h":68:7)) extra(#fn_attr1) {
    %0 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["this", init] {alignment = 8 : i64} loc(#loc76)
    cir.store %arg0, %0 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc76)
    %1 = cir.load %0 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc76)
    cir.return loc(#loc76)
  } loc(#loc76)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc349)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc350)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc351)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc85)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc352)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc85)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc353)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc350)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc90)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc91)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc355)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc93)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc95)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc93)
      } loc(#loc356)
    } loc(#loc354)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc96)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc357)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc96)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc358)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc351)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc101)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc102)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc360)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc104)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc105)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc106)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc104)
      } loc(#loc361)
    } loc(#loc359)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc109)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc363)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc112)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc365)
      } loc(#loc364)
    } loc(#loc362)
    cir.scope {
      %11 = cir.call @globalReturnsFalse() : () -> !s32i loc(#loc116)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc367)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc121)
      } else {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc370)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc371)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc127)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc127)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc371)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc125)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc370)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc128)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc129)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc130)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc372)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc131)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc130)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc132)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc133)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc134)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc135)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc135)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc134)
        } loc(#loc369)
      } loc(#loc368)
    } loc(#loc366)
    cir.return loc(#loc78)
  } loc(#loc348)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc374)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc375)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc376)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc144)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc377)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc144)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc378)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc375)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc149)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc150)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc380)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc152)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc153)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc154)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc152)
      } loc(#loc381)
    } loc(#loc379)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc155)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc382)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc155)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc383)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc376)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc160)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc161)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc385)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc163)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc164)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc165)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc163)
      } loc(#loc386)
    } loc(#loc384)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc168)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc388)
      cir.if %12 {
        %13 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc171)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc390)
      } loc(#loc389)
    } loc(#loc387)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc175)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc392)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>>, ["classOne", init] {alignment = 8 : i64} loc(#loc395)
          %14 = cir.const #cir.int<4> : !u64i loc(#loc396)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc183)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc183)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_OneIntClass> loc(#loc396)
          cir.call @_ZN11OneIntClassC2Ev(%17) : (!cir.ptr<!ty_OneIntClass>) -> () extra(#fn_attr) loc(#loc181)
          cir.store %17, %13 : !cir.ptr<!ty_OneIntClass>, !cir.ptr<!cir.ptr<!ty_OneIntClass>> loc(#loc395)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc184)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc185)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc130)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc397)
          %21 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_OneIntClass>>, !cir.ptr<!ty_OneIntClass> loc(#loc186)
          %22 = cir.get_member %21[0] {name = "intOne"} : !cir.ptr<!ty_OneIntClass> -> !cir.ptr<!s32i> loc(#loc130)
          %23 = cir.load %22 : !cir.ptr<!s32i>, !s32i loc(#loc187)
          cir.call @printIntLine(%23) : (!s32i) -> () loc(#loc188)
          %24 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc189)
          %25 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc190)
          %26 = cir.cast(bitcast, %25 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc190)
          cir.call @free(%26) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc189)
        } loc(#loc394)
      } loc(#loc393)
    } loc(#loc391)
    cir.return loc(#loc137)
  } loc(#loc373)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B1Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc399)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc400)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc401)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc199)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc402)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc199)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc403)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc400)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc204)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc205)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc405)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc207)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc208)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc209)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc207)
      } loc(#loc406)
    } loc(#loc404)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc210)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc407)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc210)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc408)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc401)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc215)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc216)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc410)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc218)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc219)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc220)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc218)
      } loc(#loc411)
    } loc(#loc409)
    cir.scope {
      %11 = cir.call @globalReturnsFalse() : () -> !s32i loc(#loc223)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc413)
      cir.if %12 {
        %13 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc228)
        %14 = cir.cast(array_to_ptrdecay, %13 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc228)
        cir.call @printLine(%14) : (!cir.ptr<!s8i>) -> () loc(#loc229)
      } else {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc230)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc415)
      } loc(#loc414)
    } loc(#loc412)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc234)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc417)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc420)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc421)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc242)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc242)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc421)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc240)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc420)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc243)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc244)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc422)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc245)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc246)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc423)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc247)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc248)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc249)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc250)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc251)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc251)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc250)
        } loc(#loc419)
      } loc(#loc418)
    } loc(#loc416)
    cir.return loc(#loc192)
  } loc(#loc398)
  cir.func internal private  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B2Ev() extra(#fn_attr2) {
    %0 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["data"] {alignment = 8 : i64} loc(#loc425)
    %1 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataBadBuffer", init] {alignment = 8 : i64} loc(#loc426)
    %2 = cir.alloca !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>>, ["dataGoodBuffer", init] {alignment = 8 : i64} loc(#loc427)
    %3 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc260)
    %4 = cir.const #cir.int<4> : !u64i loc(#loc428)
    %5 = cir.call @malloc(%4) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc260)
    %6 = cir.cast(bitcast, %5 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc429)
    cir.store %6, %1 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc426)
    cir.scope {
      %11 = cir.load %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc265)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc266)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc431)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc268)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc269)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc270)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc268)
      } loc(#loc432)
    } loc(#loc430)
    %7 = cir.get_global @malloc : !cir.ptr<!cir.func<!cir.ptr<!void> (!u64i)>> loc(#loc271)
    %8 = cir.const #cir.int<8> : !u64i loc(#loc433)
    %9 = cir.call @malloc(%8) : (!u64i) -> !cir.ptr<!void> extra(#fn_attr) loc(#loc271)
    %10 = cir.cast(bitcast, %9 : !cir.ptr<!void>), !cir.ptr<!s8i> loc(#loc434)
    cir.store %10, %2 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc427)
    cir.scope {
      %11 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc276)
      %12 = cir.const #cir.ptr<null> : !cir.ptr<!s8i> loc(#loc277)
      %13 = cir.cmp(eq, %11, %12) : !cir.ptr<!s8i>, !cir.bool loc(#loc436)
      cir.if %13 {
        %14 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc279)
        %15 = cir.const #cir.int<1> : !s32i loc(#loc280)
        %16 = cir.unary(minus, %15) : !s32i, !s32i loc(#loc281)
        cir.call @exit(%16) : (!s32i) -> () extra(#fn_attr) loc(#loc279)
      } loc(#loc437)
    } loc(#loc435)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc284)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc439)
      cir.if %12 {
        %13 = cir.load %2 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc287)
        cir.store %13, %0 : !cir.ptr<!s8i>, !cir.ptr<!cir.ptr<!s8i>> loc(#loc441)
      } loc(#loc440)
    } loc(#loc438)
    cir.scope {
      %11 = cir.call @globalReturnsTrue() : () -> !s32i loc(#loc291)
      %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc443)
      cir.if %12 {
        cir.scope {
          %13 = cir.alloca !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, ["classTwo", init] {alignment = 8 : i64} loc(#loc446)
          %14 = cir.const #cir.int<8> : !u64i loc(#loc447)
          %15 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc299)
          %16 = cir.cast(bitcast, %15 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc299)
          %17 = cir.cast(bitcast, %16 : !cir.ptr<!void>), !cir.ptr<!ty_TwoIntsClass> loc(#loc447)
          cir.call @_ZN12TwoIntsClassC2Ev(%17) : (!cir.ptr<!ty_TwoIntsClass>) -> () extra(#fn_attr) loc(#loc297)
          cir.store %17, %13 : !cir.ptr<!ty_TwoIntsClass>, !cir.ptr<!cir.ptr<!ty_TwoIntsClass>> loc(#loc446)
          %18 = cir.const #cir.int<5> : !s32i loc(#loc300)
          %19 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc301)
          %20 = cir.get_member %19[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          cir.store %18, %20 : !s32i, !cir.ptr<!s32i> loc(#loc448)
          %21 = cir.const #cir.int<10> : !s32i loc(#loc302)
          %22 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc303)
          %23 = cir.get_member %22[1] {name = "intTwo"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc65)
          cir.store %21, %23 : !s32i, !cir.ptr<!s32i> loc(#loc449)
          %24 = cir.load %13 : !cir.ptr<!cir.ptr<!ty_TwoIntsClass>>, !cir.ptr<!ty_TwoIntsClass> loc(#loc304)
          %25 = cir.get_member %24[0] {name = "intOne"} : !cir.ptr<!ty_TwoIntsClass> -> !cir.ptr<!s32i> loc(#loc62)
          %26 = cir.load %25 : !cir.ptr<!s32i>, !s32i loc(#loc305)
          cir.call @printIntLine(%26) : (!s32i) -> () loc(#loc306)
          %27 = cir.get_global @free : !cir.ptr<!cir.func<!void (!cir.ptr<!void>)>> loc(#loc307)
          %28 = cir.load %0 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!s8i> loc(#loc308)
          %29 = cir.cast(bitcast, %28 : !cir.ptr<!s8i>), !cir.ptr<!void> loc(#loc308)
          cir.call @free(%29) : (!cir.ptr<!void>) -> () extra(#fn_attr) loc(#loc307)
        } loc(#loc445)
      } loc(#loc444)
    } loc(#loc442)
    cir.return loc(#loc253)
  } loc(#loc424)
  cir.func  @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_114goodEv() extra(#fn_attr2) {
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G1Ev() : () -> () loc(#loc311)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodB2G2Ev() : () -> () loc(#loc312)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B1Ev() : () -> () loc(#loc313)
    cir.call @_ZN51CWE122_Heap_Based_Buffer_Overflow__placement_new_11L8goodG2B2Ev() : () -> () loc(#loc314)
    cir.return loc(#loc310)
  } loc(#loc450)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE122_Heap_Based_Buffer_Overflow/s11/CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":0:0)
#loc1 = loc("/usr/include/stdlib.h":672:1)
#loc2 = loc("/usr/include/stdlib.h":672:45)
#loc3 = loc("/usr/include/stdlib.h":756:1)
#loc4 = loc("/usr/include/stdlib.h":756:70)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":48:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":48:23)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc9 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc10 = loc("/usr/include/stdlib.h":687:1)
#loc11 = loc("/usr/include/stdlib.h":687:32)
#loc12 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":24:1)
#loc13 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":53:1)
#loc14 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":26:5)
#loc15 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":26:12)
#loc16 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:5)
#loc17 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:62)
#loc18 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:5)
#loc19 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:64)
#loc20 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:36)
#loc21 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:43)
#loc22 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":27:61)
#loc23 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:5)
#loc24 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:42)
#loc25 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:9)
#loc26 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:26)
#loc27 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:32)
#loc28 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:33)
#loc29 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:39)
#loc30 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":28:38)
#loc31 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:37)
#loc32 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:44)
#loc33 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":29:63)
#loc34 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:5)
#loc35 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:43)
#loc36 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:9)
#loc37 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:27)
#loc38 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:33)
#loc39 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:34)
#loc40 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:40)
#loc41 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":30:39)
#loc42 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:5)
#loc43 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":35:5)
#loc44 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:8)
#loc45 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":31:26)
#loc46 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":32:5)
#loc47 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":34:16)
#loc48 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":34:9)
#loc49 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:5)
#loc50 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":52:5)
#loc51 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:8)
#loc52 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":36:26)
#loc53 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":37:5)
#loc54 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":38:9)
#loc55 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":51:9)
#loc56 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:13)
#loc57 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:49)
#loc58 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:39)
#loc59 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":44:43)
#loc60 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":46:32)
#loc61 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":46:13)
#loc62 = loc("../../../testcasesupport/std_testcase.h":64:13)
#loc63 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":47:32)
#loc64 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":47:13)
#loc65 = loc("../../../testcasesupport/std_testcase.h":65:13)
#loc66 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:26)
#loc67 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:36)
#loc68 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":48:13)
#loc69 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":50:13)
#loc70 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":50:18)
#loc71 = loc("../../../testcasesupport/std_testcase_io.h":50:1)
#loc72 = loc("../../../testcasesupport/std_testcase_io.h":50:24)
#loc73 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc74 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc75 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":75:19)
#loc77 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":60:1)
#loc78 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":92:1)
#loc79 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":62:5)
#loc80 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":62:12)
#loc81 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:5)
#loc82 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:62)
#loc83 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:5)
#loc84 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:64)
#loc85 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:36)
#loc86 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:43)
#loc87 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":63:61)
#loc88 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:5)
#loc89 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:42)
#loc90 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:9)
#loc91 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:26)
#loc92 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:32)
#loc93 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:33)
#loc94 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:39)
#loc95 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":64:38)
#loc96 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:37)
#loc97 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:44)
#loc98 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":65:63)
#loc99 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:5)
#loc100 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:43)
#loc101 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:9)
#loc102 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:27)
#loc103 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:33)
#loc104 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:34)
#loc105 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:40)
#loc106 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":66:39)
#loc107 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:5)
#loc108 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":71:5)
#loc109 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:8)
#loc110 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":67:26)
#loc111 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":68:5)
#loc112 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":70:16)
#loc113 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":70:9)
#loc114 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:5)
#loc115 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":91:5)
#loc116 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:8)
#loc117 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":72:27)
#loc118 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":73:5)
#loc119 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":76:5)
#loc120 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":78:5)
#loc121 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":75:9)
#loc122 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":79:9)
#loc123 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":90:9)
#loc124 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:13)
#loc125 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:48)
#loc126 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:38)
#loc127 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":85:42)
#loc128 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":87:32)
#loc129 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":87:13)
#loc130 = loc("../../../testcasesupport/std_testcase.h":71:13)
#loc131 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:26)
#loc132 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:36)
#loc133 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":88:13)
#loc134 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":89:13)
#loc135 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":89:18)
#loc136 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":95:1)
#loc137 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":122:1)
#loc138 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":97:5)
#loc139 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":97:12)
#loc140 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:5)
#loc141 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:62)
#loc142 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:5)
#loc143 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:64)
#loc144 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:36)
#loc145 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:43)
#loc146 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":98:61)
#loc147 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:5)
#loc148 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:42)
#loc149 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:9)
#loc150 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:26)
#loc151 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:32)
#loc152 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:33)
#loc153 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:39)
#loc154 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":99:38)
#loc155 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:37)
#loc156 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:44)
#loc157 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":100:63)
#loc158 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:5)
#loc159 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:43)
#loc160 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:9)
#loc161 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:27)
#loc162 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:33)
#loc163 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:34)
#loc164 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:40)
#loc165 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":101:39)
#loc166 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:5)
#loc167 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":106:5)
#loc168 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:8)
#loc169 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":102:26)
#loc170 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":103:5)
#loc171 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":105:16)
#loc172 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":105:9)
#loc173 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:5)
#loc174 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":121:5)
#loc175 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:8)
#loc176 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":107:26)
#loc177 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":108:5)
#loc178 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":109:9)
#loc179 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":120:9)
#loc180 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:13)
#loc181 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:48)
#loc182 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:38)
#loc183 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":115:42)
#loc184 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":117:32)
#loc185 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":117:13)
#loc186 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:26)
#loc187 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:36)
#loc188 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":118:13)
#loc189 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":119:13)
#loc190 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":119:18)
#loc191 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":125:1)
#loc192 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":159:1)
#loc193 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":127:5)
#loc194 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":127:12)
#loc195 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:5)
#loc196 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:62)
#loc197 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:5)
#loc198 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:64)
#loc199 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:36)
#loc200 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:43)
#loc201 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":128:61)
#loc202 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:5)
#loc203 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:42)
#loc204 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:9)
#loc205 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:26)
#loc206 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:32)
#loc207 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:33)
#loc208 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:39)
#loc209 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":129:38)
#loc210 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:37)
#loc211 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:44)
#loc212 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":130:63)
#loc213 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:5)
#loc214 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:43)
#loc215 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:9)
#loc216 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:27)
#loc217 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:33)
#loc218 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:34)
#loc219 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:40)
#loc220 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":131:39)
#loc221 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:5)
#loc222 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":141:5)
#loc223 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:8)
#loc224 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":132:27)
#loc225 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":133:5)
#loc226 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":136:5)
#loc227 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":138:5)
#loc228 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":135:19)
#loc229 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":135:9)
#loc230 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":140:16)
#loc231 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":140:9)
#loc232 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:5)
#loc233 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":158:5)
#loc234 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:8)
#loc235 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":142:26)
#loc236 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":143:5)
#loc237 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":144:9)
#loc238 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":157:9)
#loc239 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:13)
#loc240 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:49)
#loc241 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:39)
#loc242 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":150:43)
#loc243 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":152:32)
#loc244 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":152:13)
#loc245 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":153:32)
#loc246 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":153:13)
#loc247 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:26)
#loc248 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:36)
#loc249 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":154:13)
#loc250 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":156:13)
#loc251 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":156:18)
#loc252 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":162:1)
#loc253 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":191:1)
#loc254 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":164:5)
#loc255 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":164:12)
#loc256 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:5)
#loc257 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:62)
#loc258 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:5)
#loc259 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:64)
#loc260 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:36)
#loc261 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:43)
#loc262 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":165:61)
#loc263 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:5)
#loc264 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:42)
#loc265 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:9)
#loc266 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:26)
#loc267 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:32)
#loc268 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:33)
#loc269 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:39)
#loc270 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":166:38)
#loc271 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:37)
#loc272 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:44)
#loc273 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":167:63)
#loc274 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:5)
#loc275 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:43)
#loc276 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:9)
#loc277 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:27)
#loc278 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:33)
#loc279 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:34)
#loc280 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:40)
#loc281 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":168:39)
#loc282 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:5)
#loc283 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":173:5)
#loc284 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:8)
#loc285 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":169:26)
#loc286 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":170:5)
#loc287 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":172:16)
#loc288 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":172:9)
#loc289 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:5)
#loc290 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":190:5)
#loc291 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:8)
#loc292 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":174:26)
#loc293 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":175:5)
#loc294 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":176:9)
#loc295 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":189:9)
#loc296 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:13)
#loc297 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:49)
#loc298 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:39)
#loc299 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":182:43)
#loc300 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":184:32)
#loc301 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":184:13)
#loc302 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":185:32)
#loc303 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":185:13)
#loc304 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:26)
#loc305 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:36)
#loc306 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":186:13)
#loc307 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":188:13)
#loc308 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":188:18)
#loc309 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":193:1)
#loc310 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":199:1)
#loc311 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":195:5)
#loc312 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":196:5)
#loc313 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":197:5)
#loc314 = loc("CWE122_Heap_Based_Buffer_Overflow__placement_new_11.cpp":198:5)
#loc315 = loc(fused[#loc1, #loc2])
#loc316 = loc(fused[#loc3, #loc4])
#loc317 = loc(fused[#loc5, #loc6])
#loc318 = loc(fused[#loc8, #loc9])
#loc319 = loc(fused[#loc10, #loc11])
#loc320 = loc(fused[#loc12, #loc13])
#loc321 = loc(fused[#loc14, #loc15])
#loc322 = loc(fused[#loc16, #loc17])
#loc323 = loc(fused[#loc18, #loc19])
#loc324 = loc(fused[#loc21, #loc22])
#loc325 = loc(fused[#loc20, #loc17])
#loc326 = loc(fused[#loc23, #loc24])
#loc327 = loc(fused[#loc25, #loc26])
#loc328 = loc(fused[#loc27, #loc24])
#loc329 = loc(fused[#loc32, #loc33])
#loc330 = loc(fused[#loc31, #loc19])
#loc331 = loc(fused[#loc34, #loc35])
#loc332 = loc(fused[#loc36, #loc37])
#loc333 = loc(fused[#loc38, #loc35])
#loc334 = loc(fused[#loc42, #loc43])
#loc335 = loc(fused[#loc44, #loc45])
#loc336 = loc(fused[#loc46, #loc43])
#loc337 = loc(fused[#loc48, #loc47])
#loc338 = loc(fused[#loc49, #loc50])
#loc339 = loc(fused[#loc51, #loc52])
#loc340 = loc(fused[#loc53, #loc50])
#loc341 = loc(fused[#loc54, #loc55])
#loc342 = loc(fused[#loc56, #loc57])
#loc343 = loc(fused[#loc58, #loc57])
#loc344 = loc(fused[#loc61, #loc60])
#loc345 = loc(fused[#loc64, #loc63])
#loc346 = loc(fused[#loc71, #loc72])
#loc347 = loc(fused[#loc73, #loc74])
#loc348 = loc(fused[#loc77, #loc78])
#loc349 = loc(fused[#loc79, #loc80])
#loc350 = loc(fused[#loc81, #loc82])
#loc351 = loc(fused[#loc83, #loc84])
#loc352 = loc(fused[#loc86, #loc87])
#loc353 = loc(fused[#loc85, #loc82])
#loc354 = loc(fused[#loc88, #loc89])
#loc355 = loc(fused[#loc90, #loc91])
#loc356 = loc(fused[#loc92, #loc89])
#loc357 = loc(fused[#loc97, #loc98])
#loc358 = loc(fused[#loc96, #loc84])
#loc359 = loc(fused[#loc99, #loc100])
#loc360 = loc(fused[#loc101, #loc102])
#loc361 = loc(fused[#loc103, #loc100])
#loc362 = loc(fused[#loc107, #loc108])
#loc363 = loc(fused[#loc109, #loc110])
#loc364 = loc(fused[#loc111, #loc108])
#loc365 = loc(fused[#loc113, #loc112])
#loc366 = loc(fused[#loc114, #loc115])
#loc367 = loc(fused[#loc116, #loc117])
#loc368 = loc(fused[#loc118, #loc119, #loc120, #loc115])
#loc369 = loc(fused[#loc122, #loc123])
#loc370 = loc(fused[#loc124, #loc125])
#loc371 = loc(fused[#loc126, #loc125])
#loc372 = loc(fused[#loc129, #loc128])
#loc373 = loc(fused[#loc136, #loc137])
#loc374 = loc(fused[#loc138, #loc139])
#loc375 = loc(fused[#loc140, #loc141])
#loc376 = loc(fused[#loc142, #loc143])
#loc377 = loc(fused[#loc145, #loc146])
#loc378 = loc(fused[#loc144, #loc141])
#loc379 = loc(fused[#loc147, #loc148])
#loc380 = loc(fused[#loc149, #loc150])
#loc381 = loc(fused[#loc151, #loc148])
#loc382 = loc(fused[#loc156, #loc157])
#loc383 = loc(fused[#loc155, #loc143])
#loc384 = loc(fused[#loc158, #loc159])
#loc385 = loc(fused[#loc160, #loc161])
#loc386 = loc(fused[#loc162, #loc159])
#loc387 = loc(fused[#loc166, #loc167])
#loc388 = loc(fused[#loc168, #loc169])
#loc389 = loc(fused[#loc170, #loc167])
#loc390 = loc(fused[#loc172, #loc171])
#loc391 = loc(fused[#loc173, #loc174])
#loc392 = loc(fused[#loc175, #loc176])
#loc393 = loc(fused[#loc177, #loc174])
#loc394 = loc(fused[#loc178, #loc179])
#loc395 = loc(fused[#loc180, #loc181])
#loc396 = loc(fused[#loc182, #loc181])
#loc397 = loc(fused[#loc185, #loc184])
#loc398 = loc(fused[#loc191, #loc192])
#loc399 = loc(fused[#loc193, #loc194])
#loc400 = loc(fused[#loc195, #loc196])
#loc401 = loc(fused[#loc197, #loc198])
#loc402 = loc(fused[#loc200, #loc201])
#loc403 = loc(fused[#loc199, #loc196])
#loc404 = loc(fused[#loc202, #loc203])
#loc405 = loc(fused[#loc204, #loc205])
#loc406 = loc(fused[#loc206, #loc203])
#loc407 = loc(fused[#loc211, #loc212])
#loc408 = loc(fused[#loc210, #loc198])
#loc409 = loc(fused[#loc213, #loc214])
#loc410 = loc(fused[#loc215, #loc216])
#loc411 = loc(fused[#loc217, #loc214])
#loc412 = loc(fused[#loc221, #loc222])
#loc413 = loc(fused[#loc223, #loc224])
#loc414 = loc(fused[#loc225, #loc226, #loc227, #loc222])
#loc415 = loc(fused[#loc231, #loc230])
#loc416 = loc(fused[#loc232, #loc233])
#loc417 = loc(fused[#loc234, #loc235])
#loc418 = loc(fused[#loc236, #loc233])
#loc419 = loc(fused[#loc237, #loc238])
#loc420 = loc(fused[#loc239, #loc240])
#loc421 = loc(fused[#loc241, #loc240])
#loc422 = loc(fused[#loc244, #loc243])
#loc423 = loc(fused[#loc246, #loc245])
#loc424 = loc(fused[#loc252, #loc253])
#loc425 = loc(fused[#loc254, #loc255])
#loc426 = loc(fused[#loc256, #loc257])
#loc427 = loc(fused[#loc258, #loc259])
#loc428 = loc(fused[#loc261, #loc262])
#loc429 = loc(fused[#loc260, #loc257])
#loc430 = loc(fused[#loc263, #loc264])
#loc431 = loc(fused[#loc265, #loc266])
#loc432 = loc(fused[#loc267, #loc264])
#loc433 = loc(fused[#loc272, #loc273])
#loc434 = loc(fused[#loc271, #loc259])
#loc435 = loc(fused[#loc274, #loc275])
#loc436 = loc(fused[#loc276, #loc277])
#loc437 = loc(fused[#loc278, #loc275])
#loc438 = loc(fused[#loc282, #loc283])
#loc439 = loc(fused[#loc284, #loc285])
#loc440 = loc(fused[#loc286, #loc283])
#loc441 = loc(fused[#loc288, #loc287])
#loc442 = loc(fused[#loc289, #loc290])
#loc443 = loc(fused[#loc291, #loc292])
#loc444 = loc(fused[#loc293, #loc290])
#loc445 = loc(fused[#loc294, #loc295])
#loc446 = loc(fused[#loc296, #loc297])
#loc447 = loc(fused[#loc298, #loc297])
#loc448 = loc(fused[#loc301, #loc300])
#loc449 = loc(fused[#loc303, #loc302])
#loc450 = loc(fused[#loc309, #loc310])
