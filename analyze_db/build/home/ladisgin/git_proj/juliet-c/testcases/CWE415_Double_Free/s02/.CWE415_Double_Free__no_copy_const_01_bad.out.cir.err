clang: warning: argument unused during compilation: '-c' [-Wunused-command-line-argument]
clang: /home/ladisgin/git_proj/clangir/clang/lib/CIR/CodeGen/CIRGenException.cpp:291: mlir::Block* clang::CIRGen::CIRGenFunction::getEHResumeBlock(bool, cir::TryOp): Assertion `tryOp && "expected available cir.try"' failed.
PLEASE submit a bug report to https://github.com/llvm/llvm-project/issues/ and include the crash backtrace, preprocessed source, and associated run script.
Stack dump:
0.	Program arguments: /home/ladisgin/git_proj/clangir/build/bin/clang -S -Xclang -emit-cir -std=c++11 -I ../../../testcasesupport -DINCLUDEMAIN -c CWE415_Double_Free__no_copy_const_01_bad.cpp -o /home/ladisgin/git_proj/juliet-c/testcases/CWE415_Double_Free/s02/.CWE415_Double_Free__no_copy_const_01_bad.out.cir
1.	CWE415_Double_Free__no_copy_const_01_bad.cpp:76:1: current parser token 'using'
2.	CWE415_Double_Free__no_copy_const_01_bad.cpp:8:11: LLVM IR generation of declaration 'CWE415_Double_Free__no_copy_const_01'
Stack dump without symbol names (ensure you have llvm-symbolizer in your PATH or set the environment var `LLVM_SYMBOLIZER_PATH` to point to it):
0  clang     0x0000000001aaf03b llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) + 43
1  clang     0x0000000001aac584 llvm::sys::CleanupOnSignal(unsigned long) + 132
2  clang     0x00000000019f5e10
3  libc.so.6 0x00007f89daa25dd0
4  libc.so.6 0x00007f89daa7ec94
5  libc.so.6 0x00007f89daa25d1e gsignal + 30
6  libc.so.6 0x00007f89daa0d942 abort + 223
7  libc.so.6 0x00007f89daa0d85e
8  libc.so.6 0x00007f89daa1de47
9  clang     0x000000000322aa9e clang::CIRGen::CIRGenFunction::getEHResumeBlock(bool, cir::TryOp) + 286
10 clang     0x0000000003217f82 clang::CIRGen::CIRGenFunction::PopCleanupBlock(bool) + 962
11 clang     0x00000000032198dd clang::CIRGen::CIRGenFunction::PopCleanupBlocks(clang::CIRGen::EHScopeStack::stable_iterator, std::initializer_list<mlir::Value*>) + 93
12 clang     0x0000000003219982 clang::CIRGen::CIRGenFunction::PopCleanupBlocks(clang::CIRGen::EHScopeStack::stable_iterator, unsigned long, std::initializer_list<mlir::Value*>) + 34
13 clang     0x000000000329d5d4 clang::CIRGen::CIRGenFunction::LexicalScope::cleanup() + 948
14 clang     0x00000000032a623b clang::CIRGen::CIRGenFunction::generateCode(clang::GlobalDecl, cir::FuncOp, clang::CIRGen::CIRGenFunctionInfo const&) + 2011
15 clang     0x00000000031e3f38 clang::CIRGen::CIRGenModule::emitGlobalFunctionDefinition(clang::GlobalDecl, mlir::Operation*) + 440
16 clang     0x00000000031e5747 clang::CIRGen::CIRGenModule::emitGlobal(clang::GlobalDecl) + 1623
17 clang     0x00000000031e5de7
18 clang     0x00000000031e62b5 clang::CIRGen::CIRGenModule::emitDeclContext(clang::DeclContext const*) + 133
19 clang     0x00000000031c8ca3 cir::CIRGenerator::HandleTopLevelDecl(clang::DeclGroupRef) + 131
20 clang     0x0000000003099f8c
21 clang     0x00000000053c09b4 clang::ParseAST(clang::Sema&, bool, bool) + 596
22 clang     0x0000000002741cd9 clang::FrontendAction::Execute() + 169
23 clang     0x00000000026bdf7e clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) + 1886
24 clang     0x00000000028273ee clang::ExecuteCompilerInvocation(clang::CompilerInstance*) + 1742
25 clang     0x0000000000522f6b cc1_main(llvm::ArrayRef<char const*>, char const*, void*) + 6299
26 clang     0x0000000000519f00
27 clang     0x00000000024813a9
28 clang     0x00000000019f6272 llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) + 146
29 clang     0x000000000248376e
30 clang     0x000000000244139b clang::driver::Compilation::ExecuteCommand(clang::driver::Command const&, clang::driver::Command const*&, bool) const + 155
31 clang     0x000000000244245e clang::driver::Compilation::ExecuteJobs(clang::driver::JobList const&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&, bool) const + 222
32 clang     0x000000000244e554 clang::driver::Driver::ExecuteCompilation(clang::driver::Compilation&, llvm::SmallVectorImpl<std::pair<int, clang::driver::Command const*>>&) + 356
33 clang     0x000000000051f110 clang_main(int, char**, llvm::ToolContext const&) + 9168
34 clang     0x000000000042abb3 main + 83
35 libc.so.6 0x00007f89daa0f248
36 libc.so.6 0x00007f89daa0f30b __libc_start_main + 139
37 clang     0x0000000000519525 _start + 37
clang: error: clang frontend command failed with exit code 134 (use -v to see invocation)
clang version 20.0.0git (git@github.com:llvm/clangir.git 888f00c5bd78e8355c9f7288c1a3237884a04dbc)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /home/ladisgin/git_proj/clangir/build/bin
Build config: +assertions
clang: error: unable to execute command: Aborted (core dumped)
clang: note: diagnostic msg: Error generating preprocessed source(s).
