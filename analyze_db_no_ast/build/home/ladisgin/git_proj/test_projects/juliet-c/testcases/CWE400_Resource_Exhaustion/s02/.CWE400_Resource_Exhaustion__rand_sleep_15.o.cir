!s32i = !cir.int<s, 32>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#true = #cir.bool<true> : !cir.bool
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @rand() -> !s32i extra(#fn_attr) loc(#loc180)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc181)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc5)
  cir.func private  @usleep(!u32i) -> !s32i loc(#loc182)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Sleep time possibly too long\00" : !cir.array<!s8i x 29>> : !cir.array<!s8i x 29> {alignment = 1 : i64} loc(#loc8)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_15_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc184)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc13)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc14)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc185)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc18)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc19)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc19)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc19)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
          cir.yield %21 : !u32i loc(#loc19)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc19)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc19)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc19)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc19)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc19)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc19)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc19)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc19)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc19)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc19)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc19)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc19)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc19)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc19)
          cir.yield %25 : !u32i loc(#loc19)
        }) : (!cir.bool) -> !u32i loc(#loc19)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc19)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc187)
        cir.break loc(#loc21)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc5)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc5)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc22)
        cir.break loc(#loc23)
      }
      ] loc(#loc16)
    } loc(#loc186)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc26)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc27)
        %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc27)
        %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc28)
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc8)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc8)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc29)
        cir.break loc(#loc30)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc31)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc31)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc32)
        cir.break loc(#loc33)
      }
      ] loc(#loc24)
    } loc(#loc188)
    cir.return loc(#loc10)
  } loc(#loc183)
  cir.func no_proto  @CWE400_Resource_Exhaustion__rand_sleep_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc190)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc36)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc191)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc38)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc192)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc40)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc193)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc42)
    cir.return loc(#loc35)
  } loc(#loc189)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"Sleep time OK\00" : !cir.array<!s8i x 14>> : !cir.array<!s8i x 14> {alignment = 1 : i64} loc(#loc44)
  cir.global "private"  constant internal dsolocal @".str3" = #cir.const_array<"Sleep time too long\00" : !cir.array<!s8i x 20>> : !cir.array<!s8i x 20> {alignment = 1 : i64} loc(#loc45)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc195)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc50)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc51)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc196)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc55)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc56)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc56)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc56)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc56)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc56)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc56)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc56)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc56)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc56)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc56)
          cir.yield %21 : !u32i loc(#loc56)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc56)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc56)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc56)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc56)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc56)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc56)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc56)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc56)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc56)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc56)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc56)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc56)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc56)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc56)
          cir.yield %25 : !u32i loc(#loc56)
        }) : (!cir.bool) -> !u32i loc(#loc56)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc56)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc198)
        cir.break loc(#loc58)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc59)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc59)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc60)
        cir.break loc(#loc61)
      }
      ] loc(#loc53)
    } loc(#loc197)
    cir.scope {
      %3 = cir.const #cir.int<8> : !s32i loc(#loc64)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc65)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc65)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc66)
        cir.break loc(#loc67)
      },
      case (default) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc70)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc71)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc201)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc72)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc74)
            %10 = cir.const #cir.int<2000> : !s32i loc(#loc75)
            %11 = cir.cmp(le, %9, %10) : !s32i, !s32i loc(#loc202)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc76)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc73)
              cir.yield %14 : !cir.bool loc(#loc73)
            }, false {
              %14 = cir.const #false loc(#loc73)
              cir.yield %14 : !cir.bool loc(#loc73)
            }) : (!cir.bool) -> !cir.bool loc(#loc73)
            cir.yield %13 : !cir.bool loc(#loc73)
          }, false {
            %9 = cir.const #false loc(#loc73)
            cir.yield %9 : !cir.bool loc(#loc73)
          }) : (!cir.bool) -> !cir.bool loc(#loc73)
          cir.if %8 {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc80)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc80)
            %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc81)
            %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc44)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc44)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc82)
          } else {
            %9 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc45)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc45)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc83)
          } loc(#loc203)
        } loc(#loc200)
        cir.break loc(#loc84)
      }
      ] loc(#loc62)
    } loc(#loc199)
    cir.return loc(#loc47)
  } loc(#loc194)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc205)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc206)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc94)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
        %5 = cir.const #cir.int<1> : !s32i loc(#loc95)
        %6 = cir.binop(and, %4, %5) : !s32i loc(#loc95)
        %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc95)
        %8 = cir.ternary(%7, true {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc95)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc95)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc95)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc95)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc95)
          cir.yield %21 : !u32i loc(#loc95)
        }, false {
          %10 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %11 = cir.cast(integral, %10 : !s32i), !u32i loc(#loc95)
          %12 = cir.const #cir.int<30> : !s32i loc(#loc95)
          %13 = cir.shift(left, %11 : !u32i, %12 : !s32i) -> !u32i loc(#loc95)
          %14 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %15 = cir.cast(integral, %14 : !s32i), !u32i loc(#loc95)
          %16 = cir.const #cir.int<15> : !s32i loc(#loc95)
          %17 = cir.shift(left, %15 : !u32i, %16 : !s32i) -> !u32i loc(#loc95)
          %18 = cir.binop(xor, %13, %17) : !u32i loc(#loc95)
          %19 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc95)
          %20 = cir.cast(integral, %19 : !s32i), !u32i loc(#loc95)
          %21 = cir.binop(xor, %18, %20) : !u32i loc(#loc95)
          %22 = cir.unary(minus, %21) : !u32i, !u32i loc(#loc95)
          %23 = cir.const #cir.int<1> : !s32i loc(#loc95)
          %24 = cir.cast(integral, %23 : !s32i), !u32i loc(#loc95)
          %25 = cir.binop(sub, %22, %24) : !u32i loc(#loc95)
          cir.yield %25 : !u32i loc(#loc95)
        }) : (!cir.bool) -> !u32i loc(#loc95)
        %9 = cir.cast(integral, %8 : !u32i), !s32i loc(#loc95)
        cir.store %9, %0 : !s32i, !cir.ptr<!s32i> loc(#loc208)
        cir.break loc(#loc97)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc98)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc99)
        cir.break loc(#loc100)
      }
      ] loc(#loc92)
    } loc(#loc207)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc103)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc106)
          %5 = cir.const #cir.int<0> : !s32i loc(#loc107)
          %6 = cir.cmp(gt, %4, %5) : !s32i, !s32i loc(#loc211)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc108)
          %8 = cir.ternary(%7, true {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %10 = cir.const #cir.int<2000> : !s32i loc(#loc111)
            %11 = cir.cmp(le, %9, %10) : !s32i, !s32i loc(#loc212)
            %12 = cir.cast(int_to_bool, %11 : !s32i), !cir.bool loc(#loc112)
            %13 = cir.ternary(%12, true {
              %14 = cir.const #true loc(#loc109)
              cir.yield %14 : !cir.bool loc(#loc109)
            }, false {
              %14 = cir.const #false loc(#loc109)
              cir.yield %14 : !cir.bool loc(#loc109)
            }) : (!cir.bool) -> !cir.bool loc(#loc109)
            cir.yield %13 : !cir.bool loc(#loc109)
          }, false {
            %9 = cir.const #false loc(#loc109)
            cir.yield %9 : !cir.bool loc(#loc109)
          }) : (!cir.bool) -> !cir.bool loc(#loc109)
          cir.if %8 {
            %9 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc116)
            %10 = cir.cast(integral, %9 : !s32i), !u32i loc(#loc116)
            %11 = cir.call @usleep(%10) : (!u32i) -> !s32i loc(#loc117)
            %12 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 14>> loc(#loc118)
            %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 14>>), !cir.ptr<!s8i> loc(#loc118)
            cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc119)
          } else {
            %9 = cir.get_global @".str3" : !cir.ptr<!cir.array<!s8i x 20>> loc(#loc120)
            %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 20>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc121)
          } loc(#loc213)
        } loc(#loc210)
        cir.break loc(#loc122)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc123)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc123)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc124)
        cir.break loc(#loc125)
      }
      ] loc(#loc101)
    } loc(#loc209)
    cir.return loc(#loc86)
  } loc(#loc204)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc215)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc130)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc131)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc216)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc135)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc136)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc136)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc137)
        cir.break loc(#loc138)
      },
      case (default) {
        %4 = cir.const #cir.int<20> : !s32i loc(#loc139)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc218)
        cir.break loc(#loc141)
      }
      ] loc(#loc133)
    } loc(#loc217)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc144)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc145)
        %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc145)
        %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc146)
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc147)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc147)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc148)
        cir.break loc(#loc149)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc150)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc150)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc151)
        cir.break loc(#loc152)
      }
      ] loc(#loc142)
    } loc(#loc219)
    cir.return loc(#loc127)
  } loc(#loc214)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["count"] {alignment = 4 : i64} loc(#loc221)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc157)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc158)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc222)
    cir.scope {
      %3 = cir.const #cir.int<6> : !s32i loc(#loc162)
      cir.switch (%3 : !s32i) [
      case (equal, 6) {
        %4 = cir.const #cir.int<20> : !s32i loc(#loc163)
        cir.store %4, %0 : !s32i, !cir.ptr<!s32i> loc(#loc224)
        cir.break loc(#loc165)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc166)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc166)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc167)
        cir.break loc(#loc168)
      }
      ] loc(#loc160)
    } loc(#loc223)
    cir.scope {
      %3 = cir.const #cir.int<7> : !s32i loc(#loc171)
      cir.switch (%3 : !s32i) [
      case (equal, 7) {
        %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc172)
        %5 = cir.cast(integral, %4 : !s32i), !u32i loc(#loc172)
        %6 = cir.call @usleep(%5) : (!u32i) -> !s32i loc(#loc173)
        %7 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 29>> loc(#loc174)
        %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 29>>), !cir.ptr<!s8i> loc(#loc174)
        cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc175)
        cir.break loc(#loc176)
      },
      case (default) {
        %4 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc177)
        %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc177)
        cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc178)
        cir.break loc(#loc179)
      }
      ] loc(#loc169)
    } loc(#loc225)
    cir.return loc(#loc154)
  } loc(#loc220)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE400_Resource_Exhaustion/s02/CWE400_Resource_Exhaustion__rand_sleep_15.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc5 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":43:19)
#loc6 = loc("/usr/include/unistd.h":480:1)
#loc7 = loc("/usr/include/unistd.h":480:43)
#loc8 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":51:19)
#loc9 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":30:1)
#loc10 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":58:1)
#loc11 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":32:5)
#loc12 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":32:9)
#loc13 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":34:14)
#loc14 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":34:13)
#loc15 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":34:5)
#loc16 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":35:5)
#loc17 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":45:5)
#loc18 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":35:12)
#loc19 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":39:17)
#loc20 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":39:9)
#loc21 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":40:9)
#loc22 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":43:9)
#loc23 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":44:9)
#loc24 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":46:5)
#loc25 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":57:5)
#loc26 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":46:12)
#loc27 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":50:15)
#loc28 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":50:9)
#loc29 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":51:9)
#loc30 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":52:9)
#loc31 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":55:19)
#loc32 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":55:9)
#loc33 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":56:9)
#loc34 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":202:1)
#loc35 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":208:1)
#loc36 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":204:5)
#loc37 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":204:14)
#loc38 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":205:5)
#loc39 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":205:14)
#loc40 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":206:5)
#loc41 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":206:14)
#loc42 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":207:5)
#loc43 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":207:14)
#loc44 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":92:23)
#loc45 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":96:23)
#loc46 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":65:1)
#loc47 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":100:1)
#loc48 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":67:5)
#loc49 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":67:9)
#loc50 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":69:14)
#loc51 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":69:13)
#loc52 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":69:5)
#loc53 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":70:5)
#loc54 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":80:5)
#loc55 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":70:12)
#loc56 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":74:17)
#loc57 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":74:9)
#loc58 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":75:9)
#loc59 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":78:19)
#loc60 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":78:9)
#loc61 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":79:9)
#loc62 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":81:5)
#loc63 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":99:5)
#loc64 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":81:12)
#loc65 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":85:19)
#loc66 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":85:9)
#loc67 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":86:9)
#loc68 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:9)
#loc69 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":97:9)
#loc70 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:13)
#loc71 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:21)
#loc72 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:19)
#loc73 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:23)
#loc74 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:26)
#loc75 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:35)
#loc76 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":89:32)
#loc77 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":90:9)
#loc78 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":93:9)
#loc79 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":95:9)
#loc80 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":91:19)
#loc81 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":91:13)
#loc82 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":92:13)
#loc83 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":96:13)
#loc84 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":98:9)
#loc85 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":103:1)
#loc86 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":138:1)
#loc87 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":105:5)
#loc88 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":105:9)
#loc89 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":107:14)
#loc90 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":107:13)
#loc91 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":107:5)
#loc92 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":108:5)
#loc93 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":118:5)
#loc94 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":108:12)
#loc95 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":112:17)
#loc96 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":112:9)
#loc97 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":113:9)
#loc98 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":116:19)
#loc99 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":116:9)
#loc100 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":117:9)
#loc101 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":119:5)
#loc102 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":137:5)
#loc103 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":119:12)
#loc104 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:9)
#loc105 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":131:9)
#loc106 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:13)
#loc107 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:21)
#loc108 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:19)
#loc109 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:23)
#loc110 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:26)
#loc111 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:35)
#loc112 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":123:32)
#loc113 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":124:9)
#loc114 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":127:9)
#loc115 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":129:9)
#loc116 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":125:19)
#loc117 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":125:13)
#loc118 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":126:23)
#loc119 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":126:13)
#loc120 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":130:23)
#loc121 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":130:13)
#loc122 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":132:9)
#loc123 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":135:19)
#loc124 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":135:9)
#loc125 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":136:9)
#loc126 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":141:1)
#loc127 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":169:1)
#loc128 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":143:5)
#loc129 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":143:9)
#loc130 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":145:14)
#loc131 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":145:13)
#loc132 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":145:5)
#loc133 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":146:5)
#loc134 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":156:5)
#loc135 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":146:12)
#loc136 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":150:19)
#loc137 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":150:9)
#loc138 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":151:9)
#loc139 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":154:17)
#loc140 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":154:9)
#loc141 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":155:9)
#loc142 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":157:5)
#loc143 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":168:5)
#loc144 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":157:12)
#loc145 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":161:15)
#loc146 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":161:9)
#loc147 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":162:19)
#loc148 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":162:9)
#loc149 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":163:9)
#loc150 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":166:19)
#loc151 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":166:9)
#loc152 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":167:9)
#loc153 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":172:1)
#loc154 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":200:1)
#loc155 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":174:5)
#loc156 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":174:9)
#loc157 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":176:14)
#loc158 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":176:13)
#loc159 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":176:5)
#loc160 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":177:5)
#loc161 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":187:5)
#loc162 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":177:12)
#loc163 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":181:17)
#loc164 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":181:9)
#loc165 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":182:9)
#loc166 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":185:19)
#loc167 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":185:9)
#loc168 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":186:9)
#loc169 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":188:5)
#loc170 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":199:5)
#loc171 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":188:12)
#loc172 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":192:15)
#loc173 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":192:9)
#loc174 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":193:19)
#loc175 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":193:9)
#loc176 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":194:9)
#loc177 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":197:19)
#loc178 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":197:9)
#loc179 = loc("CWE400_Resource_Exhaustion__rand_sleep_15.c":198:9)
#loc180 = loc(fused[#loc1, #loc2])
#loc181 = loc(fused[#loc3, #loc4])
#loc182 = loc(fused[#loc6, #loc7])
#loc183 = loc(fused[#loc9, #loc10])
#loc184 = loc(fused[#loc11, #loc12])
#loc185 = loc(fused[#loc15, #loc13])
#loc186 = loc(fused[#loc16, #loc17])
#loc187 = loc(fused[#loc20, #loc19])
#loc188 = loc(fused[#loc24, #loc25])
#loc189 = loc(fused[#loc34, #loc35])
#loc190 = loc(fused[#loc36, #loc37])
#loc191 = loc(fused[#loc38, #loc39])
#loc192 = loc(fused[#loc40, #loc41])
#loc193 = loc(fused[#loc42, #loc43])
#loc194 = loc(fused[#loc46, #loc47])
#loc195 = loc(fused[#loc48, #loc49])
#loc196 = loc(fused[#loc52, #loc50])
#loc197 = loc(fused[#loc53, #loc54])
#loc198 = loc(fused[#loc57, #loc56])
#loc199 = loc(fused[#loc62, #loc63])
#loc200 = loc(fused[#loc68, #loc69])
#loc201 = loc(fused[#loc70, #loc71])
#loc202 = loc(fused[#loc74, #loc75])
#loc203 = loc(fused[#loc77, #loc78, #loc79, #loc69])
#loc204 = loc(fused[#loc85, #loc86])
#loc205 = loc(fused[#loc87, #loc88])
#loc206 = loc(fused[#loc91, #loc89])
#loc207 = loc(fused[#loc92, #loc93])
#loc208 = loc(fused[#loc96, #loc95])
#loc209 = loc(fused[#loc101, #loc102])
#loc210 = loc(fused[#loc104, #loc105])
#loc211 = loc(fused[#loc106, #loc107])
#loc212 = loc(fused[#loc110, #loc111])
#loc213 = loc(fused[#loc113, #loc114, #loc115, #loc105])
#loc214 = loc(fused[#loc126, #loc127])
#loc215 = loc(fused[#loc128, #loc129])
#loc216 = loc(fused[#loc132, #loc130])
#loc217 = loc(fused[#loc133, #loc134])
#loc218 = loc(fused[#loc140, #loc139])
#loc219 = loc(fused[#loc142, #loc143])
#loc220 = loc(fused[#loc153, #loc154])
#loc221 = loc(fused[#loc155, #loc156])
#loc222 = loc(fused[#loc159, #loc157])
#loc223 = loc(fused[#loc160, #loc161])
#loc224 = loc(fused[#loc164, #loc163])
#loc225 = loc(fused[#loc169, #loc170])
