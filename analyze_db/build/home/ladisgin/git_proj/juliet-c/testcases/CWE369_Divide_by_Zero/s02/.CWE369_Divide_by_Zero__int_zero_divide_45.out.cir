!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#fn_attr1 = #cir<extra({nothrow = #cir.nothrow})>
#loc34 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":107:10)
#loc35 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":107:14)
#loc36 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":107:20)
#loc37 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":107:32)
#loc128 = loc(fused[#loc34, #loc35])
#loc129 = loc(fused[#loc36, #loc37])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_45.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<!llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, f80 = dense<128> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_zero_divide_45_badData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc114)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_45_bad() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc116)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc7)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc8)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc117)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc10)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc118)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc12)
    %5 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_badData : !cir.ptr<!s32i> loc(#loc114)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc119)
    %6 = cir.get_global @badSink : !cir.ptr<!cir.func<!void ()>> loc(#loc120)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc14)
    cir.return loc(#loc4)
  } loc(#loc115)
  cir.func no_proto @CWE369_Divide_by_Zero__int_zero_divide_45_good() extra(#fn_attr) {
    %0 = cir.get_global @goodG2B : !cir.ptr<!cir.func<!void ()>> loc(#loc122)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc18)
    %1 = cir.get_global @goodB2G : !cir.ptr<!cir.func<!void ()>> loc(#loc123)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc20)
    cir.return loc(#loc17)
  } loc(#loc121)
  cir.func private @srand(!u32i) extra(#fn_attr1) loc(#loc124)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc125)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc126)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc28)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc29)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc30)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc31)
  cir.func @main(%arg0: !s32i loc(fused[#loc34, #loc35]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc36, #loc37])) -> !s32i extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc128)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc129)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc33)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc38)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc38)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc39)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr1) loc(#loc40)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc40)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr1) loc(#loc41)
    %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc28)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc28)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc42)
    %8 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_good : !cir.ptr<!cir.func<!void ()>> loc(#loc130)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_45_good() : () -> () loc(#loc43)
    %9 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc29)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc29)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc45)
    %11 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc30)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc30)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc46)
    %13 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc131)
    cir.call @CWE369_Divide_by_Zero__int_zero_divide_45_bad() : () -> () loc(#loc47)
    %14 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc31)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc31)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc49)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc50)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc132)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc132)
    cir.return %17 : !s32i loc(#loc132)
  } loc(#loc127)
  cir.func private @printIntLine(!s32i) loc(#loc133)
  cir.func no_proto internal private @badSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc135)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_badData : !cir.ptr<!s32i> loc(#loc114)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc57)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc135)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc58)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc59)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc136)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc60)
    cir.return loc(#loc55)
  } loc(#loc134)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc137)
  cir.func no_proto internal private @goodG2B() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc139)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc67)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc68)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc140)
    %3 = cir.const #cir.int<7> : !s32i loc(#loc70)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc141)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc72)
    %5 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData : !cir.ptr<!s32i> loc(#loc137)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc142)
    %6 = cir.get_global @goodG2BSink : !cir.ptr<!cir.func<!void ()>> loc(#loc143)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc74)
    cir.return loc(#loc64)
  } loc(#loc138)
  cir.func no_proto internal private @goodG2BSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc145)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_goodG2BData : !cir.ptr<!s32i> loc(#loc137)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc79)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc145)
    %3 = cir.const #cir.int<100> : !s32i loc(#loc80)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc81)
    %5 = cir.binop(div, %3, %4) : !s32i loc(#loc146)
    cir.call @printIntLine(%5) : (!s32i) -> () loc(#loc82)
    cir.return loc(#loc77)
  } loc(#loc144)
  cir.global "private" internal dsolocal @CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData = #cir.int<0> : !s32i {alignment = 4 : i64} loc(#loc147)
  cir.func no_proto internal private @goodB2G() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc149)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc89)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc90)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc150)
    %3 = cir.const #cir.int<0> : !s32i loc(#loc92)
    cir.store %3, %0 : !s32i, !cir.ptr<!s32i> loc(#loc151)
    %4 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc94)
    %5 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData : !cir.ptr<!s32i> loc(#loc147)
    cir.store %4, %5 : !s32i, !cir.ptr<!s32i> loc(#loc152)
    %6 = cir.get_global @goodB2GSink : !cir.ptr<!cir.func<!void ()>> loc(#loc153)
    cir.call %6() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc96)
    cir.return loc(#loc86)
  } loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"This would result in a divide by zero\00" : !cir.array<!s8i x 38>> : !cir.array<!s8i x 38> {alignment = 1 : i64} loc(#loc98)
  cir.func no_proto internal private @goodB2GSink() extra(#fn_attr) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data", init] {alignment = 4 : i64} loc(#loc155)
    %1 = cir.get_global @CWE369_Divide_by_Zero__int_zero_divide_45_goodB2GData : !cir.ptr<!s32i> loc(#loc147)
    %2 = cir.load %1 : !cir.ptr<!s32i>, !s32i loc(#loc102)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc155)
    cir.scope {
      %3 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc105)
      %4 = cir.const #cir.int<0> : !s32i loc(#loc106)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc157)
      cir.if %5 {
        %6 = cir.const #cir.int<100> : !s32i loc(#loc110)
        %7 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc111)
        %8 = cir.binop(div, %6, %7) : !s32i loc(#loc159)
        cir.call @printIntLine(%8) : (!s32i) -> () loc(#loc112)
      } else {
        %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 38>> loc(#loc98)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 38>>), !cir.ptr<!s8i> loc(#loc98)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc113)
      } loc(#loc158)
    } loc(#loc156)
    cir.return loc(#loc100)
  } loc(#loc154)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE369_Divide_by_Zero/s02/CWE369_Divide_by_Zero__int_zero_divide_45.c":0:0)
#loc1 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":20:1)
#loc2 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":20:12)
#loc3 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":33:1)
#loc4 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":42:1)
#loc5 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":35:5)
#loc6 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":35:9)
#loc7 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":37:13)
#loc8 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":37:12)
#loc9 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":37:5)
#loc10 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":39:12)
#loc11 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":39:5)
#loc12 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":40:57)
#loc13 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":40:5)
#loc14 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":41:5)
#loc15 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":41:13)
#loc16 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":93:1)
#loc17 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":97:1)
#loc18 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":95:5)
#loc19 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":95:13)
#loc20 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":96:5)
#loc21 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":96:13)
#loc22 = loc("/usr/include/stdlib.h":575:1)
#loc23 = loc("/usr/include/stdlib.h":575:41)
#loc24 = loc("/usr/include/time.h":76:1)
#loc25 = loc("/usr/include/time.h":76:38)
#loc26 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc27 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc28 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":112:15)
#loc29 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":114:15)
#loc30 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":117:15)
#loc31 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":119:15)
#loc32 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":107:1)
#loc33 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":122:1)
#loc38 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":108:1)
#loc39 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":110:27)
#loc40 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":110:22)
#loc41 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":110:5)
#loc42 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":112:5)
#loc43 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":113:5)
#loc44 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":113:52)
#loc45 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":114:5)
#loc46 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":117:5)
#loc47 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":118:5)
#loc48 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":118:51)
#loc49 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":119:5)
#loc50 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":121:12)
#loc51 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":121:5)
#loc52 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc53 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc54 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":26:1)
#loc55 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":31:1)
#loc56 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":28:5)
#loc57 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":28:16)
#loc58 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":30:18)
#loc59 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":30:24)
#loc60 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":30:5)
#loc61 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":21:1)
#loc62 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":21:12)
#loc63 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":56:1)
#loc64 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":65:1)
#loc65 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":58:5)
#loc66 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":58:9)
#loc67 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":60:13)
#loc68 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":60:12)
#loc69 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":60:5)
#loc70 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":62:12)
#loc71 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":62:5)
#loc72 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":63:61)
#loc73 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":63:5)
#loc74 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":64:5)
#loc75 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":64:17)
#loc76 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":49:1)
#loc77 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":54:1)
#loc78 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":51:5)
#loc79 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":51:16)
#loc80 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":53:18)
#loc81 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":53:24)
#loc82 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":53:5)
#loc83 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":22:1)
#loc84 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":22:12)
#loc85 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":82:1)
#loc86 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":91:1)
#loc87 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":84:5)
#loc88 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":84:9)
#loc89 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":86:13)
#loc90 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":86:12)
#loc91 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":86:5)
#loc92 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":88:12)
#loc93 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":88:5)
#loc94 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":89:61)
#loc95 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":89:5)
#loc96 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":90:5)
#loc97 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":90:17)
#loc98 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":78:19)
#loc99 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":68:1)
#loc100 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":80:1)
#loc101 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":70:5)
#loc102 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":70:16)
#loc103 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":72:5)
#loc104 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":79:5)
#loc105 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":72:9)
#loc106 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":72:17)
#loc107 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":73:5)
#loc108 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":75:5)
#loc109 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":77:5)
#loc110 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":74:22)
#loc111 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":74:28)
#loc112 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":74:9)
#loc113 = loc("CWE369_Divide_by_Zero__int_zero_divide_45.c":78:9)
#loc114 = loc(fused[#loc1, #loc2])
#loc115 = loc(fused[#loc3, #loc4])
#loc116 = loc(fused[#loc5, #loc6])
#loc117 = loc(fused[#loc9, #loc7])
#loc118 = loc(fused[#loc11, #loc10])
#loc119 = loc(fused[#loc13, #loc12])
#loc120 = loc(fused[#loc14, #loc15])
#loc121 = loc(fused[#loc16, #loc17])
#loc122 = loc(fused[#loc18, #loc19])
#loc123 = loc(fused[#loc20, #loc21])
#loc124 = loc(fused[#loc22, #loc23])
#loc125 = loc(fused[#loc24, #loc25])
#loc126 = loc(fused[#loc26, #loc27])
#loc127 = loc(fused[#loc32, #loc33])
#loc130 = loc(fused[#loc43, #loc44])
#loc131 = loc(fused[#loc47, #loc48])
#loc132 = loc(fused[#loc51, #loc50])
#loc133 = loc(fused[#loc52, #loc53])
#loc134 = loc(fused[#loc54, #loc55])
#loc135 = loc(fused[#loc56, #loc57])
#loc136 = loc(fused[#loc58, #loc59])
#loc137 = loc(fused[#loc61, #loc62])
#loc138 = loc(fused[#loc63, #loc64])
#loc139 = loc(fused[#loc65, #loc66])
#loc140 = loc(fused[#loc69, #loc67])
#loc141 = loc(fused[#loc71, #loc70])
#loc142 = loc(fused[#loc73, #loc72])
#loc143 = loc(fused[#loc74, #loc75])
#loc144 = loc(fused[#loc76, #loc77])
#loc145 = loc(fused[#loc78, #loc79])
#loc146 = loc(fused[#loc80, #loc81])
#loc147 = loc(fused[#loc83, #loc84])
#loc148 = loc(fused[#loc85, #loc86])
#loc149 = loc(fused[#loc87, #loc88])
#loc150 = loc(fused[#loc91, #loc89])
#loc151 = loc(fused[#loc93, #loc92])
#loc152 = loc(fused[#loc95, #loc94])
#loc153 = loc(fused[#loc96, #loc97])
#loc154 = loc(fused[#loc99, #loc100])
#loc155 = loc(fused[#loc101, #loc102])
#loc156 = loc(fused[#loc103, #loc104])
#loc157 = loc(fused[#loc105, #loc106])
#loc158 = loc(fused[#loc107, #loc108, #loc109, #loc104])
#loc159 = loc(fused[#loc110, #loc111])
