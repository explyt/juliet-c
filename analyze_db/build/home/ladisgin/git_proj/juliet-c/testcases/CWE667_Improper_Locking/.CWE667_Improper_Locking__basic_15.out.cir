!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__stdThreadLock = !cir.struct<struct "_stdThreadLock" incomplete>
!u32i = !cir.int<u, 32>
!void = !cir.void
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc55 = loc("CWE667_Improper_Locking__basic_15.c":126:10)
#loc56 = loc("CWE667_Improper_Locking__basic_15.c":126:14)
#loc57 = loc("CWE667_Improper_Locking__basic_15.c":126:20)
#loc58 = loc("CWE667_Improper_Locking__basic_15.c":126:32)
#loc162 = loc(fused[#loc55, #loc56])
#loc163 = loc(fused[#loc57, #loc58])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, i64 = dense<64> : vector<2xi64>, f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i1 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, "dlti.endianness" = "little", "dlti.stack_alignment" = 128 : i64>} {
  cir.global "private" internal dsolocal @good2.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc1)
  cir.global "private" internal dsolocal @good1.goodLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc2)
  cir.global "private" internal dsolocal @CWE667_Improper_Locking__basic_15_bad.badLock = #cir.ptr<null> : !cir.ptr<!ty__stdThreadLock> {alignment = 8 : i64} loc(#loc3)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc147)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"Creating lock...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc6)
  cir.func private @stdThreadLockCreate(!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc148)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Could not create lock\00" : !cir.array<!s8i x 22>> : !cir.array<!s8i x 22> {alignment = 1 : i64} loc(#loc9)
  cir.func private @exit(!s32i) extra(#fn_attr) loc(#loc149)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Acquiring lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc12)
  cir.func private @stdThreadLockAcquire(!cir.ptr<!ty__stdThreadLock>) loc(#loc150)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc15)
  cir.func no_proto @CWE667_Improper_Locking__basic_15_bad() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.get_global @CWE667_Improper_Locking__basic_15_bad.badLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc3)
            %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc6)
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc6)
            cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc24)
            cir.scope {
              %7 = cir.call @stdThreadLockCreate(%1) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc27)
              %8 = cir.cast(int_to_bool, %7 : !s32i), !cir.bool loc(#loc27)
              %9 = cir.unary(not, %8) : !cir.bool, !cir.bool loc(#loc27)
              cir.if %9 {
                %10 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc9)
                %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc9)
                cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc29)
                %12 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc30)
                %13 = cir.const #cir.int<1> : !s32i loc(#loc31)
                cir.call @exit(%13) : (!s32i) -> () extra(#fn_attr) loc(#loc30)
              } loc(#loc155)
            } loc(#loc154)
            %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc12)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc12)
            cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc32)
            %6 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc33)
            cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc34)
          } loc(#loc153)
          cir.break loc(#loc35)
        } loc(#loc21)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc15)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc15)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc37)
          cir.break loc(#loc38)
        } loc(#loc36)
        cir.yield loc(#loc18)
      } loc(#loc18)
    } loc(#loc152)
    cir.return loc(#loc17)
  } loc(#loc151)
  cir.func no_proto @CWE667_Improper_Locking__basic_15_good() extra(#fn_attr1) {
    %0 = cir.get_global @good1 : !cir.ptr<!cir.func<!void ()>> loc(#loc157)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc41)
    %1 = cir.get_global @good2 : !cir.ptr<!cir.func<!void ()>> loc(#loc158)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc43)
    cir.return loc(#loc40)
  } loc(#loc156)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc159)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc160)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc49)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc50)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc51)
  cir.global "private" constant cir_private dsolocal @".str.7" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc52)
  cir.func @main(%arg0: !s32i loc(fused[#loc55, #loc56]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc57, #loc58])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc162)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc163)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc54)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc59)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc59)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc60)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc61)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc61)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc62)
    %6 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc49)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc49)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc63)
    %8 = cir.get_global @CWE667_Improper_Locking__basic_15_good : !cir.ptr<!cir.func<!void ()>> loc(#loc164)
    cir.call @CWE667_Improper_Locking__basic_15_good() : () -> () loc(#loc64)
    %9 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc50)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc50)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc66)
    %11 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc51)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc51)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc67)
    %13 = cir.get_global @CWE667_Improper_Locking__basic_15_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc165)
    cir.call @CWE667_Improper_Locking__basic_15_bad() : () -> () loc(#loc68)
    %14 = cir.get_global @".str.7" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc52)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc52)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc71)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc166)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc166)
    cir.return %17 : !s32i loc(#loc166)
  } loc(#loc161)
  cir.global "private" constant cir_private dsolocal @".str.8" = #cir.const_array<"Releasing lock...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc73)
  cir.func private @stdThreadLockRelease(!cir.ptr<!ty__stdThreadLock>) loc(#loc167)
  cir.global "private" constant cir_private dsolocal @".str.9" = #cir.const_array<"Destroying lock...\00" : !cir.array<!s8i x 19>> : !cir.array<!s8i x 19> {alignment = 1 : i64} loc(#loc76)
  cir.func private @stdThreadLockDestroy(!cir.ptr<!ty__stdThreadLock>) loc(#loc168)
  cir.func no_proto internal private @good1() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<5> : !s32i loc(#loc83)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc85)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc85)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc86)
          cir.break loc(#loc87)
        } loc(#loc84)
        cir.case(default, []) {
          cir.scope {
            %1 = cir.get_global @good1.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc2)
            %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc91)
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc91)
            cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc92)
            cir.scope {
              %13 = cir.call @stdThreadLockCreate(%1) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc95)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc95)
              %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc95)
              cir.if %15 {
                %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc97)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc97)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc98)
                %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc99)
                %19 = cir.const #cir.int<1> : !s32i loc(#loc100)
                cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc99)
              } loc(#loc173)
            } loc(#loc172)
            %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc101)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc101)
            cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc102)
            %6 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc103)
            cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc104)
            %7 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc73)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc73)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc105)
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc106)
            cir.call @stdThreadLockRelease(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc107)
            %10 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc76)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc76)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc108)
            %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc109)
            cir.call @stdThreadLockDestroy(%12) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc110)
          } loc(#loc171)
          cir.break loc(#loc111)
        } loc(#loc88)
        cir.yield loc(#loc81)
      } loc(#loc81)
    } loc(#loc170)
    cir.return loc(#loc80)
  } loc(#loc169)
  cir.func no_proto internal private @good2() extra(#fn_attr1) {
    cir.scope {
      %0 = cir.const #cir.int<6> : !s32i loc(#loc116)
      cir.switch (%0 : !s32i) {
        cir.case(equal, [#cir.int<6> : !s32i]) {
          cir.scope {
            %1 = cir.get_global @good2.goodLock : !cir.ptr<!cir.ptr<!ty__stdThreadLock>> loc(#loc1)
            %2 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc120)
            %3 = cir.cast(array_to_ptrdecay, %2 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc120)
            cir.call @printLine(%3) : (!cir.ptr<!s8i>) -> () loc(#loc121)
            cir.scope {
              %13 = cir.call @stdThreadLockCreate(%1) : (!cir.ptr<!cir.ptr<!ty__stdThreadLock>>) -> !s32i loc(#loc124)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc124)
              %15 = cir.unary(not, %14) : !cir.bool, !cir.bool loc(#loc124)
              cir.if %15 {
                %16 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 22>> loc(#loc126)
                %17 = cir.cast(array_to_ptrdecay, %16 : !cir.ptr<!cir.array<!s8i x 22>>), !cir.ptr<!s8i> loc(#loc126)
                cir.call @printLine(%17) : (!cir.ptr<!s8i>) -> () loc(#loc127)
                %18 = cir.get_global @exit : !cir.ptr<!cir.func<!void (!s32i)>> loc(#loc128)
                %19 = cir.const #cir.int<1> : !s32i loc(#loc129)
                cir.call @exit(%19) : (!s32i) -> () extra(#fn_attr) loc(#loc128)
              } loc(#loc178)
            } loc(#loc177)
            %4 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc130)
            %5 = cir.cast(array_to_ptrdecay, %4 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc130)
            cir.call @printLine(%5) : (!cir.ptr<!s8i>) -> () loc(#loc131)
            %6 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc132)
            cir.call @stdThreadLockAcquire(%6) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc133)
            %7 = cir.get_global @".str.8" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc134)
            %8 = cir.cast(array_to_ptrdecay, %7 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc134)
            cir.call @printLine(%8) : (!cir.ptr<!s8i>) -> () loc(#loc135)
            %9 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc136)
            cir.call @stdThreadLockRelease(%9) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc137)
            %10 = cir.get_global @".str.9" : !cir.ptr<!cir.array<!s8i x 19>> loc(#loc138)
            %11 = cir.cast(array_to_ptrdecay, %10 : !cir.ptr<!cir.array<!s8i x 19>>), !cir.ptr<!s8i> loc(#loc138)
            cir.call @printLine(%11) : (!cir.ptr<!s8i>) -> () loc(#loc139)
            %12 = cir.load %1 : !cir.ptr<!cir.ptr<!ty__stdThreadLock>>, !cir.ptr<!ty__stdThreadLock> loc(#loc140)
            cir.call @stdThreadLockDestroy(%12) : (!cir.ptr<!ty__stdThreadLock>) -> () loc(#loc141)
          } loc(#loc176)
          cir.break loc(#loc142)
        } loc(#loc117)
        cir.case(default, []) {
          %1 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc144)
          %2 = cir.cast(array_to_ptrdecay, %1 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc144)
          cir.call @printLine(%2) : (!cir.ptr<!s8i>) -> () loc(#loc145)
          cir.break loc(#loc146)
        } loc(#loc143)
        cir.yield loc(#loc114)
      } loc(#loc114)
    } loc(#loc175)
    cir.return loc(#loc113)
  } loc(#loc174)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE667_Improper_Locking/CWE667_Improper_Locking__basic_15.c":0:0)
#loc1 = loc("CWE667_Improper_Locking__basic_15.c":88:30)
#loc2 = loc("CWE667_Improper_Locking__basic_15.c":62:30)
#loc3 = loc("CWE667_Improper_Locking__basic_15.c":28:30)
#loc4 = loc("../../testcasesupport/std_testcase_io.h":14:1)
#loc5 = loc("../../testcasesupport/std_testcase_io.h":14:33)
#loc6 = loc("CWE667_Improper_Locking__basic_15.c":29:19)
#loc7 = loc("../../testcasesupport/std_thread.h":18:1)
#loc8 = loc("../../testcasesupport/std_thread.h":18:44)
#loc9 = loc("CWE667_Improper_Locking__basic_15.c":32:23)
#loc10 = loc("/usr/include/stdlib.h":756:1)
#loc11 = loc("/usr/include/stdlib.h":756:70)
#loc12 = loc("CWE667_Improper_Locking__basic_15.c":35:19)
#loc13 = loc("../../testcasesupport/std_thread.h":19:1)
#loc14 = loc("../../testcasesupport/std_thread.h":19:45)
#loc15 = loc("CWE667_Improper_Locking__basic_15.c":42:19)
#loc16 = loc("CWE667_Improper_Locking__basic_15.c":22:1)
#loc17 = loc("CWE667_Improper_Locking__basic_15.c":45:1)
#loc18 = loc("CWE667_Improper_Locking__basic_15.c":24:5)
#loc19 = loc("CWE667_Improper_Locking__basic_15.c":44:5)
#loc20 = loc("CWE667_Improper_Locking__basic_15.c":24:12)
#loc21 = loc("CWE667_Improper_Locking__basic_15.c":26:5)
#loc22 = loc("CWE667_Improper_Locking__basic_15.c":27:5)
#loc23 = loc("CWE667_Improper_Locking__basic_15.c":38:5)
#loc24 = loc("CWE667_Improper_Locking__basic_15.c":29:9)
#loc25 = loc("CWE667_Improper_Locking__basic_15.c":30:9)
#loc26 = loc("CWE667_Improper_Locking__basic_15.c":34:9)
#loc27 = loc("CWE667_Improper_Locking__basic_15.c":30:14)
#loc28 = loc("CWE667_Improper_Locking__basic_15.c":31:9)
#loc29 = loc("CWE667_Improper_Locking__basic_15.c":32:13)
#loc30 = loc("CWE667_Improper_Locking__basic_15.c":33:13)
#loc31 = loc("CWE667_Improper_Locking__basic_15.c":33:18)
#loc32 = loc("CWE667_Improper_Locking__basic_15.c":35:9)
#loc33 = loc("CWE667_Improper_Locking__basic_15.c":36:30)
#loc34 = loc("CWE667_Improper_Locking__basic_15.c":36:9)
#loc35 = loc("CWE667_Improper_Locking__basic_15.c":39:5)
#loc36 = loc("CWE667_Improper_Locking__basic_15.c":40:5)
#loc37 = loc("CWE667_Improper_Locking__basic_15.c":42:9)
#loc38 = loc("CWE667_Improper_Locking__basic_15.c":43:9)
#loc39 = loc("CWE667_Improper_Locking__basic_15.c":111:1)
#loc40 = loc("CWE667_Improper_Locking__basic_15.c":115:1)
#loc41 = loc("CWE667_Improper_Locking__basic_15.c":113:5)
#loc42 = loc("CWE667_Improper_Locking__basic_15.c":113:11)
#loc43 = loc("CWE667_Improper_Locking__basic_15.c":114:5)
#loc44 = loc("CWE667_Improper_Locking__basic_15.c":114:11)
#loc45 = loc("/usr/include/stdlib.h":575:1)
#loc46 = loc("/usr/include/stdlib.h":575:41)
#loc47 = loc("/usr/include/time.h":76:1)
#loc48 = loc("/usr/include/time.h":76:38)
#loc49 = loc("CWE667_Improper_Locking__basic_15.c":131:15)
#loc50 = loc("CWE667_Improper_Locking__basic_15.c":133:15)
#loc51 = loc("CWE667_Improper_Locking__basic_15.c":136:15)
#loc52 = loc("CWE667_Improper_Locking__basic_15.c":138:15)
#loc53 = loc("CWE667_Improper_Locking__basic_15.c":126:1)
#loc54 = loc("CWE667_Improper_Locking__basic_15.c":141:1)
#loc59 = loc("CWE667_Improper_Locking__basic_15.c":127:1)
#loc60 = loc("CWE667_Improper_Locking__basic_15.c":129:27)
#loc61 = loc("CWE667_Improper_Locking__basic_15.c":129:22)
#loc62 = loc("CWE667_Improper_Locking__basic_15.c":129:5)
#loc63 = loc("CWE667_Improper_Locking__basic_15.c":131:5)
#loc64 = loc("CWE667_Improper_Locking__basic_15.c":132:5)
#loc65 = loc("CWE667_Improper_Locking__basic_15.c":132:44)
#loc66 = loc("CWE667_Improper_Locking__basic_15.c":133:5)
#loc67 = loc("CWE667_Improper_Locking__basic_15.c":136:5)
#loc68 = loc("CWE667_Improper_Locking__basic_15.c":137:5)
#loc69 = loc("CWE667_Improper_Locking__basic_15.c":137:43)
#loc70 = loc("CWE667_Improper_Locking__basic_15.c":138:5)
#loc71 = loc("CWE667_Improper_Locking__basic_15.c":140:12)
#loc72 = loc("CWE667_Improper_Locking__basic_15.c":140:5)
#loc73 = loc("CWE667_Improper_Locking__basic_15.c":72:19)
#loc74 = loc("../../testcasesupport/std_thread.h":20:1)
#loc75 = loc("../../testcasesupport/std_thread.h":20:45)
#loc76 = loc("CWE667_Improper_Locking__basic_15.c":74:19)
#loc77 = loc("../../testcasesupport/std_thread.h":21:1)
#loc78 = loc("../../testcasesupport/std_thread.h":21:45)
#loc79 = loc("CWE667_Improper_Locking__basic_15.c":52:1)
#loc80 = loc("CWE667_Improper_Locking__basic_15.c":79:1)
#loc81 = loc("CWE667_Improper_Locking__basic_15.c":54:5)
#loc82 = loc("CWE667_Improper_Locking__basic_15.c":78:5)
#loc83 = loc("CWE667_Improper_Locking__basic_15.c":54:12)
#loc84 = loc("CWE667_Improper_Locking__basic_15.c":56:5)
#loc85 = loc("CWE667_Improper_Locking__basic_15.c":58:19)
#loc86 = loc("CWE667_Improper_Locking__basic_15.c":58:9)
#loc87 = loc("CWE667_Improper_Locking__basic_15.c":59:9)
#loc88 = loc("CWE667_Improper_Locking__basic_15.c":60:5)
#loc89 = loc("CWE667_Improper_Locking__basic_15.c":61:5)
#loc90 = loc("CWE667_Improper_Locking__basic_15.c":76:5)
#loc91 = loc("CWE667_Improper_Locking__basic_15.c":63:19)
#loc92 = loc("CWE667_Improper_Locking__basic_15.c":63:9)
#loc93 = loc("CWE667_Improper_Locking__basic_15.c":64:9)
#loc94 = loc("CWE667_Improper_Locking__basic_15.c":68:9)
#loc95 = loc("CWE667_Improper_Locking__basic_15.c":64:14)
#loc96 = loc("CWE667_Improper_Locking__basic_15.c":65:9)
#loc97 = loc("CWE667_Improper_Locking__basic_15.c":66:23)
#loc98 = loc("CWE667_Improper_Locking__basic_15.c":66:13)
#loc99 = loc("CWE667_Improper_Locking__basic_15.c":67:13)
#loc100 = loc("CWE667_Improper_Locking__basic_15.c":67:18)
#loc101 = loc("CWE667_Improper_Locking__basic_15.c":69:19)
#loc102 = loc("CWE667_Improper_Locking__basic_15.c":69:9)
#loc103 = loc("CWE667_Improper_Locking__basic_15.c":70:30)
#loc104 = loc("CWE667_Improper_Locking__basic_15.c":70:9)
#loc105 = loc("CWE667_Improper_Locking__basic_15.c":72:9)
#loc106 = loc("CWE667_Improper_Locking__basic_15.c":73:30)
#loc107 = loc("CWE667_Improper_Locking__basic_15.c":73:9)
#loc108 = loc("CWE667_Improper_Locking__basic_15.c":74:9)
#loc109 = loc("CWE667_Improper_Locking__basic_15.c":75:30)
#loc110 = loc("CWE667_Improper_Locking__basic_15.c":75:9)
#loc111 = loc("CWE667_Improper_Locking__basic_15.c":77:5)
#loc112 = loc("CWE667_Improper_Locking__basic_15.c":82:1)
#loc113 = loc("CWE667_Improper_Locking__basic_15.c":109:1)
#loc114 = loc("CWE667_Improper_Locking__basic_15.c":84:5)
#loc115 = loc("CWE667_Improper_Locking__basic_15.c":108:5)
#loc116 = loc("CWE667_Improper_Locking__basic_15.c":84:12)
#loc117 = loc("CWE667_Improper_Locking__basic_15.c":86:5)
#loc118 = loc("CWE667_Improper_Locking__basic_15.c":87:5)
#loc119 = loc("CWE667_Improper_Locking__basic_15.c":102:5)
#loc120 = loc("CWE667_Improper_Locking__basic_15.c":89:19)
#loc121 = loc("CWE667_Improper_Locking__basic_15.c":89:9)
#loc122 = loc("CWE667_Improper_Locking__basic_15.c":90:9)
#loc123 = loc("CWE667_Improper_Locking__basic_15.c":94:9)
#loc124 = loc("CWE667_Improper_Locking__basic_15.c":90:14)
#loc125 = loc("CWE667_Improper_Locking__basic_15.c":91:9)
#loc126 = loc("CWE667_Improper_Locking__basic_15.c":92:23)
#loc127 = loc("CWE667_Improper_Locking__basic_15.c":92:13)
#loc128 = loc("CWE667_Improper_Locking__basic_15.c":93:13)
#loc129 = loc("CWE667_Improper_Locking__basic_15.c":93:18)
#loc130 = loc("CWE667_Improper_Locking__basic_15.c":95:19)
#loc131 = loc("CWE667_Improper_Locking__basic_15.c":95:9)
#loc132 = loc("CWE667_Improper_Locking__basic_15.c":96:30)
#loc133 = loc("CWE667_Improper_Locking__basic_15.c":96:9)
#loc134 = loc("CWE667_Improper_Locking__basic_15.c":98:19)
#loc135 = loc("CWE667_Improper_Locking__basic_15.c":98:9)
#loc136 = loc("CWE667_Improper_Locking__basic_15.c":99:30)
#loc137 = loc("CWE667_Improper_Locking__basic_15.c":99:9)
#loc138 = loc("CWE667_Improper_Locking__basic_15.c":100:19)
#loc139 = loc("CWE667_Improper_Locking__basic_15.c":100:9)
#loc140 = loc("CWE667_Improper_Locking__basic_15.c":101:30)
#loc141 = loc("CWE667_Improper_Locking__basic_15.c":101:9)
#loc142 = loc("CWE667_Improper_Locking__basic_15.c":103:5)
#loc143 = loc("CWE667_Improper_Locking__basic_15.c":104:5)
#loc144 = loc("CWE667_Improper_Locking__basic_15.c":106:19)
#loc145 = loc("CWE667_Improper_Locking__basic_15.c":106:9)
#loc146 = loc("CWE667_Improper_Locking__basic_15.c":107:9)
#loc147 = loc(fused[#loc4, #loc5])
#loc148 = loc(fused[#loc7, #loc8])
#loc149 = loc(fused[#loc10, #loc11])
#loc150 = loc(fused[#loc13, #loc14])
#loc151 = loc(fused[#loc16, #loc17])
#loc152 = loc(fused[#loc18, #loc19])
#loc153 = loc(fused[#loc22, #loc23])
#loc154 = loc(fused[#loc25, #loc26])
#loc155 = loc(fused[#loc28, #loc26])
#loc156 = loc(fused[#loc39, #loc40])
#loc157 = loc(fused[#loc41, #loc42])
#loc158 = loc(fused[#loc43, #loc44])
#loc159 = loc(fused[#loc45, #loc46])
#loc160 = loc(fused[#loc47, #loc48])
#loc161 = loc(fused[#loc53, #loc54])
#loc164 = loc(fused[#loc64, #loc65])
#loc165 = loc(fused[#loc68, #loc69])
#loc166 = loc(fused[#loc72, #loc71])
#loc167 = loc(fused[#loc74, #loc75])
#loc168 = loc(fused[#loc77, #loc78])
#loc169 = loc(fused[#loc79, #loc80])
#loc170 = loc(fused[#loc81, #loc82])
#loc171 = loc(fused[#loc89, #loc90])
#loc172 = loc(fused[#loc93, #loc94])
#loc173 = loc(fused[#loc96, #loc94])
#loc174 = loc(fused[#loc112, #loc113])
#loc175 = loc(fused[#loc114, #loc115])
#loc176 = loc(fused[#loc118, #loc119])
#loc177 = loc(fused[#loc122, #loc123])
#loc178 = loc(fused[#loc125, #loc123])
