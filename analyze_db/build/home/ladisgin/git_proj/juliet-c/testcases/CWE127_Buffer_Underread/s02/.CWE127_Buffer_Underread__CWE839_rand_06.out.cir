!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!u32i = !cir.int<u, 32>
!void = !cir.void
#false = #cir.bool<false> : !cir.bool
#fn_attr = #cir<extra({nothrow = #cir.nothrow})>
#fn_attr1 = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
#loc62 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":202:10)
#loc63 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":202:14)
#loc64 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":202:20)
#loc65 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":202:32)
#true = #cir.bool<true> : !cir.bool
#loc262 = loc(fused[#loc62, #loc63])
#loc263 = loc(fused[#loc64, #loc65])
module @"/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_06.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<f80 = dense<128> : vector<2xi64>, i128 = dense<128> : vector<2xi64>, i16 = dense<16> : vector<2xi64>, i8 = dense<8> : vector<2xi64>, !llvm.ptr = dense<64> : vector<4xi64>, i1 = dense<8> : vector<2xi64>, f16 = dense<16> : vector<2xi64>, f128 = dense<128> : vector<2xi64>, !llvm.ptr<270> = dense<32> : vector<4xi64>, f64 = dense<64> : vector<2xi64>, i32 = dense<32> : vector<2xi64>, i64 = dense<64> : vector<2xi64>, !llvm.ptr<271> = dense<32> : vector<4xi64>, !llvm.ptr<272> = dense<64> : vector<4xi64>, "dlti.stack_alignment" = 128 : i64, "dlti.endianness" = "little">} {
  cir.func private @rand() -> !s32i extra(#fn_attr) loc(#loc236)
  cir.func private @printIntLine(!s32i) loc(#loc237)
  cir.func private @printLine(!cir.ptr<!s8i>) loc(#loc238)
  cir.global "private" constant cir_private dsolocal @".str" = #cir.const_array<"ERROR: Array index is too big.\00" : !cir.array<!s8i x 31>> : !cir.array<!s8i x 31> {alignment = 1 : i64} loc(#loc7)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_06_bad() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc240)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc12)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc13)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc241)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc17)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc18)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc243)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc20)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc20)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc20)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          cir.yield %23 : !u32i loc(#loc20)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc20)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc20)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc20)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc20)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc20)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc20)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc20)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc20)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc20)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc20)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc20)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc20)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc20)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc20)
          cir.yield %27 : !u32i loc(#loc20)
        }) : (!cir.bool) -> !u32i loc(#loc20)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc20)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc245)
      } loc(#loc244)
    } loc(#loc242)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc24)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc25)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc247)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc250)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc250)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc250)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc33)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc34)
            %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc252)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc38)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc39)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc39)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc39)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc40)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc7)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc7)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc41)
            } loc(#loc253)
          } loc(#loc251)
        } loc(#loc249)
      } loc(#loc248)
    } loc(#loc246)
    cir.return loc(#loc9)
  } loc(#loc239)
  cir.func no_proto @CWE127_Buffer_Underread__CWE839_rand_06_good() extra(#fn_attr1) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc255)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc44)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc256)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc257)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc258)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    cir.return loc(#loc43)
  } loc(#loc254)
  cir.func private @srand(!u32i) extra(#fn_attr) loc(#loc259)
  cir.func private @time(!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc260)
  cir.global "private" constant cir_private dsolocal @".str.1" = #cir.const_array<"Calling good()...\00" : !cir.array<!s8i x 18>> : !cir.array<!s8i x 18> {alignment = 1 : i64} loc(#loc56)
  cir.global "private" constant cir_private dsolocal @".str.2" = #cir.const_array<"Finished good()\00" : !cir.array<!s8i x 16>> : !cir.array<!s8i x 16> {alignment = 1 : i64} loc(#loc57)
  cir.global "private" constant cir_private dsolocal @".str.3" = #cir.const_array<"Calling bad()...\00" : !cir.array<!s8i x 17>> : !cir.array<!s8i x 17> {alignment = 1 : i64} loc(#loc58)
  cir.global "private" constant cir_private dsolocal @".str.4" = #cir.const_array<"Finished bad()\00" : !cir.array<!s8i x 15>> : !cir.array<!s8i x 15> {alignment = 1 : i64} loc(#loc59)
  cir.func @main(%arg0: !s32i loc(fused[#loc62, #loc63]), %arg1: !cir.ptr<!cir.ptr<!s8i>> loc(fused[#loc64, #loc65])) -> !s32i extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["argc", init] {alignment = 4 : i64} loc(#loc262)
    %1 = cir.alloca !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>>, ["argv", init] {alignment = 8 : i64} loc(#loc263)
    %2 = cir.alloca !s32i, !cir.ptr<!s32i>, ["__retval"] {alignment = 4 : i64} loc(#loc61)
    cir.store %arg0, %0 : !s32i, !cir.ptr<!s32i> loc(#loc66)
    cir.store %arg1, %1 : !cir.ptr<!cir.ptr<!s8i>>, !cir.ptr<!cir.ptr<!cir.ptr<!s8i>>> loc(#loc66)
    %3 = cir.const #cir.ptr<null> : !cir.ptr<!s64i> loc(#loc67)
    %4 = cir.call @time(%3) : (!cir.ptr<!s64i>) -> !s64i extra(#fn_attr) loc(#loc68)
    %5 = cir.cast(integral, %4 : !s64i), !u32i loc(#loc68)
    cir.call @srand(%5) : (!u32i) -> () extra(#fn_attr) loc(#loc69)
    %6 = cir.get_global @".str.1" : !cir.ptr<!cir.array<!s8i x 18>> loc(#loc56)
    %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 18>>), !cir.ptr<!s8i> loc(#loc56)
    cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc70)
    %8 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_06_good : !cir.ptr<!cir.func<!void ()>> loc(#loc264)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_06_good() : () -> () loc(#loc71)
    %9 = cir.get_global @".str.2" : !cir.ptr<!cir.array<!s8i x 16>> loc(#loc57)
    %10 = cir.cast(array_to_ptrdecay, %9 : !cir.ptr<!cir.array<!s8i x 16>>), !cir.ptr<!s8i> loc(#loc57)
    cir.call @printLine(%10) : (!cir.ptr<!s8i>) -> () loc(#loc73)
    %11 = cir.get_global @".str.3" : !cir.ptr<!cir.array<!s8i x 17>> loc(#loc58)
    %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 17>>), !cir.ptr<!s8i> loc(#loc58)
    cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc74)
    %13 = cir.get_global @CWE127_Buffer_Underread__CWE839_rand_06_bad : !cir.ptr<!cir.func<!void ()>> loc(#loc265)
    cir.call @CWE127_Buffer_Underread__CWE839_rand_06_bad() : () -> () loc(#loc75)
    %14 = cir.get_global @".str.4" : !cir.ptr<!cir.array<!s8i x 15>> loc(#loc59)
    %15 = cir.cast(array_to_ptrdecay, %14 : !cir.ptr<!cir.array<!s8i x 15>>), !cir.ptr<!s8i> loc(#loc59)
    cir.call @printLine(%15) : (!cir.ptr<!s8i>) -> () loc(#loc77)
    %16 = cir.const #cir.int<0> : !s32i loc(#loc78)
    cir.store %16, %2 : !s32i, !cir.ptr<!s32i> loc(#loc266)
    %17 = cir.load %2 : !cir.ptr<!s32i>, !s32i loc(#loc266)
    cir.return %17 : !s32i loc(#loc266)
  } loc(#loc261)
  cir.global "private" constant cir_private dsolocal @".str.5" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc80)
  cir.global "private" constant cir_private dsolocal @".str.6" = #cir.const_array<"ERROR: Array index is out-of-bounds\00" : !cir.array<!s8i x 36>> : !cir.array<!s8i x 36> {alignment = 1 : i64} loc(#loc81)
  cir.func no_proto internal private @goodB2G1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc268)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc86)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc87)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc269)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc91)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc92)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc271)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc94)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc94)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc94)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc94)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc94)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc94)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc94)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc94)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc94)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc94)
          cir.yield %23 : !u32i loc(#loc94)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc94)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc94)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc94)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc94)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc94)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc94)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc94)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc94)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc94)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc94)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc94)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc94)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc94)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc94)
          cir.yield %27 : !u32i loc(#loc94)
        }) : (!cir.bool) -> !u32i loc(#loc94)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc94)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc273)
      } loc(#loc272)
    } loc(#loc270)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc98)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc99)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc275)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc80)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc80)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc103)
      } else {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc278)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc278)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc278)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc110)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc111)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc280)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc113)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc114)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc281)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc112)
                cir.yield %16 : !cir.bool loc(#loc112)
              }, false {
                %16 = cir.const #false loc(#loc112)
                cir.yield %16 : !cir.bool loc(#loc112)
              }) : (!cir.bool) -> !cir.bool loc(#loc112)
              cir.yield %15 : !cir.bool loc(#loc112)
            }, false {
              %12 = cir.const #false loc(#loc112)
              cir.yield %12 : !cir.bool loc(#loc112)
            }) : (!cir.bool) -> !cir.bool loc(#loc112)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc119)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc120)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc120)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc120)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc121)
            } else {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc81)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc81)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc122)
            } loc(#loc282)
          } loc(#loc279)
        } loc(#loc277)
      } loc(#loc276)
    } loc(#loc274)
    cir.return loc(#loc83)
  } loc(#loc267)
  cir.func no_proto internal private @goodB2G2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc284)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc127)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc128)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc285)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc132)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc133)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc287)
      cir.if %5 {
        %6 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
        %7 = cir.const #cir.int<1> : !s32i loc(#loc135)
        %8 = cir.binop(and, %6, %7) : !s32i loc(#loc135)
        %9 = cir.cast(int_to_bool, %8 : !s32i), !cir.bool loc(#loc135)
        %10 = cir.ternary(%9, true {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc135)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc135)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc135)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc135)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc135)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc135)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc135)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc135)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc135)
          cir.yield %23 : !u32i loc(#loc135)
        }, false {
          %12 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %13 = cir.cast(integral, %12 : !s32i), !u32i loc(#loc135)
          %14 = cir.const #cir.int<30> : !s32i loc(#loc135)
          %15 = cir.shift(left, %13 : !u32i, %14 : !s32i) -> !u32i loc(#loc135)
          %16 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %17 = cir.cast(integral, %16 : !s32i), !u32i loc(#loc135)
          %18 = cir.const #cir.int<15> : !s32i loc(#loc135)
          %19 = cir.shift(left, %17 : !u32i, %18 : !s32i) -> !u32i loc(#loc135)
          %20 = cir.binop(xor, %15, %19) : !u32i loc(#loc135)
          %21 = cir.call @rand() : () -> !s32i extra(#fn_attr) loc(#loc135)
          %22 = cir.cast(integral, %21 : !s32i), !u32i loc(#loc135)
          %23 = cir.binop(xor, %20, %22) : !u32i loc(#loc135)
          %24 = cir.unary(minus, %23) : !u32i, !u32i loc(#loc135)
          %25 = cir.const #cir.int<1> : !s32i loc(#loc135)
          %26 = cir.cast(integral, %25 : !s32i), !u32i loc(#loc135)
          %27 = cir.binop(sub, %24, %26) : !u32i loc(#loc135)
          cir.yield %27 : !u32i loc(#loc135)
        }) : (!cir.bool) -> !u32i loc(#loc135)
        %11 = cir.cast(integral, %10 : !u32i), !s32i loc(#loc135)
        cir.store %11, %0 : !s32i, !cir.ptr<!s32i> loc(#loc289)
      } loc(#loc288)
    } loc(#loc286)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc139)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc140)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc291)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc294)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc294)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc294)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc148)
            %9 = cir.const #cir.int<0> : !s32i loc(#loc149)
            %10 = cir.cmp(ge, %8, %9) : !s32i, !cir.bool loc(#loc296)
            %11 = cir.ternary(%10, true {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc151)
              %13 = cir.const #cir.int<10> : !s32i loc(#loc152)
              %14 = cir.cmp(lt, %12, %13) : !s32i, !cir.bool loc(#loc297)
              %15 = cir.ternary(%14, true {
                %16 = cir.const #true loc(#loc150)
                cir.yield %16 : !cir.bool loc(#loc150)
              }, false {
                %16 = cir.const #false loc(#loc150)
                cir.yield %16 : !cir.bool loc(#loc150)
              }) : (!cir.bool) -> !cir.bool loc(#loc150)
              cir.yield %15 : !cir.bool loc(#loc150)
            }, false {
              %12 = cir.const #false loc(#loc150)
              cir.yield %12 : !cir.bool loc(#loc150)
            }) : (!cir.bool) -> !cir.bool loc(#loc150)
            cir.if %11 {
              %12 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc157)
              %13 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc158)
              %14 = cir.ptr_stride(%13 : !cir.ptr<!s32i>, %12 : !s32i), !cir.ptr<!s32i> loc(#loc158)
              %15 = cir.load %14 : !cir.ptr<!s32i>, !s32i loc(#loc158)
              cir.call @printIntLine(%15) : (!s32i) -> () loc(#loc159)
            } else {
              %12 = cir.get_global @".str.6" : !cir.ptr<!cir.array<!s8i x 36>> loc(#loc160)
              %13 = cir.cast(array_to_ptrdecay, %12 : !cir.ptr<!cir.array<!s8i x 36>>), !cir.ptr<!s8i> loc(#loc160)
              cir.call @printLine(%13) : (!cir.ptr<!s8i>) -> () loc(#loc161)
            } loc(#loc298)
          } loc(#loc295)
        } loc(#loc293)
      } loc(#loc292)
    } loc(#loc290)
    cir.return loc(#loc124)
  } loc(#loc283)
  cir.func no_proto internal private @goodG2B1() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc300)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc166)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc167)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc301)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc171)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc172)
      %5 = cir.cmp(ne, %3, %4) : !s32i, !cir.bool loc(#loc303)
      cir.if %5 {
        %6 = cir.get_global @".str.5" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc176)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc176)
        cir.call @printLine(%7) : (!cir.ptr<!s8i>) -> () loc(#loc177)
      } else {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc178)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc305)
      } loc(#loc304)
    } loc(#loc302)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc182)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc183)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc307)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc310)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc310)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc310)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc191)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc192)
            %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc312)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc196)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc197)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc197)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc197)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc198)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc199)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc199)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc200)
            } loc(#loc313)
          } loc(#loc311)
        } loc(#loc309)
      } loc(#loc308)
    } loc(#loc306)
    cir.return loc(#loc163)
  } loc(#loc299)
  cir.func no_proto internal private @goodG2B2() extra(#fn_attr1) {
    %0 = cir.alloca !s32i, !cir.ptr<!s32i>, ["data"] {alignment = 4 : i64} loc(#loc315)
    %1 = cir.const #cir.int<1> : !s32i loc(#loc205)
    %2 = cir.unary(minus, %1) : !s32i, !s32i loc(#loc206)
    cir.store %2, %0 : !s32i, !cir.ptr<!s32i> loc(#loc316)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc210)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc211)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc318)
      cir.if %5 {
        %6 = cir.const #cir.int<7> : !s32i loc(#loc213)
        cir.store %6, %0 : !s32i, !cir.ptr<!s32i> loc(#loc320)
      } loc(#loc319)
    } loc(#loc317)
    cir.scope {
      %3 = cir.const #cir.int<5> : !s32i loc(#loc217)
      %4 = cir.const #cir.int<5> : !s32i loc(#loc218)
      %5 = cir.cmp(eq, %3, %4) : !s32i, !cir.bool loc(#loc322)
      cir.if %5 {
        cir.scope {
          %6 = cir.alloca !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>>, ["buffer"] {alignment = 16 : i64} loc(#loc325)
          %7 = cir.const #cir.zero : !cir.array<!s32i x 10> loc(#loc325)
          cir.store %7, %6 : !cir.array<!s32i x 10>, !cir.ptr<!cir.array<!s32i x 10>> loc(#loc325)
          cir.scope {
            %8 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc226)
            %9 = cir.const #cir.int<10> : !s32i loc(#loc227)
            %10 = cir.cmp(lt, %8, %9) : !s32i, !cir.bool loc(#loc327)
            cir.if %10 {
              %11 = cir.load %0 : !cir.ptr<!s32i>, !s32i loc(#loc231)
              %12 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s32i x 10>>), !cir.ptr<!s32i> loc(#loc232)
              %13 = cir.ptr_stride(%12 : !cir.ptr<!s32i>, %11 : !s32i), !cir.ptr<!s32i> loc(#loc232)
              %14 = cir.load %13 : !cir.ptr<!s32i>, !s32i loc(#loc232)
              cir.call @printIntLine(%14) : (!s32i) -> () loc(#loc233)
            } else {
              %11 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 31>> loc(#loc234)
              %12 = cir.cast(array_to_ptrdecay, %11 : !cir.ptr<!cir.array<!s8i x 31>>), !cir.ptr<!s8i> loc(#loc234)
              cir.call @printLine(%12) : (!cir.ptr<!s8i>) -> () loc(#loc235)
            } loc(#loc328)
          } loc(#loc326)
        } loc(#loc324)
      } loc(#loc323)
    } loc(#loc321)
    cir.return loc(#loc202)
  } loc(#loc314)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/juliet-c/testcases/CWE127_Buffer_Underread/s02/CWE127_Buffer_Underread__CWE839_rand_06.c":0:0)
#loc1 = loc("/usr/include/stdlib.h":573:1)
#loc2 = loc("/usr/include/stdlib.h":573:24)
#loc3 = loc("../../../testcasesupport/std_testcase_io.h":18:1)
#loc4 = loc("../../../testcasesupport/std_testcase_io.h":18:33)
#loc5 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc6 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc7 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":49:27)
#loc8 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":27:1)
#loc9 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":53:1)
#loc10 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":29:5)
#loc11 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":29:9)
#loc12 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":31:13)
#loc13 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":31:12)
#loc14 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":31:5)
#loc15 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":32:5)
#loc16 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":36:5)
#loc17 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":32:8)
#loc18 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":32:27)
#loc19 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":33:5)
#loc20 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":35:16)
#loc21 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":35:9)
#loc22 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":37:5)
#loc23 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":52:5)
#loc24 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":37:8)
#loc25 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":37:27)
#loc26 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":38:5)
#loc27 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":39:9)
#loc28 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":51:9)
#loc29 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":40:13)
#loc30 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":40:34)
#loc31 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":43:13)
#loc32 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":50:13)
#loc33 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":43:17)
#loc34 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":43:24)
#loc35 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":44:13)
#loc36 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":46:13)
#loc37 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":48:13)
#loc38 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":45:37)
#loc39 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":45:30)
#loc40 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":45:17)
#loc41 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":49:17)
#loc42 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":185:1)
#loc43 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":191:1)
#loc44 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":187:5)
#loc45 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":187:14)
#loc46 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":188:5)
#loc47 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":188:14)
#loc48 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":189:5)
#loc49 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":189:14)
#loc50 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":190:5)
#loc51 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":190:14)
#loc52 = loc("/usr/include/stdlib.h":575:1)
#loc53 = loc("/usr/include/stdlib.h":575:41)
#loc54 = loc("/usr/include/time.h":76:1)
#loc55 = loc("/usr/include/time.h":76:38)
#loc56 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":207:15)
#loc57 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":209:15)
#loc58 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":212:15)
#loc59 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":214:15)
#loc60 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":202:1)
#loc61 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":217:1)
#loc66 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":203:1)
#loc67 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":205:27)
#loc68 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":205:22)
#loc69 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":205:5)
#loc70 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":207:5)
#loc71 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":208:5)
#loc72 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":208:50)
#loc73 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":209:5)
#loc74 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":212:5)
#loc75 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":213:5)
#loc76 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":213:49)
#loc77 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":214:5)
#loc78 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":216:12)
#loc79 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":216:5)
#loc80 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":73:19)
#loc81 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":86:27)
#loc82 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":60:1)
#loc83 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":90:1)
#loc84 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":62:5)
#loc85 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":62:9)
#loc86 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":64:13)
#loc87 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":64:12)
#loc88 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":64:5)
#loc89 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":65:5)
#loc90 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":69:5)
#loc91 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":65:8)
#loc92 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":65:27)
#loc93 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":66:5)
#loc94 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":68:16)
#loc95 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":68:9)
#loc96 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":70:5)
#loc97 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":89:5)
#loc98 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":70:8)
#loc99 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":70:27)
#loc100 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":71:5)
#loc101 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":74:5)
#loc102 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":76:5)
#loc103 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":73:9)
#loc104 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":77:9)
#loc105 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":88:9)
#loc106 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":78:13)
#loc107 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":78:34)
#loc108 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:13)
#loc109 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":87:13)
#loc110 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:17)
#loc111 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:25)
#loc112 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:27)
#loc113 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:30)
#loc114 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:38)
#loc115 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":80:40)
#loc116 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":81:13)
#loc117 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":83:13)
#loc118 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":85:13)
#loc119 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":82:37)
#loc120 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":82:30)
#loc121 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":82:17)
#loc122 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":86:17)
#loc123 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":93:1)
#loc124 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":118:1)
#loc125 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":95:5)
#loc126 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":95:9)
#loc127 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":97:13)
#loc128 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":97:12)
#loc129 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":97:5)
#loc130 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":98:5)
#loc131 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":102:5)
#loc132 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":98:8)
#loc133 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":98:27)
#loc134 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":99:5)
#loc135 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":101:16)
#loc136 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":101:9)
#loc137 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":103:5)
#loc138 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":117:5)
#loc139 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":103:8)
#loc140 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":103:27)
#loc141 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":104:5)
#loc142 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":105:9)
#loc143 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":116:9)
#loc144 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":106:13)
#loc145 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":106:34)
#loc146 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:13)
#loc147 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":115:13)
#loc148 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:17)
#loc149 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:25)
#loc150 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:27)
#loc151 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:30)
#loc152 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:38)
#loc153 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":108:40)
#loc154 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":109:13)
#loc155 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":111:13)
#loc156 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":113:13)
#loc157 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":110:37)
#loc158 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":110:30)
#loc159 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":110:17)
#loc160 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":114:27)
#loc161 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":114:17)
#loc162 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":121:1)
#loc163 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":153:1)
#loc164 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":123:5)
#loc165 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":123:9)
#loc166 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":125:13)
#loc167 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":125:12)
#loc168 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":125:5)
#loc169 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":126:5)
#loc170 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":136:5)
#loc171 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":126:8)
#loc172 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":126:27)
#loc173 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":127:5)
#loc174 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":130:5)
#loc175 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":132:5)
#loc176 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":129:19)
#loc177 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":129:9)
#loc178 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":135:16)
#loc179 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":135:9)
#loc180 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":137:5)
#loc181 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":152:5)
#loc182 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":137:8)
#loc183 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":137:27)
#loc184 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":138:5)
#loc185 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":139:9)
#loc186 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":151:9)
#loc187 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":140:13)
#loc188 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":140:34)
#loc189 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":143:13)
#loc190 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":150:13)
#loc191 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":143:17)
#loc192 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":143:24)
#loc193 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":144:13)
#loc194 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":146:13)
#loc195 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":148:13)
#loc196 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":145:37)
#loc197 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":145:30)
#loc198 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":145:17)
#loc199 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":149:27)
#loc200 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":149:17)
#loc201 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":156:1)
#loc202 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":183:1)
#loc203 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":158:5)
#loc204 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":158:9)
#loc205 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":160:13)
#loc206 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":160:12)
#loc207 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":160:5)
#loc208 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":161:5)
#loc209 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":166:5)
#loc210 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":161:8)
#loc211 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":161:27)
#loc212 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":162:5)
#loc213 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":165:16)
#loc214 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":165:9)
#loc215 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":167:5)
#loc216 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":182:5)
#loc217 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":167:8)
#loc218 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":167:27)
#loc219 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":168:5)
#loc220 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":169:9)
#loc221 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":181:9)
#loc222 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":170:13)
#loc223 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":170:34)
#loc224 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":173:13)
#loc225 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":180:13)
#loc226 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":173:17)
#loc227 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":173:24)
#loc228 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":174:13)
#loc229 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":176:13)
#loc230 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":178:13)
#loc231 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":175:37)
#loc232 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":175:30)
#loc233 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":175:17)
#loc234 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":179:27)
#loc235 = loc("CWE127_Buffer_Underread__CWE839_rand_06.c":179:17)
#loc236 = loc(fused[#loc1, #loc2])
#loc237 = loc(fused[#loc3, #loc4])
#loc238 = loc(fused[#loc5, #loc6])
#loc239 = loc(fused[#loc8, #loc9])
#loc240 = loc(fused[#loc10, #loc11])
#loc241 = loc(fused[#loc14, #loc12])
#loc242 = loc(fused[#loc15, #loc16])
#loc243 = loc(fused[#loc17, #loc18])
#loc244 = loc(fused[#loc19, #loc16])
#loc245 = loc(fused[#loc21, #loc20])
#loc246 = loc(fused[#loc22, #loc23])
#loc247 = loc(fused[#loc24, #loc25])
#loc248 = loc(fused[#loc26, #loc23])
#loc249 = loc(fused[#loc27, #loc28])
#loc250 = loc(fused[#loc29, #loc30])
#loc251 = loc(fused[#loc31, #loc32])
#loc252 = loc(fused[#loc33, #loc34])
#loc253 = loc(fused[#loc35, #loc36, #loc37, #loc32])
#loc254 = loc(fused[#loc42, #loc43])
#loc255 = loc(fused[#loc44, #loc45])
#loc256 = loc(fused[#loc46, #loc47])
#loc257 = loc(fused[#loc48, #loc49])
#loc258 = loc(fused[#loc50, #loc51])
#loc259 = loc(fused[#loc52, #loc53])
#loc260 = loc(fused[#loc54, #loc55])
#loc261 = loc(fused[#loc60, #loc61])
#loc264 = loc(fused[#loc71, #loc72])
#loc265 = loc(fused[#loc75, #loc76])
#loc266 = loc(fused[#loc79, #loc78])
#loc267 = loc(fused[#loc82, #loc83])
#loc268 = loc(fused[#loc84, #loc85])
#loc269 = loc(fused[#loc88, #loc86])
#loc270 = loc(fused[#loc89, #loc90])
#loc271 = loc(fused[#loc91, #loc92])
#loc272 = loc(fused[#loc93, #loc90])
#loc273 = loc(fused[#loc95, #loc94])
#loc274 = loc(fused[#loc96, #loc97])
#loc275 = loc(fused[#loc98, #loc99])
#loc276 = loc(fused[#loc100, #loc101, #loc102, #loc97])
#loc277 = loc(fused[#loc104, #loc105])
#loc278 = loc(fused[#loc106, #loc107])
#loc279 = loc(fused[#loc108, #loc109])
#loc280 = loc(fused[#loc110, #loc111])
#loc281 = loc(fused[#loc113, #loc115])
#loc282 = loc(fused[#loc116, #loc117, #loc118, #loc109])
#loc283 = loc(fused[#loc123, #loc124])
#loc284 = loc(fused[#loc125, #loc126])
#loc285 = loc(fused[#loc129, #loc127])
#loc286 = loc(fused[#loc130, #loc131])
#loc287 = loc(fused[#loc132, #loc133])
#loc288 = loc(fused[#loc134, #loc131])
#loc289 = loc(fused[#loc136, #loc135])
#loc290 = loc(fused[#loc137, #loc138])
#loc291 = loc(fused[#loc139, #loc140])
#loc292 = loc(fused[#loc141, #loc138])
#loc293 = loc(fused[#loc142, #loc143])
#loc294 = loc(fused[#loc144, #loc145])
#loc295 = loc(fused[#loc146, #loc147])
#loc296 = loc(fused[#loc148, #loc149])
#loc297 = loc(fused[#loc151, #loc153])
#loc298 = loc(fused[#loc154, #loc155, #loc156, #loc147])
#loc299 = loc(fused[#loc162, #loc163])
#loc300 = loc(fused[#loc164, #loc165])
#loc301 = loc(fused[#loc168, #loc166])
#loc302 = loc(fused[#loc169, #loc170])
#loc303 = loc(fused[#loc171, #loc172])
#loc304 = loc(fused[#loc173, #loc174, #loc175, #loc170])
#loc305 = loc(fused[#loc179, #loc178])
#loc306 = loc(fused[#loc180, #loc181])
#loc307 = loc(fused[#loc182, #loc183])
#loc308 = loc(fused[#loc184, #loc181])
#loc309 = loc(fused[#loc185, #loc186])
#loc310 = loc(fused[#loc187, #loc188])
#loc311 = loc(fused[#loc189, #loc190])
#loc312 = loc(fused[#loc191, #loc192])
#loc313 = loc(fused[#loc193, #loc194, #loc195, #loc190])
#loc314 = loc(fused[#loc201, #loc202])
#loc315 = loc(fused[#loc203, #loc204])
#loc316 = loc(fused[#loc207, #loc205])
#loc317 = loc(fused[#loc208, #loc209])
#loc318 = loc(fused[#loc210, #loc211])
#loc319 = loc(fused[#loc212, #loc209])
#loc320 = loc(fused[#loc214, #loc213])
#loc321 = loc(fused[#loc215, #loc216])
#loc322 = loc(fused[#loc217, #loc218])
#loc323 = loc(fused[#loc219, #loc216])
#loc324 = loc(fused[#loc220, #loc221])
#loc325 = loc(fused[#loc222, #loc223])
#loc326 = loc(fused[#loc224, #loc225])
#loc327 = loc(fused[#loc226, #loc227])
#loc328 = loc(fused[#loc228, #loc229, #loc230, #loc225])
