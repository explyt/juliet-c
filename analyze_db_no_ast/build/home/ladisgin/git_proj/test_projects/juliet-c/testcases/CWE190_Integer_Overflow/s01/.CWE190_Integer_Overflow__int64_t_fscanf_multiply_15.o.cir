!s32i = !cir.int<s, 32>
!s64i = !cir.int<s, 64>
!s8i = !cir.int<s, 8>
!ty__IO_codecvt = !cir.struct<struct "_IO_codecvt" incomplete>
!ty__IO_marker = !cir.struct<struct "_IO_marker" incomplete>
!ty__IO_wide_data = !cir.struct<struct "_IO_wide_data" incomplete>
!u16i = !cir.int<u, 16>
!u64i = !cir.int<u, 64>
!void = !cir.void
#fn_attr = #cir<extra({inline = #cir.inline<no>, nothrow = #cir.nothrow, optnone = #cir.optnone})>
!ty__IO_FILE = !cir.struct<struct "_IO_FILE" {!s32i, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!s8i>, !cir.ptr<!ty__IO_marker>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !s32i, !s32i, !s64i, !u16i, !s8i, !cir.array<!s8i x 1>, !cir.ptr<!void>, !s64i, !cir.ptr<!ty__IO_codecvt>, !cir.ptr<!ty__IO_wide_data>, !cir.ptr<!cir.struct<struct "_IO_FILE">>, !cir.ptr<!void>, !u64i, !s32i, !cir.array<!s8i x 20>} #cir.record.decl.ast>
module @"/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c" attributes {cir.lang = #cir.lang<c>, cir.sob = #cir.signed_overflow_behavior<undefined>, cir.triple = "x86_64-unknown-linux-gnu", dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i128, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>, #dlti.dl_entry<"dlti.endianness", "little">>, llvm.data_layout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"} {
  cir.func private  @__isoc99_fscanf(!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...) -> !s32i loc(#loc214)
  cir.global "private"  external @stdin : !cir.ptr<!ty__IO_FILE> {alignment = 8 : i64} loc(#loc215)
  cir.global "private"  constant internal dsolocal @".str" = #cir.const_array<"%ld\00" : !cir.array<!s8i x 4>> : !cir.array<!s8i x 4> {alignment = 1 : i64} loc(#loc216)
  cir.func private  @printLine(!cir.ptr<!s8i>) loc(#loc217)
  cir.global "private"  constant internal dsolocal @".str1" = #cir.const_array<"Benign, fixed string\00" : !cir.array<!s8i x 21>> : !cir.array<!s8i x 21> {alignment = 1 : i64} loc(#loc9)
  cir.func private  @printLongLongLine(!s64i) loc(#loc218)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_bad() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc220)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc16)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc221)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc20)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc21)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc22)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc216)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc216)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc21)
        cir.break loc(#loc23)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc9)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc9)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc24)
        cir.break loc(#loc25)
      }
      ] loc(#loc18)
    } loc(#loc222)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc28)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc31)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc32)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc32)
          %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc225)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc33)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc227)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc37)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc36)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc36)
            %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc37)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc227)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc38)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc39)
          } loc(#loc226)
        } loc(#loc224)
        cir.break loc(#loc40)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc41)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc41)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc42)
        cir.break loc(#loc43)
      }
      ] loc(#loc26)
    } loc(#loc223)
    cir.return loc(#loc13)
  } loc(#loc219)
  cir.func no_proto  @CWE190_Integer_Overflow__int64_t_fscanf_multiply_15_good() extra(#fn_attr) {
    %0 = cir.get_global @goodB2G1 : !cir.ptr<!cir.func<!void ()>> loc(#loc229)
    cir.call %0() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc46)
    %1 = cir.get_global @goodB2G2 : !cir.ptr<!cir.func<!void ()>> loc(#loc230)
    cir.call %1() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc48)
    %2 = cir.get_global @goodG2B1 : !cir.ptr<!cir.func<!void ()>> loc(#loc231)
    cir.call %2() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc50)
    %3 = cir.get_global @goodG2B2 : !cir.ptr<!cir.func<!void ()>> loc(#loc232)
    cir.call %3() : (!cir.ptr<!cir.func<!void ()>>) -> () loc(#loc52)
    cir.return loc(#loc45)
  } loc(#loc228)
  cir.global "private"  constant internal dsolocal @".str2" = #cir.const_array<"data value is too large to perform arithmetic safely.\00" : !cir.array<!s8i x 54>> : !cir.array<!s8i x 54> {alignment = 1 : i64} loc(#loc54)
  cir.func no_proto internal private  @goodB2G1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc234)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc59)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc235)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc63)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc64)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc65)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc237)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc237)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc64)
        cir.break loc(#loc68)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc69)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc69)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc70)
        cir.break loc(#loc71)
      }
      ] loc(#loc61)
    } loc(#loc236)
    cir.scope {
      %2 = cir.const #cir.int<8> : !s32i loc(#loc74)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc75)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc75)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc76)
        cir.break loc(#loc77)
      },
      case (default) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc80)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc81)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc81)
          %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc240)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc82)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc86)
              %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc87)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc88)
              %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc88)
              %12 = cir.binop(div, %9, %11) : !s64i loc(#loc243)
              %13 = cir.cmp(lt, %8, %12) : !s64i, !s32i loc(#loc244)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc90)
              cir.if %14 {
                %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc246)
                %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc96)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc95)
                %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc95)
                %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc96)
                cir.store %19, %15 : !s64i, !cir.ptr<!s64i> loc(#loc246)
                %20 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc97)
                cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc98)
              } else {
                %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc54)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc54)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc99)
              } loc(#loc245)
            } loc(#loc242)
          } loc(#loc241)
        } loc(#loc239)
        cir.break loc(#loc100)
      }
      ] loc(#loc72)
    } loc(#loc238)
    cir.return loc(#loc56)
  } loc(#loc233)
  cir.func no_proto internal private  @goodB2G2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc248)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc105)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc249)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc109)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @__isoc99_fscanf : !cir.ptr<!cir.func<!s32i (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, ...)>> loc(#loc110)
        %4 = cir.get_global @stdin : !cir.ptr<!cir.ptr<!ty__IO_FILE>> loc(#loc215)
        %5 = cir.load %4 : !cir.ptr<!cir.ptr<!ty__IO_FILE>>, !cir.ptr<!ty__IO_FILE> loc(#loc111)
        %6 = cir.get_global @".str" : !cir.ptr<!cir.array<!s8i x 4>> loc(#loc251)
        %7 = cir.cast(array_to_ptrdecay, %6 : !cir.ptr<!cir.array<!s8i x 4>>), !cir.ptr<!s8i> loc(#loc251)
        %8 = cir.call @__isoc99_fscanf(%5, %7, %0) : (!cir.ptr<!ty__IO_FILE>, !cir.ptr<!s8i>, !cir.ptr<!s64i>) -> !s32i loc(#loc110)
        cir.break loc(#loc114)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc115)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc115)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc116)
        cir.break loc(#loc117)
      }
      ] loc(#loc107)
    } loc(#loc250)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc120)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc123)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc124)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc124)
          %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc254)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc125)
          cir.if %7 {
            cir.scope {
              %8 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc129)
              %9 = cir.const #cir.int<9223372036854775807> : !s64i loc(#loc130)
              %10 = cir.const #cir.int<2> : !s32i loc(#loc131)
              %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc131)
              %12 = cir.binop(div, %9, %11) : !s64i loc(#loc257)
              %13 = cir.cmp(lt, %8, %12) : !s64i, !s32i loc(#loc258)
              %14 = cir.cast(int_to_bool, %13 : !s32i), !cir.bool loc(#loc133)
              cir.if %14 {
                %15 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc260)
                %16 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc139)
                %17 = cir.const #cir.int<2> : !s32i loc(#loc138)
                %18 = cir.cast(integral, %17 : !s32i), !s64i loc(#loc138)
                %19 = cir.binop(mul, %16, %18) nsw : !s64i loc(#loc139)
                cir.store %19, %15 : !s64i, !cir.ptr<!s64i> loc(#loc260)
                %20 = cir.load %15 : !cir.ptr<!s64i>, !s64i loc(#loc140)
                cir.call @printLongLongLine(%20) : (!s64i) -> () loc(#loc141)
              } else {
                %15 = cir.get_global @".str2" : !cir.ptr<!cir.array<!s8i x 54>> loc(#loc142)
                %16 = cir.cast(array_to_ptrdecay, %15 : !cir.ptr<!cir.array<!s8i x 54>>), !cir.ptr<!s8i> loc(#loc142)
                cir.call @printLine(%16) : (!cir.ptr<!s8i>) -> () loc(#loc143)
              } loc(#loc259)
            } loc(#loc256)
          } loc(#loc255)
        } loc(#loc253)
        cir.break loc(#loc144)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc145)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc145)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc146)
        cir.break loc(#loc147)
      }
      ] loc(#loc118)
    } loc(#loc252)
    cir.return loc(#loc102)
  } loc(#loc247)
  cir.func no_proto internal private  @goodG2B1() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc262)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc152)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc263)
    cir.scope {
      %2 = cir.const #cir.int<5> : !s32i loc(#loc156)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc157)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc157)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc158)
        cir.break loc(#loc159)
      },
      case (default) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc160)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc160)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc265)
        cir.break loc(#loc162)
      }
      ] loc(#loc154)
    } loc(#loc264)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc165)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc168)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc169)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc169)
          %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc268)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc170)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc270)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc174)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc173)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc173)
            %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc174)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc270)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc175)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc176)
          } loc(#loc269)
        } loc(#loc267)
        cir.break loc(#loc177)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc178)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc178)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc179)
        cir.break loc(#loc180)
      }
      ] loc(#loc163)
    } loc(#loc266)
    cir.return loc(#loc149)
  } loc(#loc261)
  cir.func no_proto internal private  @goodG2B2() extra(#fn_attr) {
    %0 = cir.alloca !s64i, !cir.ptr<!s64i>, ["data"] {alignment = 8 : i64} loc(#loc272)
    %1 = cir.const #cir.int<0> : !s64i loc(#loc185)
    cir.store %1, %0 : !s64i, !cir.ptr<!s64i> loc(#loc273)
    cir.scope {
      %2 = cir.const #cir.int<6> : !s32i loc(#loc189)
      cir.switch (%2 : !s32i) [
      case (equal, 6) {
        %3 = cir.const #cir.int<2> : !s32i loc(#loc190)
        %4 = cir.cast(integral, %3 : !s32i), !s64i loc(#loc190)
        cir.store %4, %0 : !s64i, !cir.ptr<!s64i> loc(#loc275)
        cir.break loc(#loc192)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc193)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc193)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc194)
        cir.break loc(#loc195)
      }
      ] loc(#loc187)
    } loc(#loc274)
    cir.scope {
      %2 = cir.const #cir.int<7> : !s32i loc(#loc198)
      cir.switch (%2 : !s32i) [
      case (equal, 7) {
        cir.scope {
          %3 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc201)
          %4 = cir.const #cir.int<0> : !s32i loc(#loc202)
          %5 = cir.cast(integral, %4 : !s32i), !s64i loc(#loc202)
          %6 = cir.cmp(gt, %3, %5) : !s64i, !s32i loc(#loc278)
          %7 = cir.cast(int_to_bool, %6 : !s32i), !cir.bool loc(#loc203)
          cir.if %7 {
            %8 = cir.alloca !s64i, !cir.ptr<!s64i>, ["result", init] {alignment = 8 : i64} loc(#loc280)
            %9 = cir.load %0 : !cir.ptr<!s64i>, !s64i loc(#loc207)
            %10 = cir.const #cir.int<2> : !s32i loc(#loc206)
            %11 = cir.cast(integral, %10 : !s32i), !s64i loc(#loc206)
            %12 = cir.binop(mul, %9, %11) nsw : !s64i loc(#loc207)
            cir.store %12, %8 : !s64i, !cir.ptr<!s64i> loc(#loc280)
            %13 = cir.load %8 : !cir.ptr<!s64i>, !s64i loc(#loc208)
            cir.call @printLongLongLine(%13) : (!s64i) -> () loc(#loc209)
          } loc(#loc279)
        } loc(#loc277)
        cir.break loc(#loc210)
      },
      case (default) {
        %3 = cir.get_global @".str1" : !cir.ptr<!cir.array<!s8i x 21>> loc(#loc211)
        %4 = cir.cast(array_to_ptrdecay, %3 : !cir.ptr<!cir.array<!s8i x 21>>), !cir.ptr<!s8i> loc(#loc211)
        cir.call @printLine(%4) : (!cir.ptr<!s8i>) -> () loc(#loc212)
        cir.break loc(#loc213)
      }
      ] loc(#loc196)
    } loc(#loc276)
    cir.return loc(#loc182)
  } loc(#loc271)
} loc(#loc)
#loc = loc("/home/ladisgin/git_proj/test_projects/juliet-c/testcases/CWE190_Integer_Overflow/s01/CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":0:0)
#loc1 = loc("/usr/include/stdio.h":463:1)
#loc2 = loc("/usr/include/stdio.h":465:33)
#loc3 = loc("/usr/include/stdio.h":149:1)
#loc4 = loc("/usr/include/stdio.h":149:14)
#loc5 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":31:24)
#loc6 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":31:28)
#loc7 = loc("../../../testcasesupport/std_testcase_io.h":14:1)
#loc8 = loc("../../../testcasesupport/std_testcase_io.h":14:33)
#loc9 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":35:19)
#loc10 = loc("../../../testcasesupport/std_testcase_io.h":26:1)
#loc11 = loc("../../../testcasesupport/std_testcase_io.h":26:49)
#loc12 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":23:1)
#loc13 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":53:1)
#loc14 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":25:5)
#loc15 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":25:13)
#loc16 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":26:12)
#loc17 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":26:5)
#loc18 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":27:5)
#loc19 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":37:5)
#loc20 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":27:12)
#loc21 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":31:9)
#loc22 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":31:17)
#loc23 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":32:9)
#loc24 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":35:9)
#loc25 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":36:9)
#loc26 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":38:5)
#loc27 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":52:5)
#loc28 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":38:12)
#loc29 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":41:9)
#loc30 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":46:9)
#loc31 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":41:12)
#loc32 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":41:19)
#loc33 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":41:17)
#loc34 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":42:9)
#loc35 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":44:13)
#loc36 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":44:37)
#loc37 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":44:30)
#loc38 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":45:31)
#loc39 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":45:13)
#loc40 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":47:9)
#loc41 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":50:19)
#loc42 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":50:9)
#loc43 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":51:9)
#loc44 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":205:1)
#loc45 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":211:1)
#loc46 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":207:5)
#loc47 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":207:14)
#loc48 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":208:5)
#loc49 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":208:14)
#loc50 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":209:5)
#loc51 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":209:14)
#loc52 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":210:5)
#loc53 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":210:14)
#loc54 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":92:27)
#loc55 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":60:1)
#loc56 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":97:1)
#loc57 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":62:5)
#loc58 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":62:13)
#loc59 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":63:12)
#loc60 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":63:5)
#loc61 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":64:5)
#loc62 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":74:5)
#loc63 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":64:12)
#loc64 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":68:9)
#loc65 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":68:17)
#loc66 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":68:24)
#loc67 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":68:28)
#loc68 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":69:9)
#loc69 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":72:19)
#loc70 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":72:9)
#loc71 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":73:9)
#loc72 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":75:5)
#loc73 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":96:5)
#loc74 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":75:12)
#loc75 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":79:19)
#loc76 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":79:9)
#loc77 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":80:9)
#loc78 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":82:9)
#loc79 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":94:9)
#loc80 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":82:12)
#loc81 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":82:19)
#loc82 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":82:17)
#loc83 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":83:9)
#loc84 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:13)
#loc85 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":93:13)
#loc86 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:17)
#loc87 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:25)
#loc88 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:35)
#loc89 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:36)
#loc90 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":85:22)
#loc91 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":86:13)
#loc92 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":89:13)
#loc93 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":91:13)
#loc94 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":87:17)
#loc95 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":87:41)
#loc96 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":87:34)
#loc97 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":88:35)
#loc98 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":88:17)
#loc99 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":92:17)
#loc100 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":95:9)
#loc101 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":100:1)
#loc102 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":137:1)
#loc103 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":102:5)
#loc104 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":102:13)
#loc105 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":103:12)
#loc106 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":103:5)
#loc107 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":104:5)
#loc108 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":114:5)
#loc109 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":104:12)
#loc110 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":108:9)
#loc111 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":108:17)
#loc112 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":108:24)
#loc113 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":108:28)
#loc114 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":109:9)
#loc115 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":112:19)
#loc116 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":112:9)
#loc117 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":113:9)
#loc118 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":115:5)
#loc119 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":136:5)
#loc120 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":115:12)
#loc121 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":118:9)
#loc122 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":130:9)
#loc123 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":118:12)
#loc124 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":118:19)
#loc125 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":118:17)
#loc126 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":119:9)
#loc127 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:13)
#loc128 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":129:13)
#loc129 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:17)
#loc130 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:25)
#loc131 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:35)
#loc132 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:36)
#loc133 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":121:22)
#loc134 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":122:13)
#loc135 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":125:13)
#loc136 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":127:13)
#loc137 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":123:17)
#loc138 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":123:41)
#loc139 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":123:34)
#loc140 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":124:35)
#loc141 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":124:17)
#loc142 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":128:27)
#loc143 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":128:17)
#loc144 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":131:9)
#loc145 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":134:19)
#loc146 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":134:9)
#loc147 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":135:9)
#loc148 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":140:1)
#loc149 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":170:1)
#loc150 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":142:5)
#loc151 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":142:13)
#loc152 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":143:12)
#loc153 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":143:5)
#loc154 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":144:5)
#loc155 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":154:5)
#loc156 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":144:12)
#loc157 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":148:19)
#loc158 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":148:9)
#loc159 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":149:9)
#loc160 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":152:16)
#loc161 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":152:9)
#loc162 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":153:9)
#loc163 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":155:5)
#loc164 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":169:5)
#loc165 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":155:12)
#loc166 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":158:9)
#loc167 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":163:9)
#loc168 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":158:12)
#loc169 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":158:19)
#loc170 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":158:17)
#loc171 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":159:9)
#loc172 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":161:13)
#loc173 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":161:37)
#loc174 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":161:30)
#loc175 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":162:31)
#loc176 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":162:13)
#loc177 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":164:9)
#loc178 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":167:19)
#loc179 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":167:9)
#loc180 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":168:9)
#loc181 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":173:1)
#loc182 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":203:1)
#loc183 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":175:5)
#loc184 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":175:13)
#loc185 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":176:12)
#loc186 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":176:5)
#loc187 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":177:5)
#loc188 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":187:5)
#loc189 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":177:12)
#loc190 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":181:16)
#loc191 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":181:9)
#loc192 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":182:9)
#loc193 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":185:19)
#loc194 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":185:9)
#loc195 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":186:9)
#loc196 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":188:5)
#loc197 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":202:5)
#loc198 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":188:12)
#loc199 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":191:9)
#loc200 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":196:9)
#loc201 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":191:12)
#loc202 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":191:19)
#loc203 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":191:17)
#loc204 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":192:9)
#loc205 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":194:13)
#loc206 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":194:37)
#loc207 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":194:30)
#loc208 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":195:31)
#loc209 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":195:13)
#loc210 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":197:9)
#loc211 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":200:19)
#loc212 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":200:9)
#loc213 = loc("CWE190_Integer_Overflow__int64_t_fscanf_multiply_15.c":201:9)
#loc214 = loc(fused[#loc1, #loc2])
#loc215 = loc(fused[#loc3, #loc4])
#loc216 = loc(fused[#loc5, #loc6])
#loc217 = loc(fused[#loc7, #loc8])
#loc218 = loc(fused[#loc10, #loc11])
#loc219 = loc(fused[#loc12, #loc13])
#loc220 = loc(fused[#loc14, #loc15])
#loc221 = loc(fused[#loc17, #loc16])
#loc222 = loc(fused[#loc18, #loc19])
#loc223 = loc(fused[#loc26, #loc27])
#loc224 = loc(fused[#loc29, #loc30])
#loc225 = loc(fused[#loc31, #loc32])
#loc226 = loc(fused[#loc34, #loc30])
#loc227 = loc(fused[#loc35, #loc36])
#loc228 = loc(fused[#loc44, #loc45])
#loc229 = loc(fused[#loc46, #loc47])
#loc230 = loc(fused[#loc48, #loc49])
#loc231 = loc(fused[#loc50, #loc51])
#loc232 = loc(fused[#loc52, #loc53])
#loc233 = loc(fused[#loc55, #loc56])
#loc234 = loc(fused[#loc57, #loc58])
#loc235 = loc(fused[#loc60, #loc59])
#loc236 = loc(fused[#loc61, #loc62])
#loc237 = loc(fused[#loc66, #loc67])
#loc238 = loc(fused[#loc72, #loc73])
#loc239 = loc(fused[#loc78, #loc79])
#loc240 = loc(fused[#loc80, #loc81])
#loc241 = loc(fused[#loc83, #loc79])
#loc242 = loc(fused[#loc84, #loc85])
#loc243 = loc(fused[#loc87, #loc88])
#loc244 = loc(fused[#loc86, #loc89])
#loc245 = loc(fused[#loc91, #loc92, #loc93, #loc85])
#loc246 = loc(fused[#loc94, #loc95])
#loc247 = loc(fused[#loc101, #loc102])
#loc248 = loc(fused[#loc103, #loc104])
#loc249 = loc(fused[#loc106, #loc105])
#loc250 = loc(fused[#loc107, #loc108])
#loc251 = loc(fused[#loc112, #loc113])
#loc252 = loc(fused[#loc118, #loc119])
#loc253 = loc(fused[#loc121, #loc122])
#loc254 = loc(fused[#loc123, #loc124])
#loc255 = loc(fused[#loc126, #loc122])
#loc256 = loc(fused[#loc127, #loc128])
#loc257 = loc(fused[#loc130, #loc131])
#loc258 = loc(fused[#loc129, #loc132])
#loc259 = loc(fused[#loc134, #loc135, #loc136, #loc128])
#loc260 = loc(fused[#loc137, #loc138])
#loc261 = loc(fused[#loc148, #loc149])
#loc262 = loc(fused[#loc150, #loc151])
#loc263 = loc(fused[#loc153, #loc152])
#loc264 = loc(fused[#loc154, #loc155])
#loc265 = loc(fused[#loc161, #loc160])
#loc266 = loc(fused[#loc163, #loc164])
#loc267 = loc(fused[#loc166, #loc167])
#loc268 = loc(fused[#loc168, #loc169])
#loc269 = loc(fused[#loc171, #loc167])
#loc270 = loc(fused[#loc172, #loc173])
#loc271 = loc(fused[#loc181, #loc182])
#loc272 = loc(fused[#loc183, #loc184])
#loc273 = loc(fused[#loc186, #loc185])
#loc274 = loc(fused[#loc187, #loc188])
#loc275 = loc(fused[#loc191, #loc190])
#loc276 = loc(fused[#loc196, #loc197])
#loc277 = loc(fused[#loc199, #loc200])
#loc278 = loc(fused[#loc201, #loc202])
#loc279 = loc(fused[#loc204, #loc200])
#loc280 = loc(fused[#loc205, #loc206])
